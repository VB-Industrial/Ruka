
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  080175c8  080175c8  000275c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b7c  08018b7c  00030240  2**0
                  CONTENTS
  4 .ARM          00000008  08018b7c  08018b7c  00028b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b84  08018b84  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08018b84  08018b84  00028b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08018b94  08018b94  00028b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08018ba4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000240  08018de4  00030240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  08018de4  00030adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   000479d6  00000000  00000000  000302b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000087d7  00000000  00000000  00077c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029b8  00000000  00000000  00080460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020b0  00000000  00000000  00082e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b1f  00000000  00000000  00084ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003735a  00000000  00000000  000b69e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012979a  00000000  00000000  000edd41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cad4  00000000  00000000  002174dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00223fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000240 	.word	0x20000240
 80001fc:	00000000 	.word	0x00000000
 8000200:	080175b0 	.word	0x080175b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000244 	.word	0x20000244
 800021c:	080175b0 	.word	0x080175b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	08017ff4 	.word	0x08017ff4

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	08017ff4 	.word	0x08017ff4

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f011 fe5a 	bl	8012d4a <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	609a      	str	r2, [r3, #8]
  _address = address;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	715a      	strb	r2, [r3, #5]
}
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08017fd8 	.word	0x08017fd8

080010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa5c 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f012 ff08 	bl	8013f22 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
 8001116:	8bfb      	ldrh	r3, [r7, #30]
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2306      	movs	r3, #6
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 fa05 	bl	8001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	b21a      	sxth	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001148:	7e3b      	ldrb	r3, [r7, #24]
 800114a:	b21a      	sxth	r2, r3
 800114c:	7e7b      	ldrb	r3, [r7, #25]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b08      	subs	r3, #8
 800115a:	2b26      	cmp	r3, #38	; 0x26
 800115c:	f200 8152 	bhi.w	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001385 	.word	0x08001385
 800116c:	08001405 	.word	0x08001405
 8001170:	08001405 	.word	0x08001405
 8001174:	08001405 	.word	0x08001405
 8001178:	08001405 	.word	0x08001405
 800117c:	08001405 	.word	0x08001405
 8001180:	08001205 	.word	0x08001205
 8001184:	08001405 	.word	0x08001405
 8001188:	08001405 	.word	0x08001405
 800118c:	08001405 	.word	0x08001405
 8001190:	08001405 	.word	0x08001405
 8001194:	08001405 	.word	0x08001405
 8001198:	08001285 	.word	0x08001285
 800119c:	08001405 	.word	0x08001405
 80011a0:	08001405 	.word	0x08001405
 80011a4:	08001405 	.word	0x08001405
 80011a8:	08001405 	.word	0x08001405
 80011ac:	08001405 	.word	0x08001405
 80011b0:	08001305 	.word	0x08001305
 80011b4:	08001405 	.word	0x08001405
 80011b8:	08001405 	.word	0x08001405
 80011bc:	08001405 	.word	0x08001405
 80011c0:	08001405 	.word	0x08001405
 80011c4:	08001405 	.word	0x08001405
 80011c8:	08001405 	.word	0x08001405
 80011cc:	08001405 	.word	0x08001405
 80011d0:	08001405 	.word	0x08001405
 80011d4:	08001405 	.word	0x08001405
 80011d8:	08001405 	.word	0x08001405
 80011dc:	08001405 	.word	0x08001405
 80011e0:	08001405 	.word	0x08001405
 80011e4:	08001405 	.word	0x08001405
 80011e8:	08001385 	.word	0x08001385
 80011ec:	08001405 	.word	0x08001405
 80011f0:	08001405 	.word	0x08001405
 80011f4:	08001405 	.word	0x08001405
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001405 	.word	0x08001405
 8001200:	08001385 	.word	0x08001385
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b3 	bl	8000574 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	2100      	movs	r1, #0
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9d9 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001228:	4603      	mov	r3, r0
 800122a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800122e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f99e 	bl	8000574 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800123e:	f7ff fb2d 	bl	800089c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	2101      	movs	r1, #1
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9c4 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001252:	4603      	mov	r3, r0
 8001254:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 8001258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f989 	bl	8000574 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001268:	f7ff fb18 	bl	800089c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	2102      	movs	r1, #2
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9af 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800127c:	4603      	mov	r3, r0
 800127e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001282:	e0bf      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f973 	bl	8000574 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f999 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f95e 	bl	8000574 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f984 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f949 	bl	8000574 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f96f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001302:	e07f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f933 	bl	8000574 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001314:	f7ff fac2 	bl	800089c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f959 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001328:	4603      	mov	r3, r0
 800132a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800132e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f91e 	bl	8000574 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	2101      	movs	r1, #1
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f944 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001352:	4603      	mov	r3, r0
 8001354:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f909 	bl	8000574 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001368:	f7ff fa98 	bl	800089c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	2102      	movs	r1, #2
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f92f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800137c:	4603      	mov	r3, r0
 800137e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001382:	e03f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001384:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f3 	bl	8000574 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001394:	f7ff fa82 	bl	800089c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f919 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8de 	bl	8000574 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f904 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c9 	bl	8000574 <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	2102      	movs	r1, #2
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f8ef 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001402:	bf00      	nop
  }

  return xyz;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	40300000 	.word	0x40300000
 8001414:	408c2000 	.word	0x408c2000
 8001418:	40590000 	.word	0x40590000

0800141c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f012 fd79 	bl	8013f22 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220b      	movs	r2, #11
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001436:	4618      	mov	r0, r3
 8001438:	f012 fd7b 	bl	8013f32 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2203      	movs	r2, #3
 8001454:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001470:	621a      	str	r2, [r3, #32]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	080175c8 	.word	0x080175c8
 8001480:	3c23d70a 	.word	0x3c23d70a

08001484 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f012 fd45 	bl	8013f22 <memset>

  event->version   = sizeof(sensors_event_t);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2203      	movs	r2, #3
 80014aa:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014ac:	f008 fe2a 	bl	800a104 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	221a      	movs	r2, #26
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe15 	bl	80010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f853 	bl	8001576 <_ZN3imu6VectorILh3EE1xEv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84f 	bl	800158c <_ZN3imu6VectorILh3EE1yEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb9e 	bl	8000c38 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84c 	bl	80015a4 <_ZN3imu6VectorILh3EE1zEv>
 800150c:	4603      	mov	r3, r0
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb8f 	bl	8000c38 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61da      	str	r2, [r3, #28]

  return true;
 8001520:	2401      	movs	r4, #1
}
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81a 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800152c:	4623      	mov	r3, r4
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800154a:	7aba      	ldrb	r2, [r7, #10]
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f89b 	bl	800168c <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    {
    }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3310      	adds	r3, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2218      	movs	r2, #24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f012 fca9 	bl	8013f22 <memset>
    }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd29 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08017fd8 	.word	0x08017fd8

0800161c <_ZN15Adafruit_BNO055D0Ev>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
 800162a:	2110      	movs	r1, #16
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f011 fb8c 	bl	8012d4a <_ZdlPvj>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN3imu10QuaternionC1Ev+0x4c>)
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016b4:	f009 ffc2 	bl	800b63c <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016bc:	bf00      	nop
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016c0:	f00a f98b 	bl	800b9da <HAL_I2C_GetState>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f4      	bne.n	80016be <I2C_n_byte_receive+0x32>

  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000030c 	.word	0x2000030c

080016e4 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016fe:	2229      	movs	r2, #41	; 0x29
 8001700:	2137      	movs	r1, #55	; 0x37
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001704:	f7ff fcd8 	bl	80010b8 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800170a:	f7ff ff97 	bl	800163c <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001710:	f7ff ff54 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	4293      	cmp	r3, r2
 8001722:	d105      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001726:	f7ff ff1b 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800172c:	f7ff ff64 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000025c 	.word	0x2000025c
 800173c:	20000270 	.word	0x20000270
 8001740:	20000290 	.word	0x20000290

08001744 <_GLOBAL__sub_I_bno>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffc9 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <_GLOBAL__sub_D_bno>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffc1 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_DMA_Init+0x60>)
 800176c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_DMA_Init+0x60>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6493      	str	r3, [r2, #72]	; 0x48
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_DMA_Init+0x60>)
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_DMA_Init+0x60>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_DMA_Init+0x60>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6493      	str	r3, [r2, #72]	; 0x48
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_DMA_Init+0x60>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200b      	movs	r0, #11
 80017a0:	f008 fdb9 	bl	800a316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f008 fdd0 	bl	800a34a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200c      	movs	r0, #12
 80017b0:	f008 fdb1 	bl	800a316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b4:	200c      	movs	r0, #12
 80017b6:	f008 fdc8 	bl	800a34a <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_FDCAN1_Init+0x8c>)
 80017d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001800:	2201      	movs	r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001806:	221d      	movs	r2, #29
 8001808:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800180c:	220a      	movs	r2, #10
 800180e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001812:	2204      	movs	r2, #4
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001818:	2201      	movs	r2, #1
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800181e:	2202      	movs	r2, #2
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001824:	2202      	movs	r2, #2
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001830:	2203      	movs	r2, #3
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800183c:	f009 f828 	bl	800a890 <HAL_FDCAN_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001846:	f000 fb64 	bl	8001f12 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002a8 	.word	0x200002a8
 8001854:	40006400 	.word	0x40006400

08001858 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f012 fb52 	bl	8013f22 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_FDCAN_MspInit+0xac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d138      	bne.n	80018fa <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f00b feb7 	bl	800d60c <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018a4:	f000 fb35 	bl	8001f12 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018ea:	2309      	movs	r3, #9
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_FDCAN_MspInit+0xb4>)
 80018f6:	f009 fc51 	bl	800b19c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	; 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40006400 	.word	0x40006400
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <MX_GPIO_Init+0x140>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <MX_GPIO_Init+0x140>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <MX_GPIO_Init+0x140>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <MX_GPIO_Init+0x140>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <MX_GPIO_Init+0x140>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 800199e:	2200      	movs	r2, #0
 80019a0:	f649 3110 	movw	r1, #39696	; 0x9b10
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f009 fd7a 	bl	800b4a0 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019b2:	f009 fd75 	bl	800b4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4827      	ldr	r0, [pc, #156]	; (8001a58 <MX_GPIO_Init+0x148>)
 80019bc:	f009 fd70 	bl	800b4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c4:	2303      	movs	r3, #3
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4820      	ldr	r0, [pc, #128]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019d4:	f009 fbe2 	bl	800b19c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 80019d8:	230c      	movs	r3, #12
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019ec:	f009 fbd6 	bl	800b19c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 80019f0:	f649 3310 	movw	r3, #39696	; 0x9b10
 80019f4:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f009 fbc6 	bl	800b19c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001a10:	2320      	movs	r3, #32
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <MX_GPIO_Init+0x144>)
 8001a28:	f009 fbb8 	bl	800b19c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_GPIO_Init+0x148>)
 8001a44:	f009 fbaa 	bl	800b19c <HAL_GPIO_Init>

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00

08001a5c <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C4_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C4_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a98:	f009 fd34 	bl	800b504 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 fa36 	bl	8001f12 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001aaa:	f00a ff35 	bl	800c918 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 fa2d 	bl	8001f12 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001abc:	f00a ff77 	bl	800c9ae <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 fa24 	bl	8001f12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000030c 	.word	0x2000030c
 8001ad4:	40008400 	.word	0x40008400
 8001ad8:	00702991 	.word	0x00702991

08001adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a0      	sub	sp, #128	; 0x80
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f012 fa10 	bl	8013f22 <memset>
  if(i2cHandle->Instance==I2C4)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_I2C_MspInit+0x1a4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f040 80b5 	bne.w	8001c78 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00b fd75 	bl	800d60c <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b28:	f000 f9f3 	bl	8001f12 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4844      	ldr	r0, [pc, #272]	; (8001c88 <HAL_I2C_MspInit+0x1ac>)
 8001b78:	f009 fb10 	bl	800b19c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b94:	4619      	mov	r1, r3
 8001b96:	483d      	ldr	r0, [pc, #244]	; (8001c8c <HAL_I2C_MspInit+0x1b0>)
 8001b98:	f009 fb00 	bl	800b19c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_I2C_MspInit+0x1b8>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001bea:	4829      	ldr	r0, [pc, #164]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bec:	f008 fbc8 	bl	800a380 <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001bf6:	f000 f98c 	bl	8001f12 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_I2C_MspInit+0x1c0>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c0e:	2217      	movs	r2, #23
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c14:	2210      	movs	r2, #16
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001c3c:	4816      	ldr	r0, [pc, #88]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c3e:	f008 fb9f 	bl	800a380 <HAL_DMA_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001c48:	f000 f963 	bl	8001f12 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2052      	movs	r0, #82	; 0x52
 8001c5e:	f008 fb5a 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001c62:	2052      	movs	r0, #82	; 0x52
 8001c64:	f008 fb71 	bl	800a34a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2053      	movs	r0, #83	; 0x53
 8001c6e:	f008 fb52 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001c72:	2053      	movs	r0, #83	; 0x53
 8001c74:	f008 fb69 	bl	800a34a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3780      	adds	r7, #128	; 0x80
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40008400 	.word	0x40008400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	20000360 	.word	0x20000360
 8001c94:	40020008 	.word	0x40020008
 8001c98:	200003c0 	.word	0x200003c0
 8001c9c:	4002001c 	.word	0x4002001c

08001ca0 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
		mc->motor_type = 17;
		mc->direction = 1;
	}
	else if (JOINT_N == 2)
	{
		mc->motor_type = 23;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2217      	movs	r2, #23
 8001cac:	701a      	strb	r2, [r3, #0]
		mc->direction = 1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	729a      	strb	r2, [r3, #10]
	{
		mc->motor_type = 14;
		mc->direction = 1;
	}

	switch(mc->motor_type)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cba:	2b17      	cmp	r3, #23
 8001cbc:	d019      	beq.n	8001cf2 <motor_config_assembler+0x52>
 8001cbe:	2b17      	cmp	r3, #23
 8001cc0:	dc20      	bgt.n	8001d04 <motor_config_assembler+0x64>
 8001cc2:	2b0e      	cmp	r3, #14
 8001cc4:	d002      	beq.n	8001ccc <motor_config_assembler+0x2c>
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d00a      	beq.n	8001ce0 <motor_config_assembler+0x40>
	case 23:
		mc->max_irun_scaler = 31;
		mc->max_effort = 10.2;
		mc->init_irun = 4;
	}
}
 8001cca:	e01b      	b.n	8001d04 <motor_config_assembler+0x64>
		mc->max_irun_scaler = 8;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2208      	movs	r2, #8
 8001cd0:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001cd8:	605a      	str	r2, [r3, #4]
		mc->init_irun = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	725a      	strb	r2, [r3, #9]
		mc->max_irun_scaler = 12;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <motor_config_assembler+0x70>)
 8001cea:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	725a      	strb	r2, [r3, #9]
		mc->max_irun_scaler = 31;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	221f      	movs	r2, #31
 8001cf6:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <motor_config_assembler+0x74>)
 8001cfc:	605a      	str	r2, [r3, #4]
		mc->init_irun = 4;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	725a      	strb	r2, [r3, #9]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	4079999a 	.word	0x4079999a
 8001d14:	41233333 	.word	0x41233333

08001d18 <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
		jconf->joint_gear_ratio = 1;
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
	}
	else if (JOINT_N == 2)
	{
		jconf->motor_gear_ratio = 50;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <joint_config_assembler+0x84>)
 8001d24:	611a      	str	r2, [r3, #16]
		jconf->joint_gear_ratio = 1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d2c:	60da      	str	r2, [r3, #12]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d34:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001da0 <joint_config_assembler+0x88>
 8001d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4a:	ee17 2a90 	vmov	r2, s15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
		jconf->motor_gear_ratio = 19.203208;
		jconf->joint_gear_ratio = 1;
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
	}

	jconf->domain_id = 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	705a      	strb	r2, [r3, #1]
	jconf->lower_limit_enc = 0.0;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
	jconf->lower_limit_ticks = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
	jconf->motor_type = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	70da      	strb	r2, [r3, #3]
	jconf->upper_limit_enc = 0.0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_ticks = 0;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
	jconf->zero_enc = 0.0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
	jconf->upper_limit_effort = 0.0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
	jconf->direction = 1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	711a      	strb	r2, [r3, #4]
//
//
//#define NEMA14_GR 19 //TODO possible to correct ratio to 19.38/187 for more precise velocity calculation
//#define NEMA17_GR 50
//#define NEMA23_GR 50
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	42480000 	.word	0x42480000
 8001da0:	47480000 	.word	0x47480000

08001da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b094      	sub	sp, #80	; 0x50
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001daa:	f008 f946 	bl	800a03a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dae:	f000 f865 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db2:	f7ff fdad 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001db6:	f7ff fcd5 	bl	8001764 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001dba:	f7ff fd05 	bl	80017c8 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001dbe:	f7ff fe4d 	bl	8001a5c <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001dc2:	f007 ffd3 	bl	8009d6c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001dc6:	f007 f979 	bl	80090bc <MX_SPI1_Init>
  MX_SPI3_Init();
 8001dca:	f007 f9b5 	bl	8009138 <MX_SPI3_Init>
  MX_TIM8_Init();
 8001dce:	f007 fbd1 	bl	8009574 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8001dd2:	4827      	ldr	r0, [pc, #156]	; (8001e70 <main+0xcc>)
 8001dd4:	f005 f97a 	bl	80070cc <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8001dd8:	4825      	ldr	r0, [pc, #148]	; (8001e70 <main+0xcc>)
 8001dda:	f005 f8d3 	bl	8006f84 <setup_cyphal>
  HAL_Delay(10);
 8001dde:	200a      	movs	r0, #10
 8001de0:	f008 f99c 	bl	800a11c <HAL_Delay>
  joint_config_assembler(&jc);
 8001de4:	4823      	ldr	r0, [pc, #140]	; (8001e74 <main+0xd0>)
 8001de6:	f7ff ff97 	bl	8001d18 <joint_config_assembler>
  motor_config_assembler(&mc);
 8001dea:	4823      	ldr	r0, [pc, #140]	; (8001e78 <main+0xd4>)
 8001dec:	f7ff ff58 	bl	8001ca0 <motor_config_assembler>
  HAL_Delay(10);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f008 f993 	bl	800a11c <HAL_Delay>
  tmc5160_init(&mc);
 8001df6:	4820      	ldr	r0, [pc, #128]	; (8001e78 <main+0xd4>)
 8001df8:	f007 fe56 	bl	8009aa8 <tmc5160_init>
  HAL_Delay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f008 f98d 	bl	800a11c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8001e06:	f008 f97d 	bl	800a104 <HAL_GetTick>
 8001e0a:	64f8      	str	r0, [r7, #76]	; 0x4c
  uint32_t last_js = HAL_GetTick();
 8001e0c:	f008 f97a 	bl	800a104 <HAL_GetTick>
 8001e10:	64b8      	str	r0, [r7, #72]	; 0x48

  vec_4ax linear = {0};
 8001e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  //rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
  //IMU_setup();

  while (1)
  {
      uint32_t now = HAL_GetTick();
 8001e3a:	f008 f963 	bl	800a104 <HAL_GetTick>
 8001e3e:	6438      	str	r0, [r7, #64]	; 0x40
      if ( (now - last_hbeat) >= 1000) {
 8001e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4a:	d303      	bcc.n	8001e54 <main+0xb0>
          last_hbeat = now;
 8001e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
          heartbeat();
 8001e50:	f005 f868 	bl	8006f24 <heartbeat>
      	  //imu_get_gyro(&gyro);
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      if ( (now - last_js) >= 100) {
 8001e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b63      	cmp	r3, #99	; 0x63
 8001e5c:	d904      	bls.n	8001e68 <main+0xc4>
    	  last_js = now;
 8001e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
    	  send_JS(&jc);
 8001e62:	4804      	ldr	r0, [pc, #16]	; (8001e74 <main+0xd0>)
 8001e64:	f005 f81c 	bl	8006ea0 <send_JS>
      }
      cyphal_loop();
 8001e68:	f005 f922 	bl	80070b0 <cyphal_loop>
  {
 8001e6c:	e7e5      	b.n	8001e3a <main+0x96>
 8001e6e:	bf00      	nop
 8001e70:	200002a8 	.word	0x200002a8
 8001e74:	2000042c 	.word	0x2000042c
 8001e78:	20000420 	.word	0x20000420

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	; 0x50
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	2238      	movs	r2, #56	; 0x38
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f012 f849 	bl	8013f22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f00a fdd2 	bl	800ca48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001eba:	2328      	movs	r3, #40	; 0x28
 8001ebc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00a fe6e 	bl	800cbb0 <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001eda:	f000 f81a 	bl	8001f12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00b f96a 	bl	800d1d4 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f06:	f000 f804 	bl	8001f12 <Error_Handler>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3750      	adds	r7, #80	; 0x50
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f16:	b672      	cpsid	i
}
 8001f18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <Error_Handler+0x8>

08001f1c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d019      	beq.n	8001faa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
        }
    }
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4798      	blx	r3
    }
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ffd4 	bl	8001fde <_ZNSt14_Function_baseD1Ev>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZNSt8functionIFvvEED1Ev>:
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ffc7 	bl	8001fde <_ZNSt14_Function_baseD1Ev>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f005 f912 	bl	8007294 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3310      	adds	r3, #16
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f005 f937 	bl	80072ea <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	080180c4 	.word	0x080180c4

080020b4 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80020be:	480d      	ldr	r0, [pc, #52]	; (80020f4 <_Z7alloc_fP14CanardInstancej+0x40>)
 80020c0:	f005 f93e 	bl	8007340 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f010 fe81 	bl	8012dd8 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80020d6:	4807      	ldr	r0, [pc, #28]	; (80020f4 <_Z7alloc_fP14CanardInstancej+0x40>)
 80020d8:	f005 f943 	bl	8007362 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	6814      	ldr	r4, [r2, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	47a0      	blx	r4
 80020ea:	4603      	mov	r3, r0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	20000988 	.word	0x20000988

080020f8 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <_Z6free_fP14CanardInstancePv+0x40>)
 8002104:	f005 f91c 	bl	8007340 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002108:	4603      	mov	r3, r0
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8002114:	2001      	movs	r0, #1
 8002116:	f010 fe5f 	bl	8012dd8 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <_Z6free_fP14CanardInstancePv+0x40>)
 800211c:	f005 f921 	bl	8007362 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8002120:	4603      	mov	r3, r0
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	3204      	adds	r2, #4
 8002126:	6814      	ldr	r4, [r2, #0]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	47a0      	blx	r4
 8002130:	bf00      	nop
}
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}
 8002138:	20000988 	.word	0x20000988

0800213c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	330c      	adds	r3, #12
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f010 fb2a 	bl	80127c0 <canardTxInit>
        utilities(utilities)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	08018288 	.word	0x08018288

08002180 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	460b      	mov	r3, r1
 800218e:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	7afa      	ldrb	r2, [r7, #11]
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3308      	adds	r3, #8
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 f8f9 	bl	800739a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2248      	movs	r2, #72	; 0x48
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	f7ff ffb5 	bl	800213c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08018264 	.word	0x08018264

080021ec <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff42 	bl	8002088 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08018148 	.word	0x08018148

08002218 <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002222:	edd7 7a01 	vldr	s15, [r7, #4]
 8002226:	eef0 7ae7 	vabs.f32	s15, s15
 800222a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800225c <_ZSt8isfinitef+0x44>
 800222e:	eef4 7a47 	vcmp.f32	s15, s14
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	bf8c      	ite	hi
 8002238:	2301      	movhi	r3, #1
 800223a:	2300      	movls	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	7f7fffff 	.word	0x7f7fffff

08002260 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d201      	bcs.n	8002276 <nunavutChooseMin+0x16>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	e000      	b.n	8002278 <nunavutChooseMin+0x18>
 8002276:	683b      	ldr	r3, [r7, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	6978      	ldr	r0, [r7, #20]
 800229a:	f7ff ffe1 	bl	8002260 <nunavutChooseMin>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80022a6:	6939      	ldr	r1, [r7, #16]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffd9 	bl	8002260 <nunavutChooseMin>
 80022ae:	4603      	mov	r3, r0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b092      	sub	sp, #72	; 0x48
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 80022c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d145      	bne.n	800235c <nunavutCopyBits+0xa4>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d140      	bne.n	800235c <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 80022e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4413      	add	r3, r2
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 80022f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022fa:	f011 fdf8 	bl	8013eee <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800230a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 808a 	beq.w	8002428 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8002314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002318:	4413      	add	r3, r2
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 800231c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800231e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002320:	4413      	add	r3, r2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8002324:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002328:	2201      	movs	r2, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233e:	43db      	mvns	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4013      	ands	r3, r2
 8002344:	b2da      	uxtb	r2, r3
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	7819      	ldrb	r1, [r3, #0]
 800234a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234e:	400b      	ands	r3, r1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b2da      	uxtb	r2, r3
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	701a      	strb	r2, [r3, #0]
        }
    }
 800235a:	e065      	b.n	8002428 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 800236c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8002374:	e053      	b.n	800241e <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8002376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8002380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 800238a:	7dfa      	ldrb	r2, [r7, #23]
 800238c:	7dbb      	ldrb	r3, [r7, #22]
 800238e:	429a      	cmp	r2, r3
 8002390:	d901      	bls.n	8002396 <nunavutCopyBits+0xde>
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	e000      	b.n	8002398 <nunavutCopyBits+0xe0>
 8002396:	7dbb      	ldrb	r3, [r7, #22]
 8002398:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 800239a:	7d7b      	ldrb	r3, [r7, #21]
 800239c:	f1c3 0008 	rsb	r0, r3, #8
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7ff ff5a 	bl	8002260 <nunavutChooseMin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80023b0:	7d3b      	ldrb	r3, [r7, #20]
 80023b2:	2201      	movs	r2, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80023c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	fa42 f303 	asr.w	r3, r2, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	7dbb      	ldrb	r3, [r7, #22]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80023e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e2:	08db      	lsrs	r3, r3, #3
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	4413      	add	r3, r2
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4013      	ands	r3, r2
 80023f2:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80023f4:	7cba      	ldrb	r2, [r7, #18]
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	4013      	ands	r3, r2
 80023fa:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80023fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fe:	08db      	lsrs	r3, r3, #3
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	7c79      	ldrb	r1, [r7, #17]
 8002406:	7c3a      	ldrb	r2, [r7, #16]
 8002408:	430a      	orrs	r2, r1
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800240e:	7d3b      	ldrb	r3, [r7, #20]
 8002410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002412:	4413      	add	r3, r2
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8002416:	7d3b      	ldrb	r3, [r7, #20]
 8002418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800241a:	4413      	add	r3, r2
 800241c:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002422:	429a      	cmp	r2, r3
 8002424:	d8a7      	bhi.n	8002376 <nunavutCopyBits+0xbe>
        }

    }
}
 8002426:	e000      	b.n	800242a <nunavutCopyBits+0x172>
    }
 8002428:	bf00      	nop
}
 800242a:	bf00      	nop
 800242c:	3748      	adds	r7, #72	; 0x48
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b088      	sub	sp, #32
 8002436:	af02      	add	r7, sp, #8
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002440:	6a3a      	ldr	r2, [r7, #32]
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff1d 	bl	8002284 <nunavutSaturateBufferFragmentBitLength>
 800244a:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	18d0      	adds	r0, r2, r3
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	3307      	adds	r3, #7
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	461a      	mov	r2, r3
 8002462:	2100      	movs	r1, #0
 8002464:	f011 fd5d 	bl	8013f22 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	2100      	movs	r1, #0
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ff20 	bl	80022b8 <nunavutCopyBits>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	00da      	lsls	r2, r3, #3
 8002490:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	440b      	add	r3, r1
 8002498:	429a      	cmp	r2, r3
 800249a:	d202      	bcs.n	80024a2 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800249c:	f06f 0302 	mvn.w	r3, #2
 80024a0:	e010      	b.n	80024c4 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80024a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024a6:	2140      	movs	r1, #64	; 0x40
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fed9 	bl	8002260 <nunavutChooseMin>
 80024ae:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fefb 	bl	80022b8 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	2110      	movs	r1, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff febe 	bl	8002260 <nunavutChooseMin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68b8      	ldr	r0, [r7, #8]
 80024ec:	f7ff feca 	bl	8002284 <nunavutSaturateBufferFragmentBitLength>
 80024f0:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80024f6:	f107 0012 	add.w	r0, r7, #18
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	2100      	movs	r1, #0
 8002504:	f7ff fed8 	bl	80022b8 <nunavutCopyBits>
    return val;
 8002508:	8a7b      	ldrh	r3, [r7, #18]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b088      	sub	sp, #32
 8002516:	af02      	add	r7, sp, #8
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2120      	movs	r1, #32
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe9b 	bl	8002260 <nunavutChooseMin>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	68b8      	ldr	r0, [r7, #8]
 8002532:	f7ff fea7 	bl	8002284 <nunavutSaturateBufferFragmentBitLength>
 8002536:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 800253c:	f107 0010 	add.w	r0, r7, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	2100      	movs	r1, #0
 800254a:	f7ff feb5 	bl	80022b8 <nunavutCopyBits>
    return val;
 800254e:	693b      	ldr	r3, [r7, #16]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8002558:	b480      	push	{r7}
 800255a:	b08b      	sub	sp, #44	; 0x2c
 800255c:	af00      	add	r7, sp, #0
 800255e:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <nunavutFloat16Pack+0xb8>)
 8002564:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8002566:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800256a:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 800256c:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8002570:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8002572:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8002576:	613b      	str	r3, [r7, #16]
    in.real = value;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002582:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	4053      	eors	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	429a      	cmp	r2, r3
 8002596:	d313      	bcc.n	80025c0 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 80025a2:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80025a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025a8:	e025      	b.n	80025f6 <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d902      	bls.n	80025b8 <nunavutFloat16Pack+0x60>
 80025b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80025b6:	e001      	b.n	80025bc <nunavutFloat16Pack+0x64>
 80025b8:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80025bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025be:	e01a      	b.n	80025f6 <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025c6:	f023 030f 	bic.w	r3, r3, #15
 80025ca:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 80025cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80025d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d8:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d901      	bls.n	80025f0 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	0b5b      	lsrs	r3, r3, #13
 80025f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025fe:	4313      	orrs	r3, r2
 8002600:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 8002602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8002604:	4618      	mov	r0, r3
 8002606:	372c      	adds	r7, #44	; 0x2c
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	fffff000 	.word	0xfffff000

08002614 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 800261e:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 8002622:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8002624:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8002628:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	035a      	lsls	r2, r3, #13
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <nunavutFloat16Unpack+0x6c>)
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8002634:	ed97 7a03 	vldr	s14, [r7, #12]
 8002638:	edd7 7a05 	vldr	s15, [r7, #20]
 800263c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002640:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8002644:	ed97 7a03 	vldr	s14, [r7, #12]
 8002648:	edd7 7a04 	vldr	s15, [r7, #16]
 800264c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	db03      	blt.n	800265e <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 800265c:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
    return out.real;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	ee07 3a90 	vmov	s15, r3
}
 8002672:	eeb0 0a67 	vmov.f32	s0, s15
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	0fffe000 	.word	0x0fffe000

08002684 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8002690:	2310      	movs	r3, #16
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff ff18 	bl	80024cc <nunavutGetU16>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ffb8 	bl	8002614 <nunavutFloat16Unpack>
 80026a4:	eef0 7a40 	vmov.f32	s15, s0
}
 80026a8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 80026be:	2320      	movs	r3, #32
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ff24 	bl	8002512 <nunavutGetU32>
 80026ca:	4603      	mov	r3, r0
 80026cc:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	ee07 3a90 	vmov	s15, r3
}
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b08c      	sub	sp, #48	; 0x30
 80026e2:	af04      	add	r7, sp, #16
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <uavcan_node_Health_1_0_serialize_+0x1e>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <uavcan_node_Health_1_0_serialize_+0x1e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80026fc:	f06f 0301 	mvn.w	r3, #1
 8002700:	e048      	b.n	8002794 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	2b07      	cmp	r3, #7
 800270e:	d802      	bhi.n	8002716 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002710:	f06f 0302 	mvn.w	r3, #2
 8002714:	e03e      	b.n	8002794 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002720:	7efb      	ldrb	r3, [r7, #27]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d901      	bls.n	800272a <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002726:	2303      	movs	r3, #3
 8002728:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	7efa      	ldrb	r2, [r7, #27]
 8002734:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3302      	adds	r3, #2
 800273a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	2b00      	cmp	r3, #0
 8002744:	d021      	beq.n	800278a <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f1c3 0308 	rsb	r3, r3, #8
 8002754:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9cd 2300 	strd	r2, r3, [sp]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	6979      	ldr	r1, [r7, #20]
 800276a:	68b8      	ldr	r0, [r7, #8]
 800276c:	f7ff fe88 	bl	8002480 <nunavutSetUxx>
 8002770:	4603      	mov	r3, r0
 8002772:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002774:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da02      	bge.n	8002782 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 800277c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002780:	e008      	b.n	8002794 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <uavcan_node_Health_1_0_deserialize_+0x26>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <uavcan_node_Health_1_0_deserialize_+0x26>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <uavcan_node_Health_1_0_deserialize_+0x2c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027c2:	f06f 0301 	mvn.w	r3, #1
 80027c6:	e030      	b.n	800282a <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <uavcan_node_Health_1_0_deserialize_+0x98>)
 80027d0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3302      	adds	r3, #2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d30a      	bcc.n	8002802 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	08db      	lsrs	r3, r3, #3
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	4413      	add	r3, r2
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e002      	b.n	8002808 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3302      	adds	r3, #2
 800280c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3307      	adds	r3, #7
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002818:	69b9      	ldr	r1, [r7, #24]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff fd20 	bl	8002260 <nunavutChooseMin>
 8002820:	4603      	mov	r3, r0
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	08018010 	.word	0x08018010

08002838 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af04      	add	r7, sp, #16
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <uavcan_node_Mode_1_0_serialize_+0x1e>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002856:	f06f 0301 	mvn.w	r3, #1
 800285a:	e048      	b.n	80028ee <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	2b07      	cmp	r3, #7
 8002868:	d802      	bhi.n	8002870 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800286a:	f06f 0302 	mvn.w	r3, #2
 800286e:	e03e      	b.n	80028ee <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 800287a:	7efb      	ldrb	r3, [r7, #27]
 800287c:	2b07      	cmp	r3, #7
 800287e:	d901      	bls.n	8002884 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002880:	2307      	movs	r3, #7
 8002882:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4413      	add	r3, r2
 800288c:	7efa      	ldrb	r2, [r7, #27]
 800288e:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3303      	adds	r3, #3
 8002894:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f1c3 0308 	rsb	r3, r3, #8
 80028ae:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9cd 2300 	strd	r2, r3, [sp]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	68b8      	ldr	r0, [r7, #8]
 80028c6:	f7ff fddb 	bl	8002480 <nunavutSetUxx>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80028ce:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da02      	bge.n	80028dc <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 80028d6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80028da:	e008      	b.n	80028ee <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <uavcan_node_Mode_1_0_deserialize_+0x26>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800291e:	f06f 0301 	mvn.w	r3, #1
 8002922:	e030      	b.n	8002986 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 800292c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3303      	adds	r3, #3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	429a      	cmp	r2, r3
 8002946:	d30a      	bcc.n	800295e <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e002      	b.n	8002964 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3303      	adds	r3, #3
 8002968:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3307      	adds	r3, #7
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff fc72 	bl	8002260 <nunavutChooseMin>
 800297c:	4603      	mov	r3, r0
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	08018010 	.word	0x08018010

08002994 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af04      	add	r7, sp, #16
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80029b2:	f06f 0301 	mvn.w	r3, #1
 80029b6:	e0cf      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	2b37      	cmp	r3, #55	; 0x37
 80029c4:	d802      	bhi.n	80029cc <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80029c6:	f06f 0302 	mvn.w	r3, #2
 80029ca:	e0c5      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4413      	add	r3, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3320      	adds	r3, #32
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d021      	beq.n	8002a32 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f1c3 0308 	rsb	r3, r3, #8
 80029fc:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	68b8      	ldr	r0, [r7, #8]
 8002a14:	f7ff fd34 	bl	8002480 <nunavutSetUxx>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002a1c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da02      	bge.n	8002a2a <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002a24:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002a28:	e096      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002a2a:	7ffb      	ldrb	r3, [r7, #31]
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	4413      	add	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002a32:	2301      	movs	r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4413      	add	r3, r2
 8002a42:	f107 0214 	add.w	r2, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7ff fe49 	bl	80026de <uavcan_node_Health_1_0_serialize_>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002a50:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	da02      	bge.n	8002a5e <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002a58:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a5c:	e07c      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	4413      	add	r3, r2
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d021      	beq.n	8002ab6 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f1c3 0308 	rsb	r3, r3, #8
 8002a80:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002a82:	7f3b      	ldrb	r3, [r7, #28]
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f7ff fcf2 	bl	8002480 <nunavutSetUxx>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002aa0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da02      	bge.n	8002aae <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002aa8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002aac:	e054      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002aae:	7f3b      	ldrb	r3, [r7, #28]
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab2:	4413      	add	r3, r2
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f107 0210 	add.w	r2, r7, #16
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7ff feb4 	bl	8002838 <uavcan_node_Mode_1_0_serialize_>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002ad4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da02      	bge.n	8002ae2 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002adc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002ae0:	e03a      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	4413      	add	r3, r2
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	4413      	add	r3, r2
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	7992      	ldrb	r2, [r2, #6]
 8002af8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	3308      	adds	r3, #8
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d021      	beq.n	8002b4e <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f1c3 0308 	rsb	r3, r3, #8
 8002b18:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002b1a:	7e7b      	ldrb	r3, [r7, #25]
 8002b1c:	9302      	str	r3, [sp, #8]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9cd 2300 	strd	r2, r3, [sp]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68b8      	ldr	r0, [r7, #8]
 8002b30:	f7ff fca6 	bl	8002480 <nunavutSetUxx>
 8002b34:	4603      	mov	r3, r0
 8002b36:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002b38:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da02      	bge.n	8002b46 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002b40:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002b44:	e008      	b.n	8002b58 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002b46:	7e7b      	ldrb	r3, [r7, #25]
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	4413      	add	r3, r2
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3728      	adds	r7, #40	; 0x28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b86:	f06f 0301 	mvn.w	r3, #1
 8002b8a:	e089      	b.n	8002ca0 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b92:	4b45      	ldr	r3, [pc, #276]	; (8002ca8 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002b94:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bac:	68b8      	ldr	r0, [r7, #8]
 8002bae:	f7ff fcb0 	bl	8002512 <nunavutGetU32>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3320      	adds	r3, #32
 8002bbc:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3307      	adds	r3, #7
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	08db      	lsrs	r3, r3, #3
 8002bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fb46 	bl	8002260 <nunavutChooseMin>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	4413      	add	r3, r2
 8002be8:	f107 0214 	add.w	r2, r7, #20
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7ff fdd5 	bl	800279c <uavcan_node_Health_1_0_deserialize_>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002bf6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da02      	bge.n	8002c04 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002bfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002c02:	e04d      	b.n	8002ca0 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3307      	adds	r3, #7
 8002c12:	f023 0307 	bic.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fb1e 	bl	8002260 <nunavutChooseMin>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4413      	add	r3, r2
 8002c38:	f107 0210 	add.w	r2, r7, #16
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7ff fe5b 	bl	80028f8 <uavcan_node_Mode_1_0_deserialize_>
 8002c42:	4603      	mov	r3, r0
 8002c44:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002c46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	da02      	bge.n	8002c54 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002c4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c52:	e025      	b.n	8002ca0 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3308      	adds	r3, #8
 8002c62:	6a3a      	ldr	r2, [r7, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d307      	bcc.n	8002c78 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	719a      	strb	r2, [r3, #6]
 8002c76:	e002      	b.n	8002c7e <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3308      	adds	r3, #8
 8002c82:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3307      	adds	r3, #7
 8002c88:	f023 0307 	bic.w	r3, r3, #7
 8002c8c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c8e:	6a39      	ldr	r1, [r7, #32]
 8002c90:	69f8      	ldr	r0, [r7, #28]
 8002c92:	f7ff fae5 	bl	8002260 <nunavutChooseMin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	08018010 	.word	0x08018010

08002cac <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af04      	add	r7, sp, #16
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002cca:	f06f 0301 	mvn.w	r3, #1
 8002cce:	e041      	b.n	8002d54 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	2b1f      	cmp	r3, #31
 8002cdc:	d802      	bhi.n	8002ce4 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002cde:	f06f 0302 	mvn.w	r3, #2
 8002ce2:	e037      	b.n	8002d54 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	4413      	add	r3, r2
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3320      	adds	r3, #32
 8002cfa:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f1c3 0308 	rsb	r3, r3, #8
 8002d14:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9cd 2300 	strd	r2, r3, [sp]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	69b9      	ldr	r1, [r7, #24]
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	f7ff fba8 	bl	8002480 <nunavutSetUxx>
 8002d30:	4603      	mov	r3, r0
 8002d32:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002d34:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da02      	bge.n	8002d42 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002d3c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d40:	e008      	b.n	8002d54 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d82:	f06f 0301 	mvn.w	r3, #1
 8002d86:	e027      	b.n	8002dd8 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002d90:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f7ff fc83 	bl	80026b2 <nunavutGetF32>
 8002dac:	eef0 7a40 	vmov.f32	s15, s0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3320      	adds	r3, #32
 8002dba:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3307      	adds	r3, #7
 8002dc0:	f023 0307 	bic.w	r3, r3, #7
 8002dc4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	6978      	ldr	r0, [r7, #20]
 8002dca:	f7ff fa49 	bl	8002260 <nunavutChooseMin>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	08da      	lsrs	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	08018010 	.word	0x08018010

08002de4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e02:	f06f 0301 	mvn.w	r3, #1
 8002e06:	e041      	b.n	8002e8c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	2b1f      	cmp	r3, #31
 8002e14:	d802      	bhi.n	8002e1c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002e16:	f06f 0302 	mvn.w	r3, #2
 8002e1a:	e037      	b.n	8002e8c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08db      	lsrs	r3, r3, #3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4413      	add	r3, r2
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3320      	adds	r3, #32
 8002e32:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d021      	beq.n	8002e82 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f1c3 0308 	rsb	r3, r3, #8
 8002e4c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	69b9      	ldr	r1, [r7, #24]
 8002e62:	68b8      	ldr	r0, [r7, #8]
 8002e64:	f7ff fb0c 	bl	8002480 <nunavutSetUxx>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002e6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da02      	bge.n	8002e7a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002e74:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e78:	e008      	b.n	8002e8c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002eba:	f06f 0301 	mvn.w	r3, #1
 8002ebe:	e027      	b.n	8002f10 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002ec8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	69f9      	ldr	r1, [r7, #28]
 8002ede:	68b8      	ldr	r0, [r7, #8]
 8002ee0:	f7ff fbe7 	bl	80026b2 <nunavutGetF32>
 8002ee4:	eef0 7a40 	vmov.f32	s15, s0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3320      	adds	r3, #32
 8002ef2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3307      	adds	r3, #7
 8002ef8:	f023 0307 	bic.w	r3, r3, #7
 8002efc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	6978      	ldr	r0, [r7, #20]
 8002f02:	f7ff f9ad 	bl	8002260 <nunavutChooseMin>
 8002f06:	4603      	mov	r3, r0
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	08018010 	.word	0x08018010

08002f1c <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f3a:	f06f 0301 	mvn.w	r3, #1
 8002f3e:	e041      	b.n	8002fc4 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	2b1f      	cmp	r3, #31
 8002f4c:	d802      	bhi.n	8002f54 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f4e:	f06f 0302 	mvn.w	r3, #2
 8002f52:	e037      	b.n	8002fc4 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	08db      	lsrs	r3, r3, #3
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4413      	add	r3, r2
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3320      	adds	r3, #32
 8002f6a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d021      	beq.n	8002fba <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f1c3 0308 	rsb	r3, r3, #8
 8002f84:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	9302      	str	r3, [sp, #8]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9cd 2300 	strd	r2, r3, [sp]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	69b9      	ldr	r1, [r7, #24]
 8002f9a:	68b8      	ldr	r0, [r7, #8]
 8002f9c:	f7ff fa70 	bl	8002480 <nunavutSetUxx>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002fa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da02      	bge.n	8002fb2 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002fac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fb0:	e008      	b.n	8002fc4 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	08da      	lsrs	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ff2:	f06f 0301 	mvn.w	r3, #1
 8002ff6:	e027      	b.n	8003048 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8003000:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	69f9      	ldr	r1, [r7, #28]
 8003016:	68b8      	ldr	r0, [r7, #8]
 8003018:	f7ff fb4b 	bl	80026b2 <nunavutGetF32>
 800301c:	eef0 7a40 	vmov.f32	s15, s0
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3320      	adds	r3, #32
 800302a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3307      	adds	r3, #7
 8003030:	f023 0307 	bic.w	r3, r3, #7
 8003034:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	6978      	ldr	r0, [r7, #20]
 800303a:	f7ff f911 	bl	8002260 <nunavutChooseMin>
 800303e:	4603      	mov	r3, r0
 8003040:	08da      	lsrs	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	08018010 	.word	0x08018010

08003054 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b090      	sub	sp, #64	; 0x40
 8003058:	af04      	add	r7, sp, #16
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003072:	f06f 0301 	mvn.w	r3, #1
 8003076:	e0e4      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	2b5f      	cmp	r3, #95	; 0x5f
 8003084:	d802      	bhi.n	800308c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003086:	f06f 0302 	mvn.w	r3, #2
 800308a:	e0da      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 8003090:	2304      	movs	r3, #4
 8003092:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 8003094:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	f107 0218 	add.w	r2, r7, #24
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7ff fe02 	bl	8002cac <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 80030ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da02      	bge.n	80030bc <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 80030b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ba:	e0c2      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	4413      	add	r3, r2
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d025      	beq.n	800311c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f1c3 0308 	rsb	r3, r3, #8
 80030de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80030e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9cd 2300 	strd	r2, r3, [sp]
 80030f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f8:	68b8      	ldr	r0, [r7, #8]
 80030fa:	f7ff f9c1 	bl	8002480 <nunavutSetUxx>
 80030fe:	4603      	mov	r3, r0
 8003100:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 8003104:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003108:	2b00      	cmp	r3, #0
 800310a:	da02      	bge.n	8003112 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 800310c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003110:	e097      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 8003112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	4413      	add	r3, r2
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 800311c:	2304      	movs	r3, #4
 800311e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	4413      	add	r3, r2
 800312c:	f107 0214 	add.w	r2, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	f7ff fef3 	bl	8002f1c <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 800313c:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	da02      	bge.n	800314a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8003144:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003148:	e07b      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	4413      	add	r3, r2
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	2b00      	cmp	r3, #0
 800315c:	d025      	beq.n	80031aa <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f1c3 0308 	rsb	r3, r3, #8
 800316c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003174:	9302      	str	r3, [sp, #8]
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9cd 2300 	strd	r2, r3, [sp]
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003186:	68b8      	ldr	r0, [r7, #8]
 8003188:	f7ff f97a 	bl	8002480 <nunavutSetUxx>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 8003192:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003196:	2b00      	cmp	r3, #0
 8003198:	da02      	bge.n	80031a0 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 800319a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800319e:	e050      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 80031a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a6:	4413      	add	r3, r2
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 80031aa:	2304      	movs	r3, #4
 80031ac:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4413      	add	r3, r2
 80031bc:	f107 0210 	add.w	r2, r7, #16
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7ff fe0f 	bl	8002de4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 80031cc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da02      	bge.n	80031da <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 80031d4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80031d8:	e033      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e0:	4413      	add	r3, r2
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d024      	beq.n	8003238 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f1c3 0308 	rsb	r3, r3, #8
 80031fc:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8003200:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003204:	9302      	str	r3, [sp, #8]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9cd 2300 	strd	r2, r3, [sp]
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003216:	68b8      	ldr	r0, [r7, #8]
 8003218:	f7ff f932 	bl	8002480 <nunavutSetUxx>
 800321c:	4603      	mov	r3, r0
 800321e:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8003220:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da02      	bge.n	800322e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8003228:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800322c:	e009      	b.n	8003242 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 800322e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003234:	4413      	add	r3, r2
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3730      	adds	r7, #48	; 0x30
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003272:	f06f 0301 	mvn.w	r3, #1
 8003276:	e090      	b.n	800339a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800327e:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8003280:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe ffe1 	bl	8002260 <nunavutChooseMin>
 800329e:	4602      	mov	r2, r0
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80032a6:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	4413      	add	r3, r2
 80032b0:	f107 021c 	add.w	r2, r7, #28
 80032b4:	4619      	mov	r1, r3
 80032b6:	f7ff fd51 	bl	8002d5c <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 80032c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da02      	bge.n	80032ce <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 80032c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80032cc:	e065      	b.n	800339a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	4413      	add	r3, r2
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	3307      	adds	r3, #7
 80032dc:	f023 0307 	bic.w	r3, r3, #7
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	08db      	lsrs	r3, r3, #3
 80032e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe ffb9 	bl	8002260 <nunavutChooseMin>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4413      	add	r3, r2
 8003302:	f107 0218 	add.w	r2, r7, #24
 8003306:	4619      	mov	r1, r3
 8003308:	f7ff fe60 	bl	8002fcc <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 8003312:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003316:	2b00      	cmp	r3, #0
 8003318:	da02      	bge.n	8003320 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 800331a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800331e:	e03c      	b.n	800339a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	4413      	add	r3, r2
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	3307      	adds	r3, #7
 800332e:	f023 0307 	bic.w	r3, r3, #7
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff90 	bl	8002260 <nunavutChooseMin>
 8003340:	4602      	mov	r2, r0
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	f107 0214 	add.w	r2, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	f7ff fd9a 	bl	8002e94 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8003366:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800336a:	2b00      	cmp	r3, #0
 800336c:	da02      	bge.n	8003374 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 800336e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003372:	e012      	b.n	800339a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	4413      	add	r3, r2
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	3307      	adds	r3, #7
 8003382:	f023 0307 	bic.w	r3, r3, #7
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338c:	f7fe ff68 	bl	8002260 <nunavutChooseMin>
 8003390:	4603      	mov	r3, r0
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3730      	adds	r7, #48	; 0x30
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	08018010 	.word	0x08018010

080033a8 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <uavcan_register_Name_1_0_deserialize_+0x26>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <uavcan_register_Name_1_0_deserialize_+0x26>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <uavcan_register_Name_1_0_deserialize_+0x2c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033ce:	f06f 0301 	mvn.w	r3, #1
 80033d2:	e04a      	b.n	800346a <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 80033dc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3308      	adds	r3, #8
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d309      	bcc.n	800340c <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800340a:	e003      	b.n	8003414 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3308      	adds	r3, #8
 8003418:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003420:	2bff      	cmp	r3, #255	; 0xff
 8003422:	d902      	bls.n	800342a <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003424:	f06f 0309 	mvn.w	r3, #9
 8003428:	e01f      	b.n	800346a <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	f7fe fff9 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4413      	add	r3, r2
 800344c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3307      	adds	r3, #7
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003458:	69b9      	ldr	r1, [r7, #24]
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	f7fe ff00 	bl	8002260 <nunavutChooseMin>
 8003460:	4603      	mov	r3, r0
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	08018010 	.word	0x08018010

08003478 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af04      	add	r7, sp, #16
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003496:	f06f 0301 	mvn.w	r3, #1
 800349a:	e05e      	b.n	800355a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80034aa:	d202      	bcs.n	80034b2 <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80034ac:	f06f 0302 	mvn.w	r3, #2
 80034b0:	e053      	b.n	800355a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d902      	bls.n	80034c8 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80034c2:	f06f 0309 	mvn.w	r3, #9
 80034c6:	e048      	b.n	800355a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	4413      	add	r3, r2
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80034d6:	8812      	ldrh	r2, [r2, #0]
 80034d8:	b292      	uxth	r2, r2
 80034da:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3310      	adds	r3, #16
 80034e0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2100      	movs	r1, #0
 80034ec:	9100      	str	r1, [sp, #0]
 80034ee:	69f9      	ldr	r1, [r7, #28]
 80034f0:	68b8      	ldr	r0, [r7, #8]
 80034f2:	f7fe fee1 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d021      	beq.n	8003550 <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f1c3 0308 	rsb	r3, r3, #8
 800351a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9cd 2300 	strd	r2, r3, [sp]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	69b9      	ldr	r1, [r7, #24]
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f7fe ffa5 	bl	8002480 <nunavutSetUxx>
 8003536:	4603      	mov	r3, r0
 8003538:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800353a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da02      	bge.n	8003548 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 8003542:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003546:	e008      	b.n	800355a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	08da      	lsrs	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d006      	beq.n	800358a <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800358a:	f06f 0301 	mvn.w	r3, #1
 800358e:	e041      	b.n	8003614 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 8003598:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80035aa:	2310      	movs	r3, #16
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	68b8      	ldr	r0, [r7, #8]
 80035b2:	f7fe ff8b 	bl	80024cc <nunavutGetU16>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3310      	adds	r3, #16
 80035c4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d902      	bls.n	80035d8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035d2:	f06f 0309 	mvn.w	r3, #9
 80035d6:	e01d      	b.n	8003614 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	f7fe ff23 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4413      	add	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3307      	adds	r3, #7
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	6978      	ldr	r0, [r7, #20]
 8003606:	f7fe fe2b 	bl	8002260 <nunavutChooseMin>
 800360a:	4603      	mov	r3, r0
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08018010 	.word	0x08018010

08003620 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af04      	add	r7, sp, #16
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800363e:	f06f 0301 	mvn.w	r3, #1
 8003642:	e05f      	b.n	8003704 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	f640 0207 	movw	r2, #2055	; 0x807
 8003652:	4293      	cmp	r3, r2
 8003654:	d802      	bhi.n	800365c <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003656:	f06f 0302 	mvn.w	r3, #2
 800365a:	e053      	b.n	8003704 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d902      	bls.n	8003670 <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800366a:	f06f 0309 	mvn.w	r3, #9
 800366e:	e049      	b.n	8003704 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	08db      	lsrs	r3, r3, #3
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4413      	add	r3, r2
 800367e:	b2ca      	uxtb	r2, r1
 8003680:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3308      	adds	r3, #8
 8003686:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800368e:	011a      	lsls	r2, r3, #4
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2100      	movs	r1, #0
 8003694:	9100      	str	r1, [sp, #0]
 8003696:	69f9      	ldr	r1, [r7, #28]
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	f7fe fe0d 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d021      	beq.n	80036fa <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f1c3 0308 	rsb	r3, r3, #8
 80036c4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	9302      	str	r3, [sp, #8]
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9cd 2300 	strd	r2, r3, [sp]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	69b9      	ldr	r1, [r7, #24]
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	f7fe fed0 	bl	8002480 <nunavutSetUxx>
 80036e0:	4603      	mov	r3, r0
 80036e2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80036e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da02      	bge.n	80036f2 <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80036ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036f0:	e008      	b.n	8003704 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003732:	f06f 0301 	mvn.w	r3, #1
 8003736:	e04a      	b.n	80037ce <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 8003740:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3308      	adds	r3, #8
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	429a      	cmp	r2, r3
 800375a:	d309      	bcc.n	8003770 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	08db      	lsrs	r3, r3, #3
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800376e:	e003      	b.n	8003778 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3308      	adds	r3, #8
 800377c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d902      	bls.n	800378e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003788:	f06f 0309 	mvn.w	r3, #9
 800378c:	e01f      	b.n	80037ce <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	f7fe fe47 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4413      	add	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	3307      	adds	r3, #7
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f7fe fd4e 	bl	8002260 <nunavutChooseMin>
 80037c4:	4603      	mov	r3, r0
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	08018010 	.word	0x08018010

080037dc <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af04      	add	r7, sp, #16
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037fa:	f06f 0301 	mvn.w	r3, #1
 80037fe:	e05f      	b.n	80038c0 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	f640 0207 	movw	r2, #2055	; 0x807
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003812:	f06f 0302 	mvn.w	r3, #2
 8003816:	e053      	b.n	80038c0 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d902      	bls.n	800382c <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003826:	f06f 0309 	mvn.w	r3, #9
 800382a:	e049      	b.n	80038c0 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	b2ca      	uxtb	r2, r1
 800383c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3308      	adds	r3, #8
 8003842:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2100      	movs	r1, #0
 8003850:	9100      	str	r1, [sp, #0]
 8003852:	69f9      	ldr	r1, [r7, #28]
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f7fe fd2f 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003860:	015b      	lsls	r3, r3, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	2b00      	cmp	r3, #0
 8003870:	d021      	beq.n	80038b6 <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f1c3 0308 	rsb	r3, r3, #8
 8003880:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9cd 2300 	strd	r2, r3, [sp]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	68b8      	ldr	r0, [r7, #8]
 8003898:	f7fe fdf2 	bl	8002480 <nunavutSetUxx>
 800389c:	4603      	mov	r3, r0
 800389e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80038a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da02      	bge.n	80038ae <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80038a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038ac:	e008      	b.n	80038c0 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	08da      	lsrs	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038ee:	f06f 0301 	mvn.w	r3, #1
 80038f2:	e04a      	b.n	800398a <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 80038fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3308      	adds	r3, #8
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	429a      	cmp	r2, r3
 8003916:	d309      	bcc.n	800392c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800392a:	e003      	b.n	8003934 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3308      	adds	r3, #8
 8003938:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d902      	bls.n	800394a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003944:	f06f 0309 	mvn.w	r3, #9
 8003948:	e01f      	b.n	800398a <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	f7fe fd69 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3307      	adds	r3, #7
 8003972:	f023 0307 	bic.w	r3, r3, #7
 8003976:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7fe fc70 	bl	8002260 <nunavutChooseMin>
 8003980:	4603      	mov	r3, r0
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08018010 	.word	0x08018010

08003998 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af04      	add	r7, sp, #16
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80039b6:	f06f 0301 	mvn.w	r3, #1
 80039ba:	e05f      	b.n	8003a7c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	f640 0207 	movw	r2, #2055	; 0x807
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80039ce:	f06f 0302 	mvn.w	r3, #2
 80039d2:	e053      	b.n	8003a7c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d902      	bls.n	80039e8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039e2:	f06f 0309 	mvn.w	r3, #9
 80039e6:	e049      	b.n	8003a7c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08db      	lsrs	r3, r3, #3
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	b2ca      	uxtb	r2, r1
 80039f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3308      	adds	r3, #8
 80039fe:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a06:	019a      	lsls	r2, r3, #6
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	9100      	str	r1, [sp, #0]
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f7fe fc51 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d021      	beq.n	8003a72 <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f1c3 0308 	rsb	r3, r3, #8
 8003a3c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	9302      	str	r3, [sp, #8]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	69b9      	ldr	r1, [r7, #24]
 8003a52:	68b8      	ldr	r0, [r7, #8]
 8003a54:	f7fe fd14 	bl	8002480 <nunavutSetUxx>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003a5c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da02      	bge.n	8003a6a <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003a64:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a68:	e008      	b.n	8003a7c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003aaa:	f06f 0301 	mvn.w	r3, #1
 8003aae:	e04a      	b.n	8003b46 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003ab8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3308      	adds	r3, #8
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d309      	bcc.n	8003ae8 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	08db      	lsrs	r3, r3, #3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ae6:	e003      	b.n	8003af0 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3308      	adds	r3, #8
 8003af4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d902      	bls.n	8003b06 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b00:	f06f 0309 	mvn.w	r3, #9
 8003b04:	e01f      	b.n	8003b46 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b0e:	019b      	lsls	r3, r3, #6
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	f7fe fc8b 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b22:	019b      	lsls	r3, r3, #6
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4413      	add	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7fe fb92 	bl	8002260 <nunavutChooseMin>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	08018010 	.word	0x08018010

08003b54 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af04      	add	r7, sp, #16
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b72:	f06f 0301 	mvn.w	r3, #1
 8003b76:	e060      	b.n	8003c3a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003b86:	d202      	bcs.n	8003b8e <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003b88:	f06f 0302 	mvn.w	r3, #2
 8003b8c:	e055      	b.n	8003c3a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d902      	bls.n	8003ba4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b9e:	f06f 0309 	mvn.w	r3, #9
 8003ba2:	e04a      	b.n	8003c3a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	08db      	lsrs	r3, r3, #3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	4413      	add	r3, r2
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003bb2:	8812      	ldrh	r2, [r2, #0]
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3310      	adds	r3, #16
 8003bbc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003bc4:	00da      	lsls	r2, r3, #3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	9100      	str	r1, [sp, #0]
 8003bcc:	69f9      	ldr	r1, [r7, #28]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f7fe fb72 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d021      	beq.n	8003c30 <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f1c3 0308 	rsb	r3, r3, #8
 8003bfa:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	9302      	str	r3, [sp, #8]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9cd 2300 	strd	r2, r3, [sp]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	68b8      	ldr	r0, [r7, #8]
 8003c12:	f7fe fc35 	bl	8002480 <nunavutSetUxx>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003c1a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da02      	bge.n	8003c28 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c26:	e008      	b.n	8003c3a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d006      	beq.n	8003c6a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c6a:	f06f 0301 	mvn.w	r3, #1
 8003c6e:	e043      	b.n	8003cf8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003c78:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003c8a:	2310      	movs	r3, #16
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	69f9      	ldr	r1, [r7, #28]
 8003c90:	68b8      	ldr	r0, [r7, #8]
 8003c92:	f7fe fc1b 	bl	80024cc <nunavutGetU16>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3310      	adds	r3, #16
 8003ca4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb0:	d902      	bls.n	8003cb8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003cb2:	f06f 0309 	mvn.w	r3, #9
 8003cb6:	e01f      	b.n	8003cf8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	f7fe fbb2 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3307      	adds	r3, #7
 8003ce0:	f023 0307 	bic.w	r3, r3, #7
 8003ce4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003ce6:	69b9      	ldr	r1, [r7, #24]
 8003ce8:	6978      	ldr	r0, [r7, #20]
 8003cea:	f7fe fab9 	bl	8002260 <nunavutChooseMin>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	08da      	lsrs	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	08018010 	.word	0x08018010

08003d04 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af04      	add	r7, sp, #16
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d22:	f06f 0301 	mvn.w	r3, #1
 8003d26:	e05f      	b.n	8003de8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	f640 0207 	movw	r2, #2055	; 0x807
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003d3a:	f06f 0302 	mvn.w	r3, #2
 8003d3e:	e053      	b.n	8003de8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	d902      	bls.n	8003d54 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d4e:	f06f 0309 	mvn.w	r3, #9
 8003d52:	e049      	b.n	8003de8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	4413      	add	r3, r2
 8003d62:	b2ca      	uxtb	r2, r1
 8003d64:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d72:	011a      	lsls	r2, r3, #4
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2100      	movs	r1, #0
 8003d78:	9100      	str	r1, [sp, #0]
 8003d7a:	69f9      	ldr	r1, [r7, #28]
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f7fe fa9b 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d021      	beq.n	8003dde <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f1c3 0308 	rsb	r3, r3, #8
 8003da8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9cd 2300 	strd	r2, r3, [sp]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f7fe fb5e 	bl	8002480 <nunavutSetUxx>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003dc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da02      	bge.n	8003dd6 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003dd0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dd4:	e008      	b.n	8003de8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e16:	f06f 0301 	mvn.w	r3, #1
 8003e1a:	e04a      	b.n	8003eb2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 8003e24:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d309      	bcc.n	8003e54 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	08db      	lsrs	r3, r3, #3
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003e52:	e003      	b.n	8003e5c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d902      	bls.n	8003e72 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e6c:	f06f 0309 	mvn.w	r3, #9
 8003e70:	e01f      	b.n	8003eb2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	f7fe fad5 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4413      	add	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	3307      	adds	r3, #7
 8003e9a:	f023 0307 	bic.w	r3, r3, #7
 8003e9e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	f7fe f9dc 	bl	8002260 <nunavutChooseMin>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	08018010 	.word	0x08018010

08003ec0 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	; 0x30
 8003ec4:	af04      	add	r7, sp, #16
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ede:	f06f 0301 	mvn.w	r3, #1
 8003ee2:	e05f      	b.n	8003fa4 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	f640 0207 	movw	r2, #2055	; 0x807
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d802      	bhi.n	8003efc <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003ef6:	f06f 0302 	mvn.w	r3, #2
 8003efa:	e053      	b.n	8003fa4 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d902      	bls.n	8003f10 <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f0a:	f06f 0309 	mvn.w	r3, #9
 8003f0e:	e049      	b.n	8003fa4 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b2ca      	uxtb	r2, r1
 8003f20:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3308      	adds	r3, #8
 8003f26:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2100      	movs	r1, #0
 8003f34:	9100      	str	r1, [sp, #0]
 8003f36:	69f9      	ldr	r1, [r7, #28]
 8003f38:	68b8      	ldr	r0, [r7, #8]
 8003f3a:	f7fe f9bd 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f44:	015b      	lsls	r3, r3, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d021      	beq.n	8003f9a <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f1c3 0308 	rsb	r3, r3, #8
 8003f64:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9cd 2300 	strd	r2, r3, [sp]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	69b9      	ldr	r1, [r7, #24]
 8003f7a:	68b8      	ldr	r0, [r7, #8]
 8003f7c:	f7fe fa80 	bl	8002480 <nunavutSetUxx>
 8003f80:	4603      	mov	r3, r0
 8003f82:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003f84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da02      	bge.n	8003f92 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003f8c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f90:	e008      	b.n	8003fa4 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003fd2:	f06f 0301 	mvn.w	r3, #1
 8003fd6:	e04a      	b.n	800406e <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003fe0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d309      	bcc.n	8004010 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	08db      	lsrs	r3, r3, #3
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800400e:	e003      	b.n	8004018 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3308      	adds	r3, #8
 800401c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d902      	bls.n	800402e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004028:	f06f 0309 	mvn.w	r3, #9
 800402c:	e01f      	b.n	800406e <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004036:	015b      	lsls	r3, r3, #5
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	f7fe f9f7 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800404a:	015b      	lsls	r3, r3, #5
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4413      	add	r3, r2
 8004050:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3307      	adds	r3, #7
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7fe f8fe 	bl	8002260 <nunavutChooseMin>
 8004064:	4603      	mov	r3, r0
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	08018010 	.word	0x08018010

0800407c <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	; 0x30
 8004080:	af04      	add	r7, sp, #16
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800409a:	f06f 0301 	mvn.w	r3, #1
 800409e:	e05f      	b.n	8004160 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	f640 0207 	movw	r2, #2055	; 0x807
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80040b2:	f06f 0302 	mvn.w	r3, #2
 80040b6:	e053      	b.n	8004160 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d902      	bls.n	80040cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80040c6:	f06f 0309 	mvn.w	r3, #9
 80040ca:	e049      	b.n	8004160 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	08db      	lsrs	r3, r3, #3
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	b2ca      	uxtb	r2, r1
 80040dc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3308      	adds	r3, #8
 80040e2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040ea:	019a      	lsls	r2, r3, #6
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2100      	movs	r1, #0
 80040f0:	9100      	str	r1, [sp, #0]
 80040f2:	69f9      	ldr	r1, [r7, #28]
 80040f4:	68b8      	ldr	r0, [r7, #8]
 80040f6:	f7fe f8df 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b00      	cmp	r3, #0
 8004110:	d021      	beq.n	8004156 <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f1c3 0308 	rsb	r3, r3, #8
 8004120:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	9302      	str	r3, [sp, #8]
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	e9cd 2300 	strd	r2, r3, [sp]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	68b8      	ldr	r0, [r7, #8]
 8004138:	f7fe f9a2 	bl	8002480 <nunavutSetUxx>
 800413c:	4603      	mov	r3, r0
 800413e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004140:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da02      	bge.n	800414e <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004148:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800414c:	e008      	b.n	8004160 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	08da      	lsrs	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d006      	beq.n	800418e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800418e:	f06f 0301 	mvn.w	r3, #1
 8004192:	e04a      	b.n	800422a <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 800419c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	3308      	adds	r3, #8
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d309      	bcc.n	80041cc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	08db      	lsrs	r3, r3, #3
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80041ca:	e003      	b.n	80041d4 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3308      	adds	r3, #8
 80041d8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d902      	bls.n	80041ea <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80041e4:	f06f 0309 	mvn.w	r3, #9
 80041e8:	e01f      	b.n	800422a <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	f7fe f919 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3307      	adds	r3, #7
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004218:	69b9      	ldr	r1, [r7, #24]
 800421a:	6978      	ldr	r0, [r7, #20]
 800421c:	f7fe f820 	bl	8002260 <nunavutChooseMin>
 8004220:	4603      	mov	r3, r0
 8004222:	08da      	lsrs	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	08018010 	.word	0x08018010

08004238 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af04      	add	r7, sp, #16
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004256:	f06f 0301 	mvn.w	r3, #1
 800425a:	e060      	b.n	800431e <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800426a:	d202      	bcs.n	8004272 <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800426c:	f06f 0302 	mvn.w	r3, #2
 8004270:	e055      	b.n	800431e <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800427c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004280:	d902      	bls.n	8004288 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004282:	f06f 0309 	mvn.w	r3, #9
 8004286:	e04a      	b.n	800431e <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	08db      	lsrs	r3, r3, #3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	4413      	add	r3, r2
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	b292      	uxth	r2, r2
 800429a:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3310      	adds	r3, #16
 80042a0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042a8:	00da      	lsls	r2, r3, #3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2100      	movs	r1, #0
 80042ae:	9100      	str	r1, [sp, #0]
 80042b0:	69f9      	ldr	r1, [r7, #28]
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	f7fe f800 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d021      	beq.n	8004314 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f1c3 0308 	rsb	r3, r3, #8
 80042de:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9cd 2300 	strd	r2, r3, [sp]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	69b9      	ldr	r1, [r7, #24]
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f7fe f8c3 	bl	8002480 <nunavutSetUxx>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80042fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004302:	2b00      	cmp	r3, #0
 8004304:	da02      	bge.n	800430c <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004306:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800430a:	e008      	b.n	800431e <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800434e:	f06f 0301 	mvn.w	r3, #1
 8004352:	e043      	b.n	80043dc <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 800435c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800436e:	2310      	movs	r3, #16
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	69f9      	ldr	r1, [r7, #28]
 8004374:	68b8      	ldr	r0, [r7, #8]
 8004376:	f7fe f8a9 	bl	80024cc <nunavutGetU16>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3310      	adds	r3, #16
 8004388:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004394:	d902      	bls.n	800439c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004396:	f06f 0309 	mvn.w	r3, #9
 800439a:	e01f      	b.n	80043dc <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	f7fe f840 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4413      	add	r3, r2
 80043be:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3307      	adds	r3, #7
 80043c4:	f023 0307 	bic.w	r3, r3, #7
 80043c8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	6978      	ldr	r0, [r7, #20]
 80043ce:	f7fd ff47 	bl	8002260 <nunavutChooseMin>
 80043d2:	4603      	mov	r3, r0
 80043d4:	08da      	lsrs	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08018010 	.word	0x08018010

080043e8 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08e      	sub	sp, #56	; 0x38
 80043ec:	af04      	add	r7, sp, #16
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004406:	f06f 0301 	mvn.w	r3, #1
 800440a:	e08b      	b.n	8004524 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	f640 0207 	movw	r2, #2055	; 0x807
 800441a:	4293      	cmp	r3, r2
 800441c:	d802      	bhi.n	8004424 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800441e:	f06f 0302 	mvn.w	r3, #2
 8004422:	e07f      	b.n	8004524 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d902      	bls.n	8004438 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004432:	f06f 0309 	mvn.w	r3, #9
 8004436:	e075      	b.n	8004524 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	b2ca      	uxtb	r2, r1
 8004448:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	3308      	adds	r3, #8
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004450:	2300      	movs	r3, #0
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	e034      	b.n	80044c0 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 8004462:	ed97 0a07 	vldr	s0, [r7, #28]
 8004466:	f7fd fed7 	bl	8002218 <_ZSt8isfinitef>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d015      	beq.n	800449c <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8004470:	edd7 7a07 	vldr	s15, [r7, #28]
 8004474:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800452c <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 8004478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004480:	d501      	bpl.n	8004486 <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 8004484:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 8004486:	edd7 7a07 	vldr	s15, [r7, #28]
 800448a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004534 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 800448e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	dd01      	ble.n	800449c <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 800449a:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 800449c:	ed97 0a07 	vldr	s0, [r7, #28]
 80044a0:	f7fe f85a 	bl	8002558 <nunavutFloat16Pack>
 80044a4:	4603      	mov	r3, r0
 80044a6:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	08db      	lsrs	r3, r3, #3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4413      	add	r3, r2
 80044b0:	8aba      	ldrh	r2, [r7, #20]
 80044b2:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	3310      	adds	r3, #16
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	3301      	adds	r3, #1
 80044be:	623b      	str	r3, [r7, #32]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044c6:	6a3a      	ldr	r2, [r7, #32]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d3c4      	bcc.n	8004456 <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d021      	beq.n	800451a <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f1c3 0308 	rsb	r3, r3, #8
 80044e4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9cd 2300 	strd	r2, r3, [sp]
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	68b8      	ldr	r0, [r7, #8]
 80044fc:	f7fd ffc0 	bl	8002480 <nunavutSetUxx>
 8004500:	4603      	mov	r3, r0
 8004502:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004504:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004508:	2b00      	cmp	r3, #0
 800450a:	da02      	bge.n	8004512 <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 800450c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004510:	e008      	b.n	8004524 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	4413      	add	r3, r2
 8004518:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	08da      	lsrs	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	; 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	c77fe000 	.word	0xc77fe000
 8004530:	c77fe000 	.word	0xc77fe000
 8004534:	477fe000 	.word	0x477fe000
 8004538:	477fe000 	.word	0x477fe000

0800453c <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004562:	f06f 0301 	mvn.w	r3, #1
 8004566:	e054      	b.n	8004612 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 8004570:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3308      	adds	r3, #8
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	429a      	cmp	r2, r3
 800458a:	d309      	bcc.n	80045a0 <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	4413      	add	r3, r2
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800459e:	e003      	b.n	80045a8 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3308      	adds	r3, #8
 80045ac:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d902      	bls.n	80045be <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80045b8:	f06f 0309 	mvn.w	r3, #9
 80045bc:	e029      	b.n	8004612 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e012      	b.n	80045ea <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	68b8      	ldr	r0, [r7, #8]
 80045ca:	f7fe f85b 	bl	8002684 <nunavutGetF16>
 80045ce:	eef0 7a40 	vmov.f32	s15, s0
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3310      	adds	r3, #16
 80045e2:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3e6      	bcc.n	80045c4 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3307      	adds	r3, #7
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004600:	6939      	ldr	r1, [r7, #16]
 8004602:	69f8      	ldr	r0, [r7, #28]
 8004604:	f7fd fe2c 	bl	8002260 <nunavutChooseMin>
 8004608:	4603      	mov	r3, r0
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	08018010 	.word	0x08018010

08004620 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	; 0x30
 8004624:	af04      	add	r7, sp, #16
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800463e:	f06f 0301 	mvn.w	r3, #1
 8004642:	e05f      	b.n	8004704 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	f640 0207 	movw	r2, #2055	; 0x807
 8004652:	4293      	cmp	r3, r2
 8004654:	d802      	bhi.n	800465c <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004656:	f06f 0302 	mvn.w	r3, #2
 800465a:	e053      	b.n	8004704 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d902      	bls.n	8004670 <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800466a:	f06f 0309 	mvn.w	r3, #9
 800466e:	e049      	b.n	8004704 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	08db      	lsrs	r3, r3, #3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4413      	add	r3, r2
 800467e:	b2ca      	uxtb	r2, r1
 8004680:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3308      	adds	r3, #8
 8004686:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2100      	movs	r1, #0
 8004694:	9100      	str	r1, [sp, #0]
 8004696:	69f9      	ldr	r1, [r7, #28]
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f7fd fe0d 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046a4:	015b      	lsls	r3, r3, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d021      	beq.n	80046fa <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f1c3 0308 	rsb	r3, r3, #8
 80046c4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	e9cd 2300 	strd	r2, r3, [sp]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f7fd fed0 	bl	8002480 <nunavutSetUxx>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80046e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da02      	bge.n	80046f2 <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80046ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046f0:	e008      	b.n	8004704 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	08da      	lsrs	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004732:	f06f 0301 	mvn.w	r3, #1
 8004736:	e04a      	b.n	80047ce <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 8004740:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3308      	adds	r3, #8
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	d309      	bcc.n	8004770 <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	08db      	lsrs	r3, r3, #3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	4413      	add	r3, r2
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800476e:	e003      	b.n	8004778 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3308      	adds	r3, #8
 800477c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d902      	bls.n	800478e <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004788:	f06f 0309 	mvn.w	r3, #9
 800478c:	e01f      	b.n	80047ce <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004796:	015b      	lsls	r3, r3, #5
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	f7fd fe47 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047aa:	015b      	lsls	r3, r3, #5
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	3307      	adds	r3, #7
 80047b6:	f023 0307 	bic.w	r3, r3, #7
 80047ba:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	f7fd fd4e 	bl	8002260 <nunavutChooseMin>
 80047c4:	4603      	mov	r3, r0
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	08018010 	.word	0x08018010

080047dc <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af04      	add	r7, sp, #16
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80047fa:	f06f 0301 	mvn.w	r3, #1
 80047fe:	e05f      	b.n	80048c0 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	f640 0207 	movw	r2, #2055	; 0x807
 800480e:	4293      	cmp	r3, r2
 8004810:	d802      	bhi.n	8004818 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004812:	f06f 0302 	mvn.w	r3, #2
 8004816:	e053      	b.n	80048c0 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004822:	2b20      	cmp	r3, #32
 8004824:	d902      	bls.n	800482c <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004826:	f06f 0309 	mvn.w	r3, #9
 800482a:	e049      	b.n	80048c0 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4413      	add	r3, r2
 800483a:	b2ca      	uxtb	r2, r1
 800483c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3308      	adds	r3, #8
 8004842:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800484a:	019a      	lsls	r2, r3, #6
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2100      	movs	r1, #0
 8004850:	9100      	str	r1, [sp, #0]
 8004852:	69f9      	ldr	r1, [r7, #28]
 8004854:	68b8      	ldr	r0, [r7, #8]
 8004856:	f7fd fd2f 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f1c3 0308 	rsb	r3, r3, #8
 8004880:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	9302      	str	r3, [sp, #8]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9cd 2300 	strd	r2, r3, [sp]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	68b8      	ldr	r0, [r7, #8]
 8004898:	f7fd fdf2 	bl	8002480 <nunavutSetUxx>
 800489c:	4603      	mov	r3, r0
 800489e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80048a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da02      	bge.n	80048ae <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 80048a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80048ac:	e008      	b.n	80048c0 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80048ee:	f06f 0301 	mvn.w	r3, #1
 80048f2:	e04a      	b.n	800498a <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 80048fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3308      	adds	r3, #8
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	429a      	cmp	r2, r3
 8004916:	d309      	bcc.n	800492c <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800492a:	e003      	b.n	8004934 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3308      	adds	r3, #8
 8004938:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004940:	2b20      	cmp	r3, #32
 8004942:	d902      	bls.n	800494a <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004944:	f06f 0309 	mvn.w	r3, #9
 8004948:	e01f      	b.n	800498a <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004952:	019b      	lsls	r3, r3, #6
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	f7fd fd69 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004966:	019b      	lsls	r3, r3, #6
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4413      	add	r3, r2
 800496c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3307      	adds	r3, #7
 8004972:	f023 0307 	bic.w	r3, r3, #7
 8004976:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004978:	69b9      	ldr	r1, [r7, #24]
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f7fd fc70 	bl	8002260 <nunavutChooseMin>
 8004980:	4603      	mov	r3, r0
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08018010 	.word	0x08018010

08004998 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80049b6:	f06f 0301 	mvn.w	r3, #1
 80049ba:	e003      	b.n	80049c4 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80049f6:	f06f 0301 	mvn.w	r3, #1
 80049fa:	e008      	b.n	8004a0e <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8004a04:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	08018010 	.word	0x08018010

08004a20 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	; 0x30
 8004a24:	af04      	add	r7, sp, #16
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a3e:	f06f 0301 	mvn.w	r3, #1
 8004a42:	e060      	b.n	8004b06 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004a52:	d202      	bcs.n	8004a5a <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004a54:	f06f 0302 	mvn.w	r3, #2
 8004a58:	e055      	b.n	8004b06 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d902      	bls.n	8004a70 <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004a6a:	f06f 0309 	mvn.w	r3, #9
 8004a6e:	e04a      	b.n	8004b06 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	4413      	add	r3, r2
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004a7e:	8812      	ldrh	r2, [r2, #0]
 8004a80:	b292      	uxth	r2, r2
 8004a82:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3310      	adds	r3, #16
 8004a88:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a90:	00da      	lsls	r2, r3, #3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2100      	movs	r1, #0
 8004a96:	9100      	str	r1, [sp, #0]
 8004a98:	69f9      	ldr	r1, [r7, #28]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f7fd fc0c 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d021      	beq.n	8004afc <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f1c3 0308 	rsb	r3, r3, #8
 8004ac6:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	9302      	str	r3, [sp, #8]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9cd 2300 	strd	r2, r3, [sp]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	69b9      	ldr	r1, [r7, #24]
 8004adc:	68b8      	ldr	r0, [r7, #8]
 8004ade:	f7fd fccf 	bl	8002480 <nunavutSetUxx>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004ae6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da02      	bge.n	8004af4 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004aee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004af2:	e008      	b.n	8004b06 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <uavcan_primitive_String_1_0_deserialize_+0x2c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004b36:	f06f 0301 	mvn.w	r3, #1
 8004b3a:	e043      	b.n	8004bc4 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004b42:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004b44:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004b56:	2310      	movs	r3, #16
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	69f9      	ldr	r1, [r7, #28]
 8004b5c:	68b8      	ldr	r0, [r7, #8]
 8004b5e:	f7fd fcb5 	bl	80024cc <nunavutGetU16>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3310      	adds	r3, #16
 8004b70:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d902      	bls.n	8004b84 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004b7e:	f06f 0309 	mvn.w	r3, #9
 8004b82:	e01f      	b.n	8004bc4 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	f7fd fc4c 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3307      	adds	r3, #7
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004bb2:	69b9      	ldr	r1, [r7, #24]
 8004bb4:	6978      	ldr	r0, [r7, #20]
 8004bb6:	f7fd fb53 	bl	8002260 <nunavutChooseMin>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	08da      	lsrs	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08018010 	.word	0x08018010

08004bd0 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af04      	add	r7, sp, #16
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004bee:	f06f 0301 	mvn.w	r3, #1
 8004bf2:	e060      	b.n	8004cb6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004c02:	d202      	bcs.n	8004c0a <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004c04:	f06f 0302 	mvn.w	r3, #2
 8004c08:	e055      	b.n	8004cb6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d902      	bls.n	8004c20 <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004c1a:	f06f 0309 	mvn.w	r3, #9
 8004c1e:	e04a      	b.n	8004cb6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4413      	add	r3, r2
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004c2e:	8812      	ldrh	r2, [r2, #0]
 8004c30:	b292      	uxth	r2, r2
 8004c32:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3310      	adds	r3, #16
 8004c38:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c40:	00da      	lsls	r2, r3, #3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2100      	movs	r1, #0
 8004c46:	9100      	str	r1, [sp, #0]
 8004c48:	69f9      	ldr	r1, [r7, #28]
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f7fd fb34 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d021      	beq.n	8004cac <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f1c3 0308 	rsb	r3, r3, #8
 8004c76:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	9302      	str	r3, [sp, #8]
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9cd 2300 	strd	r2, r3, [sp]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	69b9      	ldr	r1, [r7, #24]
 8004c8c:	68b8      	ldr	r0, [r7, #8]
 8004c8e:	f7fd fbf7 	bl	8002480 <nunavutSetUxx>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004c96:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da02      	bge.n	8004ca4 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004c9e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ca2:	e008      	b.n	8004cb6 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	08da      	lsrs	r2, r3, #3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004ce6:	f06f 0301 	mvn.w	r3, #1
 8004cea:	e043      	b.n	8004d74 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 8004cf4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004d06:	2310      	movs	r3, #16
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	69f9      	ldr	r1, [r7, #28]
 8004d0c:	68b8      	ldr	r0, [r7, #8]
 8004d0e:	f7fd fbdd 	bl	80024cc <nunavutGetU16>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3310      	adds	r3, #16
 8004d20:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2c:	d902      	bls.n	8004d34 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004d2e:	f06f 0309 	mvn.w	r3, #9
 8004d32:	e01f      	b.n	8004d74 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	f7fd fb74 	bl	8002432 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3307      	adds	r3, #7
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004d62:	69b9      	ldr	r1, [r7, #24]
 8004d64:	6978      	ldr	r0, [r7, #20]
 8004d66:	f7fd fa7b 	bl	8002260 <nunavutChooseMin>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	08da      	lsrs	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	08018010 	.word	0x08018010

08004d80 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09e      	sub	sp, #120	; 0x78
 8004d84:	af04      	add	r7, sp, #16
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <uavcan_register_Value_1_0_serialize_+0x1e>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <uavcan_register_Value_1_0_serialize_+0x1e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d9e:	f06f 0301 	mvn.w	r3, #1
 8004da2:	e248      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	663b      	str	r3, [r7, #96]	; 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 8004daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	f640 0217 	movw	r2, #2071	; 0x817
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d802      	bhi.n	8004dbc <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004db6:	f06f 0302 	mvn.w	r3, #2
 8004dba:	e23c      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	667b      	str	r3, [r7, #100]	; 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dc2:	08db      	lsrs	r3, r3, #3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 8004dce:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11b      	bne.n	8004e18 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 8004de0:	2300      	movs	r3, #0
 8004de2:	64bb      	str	r3, [r7, #72]	; 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004de4:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 8004de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de8:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7ff fdd0 	bl	8004998 <uavcan_primitive_Empty_1_0_serialize_>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
        if (_err0_ < 0)
 8004dfe:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da02      	bge.n	8004e0c <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 8004e06:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004e0a:	e214      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8004e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e12:	4413      	add	r3, r2
 8004e14:	667b      	str	r3, [r7, #100]	; 0x64
 8004e16:	e1de      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d11c      	bne.n	8004e5c <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 8004e22:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004e26:	647b      	str	r3, [r7, #68]	; 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8004e28:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 8004e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2c:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4413      	add	r3, r2
 8004e32:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7ff fdf2 	bl	8004a20 <uavcan_primitive_String_1_0_serialize_>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (_err1_ < 0)
 8004e42:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da02      	bge.n	8004e50 <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 8004e4a:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004e4e:	e1f2      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8004e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e56:	4413      	add	r3, r2
 8004e58:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5a:	e1bc      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d11c      	bne.n	8004ea0 <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8004e66:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004e6a:	643b      	str	r3, [r7, #64]	; 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004e6c:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 8004e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e70:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4413      	add	r3, r2
 8004e76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f7ff fea8 	bl	8004bd0 <uavcan_primitive_Unstructured_1_0_serialize_>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (_err2_ < 0)
 8004e86:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da02      	bge.n	8004e94 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 8004e8e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004e92:	e1d0      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8004e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e9a:	4413      	add	r3, r2
 8004e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9e:	e19a      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d11c      	bne.n	8004ee4 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 8004eaa:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004eb0:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 8004eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb4:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fe fada 	bl	8003478 <uavcan_primitive_array_Bit_1_0_serialize_>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        if (_err3_ < 0)
 8004eca:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da02      	bge.n	8004ed8 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 8004ed2:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004ed6:	e1ae      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ede:	4413      	add	r3, r2
 8004ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee2:	e178      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d11c      	bne.n	8004f28 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 8004eee:	f240 1301 	movw	r3, #257	; 0x101
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8004ef4:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 8004ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef8:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4413      	add	r3, r2
 8004efe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7fe fd48 	bl	8003998 <uavcan_primitive_array_Integer64_1_0_serialize_>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if (_err4_ < 0)
 8004f0e:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	da02      	bge.n	8004f1c <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 8004f16:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004f1a:	e18c      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f22:	4413      	add	r3, r2
 8004f24:	667b      	str	r3, [r7, #100]	; 0x64
 8004f26:	e156      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	d11c      	bne.n	8004f6c <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 8004f32:	f240 1301 	movw	r3, #257	; 0x101
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8004f38:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 8004f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3c:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4413      	add	r3, r2
 8004f42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7fe fc48 	bl	80037dc <uavcan_primitive_array_Integer32_1_0_serialize_>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        if (_err5_ < 0)
 8004f52:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	da02      	bge.n	8004f60 <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 8004f5a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004f5e:	e16a      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f66:	4413      	add	r3, r2
 8004f68:	667b      	str	r3, [r7, #100]	; 0x64
 8004f6a:	e134      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d11c      	bne.n	8004fb0 <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8004f76:	f240 1301 	movw	r3, #257	; 0x101
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004f7c:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8004f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f80:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4413      	add	r3, r2
 8004f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f7fe fb48 	bl	8003620 <uavcan_primitive_array_Integer16_1_0_serialize_>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (_err6_ < 0)
 8004f96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da02      	bge.n	8004fa4 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 8004f9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fa2:	e148      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004faa:	4413      	add	r3, r2
 8004fac:	667b      	str	r3, [r7, #100]	; 0x64
 8004fae:	e112      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fb6:	2b07      	cmp	r3, #7
 8004fb8:	d11c      	bne.n	8004ff4 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 8004fba:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004fc0:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc4:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fe fdc0 	bl	8003b54 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
        if (_err7_ < 0)
 8004fda:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da02      	bge.n	8004fe8 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004fe2:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004fe6:	e126      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fee:	4413      	add	r3, r2
 8004ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ff2:	e0f0      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d11c      	bne.n	8005038 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8004ffe:	f240 1301 	movw	r3, #257	; 0x101
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8005004:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8005006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005008:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005012:	4619      	mov	r1, r3
 8005014:	f7ff f832 	bl	800407c <uavcan_primitive_array_Natural64_1_0_serialize_>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (_err8_ < 0)
 800501e:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005022:	2b00      	cmp	r3, #0
 8005024:	da02      	bge.n	800502c <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 8005026:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 800502a:	e104      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005032:	4413      	add	r3, r2
 8005034:	667b      	str	r3, [r7, #100]	; 0x64
 8005036:	e0ce      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800503e:	2b09      	cmp	r3, #9
 8005040:	d11c      	bne.n	800507c <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8005042:	f240 1301 	movw	r3, #257	; 0x101
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8005048:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 800504a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800504c:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005056:	4619      	mov	r1, r3
 8005058:	f7fe ff32 	bl	8003ec0 <uavcan_primitive_array_Natural32_1_0_serialize_>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        if (_err9_ < 0)
 8005062:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8005066:	2b00      	cmp	r3, #0
 8005068:	da02      	bge.n	8005070 <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 800506a:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800506e:	e0e2      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005076:	4413      	add	r3, r2
 8005078:	667b      	str	r3, [r7, #100]	; 0x64
 800507a:	e0ac      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005082:	2b0a      	cmp	r3, #10
 8005084:	d11c      	bne.n	80050c0 <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8005086:	f240 1301 	movw	r3, #257	; 0x101
 800508a:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 800508c:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 800508e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005090:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4413      	add	r3, r2
 8005096:	f107 0220 	add.w	r2, r7, #32
 800509a:	4619      	mov	r1, r3
 800509c:	f7fe fe32 	bl	8003d04 <uavcan_primitive_array_Natural16_1_0_serialize_>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if (_err10_ < 0)
 80050a6:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da02      	bge.n	80050b4 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 80050ae:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80050b2:	e0c0      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050ba:	4413      	add	r3, r2
 80050bc:	667b      	str	r3, [r7, #100]	; 0x64
 80050be:	e08a      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050c6:	2b0b      	cmp	r3, #11
 80050c8:	d11c      	bne.n	8005104 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 80050ca:	f44f 7381 	mov.w	r3, #258	; 0x102
 80050ce:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80050d0:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 80050d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d4:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	4413      	add	r3, r2
 80050da:	f107 021c 	add.w	r2, r7, #28
 80050de:	4619      	mov	r1, r3
 80050e0:	f7ff f8aa 	bl	8004238 <uavcan_primitive_array_Natural8_1_0_serialize_>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (_err11_ < 0)
 80050ea:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	da02      	bge.n	80050f8 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 80050f2:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 80050f6:	e09e      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050fe:	4413      	add	r3, r2
 8005100:	667b      	str	r3, [r7, #100]	; 0x64
 8005102:	e068      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800510a:	2b0c      	cmp	r3, #12
 800510c:	d11c      	bne.n	8005148 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 800510e:	f240 1301 	movw	r3, #257	; 0x101
 8005112:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8005114:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8005116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005118:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	f107 0218 	add.w	r2, r7, #24
 8005122:	4619      	mov	r1, r3
 8005124:	f7ff fb5a 	bl	80047dc <uavcan_primitive_array_Real64_1_0_serialize_>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if (_err12_ < 0)
 800512e:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8005132:	2b00      	cmp	r3, #0
 8005134:	da02      	bge.n	800513c <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8005136:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 800513a:	e07c      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005142:	4413      	add	r3, r2
 8005144:	667b      	str	r3, [r7, #100]	; 0x64
 8005146:	e046      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800514e:	2b0d      	cmp	r3, #13
 8005150:	d11c      	bne.n	800518c <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8005152:	f240 1301 	movw	r3, #257	; 0x101
 8005156:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8005158:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 800515a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515c:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4413      	add	r3, r2
 8005162:	f107 0214 	add.w	r2, r7, #20
 8005166:	4619      	mov	r1, r3
 8005168:	f7ff fa5a 	bl	8004620 <uavcan_primitive_array_Real32_1_0_serialize_>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (_err13_ < 0)
 8005172:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8005176:	2b00      	cmp	r3, #0
 8005178:	da02      	bge.n	8005180 <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 800517a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 800517e:	e05a      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005186:	4413      	add	r3, r2
 8005188:	667b      	str	r3, [r7, #100]	; 0x64
 800518a:	e024      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005192:	2b0e      	cmp	r3, #14
 8005194:	d11c      	bne.n	80051d0 <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8005196:	f240 1301 	movw	r3, #257	; 0x101
 800519a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 800519c:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 800519e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a0:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4413      	add	r3, r2
 80051a6:	f107 0210 	add.w	r2, r7, #16
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7ff f91c 	bl	80043e8 <uavcan_primitive_array_Real16_1_0_serialize_>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (_err14_ < 0)
 80051b6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da02      	bge.n	80051c4 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 80051be:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80051c2:	e038      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051ca:	4413      	add	r3, r2
 80051cc:	667b      	str	r3, [r7, #100]	; 0x64
 80051ce:	e002      	b.n	80051d6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80051d0:	f06f 030a 	mvn.w	r3, #10
 80051d4:	e02f      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80051d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d025      	beq.n	800522c <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f1c3 0308 	rsb	r3, r3, #8
 80051ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80051f2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9cd 2300 	strd	r2, r3, [sp]
 8005204:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005206:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005208:	68b8      	ldr	r0, [r7, #8]
 800520a:	f7fd f939 	bl	8002480 <nunavutSetUxx>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (_err15_ < 0)
 8005214:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005218:	2b00      	cmp	r3, #0
 800521a:	da02      	bge.n	8005222 <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 800521c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005220:	e009      	b.n	8005236 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 8005222:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005228:	4413      	add	r3, r2
 800522a:	667b      	str	r3, [r7, #100]	; 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800522c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800522e:	08da      	lsrs	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3768      	adds	r7, #104	; 0x68
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b09a      	sub	sp, #104	; 0x68
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <uavcan_register_Value_1_0_deserialize_+0x26>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <uavcan_register_Value_1_0_deserialize_+0x26>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <uavcan_register_Value_1_0_deserialize_+0x2c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005266:	f06f 0301 	mvn.w	r3, #1
 800526a:	e29b      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005272:	4bb0      	ldr	r3, [pc, #704]	; (8005534 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8005274:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	667b      	str	r3, [r7, #100]	; 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005288:	3308      	adds	r3, #8
 800528a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800528c:	429a      	cmp	r2, r3
 800528e:	d308      	bcc.n	80052a2 <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	4413      	add	r3, r2
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80052a0:	e003      	b.n	80052aa <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 80052aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ac:	3308      	adds	r3, #8
 80052ae:	667b      	str	r3, [r7, #100]	; 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d123      	bne.n	8005302 <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80052ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052bc:	08db      	lsrs	r3, r3, #3
 80052be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fc ffcd 	bl	8002260 <nunavutChooseMin>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80052ce:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 80052d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d2:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4413      	add	r3, r2
 80052d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052dc:	4619      	mov	r1, r3
 80052de:	f7ff fb77 	bl	80049d0 <uavcan_primitive_Empty_1_0_deserialize_>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 80052e8:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da02      	bge.n	80052f6 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 80052f0:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80052f4:	e256      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052fc:	4413      	add	r3, r2
 80052fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005300:	e242      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005308:	2b01      	cmp	r3, #1
 800530a:	d123      	bne.n	8005354 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800530c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc ffa4 	bl	8002260 <nunavutChooseMin>
 8005318:	4602      	mov	r2, r0
 800531a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8005320:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8005322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005324:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	4413      	add	r3, r2
 800532a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800532e:	4619      	mov	r1, r3
 8005330:	f7ff fbee 	bl	8004b10 <uavcan_primitive_String_1_0_deserialize_>
 8005334:	4603      	mov	r3, r0
 8005336:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 800533a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800533e:	2b00      	cmp	r3, #0
 8005340:	da02      	bge.n	8005348 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 8005342:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8005346:	e22d      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8005348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800534e:	4413      	add	r3, r2
 8005350:	667b      	str	r3, [r7, #100]	; 0x64
 8005352:	e219      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800535a:	2b02      	cmp	r3, #2
 800535c:	d123      	bne.n	80053a6 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800535e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005364:	4618      	mov	r0, r3
 8005366:	f7fc ff7b 	bl	8002260 <nunavutChooseMin>
 800536a:	4602      	mov	r2, r0
 800536c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8005372:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8005374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005376:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	4413      	add	r3, r2
 800537c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005380:	4619      	mov	r1, r3
 8005382:	f7ff fc9d 	bl	8004cc0 <uavcan_primitive_Unstructured_1_0_deserialize_>
 8005386:	4603      	mov	r3, r0
 8005388:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 800538c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005390:	2b00      	cmp	r3, #0
 8005392:	da02      	bge.n	800539a <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 8005394:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005398:	e204      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053a0:	4413      	add	r3, r2
 80053a2:	667b      	str	r3, [r7, #100]	; 0x64
 80053a4:	e1f0      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d123      	bne.n	80053f8 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80053b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b2:	08db      	lsrs	r3, r3, #3
 80053b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc ff52 	bl	8002260 <nunavutChooseMin>
 80053bc:	4602      	mov	r2, r0
 80053be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80053c4:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 80053c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c8:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	4413      	add	r3, r2
 80053ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053d2:	4619      	mov	r1, r3
 80053d4:	f7fe f8c6 	bl	8003564 <uavcan_primitive_array_Bit_1_0_deserialize_>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 80053de:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da02      	bge.n	80053ec <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 80053e6:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80053ea:	e1db      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053f2:	4413      	add	r3, r2
 80053f4:	667b      	str	r3, [r7, #100]	; 0x64
 80053f6:	e1c7      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d123      	bne.n	800544a <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005404:	08db      	lsrs	r3, r3, #3
 8005406:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005408:	4618      	mov	r0, r3
 800540a:	f7fc ff29 	bl	8002260 <nunavutChooseMin>
 800540e:	4602      	mov	r2, r0
 8005410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8005416:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	4413      	add	r3, r2
 8005420:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005424:	4619      	mov	r1, r3
 8005426:	f7fe fb2d 	bl	8003a84 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8005430:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8005434:	2b00      	cmp	r3, #0
 8005436:	da02      	bge.n	800543e <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8005438:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 800543c:	e1b2      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005444:	4413      	add	r3, r2
 8005446:	667b      	str	r3, [r7, #100]	; 0x64
 8005448:	e19e      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005450:	2b05      	cmp	r3, #5
 8005452:	d123      	bne.n	800549c <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005456:	08db      	lsrs	r3, r3, #3
 8005458:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800545a:	4618      	mov	r0, r3
 800545c:	f7fc ff00 	bl	8002260 <nunavutChooseMin>
 8005460:	4602      	mov	r2, r0
 8005462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8005468:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 800546a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546c:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	4413      	add	r3, r2
 8005472:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005476:	4619      	mov	r1, r3
 8005478:	f7fe fa26 	bl	80038c8 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8005482:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8005486:	2b00      	cmp	r3, #0
 8005488:	da02      	bge.n	8005490 <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 800548a:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800548e:	e189      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005496:	4413      	add	r3, r2
 8005498:	667b      	str	r3, [r7, #100]	; 0x64
 800549a:	e175      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80054a2:	2b06      	cmp	r3, #6
 80054a4:	d123      	bne.n	80054ee <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80054a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fc fed7 	bl	8002260 <nunavutChooseMin>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80054ba:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 80054bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054be:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4413      	add	r3, r2
 80054c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054c8:	4619      	mov	r1, r3
 80054ca:	f7fe f91f 	bl	800370c <uavcan_primitive_array_Integer16_1_0_deserialize_>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 80054d4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da02      	bge.n	80054e2 <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 80054dc:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80054e0:	e160      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054e8:	4413      	add	r3, r2
 80054ea:	667b      	str	r3, [r7, #100]	; 0x64
 80054ec:	e14c      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80054f4:	2b07      	cmp	r3, #7
 80054f6:	d125      	bne.n	8005544 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80054f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fa:	08db      	lsrs	r3, r3, #3
 80054fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fc feae 	bl	8002260 <nunavutChooseMin>
 8005504:	4602      	mov	r2, r0
 8005506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 800550c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 800550e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005510:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	4413      	add	r3, r2
 8005516:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800551a:	4619      	mov	r1, r3
 800551c:	f7fe fb92 	bl	8003c44 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8005526:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 800552a:	2b00      	cmp	r3, #0
 800552c:	da04      	bge.n	8005538 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 800552e:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8005532:	e137      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
 8005534:	08018010 	.word	0x08018010
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800553e:	4413      	add	r3, r2
 8005540:	667b      	str	r3, [r7, #100]	; 0x64
 8005542:	e121      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800554a:	2b08      	cmp	r3, #8
 800554c:	d123      	bne.n	8005596 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800554e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005554:	4618      	mov	r0, r3
 8005556:	f7fc fe83 	bl	8002260 <nunavutChooseMin>
 800555a:	4602      	mov	r2, r0
 800555c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005562:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8005564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005566:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4413      	add	r3, r2
 800556c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005570:	4619      	mov	r1, r3
 8005572:	f7fe fdf9 	bl	8004168 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 800557c:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005580:	2b00      	cmp	r3, #0
 8005582:	da02      	bge.n	800558a <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8005584:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005588:	e10c      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005590:	4413      	add	r3, r2
 8005592:	667b      	str	r3, [r7, #100]	; 0x64
 8005594:	e0f8      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800559c:	2b09      	cmp	r3, #9
 800559e:	d123      	bne.n	80055e8 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	08db      	lsrs	r3, r3, #3
 80055a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc fe5a 	bl	8002260 <nunavutChooseMin>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80055b4:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 80055b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b8:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fe fcf2 	bl	8003fac <uavcan_primitive_array_Natural32_1_0_deserialize_>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 80055ce:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da02      	bge.n	80055dc <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 80055d6:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80055da:	e0e3      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055e2:	4413      	add	r3, r2
 80055e4:	667b      	str	r3, [r7, #100]	; 0x64
 80055e6:	e0cf      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055ee:	2b0a      	cmp	r3, #10
 80055f0:	d123      	bne.n	800563a <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fc fe31 	bl	8002260 <nunavutChooseMin>
 80055fe:	4602      	mov	r2, r0
 8005600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005606:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8005608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800560a:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4413      	add	r3, r2
 8005610:	f107 0220 	add.w	r2, r7, #32
 8005614:	4619      	mov	r1, r3
 8005616:	f7fe fbeb 	bl	8003df0 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 8005620:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005624:	2b00      	cmp	r3, #0
 8005626:	da02      	bge.n	800562e <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 8005628:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800562c:	e0ba      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005634:	4413      	add	r3, r2
 8005636:	667b      	str	r3, [r7, #100]	; 0x64
 8005638:	e0a6      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005640:	2b0b      	cmp	r3, #11
 8005642:	d123      	bne.n	800568c <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc fe08 	bl	8002260 <nunavutChooseMin>
 8005650:	4602      	mov	r2, r0
 8005652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005658:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 800565a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565c:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	f107 021c 	add.w	r2, r7, #28
 8005666:	4619      	mov	r1, r3
 8005668:	f7fe fe5e 	bl	8004328 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 8005672:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8005676:	2b00      	cmp	r3, #0
 8005678:	da02      	bge.n	8005680 <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 800567a:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800567e:	e091      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005686:	4413      	add	r3, r2
 8005688:	667b      	str	r3, [r7, #100]	; 0x64
 800568a:	e07d      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d123      	bne.n	80056de <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005698:	08db      	lsrs	r3, r3, #3
 800569a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800569c:	4618      	mov	r0, r3
 800569e:	f7fc fddf 	bl	8002260 <nunavutChooseMin>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80056aa:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80056ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ae:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4413      	add	r3, r2
 80056b4:	f107 0218 	add.w	r2, r7, #24
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7ff f905 	bl	80048c8 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 80056c4:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da02      	bge.n	80056d2 <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 80056cc:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80056d0:	e068      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056d8:	4413      	add	r3, r2
 80056da:	667b      	str	r3, [r7, #100]	; 0x64
 80056dc:	e054      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80056e4:	2b0d      	cmp	r3, #13
 80056e6:	d123      	bne.n	8005730 <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80056e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fc fdb6 	bl	8002260 <nunavutChooseMin>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80056fc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 80056fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005700:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4413      	add	r3, r2
 8005706:	f107 0214 	add.w	r2, r7, #20
 800570a:	4619      	mov	r1, r3
 800570c:	f7fe fffe 	bl	800470c <uavcan_primitive_array_Real32_1_0_deserialize_>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 8005716:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800571a:	2b00      	cmp	r3, #0
 800571c:	da02      	bge.n	8005724 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 800571e:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8005722:	e03f      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800572a:	4413      	add	r3, r2
 800572c:	667b      	str	r3, [r7, #100]	; 0x64
 800572e:	e02b      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005736:	2b0e      	cmp	r3, #14
 8005738:	d123      	bne.n	8005782 <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800573a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800573c:	08db      	lsrs	r3, r3, #3
 800573e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005740:	4618      	mov	r0, r3
 8005742:	f7fc fd8d 	bl	8002260 <nunavutChooseMin>
 8005746:	4602      	mov	r2, r0
 8005748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800574e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4413      	add	r3, r2
 8005758:	f107 0210 	add.w	r2, r7, #16
 800575c:	4619      	mov	r1, r3
 800575e:	f7fe feed 	bl	800453c <uavcan_primitive_array_Real16_1_0_deserialize_>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8005768:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 800576c:	2b00      	cmp	r3, #0
 800576e:	da02      	bge.n	8005776 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 8005770:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005774:	e016      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800577c:	4413      	add	r3, r2
 800577e:	667b      	str	r3, [r7, #100]	; 0x64
 8005780:	e002      	b.n	8005788 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8005782:	f06f 030a 	mvn.w	r3, #10
 8005786:	e00d      	b.n	80057a4 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578a:	3307      	adds	r3, #7
 800578c:	f023 0307 	bic.w	r3, r3, #7
 8005790:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005792:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005794:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005796:	f7fc fd63 	bl	8002260 <nunavutChooseMin>
 800579a:	4603      	mov	r3, r0
 800579c:	08da      	lsrs	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3768      	adds	r7, #104	; 0x68
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08c      	sub	sp, #48	; 0x30
 80057b0:	af04      	add	r7, sp, #16
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80057ca:	f06f 0301 	mvn.w	r3, #1
 80057ce:	e043      	b.n	8005858 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	2b37      	cmp	r3, #55	; 0x37
 80057dc:	d802      	bhi.n	80057e4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80057de:	f06f 0302 	mvn.w	r3, #2
 80057e2:	e039      	b.n	8005858 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	08db      	lsrs	r3, r3, #3
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4413      	add	r3, r2
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	2207      	movs	r2, #7
 80057f4:	4618      	mov	r0, r3
 80057f6:	f00e fb7a 	bl	8013eee <memmove>
        offset_bits += 56U;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3338      	adds	r3, #56	; 0x38
 80057fe:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d021      	beq.n	800584e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f1c3 0308 	rsb	r3, r3, #8
 8005818:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	e9cd 2300 	strd	r2, r3, [sp]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	69b9      	ldr	r1, [r7, #24]
 800582e:	68b8      	ldr	r0, [r7, #8]
 8005830:	f7fc fe26 	bl	8002480 <nunavutSetUxx>
 8005834:	4603      	mov	r3, r0
 8005836:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005838:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800583c:	2b00      	cmp	r3, #0
 800583e:	da02      	bge.n	8005846 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 8005840:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005844:	e008      	b.n	8005858 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	08da      	lsrs	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005886:	f06f 0301 	mvn.w	r3, #1
 800588a:	e065      	b.n	8005958 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005894:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	08db      	lsrs	r3, r3, #3
 80058aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fc fcd7 	bl	8002260 <nunavutChooseMin>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80058ba:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	4413      	add	r3, r2
 80058c4:	f107 0214 	add.w	r2, r7, #20
 80058c8:	4619      	mov	r1, r3
 80058ca:	f7fd fd6d 	bl	80033a8 <uavcan_register_Name_1_0_deserialize_>
 80058ce:	4603      	mov	r3, r0
 80058d0:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 80058d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da02      	bge.n	80058e0 <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 80058da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80058de:	e03b      	b.n	8005958 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3307      	adds	r3, #7
 80058ee:	f023 0307 	bic.w	r3, r3, #7
 80058f2:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	08db      	lsrs	r3, r3, #3
 80058f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fc fcb0 	bl	8002260 <nunavutChooseMin>
 8005900:	4602      	mov	r2, r0
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	4413      	add	r3, r2
 8005916:	f107 0210 	add.w	r2, r7, #16
 800591a:	4619      	mov	r1, r3
 800591c:	f7ff fc90 	bl	8005240 <uavcan_register_Value_1_0_deserialize_>
 8005920:	4603      	mov	r3, r0
 8005922:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8005924:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005928:	2b00      	cmp	r3, #0
 800592a:	da02      	bge.n	8005932 <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 800592c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005930:	e012      	b.n	8005958 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	3307      	adds	r3, #7
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005946:	6a39      	ldr	r1, [r7, #32]
 8005948:	69f8      	ldr	r0, [r7, #28]
 800594a:	f7fc fc89 	bl	8002260 <nunavutChooseMin>
 800594e:	4603      	mov	r3, r0
 8005950:	08da      	lsrs	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3728      	adds	r7, #40	; 0x28
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	08018010 	.word	0x08018010

08005964 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af04      	add	r7, sp, #16
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005982:	f06f 0301 	mvn.w	r3, #1
 8005986:	e0f0      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	f640 0257 	movw	r2, #2135	; 0x857
 8005996:	4293      	cmp	r3, r2
 8005998:	d802      	bhi.n	80059a0 <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800599a:	f06f 0302 	mvn.w	r3, #2
 800599e:	e0e4      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 80059a4:	2307      	movs	r3, #7
 80059a6:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 80059a8:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	f107 0214 	add.w	r2, r7, #20
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7ff fef8 	bl	80057ac <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 80059bc:	4603      	mov	r3, r0
 80059be:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 80059c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da02      	bge.n	80059ce <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 80059c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059cc:	e0cd      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d4:	4413      	add	r3, r2
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	7a1b      	ldrb	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 80059e0:	2101      	movs	r1, #1
 80059e2:	e000      	b.n	80059e6 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 80059e4:	2100      	movs	r1, #0
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	08db      	lsrs	r3, r3, #3
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4413      	add	r3, r2
 80059ee:	460a      	mov	r2, r1
 80059f0:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	3301      	adds	r3, #1
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	7a5b      	ldrb	r3, [r3, #9]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d013      	beq.n	8005a28 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	4413      	add	r3, r2
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	2201      	movs	r2, #1
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	08db      	lsrs	r3, r3, #3
 8005a1c:	68b8      	ldr	r0, [r7, #8]
 8005a1e:	4403      	add	r3, r0
 8005a20:	430a      	orrs	r2, r1
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e014      	b.n	8005a52 <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	08db      	lsrs	r3, r3, #3
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4413      	add	r3, r2
 8005a30:	7819      	ldrb	r1, [r3, #0]
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	2201      	movs	r2, #1
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	08db      	lsrs	r3, r3, #3
 8005a48:	68b8      	ldr	r0, [r7, #8]
 8005a4a:	4403      	add	r3, r0
 8005a4c:	400a      	ands	r2, r1
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	3301      	adds	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005a58:	2306      	movs	r3, #6
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9cd 2300 	strd	r2, r3, [sp]
 8005a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6a:	6a39      	ldr	r1, [r7, #32]
 8005a6c:	68b8      	ldr	r0, [r7, #8]
 8005a6e:	f7fc fd07 	bl	8002480 <nunavutSetUxx>
 8005a72:	4603      	mov	r3, r0
 8005a74:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005a76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da02      	bge.n	8005a84 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8005a7e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a82:	e072      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	3306      	adds	r3, #6
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d021      	beq.n	8005ad8 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f1c3 0308 	rsb	r3, r3, #8
 8005aa2:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005aa4:	7f7b      	ldrb	r3, [r7, #29]
 8005aa6:	9302      	str	r3, [sp, #8]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9cd 2300 	strd	r2, r3, [sp]
 8005ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab6:	6a39      	ldr	r1, [r7, #32]
 8005ab8:	68b8      	ldr	r0, [r7, #8]
 8005aba:	f7fc fce1 	bl	8002480 <nunavutSetUxx>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005ac2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da02      	bge.n	8005ad0 <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005aca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ace:	e04c      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005ad0:	7f7b      	ldrb	r3, [r7, #29]
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	4413      	add	r3, r2
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005ad8:	f240 1303 	movw	r3, #259	; 0x103
 8005adc:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	4413      	add	r3, r2
 8005aec:	f107 0210 	add.w	r2, r7, #16
 8005af0:	4619      	mov	r1, r3
 8005af2:	f7ff f945 	bl	8004d80 <uavcan_register_Value_1_0_serialize_>
 8005af6:	4603      	mov	r3, r0
 8005af8:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 8005afa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	da02      	bge.n	8005b08 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8005b02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b06:	e030      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	4413      	add	r3, r2
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d021      	beq.n	8005b60 <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f1c3 0308 	rsb	r3, r3, #8
 8005b2a:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8005b2c:	7ebb      	ldrb	r3, [r7, #26]
 8005b2e:	9302      	str	r3, [sp, #8]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9cd 2300 	strd	r2, r3, [sp]
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	6a39      	ldr	r1, [r7, #32]
 8005b40:	68b8      	ldr	r0, [r7, #8]
 8005b42:	f7fc fc9d 	bl	8002480 <nunavutSetUxx>
 8005b46:	4603      	mov	r3, r0
 8005b48:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005b4a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da02      	bge.n	8005b58 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005b52:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005b56:	e008      	b.n	8005b6a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005b58:	7ebb      	ldrb	r3, [r7, #26]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5c:	4413      	add	r3, r2
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	08da      	lsrs	r2, r3, #3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3728      	adds	r7, #40	; 0x28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08c      	sub	sp, #48	; 0x30
 8005b76:	af04      	add	r7, sp, #16
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005b90:	f06f 0301 	mvn.w	r3, #1
 8005b94:	e04b      	b.n	8005c2e <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	2b0f      	cmp	r3, #15
 8005ba2:	d802      	bhi.n	8005baa <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005ba4:	f06f 0302 	mvn.w	r3, #2
 8005ba8:	e041      	b.n	8005c2e <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4413      	add	r3, r2
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	7852      	ldrb	r2, [r2, #1]
 8005bce:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d021      	beq.n	8005c24 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f1c3 0308 	rsb	r3, r3, #8
 8005bee:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	68b8      	ldr	r0, [r7, #8]
 8005c06:	f7fc fc3b 	bl	8002480 <nunavutSetUxx>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005c0e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da02      	bge.n	8005c1c <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 8005c16:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005c1a:	e008      	b.n	8005c2e <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	08da      	lsrs	r2, r3, #3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005c5e:	f06f 0301 	mvn.w	r3, #1
 8005c62:	e008      	b.n	8005c76 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005c6c:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	08018010 	.word	0x08018010

08005c88 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b090      	sub	sp, #64	; 0x40
 8005c8c:	af04      	add	r7, sp, #16
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005ca6:	f06f 0301 	mvn.w	r3, #1
 8005caa:	e16b      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	f640 12c7 	movw	r2, #2503	; 0x9c7
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d802      	bhi.n	8005cc4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005cbe:	f06f 0302 	mvn.w	r3, #2
 8005cc2:	e15f      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005cc8:	2302      	movs	r3, #2
 8005cca:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005ccc:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f107 0218 	add.w	r2, r7, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f7ff ff49 	bl	8005b72 <uavcan_node_Version_1_0_serialize_>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 8005ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da02      	bge.n	8005cf4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 8005cee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cf2:	e147      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfa:	4413      	add	r3, r2
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d025      	beq.n	8005d54 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f1c3 0308 	rsb	r3, r3, #8
 8005d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005d1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d1e:	9302      	str	r3, [sp, #8]
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9cd 2300 	strd	r2, r3, [sp]
 8005d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d30:	68b8      	ldr	r0, [r7, #8]
 8005d32:	f7fc fba5 	bl	8002480 <nunavutSetUxx>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 8005d3c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da02      	bge.n	8005d4a <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8005d44:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d48:	e11c      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8005d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d50:	4413      	add	r3, r2
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8005d54:	2302      	movs	r3, #2
 8005d56:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4413      	add	r3, r2
 8005d64:	f107 0214 	add.w	r2, r7, #20
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f7ff ff02 	bl	8005b72 <uavcan_node_Version_1_0_serialize_>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 8005d74:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da02      	bge.n	8005d82 <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8005d7c:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005d80:	e100      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d88:	4413      	add	r3, r2
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d025      	beq.n	8005de2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f1c3 0308 	rsb	r3, r3, #8
 8005da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8005da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dac:	9302      	str	r3, [sp, #8]
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	e9cd 2300 	strd	r2, r3, [sp]
 8005dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f7fc fb5e 	bl	8002480 <nunavutSetUxx>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 8005dca:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da02      	bge.n	8005dd8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 8005dd2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005dd6:	e0d5      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 8005dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dde:	4413      	add	r3, r2
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 8005de2:	2302      	movs	r3, #2
 8005de4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4413      	add	r3, r2
 8005df2:	f107 0210 	add.w	r2, r7, #16
 8005df6:	4619      	mov	r1, r3
 8005df8:	f7ff febb 	bl	8005b72 <uavcan_node_Version_1_0_serialize_>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 8005e02:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da02      	bge.n	8005e10 <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 8005e0a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e0e:	e0b9      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e16:	4413      	add	r3, r2
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	08db      	lsrs	r3, r3, #3
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	18d0      	adds	r0, r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3308      	adds	r3, #8
 8005e26:	2208      	movs	r2, #8
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f00e f860 	bl	8013eee <memmove>
        offset_bits += 64U;
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	3340      	adds	r3, #64	; 0x40
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3310      	adds	r3, #16
 8005e38:	2200      	movs	r2, #0
 8005e3a:	9200      	str	r2, [sp, #0]
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e40:	68b8      	ldr	r0, [r7, #8]
 8005e42:	f7fc fa39 	bl	80022b8 <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	3380      	adds	r3, #128	; 0x80
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e50:	2b32      	cmp	r3, #50	; 0x32
 8005e52:	d902      	bls.n	8005e5a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005e54:	f06f 0309 	mvn.w	r3, #9
 8005e58:	e094      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	08db      	lsrs	r3, r3, #3
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	b2ca      	uxtb	r2, r1
 8005e68:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e74:	00da      	lsls	r2, r3, #3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3320      	adds	r3, #32
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	9100      	str	r1, [sp, #0]
 8005e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e80:	68b8      	ldr	r0, [r7, #8]
 8005e82:	f7fc fa19 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8e:	4413      	add	r3, r2
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d902      	bls.n	8005ea0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005e9a:	f06f 0309 	mvn.w	r3, #9
 8005e9e:	e071      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	08db      	lsrs	r3, r3, #3
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	b2ca      	uxtb	r2, r1
 8005eae:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eba:	019a      	lsls	r2, r3, #6
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3358      	adds	r3, #88	; 0x58
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	9100      	str	r1, [sp, #0]
 8005ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ec6:	68b8      	ldr	r0, [r7, #8]
 8005ec8:	f7fc f9f6 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed4:	4413      	add	r3, r2
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005ede:	2bde      	cmp	r3, #222	; 0xde
 8005ee0:	d902      	bls.n	8005ee8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005ee2:	f06f 0309 	mvn.w	r3, #9
 8005ee6:	e04d      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	08db      	lsrs	r3, r3, #3
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b2ca      	uxtb	r2, r1
 8005ef8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	3308      	adds	r3, #8
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f06:	00da      	lsls	r2, r3, #3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3368      	adds	r3, #104	; 0x68
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	9100      	str	r1, [sp, #0]
 8005f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f12:	68b8      	ldr	r0, [r7, #8]
 8005f14:	f7fc f9d0 	bl	80022b8 <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f22:	4413      	add	r3, r2
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d024      	beq.n	8005f7a <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f1c3 0308 	rsb	r3, r3, #8
 8005f3e:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9cd 2300 	strd	r2, r3, [sp]
 8005f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f58:	68b8      	ldr	r0, [r7, #8]
 8005f5a:	f7fc fa91 	bl	8002480 <nunavutSetUxx>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8005f62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da02      	bge.n	8005f70 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 8005f6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f6e:	e009      	b.n	8005f84 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8005f70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f76:	4413      	add	r3, r2
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	08da      	lsrs	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3730      	adds	r7, #48	; 0x30
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fa2f 	bl	80073fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
      { }
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	f7fb ffa3 	bl	8001f12 <Error_Handler>
 8005fcc:	bf00      	nop
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	f004 f896 	bl	800a104 <HAL_GetTick>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	461c      	mov	r4, r3
 8005fe6:	4615      	mov	r5, r2
 8005fe8:	4622      	mov	r2, r4
 8005fea:	462b      	mov	r3, r5
 8005fec:	4610      	mov	r0, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	bdb0      	pop	{r4, r5, r7, pc}

08005ff2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f001 fa66 	bl	80074e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff ffdf 	bl	8005ff2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff9f 	bl	8005f8c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8006062:	687c      	ldr	r4, [r7, #4]
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff ffd7 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	f641 5255 	movw	r2, #7509	; 0x1d55
 8006078:	4619      	mov	r1, r3
 800607a:	4620      	mov	r0, r4
 800607c:	f001 fa47 	bl	800750e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8006080:	f107 0308 	add.w	r3, r7, #8
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ffda 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800608a:	4a04      	ldr	r2, [pc, #16]	; (800609c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bd90      	pop	{r4, r7, pc}
 800609a:	bf00      	nop
 800609c:	08018098 	.word	0x08018098

080060a0 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 80060c2:	687c      	ldr	r4, [r7, #4]
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff ffa7 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80060d0:	f107 0308 	add.w	r3, r7, #8
 80060d4:	f240 4262 	movw	r2, #1122	; 0x462
 80060d8:	4619      	mov	r1, r3
 80060da:	4620      	mov	r0, r4
 80060dc:	f001 fa35 	bl	800754a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff ffaa 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80060ea:	4a04      	ldr	r2, [pc, #16]	; (80060fc <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	08018078 	.word	0x08018078

08006100 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
    {
    	if(js_in.angular_velocity.radian_per_second)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006112:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611a:	d00e      	beq.n	800613a <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x3a>
    	{
    		tmc5160_move(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps));
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x70>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	eeb0 0a67 	vmov.f32	s0, s15
 800612c:	f003 ff30 	bl	8009f90 <rad_to_steps>
 8006130:	4603      	mov	r3, r0
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fb0c 	bl	8009750 <tmc5160_move>
//    	{
//    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
//    		pos_in = js_in.angular_position.radian;
//    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, 2560000)); //jc.full_steps
//    	}
    }
 8006138:	e016      	b.n	8006168 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x68>
    		js_in.angular_position.radian != steps_to_rads(tmc5160_position_read(), jc.full_steps);
 800613a:	f003 fc27 	bl	800998c <tmc5160_position_read>
 800613e:	4603      	mov	r3, r0
 8006140:	4a0b      	ldr	r2, [pc, #44]	; (8006170 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x70>)
 8006142:	6892      	ldr	r2, [r2, #8]
 8006144:	4611      	mov	r1, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f003 feee 	bl	8009f28 <steps_to_rads>
    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	edd3 7a00 	vldr	s15, [r3]
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x70>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	eeb0 0a67 	vmov.f32	s0, s15
 800615c:	f003 ff18 	bl	8009f90 <rad_to_steps>
 8006160:	4603      	mov	r3, r0
 8006162:	4618      	mov	r0, r3
 8006164:	f003 fac2 	bl	80096ec <tmc5160_position>
    }
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	2000042c 	.word	0x2000042c

08006174 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 800617e:	687c      	ldr	r4, [r7, #4]
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ff49 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800618c:	f107 0108 	add.w	r1, r7, #8
 8006190:	2302      	movs	r3, #2
 8006192:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8006196:	4620      	mov	r0, r4
 8006198:	f001 fa06 	bl	80075a8 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800619c:	f107 0308 	add.w	r3, r7, #8
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff ff4c 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80061a6:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd90      	pop	{r4, r7, pc}
 80061b6:	bf00      	nop
 80061b8:	08018058 	.word	0x08018058

080061bc <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 80061bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061c0:	b0e7      	sub	sp, #412	; 0x19c
 80061c2:	af06      	add	r7, sp, #24
 80061c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80061cc:	6018      	str	r0, [r3, #0]
 80061ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80061d6:	6019      	str	r1, [r3, #0]
 80061d8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061e0:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 80061e2:	466b      	mov	r3, sp
 80061e4:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 80061e6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80061ee:	4618      	mov	r0, r3
 80061f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80061f4:	461a      	mov	r2, r3
 80061f6:	2100      	movs	r1, #0
 80061f8:	f00d fe93 	bl	8013f22 <memset>
 80061fc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006200:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800620c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006210:	2201      	movs	r2, #1
 8006212:	709a      	strb	r2, [r3, #2]
 8006214:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006218:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800621c:	2201      	movs	r2, #1
 800621e:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8006220:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006224:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    node_info_response.software_image_crc.count = 0;
 800622e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006232:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006236:	2200      	movs	r2, #0
 8006238:	661a      	str	r2, [r3, #96]	; 0x60
    size_t name_len = 8;
 800623a:	2308      	movs	r3, #8
 800623c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    char joint_name[name_len];
 8006240:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8006244:	460b      	mov	r3, r1
 8006246:	3b01      	subs	r3, #1
 8006248:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800624c:	2300      	movs	r3, #0
 800624e:	4688      	mov	r8, r1
 8006250:	4699      	mov	r9, r3
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800625e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006266:	2300      	movs	r3, #0
 8006268:	460c      	mov	r4, r1
 800626a:	461d      	mov	r5, r3
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	00eb      	lsls	r3, r5, #3
 8006276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627a:	00e2      	lsls	r2, r4, #3
 800627c:	1dcb      	adds	r3, r1, #7
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	ebad 0d03 	sub.w	sp, sp, r3
 8006286:	ab06      	add	r3, sp, #24
 8006288:	3300      	adds	r3, #0
 800628a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 800628e:	2202      	movs	r2, #2
 8006290:	4939      	ldr	r1, [pc, #228]	; (8006378 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 8006292:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8006296:	f00d fdb7 	bl	8013e08 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 800629a:	f107 0320 	add.w	r3, r7, #32
 800629e:	3320      	adds	r3, #32
 80062a0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80062a4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80062a8:	4618      	mov	r0, r3
 80062aa:	f00d ff20 	bl	80140ee <memcpy>
    node_info_response.name.count = name_len;
 80062ae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80062b6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
    uint32_t word0 = 1;
 80062bc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 80062c8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062cc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80062d0:	2202      	movs	r2, #2
 80062d2:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 80062d4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80062dc:	2203      	movs	r2, #3
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80062e8:	681a      	ldr	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 80062ea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80062f2:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 80062f4:	f107 0320 	add.w	r3, r7, #32
 80062f8:	3310      	adds	r3, #16
 80062fa:	3304      	adds	r3, #4
 80062fc:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8006300:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8006308:	f107 0320 	add.w	r3, r7, #32
 800630c:	3310      	adds	r3, #16
 800630e:	3308      	adds	r3, #8
 8006310:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8006314:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 800631c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006320:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006324:	2202      	movs	r2, #2
 8006326:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8006328:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800632c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006336:	4618      	mov	r0, r3
 8006338:	f001 f968 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800633c:	4604      	mov	r4, r0
 800633e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006342:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8006346:	f107 0020 	add.w	r0, r7, #32
 800634a:	2304      	movs	r3, #4
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	4a0b      	ldr	r2, [pc, #44]	; (800637c <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006358:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	680b      	ldr	r3, [r1, #0]
 8006360:	4a07      	ldr	r2, [pc, #28]	; (8006380 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 8006362:	4601      	mov	r1, r0
 8006364:	4620      	mov	r0, r4
 8006366:	f001 f95d 	bl	8007624 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 800636a:	46b5      	mov	sp, r6
}
 800636c:	bf00      	nop
 800636e:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8006372:	46bd      	mov	sp, r7
 8006374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006378:	08018008 	.word	0x08018008
 800637c:	000f4240 	.word	0x000f4240
 8006380:	200004e8 	.word	0x200004e8

08006384 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 800638e:	687c      	ldr	r4, [r7, #4]
 8006390:	f107 0308 	add.w	r3, r7, #8
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fe41 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800639c:	f107 0108 	add.w	r1, r7, #8
 80063a0:	2302      	movs	r3, #2
 80063a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80063a6:	4620      	mov	r0, r4
 80063a8:	f001 f986 	bl	80076b8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80063ac:	f107 0308 	add.w	r3, r7, #8
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fe44 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80063b6:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd90      	pop	{r4, r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08018038 	.word	0x08018038

080063cc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	f2ad 5d7c 	subw	sp, sp, #1404	; 0x57c
 80063d2:	af06      	add	r7, sp, #24
 80063d4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063d8:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80063dc:	6018      	str	r0, [r3, #0]
 80063de:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063e2:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80063e6:	6019      	str	r1, [r3, #0]
 80063e8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063ec:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80063f0:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 80063f2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063f6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80063fa:	4618      	mov	r0, r3
 80063fc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006400:	461a      	mov	r2, r3
 8006402:	2100      	movs	r1, #0
 8006404:	f00d fd8d 	bl	8013f22 <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8006408:	f7ff fde2 	bl	8005fd0 <micros_64>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8006414:	f5a1 710c 	sub.w	r1, r1, #560	; 0x230
 8006418:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 800641c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006420:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006424:	4618      	mov	r0, r3
 8006426:	f44f 7304 	mov.w	r3, #528	; 0x210
 800642a:	461a      	mov	r2, r3
 800642c:	2100      	movs	r1, #0
 800642e:	f00d fd78 	bl	8013f22 <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800643e:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 8006448:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800644c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2204      	movs	r2, #4
 8006454:	49c7      	ldr	r1, [pc, #796]	; (8006774 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>)
 8006456:	4618      	mov	r0, r3
 8006458:	f00d fd39 	bl	8013ece <memcmp>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d15c      	bne.n	800651c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 8006462:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006466:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006470:	2b04      	cmp	r3, #4
 8006472:	d113      	bne.n	800649c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006474:	2104      	movs	r1, #4
 8006476:	48c0      	ldr	r0, [pc, #768]	; (8006778 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 8006478:	f005 f82a 	bl	800b4d0 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 800647c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006480:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 800648a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800648e:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 8006492:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8006496:	4618      	mov	r0, r3
 8006498:	f003 f95a 	bl	8009750 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 800649c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064a0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80064a4:	2201      	movs	r2, #1
 80064a6:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80064a8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80064b0:	2201      	movs	r2, #1
 80064b2:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 80064b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064b8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80064bc:	2204      	movs	r2, #4
 80064be:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 80064c2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064c6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80064ca:	4618      	mov	r0, r3
 80064cc:	f44f 7384 	mov.w	r3, #264	; 0x108
 80064d0:	461a      	mov	r2, r3
 80064d2:	2100      	movs	r1, #0
 80064d4:	f00d fd25 	bl	8013f22 <memset>
        result.value.elements[0] = tv; //PZDC!!!
 80064d8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80064e4:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 80064e8:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 80064ec:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064f0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80064f4:	2201      	movs	r2, #1
 80064f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer64 = result;
 80064fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064fe:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006502:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006506:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006512:	461a      	mov	r2, r3
 8006514:	f00d fdeb 	bl	80140ee <memcpy>
 8006518:	f000 bc89 	b.w	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 800651c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006520:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2204      	movs	r2, #4
 8006528:	4994      	ldr	r1, [pc, #592]	; (800677c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b0>)
 800652a:	4618      	mov	r0, r3
 800652c:	f00d fccf 	bl	8013ece <memcmp>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d157      	bne.n	80065e6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x21a>
        if (register_access_request.value._tag_ == 9) {
 8006536:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800653a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006544:	2b09      	cmp	r3, #9
 8006546:	d10b      	bne.n	8006560 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x194>
            //MOVE
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006548:	2104      	movs	r1, #4
 800654a:	488b      	ldr	r0, [pc, #556]	; (8006778 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 800654c:	f004 ffc0 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800655c:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006560:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006564:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006568:	2201      	movs	r2, #1
 800656a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800656c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006570:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006574:	2201      	movs	r2, #1
 8006576:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006578:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800657c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006580:	2209      	movs	r2, #9
 8006582:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006586:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800658a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800658e:	4618      	mov	r0, r3
 8006590:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006594:	461a      	mov	r2, r3
 8006596:	2100      	movs	r1, #0
 8006598:	f00d fcc3 	bl	8013f22 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 800659c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065a0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80065aa:	461a      	mov	r2, r3
 80065ac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065b0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065b4:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 80065b6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065ba:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065be:	2201      	movs	r2, #1
 80065c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 80065c4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065c8:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80065cc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065d0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065dc:	461a      	mov	r2, r3
 80065de:	f00d fd86 	bl	80140ee <memcpy>
 80065e2:	f000 bc24 	b.w	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 80065e6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065ea:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2203      	movs	r2, #3
 80065f2:	4963      	ldr	r1, [pc, #396]	; (8006780 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b4>)
 80065f4:	4618      	mov	r0, r3
 80065f6:	f00d fc6a 	bl	8013ece <memcmp>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d156      	bne.n	80066ae <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2e2>

        if (register_access_request.value._tag_ == 9) {
 8006600:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006604:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800660e:	2b09      	cmp	r3, #9
 8006610:	d111      	bne.n	8006636 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x26a>
            tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 8006612:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006616:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006620:	4618      	mov	r0, r3
 8006622:	f003 f863 	bl	80096ec <tmc5160_position>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006626:	2104      	movs	r1, #4
 8006628:	4853      	ldr	r0, [pc, #332]	; (8006778 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 800662a:	f004 ff51 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	js_pos_v = tmc5160_position_read();
 800662e:	f003 f9ad 	bl	800998c <tmc5160_position_read>
 8006632:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
        }
        register_access_response.persistent = true;
 8006636:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800663a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800663e:	2201      	movs	r2, #1
 8006640:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006642:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006646:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800664a:	2201      	movs	r2, #1
 800664c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 800664e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006652:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006656:	2209      	movs	r2, #9
 8006658:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 800665c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006660:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006664:	4618      	mov	r0, r3
 8006666:	f44f 7382 	mov.w	r3, #260	; 0x104
 800666a:	461a      	mov	r2, r3
 800666c:	2100      	movs	r1, #0
 800666e:	f00d fc58 	bl	8013f22 <memset>
        result.value.elements[0] = js_pos_v;
 8006672:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006676:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800667a:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 800667e:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006680:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006684:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006688:	2201      	movs	r2, #1
 800668a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 800668e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006692:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006696:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800669a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80066a6:	461a      	mov	r2, r3
 80066a8:	f00d fd21 	bl	80140ee <memcpy>
 80066ac:	e3bf      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 80066ae:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066b2:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2207      	movs	r2, #7
 80066ba:	4932      	ldr	r1, [pc, #200]	; (8006784 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b8>)
 80066bc:	4618      	mov	r0, r3
 80066be:	f00d fc06 	bl	8013ece <memcmp>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d15f      	bne.n	8006788 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3bc>
        if (register_access_request.value._tag_ == 9) {
 80066c8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066cc:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	d10f      	bne.n	80066fa <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x32e>
        	js_pos_v = tmc5160_position_read();
 80066da:	f003 f957 	bl	800998c <tmc5160_position_read>
 80066de:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80066e2:	2104      	movs	r1, #4
 80066e4:	4824      	ldr	r0, [pc, #144]	; (8006778 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 80066e6:	f004 fef3 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80066f6:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 80066fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006702:	2201      	movs	r2, #1
 8006704:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006706:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800670a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800670e:	2201      	movs	r2, #1
 8006710:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006712:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006716:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800671a:	2209      	movs	r2, #9
 800671c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006720:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006724:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006728:	4618      	mov	r0, r3
 800672a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800672e:	461a      	mov	r2, r3
 8006730:	2100      	movs	r1, #0
 8006732:	f00d fbf6 	bl	8013f22 <memset>
        result.value.elements[0] = js_pos_v;
 8006736:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800673a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800673e:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8006742:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006744:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006748:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800674c:	2201      	movs	r2, #1
 800674e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 8006752:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006756:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800675a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800675e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	f44f 7382 	mov.w	r3, #260	; 0x104
 800676a:	461a      	mov	r2, r3
 800676c:	f00d fcbf 	bl	80140ee <memcpy>
 8006770:	e35d      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
 8006772:	bf00      	nop
 8006774:	20000000 	.word	0x20000000
 8006778:	48000c00 	.word	0x48000c00
 800677c:	20000008 	.word	0x20000008
 8006780:	20000010 	.word	0x20000010
 8006784:	20000018 	.word	0x20000018
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 8006788:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800678c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2203      	movs	r2, #3
 8006794:	49c8      	ldr	r1, [pc, #800]	; (8006ab8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6ec>)
 8006796:	4618      	mov	r0, r3
 8006798:	f00d fb99 	bl	8013ece <memcmp>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d15f      	bne.n	8006862 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x496>
        if (register_access_request.value._tag_ == 7) {
 80067a2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067a6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80067b0:	2b07      	cmp	r3, #7
 80067b2:	d115      	bne.n	80067e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x414>
            tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 80067b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067b8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f993 3108 	ldrsb.w	r3, [r3, #264]	; 0x108
 80067c2:	4618      	mov	r0, r3
 80067c4:	f003 fa70 	bl	8009ca8 <tmc5160_set_motor_direction>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80067c8:	2104      	movs	r1, #4
 80067ca:	48bc      	ldr	r0, [pc, #752]	; (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 80067cc:	f004 fe80 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80067dc:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 80067e0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067e4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067e8:	2201      	movs	r2, #1
 80067ea:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80067ec:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067f0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067f4:	2201      	movs	r2, #1
 80067f6:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80067f8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067fc:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006800:	220b      	movs	r2, #11
 8006802:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006806:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800680a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800680e:	4618      	mov	r0, r3
 8006810:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006814:	461a      	mov	r2, r3
 8006816:	2100      	movs	r1, #0
 8006818:	f00d fb83 	bl	8013f22 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 800681c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006820:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f993 2108 	ldrsb.w	r2, [r3, #264]	; 0x108
 800682a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800682e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006832:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006834:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006838:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800683c:	2201      	movs	r2, #1
 800683e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer8 = result;
 8006842:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006846:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800684a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800684e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	f44f 7382 	mov.w	r3, #260	; 0x104
 800685a:	461a      	mov	r2, r3
 800685c:	f00d fc47 	bl	80140ee <memcpy>
 8006860:	e2e5      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 8006862:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006866:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2205      	movs	r2, #5
 800686e:	4994      	ldr	r1, [pc, #592]	; (8006ac0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f4>)
 8006870:	4618      	mov	r0, r3
 8006872:	f00d fb2c 	bl	8013ece <memcmp>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d155      	bne.n	8006928 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x55c>
        if (register_access_request.value._tag_ == 11) {
 800687c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006880:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800688a:	2b0b      	cmp	r3, #11
 800688c:	d10b      	bne.n	80068a6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4da>
            //ENABLE CALIB
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800688e:	2104      	movs	r1, #4
 8006890:	488a      	ldr	r0, [pc, #552]	; (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006892:	f004 fe1d 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80068a2:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 80068a6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068aa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80068ae:	2201      	movs	r2, #1
 80068b0:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80068b2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068b6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80068ba:	2201      	movs	r2, #1
 80068bc:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80068be:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068c2:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80068c6:	220b      	movs	r2, #11
 80068c8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 80068cc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068d0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80068d4:	4618      	mov	r0, r3
 80068d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80068da:	461a      	mov	r2, r3
 80068dc:	2100      	movs	r1, #0
 80068de:	f00d fb20 	bl	8013f22 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 80068e2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068e6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 80068f0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068f4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80068f8:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 80068fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068fe:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006902:	2201      	movs	r2, #1
 8006904:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006908:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800690c:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006910:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006914:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006918:	4610      	mov	r0, r2
 800691a:	4619      	mov	r1, r3
 800691c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006920:	461a      	mov	r2, r3
 8006922:	f00d fbe4 	bl	80140ee <memcpy>
 8006926:	e282      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8006928:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800692c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2209      	movs	r2, #9
 8006934:	4963      	ldr	r1, [pc, #396]	; (8006ac4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f8>)
 8006936:	4618      	mov	r0, r3
 8006938:	f00d fac9 	bl	8013ece <memcmp>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d156      	bne.n	80069f0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x624>
		if (register_access_request.value._tag_ == 9) {
 8006942:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006946:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006950:	2b09      	cmp	r3, #9
 8006952:	d10b      	bne.n	800696c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x5a0>
			//SET UPPER LIMIT FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006954:	2104      	movs	r1, #4
 8006956:	4859      	ldr	r0, [pc, #356]	; (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006958:	f004 fdba 	bl	800b4d0 <HAL_GPIO_TogglePin>
			tv = 0;
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006968:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 800696c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006970:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006974:	2201      	movs	r2, #1
 8006976:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006978:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800697c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006980:	2201      	movs	r2, #1
 8006982:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006984:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006988:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800698c:	2209      	movs	r2, #9
 800698e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006992:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006996:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800699a:	4618      	mov	r0, r3
 800699c:	f44f 7382 	mov.w	r3, #260	; 0x104
 80069a0:	461a      	mov	r2, r3
 80069a2:	2100      	movs	r1, #0
 80069a4:	f00d fabd 	bl	8013f22 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 80069a8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069ac:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80069b6:	461a      	mov	r2, r3
 80069b8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069bc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069c0:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 80069c2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069c6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069ca:	2201      	movs	r2, #1
 80069cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 80069d0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069d4:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80069d8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069dc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069e0:	4610      	mov	r0, r2
 80069e2:	4619      	mov	r1, r3
 80069e4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80069e8:	461a      	mov	r2, r3
 80069ea:	f00d fb80 	bl	80140ee <memcpy>
 80069ee:	e21e      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 80069f0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069f4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2209      	movs	r2, #9
 80069fc:	4932      	ldr	r1, [pc, #200]	; (8006ac8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6fc>)
 80069fe:	4618      	mov	r0, r3
 8006a00:	f00d fa65 	bl	8013ece <memcmp>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d160      	bne.n	8006acc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x700>
		if (register_access_request.value._tag_ == 9) {
 8006a0a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a0e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d10b      	bne.n	8006a34 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x668>
			//SET UPPER LIMIT FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	4827      	ldr	r0, [pc, #156]	; (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006a20:	f004 fd56 	bl	800b4d0 <HAL_GPIO_TogglePin>
			tv = 0;
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006a30:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 8006a34:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a38:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006a40:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a44:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a48:	2201      	movs	r2, #1
 8006a4a:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006a4c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a50:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006a54:	2209      	movs	r2, #9
 8006a56:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006a5a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a5e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a62:	4618      	mov	r0, r3
 8006a64:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f00d fa59 	bl	8013f22 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006a70:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a74:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a84:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a88:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006a8a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a8e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006a98:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a9c:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006aa0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006aa4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f00d fb1c 	bl	80140ee <memcpy>
 8006ab6:	e1ba      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
 8006ab8:	20000014 	.word	0x20000014
 8006abc:	48000c00 	.word	0x48000c00
 8006ac0:	20000020 	.word	0x20000020
 8006ac4:	20000028 	.word	0x20000028
 8006ac8:	20000034 	.word	0x20000034
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8006acc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ad0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2208      	movs	r2, #8
 8006ad8:	49c8      	ldr	r1, [pc, #800]	; (8006dfc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f00d f9f7 	bl	8013ece <memcmp>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d15d      	bne.n	8006ba2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7d6>
		if (register_access_request.value._tag_ == 12) {
 8006ae6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006aea:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d10d      	bne.n	8006b14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x748>
			tmc5160_set_zero();
 8006af8:	f003 f90a 	bl	8009d10 <tmc5160_set_zero>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006afc:	2104      	movs	r1, #4
 8006afe:	48c0      	ldr	r0, [pc, #768]	; (8006e00 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa34>)
 8006b00:	f004 fce6 	bl	800b4d0 <HAL_GPIO_TogglePin>
			tv = 0;
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006b10:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 8006b14:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b18:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006b20:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b24:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b28:	2201      	movs	r2, #1
 8006b2a:	721a      	strb	r2, [r3, #8]
		value._tag_ = 12;
 8006b2c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b30:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006b34:	220c      	movs	r2, #12
 8006b36:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 8006b3a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b3e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006b42:	4618      	mov	r0, r3
 8006b44:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f00d f9e9 	bl	8013f22 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006b50:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b54:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7f9 fcf8 	bl	8000554 <__aeabi_ui2d>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8006b6c:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 8006b70:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8006b74:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b78:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.real64 = result;
 8006b82:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b86:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006b8a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b8e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f00d faa7 	bl	80140ee <memcpy>
 8006ba0:	e145      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_zero_reg_name, SET_ENC_ZERO_REG_NAME_LEN) == 0) {
 8006ba2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ba6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	220c      	movs	r2, #12
 8006bae:	4995      	ldr	r1, [pc, #596]	; (8006e04 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa38>)
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f00d f98c 	bl	8013ece <memcmp>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d155      	bne.n	8006c68 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x89c>
        if (register_access_request.value._tag_ == 11) {
 8006bbc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bc0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006bca:	2b0b      	cmp	r3, #11
 8006bcc:	d10b      	bne.n	8006be6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x81a>
            //SET TYPE OF MOTOR FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006bce:	2104      	movs	r1, #4
 8006bd0:	488b      	ldr	r0, [pc, #556]	; (8006e00 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa34>)
 8006bd2:	f004 fc7d 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006be2:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006be6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006bee:	2201      	movs	r2, #1
 8006bf0:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006bf2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bf6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006bfe:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c02:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006c06:	220b      	movs	r2, #11
 8006c08:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006c0c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c10:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c14:	4618      	mov	r0, r3
 8006c16:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f00d f980 	bl	8013f22 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006c22:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c26:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006c30:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c34:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c38:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006c3a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c3e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006c48:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c4c:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006c50:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c54:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c60:	461a      	mov	r2, r3
 8006c62:	f00d fa44 	bl	80140ee <memcpy>
 8006c66:	e0e2      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 8006c68:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c6c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2204      	movs	r2, #4
 8006c74:	4964      	ldr	r1, [pc, #400]	; (8006e08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa3c>)
 8006c76:	4618      	mov	r0, r3
 8006c78:	f00d f929 	bl	8013ece <memcmp>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d159      	bne.n	8006d36 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x96a>
        if (register_access_request.value._tag_ == 1) {
 8006c82:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c86:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10b      	bne.n	8006cac <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8e0>
            //SET NAME FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006c94:	2104      	movs	r1, #4
 8006c96:	485a      	ldr	r0, [pc, #360]	; (8006e00 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa34>)
 8006c98:	f004 fc1a 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006ca8:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006cac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cb0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006cb8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cbc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 8006cc4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cc8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_String_1_0 result = {};
 8006cd2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cd6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	f00d f91d 	bl	8013f22 <memset>

        char mystring[4] = "xyz";
 8006ce8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cec:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006cf0:	4a46      	ldr	r2, [pc, #280]	; (8006e0c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa40>)
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cf8:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006cfc:	681a      	ldr	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 8006cfe:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d02:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d06:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 8006d08:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d0c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d10:	2203      	movs	r2, #3
 8006d12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value._string = result;
 8006d16:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d1a:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006d1e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d22:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f00d f9dd 	bl	80140ee <memcpy>
 8006d34:	e07b      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 8006d36:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d3a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2204      	movs	r2, #4
 8006d42:	4933      	ldr	r1, [pc, #204]	; (8006e10 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 8006d44:	4618      	mov	r0, r3
 8006d46:	f00d f8c2 	bl	8013ece <memcmp>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d161      	bne.n	8006e14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>
        if (register_access_request.value._tag_ == 11) {
 8006d50:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d54:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006d5e:	2b0b      	cmp	r3, #11
 8006d60:	d10b      	bne.n	8006d7a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x9ae>
            //SET TYPE OF MOTOR FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006d62:	2104      	movs	r1, #4
 8006d64:	4826      	ldr	r0, [pc, #152]	; (8006e00 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa34>)
 8006d66:	f004 fbb3 	bl	800b4d0 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006d76:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006d7a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d7e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006d82:	2201      	movs	r2, #1
 8006d84:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006d86:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d8a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006d8e:	2201      	movs	r2, #1
 8006d90:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006d92:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d96:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006d9a:	220b      	movs	r2, #11
 8006d9c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006da0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006da4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006da8:	4618      	mov	r0, r3
 8006daa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006dae:	461a      	mov	r2, r3
 8006db0:	2100      	movs	r1, #0
 8006db2:	f00d f8b6 	bl	8013f22 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006db6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dba:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006dc4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dc8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006dcc:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006dce:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dd2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006ddc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006de0:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006de4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006de8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006df4:	461a      	mov	r2, r3
 8006df6:	f00d f97a 	bl	80140ee <memcpy>
 8006dfa:	e018      	b.n	8006e2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa62>
 8006dfc:	20000050 	.word	0x20000050
 8006e00:	48000c00 	.word	0x48000c00
 8006e04:	20000040 	.word	0x20000040
 8006e08:	2000005c 	.word	0x2000005c
 8006e0c:	007a7978 	.word	0x007a7978
 8006e10:	20000064 	.word	0x20000064
    }
    else {
        value._tag_ = 0;
 8006e14:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e18:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 8006e22:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e26:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8006e2e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e32:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006e36:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8006e3a:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8006e3e:	3310      	adds	r3, #16
 8006e40:	4611      	mov	r1, r2
 8006e42:	f44f 7204 	mov.w	r2, #528	; 0x210
 8006e46:	4618      	mov	r0, r3
 8006e48:	f00d f951 	bl	80140ee <memcpy>

    interface->send_response<RegisterAccessResponse>(
 8006e4c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e50:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fbd6 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006e60:	4604      	mov	r4, r0
 8006e62:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e66:	f2a3 515c 	subw	r1, r3, #1372	; 0x55c
 8006e6a:	f507 704c 	add.w	r0, r7, #816	; 0x330
 8006e6e:	2304      	movs	r3, #4
 8006e70:	9304      	str	r3, [sp, #16]
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xacc>)
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	680b      	ldr	r3, [r1, #0]
 8006e84:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xad0>)
 8006e86:	4601      	mov	r1, r0
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fc47 	bl	800771c <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 8006e8e:	bf00      	nop
 8006e90:	f207 5764 	addw	r7, r7, #1380	; 0x564
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}
 8006e98:	000f4240 	.word	0x000f4240
 8006e9c:	20000628 	.word	0x20000628

08006ea0 <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af06      	add	r7, sp, #24
 8006ea6:	6078      	str	r0, [r7, #4]
	static uint8_t js_buffer[JS_msg::buffer_size];
	static CanardTransferID int_transfer_id = 0;
	reg_udral_physics_kinematics_rotation_Planar_0_1 js_msg =
	{
			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
 8006ea8:	f002 fd70 	bl	800998c <tmc5160_position_read>
 8006eac:	4602      	mov	r2, r0
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f003 f837 	bl	8009f28 <steps_to_rads>
 8006eba:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
			.angular_acceleration = eff_in
	};
 8006ebe:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
 8006ec2:	f002 fd9d 	bl	8009a00 <tmc5160_velocity_read>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f003 f82a 	bl	8009f28 <steps_to_rads>
 8006ed4:	eef0 7a40 	vmov.f32	s15, s0
	};
 8006ed8:	edc7 7a04 	vstr	s15, [r7, #16]
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <send_JS+0x70>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 8006ee2:	480c      	ldr	r0, [pc, #48]	; (8006f14 <send_JS+0x74>)
 8006ee4:	f000 fb92 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006ee8:	f107 010c 	add.w	r1, r7, #12
 8006eec:	2304      	movs	r3, #4
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <send_JS+0x78>)
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006efa:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <send_JS+0x7c>)
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <send_JS+0x80>)
 8006f04:	f000 fc53 	bl	80077ae <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000458 	.word	0x20000458
 8006f14:	200004b4 	.word	0x200004b4
 8006f18:	000f4240 	.word	0x000f4240
 8006f1c:	20000740 	.word	0x20000740
 8006f20:	20000734 	.word	0x20000734

08006f24 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <heartbeat+0x4c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 8006f38:	480e      	ldr	r0, [pc, #56]	; (8006f74 <heartbeat+0x50>)
 8006f3a:	f000 fb67 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f3e:	4639      	mov	r1, r7
 8006f40:	2304      	movs	r3, #4
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	4a0c      	ldr	r2, [pc, #48]	; (8006f78 <heartbeat+0x54>)
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <heartbeat+0x58>)
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	f641 5355 	movw	r3, #7509	; 0x1d55
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <heartbeat+0x5c>)
 8006f58:	f000 fc48 	bl	80077ec <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8006f5c:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <heartbeat+0x4c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4a03      	ldr	r2, [pc, #12]	; (8006f70 <heartbeat+0x4c>)
 8006f64:	6013      	str	r3, [r2, #0]
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	2000074c 	.word	0x2000074c
 8006f74:	200004b4 	.word	0x200004b4
 8006f78:	000f4240 	.word	0x000f4240
 8006f7c:	2000074b 	.word	0x2000074b
 8006f80:	20000744 	.word	0x20000744

08006f84 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8006f84:	b5b0      	push	{r4, r5, r7, lr}
 8006f86:	b08e      	sub	sp, #56	; 0x38
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8006f8c:	4b41      	ldr	r3, [pc, #260]	; (8007094 <setup_cyphal+0x110>)
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	2102      	movs	r1, #2
 8006f98:	483f      	ldr	r0, [pc, #252]	; (8007098 <setup_cyphal+0x114>)
 8006f9a:	f000 fc46 	bl	800782a <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fc68 	bl	800787c <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8006fac:	f107 0308 	add.w	r3, r7, #8
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	483a      	ldr	r0, [pc, #232]	; (800709c <setup_cyphal+0x118>)
 8006fb4:	f000 fc71 	bl	800789a <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff f83e 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	4935      	ldr	r1, [pc, #212]	; (800709c <setup_cyphal+0x118>)
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff f828 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006fce:	f107 0510 	add.w	r5, r7, #16
 8006fd2:	f44f 700e 	mov.w	r0, #568	; 0x238
 8006fd6:	f00b feba 	bl	8012d4e <_Znwj>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	461c      	mov	r4, r3
 8006fde:	4629      	mov	r1, r5
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7ff f839 	bl	8006058 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006fe6:	4b2e      	ldr	r3, [pc, #184]	; (80070a0 <setup_cyphal+0x11c>)
 8006fe8:	601c      	str	r4, [r3, #0]
 8006fea:	f107 0310 	add.w	r3, r7, #16
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff f825 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8006ff4:	f107 0318 	add.w	r3, r7, #24
 8006ff8:	4928      	ldr	r1, [pc, #160]	; (800709c <setup_cyphal+0x118>)
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff f80f 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007000:	f107 0518 	add.w	r5, r7, #24
 8007004:	f44f 700e 	mov.w	r0, #568	; 0x238
 8007008:	f00b fea1 	bl	8012d4e <_Znwj>
 800700c:	4603      	mov	r3, r0
 800700e:	461c      	mov	r4, r3
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f7ff f850 	bl	80060b8 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007018:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <setup_cyphal+0x120>)
 800701a:	601c      	str	r4, [r3, #0]
 800701c:	f107 0318 	add.w	r3, r7, #24
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff f80c 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 8007026:	f107 0320 	add.w	r3, r7, #32
 800702a:	491c      	ldr	r1, [pc, #112]	; (800709c <setup_cyphal+0x118>)
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fff6 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007032:	f107 0520 	add.w	r5, r7, #32
 8007036:	f44f 700e 	mov.w	r0, #568	; 0x238
 800703a:	f00b fe88 	bl	8012d4e <_Znwj>
 800703e:	4603      	mov	r3, r0
 8007040:	461c      	mov	r4, r3
 8007042:	4629      	mov	r1, r5
 8007044:	4620      	mov	r0, r4
 8007046:	f7ff f99d 	bl	8006384 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800704a:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <setup_cyphal+0x124>)
 800704c:	601c      	str	r4, [r3, #0]
 800704e:	f107 0320 	add.w	r3, r7, #32
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fff3 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 8007058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800705c:	490f      	ldr	r1, [pc, #60]	; (800709c <setup_cyphal+0x118>)
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe ffdd 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007064:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8007068:	f44f 700e 	mov.w	r0, #568	; 0x238
 800706c:	f00b fe6f 	bl	8012d4e <_Znwj>
 8007070:	4603      	mov	r3, r0
 8007072:	461c      	mov	r4, r3
 8007074:	4629      	mov	r1, r5
 8007076:	4620      	mov	r0, r4
 8007078:	f7ff f87c 	bl	8006174 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <setup_cyphal+0x128>)
 800707e:	601c      	str	r4, [r3, #0]
 8007080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe ffda 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 800708a:	bf00      	nop
 800708c:	3730      	adds	r7, #48	; 0x30
 800708e:	46bd      	mov	sp, r7
 8007090:	bdb0      	pop	{r4, r5, r7, pc}
 8007092:	bf00      	nop
 8007094:	200004bc 	.word	0x200004bc
 8007098:	2000045c 	.word	0x2000045c
 800709c:	200004b4 	.word	0x200004b4
 80070a0:	200004dc 	.word	0x200004dc
 80070a4:	200004e0 	.word	0x200004e0
 80070a8:	20000624 	.word	0x20000624
 80070ac:	200004e4 	.word	0x200004e4

080070b0 <cyphal_loop>:

void cyphal_loop() {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
    interface->loop();
 80070b4:	4804      	ldr	r0, [pc, #16]	; (80070c8 <cyphal_loop+0x18>)
 80070b6:	f000 faa9 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4618      	mov	r0, r3
 80070be:	f009 f885 	bl	80101cc <_ZN15CyphalInterface4loopEv>
}
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200004b4 	.word	0x200004b4

080070cc <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08c      	sub	sp, #48	; 0x30
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 80070d4:	f107 0320 	add.w	r3, r7, #32
 80070d8:	2102      	movs	r1, #2
 80070da:	4618      	mov	r0, r3
 80070dc:	f00b fde8 	bl	8012cb0 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//
 80070e0:	f107 0318 	add.w	r3, r7, #24
 80070e4:	f240 4162 	movw	r1, #1122	; 0x462
 80070e8:	4618      	mov	r0, r3
 80070ea:	f00b fdc1 	bl	8012c70 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 80070ee:	f107 0310 	add.w	r3, r7, #16
 80070f2:	f641 5155 	movw	r1, #7509	; 0x1d55
 80070f6:	4618      	mov	r0, r3
 80070f8:	f00b fdba 	bl	8012c70 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	f107 0218 	add.w	r2, r7, #24
 8007104:	f107 0120 	add.w	r1, r7, #32
 8007108:	4618      	mov	r0, r3
 800710a:	f00b fdf3 	bl	8012cf4 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800710e:	4b4c      	ldr	r3, [pc, #304]	; (8007240 <cyphal_can_starter+0x174>)
 8007110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007114:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8007116:	4b4a      	ldr	r3, [pc, #296]	; (8007240 <cyphal_can_starter+0x174>)
 8007118:	2200      	movs	r2, #0
 800711a:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800711c:	4b48      	ldr	r3, [pc, #288]	; (8007240 <cyphal_can_starter+0x174>)
 800711e:	2202      	movs	r2, #2
 8007120:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007122:	4b47      	ldr	r3, [pc, #284]	; (8007240 <cyphal_can_starter+0x174>)
 8007124:	2201      	movs	r2, #1
 8007126:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	4a45      	ldr	r2, [pc, #276]	; (8007240 <cyphal_can_starter+0x174>)
 800712c:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	4a43      	ldr	r2, [pc, #268]	; (8007240 <cyphal_can_starter+0x174>)
 8007132:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8007134:	4b43      	ldr	r3, [pc, #268]	; (8007244 <cyphal_can_starter+0x178>)
 8007136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800713a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 800713c:	4b41      	ldr	r3, [pc, #260]	; (8007244 <cyphal_can_starter+0x178>)
 800713e:	2201      	movs	r2, #1
 8007140:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007142:	4b40      	ldr	r3, [pc, #256]	; (8007244 <cyphal_can_starter+0x178>)
 8007144:	2202      	movs	r2, #2
 8007146:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007148:	4b3e      	ldr	r3, [pc, #248]	; (8007244 <cyphal_can_starter+0x178>)
 800714a:	2201      	movs	r2, #1
 800714c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4a3c      	ldr	r2, [pc, #240]	; (8007244 <cyphal_can_starter+0x178>)
 8007152:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4a3b      	ldr	r2, [pc, #236]	; (8007244 <cyphal_can_starter+0x178>)
 8007158:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800715a:	4b3b      	ldr	r3, [pc, #236]	; (8007248 <cyphal_can_starter+0x17c>)
 800715c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007160:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 8007162:	4b39      	ldr	r3, [pc, #228]	; (8007248 <cyphal_can_starter+0x17c>)
 8007164:	2202      	movs	r2, #2
 8007166:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007168:	4b37      	ldr	r3, [pc, #220]	; (8007248 <cyphal_can_starter+0x17c>)
 800716a:	2202      	movs	r2, #2
 800716c:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800716e:	4b36      	ldr	r3, [pc, #216]	; (8007248 <cyphal_can_starter+0x17c>)
 8007170:	2201      	movs	r2, #1
 8007172:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	4a34      	ldr	r2, [pc, #208]	; (8007248 <cyphal_can_starter+0x17c>)
 8007178:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4a32      	ldr	r2, [pc, #200]	; (8007248 <cyphal_can_starter+0x17c>)
 800717e:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 8007180:	2302      	movs	r3, #2
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2302      	movs	r3, #2
 8007186:	2202      	movs	r2, #2
 8007188:	2102      	movs	r1, #2
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f003 fd34 	bl	800abf8 <HAL_FDCAN_ConfigGlobalFilter>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80071a0:	f7fa feb7 	bl	8001f12 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80071a4:	4926      	ldr	r1, [pc, #152]	; (8007240 <cyphal_can_starter+0x174>)
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f003 fccc 	bl	800ab44 <HAL_FDCAN_ConfigFilter>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bf14      	ite	ne
 80071b2:	2301      	movne	r3, #1
 80071b4:	2300      	moveq	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <cyphal_can_starter+0xf4>
	  Error_Handler();
 80071bc:	f7fa fea9 	bl	8001f12 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 80071c0:	4920      	ldr	r1, [pc, #128]	; (8007244 <cyphal_can_starter+0x178>)
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f003 fcbe 	bl	800ab44 <HAL_FDCAN_ConfigFilter>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <cyphal_can_starter+0x110>
	  Error_Handler();
 80071d8:	f7fa fe9b 	bl	8001f12 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 80071dc:	491a      	ldr	r1, [pc, #104]	; (8007248 <cyphal_can_starter+0x17c>)
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f003 fcb0 	bl	800ab44 <HAL_FDCAN_ConfigFilter>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bf14      	ite	ne
 80071ea:	2301      	movne	r3, #1
 80071ec:	2300      	moveq	r3, #0
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <cyphal_can_starter+0x12c>
	  Error_Handler();
 80071f4:	f7fa fe8d 	bl	8001f12 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 80071f8:	2200      	movs	r2, #0
 80071fa:	2105      	movs	r1, #5
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f003 fd2c 	bl	800ac5a <HAL_FDCAN_ConfigTxDelayCompensation>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <cyphal_can_starter+0x14a>
	  Error_Handler();
 8007212:	f7fa fe7e 	bl	8001f12 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f003 fd41 	bl	800ac9e <HAL_FDCAN_EnableTxDelayCompensation>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	bf14      	ite	ne
 8007222:	2301      	movne	r3, #1
 8007224:	2300      	moveq	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <cyphal_can_starter+0x164>
	  Error_Handler();
 800722c:	f7fa fe71 	bl	8001f12 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f003 fd55 	bl	800ace0 <HAL_FDCAN_Start>
}
 8007236:	bf00      	nop
 8007238:	3728      	adds	r7, #40	; 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000780 	.word	0x20000780
 8007244:	20000750 	.word	0x20000750
 8007248:	20000768 	.word	0x20000768

0800724c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
      { delete this; }
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3304      	adds	r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	461a      	mov	r2, r3
 800727a:	2300      	movs	r3, #0
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	6053      	str	r3, [r2, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	609a      	str	r2, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	461a      	mov	r2, r3
 80072a2:	2300      	movs	r3, #0
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	6053      	str	r3, [r2, #4]
 80072a8:	6093      	str	r3, [r2, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff ffde 	bl	800726e <_ZNSt14_Function_baseC1Ev>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80072b8:	6838      	ldr	r0, [r7, #0]
 80072ba:	f000 fb21 	bl	8007900 <_ZNKSt8functionIFyvEEcvbEv>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00d      	beq.n	80072e0 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	2202      	movs	r2, #2
 80072ce:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	609a      	str	r2, [r3, #8]
	  }
      }
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	461a      	mov	r2, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	6053      	str	r3, [r2, #4]
 80072fe:	6093      	str	r3, [r2, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff ffb3 	bl	800726e <_ZNSt14_Function_baseC1Ev>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800730e:	6838      	ldr	r0, [r7, #0]
 8007310:	f000 fb06 	bl	8007920 <_ZNKSt8functionIFvvEEcvbEv>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	2202      	movs	r2, #2
 8007324:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
      }
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 faf9 	bl	8007940 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	bf14      	ite	ne
 8007354:	2301      	movne	r3, #1
 8007356:	2300      	moveq	r3, #0
 8007358:	b2db      	uxtb	r3, r3
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
	return get();
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fae8 	bl	8007940 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8007370:	4603      	mov	r3, r0
      }
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	4611      	mov	r1, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fae5 	bl	800795a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff ffe6 	bl	800737a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fadd 	bl	8007982 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 80073c8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00c      	beq.n	80073ec <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fae2 	bl	800799c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 80073d8:	4604      	mov	r4, r0
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 faeb 	bl	80079b6 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 80073e0:	4603      	mov	r3, r0
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4619      	mov	r1, r3
 80073e6:	4620      	mov	r0, r4
 80073e8:	f000 faf0 	bl	80079cc <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
      }
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd90      	pop	{r4, r7, pc}

080073fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f7fa fd9e 	bl	8001f52 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	461a      	mov	r2, r3
 800742e:	2300      	movs	r3, #0
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	6053      	str	r3, [r2, #4]
 8007434:	6093      	str	r3, [r2, #8]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ff18 	bl	800726e <_ZNSt14_Function_baseC1Ev>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8007444:	6838      	ldr	r0, [r7, #0]
 8007446:	f000 fad2 	bl	80079ee <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00e      	beq.n	800746e <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8007450:	687c      	ldr	r4, [r7, #4]
 8007452:	6838      	ldr	r0, [r7, #0]
 8007454:	f000 fadb 	bl	8007a0e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007458:	4603      	mov	r3, r0
 800745a:	4619      	mov	r1, r3
 800745c:	4620      	mov	r0, r4
 800745e:	f000 fae1 	bl	8007a24 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a04      	ldr	r2, [pc, #16]	; (8007478 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8007466:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a04      	ldr	r2, [pc, #16]	; (800747c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 800746c:	609a      	str	r2, [r3, #8]
	    }
	}
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bd90      	pop	{r4, r7, pc}
 8007478:	08007a49 	.word	0x08007a49
 800747c:	08007a6d 	.word	0x08007a6d

08007480 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	461a      	mov	r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	6053      	str	r3, [r2, #4]
 8007494:	6093      	str	r3, [r2, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fee8 	bl	800726e <_ZNSt14_Function_baseC1Ev>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80074a4:	6838      	ldr	r0, [r7, #0]
 80074a6:	f000 fb00 	bl	8007aaa <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80074b0:	687c      	ldr	r4, [r7, #4]
 80074b2:	6838      	ldr	r0, [r7, #0]
 80074b4:	f000 fb09 	bl	8007aca <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80074b8:	4603      	mov	r3, r0
 80074ba:	4619      	mov	r1, r3
 80074bc:	4620      	mov	r0, r4
 80074be:	f000 fb0f 	bl	8007ae0 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 80074c6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a04      	ldr	r2, [pc, #16]	; (80074dc <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 80074cc:	609a      	str	r2, [r3, #8]
	}
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd90      	pop	{r4, r7, pc}
 80074d8:	08007b05 	.word	0x08007b05
 80074dc:	08007b23 	.word	0x08007b23

080074e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fa fd18 	bl	8001f34 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	4613      	mov	r3, r2
 800751a:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 800751c:	f107 0310 	add.w	r3, r7, #16
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fd7b 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	f107 0110 	add.w	r1, r7, #16
 800752e:	2300      	movs	r3, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fb15 	bl	8007b60 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007536:	f107 0310 	add.w	r3, r7, #16
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fd7f 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	4613      	mov	r3, r2
 8007556:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007558:	f107 0310 	add.w	r3, r7, #16
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fd5d 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	f107 0110 	add.w	r1, r7, #16
 800756a:	2300      	movs	r3, #0
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fb29 	bl	8007bc4 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007572:	f107 0310 	add.w	r3, r7, #16
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fd61 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	080180b8 	.word	0x080180b8

080075a8 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	460b      	mov	r3, r1
 80075b8:	80fb      	strh	r3, [r7, #6]
 80075ba:	4613      	mov	r3, r2
 80075bc:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ffe1 	bl	8007588 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80075c6:	4a10      	ldr	r2, [pc, #64]	; (8007608 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	797a      	ldrb	r2, [r7, #5]
 80075d0:	711a      	strb	r2, [r3, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3308      	adds	r3, #8
 80075d6:	f44f 720a 	mov.w	r2, #552	; 0x228
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f00c fca0 	bl	8013f22 <memset>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fd17 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80075f0:	797a      	ldrb	r2, [r7, #5]
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	4619      	mov	r1, r3
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fb16 	bl	8007c28 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	08018068 	.word	0x08018068

0800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	return _M_get();
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fb25 	bl	8007c64 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800761a:	4603      	mov	r3, r0
      }
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8007624:	b5b0      	push	{r4, r5, r7, lr}
 8007626:	b08c      	sub	sp, #48	; 0x30
 8007628:	af04      	add	r7, sp, #16
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007632:	f240 1339 	movw	r3, #313	; 0x139
 8007636:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007638:	f107 031c 	add.w	r3, r7, #28
 800763c:	461a      	mov	r2, r3
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f7fe fb21 	bl	8005c88 <uavcan_node_GetInfo_Response_1_0_serialize_>
 8007646:	4603      	mov	r3, r0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	09db      	lsrs	r3, r3, #7
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	3310      	adds	r3, #16
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fb0f 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800765e:	f107 0314 	add.w	r3, r7, #20
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	809a      	strh	r2, [r3, #4]
 8007668:	2301      	movs	r3, #1
 800766a:	757b      	strb	r3, [r7, #21]
 800766c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007670:	753b      	strb	r3, [r7, #20]
 8007672:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007674:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800767a:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007680:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fb0e 	bl	8007ca8 <_ZNKSt8functionIFyvEEclEv>
    push(
 800768c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007690:	1884      	adds	r4, r0, r2
 8007692:	eb41 0503 	adc.w	r5, r1, r3
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f107 0314 	add.w	r3, r7, #20
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4622      	mov	r2, r4
 80076a6:	462b      	mov	r3, r5
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f008 fd21 	bl	80100f0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 80076ae:	bf00      	nop
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080076b8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	460b      	mov	r3, r1
 80076c8:	80fb      	strh	r3, [r7, #6]
 80076ca:	4613      	mov	r3, r2
 80076cc:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff ff59 	bl	8007588 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80076d6:	4a10      	ldr	r2, [pc, #64]	; (8007718 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	797a      	ldrb	r2, [r7, #5]
 80076e0:	711a      	strb	r2, [r3, #4]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3308      	adds	r3, #8
 80076e6:	f44f 720a 	mov.w	r2, #552	; 0x228
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f00c fc18 	bl	8013f22 <memset>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fc8f 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007700:	797a      	ldrb	r2, [r7, #5]
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	4619      	mov	r1, r3
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fae7 	bl	8007cda <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	08018048 	.word	0x08018048

0800771c <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 800771c:	b5b0      	push	{r4, r5, r7, lr}
 800771e:	b08c      	sub	sp, #48	; 0x30
 8007720:	af04      	add	r7, sp, #16
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800772a:	f240 130b 	movw	r3, #267	; 0x10b
 800772e:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007730:	f107 031c 	add.w	r3, r7, #28
 8007734:	461a      	mov	r2, r3
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	68b8      	ldr	r0, [r7, #8]
 800773a:	f7fe f913 	bl	8005964 <uavcan_register_Access_Response_1_0_serialize_>
 800773e:	4603      	mov	r3, r0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	09db      	lsrs	r3, r3, #7
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	3310      	adds	r3, #16
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fa93 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007756:	f107 0314 	add.w	r3, r7, #20
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	809a      	strh	r2, [r3, #4]
 8007760:	2301      	movs	r3, #1
 8007762:	757b      	strb	r3, [r7, #21]
 8007764:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007768:	753b      	strb	r3, [r7, #20]
 800776a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800776c:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007772:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007778:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fa92 	bl	8007ca8 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007788:	1884      	adds	r4, r0, r2
 800778a:	eb41 0503 	adc.w	r5, r1, r3
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	9202      	str	r2, [sp, #8]
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4622      	mov	r2, r4
 800779e:	462b      	mov	r3, r5
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f008 fca5 	bl	80100f0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 80077a6:	bf00      	nop
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bdb0      	pop	{r4, r5, r7, pc}

080077ae <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b08a      	sub	sp, #40	; 0x28
 80077b2:	af06      	add	r7, sp, #24
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 80077bc:	8879      	ldrh	r1, [r7, #2]
 80077be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077c6:	23ff      	movs	r3, #255	; 0xff
 80077c8:	9303      	str	r3, [sp, #12]
 80077ca:	2300      	movs	r3, #0
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	460b      	mov	r3, r1
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fa9a 	bl	8007d18 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af06      	add	r7, sp, #24
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 80077fa:	8879      	ldrh	r1, [r7, #2]
 80077fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007804:	23ff      	movs	r3, #255	; 0xff
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	2300      	movs	r3, #0
 800780a:	9302      	str	r3, [sp, #8]
 800780c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	460b      	mov	r3, r1
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fac5 	bl	8007dac <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 800782a:	b590      	push	{r4, r7, lr}
 800782c:	b08b      	sub	sp, #44	; 0x2c
 800782e:	af02      	add	r7, sp, #8
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
 8007836:	460b      	mov	r3, r1
 8007838:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 800783a:	f107 030c 	add.w	r3, r7, #12
 800783e:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8007840:	7afa      	ldrb	r2, [r7, #11]
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	69f8      	ldr	r0, [r7, #28]
 800784c:	f000 faf8 	bl	8007e40 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8007850:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4619      	mov	r1, r3
 800785c:	200c      	movs	r0, #12
 800785e:	f7fa fb5d 	bl	8001f1c <_ZnwjPv>
 8007862:	4604      	mov	r4, r0
 8007864:	7af9      	ldrb	r1, [r7, #11]
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	4620      	mov	r0, r4
 800786c:	f7fa fc88 	bl	8002180 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8007870:	613c      	str	r4, [r7, #16]

        return interface;
 8007872:	693b      	ldr	r3, [r7, #16]
    }
 8007874:	4618      	mov	r0, r3
 8007876:	3724      	adds	r7, #36	; 0x24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd90      	pop	{r4, r7, pc}

0800787c <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fb26 	bl	8007edc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 800789a:	b590      	push	{r4, r7, lr}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80078a4:	687c      	ldr	r4, [r7, #4]
 80078a6:	6838      	ldr	r0, [r7, #0]
 80078a8:	f000 fb30 	bl	8007f0c <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 80078ac:	4603      	mov	r3, r0
 80078ae:	4619      	mov	r1, r3
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fb36 	bl	8007f22 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 80078b6:	687b      	ldr	r3, [r7, #4]
      }
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd90      	pop	{r4, r7, pc}

080078c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
      { }
 80078c8:	4a04      	ldr	r2, [pc, #16]	; (80078dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	080180dc 	.word	0x080180dc

080078e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
      { }
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff ffe9 	bl	80078c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80078ee:	210c      	movs	r1, #12
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f00b fa2a 	bl	8012d4a <_ZdlPvj>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4618      	mov	r0, r3
 800790c:	f7fa fb7a 	bl	8002004 <_ZNKSt14_Function_base8_M_emptyEv>
 8007910:	4603      	mov	r3, r0
 8007912:	f083 0301 	eor.w	r3, r3, #1
 8007916:	b2db      	uxtb	r3, r3
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4618      	mov	r0, r3
 800792c:	f7fa fb6a 	bl	8002004 <_ZNKSt14_Function_base8_M_emptyEv>
 8007930:	4603      	mov	r3, r0
 8007932:	f083 0301 	eor.w	r3, r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fb08 	bl	8007f60 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007950:	4603      	mov	r3, r0
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800795a:	b590      	push	{r4, r7, lr}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fb08 	bl	8007f7c <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800796c:	683c      	ldr	r4, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f807 	bl	8007982 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007974:	4603      	mov	r3, r0
 8007976:	601c      	str	r4, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	bd90      	pop	{r4, r7, pc}

08007982 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fb02 	bl	8007f96 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007992:	4603      	mov	r3, r0
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fb02 	bl	8007fb0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	3218      	adds	r2, #24
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	4790      	blx	r2
      }
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007a24:	b590      	push	{r4, r7, lr}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007a2e:	6838      	ldr	r0, [r7, #0]
 8007a30:	f7ff ffed 	bl	8007a0e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007a34:	4603      	mov	r3, r0
 8007a36:	4622      	mov	r2, r4
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fac5 	bl	8007fca <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd90      	pop	{r4, r7, pc}

08007a48 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fad2 	bl	8007ffa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007a56:	4603      	mov	r3, r0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fade 	bl	800801a <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
      }
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d109      	bne.n	8007a94 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007a80:	68b8      	ldr	r0, [r7, #8]
 8007a82:	f000 faba 	bl	8007ffa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007a86:	4604      	mov	r4, r0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fad9 	bl	8008040 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	601c      	str	r4, [r3, #0]
	    break;
 8007a92:	e005      	b.n	8007aa0 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fadc 	bl	8008058 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007aa0:	2300      	movs	r3, #0
      }
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd90      	pop	{r4, r7, pc}

08007aaa <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf14      	ite	ne
 8007ab8:	2301      	movne	r3, #1
 8007aba:	2300      	moveq	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007aea:	6838      	ldr	r0, [r7, #0]
 8007aec:	f7ff ffed 	bl	8007aca <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007af0:	4603      	mov	r3, r0
 8007af2:	4622      	mov	r2, r4
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fae8 	bl	80080cc <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd90      	pop	{r4, r7, pc}

08007b04 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 faf5 	bl	80080fc <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007b12:	4603      	mov	r3, r0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fb01 	bl	800811c <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8007b1a:	bf00      	nop
      }
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007b22:	b590      	push	{r4, r7, lr}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d109      	bne.n	8007b4a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007b36:	68b8      	ldr	r0, [r7, #8]
 8007b38:	f000 fae0 	bl	80080fc <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fafc 	bl	800813c <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007b44:	4603      	mov	r3, r0
 8007b46:	601c      	str	r4, [r3, #0]
	    break;
 8007b48:	e005      	b.n	8007b56 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 faff 	bl	8008154 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007b56:	2300      	movs	r3, #0
      }
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd90      	pop	{r4, r7, pc}

08007b60 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	460b      	mov	r3, r1
 8007b70:	80fb      	strh	r3, [r7, #6]
 8007b72:	4613      	mov	r3, r2
 8007b74:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fd05 	bl	8007588 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007b7e:	4a10      	ldr	r2, [pc, #64]	; (8007bc0 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	797a      	ldrb	r2, [r7, #5]
 8007b88:	711a      	strb	r2, [r3, #4]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	f44f 720a 	mov.w	r2, #552	; 0x228
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f00c f9c4 	bl	8013f22 <memset>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fa3b 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007ba8:	797a      	ldrb	r2, [r7, #5]
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fb0a 	bl	80081c8 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	080180a8 	.word	0x080180a8

08007bc4 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	80fb      	strh	r3, [r7, #6]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fcd3 	bl	8007588 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007be2:	4a10      	ldr	r2, [pc, #64]	; (8007c24 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	797a      	ldrb	r2, [r7, #5]
 8007bec:	711a      	strb	r2, [r3, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	f44f 720a 	mov.w	r2, #552	; 0x228
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f00c f992 	bl	8013f22 <memset>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fa09 	bl	800601e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007c0c:	797a      	ldrb	r2, [r7, #5]
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	4619      	mov	r1, r3
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 faf6 	bl	8008204 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	08018088 	.word	0x08018088

08007c28 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	807b      	strh	r3, [r7, #2]
 8007c34:	4613      	mov	r3, r2
 8007c36:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fce1 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	787a      	ldrb	r2, [r7, #1]
 8007c50:	8879      	ldrh	r1, [r7, #2]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	f008 fa84 	bl	8010164 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fae7 	bl	8008240 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8007c72:	4603      	mov	r3, r0
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fa f9bc 	bl	8002004 <_ZNKSt14_Function_base8_M_emptyEv>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8007c92:	f00b f86d 	bl	8012d70 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	bf00      	nop
      }
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fa f9a6 	bl	8002004 <_ZNKSt14_Function_base8_M_emptyEv>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8007cbe:	f00b f857 	bl	8012d70 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
      }
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	807b      	strh	r3, [r7, #2]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fc88 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	787a      	ldrb	r2, [r7, #1]
 8007d02:	8879      	ldrh	r1, [r7, #2]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	f240 2203 	movw	r2, #515	; 0x203
 8007d0c:	f008 fa2a 	bl	8010164 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8007d18:	b5b0      	push	{r4, r5, r7, lr}
 8007d1a:	b08c      	sub	sp, #48	; 0x30
 8007d1c:	af04      	add	r7, sp, #16
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007d26:	230c      	movs	r3, #12
 8007d28:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007d2a:	f107 031c 	add.w	r3, r7, #28
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	68b8      	ldr	r0, [r7, #8]
 8007d34:	f7fb f98e 	bl	8003054 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	09db      	lsrs	r3, r3, #7
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	3310      	adds	r3, #16
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff ff96 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007d50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007d54:	753b      	strb	r3, [r7, #20]
 8007d56:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007d5a:	757b      	strb	r3, [r7, #21]
 8007d5c:	887b      	ldrh	r3, [r7, #2]
 8007d5e:	82fb      	strh	r3, [r7, #22]
 8007d60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007d64:	763b      	strb	r3, [r7, #24]
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ff99 	bl	8007ca8 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d7a:	1884      	adds	r4, r0, r2
 8007d7c:	eb41 0503 	adc.w	r5, r1, r3
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	9202      	str	r2, [sp, #8]
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	f107 0314 	add.w	r3, r7, #20
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	4622      	mov	r2, r4
 8007d90:	462b      	mov	r3, r5
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f008 f9ac 	bl	80100f0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	701a      	strb	r2, [r3, #0]
}
 8007da4:	bf00      	nop
 8007da6:	3720      	adds	r7, #32
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bdb0      	pop	{r4, r5, r7, pc}

08007dac <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8007dac:	b5b0      	push	{r4, r5, r7, lr}
 8007dae:	b08c      	sub	sp, #48	; 0x30
 8007db0:	af04      	add	r7, sp, #16
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007dba:	2307      	movs	r3, #7
 8007dbc:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007dbe:	f107 031c 	add.w	r3, r7, #28
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	68b8      	ldr	r0, [r7, #8]
 8007dc8:	f7fa fde4 	bl	8002994 <uavcan_node_Heartbeat_1_0_serialize_>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	09db      	lsrs	r3, r3, #7
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	3310      	adds	r3, #16
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff ff4c 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007de4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007de8:	753b      	strb	r3, [r7, #20]
 8007dea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007dee:	757b      	strb	r3, [r7, #21]
 8007df0:	887b      	ldrh	r3, [r7, #2]
 8007df2:	82fb      	strh	r3, [r7, #22]
 8007df4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007df8:	763b      	strb	r3, [r7, #24]
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ff4f 	bl	8007ca8 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e0e:	1884      	adds	r4, r0, r2
 8007e10:	eb41 0503 	adc.w	r5, r1, r3
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	9202      	str	r2, [sp, #8]
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	4622      	mov	r2, r4
 8007e24:	462b      	mov	r3, r5
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f008 f962 	bl	80100f0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	701a      	strb	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bdb0      	pop	{r4, r5, r7, pc}

08007e40 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 8007e40:	b590      	push	{r4, r7, lr}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2008      	movs	r0, #8
 8007e5c:	f7fa f85e 	bl	8001f1c <_ZnwjPv>
 8007e60:	4604      	mov	r4, r0
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	4413      	add	r3, r2
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f8 fb71 	bl	8000554 <__aeabi_ui2d>
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8007e78:	f7f8 fbe6 	bl	8000648 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	f7f8 feb8 	bl	8000bf8 <__aeabi_d2uiz>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f7fa f9ac 	bl	80021ec <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8007e94:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	2044      	movs	r0, #68	; 0x44
 8007ea2:	f7fa f83b 	bl	8001f1c <_ZnwjPv>
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7fa f980 	bl	80021b4 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8007eb4:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	79fa      	ldrb	r2, [r7, #7]
 8007eba:	69b9      	ldr	r1, [r7, #24]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f9cb 	bl	8008258 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	601a      	str	r2, [r3, #0]
        return ptr;
 8007ecc:	693b      	ldr	r3, [r7, #16]
    }
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3724      	adds	r7, #36	; 0x24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd90      	pop	{r4, r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40040000 	.word	0x40040000

08007edc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8007edc:	b590      	push	{r4, r7, lr}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f9f3 	bl	80082e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f9fe 	bl	80082fe <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd90      	pop	{r4, r7, pc}

08007f0c <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8007f2c:	6838      	ldr	r0, [r7, #0]
 8007f2e:	f000 f9f1 	bl	8008314 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8007f32:	4602      	mov	r2, r0
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f9f5 	bl	800832a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8007f40:	f107 0308 	add.w	r3, r7, #8
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fa0d 	bl	8008366 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8007f4c:	f107 0308 	add.w	r3, r7, #8
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe f81b 	bl	8005f8c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8007f56:	687b      	ldr	r3, [r7, #4]
      }
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fa12 	bl	8008394 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8007f70:	4603      	mov	r3, r0
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fa11 	bl	80083ae <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fa14 	bl	80083ce <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fa13 	bl	80083e6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007fca:	b590      	push	{r4, r7, lr}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8007fd6:	68b8      	ldr	r0, [r7, #8]
 8007fd8:	f7ff fd19 	bl	8007a0e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007fdc:	4604      	mov	r4, r0
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f7f9 ffe7 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	2004      	movs	r0, #4
 8007fea:	f7f9 ff97 	bl	8001f1c <_ZnwjPv>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	601c      	str	r4, [r3, #0]
	  }
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd90      	pop	{r4, r7, pc}

08007ffa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f9fb 	bl	80083fe <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8008008:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fa03 	bl	8008416 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8008010:	4603      	mov	r3, r0
	}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800801a:	b590      	push	{r4, r7, lr}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa02 	bl	800842c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008028:	4603      	mov	r3, r0
 800802a:	4619      	mov	r1, r3
 800802c:	4620      	mov	r0, r4
 800802e:	f000 fa08 	bl	8008442 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8008036:	4610      	mov	r0, r2
 8008038:	4619      	mov	r1, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	bd90      	pop	{r4, r7, pc}

08008040 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7f9 ffb2 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 800804e:	4603      	mov	r3, r0
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008058:	b590      	push	{r4, r7, lr}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d82a      	bhi.n	80080c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	08008085 	.word	0x08008085
 8008078:	08008093 	.word	0x08008093
 800807c:	080080a7 	.word	0x080080a7
 8008080:	080080b9 	.word	0x080080b9
	      __dest._M_access<const type_info*>() = nullptr;
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f9ee 	bl	8008466 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800808a:	4603      	mov	r3, r0
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
	      break;
 8008090:	e017      	b.n	80080c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008092:	68b8      	ldr	r0, [r7, #8]
 8008094:	f7ff ffb1 	bl	8007ffa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8008098:	4604      	mov	r4, r0
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff ffd0 	bl	8008040 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80080a0:	4603      	mov	r3, r0
 80080a2:	601c      	str	r4, [r3, #0]
	      break;
 80080a4:	e00d      	b.n	80080c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80080a6:	68b8      	ldr	r0, [r7, #8]
 80080a8:	f7ff ffa7 	bl	8007ffa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80080ac:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80080ae:	4619      	mov	r1, r3
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f9e4 	bl	800847e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80080b6:	e004      	b.n	80080c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80080b8:	4621      	mov	r1, r4
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f9f1 	bl	80084a2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80080c0:	bf00      	nop
	  return false;
 80080c2:	2300      	movs	r3, #0
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd90      	pop	{r4, r7, pc}

080080cc <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f7ff fcf6 	bl	8007aca <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80080de:	4604      	mov	r4, r0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7f9 ff66 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 80080e6:	4603      	mov	r3, r0
 80080e8:	4619      	mov	r1, r3
 80080ea:	2004      	movs	r0, #4
 80080ec:	f7f9 ff16 	bl	8001f1c <_ZnwjPv>
 80080f0:	4603      	mov	r3, r0
 80080f2:	601c      	str	r4, [r3, #0]
	  }
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}

080080fc <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f9d8 	bl	80084ba <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 800810a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f9e0 	bl	80084d2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8008112:	4603      	mov	r3, r0
	}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f9df 	bl	80084e8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800812a:	4603      	mov	r3, r0
 800812c:	4619      	mov	r1, r3
 800812e:	4620      	mov	r0, r4
 8008130:	f000 f9e5 	bl	80084fe <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	bd90      	pop	{r4, r7, pc}

0800813c <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7f9 ff34 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 800814a:	4603      	mov	r3, r0
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	2b03      	cmp	r3, #3
 8008166:	d82a      	bhi.n	80081be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008181 	.word	0x08008181
 8008174:	0800818f 	.word	0x0800818f
 8008178:	080081a3 	.word	0x080081a3
 800817c:	080081b5 	.word	0x080081b5
	      __dest._M_access<const type_info*>() = nullptr;
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f970 	bl	8008466 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8008186:	4603      	mov	r3, r0
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
	      break;
 800818c:	e017      	b.n	80081be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800818e:	68b8      	ldr	r0, [r7, #8]
 8008190:	f7ff ffb4 	bl	80080fc <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8008194:	4604      	mov	r4, r0
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff ffd0 	bl	800813c <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800819c:	4603      	mov	r3, r0
 800819e:	601c      	str	r4, [r3, #0]
	      break;
 80081a0:	e00d      	b.n	80081be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80081a2:	68b8      	ldr	r0, [r7, #8]
 80081a4:	f7ff ffaa 	bl	80080fc <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80081a8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80081aa:	4619      	mov	r1, r3
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f9b5 	bl	800851c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80081b2:	e004      	b.n	80081be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80081b4:	4621      	mov	r1, r4
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f9c2 	bl	8008540 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80081bc:	bf00      	nop
	  return false;
 80081be:	2300      	movs	r3, #0
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd90      	pop	{r4, r7, pc}

080081c8 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
 80081d4:	4613      	mov	r3, r2
 80081d6:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fa11 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3308      	adds	r3, #8
 80081ee:	787a      	ldrb	r2, [r7, #1]
 80081f0:	8879      	ldrh	r1, [r7, #2]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	220c      	movs	r2, #12
 80081f8:	f007 ffb4 	bl	8010164 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	807b      	strh	r3, [r7, #2]
 8008210:	4613      	mov	r3, r2
 8008212:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff f9f3 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3308      	adds	r3, #8
 800822a:	787a      	ldrb	r2, [r7, #1]
 800822c:	8879      	ldrh	r1, [r7, #2]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	220c      	movs	r2, #12
 8008234:	f007 ff96 	bl	8010164 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8008258:	b5b0      	push	{r4, r5, r7, lr}
 800825a:	b08e      	sub	sp, #56	; 0x38
 800825c:	af00      	add	r7, sp, #0
 800825e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008260:	62b9      	str	r1, [r7, #40]	; 0x28
 8008262:	4613      	mov	r3, r2
 8008264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8008268:	481a      	ldr	r0, [pc, #104]	; (80082d4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800826a:	f7ff f869 	bl	8007340 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	3310      	adds	r3, #16
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fcfe 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8008280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f976 	bl	8008578 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800828c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008290:	4619      	mov	r1, r3
 8008292:	4810      	ldr	r0, [pc, #64]	; (80082d4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8008294:	f000 f9a1 	bl	80085da <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8008298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f97a 	bl	8008596 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80082a2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80082a4:	463b      	mov	r3, r7
 80082a6:	4a0c      	ldr	r2, [pc, #48]	; (80082d8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80082a8:	490c      	ldr	r1, [pc, #48]	; (80082dc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80082aa:	4618      	mov	r0, r3
 80082ac:	f00a fa4a 	bl	8012744 <canardInit>
 80082b0:	3420      	adds	r4, #32
 80082b2:	463d      	mov	r5, r7
 80082b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80082c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80082ca:	bf00      	nop
 80082cc:	3738      	adds	r7, #56	; 0x38
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bdb0      	pop	{r4, r5, r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000988 	.word	0x20000988
 80082d8:	080020f9 	.word	0x080020f9
 80082dc:	080020b5 	.word	0x080020b5

080082e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 f9a4 	bl	800863c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
	{ }
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3304      	adds	r3, #4
 8008340:	4618      	mov	r0, r3
 8008342:	f7fd fe31 	bl	8005fa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f000 f98b 	bl	800866c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
      }
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f998 	bl	80086ac <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f000 f970 	bl	800866c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f9a3 	bl	80086ea <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9a3 	bl	8008702 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 f9ab 	bl	800871a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f9ad 	bl	8008736 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80083dc:	4603      	mov	r3, r0
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9ae 	bl	8008750 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80083f4:	4603      	mov	r3, r0
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7f9 fdde 	bl	8001fc8 <_ZNKSt9_Any_data9_M_accessEv>
 800840c:	4603      	mov	r3, r0
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	7138      	strb	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800844c:	6838      	ldr	r0, [r7, #0]
 800844e:	f7ff ffed 	bl	800842c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008452:	4603      	mov	r3, r0
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4798      	blx	r3
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7f9 fd9f 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 8008474:	4603      	mov	r3, r0
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800847e:	b590      	push	{r4, r7, lr}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008488:	6838      	ldr	r0, [r7, #0]
 800848a:	f000 f96d 	bl	8008768 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800848e:	4603      	mov	r3, r0
 8008490:	4622      	mov	r2, r4
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f972 	bl	800877e <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd90      	pop	{r4, r7, pc}

080084a2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f97f 	bl	80087b0 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7f9 fd80 	bl	8001fc8 <_ZNKSt9_Any_data9_M_accessEv>
 80084c8:	4603      	mov	r3, r0
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	7138      	strb	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008508:	6838      	ldr	r0, [r7, #0]
 800850a:	f7ff ffed 	bl	80084e8 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800850e:	4603      	mov	r3, r0
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4798      	blx	r3
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008526:	6838      	ldr	r0, [r7, #0]
 8008528:	f000 f94e 	bl	80087c8 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800852c:	4603      	mov	r3, r0
 800852e:	4622      	mov	r2, r4
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f953 	bl	80087de <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	bd90      	pop	{r4, r7, pc}

08008540 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f960 	bl	8008810 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f95d 	bl	8008828 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ffe6 	bl	8008558 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8008596:	b590      	push	{r4, r7, lr}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f955 	bl	8008850 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80085a6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00c      	beq.n	80085ca <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f95a 	bl	800886a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80085b6:	4604      	mov	r4, r0
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f963 	bl	8008884 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80085be:	4603      	mov	r3, r0
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 f968 	bl	800889a <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
      }
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}

080085da <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80085e4:	6838      	ldr	r0, [r7, #0]
 80085e6:	f000 f97d 	bl	80088e4 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80085ea:	4603      	mov	r3, r0
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f964 	bl	80088bc <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80085f4:	6838      	ldr	r0, [r7, #0]
 80085f6:	f000 f938 	bl	800886a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f98b 	bl	8008918 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008602:	4602      	mov	r2, r0
 8008604:	f107 030c 	add.w	r3, r7, #12
 8008608:	4611      	mov	r1, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f98f 	bl	800892e <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f974 	bl	80088fe <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8008616:	687b      	ldr	r3, [r7, #4]
	}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3308      	adds	r3, #8
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe fec3 	bl	80073b8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 800864c:	2010      	movs	r0, #16
 800864e:	f00a fb7e 	bl	8012d4e <_Znwj>
 8008652:	4603      	mov	r3, r0
 8008654:	461c      	mov	r4, r3
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 f975 	bl	8008948 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	601c      	str	r4, [r3, #0]
	}
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bd90      	pop	{r4, r7, pc}

0800866c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	601a      	str	r2, [r3, #0]
      }
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ffed 	bl	8008696 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80086bc:	4603      	mov	r3, r0
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80086c2:	6838      	ldr	r0, [r7, #0]
 80086c4:	f7ff ffe7 	bl	8008696 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80086c8:	4603      	mov	r3, r0
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff ffde 	bl	8008696 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80086da:	4603      	mov	r3, r0
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	601a      	str	r2, [r3, #0]
    }
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f93e 	bl	8008974 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 80086f8:	4603      	mov	r3, r0
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f93f 	bl	800898e <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f92f 	bl	80089a4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8008746:	4603      	mov	r3, r0
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f92e 	bl	80089ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 800875e:	4603      	mov	r3, r0
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800877e:	b590      	push	{r4, r7, lr}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800878a:	68b8      	ldr	r0, [r7, #8]
 800878c:	f7ff ffec 	bl	8008768 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008790:	4603      	mov	r3, r0
 8008792:	681c      	ldr	r4, [r3, #0]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7f9 fc0c 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 800879a:	4603      	mov	r3, r0
 800879c:	4619      	mov	r1, r3
 800879e:	2004      	movs	r0, #4
 80087a0:	f7f9 fbbc 	bl	8001f1c <_ZnwjPv>
 80087a4:	4603      	mov	r3, r0
 80087a6:	601c      	str	r4, [r3, #0]
	  }
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}

080087b0 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7f9 fbfa 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 80087be:	4603      	mov	r3, r0
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80087de:	b590      	push	{r4, r7, lr}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80087ea:	68b8      	ldr	r0, [r7, #8]
 80087ec:	f7ff ffec 	bl	80087c8 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80087f0:	4603      	mov	r3, r0
 80087f2:	681c      	ldr	r4, [r3, #0]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7f9 fbdc 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 80087fa:	4603      	mov	r3, r0
 80087fc:	4619      	mov	r1, r3
 80087fe:	2004      	movs	r0, #4
 8008800:	f7f9 fb8c 	bl	8001f1c <_ZnwjPv>
 8008804:	4603      	mov	r3, r0
 8008806:	601c      	str	r4, [r3, #0]
	  }
 8008808:	bf00      	nop
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	bd90      	pop	{r4, r7, pc}

08008810 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7f9 fbca 	bl	8001fb2 <_ZNSt9_Any_data9_M_accessEv>
 800881e:	4603      	mov	r3, r0
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f8cc 	bl	80089d2 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800883a:	683c      	ldr	r4, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f807 	bl	8008850 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008842:	4603      	mov	r3, r0
 8008844:	601c      	str	r4, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bd90      	pop	{r4, r7, pc}

08008850 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f8c6 	bl	80089ec <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008860:	4603      	mov	r3, r0
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f8c6 	bl	8008a06 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800887a:	4603      	mov	r3, r0
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	320c      	adds	r2, #12
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	4790      	blx	r2
      }
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80088c6:	687c      	ldr	r4, [r7, #4]
 80088c8:	463b      	mov	r3, r7
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 f8a8 	bl	8008a20 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80088d0:	4603      	mov	r3, r0
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4619      	mov	r1, r3
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f8ad 	bl	8008a36 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f8c1 	bl	8008a76 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80088f4:	4603      	mov	r3, r0
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f8c9 	bl	8008aa0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800890e:	4603      	mov	r3, r0
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f8b1 	bl	8008abc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800895a:	4a05      	ldr	r2, [pc, #20]	; (8008970 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	0801801c 	.word	0x0801801c

08008974 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 f8b2 	bl	8008ae8 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8008984:	4603      	mov	r3, r0
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f89b 	bl	8008afe <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 f899 	bl	8008b14 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 f89c 	bl	8008b34 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80089fc:	4603      	mov	r3, r0
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f89b 	bl	8008b4c <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008a16:	4603      	mov	r3, r0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008a36:	b590      	push	{r4, r7, lr}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f88f 	bl	8008b64 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008a46:	4603      	mov	r3, r0
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008a4c:	683c      	ldr	r4, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f888 	bl	8008b64 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008a54:	4603      	mov	r3, r0
 8008a56:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d007      	beq.n	8008a6e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f81e 	bl	8008aa0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008a64:	4603      	mov	r3, r0
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f888 	bl	8008b7e <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}

08008a76 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fee6 	bl	8008850 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008a84:	4603      	mov	r3, r0
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff fee0 	bl	8008850 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
	return __p;
 8008a96:	68fb      	ldr	r3, [r7, #12]
      }
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f878 	bl	8008ba0 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8008ac4:	4a07      	ldr	r2, [pc, #28]	; (8008ae4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	605a      	str	r2, [r3, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	609a      	str	r2, [r3, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	080180dc 	.word	0x080180dc

08008ae8 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f84b 	bl	8008bb8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f853 	bl	8008bd0 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f855 	bl	8008bec <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f856 	bl	8008c06 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f855 	bl	8008c1e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008b74:	4603      	mov	r3, r0
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	320c      	adds	r2, #12
 8008b92:	6812      	ldr	r2, [r2, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	4790      	blx	r2
      }
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f845 	bl	8008c38 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f845 	bl	8008c50 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f835 	bl	8008c66 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f834 	bl	8008c7c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8008c14:	4603      	mov	r3, r0
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f833 	bl	8008c94 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f833 	bl	8008cac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8008c46:	4603      	mov	r3, r0
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f81d 	bl	8008cc4 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f81c 	bl	8008cda <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f81d 	bl	8008cf4 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f810 	bl	8008d0a <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8008cea:	4603      	mov	r3, r0
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	4a05      	ldr	r2, [pc, #20]	; (8008d40 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fdc5 	bl	80078c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	0801801c 	.word	0x0801801c

08008d44 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff ffe7 	bl	8008d20 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008d52:	2110      	movs	r1, #16
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f009 fff8 	bl	8012d4a <_ZdlPvj>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3310      	adds	r3, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7f9 f965 	bl	8002040 <_ZNSt8functionIFvvEED1Ev>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7f9 f954 	bl	8002026 <_ZNSt8functionIFyvEED1Ev>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <_Z41__static_initialization_and_destruction_0ii>:




}
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	; 0x28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d122      	bne.n	8008dde <_Z41__static_initialization_and_destruction_0ii+0x56>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d11d      	bne.n	8008dde <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4917      	ldr	r1, [pc, #92]	; (8008e04 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fb39 	bl	8007420 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8008dae:	f107 0318 	add.w	r3, r7, #24
 8008db2:	4915      	ldr	r1, [pc, #84]	; (8008e08 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fb63 	bl	8007480 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8008dba:	f107 0218 	add.w	r2, r7, #24
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4811      	ldr	r0, [pc, #68]	; (8008e0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008dc6:	f7f9 f948 	bl	800205a <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8008dca:	f107 0318 	add.w	r3, r7, #24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f9 f936 	bl	8002040 <_ZNSt8functionIFvvEED1Ev>
 8008dd4:	f107 0308 	add.w	r3, r7, #8
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f9 f924 	bl	8002026 <_ZNSt8functionIFyvEED1Ev>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d105      	bne.n	8008dfa <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008dee:	4807      	ldr	r0, [pc, #28]	; (8008e0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008df0:	f7ff ffb8 	bl	8008d64 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8008df4:	4806      	ldr	r0, [pc, #24]	; (8008e10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008df6:	f7fd f922 	bl	800603e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8008dfa:	bf00      	nop
 8008dfc:	3728      	adds	r7, #40	; 0x28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	08005fd1 	.word	0x08005fd1
 8008e08:	08005fc5 	.word	0x08005fc5
 8008e0c:	200004bc 	.word	0x200004bc
 8008e10:	200004b4 	.word	0x200004b4

08008e14 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68dc      	ldr	r4, [r3, #12]
 8008e20:	2c00      	cmp	r4, #0
 8008e22:	d006      	beq.n	8008e32 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8008e24:	4620      	mov	r0, r4
 8008e26:	f7ff fbfb 	bl	8008620 <_ZN15CyphalInterfaceD1Ev>
 8008e2a:	210c      	movs	r1, #12
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f009 ff8c 	bl	8012d4a <_ZdlPvj>
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd90      	pop	{r4, r7, pc}

08008e3a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
      { delete this; }
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff ff7b 	bl	8008d44 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8008e60:	2300      	movs	r3, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008e7a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008e7e:	6018      	str	r0, [r3, #0]
 8008e80:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008e84:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008e88:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 8008e8a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008e8e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fbb7 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008e9e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008ea2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008ea6:	f107 0108 	add.w	r1, r7, #8
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	f000 f874 	bl	8008f98 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008eb0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008eb4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008ec4:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8008ec8:	f107 0108 	add.w	r1, r7, #8
 8008ecc:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8008ed0:	f5a0 7047 	sub.w	r0, r0, #796	; 0x31c
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	6800      	ldr	r0, [r0, #0]
 8008ed8:	4798      	blx	r3
    }
 8008eda:	bf00      	nop
 8008edc:	f507 7748 	add.w	r7, r7, #800	; 0x320
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fb89 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008efa:	f107 030c 	add.w	r3, r7, #12
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	f000 f86a 	bl	8008fda <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f107 010c 	add.w	r1, r7, #12
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4798      	blx	r3
    }
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fb6b 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f000 f86c 	bl	800901a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3304      	adds	r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f107 010c 	add.w	r1, r7, #12
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
    }
 8008f54:	bf00      	nop
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fb4d 	bl	800760c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f000 f86e 	bl	800905a <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3304      	adds	r3, #4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f107 0108 	add.w	r1, r7, #8
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4798      	blx	r3
    }
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8008fa4:	f240 2303 	movw	r3, #515	; 0x203
 8008fa8:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f107 0214 	add.w	r2, r7, #20
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f7fc fc53 	bl	8005860 <uavcan_register_Access_Request_1_0_deserialize_>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	09db      	lsrs	r3, r3, #7
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	3310      	adds	r3, #16
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fe55 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
    }
}
 8008fd2:	bf00      	nop
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b086      	sub	sp, #24
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	f107 0214 	add.w	r2, r7, #20
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	68b8      	ldr	r0, [r7, #8]
 8008ff6:	f7fc fe1f 	bl	8005c38 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	09db      	lsrs	r3, r3, #7
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	3310      	adds	r3, #16
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fe35 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
}
 8009012:	bf00      	nop
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009026:	230c      	movs	r3, #12
 8009028:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	f107 0214 	add.w	r2, r7, #20
 8009032:	4619      	mov	r1, r3
 8009034:	68b8      	ldr	r0, [r7, #8]
 8009036:	f7fa f909 	bl	800324c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 800903a:	4603      	mov	r3, r0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	09db      	lsrs	r3, r3, #7
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	3310      	adds	r3, #16
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe fe15 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
}
 8009052:	bf00      	nop
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800905a:	b580      	push	{r7, lr}
 800905c:	b086      	sub	sp, #24
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009066:	230c      	movs	r3, #12
 8009068:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f107 0214 	add.w	r2, r7, #20
 8009072:	4619      	mov	r1, r3
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f7f9 fd73 	bl	8002b60 <uavcan_node_Heartbeat_1_0_deserialize_>
 800907a:	4603      	mov	r3, r0
 800907c:	b2db      	uxtb	r3, r3
 800907e:	09db      	lsrs	r3, r3, #7
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	3310      	adds	r3, #16
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fdf5 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <_GLOBAL__sub_I_buffer>:
 800909a:	b580      	push	{r7, lr}
 800909c:	af00      	add	r7, sp, #0
 800909e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090a2:	2001      	movs	r0, #1
 80090a4:	f7ff fe70 	bl	8008d88 <_Z41__static_initialization_and_destruction_0ii>
 80090a8:	bd80      	pop	{r7, pc}

080090aa <_GLOBAL__sub_D_buffer>:
 80090aa:	b580      	push	{r7, lr}
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090b2:	2000      	movs	r0, #0
 80090b4:	f7ff fe68 	bl	8008d88 <_Z41__static_initialization_and_destruction_0ii>
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <MX_SPI1_Init+0x74>)
 80090c2:	4a1c      	ldr	r2, [pc, #112]	; (8009134 <MX_SPI1_Init+0x78>)
 80090c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <MX_SPI1_Init+0x74>)
 80090c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80090cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80090ce:	4b18      	ldr	r3, [pc, #96]	; (8009130 <MX_SPI1_Init+0x74>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80090d4:	4b16      	ldr	r3, [pc, #88]	; (8009130 <MX_SPI1_Init+0x74>)
 80090d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80090da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80090dc:	4b14      	ldr	r3, [pc, #80]	; (8009130 <MX_SPI1_Init+0x74>)
 80090de:	2202      	movs	r2, #2
 80090e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80090e2:	4b13      	ldr	r3, [pc, #76]	; (8009130 <MX_SPI1_Init+0x74>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80090e8:	4b11      	ldr	r3, [pc, #68]	; (8009130 <MX_SPI1_Init+0x74>)
 80090ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <MX_SPI1_Init+0x74>)
 80090f2:	2220      	movs	r2, #32
 80090f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80090f6:	4b0e      	ldr	r3, [pc, #56]	; (8009130 <MX_SPI1_Init+0x74>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <MX_SPI1_Init+0x74>)
 80090fe:	2200      	movs	r2, #0
 8009100:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009102:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <MX_SPI1_Init+0x74>)
 8009104:	2200      	movs	r2, #0
 8009106:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009108:	4b09      	ldr	r3, [pc, #36]	; (8009130 <MX_SPI1_Init+0x74>)
 800910a:	2207      	movs	r2, #7
 800910c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <MX_SPI1_Init+0x74>)
 8009110:	2200      	movs	r2, #0
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009114:	4b06      	ldr	r3, [pc, #24]	; (8009130 <MX_SPI1_Init+0x74>)
 8009116:	2200      	movs	r2, #0
 8009118:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800911a:	4805      	ldr	r0, [pc, #20]	; (8009130 <MX_SPI1_Init+0x74>)
 800911c:	f004 fcc4 	bl	800daa8 <HAL_SPI_Init>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009126:	f7f8 fef4 	bl	8001f12 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800912a:	bf00      	nop
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000798 	.word	0x20000798
 8009134:	40013000 	.word	0x40013000

08009138 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <MX_SPI3_Init+0x74>)
 800913e:	4a1c      	ldr	r2, [pc, #112]	; (80091b0 <MX_SPI3_Init+0x78>)
 8009140:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009142:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <MX_SPI3_Init+0x74>)
 8009144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009148:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800914a:	4b18      	ldr	r3, [pc, #96]	; (80091ac <MX_SPI3_Init+0x74>)
 800914c:	2200      	movs	r2, #0
 800914e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8009150:	4b16      	ldr	r3, [pc, #88]	; (80091ac <MX_SPI3_Init+0x74>)
 8009152:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009156:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009158:	4b14      	ldr	r3, [pc, #80]	; (80091ac <MX_SPI3_Init+0x74>)
 800915a:	2200      	movs	r2, #0
 800915c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <MX_SPI3_Init+0x74>)
 8009160:	2201      	movs	r2, #1
 8009162:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <MX_SPI3_Init+0x74>)
 8009166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800916a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <MX_SPI3_Init+0x74>)
 800916e:	2218      	movs	r2, #24
 8009170:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009172:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <MX_SPI3_Init+0x74>)
 8009174:	2200      	movs	r2, #0
 8009176:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009178:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <MX_SPI3_Init+0x74>)
 800917a:	2200      	movs	r2, #0
 800917c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <MX_SPI3_Init+0x74>)
 8009180:	2200      	movs	r2, #0
 8009182:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <MX_SPI3_Init+0x74>)
 8009186:	2207      	movs	r2, #7
 8009188:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <MX_SPI3_Init+0x74>)
 800918c:	2200      	movs	r2, #0
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009190:	4b06      	ldr	r3, [pc, #24]	; (80091ac <MX_SPI3_Init+0x74>)
 8009192:	2200      	movs	r2, #0
 8009194:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009196:	4805      	ldr	r0, [pc, #20]	; (80091ac <MX_SPI3_Init+0x74>)
 8009198:	f004 fc86 	bl	800daa8 <HAL_SPI_Init>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80091a2:	f7f8 feb6 	bl	8001f12 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80091a6:	bf00      	nop
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	200007fc 	.word	0x200007fc
 80091b0:	40003c00 	.word	0x40003c00

080091b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08c      	sub	sp, #48	; 0x30
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091bc:	f107 031c 	add.w	r3, r7, #28
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	605a      	str	r2, [r3, #4]
 80091c6:	609a      	str	r2, [r3, #8]
 80091c8:	60da      	str	r2, [r3, #12]
 80091ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a33      	ldr	r2, [pc, #204]	; (80092a0 <HAL_SPI_MspInit+0xec>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d131      	bne.n	800923a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80091d6:	4b33      	ldr	r3, [pc, #204]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 80091d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091da:	4a32      	ldr	r2, [pc, #200]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 80091dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091e0:	6613      	str	r3, [r2, #96]	; 0x60
 80091e2:	4b30      	ldr	r3, [pc, #192]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 80091e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ee:	4b2d      	ldr	r3, [pc, #180]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 80091f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f2:	4a2c      	ldr	r2, [pc, #176]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 80091f4:	f043 0301 	orr.w	r3, r3, #1
 80091f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091fa:	4b2a      	ldr	r3, [pc, #168]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 80091fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009206:	23e0      	movs	r3, #224	; 0xe0
 8009208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800920a:	2302      	movs	r3, #2
 800920c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800920e:	2300      	movs	r3, #0
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009212:	2300      	movs	r3, #0
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009216:	2305      	movs	r3, #5
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800921a:	f107 031c 	add.w	r3, r7, #28
 800921e:	4619      	mov	r1, r3
 8009220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009224:	f001 ffba 	bl	800b19c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8009228:	2200      	movs	r2, #0
 800922a:	2100      	movs	r1, #0
 800922c:	2023      	movs	r0, #35	; 0x23
 800922e:	f001 f872 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009232:	2023      	movs	r0, #35	; 0x23
 8009234:	f001 f889 	bl	800a34a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009238:	e02d      	b.n	8009296 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1a      	ldr	r2, [pc, #104]	; (80092a8 <HAL_SPI_MspInit+0xf4>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d128      	bne.n	8009296 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009244:	4b17      	ldr	r3, [pc, #92]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 8009246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009248:	4a16      	ldr	r2, [pc, #88]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 800924a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800924e:	6593      	str	r3, [r2, #88]	; 0x58
 8009250:	4b14      	ldr	r3, [pc, #80]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 8009252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800925c:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 800925e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009260:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 8009262:	f043 0304 	orr.w	r3, r3, #4
 8009266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009268:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <HAL_SPI_MspInit+0xf0>)
 800926a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009274:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927a:	2302      	movs	r3, #2
 800927c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927e:	2300      	movs	r3, #0
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009282:	2300      	movs	r3, #0
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009286:	2306      	movs	r3, #6
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800928a:	f107 031c 	add.w	r3, r7, #28
 800928e:	4619      	mov	r1, r3
 8009290:	4806      	ldr	r0, [pc, #24]	; (80092ac <HAL_SPI_MspInit+0xf8>)
 8009292:	f001 ff83 	bl	800b19c <HAL_GPIO_Init>
}
 8009296:	bf00      	nop
 8009298:	3730      	adds	r7, #48	; 0x30
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40013000 	.word	0x40013000
 80092a4:	40021000 	.word	0x40021000
 80092a8:	40003c00 	.word	0x40003c00
 80092ac:	48000800 	.word	0x48000800

080092b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <HAL_MspInit+0x44>)
 80092b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ba:	4a0e      	ldr	r2, [pc, #56]	; (80092f4 <HAL_MspInit+0x44>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	6613      	str	r3, [r2, #96]	; 0x60
 80092c2:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <HAL_MspInit+0x44>)
 80092c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	607b      	str	r3, [r7, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <HAL_MspInit+0x44>)
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <HAL_MspInit+0x44>)
 80092d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092d8:	6593      	str	r3, [r2, #88]	; 0x58
 80092da:	4b06      	ldr	r3, [pc, #24]	; (80092f4 <HAL_MspInit+0x44>)
 80092dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80092e6:	f003 fc53 	bl	800cb90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	40021000 	.word	0x40021000

080092f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80092fc:	e7fe      	b.n	80092fc <NMI_Handler+0x4>

080092fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092fe:	b480      	push	{r7}
 8009300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009302:	e7fe      	b.n	8009302 <HardFault_Handler+0x4>

08009304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009308:	e7fe      	b.n	8009308 <MemManage_Handler+0x4>

0800930a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800930a:	b480      	push	{r7}
 800930c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800930e:	e7fe      	b.n	800930e <BusFault_Handler+0x4>

08009310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009314:	e7fe      	b.n	8009314 <UsageFault_Handler+0x4>

08009316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009316:	b480      	push	{r7}
 8009318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800931a:	bf00      	nop
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009328:	bf00      	nop
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009332:	b480      	push	{r7}
 8009334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009336:	bf00      	nop
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009344:	f000 fecc 	bl	800a0e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}

0800934c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8009350:	4802      	ldr	r0, [pc, #8]	; (800935c <DMA1_Channel1_IRQHandler+0x10>)
 8009352:	f001 f97d 	bl	800a650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009356:	bf00      	nop
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20000360 	.word	0x20000360

08009360 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8009364:	4802      	ldr	r0, [pc, #8]	; (8009370 <DMA1_Channel2_IRQHandler+0x10>)
 8009366:	f001 f973 	bl	800a650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800936a:	bf00      	nop
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200003c0 	.word	0x200003c0

08009374 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009378:	4802      	ldr	r0, [pc, #8]	; (8009384 <SPI1_IRQHandler+0x10>)
 800937a:	f004 ffd7 	bl	800e32c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800937e:	bf00      	nop
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000798 	.word	0x20000798

08009388 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800938c:	4802      	ldr	r0, [pc, #8]	; (8009398 <USART2_IRQHandler+0x10>)
 800938e:	f005 fc85 	bl	800ec9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009392:	bf00      	nop
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	200008b0 	.word	0x200008b0

0800939c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80093a0:	4802      	ldr	r0, [pc, #8]	; (80093ac <I2C4_EV_IRQHandler+0x10>)
 80093a2:	f002 fa65 	bl	800b870 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80093a6:	bf00      	nop
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	2000030c 	.word	0x2000030c

080093b0 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <I2C4_ER_IRQHandler+0x10>)
 80093b6:	f002 fa75 	bl	800b8a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	2000030c 	.word	0x2000030c

080093c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
  return 1;
 80093c8:	2301      	movs	r3, #1
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <_kill>:

int _kill(int pid, int sig)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80093de:	f00a fe59 	bl	8014094 <__errno>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2216      	movs	r2, #22
 80093e6:	601a      	str	r2, [r3, #0]
  return -1;
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <_exit>:

void _exit (int status)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80093fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff ffe7 	bl	80093d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009406:	e7fe      	b.n	8009406 <_exit+0x12>

08009408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e00a      	b.n	8009430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800941a:	f3af 8000 	nop.w
 800941e:	4601      	mov	r1, r0
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	60ba      	str	r2, [r7, #8]
 8009426:	b2ca      	uxtb	r2, r1
 8009428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3301      	adds	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	dbf0      	blt.n	800941a <_read+0x12>
  }

  return len;
 8009438:	687b      	ldr	r3, [r7, #4]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b086      	sub	sp, #24
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	e009      	b.n	8009468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	60ba      	str	r2, [r7, #8]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	3301      	adds	r3, #1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	dbf1      	blt.n	8009454 <_write+0x12>
  }
  return len;
 8009470:	687b      	ldr	r3, [r7, #4]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <_close>:

int _close(int file)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094a2:	605a      	str	r2, [r3, #4]
  return 0;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <_isatty>:

int _isatty(int file)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80094ba:	2301      	movs	r3, #1
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80094ec:	4a14      	ldr	r2, [pc, #80]	; (8009540 <_sbrk+0x5c>)
 80094ee:	4b15      	ldr	r3, [pc, #84]	; (8009544 <_sbrk+0x60>)
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80094f8:	4b13      	ldr	r3, [pc, #76]	; (8009548 <_sbrk+0x64>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <_sbrk+0x64>)
 8009502:	4a12      	ldr	r2, [pc, #72]	; (800954c <_sbrk+0x68>)
 8009504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009506:	4b10      	ldr	r3, [pc, #64]	; (8009548 <_sbrk+0x64>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d207      	bcs.n	8009524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009514:	f00a fdbe 	bl	8014094 <__errno>
 8009518:	4603      	mov	r3, r0
 800951a:	220c      	movs	r2, #12
 800951c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	e009      	b.n	8009538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009524:	4b08      	ldr	r3, [pc, #32]	; (8009548 <_sbrk+0x64>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <_sbrk+0x64>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4413      	add	r3, r2
 8009532:	4a05      	ldr	r2, [pc, #20]	; (8009548 <_sbrk+0x64>)
 8009534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009536:	68fb      	ldr	r3, [r7, #12]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20020000 	.word	0x20020000
 8009544:	00000400 	.word	0x00000400
 8009548:	20000860 	.word	0x20000860
 800954c:	20000ae0 	.word	0x20000ae0

08009550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <SystemInit+0x20>)
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955a:	4a05      	ldr	r2, [pc, #20]	; (8009570 <SystemInit+0x20>)
 800955c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009564:	bf00      	nop
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	e000ed00 	.word	0xe000ed00

08009574 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08c      	sub	sp, #48	; 0x30
 8009578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800957a:	f107 030c 	add.w	r3, r7, #12
 800957e:	2224      	movs	r2, #36	; 0x24
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f00a fccd 	bl	8013f22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009588:	463b      	mov	r3, r7
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	605a      	str	r2, [r3, #4]
 8009590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009592:	4b23      	ldr	r3, [pc, #140]	; (8009620 <MX_TIM8_Init+0xac>)
 8009594:	4a23      	ldr	r2, [pc, #140]	; (8009624 <MX_TIM8_Init+0xb0>)
 8009596:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009598:	4b21      	ldr	r3, [pc, #132]	; (8009620 <MX_TIM8_Init+0xac>)
 800959a:	2200      	movs	r2, #0
 800959c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800959e:	4b20      	ldr	r3, [pc, #128]	; (8009620 <MX_TIM8_Init+0xac>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80095a4:	4b1e      	ldr	r3, [pc, #120]	; (8009620 <MX_TIM8_Init+0xac>)
 80095a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095ac:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <MX_TIM8_Init+0xac>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <MX_TIM8_Init+0xac>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095b8:	4b19      	ldr	r3, [pc, #100]	; (8009620 <MX_TIM8_Init+0xac>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80095be:	2301      	movs	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80095c6:	2301      	movs	r3, #1
 80095c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80095ca:	2300      	movs	r3, #0
 80095cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80095d2:	2300      	movs	r3, #0
 80095d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80095d6:	2301      	movs	r3, #1
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80095da:	2300      	movs	r3, #0
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80095e2:	f107 030c 	add.w	r3, r7, #12
 80095e6:	4619      	mov	r1, r3
 80095e8:	480d      	ldr	r0, [pc, #52]	; (8009620 <MX_TIM8_Init+0xac>)
 80095ea:	f005 f917 	bl	800e81c <HAL_TIM_Encoder_Init>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80095f4:	f7f8 fc8d 	bl	8001f12 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095f8:	2300      	movs	r3, #0
 80095fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80095fc:	2300      	movs	r3, #0
 80095fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009600:	2300      	movs	r3, #0
 8009602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009604:	463b      	mov	r3, r7
 8009606:	4619      	mov	r1, r3
 8009608:	4805      	ldr	r0, [pc, #20]	; (8009620 <MX_TIM8_Init+0xac>)
 800960a:	f005 fa61 	bl	800ead0 <HAL_TIMEx_MasterConfigSynchronization>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8009614:	f7f8 fc7d 	bl	8001f12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009618:	bf00      	nop
 800961a:	3730      	adds	r7, #48	; 0x30
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000864 	.word	0x20000864
 8009624:	40013400 	.word	0x40013400

08009628 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009630:	f107 0314 	add.w	r3, r7, #20
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	605a      	str	r2, [r3, #4]
 800963a:	609a      	str	r2, [r3, #8]
 800963c:	60da      	str	r2, [r3, #12]
 800963e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a25      	ldr	r2, [pc, #148]	; (80096dc <HAL_TIM_Encoder_MspInit+0xb4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d143      	bne.n	80096d2 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800964a:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800964c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964e:	4a24      	ldr	r2, [pc, #144]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009654:	6613      	str	r3, [r2, #96]	; 0x60
 8009656:	4b22      	ldr	r3, [pc, #136]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800965e:	613b      	str	r3, [r7, #16]
 8009660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009662:	4b1f      	ldr	r3, [pc, #124]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	4a1e      	ldr	r2, [pc, #120]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009668:	f043 0304 	orr.w	r3, r3, #4
 800966c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800966e:	4b1c      	ldr	r3, [pc, #112]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009672:	f003 0304 	and.w	r3, r3, #4
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800967a:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967e:	4a18      	ldr	r2, [pc, #96]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009680:	f043 0302 	orr.w	r3, r3, #2
 8009684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009686:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	60bb      	str	r3, [r7, #8]
 8009690:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009692:	2380      	movs	r3, #128	; 0x80
 8009694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009696:	2302      	movs	r3, #2
 8009698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800969e:	2300      	movs	r3, #0
 80096a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80096a2:	2304      	movs	r3, #4
 80096a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096a6:	f107 0314 	add.w	r3, r7, #20
 80096aa:	4619      	mov	r1, r3
 80096ac:	480d      	ldr	r0, [pc, #52]	; (80096e4 <HAL_TIM_Encoder_MspInit+0xbc>)
 80096ae:	f001 fd75 	bl	800b19c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b6:	2302      	movs	r3, #2
 80096b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096be:	2300      	movs	r3, #0
 80096c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80096c2:	2305      	movs	r3, #5
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096c6:	f107 0314 	add.w	r3, r7, #20
 80096ca:	4619      	mov	r1, r3
 80096cc:	4806      	ldr	r0, [pc, #24]	; (80096e8 <HAL_TIM_Encoder_MspInit+0xc0>)
 80096ce:	f001 fd65 	bl	800b19c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80096d2:	bf00      	nop
 80096d4:	3728      	adds	r7, #40	; 0x28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40013400 	.word	0x40013400
 80096e0:	40021000 	.word	0x40021000
 80096e4:	48000800 	.word	0x48000800
 80096e8:	48000400 	.word	0x48000400

080096ec <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 80096f4:	2300      	movs	r3, #0
 80096f6:	60bb      	str	r3, [r7, #8]
 80096f8:	2300      	movs	r3, #0
 80096fa:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 80096fc:	23a0      	movs	r3, #160	; 0xa0
 80096fe:	723b      	strb	r3, [r7, #8]
 8009700:	2300      	movs	r3, #0
 8009702:	727b      	strb	r3, [r7, #9]
 8009704:	2300      	movs	r3, #0
 8009706:	72bb      	strb	r3, [r7, #10]
 8009708:	2300      	movs	r3, #0
 800970a:	72fb      	strb	r3, [r7, #11]
 800970c:	2300      	movs	r3, #0
 800970e:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009710:	f107 0308 	add.w	r3, r7, #8
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f8e3 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 800971a:	23ad      	movs	r3, #173	; 0xad
 800971c:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	0e1b      	lsrs	r3, r3, #24
 8009722:	b2db      	uxtb	r3, r3
 8009724:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	141b      	asrs	r3, r3, #16
 800972a:	b2db      	uxtb	r3, r3
 800972c:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	121b      	asrs	r3, r3, #8
 8009732:	b2db      	uxtb	r3, r3
 8009734:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800973c:	f107 0308 	add.w	r3, r7, #8
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f8cd 	bl	80098e0 <tmc5160_write>
}
 8009746:	bf00      	nop
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7f6 ff0b 	bl	8000574 <__aeabi_i2d>
 800975e:	a336      	add	r3, pc, #216	; (adr r3, 8009838 <tmc5160_move+0xe8>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f7f6 ff70 	bl	8000648 <__aeabi_dmul>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4610      	mov	r0, r2
 800976e:	4619      	mov	r1, r3
 8009770:	f7f7 fa1a 	bl	8000ba8 <__aeabi_d2iz>
 8009774:	4603      	mov	r3, r0
 8009776:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	2300      	movs	r3, #0
 800977e:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	105b      	asrs	r3, r3, #1
 8009784:	617b      	str	r3, [r7, #20]

	if (vel < 0) //select positive or negative mode depending on vel sign
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da0f      	bge.n	80097ac <tmc5160_move+0x5c>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 800978c:	23a0      	movs	r3, #160	; 0xa0
 800978e:	733b      	strb	r3, [r7, #12]
 8009790:	2300      	movs	r3, #0
 8009792:	737b      	strb	r3, [r7, #13]
 8009794:	2300      	movs	r3, #0
 8009796:	73bb      	strb	r3, [r7, #14]
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
 800979c:	2302      	movs	r3, #2
 800979e:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f89b 	bl	80098e0 <tmc5160_write>
 80097aa:	e00e      	b.n	80097ca <tmc5160_move+0x7a>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 80097ac:	23a0      	movs	r3, #160	; 0xa0
 80097ae:	733b      	strb	r3, [r7, #12]
 80097b0:	2300      	movs	r3, #0
 80097b2:	737b      	strb	r3, [r7, #13]
 80097b4:	2300      	movs	r3, #0
 80097b6:	73bb      	strb	r3, [r7, #14]
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
 80097bc:	2301      	movs	r3, #1
 80097be:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 80097c0:	f107 030c 	add.w	r3, r7, #12
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 f88b 	bl	80098e0 <tmc5160_write>
	}

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 80097ca:	23a5      	movs	r3, #165	; 0xa5
 80097cc:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	0e1b      	lsrs	r3, r3, #24
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	141b      	asrs	r3, r3, #16
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	121b      	asrs	r3, r3, #8
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80097ec:	f107 030c 	add.w	r3, r7, #12
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 f875 	bl	80098e0 <tmc5160_write>

	vel = abs(vel);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bfb8      	it	lt
 80097fc:	425b      	neglt	r3, r3
 80097fe:	607b      	str	r3, [r7, #4]
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009800:	23a7      	movs	r3, #167	; 0xa7
 8009802:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	0e1b      	lsrs	r3, r3, #24
 8009808:	b2db      	uxtb	r3, r3
 800980a:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	141b      	asrs	r3, r3, #16
 8009810:	b2db      	uxtb	r3, r3
 8009812:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	121b      	asrs	r3, r3, #8
 8009818:	b2db      	uxtb	r3, r3
 800981a:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009822:	f107 030c 	add.w	r3, r7, #12
 8009826:	4618      	mov	r0, r3
 8009828:	f000 f85a 	bl	80098e0 <tmc5160_write>
}
 800982c:	bf00      	nop
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	f3af 8000 	nop.w
 8009838:	77ffebde 	.word	0x77ffebde
 800983c:	3ff65e9f 	.word	0x3ff65e9f

08009840 <tmc5160_velocity>:
	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
	tmc5160_write(WData);
}

void tmc5160_velocity(uint32_t vel)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7f6 fe83 	bl	8000554 <__aeabi_ui2d>
 800984e:	a322      	add	r3, pc, #136	; (adr r3, 80098d8 <tmc5160_velocity+0x98>)
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f7f6 fef8 	bl	8000648 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4610      	mov	r0, r2
 800985e:	4619      	mov	r1, r3
 8009860:	f7f7 f9ca 	bl	8000bf8 <__aeabi_d2uiz>
 8009864:	4603      	mov	r3, r0
 8009866:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 8009868:	2300      	movs	r3, #0
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	2300      	movs	r3, #0
 800986e:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	617b      	str	r3, [r7, #20]

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009876:	23a5      	movs	r3, #165	; 0xa5
 8009878:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	0e1b      	lsrs	r3, r3, #24
 800987e:	b2db      	uxtb	r3, r3
 8009880:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	0c1b      	lsrs	r3, r3, #16
 8009886:	b2db      	uxtb	r3, r3
 8009888:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	0a1b      	lsrs	r3, r3, #8
 800988e:	b2db      	uxtb	r3, r3
 8009890:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009898:	f107 030c 	add.w	r3, r7, #12
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f81f 	bl	80098e0 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 80098a2:	23a7      	movs	r3, #167	; 0xa7
 80098a4:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	0e1b      	lsrs	r3, r3, #24
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	0c1b      	lsrs	r3, r3, #16
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80098c4:	f107 030c 	add.w	r3, r7, #12
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f809 	bl	80098e0 <tmc5160_write>

}
 80098ce:	bf00      	nop
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	77ffebde 	.word	0x77ffebde
 80098dc:	3ff65e9f 	.word	0x3ff65e9f

080098e0 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 80098e8:	2200      	movs	r2, #0
 80098ea:	2110      	movs	r1, #16
 80098ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098f0:	f001 fdd6 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
 80098f8:	2205      	movs	r2, #5
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	4806      	ldr	r0, [pc, #24]	; (8009918 <tmc5160_write+0x38>)
 80098fe:	f004 f97e 	bl	800dbfe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 8009902:	2201      	movs	r2, #1
 8009904:	2110      	movs	r1, #16
 8009906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800990a:	f001 fdc9 	bl	800b4a0 <HAL_GPIO_WritePin>
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20000798 	.word	0x20000798

0800991c <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af02      	add	r7, sp, #8
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009926:	2200      	movs	r2, #0
 8009928:	2110      	movs	r1, #16
 800992a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800992e:	f001 fdb7 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009932:	f04f 33ff 	mov.w	r3, #4294967295
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2305      	movs	r3, #5
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4812      	ldr	r0, [pc, #72]	; (8009988 <tmc5160_read+0x6c>)
 8009940:	f004 fad2 	bl	800dee8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009944:	2201      	movs	r2, #1
 8009946:	2110      	movs	r1, #16
 8009948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800994c:	f001 fda8 	bl	800b4a0 <HAL_GPIO_WritePin>
	nop();
 8009950:	bf00      	nop
	nop();
 8009952:	bf00      	nop
	nop();
 8009954:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009956:	2200      	movs	r2, #0
 8009958:	2110      	movs	r1, #16
 800995a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800995e:	f001 fd9f 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009962:	f04f 33ff 	mov.w	r3, #4294967295
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2305      	movs	r3, #5
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	4806      	ldr	r0, [pc, #24]	; (8009988 <tmc5160_read+0x6c>)
 8009970:	f004 faba 	bl	800dee8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009974:	2201      	movs	r2, #1
 8009976:	2110      	movs	r1, #16
 8009978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800997c:	f001 fd90 	bl	800b4a0 <HAL_GPIO_WritePin>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000798 	.word	0x20000798

0800998c <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	2300      	movs	r3, #0
 8009998:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 800999a:	2300      	movs	r3, #0
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	2300      	movs	r3, #0
 80099a0:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 80099a2:	2321      	movs	r3, #33	; 0x21
 80099a4:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 80099a6:	1d3a      	adds	r2, r7, #4
 80099a8:	f107 030c 	add.w	r3, r7, #12
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff ffb4 	bl	800991c <tmc5160_read>

	int32_t response = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 80099b8:	797b      	ldrb	r3, [r7, #5]
 80099ba:	461a      	mov	r2, r3
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4313      	orrs	r3, r2
 80099c0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	021b      	lsls	r3, r3, #8
 80099c6:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 80099c8:	79bb      	ldrb	r3, [r7, #6]
 80099ca:	461a      	mov	r2, r3
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	461a      	mov	r2, r3
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	021b      	lsls	r3, r3, #8
 80099e6:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 80099e8:	7a3b      	ldrb	r3, [r7, #8]
 80099ea:	461a      	mov	r2, r3
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

	return response;
 80099f2:	697b      	ldr	r3, [r7, #20]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3718      	adds	r7, #24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	0000      	movs	r0, r0
	...

08009a00 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8009a0e:	2300      	movs	r3, #0
 8009a10:	603b      	str	r3, [r7, #0]
 8009a12:	2300      	movs	r3, #0
 8009a14:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 8009a16:	2322      	movs	r3, #34	; 0x22
 8009a18:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8009a1a:	463a      	mov	r2, r7
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	4611      	mov	r1, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff ff7a 	bl	800991c <tmc5160_read>

	int32_t response = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 8009a2c:	787b      	ldrb	r3, [r7, #1]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	021b      	lsls	r3, r3, #8
 8009a3a:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 8009a3c:	78bb      	ldrb	r3, [r7, #2]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 8009a5c:	793b      	ldrb	r3, [r7, #4]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 8009a6a:	2118      	movs	r1, #24
 8009a6c:	6978      	ldr	r0, [r7, #20]
 8009a6e:	f000 fa29 	bl	8009ec4 <sign_extend_bits_to_32>
 8009a72:	6138      	str	r0, [r7, #16]

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009a74:	6938      	ldr	r0, [r7, #16]
 8009a76:	f7f6 fd7d 	bl	8000574 <__aeabi_i2d>
 8009a7a:	a309      	add	r3, pc, #36	; (adr r3, 8009aa0 <tmc5160_velocity_read+0xa0>)
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 ff0c 	bl	800089c <__aeabi_ddiv>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	f7f7 f88c 	bl	8000ba8 <__aeabi_d2iz>
 8009a90:	4603      	mov	r3, r0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	77ffebde 	.word	0x77ffebde
 8009aa4:	3ff65e9f 	.word	0x3ff65e9f

08009aa8 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2120      	movs	r1, #32
 8009ab4:	487a      	ldr	r0, [pc, #488]	; (8009ca0 <tmc5160_init+0x1f8>)
 8009ab6:	f001 fcf3 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 8009aba:	2201      	movs	r2, #1
 8009abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ac4:	f001 fcec 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ad2:	f001 fce5 	bl	800b4a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	2110      	movs	r1, #16
 8009ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ade:	f001 fcdf 	bl	800b4a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009aec:	f001 fcd8 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 8009af0:	2200      	movs	r2, #0
 8009af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009afa:	f001 fcd1 	bl	800b4a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009afe:	2064      	movs	r0, #100	; 0x64
 8009b00:	f000 fb0c 	bl	800a11c <HAL_Delay>

	uint8_t WData[5] = {0};
 8009b04:	2300      	movs	r3, #0
 8009b06:	60bb      	str	r3, [r7, #8]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8009b0c:	23ec      	movs	r3, #236	; 0xec
 8009b0e:	723b      	strb	r3, [r7, #8]
 8009b10:	2300      	movs	r3, #0
 8009b12:	727b      	strb	r3, [r7, #9]
 8009b14:	2300      	movs	r3, #0
 8009b16:	72bb      	strb	r3, [r7, #10]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	72fb      	strb	r3, [r7, #11]
 8009b1c:	23c3      	movs	r3, #195	; 0xc3
 8009b1e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009b20:	f107 0308 	add.w	r3, r7, #8
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7ff fedb 	bl	80098e0 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 8009b2a:	2390      	movs	r3, #144	; 0x90
 8009b2c:	723b      	strb	r3, [r7, #8]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	727b      	strb	r3, [r7, #9]
 8009b32:	2300      	movs	r3, #0
 8009b34:	72bb      	strb	r3, [r7, #10]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	72fb      	strb	r3, [r7, #11]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009b4a:	f107 0308 	add.w	r3, r7, #8
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7ff fec6 	bl	80098e0 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 8009b54:	2391      	movs	r3, #145	; 0x91
 8009b56:	723b      	strb	r3, [r7, #8]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	727b      	strb	r3, [r7, #9]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	72bb      	strb	r3, [r7, #10]
 8009b60:	2300      	movs	r3, #0
 8009b62:	72fb      	strb	r3, [r7, #11]
 8009b64:	230a      	movs	r3, #10
 8009b66:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff feb7 	bl	80098e0 <tmc5160_write>

	//WData[0] = 0xF0; WData[1] = 0x04; WData[2] = 0x0d; WData[3] = 0x00; WData[4] = 0x30; // PWM_CONF PWM_FREQ 35kHz TODO
	//tmc5160_write(WData);

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009b72:	2380      	movs	r3, #128	; 0x80
 8009b74:	723b      	strb	r3, [r7, #8]
 8009b76:	2300      	movs	r3, #0
 8009b78:	727b      	strb	r3, [r7, #9]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	72bb      	strb	r3, [r7, #10]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	72fb      	strb	r3, [r7, #11]
 8009b82:	2304      	movs	r3, #4
 8009b84:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009b86:	f107 0308 	add.w	r3, r7, #8
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff fea8 	bl	80098e0 <tmc5160_write>

	tmc5160_velocity(1000000); //initial vel config
 8009b90:	4844      	ldr	r0, [pc, #272]	; (8009ca4 <tmc5160_init+0x1fc>)
 8009b92:	f7ff fe55 	bl	8009840 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 8009b96:	2393      	movs	r3, #147	; 0x93
 8009b98:	723b      	strb	r3, [r7, #8]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	727b      	strb	r3, [r7, #9]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	72bb      	strb	r3, [r7, #10]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	72fb      	strb	r3, [r7, #11]
 8009ba6:	23c8      	movs	r3, #200	; 0xc8
 8009ba8:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009baa:	f107 0308 	add.w	r3, r7, #8
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fe96 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 8009bb4:	23a0      	movs	r3, #160	; 0xa0
 8009bb6:	723b      	strb	r3, [r7, #8]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	727b      	strb	r3, [r7, #9]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	72bb      	strb	r3, [r7, #10]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	72fb      	strb	r3, [r7, #11]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fe87 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009bd2:	23a3      	movs	r3, #163	; 0xa3
 8009bd4:	723b      	strb	r3, [r7, #8]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	727b      	strb	r3, [r7, #9]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	72bb      	strb	r3, [r7, #10]
 8009bde:	2300      	movs	r3, #0
 8009be0:	72fb      	strb	r3, [r7, #11]
 8009be2:	230a      	movs	r3, #10
 8009be4:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009be6:	f107 0308 	add.w	r3, r7, #8
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff fe78 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8009bf0:	23a4      	movs	r3, #164	; 0xa4
 8009bf2:	723b      	strb	r3, [r7, #8]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	727b      	strb	r3, [r7, #9]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	72bb      	strb	r3, [r7, #10]
 8009bfc:	236e      	movs	r3, #110	; 0x6e
 8009bfe:	72fb      	strb	r3, [r7, #11]
 8009c00:	2320      	movs	r3, #32
 8009c02:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fe69 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8009c0e:	23a6      	movs	r3, #166	; 0xa6
 8009c10:	723b      	strb	r3, [r7, #8]
 8009c12:	2300      	movs	r3, #0
 8009c14:	727b      	strb	r3, [r7, #9]
 8009c16:	2300      	movs	r3, #0
 8009c18:	72bb      	strb	r3, [r7, #10]
 8009c1a:	2323      	movs	r3, #35	; 0x23
 8009c1c:	72fb      	strb	r3, [r7, #11]
 8009c1e:	2388      	movs	r3, #136	; 0x88
 8009c20:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff fe5a 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 8009c2c:	23a8      	movs	r3, #168	; 0xa8
 8009c2e:	723b      	strb	r3, [r7, #8]
 8009c30:	2300      	movs	r3, #0
 8009c32:	727b      	strb	r3, [r7, #9]
 8009c34:	2300      	movs	r3, #0
 8009c36:	72bb      	strb	r3, [r7, #10]
 8009c38:	2323      	movs	r3, #35	; 0x23
 8009c3a:	72fb      	strb	r3, [r7, #11]
 8009c3c:	2388      	movs	r3, #136	; 0x88
 8009c3e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009c40:	f107 0308 	add.w	r3, r7, #8
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff fe4b 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 8009c4a:	23aa      	movs	r3, #170	; 0xaa
 8009c4c:	723b      	strb	r3, [r7, #8]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	727b      	strb	r3, [r7, #9]
 8009c52:	2300      	movs	r3, #0
 8009c54:	72bb      	strb	r3, [r7, #10]
 8009c56:	236e      	movs	r3, #110	; 0x6e
 8009c58:	72fb      	strb	r3, [r7, #11]
 8009c5a:	2320      	movs	r3, #32
 8009c5c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009c5e:	f107 0308 	add.w	r3, r7, #8
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff fe3c 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8009c68:	23ab      	movs	r3, #171	; 0xab
 8009c6a:	723b      	strb	r3, [r7, #8]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	727b      	strb	r3, [r7, #9]
 8009c70:	2300      	movs	r3, #0
 8009c72:	72bb      	strb	r3, [r7, #10]
 8009c74:	2300      	movs	r3, #0
 8009c76:	72fb      	strb	r3, [r7, #11]
 8009c78:	230a      	movs	r3, #10
 8009c7a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009c7c:	f107 0308 	add.w	r3, r7, #8
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fe2d 	bl	80098e0 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 f80b 	bl	8009ca8 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 8009c92:	2064      	movs	r0, #100	; 0x64
 8009c94:	f000 fa42 	bl	800a11c <HAL_Delay>
}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	48000800 	.word	0x48000800
 8009ca4:	000f4240 	.word	0x000f4240

08009ca8 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	71fb      	strb	r3, [r7, #7]
	if(dir < 0)
 8009cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	da13      	bge.n	8009ce2 <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 8009cba:	2300      	movs	r3, #0
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009cc2:	2380      	movs	r3, #128	; 0x80
 8009cc4:	743b      	strb	r3, [r7, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	747b      	strb	r3, [r7, #17]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	74bb      	strb	r3, [r7, #18]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	74fb      	strb	r3, [r7, #19]
 8009cd2:	2314      	movs	r3, #20
 8009cd4:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 8009cd6:	f107 0310 	add.w	r3, r7, #16
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff fe00 	bl	80098e0 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 8009ce0:	e012      	b.n	8009d08 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60bb      	str	r3, [r7, #8]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009cea:	2380      	movs	r3, #128	; 0x80
 8009cec:	723b      	strb	r3, [r7, #8]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	727b      	strb	r3, [r7, #9]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	72bb      	strb	r3, [r7, #10]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	72fb      	strb	r3, [r7, #11]
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009cfe:	f107 0308 	add.w	r3, r7, #8
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fdec 	bl	80098e0 <tmc5160_write>
}
 8009d08:	bf00      	nop
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009d16:	2300      	movs	r3, #0
 8009d18:	607b      	str	r3, [r7, #4]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	723b      	strb	r3, [r7, #8]
	uint32_t pos = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
	//tmc5160_stop();
	pos = tmc5160_position_read();
 8009d22:	f7ff fe33 	bl	800998c <tmc5160_position_read>
 8009d26:	4603      	mov	r3, r0
 8009d28:	60fb      	str	r3, [r7, #12]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 8009d2a:	23a0      	movs	r3, #160	; 0xa0
 8009d2c:	713b      	strb	r3, [r7, #4]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	717b      	strb	r3, [r7, #5]
 8009d32:	2300      	movs	r3, #0
 8009d34:	71bb      	strb	r3, [r7, #6]
 8009d36:	2300      	movs	r3, #0
 8009d38:	71fb      	strb	r3, [r7, #7]
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fdcd 	bl	80098e0 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 8009d46:	23a1      	movs	r3, #161	; 0xa1
 8009d48:	713b      	strb	r3, [r7, #4]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	717b      	strb	r3, [r7, #5]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	71bb      	strb	r3, [r7, #6]
 8009d52:	2300      	movs	r3, #0
 8009d54:	71fb      	strb	r3, [r7, #7]
 8009d56:	2300      	movs	r3, #0
 8009d58:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 8009d5a:	1d3b      	adds	r3, r7, #4
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff fdbf 	bl	80098e0 <tmc5160_write>
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009d70:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d72:	4a23      	ldr	r2, [pc, #140]	; (8009e00 <MX_USART2_UART_Init+0x94>)
 8009d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009d76:	4b21      	ldr	r3, [pc, #132]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009d7e:	4b1f      	ldr	r3, [pc, #124]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009d84:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009d90:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d92:	220c      	movs	r2, #12
 8009d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d96:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d9c:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009da2:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009da8:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009db4:	4811      	ldr	r0, [pc, #68]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009db6:	f004 ff21 	bl	800ebfc <HAL_UART_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009dc0:	f7f8 f8a7 	bl	8001f12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	480d      	ldr	r0, [pc, #52]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009dc8:	f006 f85f 	bl	800fe8a <HAL_UARTEx_SetTxFifoThreshold>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009dd2:	f7f8 f89e 	bl	8001f12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4808      	ldr	r0, [pc, #32]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009dda:	f006 f894 	bl	800ff06 <HAL_UARTEx_SetRxFifoThreshold>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009de4:	f7f8 f895 	bl	8001f12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009de8:	4804      	ldr	r0, [pc, #16]	; (8009dfc <MX_USART2_UART_Init+0x90>)
 8009dea:	f006 f815 	bl	800fe18 <HAL_UARTEx_DisableFifoMode>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009df4:	f7f8 f88d 	bl	8001f12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009df8:	bf00      	nop
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200008b0 	.word	0x200008b0
 8009e00:	40004400 	.word	0x40004400

08009e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b09e      	sub	sp, #120	; 0x78
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009e10:	2200      	movs	r2, #0
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	605a      	str	r2, [r3, #4]
 8009e16:	609a      	str	r2, [r3, #8]
 8009e18:	60da      	str	r2, [r3, #12]
 8009e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009e1c:	f107 0310 	add.w	r3, r7, #16
 8009e20:	2254      	movs	r2, #84	; 0x54
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f00a f87c 	bl	8013f22 <memset>
  if(uartHandle->Instance==USART2)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a23      	ldr	r2, [pc, #140]	; (8009ebc <HAL_UART_MspInit+0xb8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d13e      	bne.n	8009eb2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009e34:	2302      	movs	r3, #2
 8009e36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009e3c:	f107 0310 	add.w	r3, r7, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	f003 fbe3 	bl	800d60c <HAL_RCCEx_PeriphCLKConfig>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009e4c:	f7f8 f861 	bl	8001f12 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009e50:	4b1b      	ldr	r3, [pc, #108]	; (8009ec0 <HAL_UART_MspInit+0xbc>)
 8009e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e54:	4a1a      	ldr	r2, [pc, #104]	; (8009ec0 <HAL_UART_MspInit+0xbc>)
 8009e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8009e5c:	4b18      	ldr	r3, [pc, #96]	; (8009ec0 <HAL_UART_MspInit+0xbc>)
 8009e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e64:	60fb      	str	r3, [r7, #12]
 8009e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e68:	4b15      	ldr	r3, [pc, #84]	; (8009ec0 <HAL_UART_MspInit+0xbc>)
 8009e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6c:	4a14      	ldr	r2, [pc, #80]	; (8009ec0 <HAL_UART_MspInit+0xbc>)
 8009e6e:	f043 0301 	orr.w	r3, r3, #1
 8009e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e74:	4b12      	ldr	r3, [pc, #72]	; (8009ec0 <HAL_UART_MspInit+0xbc>)
 8009e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	60bb      	str	r3, [r7, #8]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009e80:	230c      	movs	r3, #12
 8009e82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e84:	2302      	movs	r3, #2
 8009e86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009e90:	2307      	movs	r3, #7
 8009e92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009e98:	4619      	mov	r1, r3
 8009e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e9e:	f001 f97d 	bl	800b19c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	2026      	movs	r0, #38	; 0x26
 8009ea8:	f000 fa35 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009eac:	2026      	movs	r0, #38	; 0x26
 8009eae:	f000 fa4c 	bl	800a34a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	3778      	adds	r7, #120	; 0x78
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	40004400 	.word	0x40004400
 8009ec0:	40021000 	.word	0x40021000

08009ec4 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2201      	movs	r2, #1
 8009eda:	fa02 f303 	lsl.w	r3, r2, r3
 8009ede:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d010      	beq.n	8009f14 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 8009ef6:	23ff      	movs	r3, #255	; 0xff
 8009ef8:	60bb      	str	r3, [r7, #8]
		res |= x;
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
		return res;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	e000      	b.n	8009f16 <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 8009f14:	687b      	ldr	r3, [r7, #4]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	0000      	movs	r0, r0
 8009f24:	0000      	movs	r0, r0
	...

08009f28 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
	float rads = 0;
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009f50:	ee16 0a90 	vmov	r0, s13
 8009f54:	f7f6 fb20 	bl	8000598 <__aeabi_f2d>
 8009f58:	a30b      	add	r3, pc, #44	; (adr r3, 8009f88 <steps_to_rads+0x60>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7f6 fb73 	bl	8000648 <__aeabi_dmul>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	f7f6 fe65 	bl	8000c38 <__aeabi_d2f>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	60fb      	str	r3, [r7, #12]
	return rads;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	ee07 3a90 	vmov	s15, r3
}
 8009f78:	eeb0 0a67 	vmov.f32	s0, s15
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	f3af 8000 	nop.w
 8009f88:	54442d18 	.word	0x54442d18
 8009f8c:	401921fb 	.word	0x401921fb

08009f90 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f9a:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	ee17 0a90 	vmov	r0, s15
 8009fb6:	f7f6 faef 	bl	8000598 <__aeabi_f2d>
 8009fba:	a309      	add	r3, pc, #36	; (adr r3, 8009fe0 <rad_to_steps+0x50>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 fc6c 	bl	800089c <__aeabi_ddiv>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4619      	mov	r1, r3
 8009fcc:	f7f6 fdec 	bl	8000ba8 <__aeabi_d2iz>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	60fb      	str	r3, [r7, #12]
	return steps;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	54442d18 	.word	0x54442d18
 8009fe4:	401921fb 	.word	0x401921fb

08009fe8 <Reset_Handler>:
 8009fe8:	480d      	ldr	r0, [pc, #52]	; (800a020 <LoopForever+0x2>)
 8009fea:	4685      	mov	sp, r0
 8009fec:	f7ff fab0 	bl	8009550 <SystemInit>
 8009ff0:	480c      	ldr	r0, [pc, #48]	; (800a024 <LoopForever+0x6>)
 8009ff2:	490d      	ldr	r1, [pc, #52]	; (800a028 <LoopForever+0xa>)
 8009ff4:	4a0d      	ldr	r2, [pc, #52]	; (800a02c <LoopForever+0xe>)
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e002      	b.n	800a000 <LoopCopyDataInit>

08009ffa <CopyDataInit>:
 8009ffa:	58d4      	ldr	r4, [r2, r3]
 8009ffc:	50c4      	str	r4, [r0, r3]
 8009ffe:	3304      	adds	r3, #4

0800a000 <LoopCopyDataInit>:
 800a000:	18c4      	adds	r4, r0, r3
 800a002:	428c      	cmp	r4, r1
 800a004:	d3f9      	bcc.n	8009ffa <CopyDataInit>
 800a006:	4a0a      	ldr	r2, [pc, #40]	; (800a030 <LoopForever+0x12>)
 800a008:	4c0a      	ldr	r4, [pc, #40]	; (800a034 <LoopForever+0x16>)
 800a00a:	2300      	movs	r3, #0
 800a00c:	e001      	b.n	800a012 <LoopFillZerobss>

0800a00e <FillZerobss>:
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	3204      	adds	r2, #4

0800a012 <LoopFillZerobss>:
 800a012:	42a2      	cmp	r2, r4
 800a014:	d3fb      	bcc.n	800a00e <FillZerobss>
 800a016:	f00a f843 	bl	80140a0 <__libc_init_array>
 800a01a:	f7f7 fec3 	bl	8001da4 <main>

0800a01e <LoopForever>:
 800a01e:	e7fe      	b.n	800a01e <LoopForever>
 800a020:	20020000 	.word	0x20020000
 800a024:	20000000 	.word	0x20000000
 800a028:	20000240 	.word	0x20000240
 800a02c:	08018ba4 	.word	0x08018ba4
 800a030:	20000240 	.word	0x20000240
 800a034:	20000adc 	.word	0x20000adc

0800a038 <ADC1_2_IRQHandler>:
 800a038:	e7fe      	b.n	800a038 <ADC1_2_IRQHandler>

0800a03a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a044:	2003      	movs	r0, #3
 800a046:	f000 f95b 	bl	800a300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a04a:	200f      	movs	r0, #15
 800a04c:	f000 f80e 	bl	800a06c <HAL_InitTick>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	71fb      	strb	r3, [r7, #7]
 800a05a:	e001      	b.n	800a060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a05c:	f7ff f928 	bl	80092b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a060:	79fb      	ldrb	r3, [r7, #7]

}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a078:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <HAL_InitTick+0x68>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d022      	beq.n	800a0c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a080:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <HAL_InitTick+0x6c>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b13      	ldr	r3, [pc, #76]	; (800a0d4 <HAL_InitTick+0x68>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a08c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a090:	fbb2 f3f3 	udiv	r3, r2, r3
 800a094:	4618      	mov	r0, r3
 800a096:	f000 f966 	bl	800a366 <HAL_SYSTICK_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10f      	bne.n	800a0c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b0f      	cmp	r3, #15
 800a0a4:	d809      	bhi.n	800a0ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ae:	f000 f932 	bl	800a316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a0b2:	4a0a      	ldr	r2, [pc, #40]	; (800a0dc <HAL_InitTick+0x70>)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	e007      	b.n	800a0ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]
 800a0be:	e004      	b.n	800a0ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
 800a0c4:	e001      	b.n	800a0ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20000074 	.word	0x20000074
 800a0d8:	2000006c 	.word	0x2000006c
 800a0dc:	20000070 	.word	0x20000070

0800a0e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <HAL_IncTick+0x1c>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <HAL_IncTick+0x20>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	4a03      	ldr	r2, [pc, #12]	; (800a0fc <HAL_IncTick+0x1c>)
 800a0f0:	6013      	str	r3, [r2, #0]
}
 800a0f2:	bf00      	nop
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	20000944 	.word	0x20000944
 800a100:	20000074 	.word	0x20000074

0800a104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a104:	b480      	push	{r7}
 800a106:	af00      	add	r7, sp, #0
  return uwTick;
 800a108:	4b03      	ldr	r3, [pc, #12]	; (800a118 <HAL_GetTick+0x14>)
 800a10a:	681b      	ldr	r3, [r3, #0]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000944 	.word	0x20000944

0800a11c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a124:	f7ff ffee 	bl	800a104 <HAL_GetTick>
 800a128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d004      	beq.n	800a140 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a136:	4b09      	ldr	r3, [pc, #36]	; (800a15c <HAL_Delay+0x40>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a140:	bf00      	nop
 800a142:	f7ff ffdf 	bl	800a104 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d8f7      	bhi.n	800a142 <HAL_Delay+0x26>
  {
  }
}
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20000074 	.word	0x20000074

0800a160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <__NVIC_SetPriorityGrouping+0x44>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a17c:	4013      	ands	r3, r2
 800a17e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a192:	4a04      	ldr	r2, [pc, #16]	; (800a1a4 <__NVIC_SetPriorityGrouping+0x44>)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	60d3      	str	r3, [r2, #12]
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	e000ed00 	.word	0xe000ed00

0800a1a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <__NVIC_GetPriorityGrouping+0x18>)
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	0a1b      	lsrs	r3, r3, #8
 800a1b2:	f003 0307 	and.w	r3, r3, #7
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	e000ed00 	.word	0xe000ed00

0800a1c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	db0b      	blt.n	800a1ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	f003 021f 	and.w	r2, r3, #31
 800a1dc:	4907      	ldr	r1, [pc, #28]	; (800a1fc <__NVIC_EnableIRQ+0x38>)
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	095b      	lsrs	r3, r3, #5
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	fa00 f202 	lsl.w	r2, r0, r2
 800a1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	e000e100 	.word	0xe000e100

0800a200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a20c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a210:	2b00      	cmp	r3, #0
 800a212:	db0a      	blt.n	800a22a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	b2da      	uxtb	r2, r3
 800a218:	490c      	ldr	r1, [pc, #48]	; (800a24c <__NVIC_SetPriority+0x4c>)
 800a21a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a21e:	0112      	lsls	r2, r2, #4
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	440b      	add	r3, r1
 800a224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a228:	e00a      	b.n	800a240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	4908      	ldr	r1, [pc, #32]	; (800a250 <__NVIC_SetPriority+0x50>)
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	f003 030f 	and.w	r3, r3, #15
 800a236:	3b04      	subs	r3, #4
 800a238:	0112      	lsls	r2, r2, #4
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	440b      	add	r3, r1
 800a23e:	761a      	strb	r2, [r3, #24]
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	e000e100 	.word	0xe000e100
 800a250:	e000ed00 	.word	0xe000ed00

0800a254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a254:	b480      	push	{r7}
 800a256:	b089      	sub	sp, #36	; 0x24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f1c3 0307 	rsb	r3, r3, #7
 800a26e:	2b04      	cmp	r3, #4
 800a270:	bf28      	it	cs
 800a272:	2304      	movcs	r3, #4
 800a274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	3304      	adds	r3, #4
 800a27a:	2b06      	cmp	r3, #6
 800a27c:	d902      	bls.n	800a284 <NVIC_EncodePriority+0x30>
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	3b03      	subs	r3, #3
 800a282:	e000      	b.n	800a286 <NVIC_EncodePriority+0x32>
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a288:	f04f 32ff 	mov.w	r2, #4294967295
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	fa02 f303 	lsl.w	r3, r2, r3
 800a292:	43da      	mvns	r2, r3
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	401a      	ands	r2, r3
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a29c:	f04f 31ff 	mov.w	r1, #4294967295
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a6:	43d9      	mvns	r1, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2ac:	4313      	orrs	r3, r2
         );
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3724      	adds	r7, #36	; 0x24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2cc:	d301      	bcc.n	800a2d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e00f      	b.n	800a2f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2d2:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <SysTick_Config+0x40>)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2da:	210f      	movs	r1, #15
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	f7ff ff8e 	bl	800a200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <SysTick_Config+0x40>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2ea:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <SysTick_Config+0x40>)
 800a2ec:	2207      	movs	r2, #7
 800a2ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	e000e010 	.word	0xe000e010

0800a300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ff29 	bl	800a160 <__NVIC_SetPriorityGrouping>
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b086      	sub	sp, #24
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	4603      	mov	r3, r0
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a324:	f7ff ff40 	bl	800a1a8 <__NVIC_GetPriorityGrouping>
 800a328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	68b9      	ldr	r1, [r7, #8]
 800a32e:	6978      	ldr	r0, [r7, #20]
 800a330:	f7ff ff90 	bl	800a254 <NVIC_EncodePriority>
 800a334:	4602      	mov	r2, r0
 800a336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff ff5f 	bl	800a200 <__NVIC_SetPriority>
}
 800a342:	bf00      	nop
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	4603      	mov	r3, r0
 800a352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff ff33 	bl	800a1c4 <__NVIC_EnableIRQ>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff ffa4 	bl	800a2bc <SysTick_Config>
 800a374:	4603      	mov	r3, r0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e08d      	b.n	800a4ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	4b47      	ldr	r3, [pc, #284]	; (800a4b8 <HAL_DMA_Init+0x138>)
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d80f      	bhi.n	800a3be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4b45      	ldr	r3, [pc, #276]	; (800a4bc <HAL_DMA_Init+0x13c>)
 800a3a6:	4413      	add	r3, r2
 800a3a8:	4a45      	ldr	r2, [pc, #276]	; (800a4c0 <HAL_DMA_Init+0x140>)
 800a3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ae:	091b      	lsrs	r3, r3, #4
 800a3b0:	009a      	lsls	r2, r3, #2
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a42      	ldr	r2, [pc, #264]	; (800a4c4 <HAL_DMA_Init+0x144>)
 800a3ba:	641a      	str	r2, [r3, #64]	; 0x40
 800a3bc:	e00e      	b.n	800a3dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4b40      	ldr	r3, [pc, #256]	; (800a4c8 <HAL_DMA_Init+0x148>)
 800a3c6:	4413      	add	r3, r2
 800a3c8:	4a3d      	ldr	r2, [pc, #244]	; (800a4c0 <HAL_DMA_Init+0x140>)
 800a3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ce:	091b      	lsrs	r3, r3, #4
 800a3d0:	009a      	lsls	r2, r3, #2
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a3c      	ldr	r2, [pc, #240]	; (800a4cc <HAL_DMA_Init+0x14c>)
 800a3da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a40c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	4313      	orrs	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f9cc 	bl	800a7cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a43c:	d102      	bne.n	800a444 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44c:	b2d2      	uxtb	r2, r2
 800a44e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a458:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d010      	beq.n	800a484 <HAL_DMA_Init+0x104>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b04      	cmp	r3, #4
 800a468:	d80c      	bhi.n	800a484 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f9ec 	bl	800a848 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a480:	605a      	str	r2, [r3, #4]
 800a482:	e008      	b.n	800a496 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	40020407 	.word	0x40020407
 800a4bc:	bffdfff8 	.word	0xbffdfff8
 800a4c0:	cccccccd 	.word	0xcccccccd
 800a4c4:	40020000 	.word	0x40020000
 800a4c8:	bffdfbf8 	.word	0xbffdfbf8
 800a4cc:	40020400 	.word	0x40020400

0800a4d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d005      	beq.n	800a4f4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2204      	movs	r2, #4
 800a4ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	73fb      	strb	r3, [r7, #15]
 800a4f2:	e037      	b.n	800a564 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 020e 	bic.w	r2, r2, #14
 800a502:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a50e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a512:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0201 	bic.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a528:	f003 021f 	and.w	r2, r3, #31
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a530:	2101      	movs	r1, #1
 800a532:	fa01 f202 	lsl.w	r2, r1, r2
 800a536:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a540:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00c      	beq.n	800a564 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a558:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a562:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b02      	cmp	r3, #2
 800a598:	d00d      	beq.n	800a5b6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2204      	movs	r2, #4
 800a59e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
 800a5b4:	e047      	b.n	800a646 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 020e 	bic.w	r2, r2, #14
 800a5c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ea:	f003 021f 	and.w	r2, r3, #31
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	fa01 f202 	lsl.w	r2, r1, r2
 800a5f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a602:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00c      	beq.n	800a626 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a61a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a624:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
    }
  }
  return status;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66c:	f003 031f 	and.w	r3, r3, #31
 800a670:	2204      	movs	r2, #4
 800a672:	409a      	lsls	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4013      	ands	r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d026      	beq.n	800a6ca <HAL_DMA_IRQHandler+0x7a>
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d021      	beq.n	800a6ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d107      	bne.n	800a6a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0204 	bic.w	r2, r2, #4
 800a6a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a8:	f003 021f 	and.w	r2, r3, #31
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	fa01 f202 	lsl.w	r2, r1, r2
 800a6b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d071      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a6c8:	e06c      	b.n	800a7a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ce:	f003 031f 	and.w	r3, r3, #31
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	409a      	lsls	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4013      	ands	r3, r2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d02e      	beq.n	800a73c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d029      	beq.n	800a73c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10b      	bne.n	800a70e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 020a 	bic.w	r2, r2, #10
 800a704:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a712:	f003 021f 	and.w	r2, r3, #31
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2102      	movs	r1, #2
 800a71c:	fa01 f202 	lsl.w	r2, r1, r2
 800a720:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d038      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a73a:	e033      	b.n	800a7a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a740:	f003 031f 	and.w	r3, r3, #31
 800a744:	2208      	movs	r2, #8
 800a746:	409a      	lsls	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d02a      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f003 0308 	and.w	r3, r3, #8
 800a756:	2b00      	cmp	r3, #0
 800a758:	d025      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 020e 	bic.w	r2, r2, #14
 800a768:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76e:	f003 021f 	and.w	r2, r3, #31
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	2101      	movs	r1, #1
 800a778:	fa01 f202 	lsl.w	r2, r1, r2
 800a77c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d004      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
}
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a7bc:	b2db      	uxtb	r3, r3
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4b16      	ldr	r3, [pc, #88]	; (800a834 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d802      	bhi.n	800a7e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a7e0:	4b15      	ldr	r3, [pc, #84]	; (800a838 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e001      	b.n	800a7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a7e6:	4b15      	ldr	r3, [pc, #84]	; (800a83c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a7e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	3b08      	subs	r3, #8
 800a7f6:	4a12      	ldr	r2, [pc, #72]	; (800a840 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fc:	091b      	lsrs	r3, r3, #4
 800a7fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a804:	089b      	lsrs	r3, r3, #2
 800a806:	009a      	lsls	r2, r3, #2
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	461a      	mov	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a0b      	ldr	r2, [pc, #44]	; (800a844 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a816:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f003 031f 	and.w	r3, r3, #31
 800a81e:	2201      	movs	r2, #1
 800a820:	409a      	lsls	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	40020407 	.word	0x40020407
 800a838:	40020800 	.word	0x40020800
 800a83c:	40020820 	.word	0x40020820
 800a840:	cccccccd 	.word	0xcccccccd
 800a844:	40020880 	.word	0x40020880

0800a848 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	461a      	mov	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a08      	ldr	r2, [pc, #32]	; (800a88c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a86a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3b01      	subs	r3, #1
 800a870:	f003 031f 	and.w	r3, r3, #31
 800a874:	2201      	movs	r2, #1
 800a876:	409a      	lsls	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a87c:	bf00      	nop
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	1000823f 	.word	0x1000823f
 800a88c:	40020940 	.word	0x40020940

0800a890 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e147      	b.n	800ab32 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7f6 ffce 	bl	8001858 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	699a      	ldr	r2, [r3, #24]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0210 	bic.w	r2, r2, #16
 800a8ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8cc:	f7ff fc1a 	bl	800a104 <HAL_GetTick>
 800a8d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a8d2:	e012      	b.n	800a8fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a8d4:	f7ff fc16 	bl	800a104 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b0a      	cmp	r3, #10
 800a8e0:	d90b      	bls.n	800a8fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8e6:	f043 0201 	orr.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2203      	movs	r2, #3
 800a8f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e11b      	b.n	800ab32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b08      	cmp	r3, #8
 800a906:	d0e5      	beq.n	800a8d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0201 	orr.w	r2, r2, #1
 800a916:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a918:	f7ff fbf4 	bl	800a104 <HAL_GetTick>
 800a91c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a91e:	e012      	b.n	800a946 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a920:	f7ff fbf0 	bl	800a104 <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b0a      	cmp	r3, #10
 800a92c:	d90b      	bls.n	800a946 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a932:	f043 0201 	orr.w	r2, r3, #1
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2203      	movs	r2, #3
 800a93e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e0f5      	b.n	800ab32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0e5      	beq.n	800a920 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	699a      	ldr	r2, [r3, #24]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0202 	orr.w	r2, r2, #2
 800a962:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a74      	ldr	r2, [pc, #464]	; (800ab3c <HAL_FDCAN_Init+0x2ac>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d103      	bne.n	800a976 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800a96e:	4a74      	ldr	r2, [pc, #464]	; (800ab40 <HAL_FDCAN_Init+0x2b0>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7c1b      	ldrb	r3, [r3, #16]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d108      	bne.n	800a990 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	699a      	ldr	r2, [r3, #24]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a98c:	619a      	str	r2, [r3, #24]
 800a98e:	e007      	b.n	800a9a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	699a      	ldr	r2, [r3, #24]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a99e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	7c5b      	ldrb	r3, [r3, #17]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d108      	bne.n	800a9ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	699a      	ldr	r2, [r3, #24]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9b6:	619a      	str	r2, [r3, #24]
 800a9b8:	e007      	b.n	800a9ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	699a      	ldr	r2, [r3, #24]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a9c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	7c9b      	ldrb	r3, [r3, #18]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d108      	bne.n	800a9e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9e0:	619a      	str	r2, [r3, #24]
 800a9e2:	e007      	b.n	800a9f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	699a      	ldr	r2, [r3, #24]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800aa18:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	691a      	ldr	r2, [r3, #16]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 0210 	bic.w	r2, r2, #16
 800aa28:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d108      	bne.n	800aa44 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	699a      	ldr	r2, [r3, #24]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0204 	orr.w	r2, r2, #4
 800aa40:	619a      	str	r2, [r3, #24]
 800aa42:	e02c      	b.n	800aa9e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d028      	beq.n	800aa9e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d01c      	beq.n	800aa8e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa62:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0210 	orr.w	r2, r2, #16
 800aa72:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d110      	bne.n	800aa9e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0220 	orr.w	r2, r2, #32
 800aa8a:	619a      	str	r2, [r3, #24]
 800aa8c:	e007      	b.n	800aa9e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	699a      	ldr	r2, [r3, #24]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0220 	orr.w	r2, r2, #32
 800aa9c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aaae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800aab6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800aac6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aac8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aad2:	d115      	bne.n	800ab00 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aade:	3b01      	subs	r3, #1
 800aae0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aae2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae8:	3b01      	subs	r3, #1
 800aaea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800aaec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800aafc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aafe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa58 	bl	800afcc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	40006400 	.word	0x40006400
 800ab40:	40006500 	.word	0x40006500

0800ab44 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab54:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d002      	beq.n	800ab62 <HAL_FDCAN_ConfigFilter+0x1e>
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d13d      	bne.n	800abde <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d119      	bne.n	800ab9e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800ab76:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800ab7e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800ab84:	4313      	orrs	r3, r2
 800ab86:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	e01d      	b.n	800abda <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	075a      	lsls	r2, r3, #29
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	079a      	lsls	r2, r3, #30
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	4413      	add	r3, r2
 800abc6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	3304      	adds	r3, #4
 800abd2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	e006      	b.n	800abec <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	f043 0202 	orr.w	r2, r3, #2
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
  }
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d116      	bne.n	800ac40 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac1a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	011a      	lsls	r2, r3, #4
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	431a      	orrs	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	431a      	orrs	r2, r3
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	431a      	orrs	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e006      	b.n	800ac4e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac44:	f043 0204 	orr.w	r2, r3, #4
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
  }
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d108      	bne.n	800ac84 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	0219      	lsls	r1, r3, #8
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e006      	b.n	800ac92 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac88:	f043 0204 	orr.w	r2, r3, #4
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
  }
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d109      	bne.n	800acc6 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68da      	ldr	r2, [r3, #12]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800acc0:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e006      	b.n	800acd4 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acca:	f043 0204 	orr.w	r2, r3, #4
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
  }
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d110      	bne.n	800ad16 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f022 0201 	bic.w	r2, r2, #1
 800ad0a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	e006      	b.n	800ad24 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad1a:	f043 0204 	orr.w	r2, r3, #4
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
  }
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d12c      	bne.n	800ada2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ad50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e023      	b.n	800adb0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ad70:	0c1b      	lsrs	r3, r3, #16
 800ad72:	f003 0303 	and.w	r3, r3, #3
 800ad76:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 f990 	bl	800b0a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2101      	movs	r1, #1
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	fa01 f202 	lsl.w	r2, r1, r2
 800ad90:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800ad94:	2201      	movs	r2, #1
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	409a      	lsls	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e006      	b.n	800adb0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ada6:	f043 0208 	orr.w	r2, r3, #8
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
  }
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800adb8:	b480      	push	{r7}
 800adba:	b08b      	sub	sp, #44	; 0x2c
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800adcc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800adce:	7efb      	ldrb	r3, [r7, #27]
 800add0:	2b02      	cmp	r3, #2
 800add2:	f040 80bc 	bne.w	800af4e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b40      	cmp	r3, #64	; 0x40
 800adda:	d121      	bne.n	800ae20 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d107      	bne.n	800adfc <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e0af      	b.n	800af5c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae04:	0a1b      	lsrs	r3, r3, #8
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	4613      	mov	r3, r2
 800ae14:	00db      	lsls	r3, r3, #3
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae1e:	e020      	b.n	800ae62 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d107      	bne.n	800ae40 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e08d      	b.n	800af5c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae48:	0a1b      	lsrs	r3, r3, #8
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae54:	69fa      	ldr	r2, [r7, #28]
 800ae56:	4613      	mov	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	4413      	add	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	440b      	add	r3, r1
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d107      	bne.n	800ae86 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	0c9b      	lsrs	r3, r3, #18
 800ae7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e005      	b.n	800ae92 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	3304      	adds	r3, #4
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	0e1b      	lsrs	r3, r3, #24
 800aee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	0fda      	lsrs	r2, r3, #31
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	3304      	adds	r3, #4
 800aefa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800af00:	2300      	movs	r3, #0
 800af02:	623b      	str	r3, [r7, #32]
 800af04:	e00a      	b.n	800af1c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	441a      	add	r2, r3
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	440b      	add	r3, r1
 800af12:	7812      	ldrb	r2, [r2, #0]
 800af14:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	3301      	adds	r3, #1
 800af1a:	623b      	str	r3, [r7, #32]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	0c1b      	lsrs	r3, r3, #16
 800af22:	4a11      	ldr	r2, [pc, #68]	; (800af68 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800af24:	5cd3      	ldrb	r3, [r2, r3]
 800af26:	461a      	mov	r2, r3
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d3eb      	bcc.n	800af06 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	d105      	bne.n	800af40 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800af3e:	e004      	b.n	800af4a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	69fa      	ldr	r2, [r7, #28]
 800af46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e006      	b.n	800af5c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af52:	f043 0208 	orr.w	r2, r3, #8
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
  }
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	372c      	adds	r7, #44	; 0x2c
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	08018108 	.word	0x08018108

0800af6c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d107      	bne.n	800af8c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af84:	f003 030f 	and.w	r3, r3, #15
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	e006      	b.n	800af9a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af94:	f003 030f 	and.w	r3, r3, #15
 800af98:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800af9a:	68fb      	ldr	r3, [r7, #12]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800afbe:	68fb      	ldr	r3, [r7, #12]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800afd4:	4b30      	ldr	r3, [pc, #192]	; (800b098 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800afd6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a2f      	ldr	r2, [pc, #188]	; (800b09c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d103      	bne.n	800afea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800afe8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a2c      	ldr	r2, [pc, #176]	; (800b0a0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d103      	bne.n	800affc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800affa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b00a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b012:	041a      	lsls	r2, r3, #16
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b030:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	061a      	lsls	r2, r3, #24
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	e005      	b.n	800b07e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3304      	adds	r3, #4
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	429a      	cmp	r2, r3
 800b088:	d3f3      	bcc.n	800b072 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	4000a400 	.word	0x4000a400
 800b09c:	40006800 	.word	0x40006800
 800b0a0:	40006c00 	.word	0x40006c00

0800b0a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b089      	sub	sp, #36	; 0x24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b0c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	61fb      	str	r3, [r7, #28]
 800b0ce:	e00a      	b.n	800b0e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b0d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b0de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b0e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b0f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b0f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b0fc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	00db      	lsls	r3, r3, #3
 800b110:	4413      	add	r3, r2
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	440b      	add	r3, r1
 800b116:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	3304      	adds	r3, #4
 800b122:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	3304      	adds	r3, #4
 800b12e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e020      	b.n	800b178 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	3303      	adds	r3, #3
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	4413      	add	r3, r2
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	3302      	adds	r3, #2
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	440b      	add	r3, r1
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b14e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	3301      	adds	r3, #1
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	440b      	add	r3, r1
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b15c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	440a      	add	r2, r1
 800b164:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b166:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	3304      	adds	r3, #4
 800b170:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	3304      	adds	r3, #4
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	0c1b      	lsrs	r3, r3, #16
 800b17e:	4a06      	ldr	r2, [pc, #24]	; (800b198 <FDCAN_CopyMessageToRAM+0xf4>)
 800b180:	5cd3      	ldrb	r3, [r2, r3]
 800b182:	461a      	mov	r2, r3
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	4293      	cmp	r3, r2
 800b188:	d3d5      	bcc.n	800b136 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800b18a:	bf00      	nop
 800b18c:	bf00      	nop
 800b18e:	3724      	adds	r7, #36	; 0x24
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	08018108 	.word	0x08018108

0800b19c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b1aa:	e15a      	b.n	800b462 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 814c 	beq.w	800b45c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	f003 0303 	and.w	r3, r3, #3
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d005      	beq.n	800b1dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d130      	bne.n	800b23e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	2203      	movs	r2, #3
 800b1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	4313      	orrs	r3, r2
 800b204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b212:	2201      	movs	r2, #1
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	fa02 f303 	lsl.w	r3, r2, r3
 800b21a:	43db      	mvns	r3, r3
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4013      	ands	r3, r2
 800b220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	091b      	lsrs	r3, r3, #4
 800b228:	f003 0201 	and.w	r2, r3, #1
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	fa02 f303 	lsl.w	r3, r2, r3
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4313      	orrs	r3, r2
 800b236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	2b03      	cmp	r3, #3
 800b248:	d017      	beq.n	800b27a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	2203      	movs	r2, #3
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	43db      	mvns	r3, r3
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4013      	ands	r3, r2
 800b260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	fa02 f303 	lsl.w	r3, r2, r3
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	2b02      	cmp	r3, #2
 800b284:	d123      	bne.n	800b2ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	08da      	lsrs	r2, r3, #3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3208      	adds	r2, #8
 800b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	220f      	movs	r2, #15
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	43db      	mvns	r3, r3
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	691a      	ldr	r2, [r3, #16]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	08da      	lsrs	r2, r3, #3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3208      	adds	r2, #8
 800b2c8:	6939      	ldr	r1, [r7, #16]
 800b2ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	2203      	movs	r2, #3
 800b2da:	fa02 f303 	lsl.w	r3, r2, r3
 800b2de:	43db      	mvns	r3, r3
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f003 0203 	and.w	r2, r3, #3
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 80a6 	beq.w	800b45c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b310:	4b5b      	ldr	r3, [pc, #364]	; (800b480 <HAL_GPIO_Init+0x2e4>)
 800b312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b314:	4a5a      	ldr	r2, [pc, #360]	; (800b480 <HAL_GPIO_Init+0x2e4>)
 800b316:	f043 0301 	orr.w	r3, r3, #1
 800b31a:	6613      	str	r3, [r2, #96]	; 0x60
 800b31c:	4b58      	ldr	r3, [pc, #352]	; (800b480 <HAL_GPIO_Init+0x2e4>)
 800b31e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	60bb      	str	r3, [r7, #8]
 800b326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b328:	4a56      	ldr	r2, [pc, #344]	; (800b484 <HAL_GPIO_Init+0x2e8>)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	089b      	lsrs	r3, r3, #2
 800b32e:	3302      	adds	r3, #2
 800b330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f003 0303 	and.w	r3, r3, #3
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	220f      	movs	r2, #15
 800b340:	fa02 f303 	lsl.w	r3, r2, r3
 800b344:	43db      	mvns	r3, r3
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	4013      	ands	r3, r2
 800b34a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b352:	d01f      	beq.n	800b394 <HAL_GPIO_Init+0x1f8>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a4c      	ldr	r2, [pc, #304]	; (800b488 <HAL_GPIO_Init+0x2ec>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d019      	beq.n	800b390 <HAL_GPIO_Init+0x1f4>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a4b      	ldr	r2, [pc, #300]	; (800b48c <HAL_GPIO_Init+0x2f0>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d013      	beq.n	800b38c <HAL_GPIO_Init+0x1f0>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a4a      	ldr	r2, [pc, #296]	; (800b490 <HAL_GPIO_Init+0x2f4>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00d      	beq.n	800b388 <HAL_GPIO_Init+0x1ec>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a49      	ldr	r2, [pc, #292]	; (800b494 <HAL_GPIO_Init+0x2f8>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <HAL_GPIO_Init+0x1e8>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a48      	ldr	r2, [pc, #288]	; (800b498 <HAL_GPIO_Init+0x2fc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d101      	bne.n	800b380 <HAL_GPIO_Init+0x1e4>
 800b37c:	2305      	movs	r3, #5
 800b37e:	e00a      	b.n	800b396 <HAL_GPIO_Init+0x1fa>
 800b380:	2306      	movs	r3, #6
 800b382:	e008      	b.n	800b396 <HAL_GPIO_Init+0x1fa>
 800b384:	2304      	movs	r3, #4
 800b386:	e006      	b.n	800b396 <HAL_GPIO_Init+0x1fa>
 800b388:	2303      	movs	r3, #3
 800b38a:	e004      	b.n	800b396 <HAL_GPIO_Init+0x1fa>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e002      	b.n	800b396 <HAL_GPIO_Init+0x1fa>
 800b390:	2301      	movs	r3, #1
 800b392:	e000      	b.n	800b396 <HAL_GPIO_Init+0x1fa>
 800b394:	2300      	movs	r3, #0
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	f002 0203 	and.w	r2, r2, #3
 800b39c:	0092      	lsls	r2, r2, #2
 800b39e:	4093      	lsls	r3, r2
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b3a6:	4937      	ldr	r1, [pc, #220]	; (800b484 <HAL_GPIO_Init+0x2e8>)
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	089b      	lsrs	r3, r3, #2
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b3b4:	4b39      	ldr	r3, [pc, #228]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	43db      	mvns	r3, r3
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b3d8:	4a30      	ldr	r2, [pc, #192]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b3de:	4b2f      	ldr	r3, [pc, #188]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	43db      	mvns	r3, r3
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b402:	4a26      	ldr	r2, [pc, #152]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b408:	4b24      	ldr	r3, [pc, #144]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	43db      	mvns	r3, r3
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4013      	ands	r3, r2
 800b416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b42c:	4a1b      	ldr	r2, [pc, #108]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b432:	4b1a      	ldr	r3, [pc, #104]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	43db      	mvns	r3, r3
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	4013      	ands	r3, r2
 800b440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4313      	orrs	r3, r2
 800b454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b456:	4a11      	ldr	r2, [pc, #68]	; (800b49c <HAL_GPIO_Init+0x300>)
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	3301      	adds	r3, #1
 800b460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f47f ae9d 	bne.w	800b1ac <HAL_GPIO_Init+0x10>
  }
}
 800b472:	bf00      	nop
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	40021000 	.word	0x40021000
 800b484:	40010000 	.word	0x40010000
 800b488:	48000400 	.word	0x48000400
 800b48c:	48000800 	.word	0x48000800
 800b490:	48000c00 	.word	0x48000c00
 800b494:	48001000 	.word	0x48001000
 800b498:	48001400 	.word	0x48001400
 800b49c:	40010400 	.word	0x40010400

0800b4a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	807b      	strh	r3, [r7, #2]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b4b0:	787b      	ldrb	r3, [r7, #1]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b4b6:	887a      	ldrh	r2, [r7, #2]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b4bc:	e002      	b.n	800b4c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b4be:	887a      	ldrh	r2, [r7, #2]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b4e2:	887a      	ldrh	r2, [r7, #2]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	041a      	lsls	r2, r3, #16
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	43d9      	mvns	r1, r3
 800b4ee:	887b      	ldrh	r3, [r7, #2]
 800b4f0:	400b      	ands	r3, r1
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	619a      	str	r2, [r3, #24]
}
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e08d      	b.n	800b632 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7f6 fad6 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2224      	movs	r2, #36	; 0x24
 800b534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 0201 	bic.w	r2, r2, #1
 800b546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b554:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b564:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d107      	bne.n	800b57e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b57a:	609a      	str	r2, [r3, #8]
 800b57c:	e006      	b.n	800b58c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b58a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d108      	bne.n	800b5a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5a2:	605a      	str	r2, [r3, #4]
 800b5a4:	e007      	b.n	800b5b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	6812      	ldr	r2, [r2, #0]
 800b5c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b5c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68da      	ldr	r2, [r3, #12]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	691a      	ldr	r2, [r3, #16]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	430a      	orrs	r2, r1
 800b5f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	69d9      	ldr	r1, [r3, #28]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a1a      	ldr	r2, [r3, #32]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f042 0201 	orr.w	r2, r2, #1
 800b612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2220      	movs	r2, #32
 800b61e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af02      	add	r7, sp, #8
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	4608      	mov	r0, r1
 800b646:	4611      	mov	r1, r2
 800b648:	461a      	mov	r2, r3
 800b64a:	4603      	mov	r3, r0
 800b64c:	817b      	strh	r3, [r7, #10]
 800b64e:	460b      	mov	r3, r1
 800b650:	813b      	strh	r3, [r7, #8]
 800b652:	4613      	mov	r3, r2
 800b654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b20      	cmp	r3, #32
 800b660:	f040 80fd 	bne.w	800b85e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <HAL_I2C_Mem_Read+0x34>
 800b66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d105      	bne.n	800b67c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e0f1      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b682:	2b01      	cmp	r3, #1
 800b684:	d101      	bne.n	800b68a <HAL_I2C_Mem_Read+0x4e>
 800b686:	2302      	movs	r3, #2
 800b688:	e0ea      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b692:	f7fe fd37 	bl	800a104 <HAL_GetTick>
 800b696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	2319      	movs	r3, #25
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fee4 	bl	800c472 <I2C_WaitOnFlagUntilTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e0d5      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2222      	movs	r2, #34	; 0x22
 800b6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2240      	movs	r2, #64	; 0x40
 800b6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6a3a      	ldr	r2, [r7, #32]
 800b6ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6dc:	88f8      	ldrh	r0, [r7, #6]
 800b6de:	893a      	ldrh	r2, [r7, #8]
 800b6e0:	8979      	ldrh	r1, [r7, #10]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 fa7b 	bl	800bbe8 <I2C_RequestMemoryRead>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d005      	beq.n	800b704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e0ad      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b708:	b29b      	uxth	r3, r3
 800b70a:	2bff      	cmp	r3, #255	; 0xff
 800b70c:	d90e      	bls.n	800b72c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	22ff      	movs	r2, #255	; 0xff
 800b712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	8979      	ldrh	r1, [r7, #10]
 800b71c:	4b52      	ldr	r3, [pc, #328]	; (800b868 <HAL_I2C_Mem_Read+0x22c>)
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f001 f867 	bl	800c7f8 <I2C_TransferConfig>
 800b72a:	e00f      	b.n	800b74c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	8979      	ldrh	r1, [r7, #10]
 800b73e:	4b4a      	ldr	r3, [pc, #296]	; (800b868 <HAL_I2C_Mem_Read+0x22c>)
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f001 f856 	bl	800c7f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	2200      	movs	r2, #0
 800b754:	2104      	movs	r1, #4
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 fe8b 	bl	800c472 <I2C_WaitOnFlagUntilTimeout>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e07c      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78e:	b29b      	uxth	r3, r3
 800b790:	3b01      	subs	r3, #1
 800b792:	b29a      	uxth	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d034      	beq.n	800b80c <HAL_I2C_Mem_Read+0x1d0>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d130      	bne.n	800b80c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2180      	movs	r1, #128	; 0x80
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fe5c 	bl	800c472 <I2C_WaitOnFlagUntilTimeout>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e04d      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	2bff      	cmp	r3, #255	; 0xff
 800b7cc:	d90e      	bls.n	800b7ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	22ff      	movs	r2, #255	; 0xff
 800b7d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	8979      	ldrh	r1, [r7, #10]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f001 f807 	bl	800c7f8 <I2C_TransferConfig>
 800b7ea:	e00f      	b.n	800b80c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	8979      	ldrh	r1, [r7, #10]
 800b7fe:	2300      	movs	r3, #0
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fff6 	bl	800c7f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b810:	b29b      	uxth	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d19a      	bne.n	800b74c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 fec9 	bl	800c5b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e01a      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2220      	movs	r2, #32
 800b830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6859      	ldr	r1, [r3, #4]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <HAL_I2C_Mem_Read+0x230>)
 800b83e:	400b      	ands	r3, r1
 800b840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2220      	movs	r2, #32
 800b846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	e000      	b.n	800b860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b85e:	2302      	movs	r3, #2
  }
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	80002400 	.word	0x80002400
 800b86c:	fe00e800 	.word	0xfe00e800

0800b870 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	68f9      	ldr	r1, [r7, #12]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	4798      	blx	r3
  }
}
 800b89c:	bf00      	nop
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00f      	beq.n	800b8e6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00a      	beq.n	800b8e6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d4:	f043 0201 	orr.w	r2, r3, #1
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00f      	beq.n	800b910 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fe:	f043 0208 	orr.w	r2, r3, #8
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b90e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00f      	beq.n	800b93a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b928:	f043 0202 	orr.w	r2, r3, #2
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b938:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f003 030b 	and.w	r3, r3, #11
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fc37 	bl	800c1c0 <I2C_ITError>
  }
}
 800b952:	bf00      	nop
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b083      	sub	sp, #12
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b962:	bf00      	nop
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	70fb      	strb	r3, [r7, #3]
 800b98e:	4613      	mov	r3, r2
 800b990:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b9a6:	bf00      	nop
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b9ba:	bf00      	nop
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b083      	sub	sp, #12
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b9ce:	bf00      	nop
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9e8:	b2db      	uxtb	r3, r3
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b086      	sub	sp, #24
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d101      	bne.n	800ba1a <I2C_Slave_ISR_IT+0x24>
 800ba16:	2302      	movs	r3, #2
 800ba18:	e0e2      	b.n	800bbe0 <I2C_Slave_ISR_IT+0x1ea>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d009      	beq.n	800ba40 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ba36:	6939      	ldr	r1, [r7, #16]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 fa09 	bl	800be50 <I2C_ITSlaveCplt>
 800ba3e:	e0ca      	b.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f003 0310 	and.w	r3, r3, #16
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d04b      	beq.n	800bae2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d046      	beq.n	800bae2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d128      	bne.n	800bab0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b28      	cmp	r3, #40	; 0x28
 800ba68:	d108      	bne.n	800ba7c <I2C_Slave_ISR_IT+0x86>
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba70:	d104      	bne.n	800ba7c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba72:	6939      	ldr	r1, [r7, #16]
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 fb4f 	bl	800c118 <I2C_ITListenCplt>
 800ba7a:	e031      	b.n	800bae0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b29      	cmp	r3, #41	; 0x29
 800ba86:	d10e      	bne.n	800baa6 <I2C_Slave_ISR_IT+0xb0>
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba8e:	d00a      	beq.n	800baa6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2210      	movs	r2, #16
 800ba96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 fca8 	bl	800c3ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 f97a 	bl	800bd98 <I2C_ITSlaveSeqCplt>
 800baa4:	e01c      	b.n	800bae0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2210      	movs	r2, #16
 800baac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800baae:	e08f      	b.n	800bbd0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2210      	movs	r2, #16
 800bab6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800babc:	f043 0204 	orr.w	r2, r3, #4
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <I2C_Slave_ISR_IT+0xdc>
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bad0:	d17e      	bne.n	800bbd0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f000 fb71 	bl	800c1c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bade:	e077      	b.n	800bbd0 <I2C_Slave_ISR_IT+0x1da>
 800bae0:	e076      	b.n	800bbd0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d02f      	beq.n	800bb4c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d02a      	beq.n	800bb4c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d018      	beq.n	800bb32 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d14b      	bne.n	800bbd4 <I2C_Slave_ISR_IT+0x1de>
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb42:	d047      	beq.n	800bbd4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 f927 	bl	800bd98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bb4a:	e043      	b.n	800bbd4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d004      	beq.n	800bb6a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bb60:	6939      	ldr	r1, [r7, #16]
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 f894 	bl	800bc90 <I2C_ITAddrCplt>
 800bb68:	e035      	b.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d030      	beq.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d02b      	beq.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d018      	beq.n	800bbba <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8c:	781a      	ldrb	r2, [r3, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	1c5a      	adds	r2, r3, #1
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	851a      	strh	r2, [r3, #40]	; 0x28
 800bbb8:	e00d      	b.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbc0:	d002      	beq.n	800bbc8 <I2C_Slave_ISR_IT+0x1d2>
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f8e5 	bl	800bd98 <I2C_ITSlaveSeqCplt>
 800bbce:	e002      	b.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800bbd0:	bf00      	nop
 800bbd2:	e000      	b.n	800bbd6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800bbd4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af02      	add	r7, sp, #8
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	817b      	strh	r3, [r7, #10]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	813b      	strh	r3, [r7, #8]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bc02:	88fb      	ldrh	r3, [r7, #6]
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	8979      	ldrh	r1, [r7, #10]
 800bc08:	4b20      	ldr	r3, [pc, #128]	; (800bc8c <I2C_RequestMemoryRead+0xa4>)
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 fdf2 	bl	800c7f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc14:	69fa      	ldr	r2, [r7, #28]
 800bc16:	69b9      	ldr	r1, [r7, #24]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 fc83 	bl	800c524 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e02c      	b.n	800bc82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc28:	88fb      	ldrh	r3, [r7, #6]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d105      	bne.n	800bc3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc2e:	893b      	ldrh	r3, [r7, #8]
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	629a      	str	r2, [r3, #40]	; 0x28
 800bc38:	e015      	b.n	800bc66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bc3a:	893b      	ldrh	r3, [r7, #8]
 800bc3c:	0a1b      	lsrs	r3, r3, #8
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc48:	69fa      	ldr	r2, [r7, #28]
 800bc4a:	69b9      	ldr	r1, [r7, #24]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fc69 	bl	800c524 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e012      	b.n	800bc82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc5c:	893b      	ldrh	r3, [r7, #8]
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2140      	movs	r1, #64	; 0x40
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fbfe 	bl	800c472 <I2C_WaitOnFlagUntilTimeout>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e000      	b.n	800bc82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	80002000 	.word	0x80002000

0800bc90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bca6:	2b28      	cmp	r3, #40	; 0x28
 800bca8:	d16a      	bne.n	800bd80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	0c1b      	lsrs	r3, r3, #16
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	0c1b      	lsrs	r3, r3, #16
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bcc8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcd6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bce4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d138      	bne.n	800bd60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800bcee:	897b      	ldrh	r3, [r7, #10]
 800bcf0:	09db      	lsrs	r3, r3, #7
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	89bb      	ldrh	r3, [r7, #12]
 800bcf6:	4053      	eors	r3, r2
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f003 0306 	and.w	r3, r3, #6
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d11c      	bne.n	800bd3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bd02:	897b      	ldrh	r3, [r7, #10]
 800bd04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d13b      	bne.n	800bd90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2208      	movs	r2, #8
 800bd24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bd2e:	89ba      	ldrh	r2, [r7, #12]
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff fe24 	bl	800b982 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bd3a:	e029      	b.n	800bd90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bd3c:	893b      	ldrh	r3, [r7, #8]
 800bd3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bd40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fd89 	bl	800c85c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bd52:	89ba      	ldrh	r2, [r7, #12]
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fe12 	bl	800b982 <HAL_I2C_AddrCallback>
}
 800bd5e:	e017      	b.n	800bd90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bd60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fd79 	bl	800c85c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bd72:	89ba      	ldrh	r2, [r7, #12]
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff fe02 	bl	800b982 <HAL_I2C_AddrCallback>
}
 800bd7e:	e007      	b.n	800bd90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2208      	movs	r2, #8
 800bd86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bd90:	bf00      	nop
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d008      	beq.n	800bdcc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	e00c      	b.n	800bde6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d007      	beq.n	800bde6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bde4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	2b29      	cmp	r3, #41	; 0x29
 800bdf0:	d112      	bne.n	800be18 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2228      	movs	r2, #40	; 0x28
 800bdf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2221      	movs	r2, #33	; 0x21
 800bdfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800be00:	2101      	movs	r1, #1
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fd2a 	bl	800c85c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff fda2 	bl	800b95a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800be16:	e017      	b.n	800be48 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b2a      	cmp	r3, #42	; 0x2a
 800be22:	d111      	bne.n	800be48 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2228      	movs	r2, #40	; 0x28
 800be28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2222      	movs	r2, #34	; 0x22
 800be30:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800be32:	2102      	movs	r1, #2
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fd11 	bl	800c85c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7ff fd93 	bl	800b96e <HAL_I2C_SlaveRxCpltCallback>
}
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be72:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2220      	movs	r2, #32
 800be7a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800be7c:	7afb      	ldrb	r3, [r7, #11]
 800be7e:	2b21      	cmp	r3, #33	; 0x21
 800be80:	d002      	beq.n	800be88 <I2C_ITSlaveCplt+0x38>
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	2b29      	cmp	r3, #41	; 0x29
 800be86:	d108      	bne.n	800be9a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800be88:	f248 0101 	movw	r1, #32769	; 0x8001
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fce5 	bl	800c85c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2221      	movs	r2, #33	; 0x21
 800be96:	631a      	str	r2, [r3, #48]	; 0x30
 800be98:	e019      	b.n	800bece <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800be9a:	7afb      	ldrb	r3, [r7, #11]
 800be9c:	2b22      	cmp	r3, #34	; 0x22
 800be9e:	d002      	beq.n	800bea6 <I2C_ITSlaveCplt+0x56>
 800bea0:	7afb      	ldrb	r3, [r7, #11]
 800bea2:	2b2a      	cmp	r3, #42	; 0x2a
 800bea4:	d108      	bne.n	800beb8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bea6:	f248 0102 	movw	r1, #32770	; 0x8002
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fcd6 	bl	800c85c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2222      	movs	r2, #34	; 0x22
 800beb4:	631a      	str	r2, [r3, #48]	; 0x30
 800beb6:	e00a      	b.n	800bece <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800beb8:	7afb      	ldrb	r3, [r7, #11]
 800beba:	2b28      	cmp	r3, #40	; 0x28
 800bebc:	d107      	bne.n	800bece <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800bebe:	f248 0103 	movw	r1, #32771	; 0x8003
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcca 	bl	800c85c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bedc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6859      	ldr	r1, [r3, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	4b89      	ldr	r3, [pc, #548]	; (800c110 <I2C_ITSlaveCplt+0x2c0>)
 800beea:	400b      	ands	r3, r1
 800beec:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa7d 	bl	800c3ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d013      	beq.n	800bf26 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf0c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01f      	beq.n	800bf56 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf24:	e017      	b.n	800bf56 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d012      	beq.n	800bf56 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf3e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d020      	beq.n	800bfa2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f023 0304 	bic.w	r3, r3, #4
 800bf66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00c      	beq.n	800bfa2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d005      	beq.n	800bfb8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb0:	f043 0204 	orr.w	r2, r3, #4
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f003 0310 	and.w	r3, r3, #16
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d049      	beq.n	800c056 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d044      	beq.n	800c056 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d128      	bne.n	800c028 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b28      	cmp	r3, #40	; 0x28
 800bfe0:	d108      	bne.n	800bff4 <I2C_ITSlaveCplt+0x1a4>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfe8:	d104      	bne.n	800bff4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bfea:	6979      	ldr	r1, [r7, #20]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f893 	bl	800c118 <I2C_ITListenCplt>
 800bff2:	e030      	b.n	800c056 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b29      	cmp	r3, #41	; 0x29
 800bffe:	d10e      	bne.n	800c01e <I2C_ITSlaveCplt+0x1ce>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c006:	d00a      	beq.n	800c01e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2210      	movs	r2, #16
 800c00e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f9ec 	bl	800c3ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7ff febe 	bl	800bd98 <I2C_ITSlaveSeqCplt>
 800c01c:	e01b      	b.n	800c056 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2210      	movs	r2, #16
 800c024:	61da      	str	r2, [r3, #28]
 800c026:	e016      	b.n	800c056 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2210      	movs	r2, #16
 800c02e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c034:	f043 0204 	orr.w	r2, r3, #4
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <I2C_ITSlaveCplt+0x1fa>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c048:	d105      	bne.n	800c056 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f8b5 	bl	800c1c0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d010      	beq.n	800c08e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f8a4 	bl	800c1c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b28      	cmp	r3, #40	; 0x28
 800c082:	d141      	bne.n	800c108 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c084:	6979      	ldr	r1, [r7, #20]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f846 	bl	800c118 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c08c:	e03c      	b.n	800c108 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c092:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c096:	d014      	beq.n	800c0c2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff fe7d 	bl	800bd98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a1c      	ldr	r2, [pc, #112]	; (800c114 <I2C_ITSlaveCplt+0x2c4>)
 800c0a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7ff fc6f 	bl	800b99e <HAL_I2C_ListenCpltCallback>
}
 800c0c0:	e022      	b.n	800c108 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b22      	cmp	r3, #34	; 0x22
 800c0cc:	d10e      	bne.n	800c0ec <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7ff fc42 	bl	800b96e <HAL_I2C_SlaveRxCpltCallback>
}
 800c0ea:	e00d      	b.n	800c108 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fc29 	bl	800b95a <HAL_I2C_SlaveTxCpltCallback>
}
 800c108:	bf00      	nop
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	fe00e800 	.word	0xfe00e800
 800c114:	ffff0000 	.word	0xffff0000

0800c118 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a25      	ldr	r2, [pc, #148]	; (800c1bc <I2C_ITListenCplt+0xa4>)
 800c126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2220      	movs	r2, #32
 800c132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d022      	beq.n	800c194 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d012      	beq.n	800c194 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c172:	3b01      	subs	r3, #1
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c17e:	b29b      	uxth	r3, r3
 800c180:	3b01      	subs	r3, #1
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c18c:	f043 0204 	orr.w	r2, r3, #4
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c194:	f248 0103 	movw	r1, #32771	; 0x8003
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb5f 	bl	800c85c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2210      	movs	r2, #16
 800c1a4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff fbf5 	bl	800b99e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c1b4:	bf00      	nop
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	ffff0000 	.word	0xffff0000

0800c1c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a6d      	ldr	r2, [pc, #436]	; (800c394 <I2C_ITError+0x1d4>)
 800c1de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	2b28      	cmp	r3, #40	; 0x28
 800c1f6:	d005      	beq.n	800c204 <I2C_ITError+0x44>
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	2b29      	cmp	r3, #41	; 0x29
 800c1fc:	d002      	beq.n	800c204 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
 800c200:	2b2a      	cmp	r3, #42	; 0x2a
 800c202:	d10b      	bne.n	800c21c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c204:	2103      	movs	r1, #3
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fb28 	bl	800c85c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2228      	movs	r2, #40	; 0x28
 800c210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a60      	ldr	r2, [pc, #384]	; (800c398 <I2C_ITError+0x1d8>)
 800c218:	635a      	str	r2, [r3, #52]	; 0x34
 800c21a:	e030      	b.n	800c27e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c21c:	f248 0103 	movw	r1, #32771	; 0x8003
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fb1b 	bl	800c85c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f8e1 	bl	800c3ee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b60      	cmp	r3, #96	; 0x60
 800c236:	d01f      	beq.n	800c278 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2220      	movs	r2, #32
 800c23c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	f003 0320 	and.w	r3, r3, #32
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	d114      	bne.n	800c278 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	f003 0310 	and.w	r3, r3, #16
 800c258:	2b10      	cmp	r3, #16
 800c25a:	d109      	bne.n	800c270 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2210      	movs	r2, #16
 800c262:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c268:	f043 0204 	orr.w	r2, r3, #4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2220      	movs	r2, #32
 800c276:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c282:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d039      	beq.n	800c300 <I2C_ITError+0x140>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b11      	cmp	r3, #17
 800c290:	d002      	beq.n	800c298 <I2C_ITError+0xd8>
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b21      	cmp	r3, #33	; 0x21
 800c296:	d133      	bne.n	800c300 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2a6:	d107      	bne.n	800c2b8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c2b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe fa76 	bl	800a7ae <HAL_DMA_GetState>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d017      	beq.n	800c2f8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	4a33      	ldr	r2, [pc, #204]	; (800c39c <I2C_ITError+0x1dc>)
 800c2ce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fe f950 	bl	800a582 <HAL_DMA_Abort_IT>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d04d      	beq.n	800c384 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c2f6:	e045      	b.n	800c384 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f851 	bl	800c3a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c2fe:	e041      	b.n	800c384 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d039      	beq.n	800c37c <I2C_ITError+0x1bc>
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b12      	cmp	r3, #18
 800c30c:	d002      	beq.n	800c314 <I2C_ITError+0x154>
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2b22      	cmp	r3, #34	; 0x22
 800c312:	d133      	bne.n	800c37c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c322:	d107      	bne.n	800c334 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c332:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe fa38 	bl	800a7ae <HAL_DMA_GetState>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b01      	cmp	r3, #1
 800c342:	d017      	beq.n	800c374 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c348:	4a14      	ldr	r2, [pc, #80]	; (800c39c <I2C_ITError+0x1dc>)
 800c34a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fe f912 	bl	800a582 <HAL_DMA_Abort_IT>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d011      	beq.n	800c388 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c36e:	4610      	mov	r0, r2
 800c370:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c372:	e009      	b.n	800c388 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f813 	bl	800c3a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c37a:	e005      	b.n	800c388 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f80f 	bl	800c3a0 <I2C_TreatErrorCallback>
  }
}
 800c382:	e002      	b.n	800c38a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c384:	bf00      	nop
 800c386:	e000      	b.n	800c38a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c388:	bf00      	nop
}
 800c38a:	bf00      	nop
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	ffff0000 	.word	0xffff0000
 800c398:	0800b9f7 	.word	0x0800b9f7
 800c39c:	0800c437 	.word	0x0800c437

0800c3a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b60      	cmp	r3, #96	; 0x60
 800c3b2:	d10e      	bne.n	800c3d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fafb 	bl	800b9c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c3d0:	e009      	b.n	800c3e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff fae6 	bl	800b9b2 <HAL_I2C_ErrorCallback>
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b083      	sub	sp, #12
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b02      	cmp	r3, #2
 800c402:	d103      	bne.n	800c40c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2200      	movs	r2, #0
 800c40a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	2b01      	cmp	r3, #1
 800c418:	d007      	beq.n	800c42a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	699a      	ldr	r2, [r3, #24]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f042 0201 	orr.w	r2, r2, #1
 800c428:	619a      	str	r2, [r3, #24]
  }
}
 800c42a:	bf00      	nop
 800c42c:	370c      	adds	r7, #12
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c442:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	2200      	movs	r2, #0
 800c452:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c460:	2200      	movs	r2, #0
 800c462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff ff9b 	bl	800c3a0 <I2C_TreatErrorCallback>
}
 800c46a:	bf00      	nop
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	60f8      	str	r0, [r7, #12]
 800c47a:	60b9      	str	r1, [r7, #8]
 800c47c:	603b      	str	r3, [r7, #0]
 800c47e:	4613      	mov	r3, r2
 800c480:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c482:	e03b      	b.n	800c4fc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	6839      	ldr	r1, [r7, #0]
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 f8d5 	bl	800c638 <I2C_IsErrorOccurred>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e041      	b.n	800c51c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49e:	d02d      	beq.n	800c4fc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4a0:	f7fd fe30 	bl	800a104 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d302      	bcc.n	800c4b6 <I2C_WaitOnFlagUntilTimeout+0x44>
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d122      	bne.n	800c4fc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	699a      	ldr	r2, [r3, #24]
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	bf0c      	ite	eq
 800c4c6:	2301      	moveq	r3, #1
 800c4c8:	2300      	movne	r3, #0
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d113      	bne.n	800c4fc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d8:	f043 0220 	orr.w	r2, r3, #32
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e00f      	b.n	800c51c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	699a      	ldr	r2, [r3, #24]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	4013      	ands	r3, r2
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	429a      	cmp	r2, r3
 800c50a:	bf0c      	ite	eq
 800c50c:	2301      	moveq	r3, #1
 800c50e:	2300      	movne	r3, #0
 800c510:	b2db      	uxtb	r3, r3
 800c512:	461a      	mov	r2, r3
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	429a      	cmp	r2, r3
 800c518:	d0b4      	beq.n	800c484 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c530:	e033      	b.n	800c59a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	68b9      	ldr	r1, [r7, #8]
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 f87e 	bl	800c638 <I2C_IsErrorOccurred>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e031      	b.n	800c5aa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54c:	d025      	beq.n	800c59a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c54e:	f7fd fdd9 	bl	800a104 <HAL_GetTick>
 800c552:	4602      	mov	r2, r0
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d302      	bcc.n	800c564 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d11a      	bne.n	800c59a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d013      	beq.n	800c59a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c576:	f043 0220 	orr.w	r2, r3, #32
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2220      	movs	r2, #32
 800c582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e007      	b.n	800c5aa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d1c4      	bne.n	800c532 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5be:	e02f      	b.n	800c620 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 f837 	bl	800c638 <I2C_IsErrorOccurred>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e02d      	b.n	800c630 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5d4:	f7fd fd96 	bl	800a104 <HAL_GetTick>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d302      	bcc.n	800c5ea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d11a      	bne.n	800c620 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b20      	cmp	r3, #32
 800c5f6:	d013      	beq.n	800c620 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fc:	f043 0220 	orr.w	r2, r3, #32
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2220      	movs	r2, #32
 800c608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e007      	b.n	800c630 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	f003 0320 	and.w	r3, r3, #32
 800c62a:	2b20      	cmp	r3, #32
 800c62c:	d1c8      	bne.n	800c5c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	f003 0310 	and.w	r3, r3, #16
 800c660:	2b00      	cmp	r3, #0
 800c662:	d068      	beq.n	800c736 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2210      	movs	r2, #16
 800c66a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c66c:	e049      	b.n	800c702 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c674:	d045      	beq.n	800c702 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c676:	f7fd fd45 	bl	800a104 <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	429a      	cmp	r2, r3
 800c684:	d302      	bcc.n	800c68c <I2C_IsErrorOccurred+0x54>
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d13a      	bne.n	800c702 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c696:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c69e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6ae:	d121      	bne.n	800c6f4 <I2C_IsErrorOccurred+0xbc>
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6b6:	d01d      	beq.n	800c6f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c6b8:	7cfb      	ldrb	r3, [r7, #19]
 800c6ba:	2b20      	cmp	r3, #32
 800c6bc:	d01a      	beq.n	800c6f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c6ce:	f7fd fd19 	bl	800a104 <HAL_GetTick>
 800c6d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6d4:	e00e      	b.n	800c6f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c6d6:	f7fd fd15 	bl	800a104 <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b19      	cmp	r3, #25
 800c6e2:	d907      	bls.n	800c6f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
 800c6e6:	f043 0320 	orr.w	r3, r3, #32
 800c6ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c6f2:	e006      	b.n	800c702 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	f003 0320 	and.w	r3, r3, #32
 800c6fe:	2b20      	cmp	r3, #32
 800c700:	d1e9      	bne.n	800c6d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	f003 0320 	and.w	r3, r3, #32
 800c70c:	2b20      	cmp	r3, #32
 800c70e:	d003      	beq.n	800c718 <I2C_IsErrorOccurred+0xe0>
 800c710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0aa      	beq.n	800c66e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d103      	bne.n	800c728 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2220      	movs	r2, #32
 800c726:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	f043 0304 	orr.w	r3, r3, #4
 800c72e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00b      	beq.n	800c760 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	f043 0301 	orr.w	r3, r3, #1
 800c74e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00b      	beq.n	800c782 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	f043 0308 	orr.w	r3, r3, #8
 800c770:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c77a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00b      	beq.n	800c7a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	f043 0302 	orr.w	r3, r3, #2
 800c792:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c79c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01c      	beq.n	800c7e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff fe1e 	bl	800c3ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6859      	ldr	r1, [r3, #4]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <I2C_IsErrorOccurred+0x1bc>)
 800c7be:	400b      	ands	r3, r1
 800c7c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3728      	adds	r7, #40	; 0x28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	fe00e800 	.word	0xfe00e800

0800c7f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	817b      	strh	r3, [r7, #10]
 800c806:	4613      	mov	r3, r2
 800c808:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c80a:	897b      	ldrh	r3, [r7, #10]
 800c80c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c810:	7a7b      	ldrb	r3, [r7, #9]
 800c812:	041b      	lsls	r3, r3, #16
 800c814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c818:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	4313      	orrs	r3, r2
 800c822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c826:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	0d5b      	lsrs	r3, r3, #21
 800c832:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c836:	4b08      	ldr	r3, [pc, #32]	; (800c858 <I2C_TransferConfig+0x60>)
 800c838:	430b      	orrs	r3, r1
 800c83a:	43db      	mvns	r3, r3
 800c83c:	ea02 0103 	and.w	r1, r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	430a      	orrs	r2, r1
 800c848:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c84a:	bf00      	nop
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	03ff63ff 	.word	0x03ff63ff

0800c85c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c868:	2300      	movs	r3, #0
 800c86a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c86c:	887b      	ldrh	r3, [r7, #2]
 800c86e:	f003 0301 	and.w	r3, r3, #1
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00f      	beq.n	800c896 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800c87c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c884:	b2db      	uxtb	r3, r3
 800c886:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c88a:	2b28      	cmp	r3, #40	; 0x28
 800c88c:	d003      	beq.n	800c896 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c894:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c896:	887b      	ldrh	r3, [r7, #2]
 800c898:	f003 0302 	and.w	r3, r3, #2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00f      	beq.n	800c8c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800c8a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c8b4:	2b28      	cmp	r3, #40	; 0x28
 800c8b6:	d003      	beq.n	800c8c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c8be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c8c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	da03      	bge.n	800c8d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c8ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c8d0:	887b      	ldrh	r3, [r7, #2]
 800c8d2:	2b10      	cmp	r3, #16
 800c8d4:	d103      	bne.n	800c8de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c8dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c8de:	887b      	ldrh	r3, [r7, #2]
 800c8e0:	2b20      	cmp	r3, #32
 800c8e2:	d103      	bne.n	800c8ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f043 0320 	orr.w	r3, r3, #32
 800c8ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c8ec:	887b      	ldrh	r3, [r7, #2]
 800c8ee:	2b40      	cmp	r3, #64	; 0x40
 800c8f0:	d103      	bne.n	800c8fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6819      	ldr	r1, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	43da      	mvns	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	400a      	ands	r2, r1
 800c90a:	601a      	str	r2, [r3, #0]
}
 800c90c:	bf00      	nop
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b20      	cmp	r3, #32
 800c92c:	d138      	bne.n	800c9a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c938:	2302      	movs	r3, #2
 800c93a:	e032      	b.n	800c9a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2224      	movs	r2, #36	; 0x24
 800c948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f022 0201 	bic.w	r2, r2, #1
 800c95a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c96a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6819      	ldr	r1, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f042 0201 	orr.w	r2, r2, #1
 800c98a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2220      	movs	r2, #32
 800c990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	e000      	b.n	800c9a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c9a0:	2302      	movs	r3, #2
  }
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b085      	sub	sp, #20
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b20      	cmp	r3, #32
 800c9c2:	d139      	bne.n	800ca38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d101      	bne.n	800c9d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	e033      	b.n	800ca3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2224      	movs	r2, #36	; 0x24
 800c9de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 0201 	bic.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ca00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	021b      	lsls	r3, r3, #8
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f042 0201 	orr.w	r2, r2, #1
 800ca22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2220      	movs	r2, #32
 800ca28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	e000      	b.n	800ca3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ca38:	2302      	movs	r3, #2
  }
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
	...

0800ca48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d141      	bne.n	800cada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ca56:	4b4b      	ldr	r3, [pc, #300]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca62:	d131      	bne.n	800cac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ca64:	4b47      	ldr	r3, [pc, #284]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca6a:	4a46      	ldr	r2, [pc, #280]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ca74:	4b43      	ldr	r3, [pc, #268]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ca7c:	4a41      	ldr	r2, [pc, #260]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ca84:	4b40      	ldr	r3, [pc, #256]	; (800cb88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2232      	movs	r2, #50	; 0x32
 800ca8a:	fb02 f303 	mul.w	r3, r2, r3
 800ca8e:	4a3f      	ldr	r2, [pc, #252]	; (800cb8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ca90:	fba2 2303 	umull	r2, r3, r2, r3
 800ca94:	0c9b      	lsrs	r3, r3, #18
 800ca96:	3301      	adds	r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca9a:	e002      	b.n	800caa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800caa2:	4b38      	ldr	r3, [pc, #224]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caae:	d102      	bne.n	800cab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1f2      	bne.n	800ca9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cab6:	4b33      	ldr	r3, [pc, #204]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cabe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cac2:	d158      	bne.n	800cb76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cac4:	2303      	movs	r3, #3
 800cac6:	e057      	b.n	800cb78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cac8:	4b2e      	ldr	r3, [pc, #184]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cace:	4a2d      	ldr	r2, [pc, #180]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cad8:	e04d      	b.n	800cb76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cae0:	d141      	bne.n	800cb66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cae2:	4b28      	ldr	r3, [pc, #160]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800caea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caee:	d131      	bne.n	800cb54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800caf0:	4b24      	ldr	r3, [pc, #144]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caf6:	4a23      	ldr	r2, [pc, #140]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cafc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cb00:	4b20      	ldr	r3, [pc, #128]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cb08:	4a1e      	ldr	r2, [pc, #120]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cb10:	4b1d      	ldr	r3, [pc, #116]	; (800cb88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2232      	movs	r2, #50	; 0x32
 800cb16:	fb02 f303 	mul.w	r3, r2, r3
 800cb1a:	4a1c      	ldr	r2, [pc, #112]	; (800cb8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cb1c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb20:	0c9b      	lsrs	r3, r3, #18
 800cb22:	3301      	adds	r3, #1
 800cb24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb26:	e002      	b.n	800cb2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb2e:	4b15      	ldr	r3, [pc, #84]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb3a:	d102      	bne.n	800cb42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f2      	bne.n	800cb28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cb42:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb4e:	d112      	bne.n	800cb76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cb50:	2303      	movs	r3, #3
 800cb52:	e011      	b.n	800cb78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb54:	4b0b      	ldr	r3, [pc, #44]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb5a:	4a0a      	ldr	r2, [pc, #40]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cb64:	e007      	b.n	800cb76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cb66:	4b07      	ldr	r3, [pc, #28]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cb6e:	4a05      	ldr	r2, [pc, #20]	; (800cb84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	40007000 	.word	0x40007000
 800cb88:	2000006c 	.word	0x2000006c
 800cb8c:	431bde83 	.word	0x431bde83

0800cb90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800cb90:	b480      	push	{r7}
 800cb92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800cb94:	4b05      	ldr	r3, [pc, #20]	; (800cbac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	4a04      	ldr	r2, [pc, #16]	; (800cbac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cb9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb9e:	6093      	str	r3, [r2, #8]
}
 800cba0:	bf00      	nop
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	40007000 	.word	0x40007000

0800cbb0 <HAL_RCC_OscConfig>:
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x12>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e2fe      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d075      	beq.n	800ccba <HAL_RCC_OscConfig+0x10a>
 800cbce:	4b97      	ldr	r3, [pc, #604]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f003 030c 	and.w	r3, r3, #12
 800cbd6:	61bb      	str	r3, [r7, #24]
 800cbd8:	4b94      	ldr	r3, [pc, #592]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f003 0303 	and.w	r3, r3, #3
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	2b0c      	cmp	r3, #12
 800cbe6:	d102      	bne.n	800cbee <HAL_RCC_OscConfig+0x3e>
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d002      	beq.n	800cbf4 <HAL_RCC_OscConfig+0x44>
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	2b08      	cmp	r3, #8
 800cbf2:	d10b      	bne.n	800cc0c <HAL_RCC_OscConfig+0x5c>
 800cbf4:	4b8d      	ldr	r3, [pc, #564]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d05b      	beq.n	800ccb8 <HAL_RCC_OscConfig+0x108>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d157      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x108>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e2d9      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc14:	d106      	bne.n	800cc24 <HAL_RCC_OscConfig+0x74>
 800cc16:	4b85      	ldr	r3, [pc, #532]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a84      	ldr	r2, [pc, #528]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	e01d      	b.n	800cc60 <HAL_RCC_OscConfig+0xb0>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc2c:	d10c      	bne.n	800cc48 <HAL_RCC_OscConfig+0x98>
 800cc2e:	4b7f      	ldr	r3, [pc, #508]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a7e      	ldr	r2, [pc, #504]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	4b7c      	ldr	r3, [pc, #496]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a7b      	ldr	r2, [pc, #492]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	e00b      	b.n	800cc60 <HAL_RCC_OscConfig+0xb0>
 800cc48:	4b78      	ldr	r3, [pc, #480]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a77      	ldr	r2, [pc, #476]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	4b75      	ldr	r3, [pc, #468]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a74      	ldr	r2, [pc, #464]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d013      	beq.n	800cc90 <HAL_RCC_OscConfig+0xe0>
 800cc68:	f7fd fa4c 	bl	800a104 <HAL_GetTick>
 800cc6c:	6138      	str	r0, [r7, #16]
 800cc6e:	e008      	b.n	800cc82 <HAL_RCC_OscConfig+0xd2>
 800cc70:	f7fd fa48 	bl	800a104 <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b64      	cmp	r3, #100	; 0x64
 800cc7c:	d901      	bls.n	800cc82 <HAL_RCC_OscConfig+0xd2>
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e29e      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cc82:	4b6a      	ldr	r3, [pc, #424]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f0      	beq.n	800cc70 <HAL_RCC_OscConfig+0xc0>
 800cc8e:	e014      	b.n	800ccba <HAL_RCC_OscConfig+0x10a>
 800cc90:	f7fd fa38 	bl	800a104 <HAL_GetTick>
 800cc94:	6138      	str	r0, [r7, #16]
 800cc96:	e008      	b.n	800ccaa <HAL_RCC_OscConfig+0xfa>
 800cc98:	f7fd fa34 	bl	800a104 <HAL_GetTick>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2b64      	cmp	r3, #100	; 0x64
 800cca4:	d901      	bls.n	800ccaa <HAL_RCC_OscConfig+0xfa>
 800cca6:	2303      	movs	r3, #3
 800cca8:	e28a      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800ccaa:	4b60      	ldr	r3, [pc, #384]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1f0      	bne.n	800cc98 <HAL_RCC_OscConfig+0xe8>
 800ccb6:	e000      	b.n	800ccba <HAL_RCC_OscConfig+0x10a>
 800ccb8:	bf00      	nop
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0302 	and.w	r3, r3, #2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d075      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x202>
 800ccc6:	4b59      	ldr	r3, [pc, #356]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f003 030c 	and.w	r3, r3, #12
 800ccce:	61bb      	str	r3, [r7, #24]
 800ccd0:	4b56      	ldr	r3, [pc, #344]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f003 0303 	and.w	r3, r3, #3
 800ccd8:	617b      	str	r3, [r7, #20]
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	2b0c      	cmp	r3, #12
 800ccde:	d102      	bne.n	800cce6 <HAL_RCC_OscConfig+0x136>
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d002      	beq.n	800ccec <HAL_RCC_OscConfig+0x13c>
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	d11f      	bne.n	800cd2c <HAL_RCC_OscConfig+0x17c>
 800ccec:	4b4f      	ldr	r3, [pc, #316]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <HAL_RCC_OscConfig+0x154>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <HAL_RCC_OscConfig+0x154>
 800cd00:	2301      	movs	r3, #1
 800cd02:	e25d      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cd04:	4b49      	ldr	r3, [pc, #292]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	061b      	lsls	r3, r3, #24
 800cd12:	4946      	ldr	r1, [pc, #280]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	604b      	str	r3, [r1, #4]
 800cd18:	4b45      	ldr	r3, [pc, #276]	; (800ce30 <HAL_RCC_OscConfig+0x280>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fd f9a5 	bl	800a06c <HAL_InitTick>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d043      	beq.n	800cdb0 <HAL_RCC_OscConfig+0x200>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e249      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d023      	beq.n	800cd7c <HAL_RCC_OscConfig+0x1cc>
 800cd34:	4b3d      	ldr	r3, [pc, #244]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a3c      	ldr	r2, [pc, #240]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	f7fd f9e0 	bl	800a104 <HAL_GetTick>
 800cd44:	6138      	str	r0, [r7, #16]
 800cd46:	e008      	b.n	800cd5a <HAL_RCC_OscConfig+0x1aa>
 800cd48:	f7fd f9dc 	bl	800a104 <HAL_GetTick>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d901      	bls.n	800cd5a <HAL_RCC_OscConfig+0x1aa>
 800cd56:	2303      	movs	r3, #3
 800cd58:	e232      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cd5a:	4b34      	ldr	r3, [pc, #208]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d0f0      	beq.n	800cd48 <HAL_RCC_OscConfig+0x198>
 800cd66:	4b31      	ldr	r3, [pc, #196]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	061b      	lsls	r3, r3, #24
 800cd74:	492d      	ldr	r1, [pc, #180]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd76:	4313      	orrs	r3, r2
 800cd78:	604b      	str	r3, [r1, #4]
 800cd7a:	e01a      	b.n	800cdb2 <HAL_RCC_OscConfig+0x202>
 800cd7c:	4b2b      	ldr	r3, [pc, #172]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a2a      	ldr	r2, [pc, #168]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cd82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	f7fd f9bc 	bl	800a104 <HAL_GetTick>
 800cd8c:	6138      	str	r0, [r7, #16]
 800cd8e:	e008      	b.n	800cda2 <HAL_RCC_OscConfig+0x1f2>
 800cd90:	f7fd f9b8 	bl	800a104 <HAL_GetTick>
 800cd94:	4602      	mov	r2, r0
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d901      	bls.n	800cda2 <HAL_RCC_OscConfig+0x1f2>
 800cd9e:	2303      	movs	r3, #3
 800cda0:	e20e      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cda2:	4b22      	ldr	r3, [pc, #136]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1f0      	bne.n	800cd90 <HAL_RCC_OscConfig+0x1e0>
 800cdae:	e000      	b.n	800cdb2 <HAL_RCC_OscConfig+0x202>
 800cdb0:	bf00      	nop
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0308 	and.w	r3, r3, #8
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d041      	beq.n	800ce42 <HAL_RCC_OscConfig+0x292>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d01c      	beq.n	800ce00 <HAL_RCC_OscConfig+0x250>
 800cdc6:	4b19      	ldr	r3, [pc, #100]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cdc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdcc:	4a17      	ldr	r2, [pc, #92]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cdce:	f043 0301 	orr.w	r3, r3, #1
 800cdd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cdd6:	f7fd f995 	bl	800a104 <HAL_GetTick>
 800cdda:	6138      	str	r0, [r7, #16]
 800cddc:	e008      	b.n	800cdf0 <HAL_RCC_OscConfig+0x240>
 800cdde:	f7fd f991 	bl	800a104 <HAL_GetTick>
 800cde2:	4602      	mov	r2, r0
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d901      	bls.n	800cdf0 <HAL_RCC_OscConfig+0x240>
 800cdec:	2303      	movs	r3, #3
 800cdee:	e1e7      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cdf0:	4b0e      	ldr	r3, [pc, #56]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800cdf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0ef      	beq.n	800cdde <HAL_RCC_OscConfig+0x22e>
 800cdfe:	e020      	b.n	800ce42 <HAL_RCC_OscConfig+0x292>
 800ce00:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800ce02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce06:	4a09      	ldr	r2, [pc, #36]	; (800ce2c <HAL_RCC_OscConfig+0x27c>)
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ce10:	f7fd f978 	bl	800a104 <HAL_GetTick>
 800ce14:	6138      	str	r0, [r7, #16]
 800ce16:	e00d      	b.n	800ce34 <HAL_RCC_OscConfig+0x284>
 800ce18:	f7fd f974 	bl	800a104 <HAL_GetTick>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d906      	bls.n	800ce34 <HAL_RCC_OscConfig+0x284>
 800ce26:	2303      	movs	r3, #3
 800ce28:	e1ca      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800ce2a:	bf00      	nop
 800ce2c:	40021000 	.word	0x40021000
 800ce30:	20000070 	.word	0x20000070
 800ce34:	4b8c      	ldr	r3, [pc, #560]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ce36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce3a:	f003 0302 	and.w	r3, r3, #2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1ea      	bne.n	800ce18 <HAL_RCC_OscConfig+0x268>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 0304 	and.w	r3, r3, #4
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 80a6 	beq.w	800cf9c <HAL_RCC_OscConfig+0x3ec>
 800ce50:	2300      	movs	r3, #0
 800ce52:	77fb      	strb	r3, [r7, #31]
 800ce54:	4b84      	ldr	r3, [pc, #528]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ce56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <HAL_RCC_OscConfig+0x2b4>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e000      	b.n	800ce66 <HAL_RCC_OscConfig+0x2b6>
 800ce64:	2300      	movs	r3, #0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00d      	beq.n	800ce86 <HAL_RCC_OscConfig+0x2d6>
 800ce6a:	4b7f      	ldr	r3, [pc, #508]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ce6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce6e:	4a7e      	ldr	r2, [pc, #504]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ce70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce74:	6593      	str	r3, [r2, #88]	; 0x58
 800ce76:	4b7c      	ldr	r3, [pc, #496]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ce78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2301      	movs	r3, #1
 800ce84:	77fb      	strb	r3, [r7, #31]
 800ce86:	4b79      	ldr	r3, [pc, #484]	; (800d06c <HAL_RCC_OscConfig+0x4bc>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d118      	bne.n	800cec4 <HAL_RCC_OscConfig+0x314>
 800ce92:	4b76      	ldr	r3, [pc, #472]	; (800d06c <HAL_RCC_OscConfig+0x4bc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a75      	ldr	r2, [pc, #468]	; (800d06c <HAL_RCC_OscConfig+0x4bc>)
 800ce98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	f7fd f931 	bl	800a104 <HAL_GetTick>
 800cea2:	6138      	str	r0, [r7, #16]
 800cea4:	e008      	b.n	800ceb8 <HAL_RCC_OscConfig+0x308>
 800cea6:	f7fd f92d 	bl	800a104 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d901      	bls.n	800ceb8 <HAL_RCC_OscConfig+0x308>
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e183      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800ceb8:	4b6c      	ldr	r3, [pc, #432]	; (800d06c <HAL_RCC_OscConfig+0x4bc>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0f0      	beq.n	800cea6 <HAL_RCC_OscConfig+0x2f6>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d108      	bne.n	800cede <HAL_RCC_OscConfig+0x32e>
 800cecc:	4b66      	ldr	r3, [pc, #408]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ced2:	4a65      	ldr	r2, [pc, #404]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ced4:	f043 0301 	orr.w	r3, r3, #1
 800ced8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cedc:	e024      	b.n	800cf28 <HAL_RCC_OscConfig+0x378>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	d110      	bne.n	800cf08 <HAL_RCC_OscConfig+0x358>
 800cee6:	4b60      	ldr	r3, [pc, #384]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceec:	4a5e      	ldr	r2, [pc, #376]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800ceee:	f043 0304 	orr.w	r3, r3, #4
 800cef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cef6:	4b5c      	ldr	r3, [pc, #368]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cefc:	4a5a      	ldr	r2, [pc, #360]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cefe:	f043 0301 	orr.w	r3, r3, #1
 800cf02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf06:	e00f      	b.n	800cf28 <HAL_RCC_OscConfig+0x378>
 800cf08:	4b57      	ldr	r3, [pc, #348]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf0e:	4a56      	ldr	r2, [pc, #344]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf10:	f023 0301 	bic.w	r3, r3, #1
 800cf14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf18:	4b53      	ldr	r3, [pc, #332]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf1e:	4a52      	ldr	r2, [pc, #328]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf20:	f023 0304 	bic.w	r3, r3, #4
 800cf24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d016      	beq.n	800cf5e <HAL_RCC_OscConfig+0x3ae>
 800cf30:	f7fd f8e8 	bl	800a104 <HAL_GetTick>
 800cf34:	6138      	str	r0, [r7, #16]
 800cf36:	e00a      	b.n	800cf4e <HAL_RCC_OscConfig+0x39e>
 800cf38:	f7fd f8e4 	bl	800a104 <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_OscConfig+0x39e>
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e138      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cf4e:	4b46      	ldr	r3, [pc, #280]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf54:	f003 0302 	and.w	r3, r3, #2
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d0ed      	beq.n	800cf38 <HAL_RCC_OscConfig+0x388>
 800cf5c:	e015      	b.n	800cf8a <HAL_RCC_OscConfig+0x3da>
 800cf5e:	f7fd f8d1 	bl	800a104 <HAL_GetTick>
 800cf62:	6138      	str	r0, [r7, #16]
 800cf64:	e00a      	b.n	800cf7c <HAL_RCC_OscConfig+0x3cc>
 800cf66:	f7fd f8cd 	bl	800a104 <HAL_GetTick>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d901      	bls.n	800cf7c <HAL_RCC_OscConfig+0x3cc>
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e121      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cf7c:	4b3a      	ldr	r3, [pc, #232]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1ed      	bne.n	800cf66 <HAL_RCC_OscConfig+0x3b6>
 800cf8a:	7ffb      	ldrb	r3, [r7, #31]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d105      	bne.n	800cf9c <HAL_RCC_OscConfig+0x3ec>
 800cf90:	4b35      	ldr	r3, [pc, #212]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf94:	4a34      	ldr	r2, [pc, #208]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cf96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf9a:	6593      	str	r3, [r2, #88]	; 0x58
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 0320 	and.w	r3, r3, #32
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d03c      	beq.n	800d022 <HAL_RCC_OscConfig+0x472>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d01c      	beq.n	800cfea <HAL_RCC_OscConfig+0x43a>
 800cfb0:	4b2d      	ldr	r3, [pc, #180]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cfb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfb6:	4a2c      	ldr	r2, [pc, #176]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cfb8:	f043 0301 	orr.w	r3, r3, #1
 800cfbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800cfc0:	f7fd f8a0 	bl	800a104 <HAL_GetTick>
 800cfc4:	6138      	str	r0, [r7, #16]
 800cfc6:	e008      	b.n	800cfda <HAL_RCC_OscConfig+0x42a>
 800cfc8:	f7fd f89c 	bl	800a104 <HAL_GetTick>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d901      	bls.n	800cfda <HAL_RCC_OscConfig+0x42a>
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e0f2      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800cfda:	4b23      	ldr	r3, [pc, #140]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cfdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfe0:	f003 0302 	and.w	r3, r3, #2
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d0ef      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x418>
 800cfe8:	e01b      	b.n	800d022 <HAL_RCC_OscConfig+0x472>
 800cfea:	4b1f      	ldr	r3, [pc, #124]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cfec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cff0:	4a1d      	ldr	r2, [pc, #116]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800cff2:	f023 0301 	bic.w	r3, r3, #1
 800cff6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800cffa:	f7fd f883 	bl	800a104 <HAL_GetTick>
 800cffe:	6138      	str	r0, [r7, #16]
 800d000:	e008      	b.n	800d014 <HAL_RCC_OscConfig+0x464>
 800d002:	f7fd f87f 	bl	800a104 <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d901      	bls.n	800d014 <HAL_RCC_OscConfig+0x464>
 800d010:	2303      	movs	r3, #3
 800d012:	e0d5      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800d014:	4b14      	ldr	r3, [pc, #80]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800d016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d01a:	f003 0302 	and.w	r3, r3, #2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1ef      	bne.n	800d002 <HAL_RCC_OscConfig+0x452>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 80c9 	beq.w	800d1be <HAL_RCC_OscConfig+0x60e>
 800d02c:	4b0e      	ldr	r3, [pc, #56]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	f003 030c 	and.w	r3, r3, #12
 800d034:	2b0c      	cmp	r3, #12
 800d036:	f000 8083 	beq.w	800d140 <HAL_RCC_OscConfig+0x590>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d15e      	bne.n	800d100 <HAL_RCC_OscConfig+0x550>
 800d042:	4b09      	ldr	r3, [pc, #36]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a08      	ldr	r2, [pc, #32]	; (800d068 <HAL_RCC_OscConfig+0x4b8>)
 800d048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	f7fd f859 	bl	800a104 <HAL_GetTick>
 800d052:	6138      	str	r0, [r7, #16]
 800d054:	e00c      	b.n	800d070 <HAL_RCC_OscConfig+0x4c0>
 800d056:	f7fd f855 	bl	800a104 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	2b02      	cmp	r3, #2
 800d062:	d905      	bls.n	800d070 <HAL_RCC_OscConfig+0x4c0>
 800d064:	2303      	movs	r3, #3
 800d066:	e0ab      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800d068:	40021000 	.word	0x40021000
 800d06c:	40007000 	.word	0x40007000
 800d070:	4b55      	ldr	r3, [pc, #340]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1ec      	bne.n	800d056 <HAL_RCC_OscConfig+0x4a6>
 800d07c:	4b52      	ldr	r3, [pc, #328]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	4b52      	ldr	r3, [pc, #328]	; (800d1cc <HAL_RCC_OscConfig+0x61c>)
 800d082:	4013      	ands	r3, r2
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6a11      	ldr	r1, [r2, #32]
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d08c:	3a01      	subs	r2, #1
 800d08e:	0112      	lsls	r2, r2, #4
 800d090:	4311      	orrs	r1, r2
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d096:	0212      	lsls	r2, r2, #8
 800d098:	4311      	orrs	r1, r2
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d09e:	0852      	lsrs	r2, r2, #1
 800d0a0:	3a01      	subs	r2, #1
 800d0a2:	0552      	lsls	r2, r2, #21
 800d0a4:	4311      	orrs	r1, r2
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d0aa:	0852      	lsrs	r2, r2, #1
 800d0ac:	3a01      	subs	r2, #1
 800d0ae:	0652      	lsls	r2, r2, #25
 800d0b0:	4311      	orrs	r1, r2
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d0b6:	06d2      	lsls	r2, r2, #27
 800d0b8:	430a      	orrs	r2, r1
 800d0ba:	4943      	ldr	r1, [pc, #268]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	60cb      	str	r3, [r1, #12]
 800d0c0:	4b41      	ldr	r3, [pc, #260]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a40      	ldr	r2, [pc, #256]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d0c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	4b3e      	ldr	r3, [pc, #248]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	4a3d      	ldr	r2, [pc, #244]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d0d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0d6:	60d3      	str	r3, [r2, #12]
 800d0d8:	f7fd f814 	bl	800a104 <HAL_GetTick>
 800d0dc:	6138      	str	r0, [r7, #16]
 800d0de:	e008      	b.n	800d0f2 <HAL_RCC_OscConfig+0x542>
 800d0e0:	f7fd f810 	bl	800a104 <HAL_GetTick>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d901      	bls.n	800d0f2 <HAL_RCC_OscConfig+0x542>
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e066      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800d0f2:	4b35      	ldr	r3, [pc, #212]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d0f0      	beq.n	800d0e0 <HAL_RCC_OscConfig+0x530>
 800d0fe:	e05e      	b.n	800d1be <HAL_RCC_OscConfig+0x60e>
 800d100:	4b31      	ldr	r3, [pc, #196]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a30      	ldr	r2, [pc, #192]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d10a:	6013      	str	r3, [r2, #0]
 800d10c:	f7fc fffa 	bl	800a104 <HAL_GetTick>
 800d110:	6138      	str	r0, [r7, #16]
 800d112:	e008      	b.n	800d126 <HAL_RCC_OscConfig+0x576>
 800d114:	f7fc fff6 	bl	800a104 <HAL_GetTick>
 800d118:	4602      	mov	r2, r0
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d901      	bls.n	800d126 <HAL_RCC_OscConfig+0x576>
 800d122:	2303      	movs	r3, #3
 800d124:	e04c      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800d126:	4b28      	ldr	r3, [pc, #160]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f0      	bne.n	800d114 <HAL_RCC_OscConfig+0x564>
 800d132:	4b25      	ldr	r3, [pc, #148]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d134:	68da      	ldr	r2, [r3, #12]
 800d136:	4924      	ldr	r1, [pc, #144]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d138:	4b25      	ldr	r3, [pc, #148]	; (800d1d0 <HAL_RCC_OscConfig+0x620>)
 800d13a:	4013      	ands	r3, r2
 800d13c:	60cb      	str	r3, [r1, #12]
 800d13e:	e03e      	b.n	800d1be <HAL_RCC_OscConfig+0x60e>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d101      	bne.n	800d14c <HAL_RCC_OscConfig+0x59c>
 800d148:	2301      	movs	r3, #1
 800d14a:	e039      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800d14c:	4b1e      	ldr	r3, [pc, #120]	; (800d1c8 <HAL_RCC_OscConfig+0x618>)
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	617b      	str	r3, [r7, #20]
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f003 0203 	and.w	r2, r3, #3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6a1b      	ldr	r3, [r3, #32]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d12c      	bne.n	800d1ba <HAL_RCC_OscConfig+0x60a>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16a:	3b01      	subs	r3, #1
 800d16c:	011b      	lsls	r3, r3, #4
 800d16e:	429a      	cmp	r2, r3
 800d170:	d123      	bne.n	800d1ba <HAL_RCC_OscConfig+0x60a>
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	429a      	cmp	r2, r3
 800d180:	d11b      	bne.n	800d1ba <HAL_RCC_OscConfig+0x60a>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	06db      	lsls	r3, r3, #27
 800d18e:	429a      	cmp	r2, r3
 800d190:	d113      	bne.n	800d1ba <HAL_RCC_OscConfig+0x60a>
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19c:	085b      	lsrs	r3, r3, #1
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	055b      	lsls	r3, r3, #21
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d109      	bne.n	800d1ba <HAL_RCC_OscConfig+0x60a>
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b0:	085b      	lsrs	r3, r3, #1
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	065b      	lsls	r3, r3, #25
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d001      	beq.n	800d1be <HAL_RCC_OscConfig+0x60e>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e000      	b.n	800d1c0 <HAL_RCC_OscConfig+0x610>
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3720      	adds	r7, #32
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	40021000 	.word	0x40021000
 800d1cc:	019f800c 	.word	0x019f800c
 800d1d0:	feeefffc 	.word	0xfeeefffc

0800d1d4 <HAL_RCC_ClockConfig>:
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <HAL_RCC_ClockConfig+0x18>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e11e      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d1ec:	4b91      	ldr	r3, [pc, #580]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f003 030f 	and.w	r3, r3, #15
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d910      	bls.n	800d21c <HAL_RCC_ClockConfig+0x48>
 800d1fa:	4b8e      	ldr	r3, [pc, #568]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f023 020f 	bic.w	r2, r3, #15
 800d202:	498c      	ldr	r1, [pc, #560]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	4313      	orrs	r3, r2
 800d208:	600b      	str	r3, [r1, #0]
 800d20a:	4b8a      	ldr	r3, [pc, #552]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 030f 	and.w	r3, r3, #15
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	429a      	cmp	r2, r3
 800d216:	d001      	beq.n	800d21c <HAL_RCC_ClockConfig+0x48>
 800d218:	2301      	movs	r3, #1
 800d21a:	e106      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	2b00      	cmp	r3, #0
 800d226:	d073      	beq.n	800d310 <HAL_RCC_ClockConfig+0x13c>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d129      	bne.n	800d284 <HAL_RCC_ClockConfig+0xb0>
 800d230:	4b81      	ldr	r3, [pc, #516]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <HAL_RCC_ClockConfig+0x6c>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e0f4      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d240:	f000 f99e 	bl	800d580 <RCC_GetSysClockFreqFromPLLSource>
 800d244:	6138      	str	r0, [r7, #16]
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	4a7c      	ldr	r2, [pc, #496]	; (800d43c <HAL_RCC_ClockConfig+0x268>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d93f      	bls.n	800d2ce <HAL_RCC_ClockConfig+0xfa>
 800d24e:	4b7a      	ldr	r3, [pc, #488]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d009      	beq.n	800d26e <HAL_RCC_ClockConfig+0x9a>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d033      	beq.n	800d2ce <HAL_RCC_ClockConfig+0xfa>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d12f      	bne.n	800d2ce <HAL_RCC_ClockConfig+0xfa>
 800d26e:	4b72      	ldr	r3, [pc, #456]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d276:	4a70      	ldr	r2, [pc, #448]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d27c:	6093      	str	r3, [r2, #8]
 800d27e:	2380      	movs	r3, #128	; 0x80
 800d280:	617b      	str	r3, [r7, #20]
 800d282:	e024      	b.n	800d2ce <HAL_RCC_ClockConfig+0xfa>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d107      	bne.n	800d29c <HAL_RCC_ClockConfig+0xc8>
 800d28c:	4b6a      	ldr	r3, [pc, #424]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d109      	bne.n	800d2ac <HAL_RCC_ClockConfig+0xd8>
 800d298:	2301      	movs	r3, #1
 800d29a:	e0c6      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d29c:	4b66      	ldr	r3, [pc, #408]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <HAL_RCC_ClockConfig+0xd8>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e0be      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d2ac:	f000 f8ce 	bl	800d44c <HAL_RCC_GetSysClockFreq>
 800d2b0:	6138      	str	r0, [r7, #16]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	4a61      	ldr	r2, [pc, #388]	; (800d43c <HAL_RCC_ClockConfig+0x268>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d909      	bls.n	800d2ce <HAL_RCC_ClockConfig+0xfa>
 800d2ba:	4b5f      	ldr	r3, [pc, #380]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2c2:	4a5d      	ldr	r2, [pc, #372]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c8:	6093      	str	r3, [r2, #8]
 800d2ca:	2380      	movs	r3, #128	; 0x80
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	4b5a      	ldr	r3, [pc, #360]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	f023 0203 	bic.w	r2, r3, #3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	4957      	ldr	r1, [pc, #348]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	608b      	str	r3, [r1, #8]
 800d2e0:	f7fc ff10 	bl	800a104 <HAL_GetTick>
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	e00a      	b.n	800d2fe <HAL_RCC_ClockConfig+0x12a>
 800d2e8:	f7fc ff0c 	bl	800a104 <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d901      	bls.n	800d2fe <HAL_RCC_ClockConfig+0x12a>
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e095      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d2fe:	4b4e      	ldr	r3, [pc, #312]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	f003 020c 	and.w	r2, r3, #12
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d1eb      	bne.n	800d2e8 <HAL_RCC_ClockConfig+0x114>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 0302 	and.w	r3, r3, #2
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d023      	beq.n	800d364 <HAL_RCC_ClockConfig+0x190>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0304 	and.w	r3, r3, #4
 800d324:	2b00      	cmp	r3, #0
 800d326:	d005      	beq.n	800d334 <HAL_RCC_ClockConfig+0x160>
 800d328:	4b43      	ldr	r3, [pc, #268]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	4a42      	ldr	r2, [pc, #264]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d32e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d332:	6093      	str	r3, [r2, #8]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0308 	and.w	r3, r3, #8
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d007      	beq.n	800d350 <HAL_RCC_ClockConfig+0x17c>
 800d340:	4b3d      	ldr	r3, [pc, #244]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d348:	4a3b      	ldr	r2, [pc, #236]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d34a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d34e:	6093      	str	r3, [r2, #8]
 800d350:	4b39      	ldr	r3, [pc, #228]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	4936      	ldr	r1, [pc, #216]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d35e:	4313      	orrs	r3, r2
 800d360:	608b      	str	r3, [r1, #8]
 800d362:	e008      	b.n	800d376 <HAL_RCC_ClockConfig+0x1a2>
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2b80      	cmp	r3, #128	; 0x80
 800d368:	d105      	bne.n	800d376 <HAL_RCC_ClockConfig+0x1a2>
 800d36a:	4b33      	ldr	r3, [pc, #204]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	4a32      	ldr	r2, [pc, #200]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d374:	6093      	str	r3, [r2, #8]
 800d376:	4b2f      	ldr	r3, [pc, #188]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 030f 	and.w	r3, r3, #15
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	429a      	cmp	r2, r3
 800d382:	d21d      	bcs.n	800d3c0 <HAL_RCC_ClockConfig+0x1ec>
 800d384:	4b2b      	ldr	r3, [pc, #172]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f023 020f 	bic.w	r2, r3, #15
 800d38c:	4929      	ldr	r1, [pc, #164]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	4313      	orrs	r3, r2
 800d392:	600b      	str	r3, [r1, #0]
 800d394:	f7fc feb6 	bl	800a104 <HAL_GetTick>
 800d398:	60f8      	str	r0, [r7, #12]
 800d39a:	e00a      	b.n	800d3b2 <HAL_RCC_ClockConfig+0x1de>
 800d39c:	f7fc feb2 	bl	800a104 <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d901      	bls.n	800d3b2 <HAL_RCC_ClockConfig+0x1de>
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	e03b      	b.n	800d42a <HAL_RCC_ClockConfig+0x256>
 800d3b2:	4b20      	ldr	r3, [pc, #128]	; (800d434 <HAL_RCC_ClockConfig+0x260>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 030f 	and.w	r3, r3, #15
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d1ed      	bne.n	800d39c <HAL_RCC_ClockConfig+0x1c8>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d008      	beq.n	800d3de <HAL_RCC_ClockConfig+0x20a>
 800d3cc:	4b1a      	ldr	r3, [pc, #104]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	4917      	ldr	r1, [pc, #92]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	608b      	str	r3, [r1, #8]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f003 0308 	and.w	r3, r3, #8
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d009      	beq.n	800d3fe <HAL_RCC_ClockConfig+0x22a>
 800d3ea:	4b13      	ldr	r3, [pc, #76]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	00db      	lsls	r3, r3, #3
 800d3f8:	490f      	ldr	r1, [pc, #60]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	608b      	str	r3, [r1, #8]
 800d3fe:	f000 f825 	bl	800d44c <HAL_RCC_GetSysClockFreq>
 800d402:	4602      	mov	r2, r0
 800d404:	4b0c      	ldr	r3, [pc, #48]	; (800d438 <HAL_RCC_ClockConfig+0x264>)
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	091b      	lsrs	r3, r3, #4
 800d40a:	f003 030f 	and.w	r3, r3, #15
 800d40e:	490c      	ldr	r1, [pc, #48]	; (800d440 <HAL_RCC_ClockConfig+0x26c>)
 800d410:	5ccb      	ldrb	r3, [r1, r3]
 800d412:	f003 031f 	and.w	r3, r3, #31
 800d416:	fa22 f303 	lsr.w	r3, r2, r3
 800d41a:	4a0a      	ldr	r2, [pc, #40]	; (800d444 <HAL_RCC_ClockConfig+0x270>)
 800d41c:	6013      	str	r3, [r2, #0]
 800d41e:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <HAL_RCC_ClockConfig+0x274>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4618      	mov	r0, r3
 800d424:	f7fc fe22 	bl	800a06c <HAL_InitTick>
 800d428:	4603      	mov	r3, r0
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	40022000 	.word	0x40022000
 800d438:	40021000 	.word	0x40021000
 800d43c:	04c4b400 	.word	0x04c4b400
 800d440:	080180f0 	.word	0x080180f0
 800d444:	2000006c 	.word	0x2000006c
 800d448:	20000070 	.word	0x20000070

0800d44c <HAL_RCC_GetSysClockFreq>:
 800d44c:	b480      	push	{r7}
 800d44e:	b087      	sub	sp, #28
 800d450:	af00      	add	r7, sp, #0
 800d452:	4b2c      	ldr	r3, [pc, #176]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f003 030c 	and.w	r3, r3, #12
 800d45a:	2b04      	cmp	r3, #4
 800d45c:	d102      	bne.n	800d464 <HAL_RCC_GetSysClockFreq+0x18>
 800d45e:	4b2a      	ldr	r3, [pc, #168]	; (800d508 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d460:	613b      	str	r3, [r7, #16]
 800d462:	e047      	b.n	800d4f4 <HAL_RCC_GetSysClockFreq+0xa8>
 800d464:	4b27      	ldr	r3, [pc, #156]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	f003 030c 	and.w	r3, r3, #12
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d102      	bne.n	800d476 <HAL_RCC_GetSysClockFreq+0x2a>
 800d470:	4b26      	ldr	r3, [pc, #152]	; (800d50c <HAL_RCC_GetSysClockFreq+0xc0>)
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	e03e      	b.n	800d4f4 <HAL_RCC_GetSysClockFreq+0xa8>
 800d476:	4b23      	ldr	r3, [pc, #140]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	f003 030c 	and.w	r3, r3, #12
 800d47e:	2b0c      	cmp	r3, #12
 800d480:	d136      	bne.n	800d4f0 <HAL_RCC_GetSysClockFreq+0xa4>
 800d482:	4b20      	ldr	r3, [pc, #128]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	f003 0303 	and.w	r3, r3, #3
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	4b1d      	ldr	r3, [pc, #116]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	091b      	lsrs	r3, r3, #4
 800d492:	f003 030f 	and.w	r3, r3, #15
 800d496:	3301      	adds	r3, #1
 800d498:	60bb      	str	r3, [r7, #8]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d10c      	bne.n	800d4ba <HAL_RCC_GetSysClockFreq+0x6e>
 800d4a0:	4a1a      	ldr	r2, [pc, #104]	; (800d50c <HAL_RCC_GetSysClockFreq+0xc0>)
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a8:	4a16      	ldr	r2, [pc, #88]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4aa:	68d2      	ldr	r2, [r2, #12]
 800d4ac:	0a12      	lsrs	r2, r2, #8
 800d4ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4b2:	fb02 f303 	mul.w	r3, r2, r3
 800d4b6:	617b      	str	r3, [r7, #20]
 800d4b8:	e00c      	b.n	800d4d4 <HAL_RCC_GetSysClockFreq+0x88>
 800d4ba:	4a13      	ldr	r2, [pc, #76]	; (800d508 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4c2:	4a10      	ldr	r2, [pc, #64]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4c4:	68d2      	ldr	r2, [r2, #12]
 800d4c6:	0a12      	lsrs	r2, r2, #8
 800d4c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4cc:	fb02 f303 	mul.w	r3, r2, r3
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	bf00      	nop
 800d4d4:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	0e5b      	lsrs	r3, r3, #25
 800d4da:	f003 0303 	and.w	r3, r3, #3
 800d4de:	3301      	adds	r3, #1
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	607b      	str	r3, [r7, #4]
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ec:	613b      	str	r3, [r7, #16]
 800d4ee:	e001      	b.n	800d4f4 <HAL_RCC_GetSysClockFreq+0xa8>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	613b      	str	r3, [r7, #16]
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	371c      	adds	r7, #28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	40021000 	.word	0x40021000
 800d508:	00f42400 	.word	0x00f42400
 800d50c:	007a1200 	.word	0x007a1200

0800d510 <HAL_RCC_GetHCLKFreq>:
 800d510:	b480      	push	{r7}
 800d512:	af00      	add	r7, sp, #0
 800d514:	4b03      	ldr	r3, [pc, #12]	; (800d524 <HAL_RCC_GetHCLKFreq+0x14>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4618      	mov	r0, r3
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	2000006c 	.word	0x2000006c

0800d528 <HAL_RCC_GetPCLK1Freq>:
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	f7ff fff0 	bl	800d510 <HAL_RCC_GetHCLKFreq>
 800d530:	4602      	mov	r2, r0
 800d532:	4b06      	ldr	r3, [pc, #24]	; (800d54c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	0a1b      	lsrs	r3, r3, #8
 800d538:	f003 0307 	and.w	r3, r3, #7
 800d53c:	4904      	ldr	r1, [pc, #16]	; (800d550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d53e:	5ccb      	ldrb	r3, [r1, r3]
 800d540:	f003 031f 	and.w	r3, r3, #31
 800d544:	fa22 f303 	lsr.w	r3, r2, r3
 800d548:	4618      	mov	r0, r3
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	40021000 	.word	0x40021000
 800d550:	08018100 	.word	0x08018100

0800d554 <HAL_RCC_GetPCLK2Freq>:
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
 800d558:	f7ff ffda 	bl	800d510 <HAL_RCC_GetHCLKFreq>
 800d55c:	4602      	mov	r2, r0
 800d55e:	4b06      	ldr	r3, [pc, #24]	; (800d578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	0adb      	lsrs	r3, r3, #11
 800d564:	f003 0307 	and.w	r3, r3, #7
 800d568:	4904      	ldr	r1, [pc, #16]	; (800d57c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d56a:	5ccb      	ldrb	r3, [r1, r3]
 800d56c:	f003 031f 	and.w	r3, r3, #31
 800d570:	fa22 f303 	lsr.w	r3, r2, r3
 800d574:	4618      	mov	r0, r3
 800d576:	bd80      	pop	{r7, pc}
 800d578:	40021000 	.word	0x40021000
 800d57c:	08018100 	.word	0x08018100

0800d580 <RCC_GetSysClockFreqFromPLLSource>:
 800d580:	b480      	push	{r7}
 800d582:	b087      	sub	sp, #28
 800d584:	af00      	add	r7, sp, #0
 800d586:	4b1e      	ldr	r3, [pc, #120]	; (800d600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	613b      	str	r3, [r7, #16]
 800d590:	4b1b      	ldr	r3, [pc, #108]	; (800d600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	091b      	lsrs	r3, r3, #4
 800d596:	f003 030f 	and.w	r3, r3, #15
 800d59a:	3301      	adds	r3, #1
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d10c      	bne.n	800d5be <RCC_GetSysClockFreqFromPLLSource+0x3e>
 800d5a4:	4a17      	ldr	r2, [pc, #92]	; (800d604 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ac:	4a14      	ldr	r2, [pc, #80]	; (800d600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5ae:	68d2      	ldr	r2, [r2, #12]
 800d5b0:	0a12      	lsrs	r2, r2, #8
 800d5b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5b6:	fb02 f303 	mul.w	r3, r2, r3
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e00c      	b.n	800d5d8 <RCC_GetSysClockFreqFromPLLSource+0x58>
 800d5be:	4a12      	ldr	r2, [pc, #72]	; (800d608 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5c6:	4a0e      	ldr	r2, [pc, #56]	; (800d600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5c8:	68d2      	ldr	r2, [r2, #12]
 800d5ca:	0a12      	lsrs	r2, r2, #8
 800d5cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5d0:	fb02 f303 	mul.w	r3, r2, r3
 800d5d4:	617b      	str	r3, [r7, #20]
 800d5d6:	bf00      	nop
 800d5d8:	4b09      	ldr	r3, [pc, #36]	; (800d600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	0e5b      	lsrs	r3, r3, #25
 800d5de:	f003 0303 	and.w	r3, r3, #3
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	60bb      	str	r3, [r7, #8]
 800d5e8:	697a      	ldr	r2, [r7, #20]
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5f0:	607b      	str	r3, [r7, #4]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	371c      	adds	r7, #28
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	40021000 	.word	0x40021000
 800d604:	007a1200 	.word	0x007a1200
 800d608:	00f42400 	.word	0x00f42400

0800d60c <HAL_RCCEx_PeriphCLKConfig>:
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	2300      	movs	r3, #0
 800d616:	74fb      	strb	r3, [r7, #19]
 800d618:	2300      	movs	r3, #0
 800d61a:	74bb      	strb	r3, [r7, #18]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 8098 	beq.w	800d75a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d62a:	2300      	movs	r3, #0
 800d62c:	747b      	strb	r3, [r7, #17]
 800d62e:	4b43      	ldr	r3, [pc, #268]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10d      	bne.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800d63a:	4b40      	ldr	r3, [pc, #256]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d63e:	4a3f      	ldr	r2, [pc, #252]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d644:	6593      	str	r3, [r2, #88]	; 0x58
 800d646:	4b3d      	ldr	r3, [pc, #244]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d64a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d64e:	60bb      	str	r3, [r7, #8]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2301      	movs	r3, #1
 800d654:	747b      	strb	r3, [r7, #17]
 800d656:	4b3a      	ldr	r3, [pc, #232]	; (800d740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a39      	ldr	r2, [pc, #228]	; (800d740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d65c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	f7fc fd4f 	bl	800a104 <HAL_GetTick>
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	e009      	b.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d66a:	f7fc fd4b 	bl	800a104 <HAL_GetTick>
 800d66e:	4602      	mov	r2, r0
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	2b02      	cmp	r3, #2
 800d676:	d902      	bls.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d678:	2303      	movs	r3, #3
 800d67a:	74fb      	strb	r3, [r7, #19]
 800d67c:	e005      	b.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800d67e:	4b30      	ldr	r3, [pc, #192]	; (800d740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0ef      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800d68a:	7cfb      	ldrb	r3, [r7, #19]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d159      	bne.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800d690:	4b2a      	ldr	r3, [pc, #168]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d01e      	beq.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d019      	beq.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d6ac:	4b23      	ldr	r3, [pc, #140]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6b6:	617b      	str	r3, [r7, #20]
 800d6b8:	4b20      	ldr	r3, [pc, #128]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6be:	4a1f      	ldr	r2, [pc, #124]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6c8:	4b1c      	ldr	r3, [pc, #112]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ce:	4a1b      	ldr	r2, [pc, #108]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6d8:	4a18      	ldr	r2, [pc, #96]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d016      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d6ea:	f7fc fd0b 	bl	800a104 <HAL_GetTick>
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	e00b      	b.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d6f2:	f7fc fd07 	bl	800a104 <HAL_GetTick>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d700:	4293      	cmp	r3, r2
 800d702:	d902      	bls.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d704:	2303      	movs	r3, #3
 800d706:	74fb      	strb	r3, [r7, #19]
 800d708:	e006      	b.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d70a:	4b0c      	ldr	r3, [pc, #48]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d710:	f003 0302 	and.w	r3, r3, #2
 800d714:	2b00      	cmp	r3, #0
 800d716:	d0ec      	beq.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800d718:	7cfb      	ldrb	r3, [r7, #19]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10b      	bne.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800d71e:	4b07      	ldr	r3, [pc, #28]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	4903      	ldr	r1, [pc, #12]	; (800d73c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d72e:	4313      	orrs	r3, r2
 800d730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d734:	e008      	b.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d736:	7cfb      	ldrb	r3, [r7, #19]
 800d738:	74bb      	strb	r3, [r7, #18]
 800d73a:	e005      	b.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d73c:	40021000 	.word	0x40021000
 800d740:	40007000 	.word	0x40007000
 800d744:	7cfb      	ldrb	r3, [r7, #19]
 800d746:	74bb      	strb	r3, [r7, #18]
 800d748:	7c7b      	ldrb	r3, [r7, #17]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d105      	bne.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d74e:	4ba7      	ldr	r3, [pc, #668]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d752:	4aa6      	ldr	r2, [pc, #664]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d758:	6593      	str	r3, [r2, #88]	; 0x58
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 0301 	and.w	r3, r3, #1
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00a      	beq.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x170>
 800d766:	4ba1      	ldr	r3, [pc, #644]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d76c:	f023 0203 	bic.w	r2, r3, #3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	499d      	ldr	r1, [pc, #628]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d776:	4313      	orrs	r3, r2
 800d778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f003 0302 	and.w	r3, r3, #2
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00a      	beq.n	800d79e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800d788:	4b98      	ldr	r3, [pc, #608]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d78e:	f023 020c 	bic.w	r2, r3, #12
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	4995      	ldr	r1, [pc, #596]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d798:	4313      	orrs	r3, r2
 800d79a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f003 0304 	and.w	r3, r3, #4
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00a      	beq.n	800d7c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800d7aa:	4b90      	ldr	r3, [pc, #576]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	498c      	ldr	r1, [pc, #560]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0308 	and.w	r3, r3, #8
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00a      	beq.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800d7cc:	4b87      	ldr	r3, [pc, #540]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	4984      	ldr	r1, [pc, #528]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0310 	and.w	r3, r3, #16
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800d7ee:	4b7f      	ldr	r3, [pc, #508]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	497b      	ldr	r1, [pc, #492]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fe:	4313      	orrs	r3, r2
 800d800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f003 0320 	and.w	r3, r3, #32
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00a      	beq.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800d810:	4b76      	ldr	r3, [pc, #472]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	4973      	ldr	r1, [pc, #460]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d820:	4313      	orrs	r3, r2
 800d822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00a      	beq.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800d832:	4b6e      	ldr	r3, [pc, #440]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	496a      	ldr	r1, [pc, #424]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d842:	4313      	orrs	r3, r2
 800d844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00a      	beq.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800d854:	4b65      	ldr	r3, [pc, #404]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d85a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	4962      	ldr	r1, [pc, #392]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d864:	4313      	orrs	r3, r2
 800d866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800d876:	4b5d      	ldr	r3, [pc, #372]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d87c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d884:	4959      	ldr	r1, [pc, #356]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d886:	4313      	orrs	r3, r2
 800d888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00a      	beq.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800d898:	4b54      	ldr	r3, [pc, #336]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d89a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d89e:	f023 0203 	bic.w	r2, r3, #3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	4951      	ldr	r1, [pc, #324]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00a      	beq.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800d8ba:	4b4c      	ldr	r3, [pc, #304]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	4948      	ldr	r1, [pc, #288]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d015      	beq.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800d8dc:	4b43      	ldr	r3, [pc, #268]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ea:	4940      	ldr	r1, [pc, #256]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8fa:	d105      	bne.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800d8fc:	4b3b      	ldr	r3, [pc, #236]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	4a3a      	ldr	r2, [pc, #232]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d906:	60d3      	str	r3, [r2, #12]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d910:	2b00      	cmp	r3, #0
 800d912:	d015      	beq.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800d914:	4b35      	ldr	r3, [pc, #212]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d91a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d922:	4932      	ldr	r1, [pc, #200]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d924:	4313      	orrs	r3, r2
 800d926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d92e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d932:	d105      	bne.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800d934:	4b2d      	ldr	r3, [pc, #180]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	4a2c      	ldr	r2, [pc, #176]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d93e:	60d3      	str	r3, [r2, #12]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d015      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800d94c:	4b27      	ldr	r3, [pc, #156]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d952:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	4924      	ldr	r1, [pc, #144]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d96a:	d105      	bne.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800d96c:	4b1f      	ldr	r3, [pc, #124]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	4a1e      	ldr	r2, [pc, #120]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d976:	60d3      	str	r3, [r2, #12]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d015      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800d984:	4b19      	ldr	r3, [pc, #100]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d98a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d992:	4916      	ldr	r1, [pc, #88]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d994:	4313      	orrs	r3, r2
 800d996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9a2:	d105      	bne.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800d9a4:	4b11      	ldr	r3, [pc, #68]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	4a10      	ldr	r2, [pc, #64]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9ae:	60d3      	str	r3, [r2, #12]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d019      	beq.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d9bc:	4b0b      	ldr	r3, [pc, #44]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	4908      	ldr	r1, [pc, #32]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9da:	d109      	bne.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d9dc:	4b03      	ldr	r3, [pc, #12]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	4a02      	ldr	r2, [pc, #8]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9e6:	60d3      	str	r3, [r2, #12]
 800d9e8:	e002      	b.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d9ea:	bf00      	nop
 800d9ec:	40021000 	.word	0x40021000
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d015      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800d9fc:	4b29      	ldr	r3, [pc, #164]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da0a:	4926      	ldr	r1, [pc, #152]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da0c:	4313      	orrs	r3, r2
 800da0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da1a:	d105      	bne.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800da1c:	4b21      	ldr	r3, [pc, #132]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	4a20      	ldr	r2, [pc, #128]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da26:	60d3      	str	r3, [r2, #12]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d015      	beq.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800da34:	4b1b      	ldr	r3, [pc, #108]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da3a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da42:	4918      	ldr	r1, [pc, #96]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da44:	4313      	orrs	r3, r2
 800da46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da52:	d105      	bne.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800da54:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	4a12      	ldr	r2, [pc, #72]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da5e:	60d3      	str	r3, [r2, #12]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d015      	beq.n	800da98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800da6c:	4b0d      	ldr	r3, [pc, #52]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da7a:	490a      	ldr	r1, [pc, #40]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da7c:	4313      	orrs	r3, r2
 800da7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da8a:	d105      	bne.n	800da98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800da8c:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	4a04      	ldr	r2, [pc, #16]	; (800daa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da96:	60d3      	str	r3, [r2, #12]
 800da98:	7cbb      	ldrb	r3, [r7, #18]
 800da9a:	4618      	mov	r0, r3
 800da9c:	3718      	adds	r7, #24
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	40021000 	.word	0x40021000

0800daa8 <HAL_SPI_Init>:
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <HAL_SPI_Init+0x12>
 800dab6:	2301      	movs	r3, #1
 800dab8:	e09d      	b.n	800dbf6 <HAL_SPI_Init+0x14e>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d108      	bne.n	800dad4 <HAL_SPI_Init+0x2c>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800daca:	d009      	beq.n	800dae0 <HAL_SPI_Init+0x38>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	61da      	str	r2, [r3, #28]
 800dad2:	e005      	b.n	800dae0 <HAL_SPI_Init+0x38>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	611a      	str	r2, [r3, #16]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	615a      	str	r2, [r3, #20]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	629a      	str	r2, [r3, #40]	; 0x28
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <HAL_SPI_Init+0x58>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7fb fb5a 	bl	80091b4 <HAL_SPI_MspInit>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db16:	601a      	str	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db20:	d902      	bls.n	800db28 <HAL_SPI_Init+0x80>
 800db22:	2300      	movs	r3, #0
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	e002      	b.n	800db2e <HAL_SPI_Init+0x86>
 800db28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800db36:	d007      	beq.n	800db48 <HAL_SPI_Init+0xa0>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db40:	d002      	beq.n	800db48 <HAL_SPI_Init+0xa0>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	629a      	str	r2, [r3, #40]	; 0x28
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800db58:	431a      	orrs	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	f003 0302 	and.w	r3, r3, #2
 800db62:	431a      	orrs	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	695b      	ldr	r3, [r3, #20]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	431a      	orrs	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db76:	431a      	orrs	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	69db      	ldr	r3, [r3, #28]
 800db7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a1b      	ldr	r3, [r3, #32]
 800db86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db8a:	ea42 0103 	orr.w	r1, r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	699b      	ldr	r3, [r3, #24]
 800dba2:	0c1b      	lsrs	r3, r3, #16
 800dba4:	f003 0204 	and.w	r2, r3, #4
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	f003 0310 	and.w	r3, r3, #16
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb6:	f003 0308 	and.w	r3, r3, #8
 800dbba:	431a      	orrs	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dbc4:	ea42 0103 	orr.w	r1, r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	605a      	str	r2, [r3, #4]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	69da      	ldr	r2, [r3, #28]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbe4:	61da      	str	r2, [r3, #28]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	661a      	str	r2, [r3, #96]	; 0x60
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <HAL_SPI_Transmit>:
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b088      	sub	sp, #32
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	60b9      	str	r1, [r7, #8]
 800dc08:	603b      	str	r3, [r7, #0]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	80fb      	strh	r3, [r7, #6]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	77fb      	strb	r3, [r7, #31]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d101      	bne.n	800dc20 <HAL_SPI_Transmit+0x22>
 800dc1c:	2302      	movs	r3, #2
 800dc1e:	e15f      	b.n	800dee0 <HAL_SPI_Transmit+0x2e2>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800dc28:	f7fc fa6c 	bl	800a104 <HAL_GetTick>
 800dc2c:	61b8      	str	r0, [r7, #24]
 800dc2e:	88fb      	ldrh	r3, [r7, #6]
 800dc30:	82fb      	strh	r3, [r7, #22]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d002      	beq.n	800dc44 <HAL_SPI_Transmit+0x46>
 800dc3e:	2302      	movs	r3, #2
 800dc40:	77fb      	strb	r3, [r7, #31]
 800dc42:	e148      	b.n	800ded6 <HAL_SPI_Transmit+0x2d8>
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d002      	beq.n	800dc50 <HAL_SPI_Transmit+0x52>
 800dc4a:	88fb      	ldrh	r3, [r7, #6]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d102      	bne.n	800dc56 <HAL_SPI_Transmit+0x58>
 800dc50:	2301      	movs	r3, #1
 800dc52:	77fb      	strb	r3, [r7, #31]
 800dc54:	e13f      	b.n	800ded6 <HAL_SPI_Transmit+0x2d8>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2203      	movs	r2, #3
 800dc5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	661a      	str	r2, [r3, #96]	; 0x60
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	639a      	str	r2, [r3, #56]	; 0x38
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	88fa      	ldrh	r2, [r7, #6]
 800dc6e:	879a      	strh	r2, [r3, #60]	; 0x3c
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	88fa      	ldrh	r2, [r7, #6]
 800dc74:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	641a      	str	r2, [r3, #64]	; 0x40
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	651a      	str	r2, [r3, #80]	; 0x50
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	64da      	str	r2, [r3, #76]	; 0x4c
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dca0:	d10f      	bne.n	800dcc2 <HAL_SPI_Transmit+0xc4>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dcc0:	601a      	str	r2, [r3, #0]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dccc:	2b40      	cmp	r3, #64	; 0x40
 800dcce:	d007      	beq.n	800dce0 <HAL_SPI_Transmit+0xe2>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dce8:	d94f      	bls.n	800dd8a <HAL_SPI_Transmit+0x18c>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <HAL_SPI_Transmit+0xfa>
 800dcf2:	8afb      	ldrh	r3, [r7, #22]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d142      	bne.n	800dd7e <HAL_SPI_Transmit+0x180>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfc:	881a      	ldrh	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	60da      	str	r2, [r3, #12]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd08:	1c9a      	adds	r2, r3, #2
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	3b01      	subs	r3, #1
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd1c:	e02f      	b.n	800dd7e <HAL_SPI_Transmit+0x180>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	f003 0302 	and.w	r3, r3, #2
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d112      	bne.n	800dd52 <HAL_SPI_Transmit+0x154>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd30:	881a      	ldrh	r2, [r3, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60da      	str	r2, [r3, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3c:	1c9a      	adds	r2, r3, #2
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	639a      	str	r2, [r3, #56]	; 0x38
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd50:	e015      	b.n	800dd7e <HAL_SPI_Transmit+0x180>
 800dd52:	f7fc f9d7 	bl	800a104 <HAL_GetTick>
 800dd56:	4602      	mov	r2, r0
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d803      	bhi.n	800dd6a <HAL_SPI_Transmit+0x16c>
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd68:	d102      	bne.n	800dd70 <HAL_SPI_Transmit+0x172>
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <HAL_SPI_Transmit+0x180>
 800dd70:	2303      	movs	r3, #3
 800dd72:	77fb      	strb	r3, [r7, #31]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dd7c:	e0ab      	b.n	800ded6 <HAL_SPI_Transmit+0x2d8>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1ca      	bne.n	800dd1e <HAL_SPI_Transmit+0x120>
 800dd88:	e080      	b.n	800de8c <HAL_SPI_Transmit+0x28e>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d002      	beq.n	800dd98 <HAL_SPI_Transmit+0x19a>
 800dd92:	8afb      	ldrh	r3, [r7, #22]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d174      	bne.n	800de82 <HAL_SPI_Transmit+0x284>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d912      	bls.n	800ddc8 <HAL_SPI_Transmit+0x1ca>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	881a      	ldrh	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	60da      	str	r2, [r3, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	1c9a      	adds	r2, r3, #2
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	639a      	str	r2, [r3, #56]	; 0x38
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	3b02      	subs	r3, #2
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ddc6:	e05c      	b.n	800de82 <HAL_SPI_Transmit+0x284>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	330c      	adds	r3, #12
 800ddd2:	7812      	ldrb	r2, [r2, #0]
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	639a      	str	r2, [r3, #56]	; 0x38
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	3b01      	subs	r3, #1
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ddee:	e048      	b.n	800de82 <HAL_SPI_Transmit+0x284>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	f003 0302 	and.w	r3, r3, #2
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d12b      	bne.n	800de56 <HAL_SPI_Transmit+0x258>
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de02:	b29b      	uxth	r3, r3
 800de04:	2b01      	cmp	r3, #1
 800de06:	d912      	bls.n	800de2e <HAL_SPI_Transmit+0x230>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0c:	881a      	ldrh	r2, [r3, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	60da      	str	r2, [r3, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de18:	1c9a      	adds	r2, r3, #2
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de22:	b29b      	uxth	r3, r3
 800de24:	3b02      	subs	r3, #2
 800de26:	b29a      	uxth	r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de2c:	e029      	b.n	800de82 <HAL_SPI_Transmit+0x284>
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	330c      	adds	r3, #12
 800de38:	7812      	ldrb	r2, [r2, #0]
 800de3a:	701a      	strb	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	639a      	str	r2, [r3, #56]	; 0x38
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	3b01      	subs	r3, #1
 800de4e:	b29a      	uxth	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de54:	e015      	b.n	800de82 <HAL_SPI_Transmit+0x284>
 800de56:	f7fc f955 	bl	800a104 <HAL_GetTick>
 800de5a:	4602      	mov	r2, r0
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	1ad3      	subs	r3, r2, r3
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	429a      	cmp	r2, r3
 800de64:	d803      	bhi.n	800de6e <HAL_SPI_Transmit+0x270>
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6c:	d102      	bne.n	800de74 <HAL_SPI_Transmit+0x276>
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <HAL_SPI_Transmit+0x284>
 800de74:	2303      	movs	r3, #3
 800de76:	77fb      	strb	r3, [r7, #31]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800de80:	e029      	b.n	800ded6 <HAL_SPI_Transmit+0x2d8>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de86:	b29b      	uxth	r3, r3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1b1      	bne.n	800ddf0 <HAL_SPI_Transmit+0x1f2>
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f000 fc7d 	bl	800e790 <SPI_EndRxTxTransaction>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <HAL_SPI_Transmit+0x2a4>
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2220      	movs	r2, #32
 800dea0:	661a      	str	r2, [r3, #96]	; 0x60
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10a      	bne.n	800dec0 <HAL_SPI_Transmit+0x2c2>
 800deaa:	2300      	movs	r3, #0
 800deac:	613b      	str	r3, [r7, #16]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	613b      	str	r3, [r7, #16]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	613b      	str	r3, [r7, #16]
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <HAL_SPI_Transmit+0x2d0>
 800dec8:	2301      	movs	r3, #1
 800deca:	77fb      	strb	r3, [r7, #31]
 800decc:	e003      	b.n	800ded6 <HAL_SPI_Transmit+0x2d8>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2201      	movs	r2, #1
 800ded2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800dede:	7ffb      	ldrb	r3, [r7, #31]
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <HAL_SPI_TransmitReceive>:
 800dee8:	b580      	push	{r7, lr}
 800deea:	b08a      	sub	sp, #40	; 0x28
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
 800def4:	807b      	strh	r3, [r7, #2]
 800def6:	2301      	movs	r3, #1
 800def8:	627b      	str	r3, [r7, #36]	; 0x24
 800defa:	2300      	movs	r3, #0
 800defc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800df06:	2b01      	cmp	r3, #1
 800df08:	d101      	bne.n	800df0e <HAL_SPI_TransmitReceive+0x26>
 800df0a:	2302      	movs	r3, #2
 800df0c:	e20a      	b.n	800e324 <HAL_SPI_TransmitReceive+0x43c>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2201      	movs	r2, #1
 800df12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800df16:	f7fc f8f5 	bl	800a104 <HAL_GetTick>
 800df1a:	61f8      	str	r0, [r7, #28]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df22:	76fb      	strb	r3, [r7, #27]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	887b      	ldrh	r3, [r7, #2]
 800df2c:	827b      	strh	r3, [r7, #18]
 800df2e:	887b      	ldrh	r3, [r7, #2]
 800df30:	823b      	strh	r3, [r7, #16]
 800df32:	7efb      	ldrb	r3, [r7, #27]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d00e      	beq.n	800df56 <HAL_SPI_TransmitReceive+0x6e>
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df3e:	d106      	bne.n	800df4e <HAL_SPI_TransmitReceive+0x66>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d102      	bne.n	800df4e <HAL_SPI_TransmitReceive+0x66>
 800df48:	7efb      	ldrb	r3, [r7, #27]
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d003      	beq.n	800df56 <HAL_SPI_TransmitReceive+0x6e>
 800df4e:	2302      	movs	r3, #2
 800df50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df54:	e1e0      	b.n	800e318 <HAL_SPI_TransmitReceive+0x430>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <HAL_SPI_TransmitReceive+0x80>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <HAL_SPI_TransmitReceive+0x80>
 800df62:	887b      	ldrh	r3, [r7, #2]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d103      	bne.n	800df70 <HAL_SPI_TransmitReceive+0x88>
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df6e:	e1d3      	b.n	800e318 <HAL_SPI_TransmitReceive+0x430>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b04      	cmp	r3, #4
 800df7a:	d003      	beq.n	800df84 <HAL_SPI_TransmitReceive+0x9c>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2205      	movs	r2, #5
 800df80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	661a      	str	r2, [r3, #96]	; 0x60
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	641a      	str	r2, [r3, #64]	; 0x40
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	887a      	ldrh	r2, [r7, #2]
 800df94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	887a      	ldrh	r2, [r7, #2]
 800df9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	639a      	str	r2, [r3, #56]	; 0x38
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	887a      	ldrh	r2, [r7, #2]
 800dfaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	887a      	ldrh	r2, [r7, #2]
 800dfb0:	879a      	strh	r2, [r3, #60]	; 0x3c
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	64da      	str	r2, [r3, #76]	; 0x4c
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	651a      	str	r2, [r3, #80]	; 0x50
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dfc6:	d802      	bhi.n	800dfce <HAL_SPI_TransmitReceive+0xe6>
 800dfc8:	8a3b      	ldrh	r3, [r7, #16]
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d908      	bls.n	800dfe0 <HAL_SPI_TransmitReceive+0xf8>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfdc:	605a      	str	r2, [r3, #4]
 800dfde:	e007      	b.n	800dff0 <HAL_SPI_TransmitReceive+0x108>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dfee:	605a      	str	r2, [r3, #4]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffa:	2b40      	cmp	r3, #64	; 0x40
 800dffc:	d007      	beq.n	800e00e <HAL_SPI_TransmitReceive+0x126>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e016:	f240 8081 	bls.w	800e11c <HAL_SPI_TransmitReceive+0x234>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <HAL_SPI_TransmitReceive+0x140>
 800e022:	8a7b      	ldrh	r3, [r7, #18]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d16d      	bne.n	800e104 <HAL_SPI_TransmitReceive+0x21c>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02c:	881a      	ldrh	r2, [r3, #0]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	60da      	str	r2, [r3, #12]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e038:	1c9a      	adds	r2, r3, #2
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	639a      	str	r2, [r3, #56]	; 0x38
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e042:	b29b      	uxth	r3, r3
 800e044:	3b01      	subs	r3, #1
 800e046:	b29a      	uxth	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e04c:	e05a      	b.n	800e104 <HAL_SPI_TransmitReceive+0x21c>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f003 0302 	and.w	r3, r3, #2
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d11b      	bne.n	800e094 <HAL_SPI_TransmitReceive+0x1ac>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e060:	b29b      	uxth	r3, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d016      	beq.n	800e094 <HAL_SPI_TransmitReceive+0x1ac>
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d113      	bne.n	800e094 <HAL_SPI_TransmitReceive+0x1ac>
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e070:	881a      	ldrh	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60da      	str	r2, [r3, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07c:	1c9a      	adds	r2, r3, #2
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	639a      	str	r2, [r3, #56]	; 0x38
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e086:	b29b      	uxth	r3, r3
 800e088:	3b01      	subs	r3, #1
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e090:	2300      	movs	r3, #0
 800e092:	627b      	str	r3, [r7, #36]	; 0x24
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d11c      	bne.n	800e0dc <HAL_SPI_TransmitReceive+0x1f4>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d016      	beq.n	800e0dc <HAL_SPI_TransmitReceive+0x1f4>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68da      	ldr	r2, [r3, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b8:	b292      	uxth	r2, r2
 800e0ba:	801a      	strh	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c0:	1c9a      	adds	r2, r3, #2
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	641a      	str	r2, [r3, #64]	; 0x40
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e0d8:	2301      	movs	r3, #1
 800e0da:	627b      	str	r3, [r7, #36]	; 0x24
 800e0dc:	f7fc f812 	bl	800a104 <HAL_GetTick>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	1ad3      	subs	r3, r2, r3
 800e0e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d80b      	bhi.n	800e104 <HAL_SPI_TransmitReceive+0x21c>
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f2:	d007      	beq.n	800e104 <HAL_SPI_TransmitReceive+0x21c>
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e102:	e109      	b.n	800e318 <HAL_SPI_TransmitReceive+0x430>
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e108:	b29b      	uxth	r3, r3
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d19f      	bne.n	800e04e <HAL_SPI_TransmitReceive+0x166>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e114:	b29b      	uxth	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d199      	bne.n	800e04e <HAL_SPI_TransmitReceive+0x166>
 800e11a:	e0e3      	b.n	800e2e4 <HAL_SPI_TransmitReceive+0x3fc>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d003      	beq.n	800e12c <HAL_SPI_TransmitReceive+0x244>
 800e124:	8a7b      	ldrh	r3, [r7, #18]
 800e126:	2b01      	cmp	r3, #1
 800e128:	f040 80cf 	bne.w	800e2ca <HAL_SPI_TransmitReceive+0x3e2>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e130:	b29b      	uxth	r3, r3
 800e132:	2b01      	cmp	r3, #1
 800e134:	d912      	bls.n	800e15c <HAL_SPI_TransmitReceive+0x274>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13a:	881a      	ldrh	r2, [r3, #0]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60da      	str	r2, [r3, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e146:	1c9a      	adds	r2, r3, #2
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	639a      	str	r2, [r3, #56]	; 0x38
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e150:	b29b      	uxth	r3, r3
 800e152:	3b02      	subs	r3, #2
 800e154:	b29a      	uxth	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e15a:	e0b6      	b.n	800e2ca <HAL_SPI_TransmitReceive+0x3e2>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	330c      	adds	r3, #12
 800e166:	7812      	ldrb	r2, [r2, #0]
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16e:	1c5a      	adds	r2, r3, #1
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	639a      	str	r2, [r3, #56]	; 0x38
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b01      	subs	r3, #1
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e182:	e0a2      	b.n	800e2ca <HAL_SPI_TransmitReceive+0x3e2>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f003 0302 	and.w	r3, r3, #2
 800e18e:	2b02      	cmp	r3, #2
 800e190:	d134      	bne.n	800e1fc <HAL_SPI_TransmitReceive+0x314>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e196:	b29b      	uxth	r3, r3
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d02f      	beq.n	800e1fc <HAL_SPI_TransmitReceive+0x314>
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d12c      	bne.n	800e1fc <HAL_SPI_TransmitReceive+0x314>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d912      	bls.n	800e1d2 <HAL_SPI_TransmitReceive+0x2ea>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b0:	881a      	ldrh	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	60da      	str	r2, [r3, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1bc:	1c9a      	adds	r2, r3, #2
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	639a      	str	r2, [r3, #56]	; 0x38
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	3b02      	subs	r3, #2
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e1d0:	e012      	b.n	800e1f8 <HAL_SPI_TransmitReceive+0x310>
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	330c      	adds	r3, #12
 800e1dc:	7812      	ldrb	r2, [r2, #0]
 800e1de:	701a      	strb	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	2b01      	cmp	r3, #1
 800e208:	d148      	bne.n	800e29c <HAL_SPI_TransmitReceive+0x3b4>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e210:	b29b      	uxth	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d042      	beq.n	800e29c <HAL_SPI_TransmitReceive+0x3b4>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d923      	bls.n	800e26a <HAL_SPI_TransmitReceive+0x382>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	68da      	ldr	r2, [r3, #12]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e22c:	b292      	uxth	r2, r2
 800e22e:	801a      	strh	r2, [r3, #0]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e234:	1c9a      	adds	r2, r3, #2
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	641a      	str	r2, [r3, #64]	; 0x40
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e240:	b29b      	uxth	r3, r3
 800e242:	3b02      	subs	r3, #2
 800e244:	b29a      	uxth	r2, r3
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e252:	b29b      	uxth	r3, r3
 800e254:	2b01      	cmp	r3, #1
 800e256:	d81f      	bhi.n	800e298 <HAL_SPI_TransmitReceive+0x3b0>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e266:	605a      	str	r2, [r3, #4]
 800e268:	e016      	b.n	800e298 <HAL_SPI_TransmitReceive+0x3b0>
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f103 020c 	add.w	r2, r3, #12
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e276:	7812      	ldrb	r2, [r2, #0]
 800e278:	b2d2      	uxtb	r2, r2
 800e27a:	701a      	strb	r2, [r3, #0]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	641a      	str	r2, [r3, #64]	; 0x40
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	b29a      	uxth	r2, r3
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e298:	2301      	movs	r3, #1
 800e29a:	627b      	str	r3, [r7, #36]	; 0x24
 800e29c:	f7fb ff32 	bl	800a104 <HAL_GetTick>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d803      	bhi.n	800e2b4 <HAL_SPI_TransmitReceive+0x3cc>
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b2:	d102      	bne.n	800e2ba <HAL_SPI_TransmitReceive+0x3d2>
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d107      	bne.n	800e2ca <HAL_SPI_TransmitReceive+0x3e2>
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e2c8:	e026      	b.n	800e318 <HAL_SPI_TransmitReceive+0x430>
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f47f af57 	bne.w	800e184 <HAL_SPI_TransmitReceive+0x29c>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f47f af50 	bne.w	800e184 <HAL_SPI_TransmitReceive+0x29c>
 800e2e4:	69fa      	ldr	r2, [r7, #28]
 800e2e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 fa51 	bl	800e790 <SPI_EndRxTxTransaction>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d005      	beq.n	800e300 <HAL_SPI_TransmitReceive+0x418>
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2220      	movs	r2, #32
 800e2fe:	661a      	str	r2, [r3, #96]	; 0x60
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e304:	2b00      	cmp	r3, #0
 800e306:	d003      	beq.n	800e310 <HAL_SPI_TransmitReceive+0x428>
 800e308:	2301      	movs	r3, #1
 800e30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e30e:	e003      	b.n	800e318 <HAL_SPI_TransmitReceive+0x430>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e324:	4618      	mov	r0, r3
 800e326:	3728      	adds	r7, #40	; 0x28
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HAL_SPI_IRQHandler>:
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	61bb      	str	r3, [r7, #24]
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10e      	bne.n	800e36c <HAL_SPI_IRQHandler+0x40>
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	f003 0301 	and.w	r3, r3, #1
 800e354:	2b00      	cmp	r3, #0
 800e356:	d009      	beq.n	800e36c <HAL_SPI_IRQHandler+0x40>
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d004      	beq.n	800e36c <HAL_SPI_IRQHandler+0x40>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	4798      	blx	r3
 800e36a:	e0ce      	b.n	800e50a <HAL_SPI_IRQHandler+0x1de>
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	f003 0302 	and.w	r3, r3, #2
 800e372:	2b00      	cmp	r3, #0
 800e374:	d009      	beq.n	800e38a <HAL_SPI_IRQHandler+0x5e>
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d004      	beq.n	800e38a <HAL_SPI_IRQHandler+0x5e>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	4798      	blx	r3
 800e388:	e0bf      	b.n	800e50a <HAL_SPI_IRQHandler+0x1de>
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	f003 0320 	and.w	r3, r3, #32
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <HAL_SPI_IRQHandler+0x7e>
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d105      	bne.n	800e3aa <HAL_SPI_IRQHandler+0x7e>
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 80b0 	beq.w	800e50a <HAL_SPI_IRQHandler+0x1de>
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	f003 0320 	and.w	r3, r3, #32
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 80aa 	beq.w	800e50a <HAL_SPI_IRQHandler+0x1de>
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d023      	beq.n	800e408 <HAL_SPI_IRQHandler+0xdc>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b03      	cmp	r3, #3
 800e3ca:	d011      	beq.n	800e3f0 <HAL_SPI_IRQHandler+0xc4>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3d0:	f043 0204 	orr.w	r2, r3, #4
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	661a      	str	r2, [r3, #96]	; 0x60
 800e3d8:	2300      	movs	r3, #0
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	617b      	str	r3, [r7, #20]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	617b      	str	r3, [r7, #20]
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	e00b      	b.n	800e408 <HAL_SPI_IRQHandler+0xdc>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	613b      	str	r3, [r7, #16]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	613b      	str	r3, [r7, #16]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	613b      	str	r3, [r7, #16]
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	e080      	b.n	800e50a <HAL_SPI_IRQHandler+0x1de>
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	f003 0320 	and.w	r3, r3, #32
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d014      	beq.n	800e43c <HAL_SPI_IRQHandler+0x110>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e416:	f043 0201 	orr.w	r2, r3, #1
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	661a      	str	r2, [r3, #96]	; 0x60
 800e41e:	2300      	movs	r3, #0
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00c      	beq.n	800e460 <HAL_SPI_IRQHandler+0x134>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e44a:	f043 0208 	orr.w	r2, r3, #8
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	661a      	str	r2, [r3, #96]	; 0x60
 800e452:	2300      	movs	r3, #0
 800e454:	60bb      	str	r3, [r7, #8]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	60bb      	str	r3, [r7, #8]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e464:	2b00      	cmp	r3, #0
 800e466:	d04f      	beq.n	800e508 <HAL_SPI_IRQHandler+0x1dc>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e476:	605a      	str	r2, [r3, #4]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2201      	movs	r2, #1
 800e47c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	f003 0302 	and.w	r3, r3, #2
 800e486:	2b00      	cmp	r3, #0
 800e488:	d104      	bne.n	800e494 <HAL_SPI_IRQHandler+0x168>
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	2b00      	cmp	r3, #0
 800e492:	d034      	beq.n	800e4fe <HAL_SPI_IRQHandler+0x1d2>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f022 0203 	bic.w	r2, r2, #3
 800e4a2:	605a      	str	r2, [r3, #4]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d011      	beq.n	800e4d0 <HAL_SPI_IRQHandler+0x1a4>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4b0:	4a17      	ldr	r2, [pc, #92]	; (800e510 <HAL_SPI_IRQHandler+0x1e4>)
 800e4b2:	639a      	str	r2, [r3, #56]	; 0x38
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fc f862 	bl	800a582 <HAL_DMA_Abort_IT>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d005      	beq.n	800e4d0 <HAL_SPI_IRQHandler+0x1a4>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	661a      	str	r2, [r3, #96]	; 0x60
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d016      	beq.n	800e506 <HAL_SPI_IRQHandler+0x1da>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4dc:	4a0c      	ldr	r2, [pc, #48]	; (800e510 <HAL_SPI_IRQHandler+0x1e4>)
 800e4de:	639a      	str	r2, [r3, #56]	; 0x38
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fc f84c 	bl	800a582 <HAL_DMA_Abort_IT>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00a      	beq.n	800e506 <HAL_SPI_IRQHandler+0x1da>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	661a      	str	r2, [r3, #96]	; 0x60
 800e4fc:	e003      	b.n	800e506 <HAL_SPI_IRQHandler+0x1da>
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f808 	bl	800e514 <HAL_SPI_ErrorCallback>
 800e504:	e000      	b.n	800e508 <HAL_SPI_IRQHandler+0x1dc>
 800e506:	bf00      	nop
 800e508:	bf00      	nop
 800e50a:	3720      	adds	r7, #32
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	0800e529 	.word	0x0800e529

0800e514 <HAL_SPI_ErrorCallback>:
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <SPI_DMAAbortOnError>:
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e534:	60fb      	str	r3, [r7, #12]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2200      	movs	r2, #0
 800e53a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f7ff ffe5 	bl	800e514 <HAL_SPI_ErrorCallback>
 800e54a:	bf00      	nop
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
	...

0800e554 <SPI_WaitFlagStateUntilTimeout>:
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	603b      	str	r3, [r7, #0]
 800e560:	4613      	mov	r3, r2
 800e562:	71fb      	strb	r3, [r7, #7]
 800e564:	f7fb fdce 	bl	800a104 <HAL_GetTick>
 800e568:	4602      	mov	r2, r0
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	1a9b      	subs	r3, r3, r2
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	4413      	add	r3, r2
 800e572:	61fb      	str	r3, [r7, #28]
 800e574:	f7fb fdc6 	bl	800a104 <HAL_GetTick>
 800e578:	61b8      	str	r0, [r7, #24]
 800e57a:	4b39      	ldr	r3, [pc, #228]	; (800e660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	015b      	lsls	r3, r3, #5
 800e580:	0d1b      	lsrs	r3, r3, #20
 800e582:	69fa      	ldr	r2, [r7, #28]
 800e584:	fb02 f303 	mul.w	r3, r2, r3
 800e588:	617b      	str	r3, [r7, #20]
 800e58a:	e054      	b.n	800e636 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e592:	d050      	beq.n	800e636 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800e594:	f7fb fdb6 	bl	800a104 <HAL_GetTick>
 800e598:	4602      	mov	r2, r0
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	1ad3      	subs	r3, r2, r3
 800e59e:	69fa      	ldr	r2, [r7, #28]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d902      	bls.n	800e5aa <SPI_WaitFlagStateUntilTimeout+0x56>
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d13d      	bne.n	800e626 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	685a      	ldr	r2, [r3, #4]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e5b8:	605a      	str	r2, [r3, #4]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5c2:	d111      	bne.n	800e5e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5cc:	d004      	beq.n	800e5d8 <SPI_WaitFlagStateUntilTimeout+0x84>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5d6:	d107      	bne.n	800e5e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5f0:	d10f      	bne.n	800e612 <SPI_WaitFlagStateUntilTimeout+0xbe>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e622:	2303      	movs	r3, #3
 800e624:	e017      	b.n	800e656 <SPI_WaitFlagStateUntilTimeout+0x102>
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800e62c:	2300      	movs	r3, #0
 800e62e:	61fb      	str	r3, [r7, #28]
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	3b01      	subs	r3, #1
 800e634:	617b      	str	r3, [r7, #20]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	689a      	ldr	r2, [r3, #8]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	4013      	ands	r3, r2
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	429a      	cmp	r2, r3
 800e644:	bf0c      	ite	eq
 800e646:	2301      	moveq	r3, #1
 800e648:	2300      	movne	r3, #0
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	461a      	mov	r2, r3
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	429a      	cmp	r2, r3
 800e652:	d19b      	bne.n	800e58c <SPI_WaitFlagStateUntilTimeout+0x38>
 800e654:	2300      	movs	r3, #0
 800e656:	4618      	mov	r0, r3
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	2000006c 	.word	0x2000006c

0800e664 <SPI_WaitFifoStateUntilTimeout>:
 800e664:	b580      	push	{r7, lr}
 800e666:	b08a      	sub	sp, #40	; 0x28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	603b      	str	r3, [r7, #0]
 800e672:	2300      	movs	r3, #0
 800e674:	75fb      	strb	r3, [r7, #23]
 800e676:	f7fb fd45 	bl	800a104 <HAL_GetTick>
 800e67a:	4602      	mov	r2, r0
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	1a9b      	subs	r3, r3, r2
 800e680:	683a      	ldr	r2, [r7, #0]
 800e682:	4413      	add	r3, r2
 800e684:	627b      	str	r3, [r7, #36]	; 0x24
 800e686:	f7fb fd3d 	bl	800a104 <HAL_GetTick>
 800e68a:	6238      	str	r0, [r7, #32]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	330c      	adds	r3, #12
 800e692:	61fb      	str	r3, [r7, #28]
 800e694:	4b3d      	ldr	r3, [pc, #244]	; (800e78c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	4613      	mov	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	00da      	lsls	r2, r3, #3
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	0d1b      	lsrs	r3, r3, #20
 800e6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6a6:	fb02 f303 	mul.w	r3, r2, r3
 800e6aa:	61bb      	str	r3, [r7, #24]
 800e6ac:	e060      	b.n	800e770 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e6b4:	d107      	bne.n	800e6c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d104      	bne.n	800e6c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	75fb      	strb	r3, [r7, #23]
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6cc:	d050      	beq.n	800e770 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800e6ce:	f7fb fd19 	bl	800a104 <HAL_GetTick>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d902      	bls.n	800e6e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d13d      	bne.n	800e760 <SPI_WaitFifoStateUntilTimeout+0xfc>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e6f2:	605a      	str	r2, [r3, #4]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6fc:	d111      	bne.n	800e722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e706:	d004      	beq.n	800e712 <SPI_WaitFifoStateUntilTimeout+0xae>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e710:	d107      	bne.n	800e722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e72a:	d10f      	bne.n	800e74c <SPI_WaitFifoStateUntilTimeout+0xe8>
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e75c:	2303      	movs	r3, #3
 800e75e:	e010      	b.n	800e782 <SPI_WaitFifoStateUntilTimeout+0x11e>
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d101      	bne.n	800e76a <SPI_WaitFifoStateUntilTimeout+0x106>
 800e766:	2300      	movs	r3, #0
 800e768:	627b      	str	r3, [r7, #36]	; 0x24
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	61bb      	str	r3, [r7, #24]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	689a      	ldr	r2, [r3, #8]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	4013      	ands	r3, r2
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d196      	bne.n	800e6ae <SPI_WaitFifoStateUntilTimeout+0x4a>
 800e780:	2300      	movs	r3, #0
 800e782:	4618      	mov	r0, r3
 800e784:	3728      	adds	r7, #40	; 0x28
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	2000006c 	.word	0x2000006c

0800e790 <SPI_EndRxTxTransaction>:
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff ff5b 	bl	800e664 <SPI_WaitFifoStateUntilTimeout>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d007      	beq.n	800e7c4 <SPI_EndRxTxTransaction+0x34>
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7b8:	f043 0220 	orr.w	r2, r3, #32
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	661a      	str	r2, [r3, #96]	; 0x60
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	e027      	b.n	800e814 <SPI_EndRxTxTransaction+0x84>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	2180      	movs	r1, #128	; 0x80
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f7ff fec0 	bl	800e554 <SPI_WaitFlagStateUntilTimeout>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <SPI_EndRxTxTransaction+0x5a>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7de:	f043 0220 	orr.w	r2, r3, #32
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	661a      	str	r2, [r3, #96]	; 0x60
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e014      	b.n	800e814 <SPI_EndRxTxTransaction+0x84>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff ff34 	bl	800e664 <SPI_WaitFifoStateUntilTimeout>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d007      	beq.n	800e812 <SPI_EndRxTxTransaction+0x82>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e806:	f043 0220 	orr.w	r2, r3, #32
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	661a      	str	r2, [r3, #96]	; 0x60
 800e80e:	2303      	movs	r3, #3
 800e810:	e000      	b.n	800e814 <SPI_EndRxTxTransaction+0x84>
 800e812:	2300      	movs	r3, #0
 800e814:	4618      	mov	r0, r3
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <HAL_TIM_Encoder_Init>:
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <HAL_TIM_Encoder_Init+0x14>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e097      	b.n	800e960 <HAL_TIM_Encoder_Init+0x144>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d106      	bne.n	800e84a <HAL_TIM_Encoder_Init+0x2e>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7fa feef 	bl	8009628 <HAL_TIM_Encoder_MspInit>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2202      	movs	r2, #2
 800e84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	6812      	ldr	r2, [r2, #0]
 800e85c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e860:	f023 0307 	bic.w	r3, r3, #7
 800e864:	6093      	str	r3, [r2, #8]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3304      	adds	r3, #4
 800e86e:	4619      	mov	r1, r3
 800e870:	4610      	mov	r0, r2
 800e872:	f000 f879 	bl	800e968 <TIM_Base_SetConfig>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	617b      	str	r3, [r7, #20]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	613b      	str	r3, [r7, #16]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	60fb      	str	r3, [r7, #12]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	4313      	orrs	r3, r2
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e89e:	f023 0303 	bic.w	r3, r3, #3
 800e8a2:	613b      	str	r3, [r7, #16]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	689a      	ldr	r2, [r3, #8]
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	021b      	lsls	r3, r3, #8
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	613b      	str	r3, [r7, #16]
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e8bc:	f023 030c 	bic.w	r3, r3, #12
 800e8c0:	613b      	str	r3, [r7, #16]
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e8c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e8cc:	613b      	str	r3, [r7, #16]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	68da      	ldr	r2, [r3, #12]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	69db      	ldr	r3, [r3, #28]
 800e8d6:	021b      	lsls	r3, r3, #8
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	693a      	ldr	r2, [r7, #16]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	613b      	str	r3, [r7, #16]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	011a      	lsls	r2, r3, #4
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	6a1b      	ldr	r3, [r3, #32]
 800e8ea:	031b      	lsls	r3, r3, #12
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	613b      	str	r3, [r7, #16]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e902:	60fb      	str	r3, [r7, #12]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	685a      	ldr	r2, [r3, #4]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	695b      	ldr	r3, [r3, #20]
 800e90c:	011b      	lsls	r3, r3, #4
 800e90e:	4313      	orrs	r3, r2
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	4313      	orrs	r3, r2
 800e914:	60fb      	str	r3, [r7, #12]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	609a      	str	r2, [r3, #8]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	693a      	ldr	r2, [r7, #16]
 800e924:	619a      	str	r2, [r3, #24]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	621a      	str	r2, [r3, #32]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2201      	movs	r2, #1
 800e932:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2201      	movs	r2, #1
 800e942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2201      	movs	r2, #1
 800e95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e95e:	2300      	movs	r3, #0
 800e960:	4618      	mov	r0, r3
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <TIM_Base_SetConfig>:
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	4a4c      	ldr	r2, [pc, #304]	; (800eaac <TIM_Base_SetConfig+0x144>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d017      	beq.n	800e9b0 <TIM_Base_SetConfig+0x48>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e986:	d013      	beq.n	800e9b0 <TIM_Base_SetConfig+0x48>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	4a49      	ldr	r2, [pc, #292]	; (800eab0 <TIM_Base_SetConfig+0x148>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d00f      	beq.n	800e9b0 <TIM_Base_SetConfig+0x48>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4a48      	ldr	r2, [pc, #288]	; (800eab4 <TIM_Base_SetConfig+0x14c>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d00b      	beq.n	800e9b0 <TIM_Base_SetConfig+0x48>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4a47      	ldr	r2, [pc, #284]	; (800eab8 <TIM_Base_SetConfig+0x150>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d007      	beq.n	800e9b0 <TIM_Base_SetConfig+0x48>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4a46      	ldr	r2, [pc, #280]	; (800eabc <TIM_Base_SetConfig+0x154>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d003      	beq.n	800e9b0 <TIM_Base_SetConfig+0x48>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a45      	ldr	r2, [pc, #276]	; (800eac0 <TIM_Base_SetConfig+0x158>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d108      	bne.n	800e9c2 <TIM_Base_SetConfig+0x5a>
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4a39      	ldr	r2, [pc, #228]	; (800eaac <TIM_Base_SetConfig+0x144>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d023      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9d0:	d01f      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a36      	ldr	r2, [pc, #216]	; (800eab0 <TIM_Base_SetConfig+0x148>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d01b      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4a35      	ldr	r2, [pc, #212]	; (800eab4 <TIM_Base_SetConfig+0x14c>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d017      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4a34      	ldr	r2, [pc, #208]	; (800eab8 <TIM_Base_SetConfig+0x150>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d013      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4a33      	ldr	r2, [pc, #204]	; (800eabc <TIM_Base_SetConfig+0x154>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d00f      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a33      	ldr	r2, [pc, #204]	; (800eac4 <TIM_Base_SetConfig+0x15c>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d00b      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4a32      	ldr	r2, [pc, #200]	; (800eac8 <TIM_Base_SetConfig+0x160>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d007      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a31      	ldr	r2, [pc, #196]	; (800eacc <TIM_Base_SetConfig+0x164>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d003      	beq.n	800ea12 <TIM_Base_SetConfig+0xaa>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a2c      	ldr	r2, [pc, #176]	; (800eac0 <TIM_Base_SetConfig+0x158>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d108      	bne.n	800ea24 <TIM_Base_SetConfig+0xbc>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea18:	60fb      	str	r3, [r7, #12]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	695b      	ldr	r3, [r3, #20]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	601a      	str	r2, [r3, #0]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	689a      	ldr	r2, [r3, #8]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	62da      	str	r2, [r3, #44]	; 0x2c
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	629a      	str	r2, [r3, #40]	; 0x28
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4a18      	ldr	r2, [pc, #96]	; (800eaac <TIM_Base_SetConfig+0x144>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d013      	beq.n	800ea78 <TIM_Base_SetConfig+0x110>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a1a      	ldr	r2, [pc, #104]	; (800eabc <TIM_Base_SetConfig+0x154>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d00f      	beq.n	800ea78 <TIM_Base_SetConfig+0x110>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a1a      	ldr	r2, [pc, #104]	; (800eac4 <TIM_Base_SetConfig+0x15c>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d00b      	beq.n	800ea78 <TIM_Base_SetConfig+0x110>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4a19      	ldr	r2, [pc, #100]	; (800eac8 <TIM_Base_SetConfig+0x160>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d007      	beq.n	800ea78 <TIM_Base_SetConfig+0x110>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4a18      	ldr	r2, [pc, #96]	; (800eacc <TIM_Base_SetConfig+0x164>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d003      	beq.n	800ea78 <TIM_Base_SetConfig+0x110>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4a13      	ldr	r2, [pc, #76]	; (800eac0 <TIM_Base_SetConfig+0x158>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d103      	bne.n	800ea80 <TIM_Base_SetConfig+0x118>
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	691a      	ldr	r2, [r3, #16]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	631a      	str	r2, [r3, #48]	; 0x30
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	615a      	str	r2, [r3, #20]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	f003 0301 	and.w	r3, r3, #1
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d105      	bne.n	800ea9e <TIM_Base_SetConfig+0x136>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	f023 0201 	bic.w	r2, r3, #1
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	611a      	str	r2, [r3, #16]
 800ea9e:	bf00      	nop
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	40012c00 	.word	0x40012c00
 800eab0:	40000400 	.word	0x40000400
 800eab4:	40000800 	.word	0x40000800
 800eab8:	40000c00 	.word	0x40000c00
 800eabc:	40013400 	.word	0x40013400
 800eac0:	40015000 	.word	0x40015000
 800eac4:	40014000 	.word	0x40014000
 800eac8:	40014400 	.word	0x40014400
 800eacc:	40014800 	.word	0x40014800

0800ead0 <HAL_TIMEx_MasterConfigSynchronization>:
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d101      	bne.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eae4:	2302      	movs	r3, #2
 800eae6:	e074      	b.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2202      	movs	r2, #2
 800eaf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	60fb      	str	r3, [r7, #12]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	60bb      	str	r3, [r7, #8]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a34      	ldr	r2, [pc, #208]	; (800ebe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d009      	beq.n	800eb26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a33      	ldr	r2, [pc, #204]	; (800ebe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d004      	beq.n	800eb26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a31      	ldr	r2, [pc, #196]	; (800ebe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d108      	bne.n	800eb38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eb2c:	60fb      	str	r3, [r7, #12]
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	4313      	orrs	r3, r2
 800eb36:	60fb      	str	r3, [r7, #12]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800eb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	60fb      	str	r3, [r7, #12]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	605a      	str	r2, [r3, #4]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4a21      	ldr	r2, [pc, #132]	; (800ebe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d022      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb68:	d01d      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4a1f      	ldr	r2, [pc, #124]	; (800ebec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d018      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a1d      	ldr	r2, [pc, #116]	; (800ebf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d013      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a1c      	ldr	r2, [pc, #112]	; (800ebf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d00e      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a15      	ldr	r2, [pc, #84]	; (800ebe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d009      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a18      	ldr	r2, [pc, #96]	; (800ebf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d004      	beq.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a11      	ldr	r2, [pc, #68]	; (800ebe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d10c      	bne.n	800ebc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebac:	60bb      	str	r3, [r7, #8]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	60bb      	str	r3, [r7, #8]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	609a      	str	r2, [r3, #8]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3714      	adds	r7, #20
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	40012c00 	.word	0x40012c00
 800ebe4:	40013400 	.word	0x40013400
 800ebe8:	40015000 	.word	0x40015000
 800ebec:	40000400 	.word	0x40000400
 800ebf0:	40000800 	.word	0x40000800
 800ebf4:	40000c00 	.word	0x40000c00
 800ebf8:	40014000 	.word	0x40014000

0800ebfc <HAL_UART_Init>:
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d101      	bne.n	800ec0e <HAL_UART_Init+0x12>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e042      	b.n	800ec94 <HAL_UART_Init+0x98>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d106      	bne.n	800ec26 <HAL_UART_Init+0x2a>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7fb f8ef 	bl	8009e04 <HAL_UART_MspInit>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2224      	movs	r2, #36	; 0x24
 800ec2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f022 0201 	bic.w	r2, r2, #1
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <HAL_UART_Init+0x50>
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fe68 	bl	800f91c <UART_AdvFeatureConfig>
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 fb69 	bl	800f324 <UART_SetConfig>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d101      	bne.n	800ec5c <HAL_UART_Init+0x60>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e01b      	b.n	800ec94 <HAL_UART_Init+0x98>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec6a:	605a      	str	r2, [r3, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec7a:	609a      	str	r2, [r3, #8]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f042 0201 	orr.w	r2, r2, #1
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fee7 	bl	800fa60 <UART_CheckIdleState>
 800ec92:	4603      	mov	r3, r0
 800ec94:	4618      	mov	r0, r3
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <HAL_UART_IRQHandler>:
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b0ba      	sub	sp, #232	; 0xe8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	69db      	ldr	r3, [r3, #28]
 800ecaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ecc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ecc6:	f640 030f 	movw	r3, #2063	; 0x80f
 800ecca:	4013      	ands	r3, r2
 800eccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ecd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d11b      	bne.n	800ed10 <HAL_UART_IRQHandler+0x74>
 800ecd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecdc:	f003 0320 	and.w	r3, r3, #32
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d015      	beq.n	800ed10 <HAL_UART_IRQHandler+0x74>
 800ece4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ece8:	f003 0320 	and.w	r3, r3, #32
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d105      	bne.n	800ecfc <HAL_UART_IRQHandler+0x60>
 800ecf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d009      	beq.n	800ed10 <HAL_UART_IRQHandler+0x74>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 82e3 	beq.w	800f2cc <HAL_UART_IRQHandler+0x630>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	4798      	blx	r3
 800ed0e:	e2dd      	b.n	800f2cc <HAL_UART_IRQHandler+0x630>
 800ed10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8123 	beq.w	800ef60 <HAL_UART_IRQHandler+0x2c4>
 800ed1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed1e:	4b8d      	ldr	r3, [pc, #564]	; (800ef54 <HAL_UART_IRQHandler+0x2b8>)
 800ed20:	4013      	ands	r3, r2
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d106      	bne.n	800ed34 <HAL_UART_IRQHandler+0x98>
 800ed26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ed2a:	4b8b      	ldr	r3, [pc, #556]	; (800ef58 <HAL_UART_IRQHandler+0x2bc>)
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 8116 	beq.w	800ef60 <HAL_UART_IRQHandler+0x2c4>
 800ed34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed38:	f003 0301 	and.w	r3, r3, #1
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d011      	beq.n	800ed64 <HAL_UART_IRQHandler+0xc8>
 800ed40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00b      	beq.n	800ed64 <HAL_UART_IRQHandler+0xc8>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2201      	movs	r2, #1
 800ed52:	621a      	str	r2, [r3, #32]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed5a:	f043 0201 	orr.w	r2, r3, #1
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ed64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed68:	f003 0302 	and.w	r3, r3, #2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d011      	beq.n	800ed94 <HAL_UART_IRQHandler+0xf8>
 800ed70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed74:	f003 0301 	and.w	r3, r3, #1
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00b      	beq.n	800ed94 <HAL_UART_IRQHandler+0xf8>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2202      	movs	r2, #2
 800ed82:	621a      	str	r2, [r3, #32]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed8a:	f043 0204 	orr.w	r2, r3, #4
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ed94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed98:	f003 0304 	and.w	r3, r3, #4
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d011      	beq.n	800edc4 <HAL_UART_IRQHandler+0x128>
 800eda0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00b      	beq.n	800edc4 <HAL_UART_IRQHandler+0x128>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2204      	movs	r2, #4
 800edb2:	621a      	str	r2, [r3, #32]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edba:	f043 0202 	orr.w	r2, r3, #2
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800edc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edc8:	f003 0308 	and.w	r3, r3, #8
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d017      	beq.n	800ee00 <HAL_UART_IRQHandler+0x164>
 800edd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edd4:	f003 0320 	and.w	r3, r3, #32
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d105      	bne.n	800ede8 <HAL_UART_IRQHandler+0x14c>
 800eddc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ede0:	4b5c      	ldr	r3, [pc, #368]	; (800ef54 <HAL_UART_IRQHandler+0x2b8>)
 800ede2:	4013      	ands	r3, r2
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00b      	beq.n	800ee00 <HAL_UART_IRQHandler+0x164>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2208      	movs	r2, #8
 800edee:	621a      	str	r2, [r3, #32]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edf6:	f043 0208 	orr.w	r2, r3, #8
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ee00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d012      	beq.n	800ee32 <HAL_UART_IRQHandler+0x196>
 800ee0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00c      	beq.n	800ee32 <HAL_UART_IRQHandler+0x196>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee20:	621a      	str	r2, [r3, #32]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee28:	f043 0220 	orr.w	r2, r3, #32
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 8249 	beq.w	800f2d0 <HAL_UART_IRQHandler+0x634>
 800ee3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee42:	f003 0320 	and.w	r3, r3, #32
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d013      	beq.n	800ee72 <HAL_UART_IRQHandler+0x1d6>
 800ee4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee4e:	f003 0320 	and.w	r3, r3, #32
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d105      	bne.n	800ee62 <HAL_UART_IRQHandler+0x1c6>
 800ee56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d007      	beq.n	800ee72 <HAL_UART_IRQHandler+0x1d6>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d003      	beq.n	800ee72 <HAL_UART_IRQHandler+0x1d6>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	4798      	blx	r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee86:	2b40      	cmp	r3, #64	; 0x40
 800ee88:	d005      	beq.n	800ee96 <HAL_UART_IRQHandler+0x1fa>
 800ee8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d054      	beq.n	800ef40 <HAL_UART_IRQHandler+0x2a4>
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 fef9 	bl	800fc8e <UART_EndRxTransfer>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea6:	2b40      	cmp	r3, #64	; 0x40
 800eea8:	d146      	bne.n	800ef38 <HAL_UART_IRQHandler+0x29c>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eeb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eeb8:	e853 3f00 	ldrex	r3, [r3]
 800eebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	3308      	adds	r3, #8
 800eed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eeda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800eee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eee6:	e841 2300 	strex	r3, r2, [r1]
 800eeea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eeee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1d9      	bne.n	800eeaa <HAL_UART_IRQHandler+0x20e>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d017      	beq.n	800ef30 <HAL_UART_IRQHandler+0x294>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef06:	4a15      	ldr	r2, [pc, #84]	; (800ef5c <HAL_UART_IRQHandler+0x2c0>)
 800ef08:	639a      	str	r2, [r3, #56]	; 0x38
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fb fb36 	bl	800a582 <HAL_DMA_Abort_IT>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d019      	beq.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	4798      	blx	r3
 800ef2e:	e00f      	b.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f9e1 	bl	800f2f8 <HAL_UART_ErrorCallback>
 800ef36:	e00b      	b.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f9dd 	bl	800f2f8 <HAL_UART_ErrorCallback>
 800ef3e:	e007      	b.n	800ef50 <HAL_UART_IRQHandler+0x2b4>
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f9d9 	bl	800f2f8 <HAL_UART_ErrorCallback>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ef4e:	e1bf      	b.n	800f2d0 <HAL_UART_IRQHandler+0x634>
 800ef50:	bf00      	nop
 800ef52:	e1bd      	b.n	800f2d0 <HAL_UART_IRQHandler+0x634>
 800ef54:	10000001 	.word	0x10000001
 800ef58:	04000120 	.word	0x04000120
 800ef5c:	0800fd5b 	.word	0x0800fd5b
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	f040 8153 	bne.w	800f210 <HAL_UART_IRQHandler+0x574>
 800ef6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef6e:	f003 0310 	and.w	r3, r3, #16
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 814c 	beq.w	800f210 <HAL_UART_IRQHandler+0x574>
 800ef78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef7c:	f003 0310 	and.w	r3, r3, #16
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f000 8145 	beq.w	800f210 <HAL_UART_IRQHandler+0x574>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2210      	movs	r2, #16
 800ef8c:	621a      	str	r2, [r3, #32]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef98:	2b40      	cmp	r3, #64	; 0x40
 800ef9a:	f040 80bb 	bne.w	800f114 <HAL_UART_IRQHandler+0x478>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800efac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 818f 	beq.w	800f2d4 <HAL_UART_IRQHandler+0x638>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efc0:	429a      	cmp	r2, r3
 800efc2:	f080 8187 	bcs.w	800f2d4 <HAL_UART_IRQHandler+0x638>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 0320 	and.w	r3, r3, #32
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f040 8087 	bne.w	800f0f2 <HAL_UART_IRQHandler+0x456>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800efec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eff0:	e853 3f00 	ldrex	r3, [r3]
 800eff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800effc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	461a      	mov	r2, r3
 800f00a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f00e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f012:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f01a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f01e:	e841 2300 	strex	r3, r2, [r1]
 800f022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1da      	bne.n	800efe4 <HAL_UART_IRQHandler+0x348>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3308      	adds	r3, #8
 800f034:	677b      	str	r3, [r7, #116]	; 0x74
 800f036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f038:	e853 3f00 	ldrex	r3, [r3]
 800f03c:	673b      	str	r3, [r7, #112]	; 0x70
 800f03e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f040:	f023 0301 	bic.w	r3, r3, #1
 800f044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3308      	adds	r3, #8
 800f04e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f056:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f058:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f05a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f05e:	e841 2300 	strex	r3, r2, [r1]
 800f062:	67bb      	str	r3, [r7, #120]	; 0x78
 800f064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1e1      	bne.n	800f02e <HAL_UART_IRQHandler+0x392>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3308      	adds	r3, #8
 800f070:	663b      	str	r3, [r7, #96]	; 0x60
 800f072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f074:	e853 3f00 	ldrex	r3, [r3]
 800f078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f07a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f07c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3308      	adds	r3, #8
 800f08a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f08e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f090:	66bb      	str	r3, [r7, #104]	; 0x68
 800f092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f096:	e841 2300 	strex	r3, r2, [r1]
 800f09a:	667b      	str	r3, [r7, #100]	; 0x64
 800f09c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1e3      	bne.n	800f06a <HAL_UART_IRQHandler+0x3ce>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2220      	movs	r2, #32
 800f0a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	66da      	str	r2, [r3, #108]	; 0x6c
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0b8:	e853 3f00 	ldrex	r3, [r3]
 800f0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0c0:	f023 0310 	bic.w	r3, r3, #16
 800f0c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0d4:	657a      	str	r2, [r7, #84]	; 0x54
 800f0d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0da:	e841 2300 	strex	r3, r2, [r1]
 800f0de:	653b      	str	r3, [r7, #80]	; 0x50
 800f0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1e4      	bne.n	800f0b0 <HAL_UART_IRQHandler+0x414>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fb f9ef 	bl	800a4d0 <HAL_DMA_Abort>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2202      	movs	r2, #2
 800f0f6:	671a      	str	r2, [r3, #112]	; 0x70
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f104:	b29b      	uxth	r3, r3
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	b29b      	uxth	r3, r3
 800f10a:	4619      	mov	r1, r3
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 f8fd 	bl	800f30c <HAL_UARTEx_RxEventCallback>
 800f112:	e0df      	b.n	800f2d4 <HAL_UART_IRQHandler+0x638>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f120:	b29b      	uxth	r3, r3
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f12e:	b29b      	uxth	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 80d1 	beq.w	800f2d8 <HAL_UART_IRQHandler+0x63c>
 800f136:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 80cc 	beq.w	800f2d8 <HAL_UART_IRQHandler+0x63c>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	63bb      	str	r3, [r7, #56]	; 0x38
 800f146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f148:	e853 3f00 	ldrex	r3, [r3]
 800f14c:	637b      	str	r3, [r7, #52]	; 0x34
 800f14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	461a      	mov	r2, r3
 800f15e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f162:	647b      	str	r3, [r7, #68]	; 0x44
 800f164:	643a      	str	r2, [r7, #64]	; 0x40
 800f166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f16a:	e841 2300 	strex	r3, r2, [r1]
 800f16e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1e4      	bne.n	800f140 <HAL_UART_IRQHandler+0x4a4>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3308      	adds	r3, #8
 800f17c:	627b      	str	r3, [r7, #36]	; 0x24
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	e853 3f00 	ldrex	r3, [r3]
 800f184:	623b      	str	r3, [r7, #32]
 800f186:	6a3b      	ldr	r3, [r7, #32]
 800f188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f18c:	f023 0301 	bic.w	r3, r3, #1
 800f190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	3308      	adds	r3, #8
 800f19a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f19e:	633a      	str	r2, [r7, #48]	; 0x30
 800f1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1a6:	e841 2300 	strex	r3, r2, [r1]
 800f1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1e1      	bne.n	800f176 <HAL_UART_IRQHandler+0x4da>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2220      	movs	r2, #32
 800f1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	675a      	str	r2, [r3, #116]	; 0x74
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	613b      	str	r3, [r7, #16]
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	e853 3f00 	ldrex	r3, [r3]
 800f1d2:	60fb      	str	r3, [r7, #12]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f023 0310 	bic.w	r3, r3, #16
 800f1da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f1e8:	61fb      	str	r3, [r7, #28]
 800f1ea:	61ba      	str	r2, [r7, #24]
 800f1ec:	69b9      	ldr	r1, [r7, #24]
 800f1ee:	69fa      	ldr	r2, [r7, #28]
 800f1f0:	e841 2300 	strex	r3, r2, [r1]
 800f1f4:	617b      	str	r3, [r7, #20]
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1e4      	bne.n	800f1c6 <HAL_UART_IRQHandler+0x52a>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2202      	movs	r2, #2
 800f200:	671a      	str	r2, [r3, #112]	; 0x70
 800f202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f206:	4619      	mov	r1, r3
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 f87f 	bl	800f30c <HAL_UARTEx_RxEventCallback>
 800f20e:	e063      	b.n	800f2d8 <HAL_UART_IRQHandler+0x63c>
 800f210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00e      	beq.n	800f23a <HAL_UART_IRQHandler+0x59e>
 800f21c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d008      	beq.n	800f23a <HAL_UART_IRQHandler+0x59e>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f230:	621a      	str	r2, [r3, #32]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 fdd2 	bl	800fddc <HAL_UARTEx_WakeupCallback>
 800f238:	e051      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f242:	2b00      	cmp	r3, #0
 800f244:	d014      	beq.n	800f270 <HAL_UART_IRQHandler+0x5d4>
 800f246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d105      	bne.n	800f25e <HAL_UART_IRQHandler+0x5c2>
 800f252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d008      	beq.n	800f270 <HAL_UART_IRQHandler+0x5d4>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f262:	2b00      	cmp	r3, #0
 800f264:	d03a      	beq.n	800f2dc <HAL_UART_IRQHandler+0x640>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	4798      	blx	r3
 800f26e:	e035      	b.n	800f2dc <HAL_UART_IRQHandler+0x640>
 800f270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d009      	beq.n	800f290 <HAL_UART_IRQHandler+0x5f4>
 800f27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <HAL_UART_IRQHandler+0x5f4>
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fd7c 	bl	800fd86 <UART_EndTransmit_IT>
 800f28e:	e026      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d009      	beq.n	800f2b0 <HAL_UART_IRQHandler+0x614>
 800f29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d003      	beq.n	800f2b0 <HAL_UART_IRQHandler+0x614>
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 fdab 	bl	800fe04 <HAL_UARTEx_TxFifoEmptyCallback>
 800f2ae:	e016      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d010      	beq.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	da0c      	bge.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 fd93 	bl	800fdf0 <HAL_UARTEx_RxFifoFullCallback>
 800f2ca:	e008      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2cc:	bf00      	nop
 800f2ce:	e006      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2d0:	bf00      	nop
 800f2d2:	e004      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2d4:	bf00      	nop
 800f2d6:	e002      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2d8:	bf00      	nop
 800f2da:	e000      	b.n	800f2de <HAL_UART_IRQHandler+0x642>
 800f2dc:	bf00      	nop
 800f2de:	37e8      	adds	r7, #232	; 0xe8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <HAL_UART_TxCpltCallback>:
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <HAL_UART_ErrorCallback>:
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <HAL_UARTEx_RxEventCallback>:
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	460b      	mov	r3, r1
 800f316:	807b      	strh	r3, [r7, #2]
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <UART_SetConfig>:
 800f324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f328:	b08c      	sub	sp, #48	; 0x30
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6178      	str	r0, [r7, #20]
 800f32e:	2300      	movs	r3, #0
 800f330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	689a      	ldr	r2, [r3, #8]
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	691b      	ldr	r3, [r3, #16]
 800f33c:	431a      	orrs	r2, r3
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	695b      	ldr	r3, [r3, #20]
 800f342:	431a      	orrs	r2, r3
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	69db      	ldr	r3, [r3, #28]
 800f348:	4313      	orrs	r3, r2
 800f34a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	4baa      	ldr	r3, [pc, #680]	; (800f5fc <UART_SetConfig+0x2d8>)
 800f354:	4013      	ands	r3, r2
 800f356:	697a      	ldr	r2, [r7, #20]
 800f358:	6812      	ldr	r2, [r2, #0]
 800f35a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f35c:	430b      	orrs	r3, r1
 800f35e:	6013      	str	r3, [r2, #0]
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	68da      	ldr	r2, [r3, #12]
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	605a      	str	r2, [r3, #4]
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	699b      	ldr	r3, [r3, #24]
 800f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a9f      	ldr	r2, [pc, #636]	; (800f600 <UART_SetConfig+0x2dc>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d004      	beq.n	800f390 <UART_SetConfig+0x6c>
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	6a1b      	ldr	r3, [r3, #32]
 800f38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f38c:	4313      	orrs	r3, r2
 800f38e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f39a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f39e:	697a      	ldr	r2, [r7, #20]
 800f3a0:	6812      	ldr	r2, [r2, #0]
 800f3a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3a4:	430b      	orrs	r3, r1
 800f3a6:	6093      	str	r3, [r2, #8]
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ae:	f023 010f 	bic.w	r1, r3, #15
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a90      	ldr	r2, [pc, #576]	; (800f604 <UART_SetConfig+0x2e0>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d125      	bne.n	800f414 <UART_SetConfig+0xf0>
 800f3c8:	4b8f      	ldr	r3, [pc, #572]	; (800f608 <UART_SetConfig+0x2e4>)
 800f3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ce:	f003 0303 	and.w	r3, r3, #3
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d81a      	bhi.n	800f40c <UART_SetConfig+0xe8>
 800f3d6:	a201      	add	r2, pc, #4	; (adr r2, 800f3dc <UART_SetConfig+0xb8>)
 800f3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3dc:	0800f3ed 	.word	0x0800f3ed
 800f3e0:	0800f3fd 	.word	0x0800f3fd
 800f3e4:	0800f3f5 	.word	0x0800f3f5
 800f3e8:	0800f405 	.word	0x0800f405
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3f2:	e116      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f3f4:	2302      	movs	r3, #2
 800f3f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3fa:	e112      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f3fc:	2304      	movs	r3, #4
 800f3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f402:	e10e      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f404:	2308      	movs	r3, #8
 800f406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f40a:	e10a      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f40c:	2310      	movs	r3, #16
 800f40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f412:	e106      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	4a7c      	ldr	r2, [pc, #496]	; (800f60c <UART_SetConfig+0x2e8>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d138      	bne.n	800f490 <UART_SetConfig+0x16c>
 800f41e:	4b7a      	ldr	r3, [pc, #488]	; (800f608 <UART_SetConfig+0x2e4>)
 800f420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f424:	f003 030c 	and.w	r3, r3, #12
 800f428:	2b0c      	cmp	r3, #12
 800f42a:	d82d      	bhi.n	800f488 <UART_SetConfig+0x164>
 800f42c:	a201      	add	r2, pc, #4	; (adr r2, 800f434 <UART_SetConfig+0x110>)
 800f42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f432:	bf00      	nop
 800f434:	0800f469 	.word	0x0800f469
 800f438:	0800f489 	.word	0x0800f489
 800f43c:	0800f489 	.word	0x0800f489
 800f440:	0800f489 	.word	0x0800f489
 800f444:	0800f479 	.word	0x0800f479
 800f448:	0800f489 	.word	0x0800f489
 800f44c:	0800f489 	.word	0x0800f489
 800f450:	0800f489 	.word	0x0800f489
 800f454:	0800f471 	.word	0x0800f471
 800f458:	0800f489 	.word	0x0800f489
 800f45c:	0800f489 	.word	0x0800f489
 800f460:	0800f489 	.word	0x0800f489
 800f464:	0800f481 	.word	0x0800f481
 800f468:	2300      	movs	r3, #0
 800f46a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f46e:	e0d8      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f470:	2302      	movs	r3, #2
 800f472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f476:	e0d4      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f478:	2304      	movs	r3, #4
 800f47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f47e:	e0d0      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f480:	2308      	movs	r3, #8
 800f482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f486:	e0cc      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f488:	2310      	movs	r3, #16
 800f48a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f48e:	e0c8      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a5e      	ldr	r2, [pc, #376]	; (800f610 <UART_SetConfig+0x2ec>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d125      	bne.n	800f4e6 <UART_SetConfig+0x1c2>
 800f49a:	4b5b      	ldr	r3, [pc, #364]	; (800f608 <UART_SetConfig+0x2e4>)
 800f49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f4a4:	2b30      	cmp	r3, #48	; 0x30
 800f4a6:	d016      	beq.n	800f4d6 <UART_SetConfig+0x1b2>
 800f4a8:	2b30      	cmp	r3, #48	; 0x30
 800f4aa:	d818      	bhi.n	800f4de <UART_SetConfig+0x1ba>
 800f4ac:	2b20      	cmp	r3, #32
 800f4ae:	d00a      	beq.n	800f4c6 <UART_SetConfig+0x1a2>
 800f4b0:	2b20      	cmp	r3, #32
 800f4b2:	d814      	bhi.n	800f4de <UART_SetConfig+0x1ba>
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d002      	beq.n	800f4be <UART_SetConfig+0x19a>
 800f4b8:	2b10      	cmp	r3, #16
 800f4ba:	d008      	beq.n	800f4ce <UART_SetConfig+0x1aa>
 800f4bc:	e00f      	b.n	800f4de <UART_SetConfig+0x1ba>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4c4:	e0ad      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f4c6:	2302      	movs	r3, #2
 800f4c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4cc:	e0a9      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f4ce:	2304      	movs	r3, #4
 800f4d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4d4:	e0a5      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f4d6:	2308      	movs	r3, #8
 800f4d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4dc:	e0a1      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f4de:	2310      	movs	r3, #16
 800f4e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4e4:	e09d      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a4a      	ldr	r2, [pc, #296]	; (800f614 <UART_SetConfig+0x2f0>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d125      	bne.n	800f53c <UART_SetConfig+0x218>
 800f4f0:	4b45      	ldr	r3, [pc, #276]	; (800f608 <UART_SetConfig+0x2e4>)
 800f4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f4fa:	2bc0      	cmp	r3, #192	; 0xc0
 800f4fc:	d016      	beq.n	800f52c <UART_SetConfig+0x208>
 800f4fe:	2bc0      	cmp	r3, #192	; 0xc0
 800f500:	d818      	bhi.n	800f534 <UART_SetConfig+0x210>
 800f502:	2b80      	cmp	r3, #128	; 0x80
 800f504:	d00a      	beq.n	800f51c <UART_SetConfig+0x1f8>
 800f506:	2b80      	cmp	r3, #128	; 0x80
 800f508:	d814      	bhi.n	800f534 <UART_SetConfig+0x210>
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d002      	beq.n	800f514 <UART_SetConfig+0x1f0>
 800f50e:	2b40      	cmp	r3, #64	; 0x40
 800f510:	d008      	beq.n	800f524 <UART_SetConfig+0x200>
 800f512:	e00f      	b.n	800f534 <UART_SetConfig+0x210>
 800f514:	2300      	movs	r3, #0
 800f516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f51a:	e082      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f51c:	2302      	movs	r3, #2
 800f51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f522:	e07e      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f524:	2304      	movs	r3, #4
 800f526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f52a:	e07a      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f52c:	2308      	movs	r3, #8
 800f52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f532:	e076      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f534:	2310      	movs	r3, #16
 800f536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f53a:	e072      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a35      	ldr	r2, [pc, #212]	; (800f618 <UART_SetConfig+0x2f4>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d12a      	bne.n	800f59c <UART_SetConfig+0x278>
 800f546:	4b30      	ldr	r3, [pc, #192]	; (800f608 <UART_SetConfig+0x2e4>)
 800f548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f54c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f554:	d01a      	beq.n	800f58c <UART_SetConfig+0x268>
 800f556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f55a:	d81b      	bhi.n	800f594 <UART_SetConfig+0x270>
 800f55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f560:	d00c      	beq.n	800f57c <UART_SetConfig+0x258>
 800f562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f566:	d815      	bhi.n	800f594 <UART_SetConfig+0x270>
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <UART_SetConfig+0x250>
 800f56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f570:	d008      	beq.n	800f584 <UART_SetConfig+0x260>
 800f572:	e00f      	b.n	800f594 <UART_SetConfig+0x270>
 800f574:	2300      	movs	r3, #0
 800f576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f57a:	e052      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f57c:	2302      	movs	r3, #2
 800f57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f582:	e04e      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f584:	2304      	movs	r3, #4
 800f586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f58a:	e04a      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f58c:	2308      	movs	r3, #8
 800f58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f592:	e046      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f594:	2310      	movs	r3, #16
 800f596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f59a:	e042      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a17      	ldr	r2, [pc, #92]	; (800f600 <UART_SetConfig+0x2dc>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d13a      	bne.n	800f61c <UART_SetConfig+0x2f8>
 800f5a6:	4b18      	ldr	r3, [pc, #96]	; (800f608 <UART_SetConfig+0x2e4>)
 800f5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f5b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f5b4:	d01a      	beq.n	800f5ec <UART_SetConfig+0x2c8>
 800f5b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f5ba:	d81b      	bhi.n	800f5f4 <UART_SetConfig+0x2d0>
 800f5bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5c0:	d00c      	beq.n	800f5dc <UART_SetConfig+0x2b8>
 800f5c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5c6:	d815      	bhi.n	800f5f4 <UART_SetConfig+0x2d0>
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <UART_SetConfig+0x2b0>
 800f5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5d0:	d008      	beq.n	800f5e4 <UART_SetConfig+0x2c0>
 800f5d2:	e00f      	b.n	800f5f4 <UART_SetConfig+0x2d0>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5da:	e022      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f5dc:	2302      	movs	r3, #2
 800f5de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5e2:	e01e      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f5e4:	2304      	movs	r3, #4
 800f5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5ea:	e01a      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5f2:	e016      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5fa:	e012      	b.n	800f622 <UART_SetConfig+0x2fe>
 800f5fc:	cfff69f3 	.word	0xcfff69f3
 800f600:	40008000 	.word	0x40008000
 800f604:	40013800 	.word	0x40013800
 800f608:	40021000 	.word	0x40021000
 800f60c:	40004400 	.word	0x40004400
 800f610:	40004800 	.word	0x40004800
 800f614:	40004c00 	.word	0x40004c00
 800f618:	40005000 	.word	0x40005000
 800f61c:	2310      	movs	r3, #16
 800f61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4aae      	ldr	r2, [pc, #696]	; (800f8e0 <UART_SetConfig+0x5bc>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	f040 8097 	bne.w	800f75c <UART_SetConfig+0x438>
 800f62e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f632:	2b08      	cmp	r3, #8
 800f634:	d823      	bhi.n	800f67e <UART_SetConfig+0x35a>
 800f636:	a201      	add	r2, pc, #4	; (adr r2, 800f63c <UART_SetConfig+0x318>)
 800f638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63c:	0800f661 	.word	0x0800f661
 800f640:	0800f67f 	.word	0x0800f67f
 800f644:	0800f669 	.word	0x0800f669
 800f648:	0800f67f 	.word	0x0800f67f
 800f64c:	0800f66f 	.word	0x0800f66f
 800f650:	0800f67f 	.word	0x0800f67f
 800f654:	0800f67f 	.word	0x0800f67f
 800f658:	0800f67f 	.word	0x0800f67f
 800f65c:	0800f677 	.word	0x0800f677
 800f660:	f7fd ff62 	bl	800d528 <HAL_RCC_GetPCLK1Freq>
 800f664:	6278      	str	r0, [r7, #36]	; 0x24
 800f666:	e010      	b.n	800f68a <UART_SetConfig+0x366>
 800f668:	4b9e      	ldr	r3, [pc, #632]	; (800f8e4 <UART_SetConfig+0x5c0>)
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
 800f66c:	e00d      	b.n	800f68a <UART_SetConfig+0x366>
 800f66e:	f7fd feed 	bl	800d44c <HAL_RCC_GetSysClockFreq>
 800f672:	6278      	str	r0, [r7, #36]	; 0x24
 800f674:	e009      	b.n	800f68a <UART_SetConfig+0x366>
 800f676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f67a:	627b      	str	r3, [r7, #36]	; 0x24
 800f67c:	e005      	b.n	800f68a <UART_SetConfig+0x366>
 800f67e:	2300      	movs	r3, #0
 800f680:	627b      	str	r3, [r7, #36]	; 0x24
 800f682:	2301      	movs	r3, #1
 800f684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f688:	bf00      	nop
 800f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f000 8130 	beq.w	800f8f2 <UART_SetConfig+0x5ce>
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	4a94      	ldr	r2, [pc, #592]	; (800f8e8 <UART_SetConfig+0x5c4>)
 800f698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f69c:	461a      	mov	r2, r3
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6a4:	61bb      	str	r3, [r7, #24]
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	4413      	add	r3, r2
 800f6b0:	69ba      	ldr	r2, [r7, #24]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d305      	bcc.n	800f6c2 <UART_SetConfig+0x39e>
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	031b      	lsls	r3, r3, #12
 800f6bc:	69ba      	ldr	r2, [r7, #24]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d903      	bls.n	800f6ca <UART_SetConfig+0x3a6>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f6c8:	e113      	b.n	800f8f2 <UART_SetConfig+0x5ce>
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	60bb      	str	r3, [r7, #8]
 800f6d0:	60fa      	str	r2, [r7, #12]
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d6:	4a84      	ldr	r2, [pc, #528]	; (800f8e8 <UART_SetConfig+0x5c4>)
 800f6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	2200      	movs	r2, #0
 800f6e0:	603b      	str	r3, [r7, #0]
 800f6e2:	607a      	str	r2, [r7, #4]
 800f6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f6ec:	f7f1 faf4 	bl	8000cd8 <__aeabi_uldivmod>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	f04f 0200 	mov.w	r2, #0
 800f6fc:	f04f 0300 	mov.w	r3, #0
 800f700:	020b      	lsls	r3, r1, #8
 800f702:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f706:	0202      	lsls	r2, r0, #8
 800f708:	6979      	ldr	r1, [r7, #20]
 800f70a:	6849      	ldr	r1, [r1, #4]
 800f70c:	0849      	lsrs	r1, r1, #1
 800f70e:	2000      	movs	r0, #0
 800f710:	460c      	mov	r4, r1
 800f712:	4605      	mov	r5, r0
 800f714:	eb12 0804 	adds.w	r8, r2, r4
 800f718:	eb43 0905 	adc.w	r9, r3, r5
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	469a      	mov	sl, r3
 800f724:	4693      	mov	fp, r2
 800f726:	4652      	mov	r2, sl
 800f728:	465b      	mov	r3, fp
 800f72a:	4640      	mov	r0, r8
 800f72c:	4649      	mov	r1, r9
 800f72e:	f7f1 fad3 	bl	8000cd8 <__aeabi_uldivmod>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4613      	mov	r3, r2
 800f738:	623b      	str	r3, [r7, #32]
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f740:	d308      	bcc.n	800f754 <UART_SetConfig+0x430>
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f748:	d204      	bcs.n	800f754 <UART_SetConfig+0x430>
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6a3a      	ldr	r2, [r7, #32]
 800f750:	60da      	str	r2, [r3, #12]
 800f752:	e0ce      	b.n	800f8f2 <UART_SetConfig+0x5ce>
 800f754:	2301      	movs	r3, #1
 800f756:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f75a:	e0ca      	b.n	800f8f2 <UART_SetConfig+0x5ce>
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	69db      	ldr	r3, [r3, #28]
 800f760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f764:	d166      	bne.n	800f834 <UART_SetConfig+0x510>
 800f766:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f76a:	2b08      	cmp	r3, #8
 800f76c:	d827      	bhi.n	800f7be <UART_SetConfig+0x49a>
 800f76e:	a201      	add	r2, pc, #4	; (adr r2, 800f774 <UART_SetConfig+0x450>)
 800f770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f774:	0800f799 	.word	0x0800f799
 800f778:	0800f7a1 	.word	0x0800f7a1
 800f77c:	0800f7a9 	.word	0x0800f7a9
 800f780:	0800f7bf 	.word	0x0800f7bf
 800f784:	0800f7af 	.word	0x0800f7af
 800f788:	0800f7bf 	.word	0x0800f7bf
 800f78c:	0800f7bf 	.word	0x0800f7bf
 800f790:	0800f7bf 	.word	0x0800f7bf
 800f794:	0800f7b7 	.word	0x0800f7b7
 800f798:	f7fd fec6 	bl	800d528 <HAL_RCC_GetPCLK1Freq>
 800f79c:	6278      	str	r0, [r7, #36]	; 0x24
 800f79e:	e014      	b.n	800f7ca <UART_SetConfig+0x4a6>
 800f7a0:	f7fd fed8 	bl	800d554 <HAL_RCC_GetPCLK2Freq>
 800f7a4:	6278      	str	r0, [r7, #36]	; 0x24
 800f7a6:	e010      	b.n	800f7ca <UART_SetConfig+0x4a6>
 800f7a8:	4b4e      	ldr	r3, [pc, #312]	; (800f8e4 <UART_SetConfig+0x5c0>)
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f7ac:	e00d      	b.n	800f7ca <UART_SetConfig+0x4a6>
 800f7ae:	f7fd fe4d 	bl	800d44c <HAL_RCC_GetSysClockFreq>
 800f7b2:	6278      	str	r0, [r7, #36]	; 0x24
 800f7b4:	e009      	b.n	800f7ca <UART_SetConfig+0x4a6>
 800f7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f7bc:	e005      	b.n	800f7ca <UART_SetConfig+0x4a6>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f7c8:	bf00      	nop
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 8090 	beq.w	800f8f2 <UART_SetConfig+0x5ce>
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d6:	4a44      	ldr	r2, [pc, #272]	; (800f8e8 <UART_SetConfig+0x5c4>)
 800f7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7e4:	005a      	lsls	r2, r3, #1
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	085b      	lsrs	r3, r3, #1
 800f7ec:	441a      	add	r2, r3
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7f6:	623b      	str	r3, [r7, #32]
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	2b0f      	cmp	r3, #15
 800f7fc:	d916      	bls.n	800f82c <UART_SetConfig+0x508>
 800f7fe:	6a3b      	ldr	r3, [r7, #32]
 800f800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f804:	d212      	bcs.n	800f82c <UART_SetConfig+0x508>
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	b29b      	uxth	r3, r3
 800f80a:	f023 030f 	bic.w	r3, r3, #15
 800f80e:	83fb      	strh	r3, [r7, #30]
 800f810:	6a3b      	ldr	r3, [r7, #32]
 800f812:	085b      	lsrs	r3, r3, #1
 800f814:	b29b      	uxth	r3, r3
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	8bfb      	ldrh	r3, [r7, #30]
 800f81e:	4313      	orrs	r3, r2
 800f820:	83fb      	strh	r3, [r7, #30]
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	8bfa      	ldrh	r2, [r7, #30]
 800f828:	60da      	str	r2, [r3, #12]
 800f82a:	e062      	b.n	800f8f2 <UART_SetConfig+0x5ce>
 800f82c:	2301      	movs	r3, #1
 800f82e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f832:	e05e      	b.n	800f8f2 <UART_SetConfig+0x5ce>
 800f834:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f838:	2b08      	cmp	r3, #8
 800f83a:	d828      	bhi.n	800f88e <UART_SetConfig+0x56a>
 800f83c:	a201      	add	r2, pc, #4	; (adr r2, 800f844 <UART_SetConfig+0x520>)
 800f83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f842:	bf00      	nop
 800f844:	0800f869 	.word	0x0800f869
 800f848:	0800f871 	.word	0x0800f871
 800f84c:	0800f879 	.word	0x0800f879
 800f850:	0800f88f 	.word	0x0800f88f
 800f854:	0800f87f 	.word	0x0800f87f
 800f858:	0800f88f 	.word	0x0800f88f
 800f85c:	0800f88f 	.word	0x0800f88f
 800f860:	0800f88f 	.word	0x0800f88f
 800f864:	0800f887 	.word	0x0800f887
 800f868:	f7fd fe5e 	bl	800d528 <HAL_RCC_GetPCLK1Freq>
 800f86c:	6278      	str	r0, [r7, #36]	; 0x24
 800f86e:	e014      	b.n	800f89a <UART_SetConfig+0x576>
 800f870:	f7fd fe70 	bl	800d554 <HAL_RCC_GetPCLK2Freq>
 800f874:	6278      	str	r0, [r7, #36]	; 0x24
 800f876:	e010      	b.n	800f89a <UART_SetConfig+0x576>
 800f878:	4b1a      	ldr	r3, [pc, #104]	; (800f8e4 <UART_SetConfig+0x5c0>)
 800f87a:	627b      	str	r3, [r7, #36]	; 0x24
 800f87c:	e00d      	b.n	800f89a <UART_SetConfig+0x576>
 800f87e:	f7fd fde5 	bl	800d44c <HAL_RCC_GetSysClockFreq>
 800f882:	6278      	str	r0, [r7, #36]	; 0x24
 800f884:	e009      	b.n	800f89a <UART_SetConfig+0x576>
 800f886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24
 800f88c:	e005      	b.n	800f89a <UART_SetConfig+0x576>
 800f88e:	2300      	movs	r3, #0
 800f890:	627b      	str	r3, [r7, #36]	; 0x24
 800f892:	2301      	movs	r3, #1
 800f894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f898:	bf00      	nop
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d028      	beq.n	800f8f2 <UART_SetConfig+0x5ce>
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	4a10      	ldr	r2, [pc, #64]	; (800f8e8 <UART_SetConfig+0x5c4>)
 800f8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	085b      	lsrs	r3, r3, #1
 800f8b8:	441a      	add	r2, r3
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8c2:	623b      	str	r3, [r7, #32]
 800f8c4:	6a3b      	ldr	r3, [r7, #32]
 800f8c6:	2b0f      	cmp	r3, #15
 800f8c8:	d910      	bls.n	800f8ec <UART_SetConfig+0x5c8>
 800f8ca:	6a3b      	ldr	r3, [r7, #32]
 800f8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8d0:	d20c      	bcs.n	800f8ec <UART_SetConfig+0x5c8>
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	60da      	str	r2, [r3, #12]
 800f8dc:	e009      	b.n	800f8f2 <UART_SetConfig+0x5ce>
 800f8de:	bf00      	nop
 800f8e0:	40008000 	.word	0x40008000
 800f8e4:	00f42400 	.word	0x00f42400
 800f8e8:	08018118 	.word	0x08018118
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	2200      	movs	r2, #0
 800f906:	675a      	str	r2, [r3, #116]	; 0x74
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2200      	movs	r2, #0
 800f90c:	679a      	str	r2, [r3, #120]	; 0x78
 800f90e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f912:	4618      	mov	r0, r3
 800f914:	3730      	adds	r7, #48	; 0x30
 800f916:	46bd      	mov	sp, r7
 800f918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f91c <UART_AdvFeatureConfig>:
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f928:	f003 0308 	and.w	r3, r3, #8
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00a      	beq.n	800f946 <UART_AdvFeatureConfig+0x2a>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	430a      	orrs	r2, r1
 800f944:	605a      	str	r2, [r3, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00a      	beq.n	800f968 <UART_AdvFeatureConfig+0x4c>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	430a      	orrs	r2, r1
 800f966:	605a      	str	r2, [r3, #4]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f96c:	f003 0302 	and.w	r3, r3, #2
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00a      	beq.n	800f98a <UART_AdvFeatureConfig+0x6e>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	430a      	orrs	r2, r1
 800f988:	605a      	str	r2, [r3, #4]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98e:	f003 0304 	and.w	r3, r3, #4
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00a      	beq.n	800f9ac <UART_AdvFeatureConfig+0x90>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	605a      	str	r2, [r3, #4]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9b0:	f003 0310 	and.w	r3, r3, #16
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00a      	beq.n	800f9ce <UART_AdvFeatureConfig+0xb2>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	609a      	str	r2, [r3, #8]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d2:	f003 0320 	and.w	r3, r3, #32
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00a      	beq.n	800f9f0 <UART_AdvFeatureConfig+0xd4>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	430a      	orrs	r2, r1
 800f9ee:	609a      	str	r2, [r3, #8]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d01a      	beq.n	800fa32 <UART_AdvFeatureConfig+0x116>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	605a      	str	r2, [r3, #4]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa1a:	d10a      	bne.n	800fa32 <UART_AdvFeatureConfig+0x116>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	430a      	orrs	r2, r1
 800fa30:	605a      	str	r2, [r3, #4]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00a      	beq.n	800fa54 <UART_AdvFeatureConfig+0x138>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	430a      	orrs	r2, r1
 800fa52:	605a      	str	r2, [r3, #4]
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <UART_CheckIdleState>:
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b098      	sub	sp, #96	; 0x60
 800fa64:	af02      	add	r7, sp, #8
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800fa70:	f7fa fb48 	bl	800a104 <HAL_GetTick>
 800fa74:	6578      	str	r0, [r7, #84]	; 0x54
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 0308 	and.w	r3, r3, #8
 800fa80:	2b08      	cmp	r3, #8
 800fa82:	d12f      	bne.n	800fae4 <UART_CheckIdleState+0x84>
 800fa84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f88e 	bl	800fbb4 <UART_WaitOnFlagUntilTimeout>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d022      	beq.n	800fae4 <UART_CheckIdleState+0x84>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	63bb      	str	r3, [r7, #56]	; 0x38
 800faa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa6:	e853 3f00 	ldrex	r3, [r3]
 800faaa:	637b      	str	r3, [r7, #52]	; 0x34
 800faac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fab2:	653b      	str	r3, [r7, #80]	; 0x50
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	461a      	mov	r2, r3
 800faba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fabc:	647b      	str	r3, [r7, #68]	; 0x44
 800fabe:	643a      	str	r2, [r7, #64]	; 0x40
 800fac0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fac4:	e841 2300 	strex	r3, r2, [r1]
 800fac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800facc:	2b00      	cmp	r3, #0
 800face:	d1e6      	bne.n	800fa9e <UART_CheckIdleState+0x3e>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2220      	movs	r2, #32
 800fad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fae0:	2303      	movs	r3, #3
 800fae2:	e063      	b.n	800fbac <UART_CheckIdleState+0x14c>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f003 0304 	and.w	r3, r3, #4
 800faee:	2b04      	cmp	r3, #4
 800faf0:	d149      	bne.n	800fb86 <UART_CheckIdleState+0x126>
 800faf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fafa:	2200      	movs	r2, #0
 800fafc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f000 f857 	bl	800fbb4 <UART_WaitOnFlagUntilTimeout>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d03c      	beq.n	800fb86 <UART_CheckIdleState+0x126>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	627b      	str	r3, [r7, #36]	; 0x24
 800fb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb14:	e853 3f00 	ldrex	r3, [r3]
 800fb18:	623b      	str	r3, [r7, #32]
 800fb1a:	6a3b      	ldr	r3, [r7, #32]
 800fb1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	461a      	mov	r2, r3
 800fb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb2a:	633b      	str	r3, [r7, #48]	; 0x30
 800fb2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb32:	e841 2300 	strex	r3, r2, [r1]
 800fb36:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1e6      	bne.n	800fb0c <UART_CheckIdleState+0xac>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3308      	adds	r3, #8
 800fb44:	613b      	str	r3, [r7, #16]
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	e853 3f00 	ldrex	r3, [r3]
 800fb4c:	60fb      	str	r3, [r7, #12]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f023 0301 	bic.w	r3, r3, #1
 800fb54:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3308      	adds	r3, #8
 800fb5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb5e:	61fa      	str	r2, [r7, #28]
 800fb60:	61bb      	str	r3, [r7, #24]
 800fb62:	69b9      	ldr	r1, [r7, #24]
 800fb64:	69fa      	ldr	r2, [r7, #28]
 800fb66:	e841 2300 	strex	r3, r2, [r1]
 800fb6a:	617b      	str	r3, [r7, #20]
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1e5      	bne.n	800fb3e <UART_CheckIdleState+0xde>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2220      	movs	r2, #32
 800fb76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fb82:	2303      	movs	r3, #3
 800fb84:	e012      	b.n	800fbac <UART_CheckIdleState+0x14c>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2220      	movs	r2, #32
 800fb8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2220      	movs	r2, #32
 800fb92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	671a      	str	r2, [r3, #112]	; 0x70
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fbaa:	2300      	movs	r3, #0
 800fbac:	4618      	mov	r0, r3
 800fbae:	3758      	adds	r7, #88	; 0x58
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <UART_WaitOnFlagUntilTimeout>:
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	603b      	str	r3, [r7, #0]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	71fb      	strb	r3, [r7, #7]
 800fbc4:	e04f      	b.n	800fc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbcc:	d04b      	beq.n	800fc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbce:	f7fa fa99 	bl	800a104 <HAL_GetTick>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	69ba      	ldr	r2, [r7, #24]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d302      	bcc.n	800fbe4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d101      	bne.n	800fbe8 <UART_WaitOnFlagUntilTimeout+0x34>
 800fbe4:	2303      	movs	r3, #3
 800fbe6:	e04e      	b.n	800fc86 <UART_WaitOnFlagUntilTimeout+0xd2>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0304 	and.w	r3, r3, #4
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d037      	beq.n	800fc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	2b80      	cmp	r3, #128	; 0x80
 800fbfa:	d034      	beq.n	800fc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b40      	cmp	r3, #64	; 0x40
 800fc00:	d031      	beq.n	800fc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	69db      	ldr	r3, [r3, #28]
 800fc08:	f003 0308 	and.w	r3, r3, #8
 800fc0c:	2b08      	cmp	r3, #8
 800fc0e:	d110      	bne.n	800fc32 <UART_WaitOnFlagUntilTimeout+0x7e>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2208      	movs	r2, #8
 800fc16:	621a      	str	r2, [r3, #32]
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 f838 	bl	800fc8e <UART_EndRxTransfer>
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2208      	movs	r2, #8
 800fc22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e029      	b.n	800fc86 <UART_WaitOnFlagUntilTimeout+0xd2>
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc40:	d111      	bne.n	800fc66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc4a:	621a      	str	r2, [r3, #32]
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 f81e 	bl	800fc8e <UART_EndRxTransfer>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2220      	movs	r2, #32
 800fc56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fc62:	2303      	movs	r3, #3
 800fc64:	e00f      	b.n	800fc86 <UART_WaitOnFlagUntilTimeout+0xd2>
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	69da      	ldr	r2, [r3, #28]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	4013      	ands	r3, r2
 800fc70:	68ba      	ldr	r2, [r7, #8]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	bf0c      	ite	eq
 800fc76:	2301      	moveq	r3, #1
 800fc78:	2300      	movne	r3, #0
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	79fb      	ldrb	r3, [r7, #7]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d0a0      	beq.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0x12>
 800fc84:	2300      	movs	r3, #0
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <UART_EndRxTransfer>:
 800fc8e:	b480      	push	{r7}
 800fc90:	b095      	sub	sp, #84	; 0x54
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9e:	e853 3f00 	ldrex	r3, [r3]
 800fca2:	633b      	str	r3, [r7, #48]	; 0x30
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb4:	643b      	str	r3, [r7, #64]	; 0x40
 800fcb6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcbc:	e841 2300 	strex	r3, r2, [r1]
 800fcc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d1e6      	bne.n	800fc96 <UART_EndRxTransfer+0x8>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3308      	adds	r3, #8
 800fcce:	623b      	str	r3, [r7, #32]
 800fcd0:	6a3b      	ldr	r3, [r7, #32]
 800fcd2:	e853 3f00 	ldrex	r3, [r3]
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fcde:	f023 0301 	bic.w	r3, r3, #1
 800fce2:	64bb      	str	r3, [r7, #72]	; 0x48
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3308      	adds	r3, #8
 800fcea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcee:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf4:	e841 2300 	strex	r3, r2, [r1]
 800fcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e3      	bne.n	800fcc8 <UART_EndRxTransfer+0x3a>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d118      	bne.n	800fd3a <UART_EndRxTransfer+0xac>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	60fb      	str	r3, [r7, #12]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	e853 3f00 	ldrex	r3, [r3]
 800fd14:	60bb      	str	r3, [r7, #8]
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	f023 0310 	bic.w	r3, r3, #16
 800fd1c:	647b      	str	r3, [r7, #68]	; 0x44
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd26:	61bb      	str	r3, [r7, #24]
 800fd28:	617a      	str	r2, [r7, #20]
 800fd2a:	6979      	ldr	r1, [r7, #20]
 800fd2c:	69ba      	ldr	r2, [r7, #24]
 800fd2e:	e841 2300 	strex	r3, r2, [r1]
 800fd32:	613b      	str	r3, [r7, #16]
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1e6      	bne.n	800fd08 <UART_EndRxTransfer+0x7a>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2200      	movs	r2, #0
 800fd46:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	675a      	str	r2, [r3, #116]	; 0x74
 800fd4e:	bf00      	nop
 800fd50:	3754      	adds	r7, #84	; 0x54
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <UART_DMAAbortOnError>:
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b084      	sub	sp, #16
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f7ff fabd 	bl	800f2f8 <HAL_UART_ErrorCallback>
 800fd7e:	bf00      	nop
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <UART_EndTransmit_IT>:
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b088      	sub	sp, #32
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	60fb      	str	r3, [r7, #12]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	60bb      	str	r3, [r7, #8]
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fda2:	61fb      	str	r3, [r7, #28]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	61bb      	str	r3, [r7, #24]
 800fdae:	617a      	str	r2, [r7, #20]
 800fdb0:	6979      	ldr	r1, [r7, #20]
 800fdb2:	69ba      	ldr	r2, [r7, #24]
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	613b      	str	r3, [r7, #16]
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e6      	bne.n	800fd8e <UART_EndTransmit_IT+0x8>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2220      	movs	r2, #32
 800fdc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	679a      	str	r2, [r3, #120]	; 0x78
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff fa88 	bl	800f2e4 <HAL_UART_TxCpltCallback>
 800fdd4:	bf00      	nop
 800fdd6:	3720      	adds	r7, #32
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <HAL_UARTEx_WakeupCallback>:
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	bf00      	nop
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <HAL_UARTEx_RxFifoFullCallback>:
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	bf00      	nop
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <HAL_UARTEx_TxFifoEmptyCallback>:
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	bf00      	nop
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <HAL_UARTEx_DisableFifoMode>:
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d101      	bne.n	800fe2e <HAL_UARTEx_DisableFifoMode+0x16>
 800fe2a:	2302      	movs	r3, #2
 800fe2c:	e027      	b.n	800fe7e <HAL_UARTEx_DisableFifoMode+0x66>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2224      	movs	r2, #36	; 0x24
 800fe3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	60fb      	str	r3, [r7, #12]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f022 0201 	bic.w	r2, r2, #1
 800fe54:	601a      	str	r2, [r3, #0]
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe5c:	60fb      	str	r3, [r7, #12]
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	665a      	str	r2, [r3, #100]	; 0x64
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2220      	movs	r2, #32
 800fe70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <HAL_UARTEx_SetTxFifoThreshold>:
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
 800fe92:	6039      	str	r1, [r7, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d101      	bne.n	800fea2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fe9e:	2302      	movs	r3, #2
 800fea0:	e02d      	b.n	800fefe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2201      	movs	r2, #1
 800fea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2224      	movs	r2, #36	; 0x24
 800feae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	60fb      	str	r3, [r7, #12]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f022 0201 	bic.w	r2, r2, #1
 800fec8:	601a      	str	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	430a      	orrs	r2, r1
 800fedc:	609a      	str	r2, [r3, #8]
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 f850 	bl	800ff84 <UARTEx_SetNbDataToProcess>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	601a      	str	r2, [r3, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2220      	movs	r2, #32
 800fef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fefc:	2300      	movs	r3, #0
 800fefe:	4618      	mov	r0, r3
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <HAL_UARTEx_SetRxFifoThreshold>:
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b084      	sub	sp, #16
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	6039      	str	r1, [r7, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff16:	2b01      	cmp	r3, #1
 800ff18:	d101      	bne.n	800ff1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	e02d      	b.n	800ff7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2201      	movs	r2, #1
 800ff22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2224      	movs	r2, #36	; 0x24
 800ff2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f022 0201 	bic.w	r2, r2, #1
 800ff44:	601a      	str	r2, [r3, #0]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	683a      	ldr	r2, [r7, #0]
 800ff56:	430a      	orrs	r2, r1
 800ff58:	609a      	str	r2, [r3, #8]
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f812 	bl	800ff84 <UARTEx_SetNbDataToProcess>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	601a      	str	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2220      	movs	r2, #32
 800ff6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800ff78:	2300      	movs	r3, #0
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
	...

0800ff84 <UARTEx_SetNbDataToProcess>:
 800ff84:	b480      	push	{r7}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d108      	bne.n	800ffa6 <UARTEx_SetNbDataToProcess+0x22>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ffa4:	e031      	b.n	801000a <UARTEx_SetNbDataToProcess+0x86>
 800ffa6:	2308      	movs	r3, #8
 800ffa8:	73fb      	strb	r3, [r7, #15]
 800ffaa:	2308      	movs	r3, #8
 800ffac:	73bb      	strb	r3, [r7, #14]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	689b      	ldr	r3, [r3, #8]
 800ffb4:	0e5b      	lsrs	r3, r3, #25
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	f003 0307 	and.w	r3, r3, #7
 800ffbc:	737b      	strb	r3, [r7, #13]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	0f5b      	lsrs	r3, r3, #29
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	f003 0307 	and.w	r3, r3, #7
 800ffcc:	733b      	strb	r3, [r7, #12]
 800ffce:	7bbb      	ldrb	r3, [r7, #14]
 800ffd0:	7b3a      	ldrb	r2, [r7, #12]
 800ffd2:	4911      	ldr	r1, [pc, #68]	; (8010018 <UARTEx_SetNbDataToProcess+0x94>)
 800ffd4:	5c8a      	ldrb	r2, [r1, r2]
 800ffd6:	fb02 f303 	mul.w	r3, r2, r3
 800ffda:	7b3a      	ldrb	r2, [r7, #12]
 800ffdc:	490f      	ldr	r1, [pc, #60]	; (801001c <UARTEx_SetNbDataToProcess+0x98>)
 800ffde:	5c8a      	ldrb	r2, [r1, r2]
 800ffe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ffec:	7bfb      	ldrb	r3, [r7, #15]
 800ffee:	7b7a      	ldrb	r2, [r7, #13]
 800fff0:	4909      	ldr	r1, [pc, #36]	; (8010018 <UARTEx_SetNbDataToProcess+0x94>)
 800fff2:	5c8a      	ldrb	r2, [r1, r2]
 800fff4:	fb02 f303 	mul.w	r3, r2, r3
 800fff8:	7b7a      	ldrb	r2, [r7, #13]
 800fffa:	4908      	ldr	r1, [pc, #32]	; (801001c <UARTEx_SetNbDataToProcess+0x98>)
 800fffc:	5c8a      	ldrb	r2, [r1, r2]
 800fffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010002:	b29a      	uxth	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801000a:	bf00      	nop
 801000c:	3714      	adds	r7, #20
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	08018130 	.word	0x08018130
 801001c:	08018138 	.word	0x08018138

08010020 <_ZN17AbstractAllocatorD1Ev>:
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	4a04      	ldr	r2, [pc, #16]	; (801003c <_ZN17AbstractAllocatorD1Ev+0x1c>)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	080180c4 	.word	0x080180c4

08010040 <_ZN17AbstractAllocatorD0Ev>:
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff ffe9 	bl	8010020 <_ZN17AbstractAllocatorD1Ev>
 801004e:	2108      	movs	r1, #8
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f002 fe7a 	bl	8012d4a <_ZdlPvj>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4618      	mov	r0, r3
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f002 fec5 	bl	8012dfc <malloc>
 8010072:	4603      	mov	r3, r0
 8010074:	617b      	str	r3, [r7, #20]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d105      	bne.n	8010088 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	3310      	adds	r3, #16
 8010082:	4618      	mov	r0, r3
 8010084:	f7f7 fdfa 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	4618      	mov	r0, r3
 801008c:	3718      	adds	r7, #24
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <_ZN15SystemAllocator4freeEP14CanardInstancePv>:
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	60f8      	str	r0, [r7, #12]
 801009a:	60b9      	str	r1, [r7, #8]
 801009c:	607a      	str	r2, [r7, #4]
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f002 feb4 	bl	8012e0c <free>
 80100a4:	bf00      	nop
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <_ZN15SystemAllocatorD1Ev>:
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	4a05      	ldr	r2, [pc, #20]	; (80100cc <_ZN15SystemAllocatorD1Ev+0x20>)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7ff ffaf 	bl	8010020 <_ZN17AbstractAllocatorD1Ev>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4618      	mov	r0, r3
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	08018148 	.word	0x08018148

080100d0 <_ZN15SystemAllocatorD0Ev>:
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7ff ffe7 	bl	80100ac <_ZN15SystemAllocatorD1Ev>
 80100de:	2108      	movs	r1, #8
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f002 fe32 	bl	8012d4a <_ZdlPvj>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
 80100f0:	b590      	push	{r4, r7, lr}
 80100f2:	b08b      	sub	sp, #44	; 0x2c
 80100f4:	af04      	add	r7, sp, #16
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	e9c7 2300 	strd	r2, r3, [r7]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3308      	adds	r3, #8
 8010100:	4618      	mov	r0, r3
 8010102:	f000 f876 	bl	80101f2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010106:	4603      	mov	r3, r0
 8010108:	f103 040c 	add.w	r4, r3, #12
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	3308      	adds	r3, #8
 8010110:	4618      	mov	r0, r3
 8010112:	f000 f86e 	bl	80101f2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010116:	4603      	mov	r3, r0
 8010118:	f103 0120 	add.w	r1, r3, #32
 801011c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011e:	9302      	str	r3, [sp, #8]
 8010120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	e9d7 2300 	ldrd	r2, r3, [r7]
 801012c:	4620      	mov	r0, r4
 801012e:	f002 fb65 	bl	80127fc <canardTxPush>
 8010132:	6178      	str	r0, [r7, #20]
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	f113 0f03 	cmn.w	r3, #3
 801013a:	d106      	bne.n	801014a <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	3310      	adds	r3, #16
 8010142:	4618      	mov	r0, r3
 8010144:	f7f7 fd9a 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
 8010148:	e008      	b.n	801015c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	da05      	bge.n	801015c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	3310      	adds	r3, #16
 8010156:	4618      	mov	r0, r3
 8010158:	f7f7 fd90 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	bd90      	pop	{r4, r7, pc}
	...

08010164 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
 8010164:	b590      	push	{r4, r7, lr}
 8010166:	b089      	sub	sp, #36	; 0x24
 8010168:	af04      	add	r7, sp, #16
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	607a      	str	r2, [r7, #4]
 801016e:	461a      	mov	r2, r3
 8010170:	460b      	mov	r3, r1
 8010172:	817b      	strh	r3, [r7, #10]
 8010174:	4613      	mov	r3, r2
 8010176:	727b      	strb	r3, [r7, #9]
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	3308      	adds	r3, #8
 801017c:	4618      	mov	r0, r3
 801017e:	f000 f838 	bl	80101f2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010182:	4603      	mov	r3, r0
 8010184:	f103 0020 	add.w	r0, r3, #32
 8010188:	897c      	ldrh	r4, [r7, #10]
 801018a:	7a79      	ldrb	r1, [r7, #9]
 801018c:	6a3b      	ldr	r3, [r7, #32]
 801018e:	9302      	str	r3, [sp, #8]
 8010190:	4a0d      	ldr	r2, [pc, #52]	; (80101c8 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 8010192:	f04f 0300 	mov.w	r3, #0
 8010196:	e9cd 2300 	strd	r2, r3, [sp]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4622      	mov	r2, r4
 801019e:	f002 fc7d 	bl	8012a9c <canardRxSubscribe>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	bf14      	ite	ne
 80101a8:	2301      	movne	r3, #1
 80101aa:	2300      	moveq	r3, #0
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d005      	beq.n	80101be <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	3310      	adds	r3, #16
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7f7 fd5f 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
 80101be:	bf00      	nop
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd90      	pop	{r4, r7, pc}
 80101c6:	bf00      	nop
 80101c8:	001e8480 	.word	0x001e8480

080101cc <_ZN15CyphalInterface4loopEv>:
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3308      	adds	r3, #8
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 f80a 	bl	80101f2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 80101de:	4603      	mov	r3, r0
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	3208      	adds	r2, #8
 80101e4:	6812      	ldr	r2, [r2, #0]
 80101e6:	4618      	mov	r0, r3
 80101e8:	4790      	blx	r2
 80101ea:	bf00      	nop
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b082      	sub	sp, #8
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 f805 	bl	801020a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8010200:	4603      	mov	r3, r0
 8010202:	4618      	mov	r0, r3
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
 801020a:	b580      	push	{r7, lr}
 801020c:	b082      	sub	sp, #8
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4618      	mov	r0, r3
 8010216:	f000 f805 	bl	8010224 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 801021a:	4603      	mov	r3, r0
 801021c:	4618      	mov	r0, r3
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4618      	mov	r0, r3
 8010230:	f000 f806 	bl	8010240 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010234:	4603      	mov	r3, r0
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4618      	mov	r0, r3
 801024c:	f000 f805 	bl	801025a <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010250:	4603      	mov	r3, r0
 8010252:	4618      	mov	r0, r3
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f805 	bl	8010272 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010268:	4603      	mov	r3, r0
 801026a:	4618      	mov	r0, r3
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
 8010272:	b580      	push	{r7, lr}
 8010274:	b082      	sub	sp, #8
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	f000 f805 	bl	801028c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 8010282:	4603      	mov	r3, r0
 8010284:	4618      	mov	r0, r3
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4618      	mov	r0, r3
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <_Z16fdcan_dlc_to_lenm>:
 80102a2:	b480      	push	{r7}
 80102a4:	b085      	sub	sp, #20
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	0c1b      	lsrs	r3, r3, #16
 80102ae:	73fb      	strb	r3, [r7, #15]
 80102b0:	7bfb      	ldrb	r3, [r7, #15]
 80102b2:	2b08      	cmp	r3, #8
 80102b4:	d801      	bhi.n	80102ba <_Z16fdcan_dlc_to_lenm+0x18>
 80102b6:	7bfb      	ldrb	r3, [r7, #15]
 80102b8:	e009      	b.n	80102ce <_Z16fdcan_dlc_to_lenm+0x2c>
 80102ba:	7bfb      	ldrb	r3, [r7, #15]
 80102bc:	2b0c      	cmp	r3, #12
 80102be:	d803      	bhi.n	80102c8 <_Z16fdcan_dlc_to_lenm+0x26>
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
 80102c2:	3b06      	subs	r3, #6
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	e002      	b.n	80102ce <_Z16fdcan_dlc_to_lenm+0x2c>
 80102c8:	7bfb      	ldrb	r3, [r7, #15]
 80102ca:	3b0b      	subs	r3, #11
 80102cc:	011b      	lsls	r3, r3, #4
 80102ce:	4618      	mov	r0, r3
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
	...

080102dc <_ZL12delay_cyclest>:
 80102dc:	f1a0 0308 	sub.w	r3, r0, #8
 80102e0:	4a07      	ldr	r2, [pc, #28]	; (8010300 <_ZL12delay_cyclest+0x24>)
 80102e2:	fb82 1203 	smull	r1, r2, r2, r3
 80102e6:	17db      	asrs	r3, r3, #31
 80102e8:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80102ec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80102f0:	d004      	beq.n	80102fc <_ZL12delay_cyclest+0x20>
 80102f2:	bf00      	nop
 80102f4:	3b01      	subs	r3, #1
 80102f6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80102fa:	d1fa      	bne.n	80102f2 <_ZL12delay_cyclest+0x16>
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	66666667 	.word	0x66666667

08010304 <_ZN5G4CAN10len_to_dlcEj>:
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]
 801030e:	4a05      	ldr	r2, [pc, #20]	; (8010324 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	08018158 	.word	0x08018158

08010328 <_ZN5G4CAN10dlc_to_lenEm>:
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
 8010332:	6838      	ldr	r0, [r7, #0]
 8010334:	f7ff ffb5 	bl	80102a2 <_Z16fdcan_dlc_to_lenm>
 8010338:	4603      	mov	r3, r0
 801033a:	4618      	mov	r0, r3
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <_ZN5G4CAN8can_loopEv>:
 8010342:	b580      	push	{r7, lr}
 8010344:	b086      	sub	sp, #24
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	e017      	b.n	801037c <_ZN5G4CAN8can_loopEv+0x3a>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	330c      	adds	r3, #12
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f107 0208 	add.w	r2, r7, #8
 8010358:	4611      	mov	r1, r2
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	4798      	blx	r3
 801035e:	4603      	mov	r3, r0
 8010360:	75fb      	strb	r3, [r7, #23]
 8010362:	7dfb      	ldrb	r3, [r7, #23]
 8010364:	f083 0301 	eor.w	r3, r3, #1
 8010368:	b2db      	uxtb	r3, r3
 801036a:	2b00      	cmp	r3, #0
 801036c:	d115      	bne.n	801039a <_ZN5G4CAN8can_loopEv+0x58>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f107 0208 	add.w	r2, r7, #8
 8010374:	4611      	mov	r1, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f000 f904 	bl	8010584 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010380:	2140      	movs	r1, #64	; 0x40
 8010382:	4618      	mov	r0, r3
 8010384:	f7fa fdf2 	bl	800af6c <HAL_FDCAN_GetRxFifoFillLevel>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	bf14      	ite	ne
 801038e:	2301      	movne	r3, #1
 8010390:	2300      	moveq	r3, #0
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d1d9      	bne.n	801034c <_ZN5G4CAN8can_loopEv+0xa>
 8010398:	e000      	b.n	801039c <_ZN5G4CAN8can_loopEv+0x5a>
 801039a:	bf00      	nop
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	f000 f944 	bl	801062c <_ZN19AbstractCANProvider17process_canard_txEv>
 80103a4:	bf00      	nop
 80103a6:	3718      	adds	r7, #24
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <_ZN5G4CAN10read_frameEP11CanardFrame>:
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b08e      	sub	sp, #56	; 0x38
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
 80103b6:	f04f 33ff 	mov.w	r3, #4294967295
 80103ba:	637b      	str	r3, [r7, #52]	; 0x34
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c0:	2140      	movs	r1, #64	; 0x40
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fa fdd2 	bl	800af6c <HAL_FDCAN_GetRxFifoFillLevel>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	bf14      	ite	ne
 80103ce:	2301      	movne	r3, #1
 80103d0:	2300      	moveq	r3, #0
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
 80103d8:	2340      	movs	r3, #64	; 0x40
 80103da:	637b      	str	r3, [r7, #52]	; 0x34
 80103dc:	e00f      	b.n	80103fe <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103e2:	2141      	movs	r1, #65	; 0x41
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7fa fdc1 	bl	800af6c <HAL_FDCAN_GetRxFifoFillLevel>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	bf14      	ite	ne
 80103f0:	2301      	movne	r3, #1
 80103f2:	2300      	moveq	r3, #0
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 80103fa:	2341      	movs	r3, #65	; 0x41
 80103fc:	637b      	str	r3, [r7, #52]	; 0x34
 80103fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010404:	d101      	bne.n	801040a <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
 8010406:	2300      	movs	r3, #0
 8010408:	e02e      	b.n	8010468 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
 801040a:	f107 030c 	add.w	r3, r7, #12
 801040e:	2228      	movs	r2, #40	; 0x28
 8010410:	2100      	movs	r1, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f003 fd85 	bl	8013f22 <memset>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801041c:	f107 020c 	add.w	r2, r7, #12
 8010420:	4b13      	ldr	r3, [pc, #76]	; (8010470 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010422:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010424:	f7fa fcc8 	bl	800adb8 <HAL_FDCAN_GetRxMessage>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	bf14      	ite	ne
 801042e:	2301      	movne	r3, #1
 8010430:	2300      	moveq	r3, #0
 8010432:	b2db      	uxtb	r3, r3
 8010434:	2b00      	cmp	r3, #0
 8010436:	d005      	beq.n	8010444 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801043c:	3310      	adds	r3, #16
 801043e:	4618      	mov	r0, r3
 8010440:	f7f7 fc1c 	bl	8007c7c <_ZNKSt8functionIFvvEEclEv>
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	601a      	str	r2, [r3, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3304      	adds	r3, #4
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	69ba      	ldr	r2, [r7, #24]
 8010454:	4611      	mov	r1, r2
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	4798      	blx	r3
 801045a:	4602      	mov	r2, r0
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	605a      	str	r2, [r3, #4]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	4a03      	ldr	r2, [pc, #12]	; (8010470 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010464:	609a      	str	r2, [r3, #8]
 8010466:	2301      	movs	r3, #1
 8010468:	4618      	mov	r0, r3
 801046a:	3738      	adds	r7, #56	; 0x38
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	20000948 	.word	0x20000948

08010474 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:
 8010474:	b580      	push	{r7, lr}
 8010476:	b08c      	sub	sp, #48	; 0x30
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	6a1b      	ldr	r3, [r3, #32]
 8010482:	60bb      	str	r3, [r7, #8]
 8010484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	2300      	movs	r3, #0
 801048c:	613b      	str	r3, [r7, #16]
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010492:	4a2a      	ldr	r2, [pc, #168]	; (801053c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 8010494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010498:	617b      	str	r3, [r7, #20]
 801049a:	2300      	movs	r3, #0
 801049c:	61bb      	str	r3, [r7, #24]
 801049e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80104a2:	61fb      	str	r3, [r7, #28]
 80104a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80104a8:	623b      	str	r3, [r7, #32]
 80104aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80104ae:	627b      	str	r3, [r7, #36]	; 0x24
 80104b0:	2300      	movs	r3, #0
 80104b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80104b4:	2300      	movs	r3, #0
 80104b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104b8:	e006      	b.n	80104c8 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
 80104ba:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80104be:	f7ff ff0d 	bl	80102dc <_ZL12delay_cyclest>
 80104c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c4:	3301      	adds	r3, #1
 80104c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fa fd6b 	bl	800afa8 <HAL_FDCAN_GetTxFifoFreeLevel>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d004      	beq.n	80104e2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 80104d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104da:	2b02      	cmp	r3, #2
 80104dc:	dc01      	bgt.n	80104e2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 80104de:	2301      	movs	r3, #1
 80104e0:	e000      	b.n	80104e4 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 80104e2:	2300      	movs	r3, #0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1e8      	bne.n	80104ba <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fa fd5b 	bl	800afa8 <HAL_FDCAN_GetTxFifoFreeLevel>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b03      	cmp	r3, #3
 80104f6:	bf14      	ite	ne
 80104f8:	2301      	movne	r3, #1
 80104fa:	2300      	moveq	r3, #0
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d002      	beq.n	8010508 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
 8010502:	f04f 33ff 	mov.w	r3, #4294967295
 8010506:	e014      	b.n	8010532 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010510:	f107 0308 	add.w	r3, r7, #8
 8010514:	4619      	mov	r1, r3
 8010516:	f7fa fc0b 	bl	800ad30 <HAL_FDCAN_AddMessageToTxFifoQ>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	bf14      	ite	ne
 8010520:	2301      	movne	r3, #1
 8010522:	2300      	moveq	r3, #0
 8010524:	b2db      	uxtb	r3, r3
 8010526:	2b00      	cmp	r3, #0
 8010528:	d002      	beq.n	8010530 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
 801052a:	f04f 33ff 	mov.w	r3, #4294967295
 801052e:	e000      	b.n	8010532 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	4618      	mov	r0, r3
 8010534:	3730      	adds	r7, #48	; 0x30
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	08018158 	.word	0x08018158

08010540 <_ZN5G4CAND1Ev>:
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	4a05      	ldr	r2, [pc, #20]	; (8010560 <_ZN5G4CAND1Ev+0x20>)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	601a      	str	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4618      	mov	r0, r3
 8010552:	f000 f8b1 	bl	80106b8 <_ZN19AbstractCANProviderD1Ev>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4618      	mov	r0, r3
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	08018264 	.word	0x08018264

08010564 <_ZN5G4CAND0Ev>:
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7ff ffe7 	bl	8010540 <_ZN5G4CAND1Ev>
 8010572:	2144      	movs	r1, #68	; 0x44
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f002 fbe8 	bl	8012d4a <_ZdlPvj>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	3708      	adds	r7, #8
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b091      	sub	sp, #68	; 0x44
 8010588:	af04      	add	r7, sp, #16
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
 801058e:	f107 0310 	add.w	r3, r7, #16
 8010592:	2200      	movs	r2, #0
 8010594:	601a      	str	r2, [r3, #0]
 8010596:	605a      	str	r2, [r3, #4]
 8010598:	609a      	str	r2, [r3, #8]
 801059a:	60da      	str	r2, [r3, #12]
 801059c:	611a      	str	r2, [r3, #16]
 801059e:	615a      	str	r2, [r3, #20]
 80105a0:	2300      	movs	r3, #0
 80105a2:	60fb      	str	r3, [r7, #12]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f103 0420 	add.w	r4, r3, #32
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f7 fb7a 	bl	8007ca8 <_ZNKSt8functionIFyvEEclEv>
 80105b4:	4602      	mov	r2, r0
 80105b6:	460b      	mov	r3, r1
 80105b8:	f107 010c 	add.w	r1, r7, #12
 80105bc:	9103      	str	r1, [sp, #12]
 80105be:	f107 0110 	add.w	r1, r7, #16
 80105c2:	9102      	str	r1, [sp, #8]
 80105c4:	2100      	movs	r1, #0
 80105c6:	9101      	str	r1, [sp, #4]
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	9100      	str	r1, [sp, #0]
 80105cc:	4620      	mov	r0, r4
 80105ce:	f002 f9d5 	bl	801297c <canardRxAccept>
 80105d2:	4603      	mov	r3, r0
 80105d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80105d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d10e      	bne.n	80105fe <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d010      	beq.n	801060e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 80105ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f107 0210 	add.w	r2, r7, #16
 80105f6:	4611      	mov	r1, r2
 80105f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105fa:	4798      	blx	r3
 80105fc:	e007      	b.n	801060e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 80105fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00e      	beq.n	8010624 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 8010606:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801060a:	2b01      	cmp	r3, #1
 801060c:	dc0a      	bgt.n	8010624 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	2b00      	cmp	r3, #0
 8010612:	d008      	beq.n	8010626 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	3220      	adds	r2, #32
 801061c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801061e:	4610      	mov	r0, r2
 8010620:	4798      	blx	r3
 8010622:	e000      	b.n	8010626 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 8010624:	bf00      	nop
 8010626:	3734      	adds	r7, #52	; 0x34
 8010628:	46bd      	mov	sp, r7
 801062a:	bd90      	pop	{r4, r7, pc}

0801062c <_ZN19AbstractCANProvider17process_canard_txEv>:
 801062c:	b5b0      	push	{r4, r5, r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	e036      	b.n	80106a4 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	330c      	adds	r3, #12
 801063a:	4618      	mov	r0, r3
 801063c:	f002 f968 	bl	8012910 <canardTxPeek>
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010648:	4313      	orrs	r3, r2
 801064a:	d00c      	beq.n	8010666 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010656:	4618      	mov	r0, r3
 8010658:	f7f7 fb26 	bl	8007ca8 <_ZNKSt8functionIFyvEEclEv>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	42a2      	cmp	r2, r4
 8010662:	41ab      	sbcs	r3, r5
 8010664:	d201      	bcs.n	801066a <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 8010666:	2301      	movs	r3, #1
 8010668:	e000      	b.n	801066c <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 801066a:	2300      	movs	r3, #0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00a      	beq.n	8010686 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3310      	adds	r3, #16
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	68f9      	ldr	r1, [r7, #12]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	4798      	blx	r3
 801067e:	60b8      	str	r0, [r7, #8]
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	2b00      	cmp	r3, #0
 8010684:	db13      	blt.n	80106ae <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f103 0520 	add.w	r5, r3, #32
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	330c      	adds	r3, #12
 8010694:	68f9      	ldr	r1, [r7, #12]
 8010696:	4618      	mov	r0, r3
 8010698:	f002 f94f 	bl	801293a <canardTxPop>
 801069c:	4603      	mov	r3, r0
 801069e:	4619      	mov	r1, r3
 80106a0:	4628      	mov	r0, r5
 80106a2:	47a0      	blx	r4
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	695b      	ldr	r3, [r3, #20]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1c4      	bne.n	8010636 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
 80106ac:	e000      	b.n	80106b0 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bdb0      	pop	{r4, r5, r7, pc}

080106b8 <_ZN19AbstractCANProviderD1Ev>:
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	4a04      	ldr	r2, [pc, #16]	; (80106d4 <_ZN19AbstractCANProviderD1Ev+0x1c>)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr
 80106d4:	08018288 	.word	0x08018288

080106d8 <_Z41__static_initialization_and_destruction_0ii>:
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d107      	bne.n	80106f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d102      	bne.n	80106f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80106f2:	4803      	ldr	r0, [pc, #12]	; (8010700 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80106f4:	f000 f806 	bl	8010704 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
 80106f8:	bf00      	nop
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	20000988 	.word	0x20000988

08010704 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
 8010704:	b590      	push	{r4, r7, lr}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4618      	mov	r0, r3
 8010710:	f7f8 fa28 	bl	8008b64 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8010714:	60f8      	str	r0, [r7, #12]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d00c      	beq.n	8010738 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7f8 f8ed 	bl	80088fe <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8010724:	4604      	mov	r4, r0
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f7f8 f97a 	bl	8008a20 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 801072c:	4603      	mov	r3, r0
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4619      	mov	r1, r3
 8010732:	4620      	mov	r0, r4
 8010734:	f7f8 fa23 	bl	8008b7e <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	bd90      	pop	{r4, r7, pc}

08010748 <_GLOBAL__sub_I_queue>:
 8010748:	b580      	push	{r7, lr}
 801074a:	af00      	add	r7, sp, #0
 801074c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010750:	2001      	movs	r0, #1
 8010752:	f7ff ffc1 	bl	80106d8 <_Z41__static_initialization_and_destruction_0ii>
 8010756:	bd80      	pop	{r7, pc}

08010758 <_GLOBAL__sub_D_queue>:
 8010758:	b580      	push	{r7, lr}
 801075a:	af00      	add	r7, sp, #0
 801075c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010760:	2000      	movs	r0, #0
 8010762:	f7ff ffb9 	bl	80106d8 <_Z41__static_initialization_and_destruction_0ii>
 8010766:	bd80      	pop	{r7, pc}

08010768 <cavlFindExtremum>:
 8010768:	b480      	push	{r7}
 801076a:	b085      	sub	sp, #20
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	460b      	mov	r3, r1
 8010772:	70fb      	strb	r3, [r7, #3]
 8010774:	2300      	movs	r3, #0
 8010776:	60fb      	str	r3, [r7, #12]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	60bb      	str	r3, [r7, #8]
 801077c:	e007      	b.n	801078e <cavlFindExtremum+0x26>
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	60fb      	str	r3, [r7, #12]
 8010782:	78fb      	ldrb	r3, [r7, #3]
 8010784:	68ba      	ldr	r2, [r7, #8]
 8010786:	009b      	lsls	r3, r3, #2
 8010788:	4413      	add	r3, r2
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	60bb      	str	r3, [r7, #8]
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d1f4      	bne.n	801077e <cavlFindExtremum+0x16>
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	4618      	mov	r0, r3
 8010798:	3714      	adds	r7, #20
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
	...

080107a4 <cavlPrivateRotate>:
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	460b      	mov	r3, r1
 80107ae:	70fb      	strb	r3, [r7, #3]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d014      	beq.n	80107e0 <cavlPrivateRotate+0x3c>
 80107b6:	78fb      	ldrb	r3, [r7, #3]
 80107b8:	f083 0301 	eor.w	r3, r3, #1
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	4413      	add	r3, r2
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00a      	beq.n	80107e0 <cavlPrivateRotate+0x3c>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80107d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107d4:	db04      	blt.n	80107e0 <cavlPrivateRotate+0x3c>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	dd05      	ble.n	80107ec <cavlPrivateRotate+0x48>
 80107e0:	4b2a      	ldr	r3, [pc, #168]	; (801088c <cavlPrivateRotate+0xe8>)
 80107e2:	4a2b      	ldr	r2, [pc, #172]	; (8010890 <cavlPrivateRotate+0xec>)
 80107e4:	2162      	movs	r1, #98	; 0x62
 80107e6:	482b      	ldr	r0, [pc, #172]	; (8010894 <cavlPrivateRotate+0xf0>)
 80107e8:	f002 fad8 	bl	8012d9c <__assert_func>
 80107ec:	78fb      	ldrb	r3, [r7, #3]
 80107ee:	f083 0301 	eor.w	r3, r3, #1
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4413      	add	r3, r2
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	60fb      	str	r3, [r7, #12]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00e      	beq.n	8010824 <cavlPrivateRotate+0x80>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	6879      	ldr	r1, [r7, #4]
 8010812:	4299      	cmp	r1, r3
 8010814:	bf0c      	ite	eq
 8010816:	2301      	moveq	r3, #1
 8010818:	2300      	movne	r3, #0
 801081a:	b2db      	uxtb	r3, r3
 801081c:	009b      	lsls	r3, r3, #2
 801081e:	4413      	add	r3, r2
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	605a      	str	r2, [r3, #4]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	601a      	str	r2, [r3, #0]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	78fb      	ldrb	r3, [r7, #3]
 8010834:	78fa      	ldrb	r2, [r7, #3]
 8010836:	f082 0201 	eor.w	r2, r2, #1
 801083a:	b2d2      	uxtb	r2, r2
 801083c:	4610      	mov	r0, r2
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	4413      	add	r3, r2
 8010844:	685a      	ldr	r2, [r3, #4]
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	0083      	lsls	r3, r0, #2
 801084a:	440b      	add	r3, r1
 801084c:	605a      	str	r2, [r3, #4]
 801084e:	78fb      	ldrb	r3, [r7, #3]
 8010850:	f083 0301 	eor.w	r3, r3, #1
 8010854:	b2db      	uxtb	r3, r3
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	009b      	lsls	r3, r3, #2
 801085a:	4413      	add	r3, r2
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d009      	beq.n	8010876 <cavlPrivateRotate+0xd2>
 8010862:	78fb      	ldrb	r3, [r7, #3]
 8010864:	f083 0301 	eor.w	r3, r3, #1
 8010868:	b2db      	uxtb	r3, r3
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	601a      	str	r2, [r3, #0]
 8010876:	78fb      	ldrb	r3, [r7, #3]
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	4413      	add	r3, r2
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	605a      	str	r2, [r3, #4]
 8010882:	bf00      	nop
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	080175d0 	.word	0x080175d0
 8010890:	08018610 	.word	0x08018610
 8010894:	08017618 	.word	0x08017618

08010898 <cavlPrivateAdjustBalance>:
 8010898:	b580      	push	{r7, lr}
 801089a:	b086      	sub	sp, #24
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	460b      	mov	r3, r1
 80108a2:	70fb      	strb	r3, [r7, #3]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00a      	beq.n	80108c0 <cavlPrivateAdjustBalance+0x28>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80108b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108b4:	db04      	blt.n	80108c0 <cavlPrivateAdjustBalance+0x28>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	dd05      	ble.n	80108cc <cavlPrivateAdjustBalance+0x34>
 80108c0:	4b61      	ldr	r3, [pc, #388]	; (8010a48 <cavlPrivateAdjustBalance+0x1b0>)
 80108c2:	4a62      	ldr	r2, [pc, #392]	; (8010a4c <cavlPrivateAdjustBalance+0x1b4>)
 80108c4:	2177      	movs	r1, #119	; 0x77
 80108c6:	4862      	ldr	r0, [pc, #392]	; (8010a50 <cavlPrivateAdjustBalance+0x1b8>)
 80108c8:	f002 fa68 	bl	8012d9c <__assert_func>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	617b      	str	r3, [r7, #20]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	78fa      	ldrb	r2, [r7, #3]
 80108da:	2a00      	cmp	r2, #0
 80108dc:	d001      	beq.n	80108e2 <cavlPrivateAdjustBalance+0x4a>
 80108de:	2201      	movs	r2, #1
 80108e0:	e000      	b.n	80108e4 <cavlPrivateAdjustBalance+0x4c>
 80108e2:	22ff      	movs	r2, #255	; 0xff
 80108e4:	4413      	add	r3, r2
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	74fb      	strb	r3, [r7, #19]
 80108ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f2:	db04      	blt.n	80108fe <cavlPrivateAdjustBalance+0x66>
 80108f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	f340 809c 	ble.w	8010a36 <cavlPrivateAdjustBalance+0x19e>
 80108fe:	7cfb      	ldrb	r3, [r7, #19]
 8010900:	09db      	lsrs	r3, r3, #7
 8010902:	74bb      	strb	r3, [r7, #18]
 8010904:	7cbb      	ldrb	r3, [r7, #18]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <cavlPrivateAdjustBalance+0x76>
 801090a:	2301      	movs	r3, #1
 801090c:	e001      	b.n	8010912 <cavlPrivateAdjustBalance+0x7a>
 801090e:	f04f 33ff 	mov.w	r3, #4294967295
 8010912:	747b      	strb	r3, [r7, #17]
 8010914:	7cbb      	ldrb	r3, [r7, #18]
 8010916:	f083 0301 	eor.w	r3, r3, #1
 801091a:	b2db      	uxtb	r3, r3
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	4413      	add	r3, r2
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d105      	bne.n	8010938 <cavlPrivateAdjustBalance+0xa0>
 801092c:	4b49      	ldr	r3, [pc, #292]	; (8010a54 <cavlPrivateAdjustBalance+0x1bc>)
 801092e:	4a47      	ldr	r2, [pc, #284]	; (8010a4c <cavlPrivateAdjustBalance+0x1b4>)
 8010930:	217f      	movs	r1, #127	; 0x7f
 8010932:	4847      	ldr	r0, [pc, #284]	; (8010a50 <cavlPrivateAdjustBalance+0x1b8>)
 8010934:	f002 fa32 	bl	8012d9c <__assert_func>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801093e:	461a      	mov	r2, r3
 8010940:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8010944:	fb02 f303 	mul.w	r3, r2, r3
 8010948:	2b00      	cmp	r3, #0
 801094a:	dc1c      	bgt.n	8010986 <cavlPrivateAdjustBalance+0xee>
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	617b      	str	r3, [r7, #20]
 8010950:	7cbb      	ldrb	r3, [r7, #18]
 8010952:	4619      	mov	r1, r3
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff ff25 	bl	80107a4 <cavlPrivateRotate>
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d109      	bne.n	8010978 <cavlPrivateAdjustBalance+0xe0>
 8010964:	7c7b      	ldrb	r3, [r7, #17]
 8010966:	425b      	negs	r3, r3
 8010968:	b2db      	uxtb	r3, r3
 801096a:	b25a      	sxtb	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	731a      	strb	r2, [r3, #12]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	7c7a      	ldrb	r2, [r7, #17]
 8010974:	731a      	strb	r2, [r3, #12]
 8010976:	e061      	b.n	8010a3c <cavlPrivateAdjustBalance+0x1a4>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	731a      	strb	r2, [r3, #12]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2200      	movs	r2, #0
 8010982:	731a      	strb	r2, [r3, #12]
 8010984:	e05a      	b.n	8010a3c <cavlPrivateAdjustBalance+0x1a4>
 8010986:	7cbb      	ldrb	r3, [r7, #18]
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	4413      	add	r3, r2
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	60bb      	str	r3, [r7, #8]
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d105      	bne.n	80109a4 <cavlPrivateAdjustBalance+0x10c>
 8010998:	4b2f      	ldr	r3, [pc, #188]	; (8010a58 <cavlPrivateAdjustBalance+0x1c0>)
 801099a:	4a2c      	ldr	r2, [pc, #176]	; (8010a4c <cavlPrivateAdjustBalance+0x1b4>)
 801099c:	2192      	movs	r1, #146	; 0x92
 801099e:	482c      	ldr	r0, [pc, #176]	; (8010a50 <cavlPrivateAdjustBalance+0x1b8>)
 80109a0:	f002 f9fc 	bl	8012d9c <__assert_func>
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	617b      	str	r3, [r7, #20]
 80109a8:	7cbb      	ldrb	r3, [r7, #18]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	bf14      	ite	ne
 80109ae:	2301      	movne	r3, #1
 80109b0:	2300      	moveq	r3, #0
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	f083 0301 	eor.w	r3, r3, #1
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	f003 0301 	and.w	r3, r3, #1
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	4619      	mov	r1, r3
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f7ff feee 	bl	80107a4 <cavlPrivateRotate>
 80109c8:	7cbb      	ldrb	r3, [r7, #18]
 80109ca:	4619      	mov	r1, r3
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff fee9 	bl	80107a4 <cavlPrivateRotate>
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80109d8:	461a      	mov	r2, r3
 80109da:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80109de:	fb02 f303 	mul.w	r3, r2, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	da09      	bge.n	80109fa <cavlPrivateAdjustBalance+0x162>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	7c7a      	ldrb	r2, [r7, #17]
 80109ea:	731a      	strb	r2, [r3, #12]
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2200      	movs	r2, #0
 80109f0:	731a      	strb	r2, [r3, #12]
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2200      	movs	r2, #0
 80109f6:	731a      	strb	r2, [r3, #12]
 80109f8:	e020      	b.n	8010a3c <cavlPrivateAdjustBalance+0x1a4>
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010a00:	461a      	mov	r2, r3
 8010a02:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8010a06:	fb02 f303 	mul.w	r3, r2, r3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	dd0c      	ble.n	8010a28 <cavlPrivateAdjustBalance+0x190>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	731a      	strb	r2, [r3, #12]
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2200      	movs	r2, #0
 8010a18:	731a      	strb	r2, [r3, #12]
 8010a1a:	7c7b      	ldrb	r3, [r7, #17]
 8010a1c:	425b      	negs	r3, r3
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	b25a      	sxtb	r2, r3
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	731a      	strb	r2, [r3, #12]
 8010a26:	e009      	b.n	8010a3c <cavlPrivateAdjustBalance+0x1a4>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	731a      	strb	r2, [r3, #12]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2200      	movs	r2, #0
 8010a32:	731a      	strb	r2, [r3, #12]
 8010a34:	e002      	b.n	8010a3c <cavlPrivateAdjustBalance+0x1a4>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	7cfa      	ldrb	r2, [r7, #19]
 8010a3a:	731a      	strb	r2, [r3, #12]
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3718      	adds	r7, #24
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	08017644 	.word	0x08017644
 8010a4c:	080185f4 	.word	0x080185f4
 8010a50:	08017618 	.word	0x08017618
 8010a54:	08017674 	.word	0x08017674
 8010a58:	08017680 	.word	0x08017680

08010a5c <cavlPrivateRetraceOnGrowth>:
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d004      	beq.n	8010a74 <cavlPrivateRetraceOnGrowth+0x18>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d005      	beq.n	8010a80 <cavlPrivateRetraceOnGrowth+0x24>
 8010a74:	4b23      	ldr	r3, [pc, #140]	; (8010b04 <cavlPrivateRetraceOnGrowth+0xa8>)
 8010a76:	4a24      	ldr	r2, [pc, #144]	; (8010b08 <cavlPrivateRetraceOnGrowth+0xac>)
 8010a78:	21b5      	movs	r1, #181	; 0xb5
 8010a7a:	4824      	ldr	r0, [pc, #144]	; (8010b0c <cavlPrivateRetraceOnGrowth+0xb0>)
 8010a7c:	f002 f98e 	bl	8012d9c <__assert_func>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	617b      	str	r3, [r7, #20]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	613b      	str	r3, [r7, #16]
 8010a8a:	e023      	b.n	8010ad4 <cavlPrivateRetraceOnGrowth+0x78>
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	bf0c      	ite	eq
 8010a96:	2301      	moveq	r3, #1
 8010a98:	2300      	movne	r3, #0
 8010a9a:	73fb      	strb	r3, [r7, #15]
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4413      	add	r3, r2
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	697a      	ldr	r2, [r7, #20]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d005      	beq.n	8010ab8 <cavlPrivateRetraceOnGrowth+0x5c>
 8010aac:	4b18      	ldr	r3, [pc, #96]	; (8010b10 <cavlPrivateRetraceOnGrowth+0xb4>)
 8010aae:	4a16      	ldr	r2, [pc, #88]	; (8010b08 <cavlPrivateRetraceOnGrowth+0xac>)
 8010ab0:	21bb      	movs	r1, #187	; 0xbb
 8010ab2:	4816      	ldr	r0, [pc, #88]	; (8010b0c <cavlPrivateRetraceOnGrowth+0xb0>)
 8010ab4:	f002 f972 	bl	8012d9c <__assert_func>
 8010ab8:	7bfb      	ldrb	r3, [r7, #15]
 8010aba:	4619      	mov	r1, r3
 8010abc:	6938      	ldr	r0, [r7, #16]
 8010abe:	f7ff feeb 	bl	8010898 <cavlPrivateAdjustBalance>
 8010ac2:	6178      	str	r0, [r7, #20]
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	613b      	str	r3, [r7, #16]
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d003      	beq.n	8010adc <cavlPrivateRetraceOnGrowth+0x80>
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1d8      	bne.n	8010a8c <cavlPrivateRetraceOnGrowth+0x30>
 8010ada:	e000      	b.n	8010ade <cavlPrivateRetraceOnGrowth+0x82>
 8010adc:	bf00      	nop
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d105      	bne.n	8010af0 <cavlPrivateRetraceOnGrowth+0x94>
 8010ae4:	4b0b      	ldr	r3, [pc, #44]	; (8010b14 <cavlPrivateRetraceOnGrowth+0xb8>)
 8010ae6:	4a08      	ldr	r2, [pc, #32]	; (8010b08 <cavlPrivateRetraceOnGrowth+0xac>)
 8010ae8:	21c3      	movs	r1, #195	; 0xc3
 8010aea:	4808      	ldr	r0, [pc, #32]	; (8010b0c <cavlPrivateRetraceOnGrowth+0xb0>)
 8010aec:	f002 f956 	bl	8012d9c <__assert_func>
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d101      	bne.n	8010afa <cavlPrivateRetraceOnGrowth+0x9e>
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	e000      	b.n	8010afc <cavlPrivateRetraceOnGrowth+0xa0>
 8010afa:	2300      	movs	r3, #0
 8010afc:	4618      	mov	r0, r3
 8010afe:	3718      	adds	r7, #24
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	0801768c 	.word	0x0801768c
 8010b08:	080185d8 	.word	0x080185d8
 8010b0c:	08017618 	.word	0x08017618
 8010b10:	080176b0 	.word	0x080176b0
 8010b14:	080176c0 	.word	0x080176c0

08010b18 <cavlSearch>:
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
 8010b24:	603b      	str	r3, [r7, #0]
 8010b26:	2300      	movs	r3, #0
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d065      	beq.n	8010bfc <cavlSearch+0xe4>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d062      	beq.n	8010bfc <cavlSearch+0xe4>
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	623b      	str	r3, [r7, #32]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	61fb      	str	r3, [r7, #28]
 8010b40:	e02f      	b.n	8010ba2 <cavlSearch+0x8a>
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4611      	mov	r1, r2
 8010b4a:	68b8      	ldr	r0, [r7, #8]
 8010b4c:	4798      	blx	r3
 8010b4e:	4603      	mov	r3, r0
 8010b50:	76fb      	strb	r3, [r7, #27]
 8010b52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d103      	bne.n	8010b62 <cavlSearch+0x4a>
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b60:	e023      	b.n	8010baa <cavlSearch+0x92>
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	623b      	str	r3, [r7, #32]
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	bfcc      	ite	gt
 8010b74:	2301      	movgt	r3, #1
 8010b76:	2300      	movle	r3, #0
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	4413      	add	r3, r2
 8010b7e:	3304      	adds	r3, #4
 8010b80:	61fb      	str	r3, [r7, #28]
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00b      	beq.n	8010ba2 <cavlSearch+0x8a>
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	6a3a      	ldr	r2, [r7, #32]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d005      	beq.n	8010ba2 <cavlSearch+0x8a>
 8010b96:	4b1c      	ldr	r3, [pc, #112]	; (8010c08 <cavlSearch+0xf0>)
 8010b98:	4a1c      	ldr	r2, [pc, #112]	; (8010c0c <cavlSearch+0xf4>)
 8010b9a:	21db      	movs	r1, #219	; 0xdb
 8010b9c:	481c      	ldr	r0, [pc, #112]	; (8010c10 <cavlSearch+0xf8>)
 8010b9e:	f002 f8fd 	bl	8012d9c <__assert_func>
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1cb      	bne.n	8010b42 <cavlSearch+0x2a>
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d125      	bne.n	8010bfc <cavlSearch+0xe4>
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d004      	beq.n	8010bc0 <cavlSearch+0xa8>
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	68b8      	ldr	r0, [r7, #8]
 8010bba:	4798      	blx	r3
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	e000      	b.n	8010bc2 <cavlSearch+0xaa>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d018      	beq.n	8010bfc <cavlSearch+0xe4>
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bce:	601a      	str	r2, [r3, #0]
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	605a      	str	r2, [r3, #4]
 8010bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd8:	2200      	movs	r2, #0
 8010bda:	609a      	str	r2, [r3, #8]
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	6a3a      	ldr	r2, [r7, #32]
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be4:	2200      	movs	r2, #0
 8010be6:	731a      	strb	r2, [r3, #12]
 8010be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bea:	f7ff ff37 	bl	8010a5c <cavlPrivateRetraceOnGrowth>
 8010bee:	6178      	str	r0, [r7, #20]
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d002      	beq.n	8010bfc <cavlSearch+0xe4>
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	601a      	str	r2, [r3, #0]
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3728      	adds	r7, #40	; 0x28
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	080176cc 	.word	0x080176cc
 8010c0c:	080185cc 	.word	0x080185cc
 8010c10:	08017618 	.word	0x08017618

08010c14 <cavlRemove>:
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b088      	sub	sp, #32
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 8116 	beq.w	8010e52 <cavlRemove+0x23e>
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 8112 	beq.w	8010e52 <cavlRemove+0x23e>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d105      	bne.n	8010c42 <cavlRemove+0x2e>
 8010c36:	4b89      	ldr	r3, [pc, #548]	; (8010e5c <cavlRemove+0x248>)
 8010c38:	4a89      	ldr	r2, [pc, #548]	; (8010e60 <cavlRemove+0x24c>)
 8010c3a:	21f6      	movs	r1, #246	; 0xf6
 8010c3c:	4889      	ldr	r0, [pc, #548]	; (8010e64 <cavlRemove+0x250>)
 8010c3e:	f002 f8ad 	bl	8012d9c <__assert_func>
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d10a      	bne.n	8010c60 <cavlRemove+0x4c>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d005      	beq.n	8010c60 <cavlRemove+0x4c>
 8010c54:	4b84      	ldr	r3, [pc, #528]	; (8010e68 <cavlRemove+0x254>)
 8010c56:	4a82      	ldr	r2, [pc, #520]	; (8010e60 <cavlRemove+0x24c>)
 8010c58:	21f7      	movs	r1, #247	; 0xf7
 8010c5a:	4882      	ldr	r0, [pc, #520]	; (8010e64 <cavlRemove+0x250>)
 8010c5c:	f002 f89e 	bl	8012d9c <__assert_func>
 8010c60:	2300      	movs	r3, #0
 8010c62:	61fb      	str	r3, [r7, #28]
 8010c64:	2300      	movs	r3, #0
 8010c66:	76fb      	strb	r3, [r7, #27]
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d073      	beq.n	8010d58 <cavlRemove+0x144>
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d06f      	beq.n	8010d58 <cavlRemove+0x144>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7ff fd72 	bl	8010768 <cavlFindExtremum>
 8010c84:	6178      	str	r0, [r7, #20]
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d007      	beq.n	8010c9c <cavlRemove+0x88>
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d103      	bne.n	8010c9c <cavlRemove+0x88>
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d105      	bne.n	8010ca8 <cavlRemove+0x94>
 8010c9c:	4b73      	ldr	r3, [pc, #460]	; (8010e6c <cavlRemove+0x258>)
 8010c9e:	4a70      	ldr	r2, [pc, #448]	; (8010e60 <cavlRemove+0x24c>)
 8010ca0:	21ff      	movs	r1, #255	; 0xff
 8010ca2:	4870      	ldr	r0, [pc, #448]	; (8010e64 <cavlRemove+0x250>)
 8010ca4:	f002 f87a 	bl	8012d9c <__assert_func>
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	731a      	strb	r2, [r3, #12]
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	685a      	ldr	r2, [r3, #4]
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	605a      	str	r2, [r3, #4]
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	697a      	ldr	r2, [r7, #20]
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	683a      	ldr	r2, [r7, #0]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d025      	beq.n	8010d18 <cavlRemove+0x104>
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	61fb      	str	r3, [r7, #28]
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	697a      	ldr	r2, [r7, #20]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d006      	beq.n	8010cea <cavlRemove+0xd6>
 8010cdc:	4b64      	ldr	r3, [pc, #400]	; (8010e70 <cavlRemove+0x25c>)
 8010cde:	4a60      	ldr	r2, [pc, #384]	; (8010e60 <cavlRemove+0x24c>)
 8010ce0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010ce4:	485f      	ldr	r0, [pc, #380]	; (8010e64 <cavlRemove+0x250>)
 8010ce6:	f002 f859 	bl	8012d9c <__assert_func>
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	689a      	ldr	r2, [r3, #8]
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	605a      	str	r2, [r3, #4]
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d003      	beq.n	8010d02 <cavlRemove+0xee>
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	69fa      	ldr	r2, [r7, #28]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	689a      	ldr	r2, [r3, #8]
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	609a      	str	r2, [r3, #8]
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	689b      	ldr	r3, [r3, #8]
 8010d0e:	697a      	ldr	r2, [r7, #20]
 8010d10:	601a      	str	r2, [r3, #0]
 8010d12:	2300      	movs	r3, #0
 8010d14:	76fb      	strb	r3, [r7, #27]
 8010d16:	e003      	b.n	8010d20 <cavlRemove+0x10c>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	61fb      	str	r3, [r7, #28]
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	76fb      	strb	r3, [r7, #27]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00f      	beq.n	8010d50 <cavlRemove+0x13c>
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	4299      	cmp	r1, r3
 8010d3e:	bf0c      	ite	eq
 8010d40:	2301      	moveq	r3, #1
 8010d42:	2300      	movne	r3, #0
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4413      	add	r3, r2
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	605a      	str	r2, [r3, #4]
 8010d4e:	e046      	b.n	8010dde <cavlRemove+0x1ca>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	697a      	ldr	r2, [r7, #20]
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	e042      	b.n	8010dde <cavlRemove+0x1ca>
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	61fb      	str	r3, [r7, #28]
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	bf14      	ite	ne
 8010d66:	2301      	movne	r3, #1
 8010d68:	2300      	moveq	r3, #0
 8010d6a:	74fb      	strb	r3, [r7, #19]
 8010d6c:	7cfb      	ldrb	r3, [r7, #19]
 8010d6e:	683a      	ldr	r2, [r7, #0]
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	4413      	add	r3, r2
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d006      	beq.n	8010d88 <cavlRemove+0x174>
 8010d7a:	7cfb      	ldrb	r3, [r7, #19]
 8010d7c:	683a      	ldr	r2, [r7, #0]
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	4413      	add	r3, r2
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	69fa      	ldr	r2, [r7, #28]
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d020      	beq.n	8010dd0 <cavlRemove+0x1bc>
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	683a      	ldr	r2, [r7, #0]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	bf0c      	ite	eq
 8010d98:	2301      	moveq	r3, #1
 8010d9a:	2300      	movne	r3, #0
 8010d9c:	76fb      	strb	r3, [r7, #27]
 8010d9e:	7cfb      	ldrb	r3, [r7, #19]
 8010da0:	7ef8      	ldrb	r0, [r7, #27]
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	4413      	add	r3, r2
 8010da8:	685a      	ldr	r2, [r3, #4]
 8010daa:	69f9      	ldr	r1, [r7, #28]
 8010dac:	0083      	lsls	r3, r0, #2
 8010dae:	440b      	add	r3, r1
 8010db0:	605a      	str	r2, [r3, #4]
 8010db2:	7efb      	ldrb	r3, [r7, #27]
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	4413      	add	r3, r2
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00e      	beq.n	8010dde <cavlRemove+0x1ca>
 8010dc0:	7efb      	ldrb	r3, [r7, #27]
 8010dc2:	69fa      	ldr	r2, [r7, #28]
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	69fa      	ldr	r2, [r7, #28]
 8010dcc:	601a      	str	r2, [r3, #0]
 8010dce:	e006      	b.n	8010dde <cavlRemove+0x1ca>
 8010dd0:	7cfb      	ldrb	r3, [r7, #19]
 8010dd2:	683a      	ldr	r2, [r7, #0]
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4413      	add	r3, r2
 8010dd8:	685a      	ldr	r2, [r3, #4]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	601a      	str	r2, [r3, #0]
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d036      	beq.n	8010e52 <cavlRemove+0x23e>
 8010de4:	2300      	movs	r3, #0
 8010de6:	60fb      	str	r3, [r7, #12]
 8010de8:	7efb      	ldrb	r3, [r7, #27]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bf14      	ite	ne
 8010dee:	2301      	movne	r3, #1
 8010df0:	2300      	moveq	r3, #0
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	f083 0301 	eor.w	r3, r3, #1
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	f003 0301 	and.w	r3, r3, #1
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	4619      	mov	r1, r3
 8010e02:	69f8      	ldr	r0, [r7, #28]
 8010e04:	f7ff fd48 	bl	8010898 <cavlPrivateAdjustBalance>
 8010e08:	60f8      	str	r0, [r7, #12]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	61fb      	str	r3, [r7, #28]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10b      	bne.n	8010e32 <cavlRemove+0x21e>
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d008      	beq.n	8010e32 <cavlRemove+0x21e>
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	689b      	ldr	r3, [r3, #8]
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	bf0c      	ite	eq
 8010e2a:	2301      	moveq	r3, #1
 8010e2c:	2300      	movne	r3, #0
 8010e2e:	76fb      	strb	r3, [r7, #27]
 8010e30:	e7da      	b.n	8010de8 <cavlRemove+0x1d4>
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10c      	bne.n	8010e52 <cavlRemove+0x23e>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <cavlRemove+0x238>
 8010e3e:	4b0d      	ldr	r3, [pc, #52]	; (8010e74 <cavlRemove+0x260>)
 8010e40:	4a07      	ldr	r2, [pc, #28]	; (8010e60 <cavlRemove+0x24c>)
 8010e42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8010e46:	4807      	ldr	r0, [pc, #28]	; (8010e64 <cavlRemove+0x250>)
 8010e48:	f001 ffa8 	bl	8012d9c <__assert_func>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	601a      	str	r2, [r3, #0]
 8010e52:	bf00      	nop
 8010e54:	3720      	adds	r7, #32
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	080176f0 	.word	0x080176f0
 8010e60:	08018654 	.word	0x08018654
 8010e64:	08017618 	.word	0x08017618
 8010e68:	08017700 	.word	0x08017700
 8010e6c:	08017728 	.word	0x08017728
 8010e70:	08017760 	.word	0x08017760
 8010e74:	080176c0 	.word	0x080176c0

08010e78 <avlTrivialFactory>:
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
	...

08010e90 <crcAddByte>:
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	4603      	mov	r3, r0
 8010e98:	460a      	mov	r2, r1
 8010e9a:	80fb      	strh	r3, [r7, #6]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	717b      	strb	r3, [r7, #5]
 8010ea0:	88fb      	ldrh	r3, [r7, #6]
 8010ea2:	021b      	lsls	r3, r3, #8
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	88fb      	ldrh	r3, [r7, #6]
 8010ea8:	0a1b      	lsrs	r3, r3, #8
 8010eaa:	b299      	uxth	r1, r3
 8010eac:	797b      	ldrb	r3, [r7, #5]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	404b      	eors	r3, r1
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	4905      	ldr	r1, [pc, #20]	; (8010ecc <crcAddByte+0x3c>)
 8010eb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ebc:	4053      	eors	r3, r2
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	080182a4 	.word	0x080182a4

08010ed0 <crcAdd>:
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b088      	sub	sp, #32
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	81fb      	strh	r3, [r7, #14]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d108      	bne.n	8010ef6 <crcAdd+0x26>
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d005      	beq.n	8010ef6 <crcAdd+0x26>
 8010eea:	4b12      	ldr	r3, [pc, #72]	; (8010f34 <crcAdd+0x64>)
 8010eec:	4a12      	ldr	r2, [pc, #72]	; (8010f38 <crcAdd+0x68>)
 8010eee:	2185      	movs	r1, #133	; 0x85
 8010ef0:	4812      	ldr	r0, [pc, #72]	; (8010f3c <crcAdd+0x6c>)
 8010ef2:	f001 ff53 	bl	8012d9c <__assert_func>
 8010ef6:	89fb      	ldrh	r3, [r7, #14]
 8010ef8:	83fb      	strh	r3, [r7, #30]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	61bb      	str	r3, [r7, #24]
 8010efe:	2300      	movs	r3, #0
 8010f00:	617b      	str	r3, [r7, #20]
 8010f02:	e00e      	b.n	8010f22 <crcAdd+0x52>
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	781a      	ldrb	r2, [r3, #0]
 8010f08:	8bfb      	ldrh	r3, [r7, #30]
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7ff ffbf 	bl	8010e90 <crcAddByte>
 8010f12:	4603      	mov	r3, r0
 8010f14:	83fb      	strh	r3, [r7, #30]
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	61bb      	str	r3, [r7, #24]
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	617b      	str	r3, [r7, #20]
 8010f22:	697a      	ldr	r2, [r7, #20]
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d3ec      	bcc.n	8010f04 <crcAdd+0x34>
 8010f2a:	8bfb      	ldrh	r3, [r7, #30]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3720      	adds	r7, #32
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	08017770 	.word	0x08017770
 8010f38:	08018520 	.word	0x08018520
 8010f3c:	08017798 	.word	0x08017798

08010f40 <txMakeMessageSessionSpecifier>:
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	4603      	mov	r3, r0
 8010f48:	460a      	mov	r2, r1
 8010f4a:	80fb      	strh	r3, [r7, #6]
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	717b      	strb	r3, [r7, #5]
 8010f50:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	da05      	bge.n	8010f64 <txMakeMessageSessionSpecifier+0x24>
 8010f58:	4b0e      	ldr	r3, [pc, #56]	; (8010f94 <txMakeMessageSessionSpecifier+0x54>)
 8010f5a:	4a0f      	ldr	r2, [pc, #60]	; (8010f98 <txMakeMessageSessionSpecifier+0x58>)
 8010f5c:	21ac      	movs	r1, #172	; 0xac
 8010f5e:	480f      	ldr	r0, [pc, #60]	; (8010f9c <txMakeMessageSessionSpecifier+0x5c>)
 8010f60:	f001 ff1c 	bl	8012d9c <__assert_func>
 8010f64:	88fb      	ldrh	r3, [r7, #6]
 8010f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f6a:	d305      	bcc.n	8010f78 <txMakeMessageSessionSpecifier+0x38>
 8010f6c:	4b0c      	ldr	r3, [pc, #48]	; (8010fa0 <txMakeMessageSessionSpecifier+0x60>)
 8010f6e:	4a0a      	ldr	r2, [pc, #40]	; (8010f98 <txMakeMessageSessionSpecifier+0x58>)
 8010f70:	21ad      	movs	r1, #173	; 0xad
 8010f72:	480a      	ldr	r0, [pc, #40]	; (8010f9c <txMakeMessageSessionSpecifier+0x5c>)
 8010f74:	f001 ff12 	bl	8012d9c <__assert_func>
 8010f78:	88fb      	ldrh	r3, [r7, #6]
 8010f7a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	60fb      	str	r3, [r7, #12]
 8010f82:	797a      	ldrb	r2, [r7, #5]
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	021b      	lsls	r3, r3, #8
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	080177c8 	.word	0x080177c8
 8010f98:	08018528 	.word	0x08018528
 8010f9c:	08017798 	.word	0x08017798
 8010fa0:	080177dc 	.word	0x080177dc

08010fa4 <txMakeServiceSessionSpecifier>:
 8010fa4:	b590      	push	{r4, r7, lr}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4604      	mov	r4, r0
 8010fac:	4608      	mov	r0, r1
 8010fae:	4611      	mov	r1, r2
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	4623      	mov	r3, r4
 8010fb4:	80fb      	strh	r3, [r7, #6]
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	717b      	strb	r3, [r7, #5]
 8010fba:	460b      	mov	r3, r1
 8010fbc:	713b      	strb	r3, [r7, #4]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	70fb      	strb	r3, [r7, #3]
 8010fc2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	da05      	bge.n	8010fd6 <txMakeServiceSessionSpecifier+0x32>
 8010fca:	4b17      	ldr	r3, [pc, #92]	; (8011028 <txMakeServiceSessionSpecifier+0x84>)
 8010fcc:	4a17      	ldr	r2, [pc, #92]	; (801102c <txMakeServiceSessionSpecifier+0x88>)
 8010fce:	21b7      	movs	r1, #183	; 0xb7
 8010fd0:	4817      	ldr	r0, [pc, #92]	; (8011030 <txMakeServiceSessionSpecifier+0x8c>)
 8010fd2:	f001 fee3 	bl	8012d9c <__assert_func>
 8010fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	da05      	bge.n	8010fea <txMakeServiceSessionSpecifier+0x46>
 8010fde:	4b15      	ldr	r3, [pc, #84]	; (8011034 <txMakeServiceSessionSpecifier+0x90>)
 8010fe0:	4a12      	ldr	r2, [pc, #72]	; (801102c <txMakeServiceSessionSpecifier+0x88>)
 8010fe2:	21b8      	movs	r1, #184	; 0xb8
 8010fe4:	4812      	ldr	r0, [pc, #72]	; (8011030 <txMakeServiceSessionSpecifier+0x8c>)
 8010fe6:	f001 fed9 	bl	8012d9c <__assert_func>
 8010fea:	88fb      	ldrh	r3, [r7, #6]
 8010fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ff0:	d305      	bcc.n	8010ffe <txMakeServiceSessionSpecifier+0x5a>
 8010ff2:	4b11      	ldr	r3, [pc, #68]	; (8011038 <txMakeServiceSessionSpecifier+0x94>)
 8010ff4:	4a0d      	ldr	r2, [pc, #52]	; (801102c <txMakeServiceSessionSpecifier+0x88>)
 8010ff6:	21b9      	movs	r1, #185	; 0xb9
 8010ff8:	480d      	ldr	r0, [pc, #52]	; (8011030 <txMakeServiceSessionSpecifier+0x8c>)
 8010ffa:	f001 fecf 	bl	8012d9c <__assert_func>
 8010ffe:	793a      	ldrb	r2, [r7, #4]
 8011000:	78fb      	ldrb	r3, [r7, #3]
 8011002:	01db      	lsls	r3, r3, #7
 8011004:	431a      	orrs	r2, r3
 8011006:	88fb      	ldrh	r3, [r7, #6]
 8011008:	039b      	lsls	r3, r3, #14
 801100a:	4313      	orrs	r3, r2
 801100c:	797a      	ldrb	r2, [r7, #5]
 801100e:	2a00      	cmp	r2, #0
 8011010:	d002      	beq.n	8011018 <txMakeServiceSessionSpecifier+0x74>
 8011012:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011016:	e000      	b.n	801101a <txMakeServiceSessionSpecifier+0x76>
 8011018:	2200      	movs	r2, #0
 801101a:	4313      	orrs	r3, r2
 801101c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011020:	4618      	mov	r0, r3
 8011022:	370c      	adds	r7, #12
 8011024:	46bd      	mov	sp, r7
 8011026:	bd90      	pop	{r4, r7, pc}
 8011028:	080177c8 	.word	0x080177c8
 801102c:	08018548 	.word	0x08018548
 8011030:	08017798 	.word	0x08017798
 8011034:	080177f0 	.word	0x080177f0
 8011038:	08017804 	.word	0x08017804

0801103c <adjustPresentationLayerMTU>:
 801103c:	b480      	push	{r7}
 801103e:	b085      	sub	sp, #20
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	2340      	movs	r3, #64	; 0x40
 8011046:	60bb      	str	r3, [r7, #8]
 8011048:	2300      	movs	r3, #0
 801104a:	60fb      	str	r3, [r7, #12]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b07      	cmp	r3, #7
 8011050:	d802      	bhi.n	8011058 <adjustPresentationLayerMTU+0x1c>
 8011052:	2308      	movs	r3, #8
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e014      	b.n	8011082 <adjustPresentationLayerMTU+0x46>
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	429a      	cmp	r2, r3
 801105e:	d808      	bhi.n	8011072 <adjustPresentationLayerMTU+0x36>
 8011060:	4a0c      	ldr	r2, [pc, #48]	; (8011094 <adjustPresentationLayerMTU+0x58>)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	4413      	add	r3, r2
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	461a      	mov	r2, r3
 801106a:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <adjustPresentationLayerMTU+0x5c>)
 801106c:	5c9b      	ldrb	r3, [r3, r2]
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	e007      	b.n	8011082 <adjustPresentationLayerMTU+0x46>
 8011072:	4a08      	ldr	r2, [pc, #32]	; (8011094 <adjustPresentationLayerMTU+0x58>)
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	4413      	add	r3, r2
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	461a      	mov	r2, r3
 801107c:	4b06      	ldr	r3, [pc, #24]	; (8011098 <adjustPresentationLayerMTU+0x5c>)
 801107e:	5c9b      	ldrb	r3, [r3, r2]
 8011080:	60fb      	str	r3, [r7, #12]
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	3b01      	subs	r3, #1
 8011086:	4618      	mov	r0, r3
 8011088:	3714      	adds	r7, #20
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	080184b4 	.word	0x080184b4
 8011098:	080184a4 	.word	0x080184a4

0801109c <txMakeCANID>:
 801109c:	b580      	push	{r7, lr}
 801109e:	b08a      	sub	sp, #40	; 0x28
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	70fb      	strb	r3, [r7, #3]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d105      	bne.n	80110bc <txMakeCANID+0x20>
 80110b0:	4b60      	ldr	r3, [pc, #384]	; (8011234 <txMakeCANID+0x198>)
 80110b2:	4a61      	ldr	r2, [pc, #388]	; (8011238 <txMakeCANID+0x19c>)
 80110b4:	21d9      	movs	r1, #217	; 0xd9
 80110b6:	4861      	ldr	r0, [pc, #388]	; (801123c <txMakeCANID+0x1a0>)
 80110b8:	f001 fe70 	bl	8012d9c <__assert_func>
 80110bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d105      	bne.n	80110ce <txMakeCANID+0x32>
 80110c2:	4b5f      	ldr	r3, [pc, #380]	; (8011240 <txMakeCANID+0x1a4>)
 80110c4:	4a5c      	ldr	r2, [pc, #368]	; (8011238 <txMakeCANID+0x19c>)
 80110c6:	21da      	movs	r1, #218	; 0xda
 80110c8:	485c      	ldr	r0, [pc, #368]	; (801123c <txMakeCANID+0x1a0>)
 80110ca:	f001 fe67 	bl	8012d9c <__assert_func>
 80110ce:	f06f 0301 	mvn.w	r3, #1
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	785b      	ldrb	r3, [r3, #1]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d157      	bne.n	801118c <txMakeCANID+0xf0>
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	791b      	ldrb	r3, [r3, #4]
 80110e0:	2bff      	cmp	r3, #255	; 0xff
 80110e2:	d153      	bne.n	801118c <txMakeCANID+0xf0>
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	885b      	ldrh	r3, [r3, #2]
 80110e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80110ec:	d24e      	bcs.n	801118c <txMakeCANID+0xf0>
 80110ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	db11      	blt.n	801111a <txMakeCANID+0x7e>
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	885b      	ldrh	r3, [r3, #2]
 80110fa:	78fa      	ldrb	r2, [r7, #3]
 80110fc:	4611      	mov	r1, r2
 80110fe:	4618      	mov	r0, r3
 8011100:	f7ff ff1e 	bl	8010f40 <txMakeMessageSessionSpecifier>
 8011104:	4603      	mov	r3, r0
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	2b00      	cmp	r3, #0
 801110c:	da75      	bge.n	80111fa <txMakeCANID+0x15e>
 801110e:	4b4d      	ldr	r3, [pc, #308]	; (8011244 <txMakeCANID+0x1a8>)
 8011110:	4a49      	ldr	r2, [pc, #292]	; (8011238 <txMakeCANID+0x19c>)
 8011112:	21e2      	movs	r1, #226	; 0xe2
 8011114:	4849      	ldr	r0, [pc, #292]	; (801123c <txMakeCANID+0x1a0>)
 8011116:	f001 fe41 	bl	8012d9c <__assert_func>
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111e:	429a      	cmp	r2, r3
 8011120:	d830      	bhi.n	8011184 <txMakeCANID+0xe8>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d108      	bne.n	801113a <txMakeCANID+0x9e>
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d005      	beq.n	801113a <txMakeCANID+0x9e>
 801112e:	4b46      	ldr	r3, [pc, #280]	; (8011248 <txMakeCANID+0x1ac>)
 8011130:	4a41      	ldr	r2, [pc, #260]	; (8011238 <txMakeCANID+0x19c>)
 8011132:	21e6      	movs	r1, #230	; 0xe6
 8011134:	4841      	ldr	r0, [pc, #260]	; (801123c <txMakeCANID+0x1a0>)
 8011136:	f001 fe31 	bl	8012d9c <__assert_func>
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	68b9      	ldr	r1, [r7, #8]
 801113e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011142:	f7ff fec5 	bl	8010ed0 <crcAdd>
 8011146:	4603      	mov	r3, r0
 8011148:	b2db      	uxtb	r3, r3
 801114a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801114e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	885b      	ldrh	r3, [r3, #2]
 8011156:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801115a:	4611      	mov	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff feef 	bl	8010f40 <txMakeMessageSessionSpecifier>
 8011162:	4603      	mov	r3, r0
 8011164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011168:	61fb      	str	r3, [r7, #28]
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011170:	d305      	bcc.n	801117e <txMakeCANID+0xe2>
 8011172:	4b36      	ldr	r3, [pc, #216]	; (801124c <txMakeCANID+0x1b0>)
 8011174:	4a30      	ldr	r2, [pc, #192]	; (8011238 <txMakeCANID+0x19c>)
 8011176:	21e9      	movs	r1, #233	; 0xe9
 8011178:	4830      	ldr	r0, [pc, #192]	; (801123c <txMakeCANID+0x1a0>)
 801117a:	f001 fe0f 	bl	8012d9c <__assert_func>
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	627b      	str	r3, [r7, #36]	; 0x24
 8011182:	e03a      	b.n	80111fa <txMakeCANID+0x15e>
 8011184:	f06f 0301 	mvn.w	r3, #1
 8011188:	627b      	str	r3, [r7, #36]	; 0x24
 801118a:	e036      	b.n	80111fa <txMakeCANID+0x15e>
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	785b      	ldrb	r3, [r3, #1]
 8011190:	2b02      	cmp	r3, #2
 8011192:	d003      	beq.n	801119c <txMakeCANID+0x100>
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	785b      	ldrb	r3, [r3, #1]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d12a      	bne.n	80111f2 <txMakeCANID+0x156>
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	791b      	ldrb	r3, [r3, #4]
 80111a0:	b25b      	sxtb	r3, r3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	db25      	blt.n	80111f2 <txMakeCANID+0x156>
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	885b      	ldrh	r3, [r3, #2]
 80111aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111ae:	d220      	bcs.n	80111f2 <txMakeCANID+0x156>
 80111b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	db18      	blt.n	80111ea <txMakeCANID+0x14e>
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	8858      	ldrh	r0, [r3, #2]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	785b      	ldrb	r3, [r3, #1]
 80111c0:	2b02      	cmp	r3, #2
 80111c2:	bf0c      	ite	eq
 80111c4:	2301      	moveq	r3, #1
 80111c6:	2300      	movne	r3, #0
 80111c8:	b2d9      	uxtb	r1, r3
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	791b      	ldrb	r3, [r3, #4]
 80111ce:	78fa      	ldrb	r2, [r7, #3]
 80111d0:	f7ff fee8 	bl	8010fa4 <txMakeServiceSessionSpecifier>
 80111d4:	4603      	mov	r3, r0
 80111d6:	627b      	str	r3, [r7, #36]	; 0x24
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	2b00      	cmp	r3, #0
 80111dc:	da0f      	bge.n	80111fe <txMakeCANID+0x162>
 80111de:	4b19      	ldr	r3, [pc, #100]	; (8011244 <txMakeCANID+0x1a8>)
 80111e0:	4a15      	ldr	r2, [pc, #84]	; (8011238 <txMakeCANID+0x19c>)
 80111e2:	21fa      	movs	r1, #250	; 0xfa
 80111e4:	4815      	ldr	r0, [pc, #84]	; (801123c <txMakeCANID+0x1a0>)
 80111e6:	f001 fdd9 	bl	8012d9c <__assert_func>
 80111ea:	f06f 0301 	mvn.w	r3, #1
 80111ee:	627b      	str	r3, [r7, #36]	; 0x24
 80111f0:	e005      	b.n	80111fe <txMakeCANID+0x162>
 80111f2:	f06f 0301 	mvn.w	r3, #1
 80111f6:	627b      	str	r3, [r7, #36]	; 0x24
 80111f8:	e002      	b.n	8011200 <txMakeCANID+0x164>
 80111fa:	bf00      	nop
 80111fc:	e000      	b.n	8011200 <txMakeCANID+0x164>
 80111fe:	bf00      	nop
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	2b00      	cmp	r3, #0
 8011204:	db10      	blt.n	8011228 <txMakeCANID+0x18c>
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	61bb      	str	r3, [r7, #24]
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	2b07      	cmp	r3, #7
 8011210:	d807      	bhi.n	8011222 <txMakeCANID+0x186>
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	069a      	lsls	r2, r3, #26
 8011216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011218:	4313      	orrs	r3, r2
 801121a:	617b      	str	r3, [r7, #20]
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	627b      	str	r3, [r7, #36]	; 0x24
 8011220:	e002      	b.n	8011228 <txMakeCANID+0x18c>
 8011222:	f06f 0301 	mvn.w	r3, #1
 8011226:	627b      	str	r3, [r7, #36]	; 0x24
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	4618      	mov	r0, r3
 801122c:	3728      	adds	r7, #40	; 0x28
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	08017818 	.word	0x08017818
 8011238:	08018514 	.word	0x08018514
 801123c:	08017798 	.word	0x08017798
 8011240:	0801782c 	.word	0x0801782c
 8011244:	08017848 	.word	0x08017848
 8011248:	08017854 	.word	0x08017854
 801124c:	08017888 	.word	0x08017888

08011250 <txMakeTailByte>:
 8011250:	b590      	push	{r4, r7, lr}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	4604      	mov	r4, r0
 8011258:	4608      	mov	r0, r1
 801125a:	4611      	mov	r1, r2
 801125c:	461a      	mov	r2, r3
 801125e:	4623      	mov	r3, r4
 8011260:	71fb      	strb	r3, [r7, #7]
 8011262:	4603      	mov	r3, r0
 8011264:	71bb      	strb	r3, [r7, #6]
 8011266:	460b      	mov	r3, r1
 8011268:	717b      	strb	r3, [r7, #5]
 801126a:	4613      	mov	r3, r2
 801126c:	713b      	strb	r3, [r7, #4]
 801126e:	79fb      	ldrb	r3, [r7, #7]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d009      	beq.n	8011288 <txMakeTailByte+0x38>
 8011274:	797b      	ldrb	r3, [r7, #5]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d006      	beq.n	8011288 <txMakeTailByte+0x38>
 801127a:	4b13      	ldr	r3, [pc, #76]	; (80112c8 <txMakeTailByte+0x78>)
 801127c:	4a13      	ldr	r2, [pc, #76]	; (80112cc <txMakeTailByte+0x7c>)
 801127e:	f240 111b 	movw	r1, #283	; 0x11b
 8011282:	4813      	ldr	r0, [pc, #76]	; (80112d0 <txMakeTailByte+0x80>)
 8011284:	f001 fd8a 	bl	8012d9c <__assert_func>
 8011288:	79fb      	ldrb	r3, [r7, #7]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d001      	beq.n	8011292 <txMakeTailByte+0x42>
 801128e:	2280      	movs	r2, #128	; 0x80
 8011290:	e000      	b.n	8011294 <txMakeTailByte+0x44>
 8011292:	2200      	movs	r2, #0
 8011294:	79bb      	ldrb	r3, [r7, #6]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d001      	beq.n	801129e <txMakeTailByte+0x4e>
 801129a:	2340      	movs	r3, #64	; 0x40
 801129c:	e000      	b.n	80112a0 <txMakeTailByte+0x50>
 801129e:	2300      	movs	r3, #0
 80112a0:	4313      	orrs	r3, r2
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	797a      	ldrb	r2, [r7, #5]
 80112a6:	2a00      	cmp	r2, #0
 80112a8:	d001      	beq.n	80112ae <txMakeTailByte+0x5e>
 80112aa:	2220      	movs	r2, #32
 80112ac:	e000      	b.n	80112b0 <txMakeTailByte+0x60>
 80112ae:	2200      	movs	r2, #0
 80112b0:	4313      	orrs	r3, r2
 80112b2:	b2da      	uxtb	r2, r3
 80112b4:	793b      	ldrb	r3, [r7, #4]
 80112b6:	f003 031f 	and.w	r3, r3, #31
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	4313      	orrs	r3, r2
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	4618      	mov	r0, r3
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd90      	pop	{r4, r7, pc}
 80112c8:	080178a4 	.word	0x080178a4
 80112cc:	080185bc 	.word	0x080185bc
 80112d0:	08017798 	.word	0x08017798

080112d4 <txRoundFramePayloadSizeUp>:
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b40      	cmp	r3, #64	; 0x40
 80112e0:	d906      	bls.n	80112f0 <txRoundFramePayloadSizeUp+0x1c>
 80112e2:	4b0f      	ldr	r3, [pc, #60]	; (8011320 <txRoundFramePayloadSizeUp+0x4c>)
 80112e4:	4a0f      	ldr	r2, [pc, #60]	; (8011324 <txRoundFramePayloadSizeUp+0x50>)
 80112e6:	f44f 7192 	mov.w	r1, #292	; 0x124
 80112ea:	480f      	ldr	r0, [pc, #60]	; (8011328 <txRoundFramePayloadSizeUp+0x54>)
 80112ec:	f001 fd56 	bl	8012d9c <__assert_func>
 80112f0:	4a0e      	ldr	r2, [pc, #56]	; (801132c <txRoundFramePayloadSizeUp+0x58>)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4413      	add	r3, r2
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	60fb      	str	r3, [r7, #12]
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2b0f      	cmp	r3, #15
 80112fe:	d906      	bls.n	801130e <txRoundFramePayloadSizeUp+0x3a>
 8011300:	4b0b      	ldr	r3, [pc, #44]	; (8011330 <txRoundFramePayloadSizeUp+0x5c>)
 8011302:	4a08      	ldr	r2, [pc, #32]	; (8011324 <txRoundFramePayloadSizeUp+0x50>)
 8011304:	f240 1127 	movw	r1, #295	; 0x127
 8011308:	4807      	ldr	r0, [pc, #28]	; (8011328 <txRoundFramePayloadSizeUp+0x54>)
 801130a:	f001 fd47 	bl	8012d9c <__assert_func>
 801130e:	4a09      	ldr	r2, [pc, #36]	; (8011334 <txRoundFramePayloadSizeUp+0x60>)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	4413      	add	r3, r2
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	080178cc 	.word	0x080178cc
 8011324:	0801858c 	.word	0x0801858c
 8011328:	08017798 	.word	0x08017798
 801132c:	080184b4 	.word	0x080184b4
 8011330:	08017914 	.word	0x08017914
 8011334:	080184a4 	.word	0x080184a4

08011338 <txAllocateQueueItem>:
 8011338:	b580      	push	{r7, lr}
 801133a:	b086      	sub	sp, #24
 801133c:	af00      	add	r7, sp, #0
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	e9c7 2300 	strd	r2, r3, [r7]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d106      	bne.n	801135a <txAllocateQueueItem+0x22>
 801134c:	4b1f      	ldr	r3, [pc, #124]	; (80113cc <txAllocateQueueItem+0x94>)
 801134e:	4a20      	ldr	r2, [pc, #128]	; (80113d0 <txAllocateQueueItem+0x98>)
 8011350:	f240 1131 	movw	r1, #305	; 0x131
 8011354:	481f      	ldr	r0, [pc, #124]	; (80113d4 <txAllocateQueueItem+0x9c>)
 8011356:	f001 fd21 	bl	8012d9c <__assert_func>
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d106      	bne.n	801136e <txAllocateQueueItem+0x36>
 8011360:	4b1d      	ldr	r3, [pc, #116]	; (80113d8 <txAllocateQueueItem+0xa0>)
 8011362:	4a1b      	ldr	r2, [pc, #108]	; (80113d0 <txAllocateQueueItem+0x98>)
 8011364:	f44f 7199 	mov.w	r1, #306	; 0x132
 8011368:	481a      	ldr	r0, [pc, #104]	; (80113d4 <txAllocateQueueItem+0x9c>)
 801136a:	f001 fd17 	bl	8012d9c <__assert_func>
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	6a3a      	ldr	r2, [r7, #32]
 8011374:	3230      	adds	r2, #48	; 0x30
 8011376:	4611      	mov	r1, r2
 8011378:	68f8      	ldr	r0, [r7, #12]
 801137a:	4798      	blx	r3
 801137c:	6178      	str	r0, [r7, #20]
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d01e      	beq.n	80113c2 <txAllocateQueueItem+0x8a>
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	2200      	movs	r2, #0
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	2200      	movs	r2, #0
 801138e:	605a      	str	r2, [r3, #4]
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	2200      	movs	r2, #0
 8011394:	609a      	str	r2, [r3, #8]
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	2200      	movs	r2, #0
 801139a:	731a      	strb	r2, [r3, #12]
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2200      	movs	r2, #0
 80113a0:	611a      	str	r2, [r3, #16]
 80113a2:	6979      	ldr	r1, [r7, #20]
 80113a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	6a3a      	ldr	r2, [r7, #32]
 80113b0:	625a      	str	r2, [r3, #36]	; 0x24
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	629a      	str	r2, [r3, #40]	; 0x28
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	68ba      	ldr	r2, [r7, #8]
 80113c0:	621a      	str	r2, [r3, #32]
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	4618      	mov	r0, r3
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	0801795c 	.word	0x0801795c
 80113d0:	080185a8 	.word	0x080185a8
 80113d4:	08017798 	.word	0x08017798
 80113d8:	08017970 	.word	0x08017970

080113dc <txAVLPredicate>:
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	60fb      	str	r3, [r7, #12]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	60bb      	str	r3, [r7, #8]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d002      	beq.n	80113fa <txAVLPredicate+0x1e>
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d106      	bne.n	8011408 <txAVLPredicate+0x2c>
 80113fa:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <txAVLPredicate+0x48>)
 80113fc:	4a0a      	ldr	r2, [pc, #40]	; (8011428 <txAVLPredicate+0x4c>)
 80113fe:	f240 114d 	movw	r1, #333	; 0x14d
 8011402:	480a      	ldr	r0, [pc, #40]	; (801142c <txAVLPredicate+0x50>)
 8011404:	f001 fcca 	bl	8012d9c <__assert_func>
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	6a1a      	ldr	r2, [r3, #32]
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	6a1b      	ldr	r3, [r3, #32]
 8011410:	429a      	cmp	r2, r3
 8011412:	d301      	bcc.n	8011418 <txAVLPredicate+0x3c>
 8011414:	2301      	movs	r3, #1
 8011416:	e001      	b.n	801141c <txAVLPredicate+0x40>
 8011418:	f04f 33ff 	mov.w	r3, #4294967295
 801141c:	4618      	mov	r0, r3
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	08017984 	.word	0x08017984
 8011428:	0801857c 	.word	0x0801857c
 801142c:	08017798 	.word	0x08017798

08011430 <txPushSingleFrame>:
 8011430:	b590      	push	{r4, r7, lr}
 8011432:	b08d      	sub	sp, #52	; 0x34
 8011434:	af02      	add	r7, sp, #8
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	e9c7 2300 	strd	r2, r3, [r7]
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d106      	bne.n	8011452 <txPushSingleFrame+0x22>
 8011444:	4b5c      	ldr	r3, [pc, #368]	; (80115b8 <txPushSingleFrame+0x188>)
 8011446:	4a5d      	ldr	r2, [pc, #372]	; (80115bc <txPushSingleFrame+0x18c>)
 8011448:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 801144c:	485c      	ldr	r0, [pc, #368]	; (80115c0 <txPushSingleFrame+0x190>)
 801144e:	f001 fca5 	bl	8012d9c <__assert_func>
 8011452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011454:	2b00      	cmp	r3, #0
 8011456:	d109      	bne.n	801146c <txPushSingleFrame+0x3c>
 8011458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801145a:	2b00      	cmp	r3, #0
 801145c:	d006      	beq.n	801146c <txPushSingleFrame+0x3c>
 801145e:	4b59      	ldr	r3, [pc, #356]	; (80115c4 <txPushSingleFrame+0x194>)
 8011460:	4a56      	ldr	r2, [pc, #344]	; (80115bc <txPushSingleFrame+0x18c>)
 8011462:	f240 115b 	movw	r1, #347	; 0x15b
 8011466:	4856      	ldr	r0, [pc, #344]	; (80115c0 <txPushSingleFrame+0x190>)
 8011468:	f001 fc98 	bl	8012d9c <__assert_func>
 801146c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146e:	3301      	adds	r3, #1
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff ff2f 	bl	80112d4 <txRoundFramePayloadSizeUp>
 8011476:	6238      	str	r0, [r7, #32]
 8011478:	6a3a      	ldr	r2, [r7, #32]
 801147a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801147c:	429a      	cmp	r2, r3
 801147e:	d806      	bhi.n	801148e <txPushSingleFrame+0x5e>
 8011480:	4b51      	ldr	r3, [pc, #324]	; (80115c8 <txPushSingleFrame+0x198>)
 8011482:	4a4e      	ldr	r2, [pc, #312]	; (80115bc <txPushSingleFrame+0x18c>)
 8011484:	f240 115d 	movw	r1, #349	; 0x15d
 8011488:	484d      	ldr	r0, [pc, #308]	; (80115c0 <txPushSingleFrame+0x190>)
 801148a:	f001 fc87 	bl	8012d9c <__assert_func>
 801148e:	6a3a      	ldr	r2, [r7, #32]
 8011490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	3b01      	subs	r3, #1
 8011496:	61fb      	str	r3, [r7, #28]
 8011498:	69fa      	ldr	r2, [r7, #28]
 801149a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801149c:	4413      	add	r3, r2
 801149e:	3301      	adds	r3, #1
 80114a0:	6a3a      	ldr	r2, [r7, #32]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d006      	beq.n	80114b4 <txPushSingleFrame+0x84>
 80114a6:	4b49      	ldr	r3, [pc, #292]	; (80115cc <txPushSingleFrame+0x19c>)
 80114a8:	4a44      	ldr	r2, [pc, #272]	; (80115bc <txPushSingleFrame+0x18c>)
 80114aa:	f240 115f 	movw	r1, #351	; 0x15f
 80114ae:	4844      	ldr	r0, [pc, #272]	; (80115c0 <txPushSingleFrame+0x190>)
 80114b0:	f001 fc74 	bl	8012d9c <__assert_func>
 80114b4:	2300      	movs	r3, #0
 80114b6:	627b      	str	r3, [r7, #36]	; 0x24
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	689a      	ldr	r2, [r3, #8]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d209      	bcs.n	80114d8 <txPushSingleFrame+0xa8>
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114ce:	68b8      	ldr	r0, [r7, #8]
 80114d0:	f7ff ff32 	bl	8011338 <txAllocateQueueItem>
 80114d4:	4603      	mov	r3, r0
 80114d6:	e000      	b.n	80114da <txPushSingleFrame+0xaa>
 80114d8:	2300      	movs	r3, #0
 80114da:	61bb      	str	r3, [r7, #24]
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d054      	beq.n	801158c <txPushSingleFrame+0x15c>
 80114e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d010      	beq.n	801150a <txPushSingleFrame+0xda>
 80114e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d106      	bne.n	80114fc <txPushSingleFrame+0xcc>
 80114ee:	4b38      	ldr	r3, [pc, #224]	; (80115d0 <txPushSingleFrame+0x1a0>)
 80114f0:	4a32      	ldr	r2, [pc, #200]	; (80115bc <txPushSingleFrame+0x18c>)
 80114f2:	f240 1167 	movw	r1, #359	; 0x167
 80114f6:	4832      	ldr	r0, [pc, #200]	; (80115c0 <txPushSingleFrame+0x190>)
 80114f8:	f001 fc50 	bl	8012d9c <__assert_func>
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	3330      	adds	r3, #48	; 0x30
 8011500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011504:	4618      	mov	r0, r3
 8011506:	f002 fdf2 	bl	80140ee <memcpy>
 801150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801150c:	3330      	adds	r3, #48	; 0x30
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	4413      	add	r3, r2
 8011512:	69fa      	ldr	r2, [r7, #28]
 8011514:	2100      	movs	r1, #0
 8011516:	4618      	mov	r0, r3
 8011518:	f002 fd03 	bl	8013f22 <memset>
 801151c:	6a3b      	ldr	r3, [r7, #32]
 801151e:	1e5c      	subs	r4, r3, #1
 8011520:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011524:	2201      	movs	r2, #1
 8011526:	2101      	movs	r1, #1
 8011528:	2001      	movs	r0, #1
 801152a:	f7ff fe91 	bl	8011250 <txMakeTailByte>
 801152e:	4603      	mov	r3, r0
 8011530:	461a      	mov	r2, r3
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	4423      	add	r3, r4
 8011536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f103 000c 	add.w	r0, r3, #12
 8011540:	69b9      	ldr	r1, [r7, #24]
 8011542:	4b24      	ldr	r3, [pc, #144]	; (80115d4 <txPushSingleFrame+0x1a4>)
 8011544:	4a24      	ldr	r2, [pc, #144]	; (80115d8 <txPushSingleFrame+0x1a8>)
 8011546:	f7ff fae7 	bl	8010b18 <cavlSearch>
 801154a:	6178      	str	r0, [r7, #20]
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	429a      	cmp	r2, r3
 8011552:	d006      	beq.n	8011562 <txPushSingleFrame+0x132>
 8011554:	4b21      	ldr	r3, [pc, #132]	; (80115dc <txPushSingleFrame+0x1ac>)
 8011556:	4a19      	ldr	r2, [pc, #100]	; (80115bc <txPushSingleFrame+0x18c>)
 8011558:	f240 1173 	movw	r1, #371	; 0x173
 801155c:	4818      	ldr	r0, [pc, #96]	; (80115c0 <txPushSingleFrame+0x190>)
 801155e:	f001 fc1d 	bl	8012d9c <__assert_func>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	609a      	str	r2, [r3, #8]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	689a      	ldr	r2, [r3, #8]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	429a      	cmp	r2, r3
 8011576:	d906      	bls.n	8011586 <txPushSingleFrame+0x156>
 8011578:	4b19      	ldr	r3, [pc, #100]	; (80115e0 <txPushSingleFrame+0x1b0>)
 801157a:	4a10      	ldr	r2, [pc, #64]	; (80115bc <txPushSingleFrame+0x18c>)
 801157c:	f240 1175 	movw	r1, #373	; 0x175
 8011580:	480f      	ldr	r0, [pc, #60]	; (80115c0 <txPushSingleFrame+0x190>)
 8011582:	f001 fc0b 	bl	8012d9c <__assert_func>
 8011586:	2301      	movs	r3, #1
 8011588:	627b      	str	r3, [r7, #36]	; 0x24
 801158a:	e002      	b.n	8011592 <txPushSingleFrame+0x162>
 801158c:	f06f 0302 	mvn.w	r3, #2
 8011590:	627b      	str	r3, [r7, #36]	; 0x24
 8011592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011594:	2b00      	cmp	r3, #0
 8011596:	db09      	blt.n	80115ac <txPushSingleFrame+0x17c>
 8011598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159a:	2b01      	cmp	r3, #1
 801159c:	d006      	beq.n	80115ac <txPushSingleFrame+0x17c>
 801159e:	4b11      	ldr	r3, [pc, #68]	; (80115e4 <txPushSingleFrame+0x1b4>)
 80115a0:	4a06      	ldr	r2, [pc, #24]	; (80115bc <txPushSingleFrame+0x18c>)
 80115a2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80115a6:	4806      	ldr	r0, [pc, #24]	; (80115c0 <txPushSingleFrame+0x190>)
 80115a8:	f001 fbf8 	bl	8012d9c <__assert_func>
 80115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ae:	4618      	mov	r0, r3
 80115b0:	372c      	adds	r7, #44	; 0x2c
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd90      	pop	{r4, r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0801795c 	.word	0x0801795c
 80115bc:	08018568 	.word	0x08018568
 80115c0:	08017798 	.word	0x08017798
 80115c4:	080179b8 	.word	0x080179b8
 80115c8:	080179e8 	.word	0x080179e8
 80115cc:	08017a0c 	.word	0x08017a0c
 80115d0:	08017a48 	.word	0x08017a48
 80115d4:	08010e79 	.word	0x08010e79
 80115d8:	080113dd 	.word	0x080113dd
 80115dc:	08017a60 	.word	0x08017a60
 80115e0:	08017a78 	.word	0x08017a78
 80115e4:	08017a94 	.word	0x08017a94

080115e8 <txGenerateMultiFrameChain>:
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b093      	sub	sp, #76	; 0x4c
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <txGenerateMultiFrameChain+0x20>
 80115fa:	4b93      	ldr	r3, [pc, #588]	; (8011848 <txGenerateMultiFrameChain+0x260>)
 80115fc:	4a93      	ldr	r2, [pc, #588]	; (801184c <txGenerateMultiFrameChain+0x264>)
 80115fe:	f240 1189 	movw	r1, #393	; 0x189
 8011602:	4893      	ldr	r0, [pc, #588]	; (8011850 <txGenerateMultiFrameChain+0x268>)
 8011604:	f001 fbca 	bl	8012d9c <__assert_func>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d106      	bne.n	801161c <txGenerateMultiFrameChain+0x34>
 801160e:	4b91      	ldr	r3, [pc, #580]	; (8011854 <txGenerateMultiFrameChain+0x26c>)
 8011610:	4a8e      	ldr	r2, [pc, #568]	; (801184c <txGenerateMultiFrameChain+0x264>)
 8011612:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8011616:	488e      	ldr	r0, [pc, #568]	; (8011850 <txGenerateMultiFrameChain+0x268>)
 8011618:	f001 fbc0 	bl	8012d9c <__assert_func>
 801161c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	429a      	cmp	r2, r3
 8011622:	d806      	bhi.n	8011632 <txGenerateMultiFrameChain+0x4a>
 8011624:	4b8c      	ldr	r3, [pc, #560]	; (8011858 <txGenerateMultiFrameChain+0x270>)
 8011626:	4a89      	ldr	r2, [pc, #548]	; (801184c <txGenerateMultiFrameChain+0x264>)
 8011628:	f240 118b 	movw	r1, #395	; 0x18b
 801162c:	4888      	ldr	r0, [pc, #544]	; (8011850 <txGenerateMultiFrameChain+0x268>)
 801162e:	f001 fbb5 	bl	8012d9c <__assert_func>
 8011632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011634:	2b00      	cmp	r3, #0
 8011636:	d106      	bne.n	8011646 <txGenerateMultiFrameChain+0x5e>
 8011638:	4b88      	ldr	r3, [pc, #544]	; (801185c <txGenerateMultiFrameChain+0x274>)
 801163a:	4a84      	ldr	r2, [pc, #528]	; (801184c <txGenerateMultiFrameChain+0x264>)
 801163c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8011640:	4883      	ldr	r0, [pc, #524]	; (8011850 <txGenerateMultiFrameChain+0x268>)
 8011642:	f001 fbab 	bl	8012d9c <__assert_func>
 8011646:	2300      	movs	r3, #0
 8011648:	613b      	str	r3, [r7, #16]
 801164a:	2300      	movs	r3, #0
 801164c:	617b      	str	r3, [r7, #20]
 801164e:	2300      	movs	r3, #0
 8011650:	61bb      	str	r3, [r7, #24]
 8011652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011654:	3302      	adds	r3, #2
 8011656:	62bb      	str	r3, [r7, #40]	; 0x28
 8011658:	2300      	movs	r3, #0
 801165a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801165c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801165e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011660:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011664:	f7ff fc34 	bl	8010ed0 <crcAdd>
 8011668:	4603      	mov	r3, r0
 801166a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801166c:	2301      	movs	r3, #1
 801166e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8011672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011674:	637b      	str	r3, [r7, #52]	; 0x34
 8011676:	e0d4      	b.n	8011822 <txGenerateMultiFrameChain+0x23a>
 8011678:	69bb      	ldr	r3, [r7, #24]
 801167a:	3301      	adds	r3, #1
 801167c:	61bb      	str	r3, [r7, #24]
 801167e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d908      	bls.n	801169c <txGenerateMultiFrameChain+0xb4>
 801168a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801168c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	3301      	adds	r3, #1
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff fe1e 	bl	80112d4 <txRoundFramePayloadSizeUp>
 8011698:	4603      	mov	r3, r0
 801169a:	e001      	b.n	80116a0 <txGenerateMultiFrameChain+0xb8>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	3301      	adds	r3, #1
 80116a0:	627b      	str	r3, [r7, #36]	; 0x24
 80116a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80116aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116ac:	68b8      	ldr	r0, [r7, #8]
 80116ae:	f7ff fe43 	bl	8011338 <txAllocateQueueItem>
 80116b2:	6238      	str	r0, [r7, #32]
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d102      	bne.n	80116c0 <txGenerateMultiFrameChain+0xd8>
 80116ba:	6a3b      	ldr	r3, [r7, #32]
 80116bc:	613b      	str	r3, [r7, #16]
 80116be:	e002      	b.n	80116c6 <txGenerateMultiFrameChain+0xde>
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	6a3a      	ldr	r2, [r7, #32]
 80116c4:	611a      	str	r2, [r3, #16]
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	617b      	str	r3, [r7, #20]
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f000 80ae 	beq.w	801182e <txGenerateMultiFrameChain+0x246>
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	3b01      	subs	r3, #1
 80116d6:	61fb      	str	r3, [r7, #28]
 80116d8:	2300      	movs	r3, #0
 80116da:	633b      	str	r3, [r7, #48]	; 0x30
 80116dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d21c      	bcs.n	801171e <txGenerateMultiFrameChain+0x136>
 80116e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e8:	1ad3      	subs	r3, r2, r3
 80116ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d901      	bls.n	80116f8 <txGenerateMultiFrameChain+0x110>
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	3330      	adds	r3, #48	; 0x30
 80116fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011700:	4618      	mov	r0, r3
 8011702:	f002 fcf4 	bl	80140ee <memcpy>
 8011706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170a:	4413      	add	r3, r2
 801170c:	633b      	str	r3, [r7, #48]	; 0x30
 801170e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	4413      	add	r3, r2
 8011714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171a:	4413      	add	r3, r2
 801171c:	637b      	str	r3, [r7, #52]	; 0x34
 801171e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011722:	429a      	cmp	r2, r3
 8011724:	d343      	bcc.n	80117ae <txGenerateMultiFrameChain+0x1c6>
 8011726:	e00f      	b.n	8011748 <txGenerateMultiFrameChain+0x160>
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172c:	4413      	add	r3, r2
 801172e:	3330      	adds	r3, #48	; 0x30
 8011730:	2200      	movs	r2, #0
 8011732:	701a      	strb	r2, [r3, #0]
 8011734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011736:	3301      	adds	r3, #1
 8011738:	633b      	str	r3, [r7, #48]	; 0x30
 801173a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801173c:	2100      	movs	r1, #0
 801173e:	4618      	mov	r0, r3
 8011740:	f7ff fba6 	bl	8010e90 <crcAddByte>
 8011744:	4603      	mov	r3, r0
 8011746:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174a:	3302      	adds	r3, #2
 801174c:	69fa      	ldr	r2, [r7, #28]
 801174e:	429a      	cmp	r2, r3
 8011750:	d8ea      	bhi.n	8011728 <txGenerateMultiFrameChain+0x140>
 8011752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	429a      	cmp	r2, r3
 8011758:	d213      	bcs.n	8011782 <txGenerateMultiFrameChain+0x19a>
 801175a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801175c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801175e:	429a      	cmp	r2, r3
 8011760:	d10f      	bne.n	8011782 <txGenerateMultiFrameChain+0x19a>
 8011762:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011764:	0a1b      	lsrs	r3, r3, #8
 8011766:	b29b      	uxth	r3, r3
 8011768:	697a      	ldr	r2, [r7, #20]
 801176a:	b2d9      	uxtb	r1, r3
 801176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176e:	4413      	add	r3, r2
 8011770:	3330      	adds	r3, #48	; 0x30
 8011772:	460a      	mov	r2, r1
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	3301      	adds	r3, #1
 801177a:	633b      	str	r3, [r7, #48]	; 0x30
 801177c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801177e:	3301      	adds	r3, #1
 8011780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	429a      	cmp	r2, r3
 8011788:	d211      	bcs.n	80117ae <txGenerateMultiFrameChain+0x1c6>
 801178a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801178c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801178e:	429a      	cmp	r2, r3
 8011790:	d90d      	bls.n	80117ae <txGenerateMultiFrameChain+0x1c6>
 8011792:	697a      	ldr	r2, [r7, #20]
 8011794:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011796:	b2d9      	uxtb	r1, r3
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	4413      	add	r3, r2
 801179c:	3330      	adds	r3, #48	; 0x30
 801179e:	460a      	mov	r2, r1
 80117a0:	701a      	strb	r2, [r3, #0]
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	3301      	adds	r3, #1
 80117a6:	633b      	str	r3, [r7, #48]	; 0x30
 80117a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117aa:	3301      	adds	r3, #1
 80117ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d006      	beq.n	80117c8 <txGenerateMultiFrameChain+0x1e0>
 80117ba:	4b29      	ldr	r3, [pc, #164]	; (8011860 <txGenerateMultiFrameChain+0x278>)
 80117bc:	4a23      	ldr	r2, [pc, #140]	; (801184c <txGenerateMultiFrameChain+0x264>)
 80117be:	f240 11d9 	movw	r1, #473	; 0x1d9
 80117c2:	4823      	ldr	r0, [pc, #140]	; (8011850 <txGenerateMultiFrameChain+0x268>)
 80117c4:	f001 faea 	bl	8012d9c <__assert_func>
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	bf0c      	ite	eq
 80117d0:	2301      	moveq	r3, #1
 80117d2:	2300      	movne	r3, #0
 80117d4:	b2d8      	uxtb	r0, r3
 80117d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117da:	429a      	cmp	r2, r3
 80117dc:	bf2c      	ite	cs
 80117de:	2301      	movcs	r3, #1
 80117e0:	2300      	movcc	r3, #0
 80117e2:	b2d9      	uxtb	r1, r3
 80117e4:	697c      	ldr	r4, [r7, #20]
 80117e6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80117ea:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80117ee:	f7ff fd2f 	bl	8011250 <txMakeTailByte>
 80117f2:	4603      	mov	r3, r0
 80117f4:	461a      	mov	r2, r3
 80117f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f8:	4423      	add	r3, r4
 80117fa:	3330      	adds	r3, #48	; 0x30
 80117fc:	701a      	strb	r2, [r3, #0]
 80117fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011802:	2b00      	cmp	r3, #0
 8011804:	bf14      	ite	ne
 8011806:	2301      	movne	r3, #1
 8011808:	2300      	moveq	r3, #0
 801180a:	b2db      	uxtb	r3, r3
 801180c:	f083 0301 	eor.w	r3, r3, #1
 8011810:	b2db      	uxtb	r3, r3
 8011812:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8011816:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801181a:	f003 0301 	and.w	r3, r3, #1
 801181e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8011822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011826:	429a      	cmp	r2, r3
 8011828:	f4ff af26 	bcc.w	8011678 <txGenerateMultiFrameChain+0x90>
 801182c:	e000      	b.n	8011830 <txGenerateMultiFrameChain+0x248>
 801182e:	bf00      	nop
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	461c      	mov	r4, r3
 8011834:	f107 0310 	add.w	r3, r7, #16
 8011838:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801183c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	3744      	adds	r7, #68	; 0x44
 8011844:	46bd      	mov	sp, r7
 8011846:	bd90      	pop	{r4, r7, pc}
 8011848:	0801795c 	.word	0x0801795c
 801184c:	08018638 	.word	0x08018638
 8011850:	08017798 	.word	0x08017798
 8011854:	08017aac 	.word	0x08017aac
 8011858:	08017ac8 	.word	0x08017ac8
 801185c:	08017a48 	.word	0x08017a48
 8011860:	08017af0 	.word	0x08017af0

08011864 <txPushMultiFrame>:
 8011864:	b580      	push	{r7, lr}
 8011866:	b094      	sub	sp, #80	; 0x50
 8011868:	af06      	add	r7, sp, #24
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d002      	beq.n	801187c <txPushMultiFrame+0x18>
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d106      	bne.n	801188a <txPushMultiFrame+0x26>
 801187c:	4b65      	ldr	r3, [pc, #404]	; (8011a14 <txPushMultiFrame+0x1b0>)
 801187e:	4a66      	ldr	r2, [pc, #408]	; (8011a18 <txPushMultiFrame+0x1b4>)
 8011880:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8011884:	4865      	ldr	r0, [pc, #404]	; (8011a1c <txPushMultiFrame+0x1b8>)
 8011886:	f001 fa89 	bl	8012d9c <__assert_func>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d106      	bne.n	801189e <txPushMultiFrame+0x3a>
 8011890:	4b63      	ldr	r3, [pc, #396]	; (8011a20 <txPushMultiFrame+0x1bc>)
 8011892:	4a61      	ldr	r2, [pc, #388]	; (8011a18 <txPushMultiFrame+0x1b4>)
 8011894:	f240 11ed 	movw	r1, #493	; 0x1ed
 8011898:	4860      	ldr	r0, [pc, #384]	; (8011a1c <txPushMultiFrame+0x1b8>)
 801189a:	f001 fa7f 	bl	8012d9c <__assert_func>
 801189e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d806      	bhi.n	80118b4 <txPushMultiFrame+0x50>
 80118a6:	4b5f      	ldr	r3, [pc, #380]	; (8011a24 <txPushMultiFrame+0x1c0>)
 80118a8:	4a5b      	ldr	r2, [pc, #364]	; (8011a18 <txPushMultiFrame+0x1b4>)
 80118aa:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 80118ae:	485b      	ldr	r0, [pc, #364]	; (8011a1c <txPushMultiFrame+0x1b8>)
 80118b0:	f001 fa74 	bl	8012d9c <__assert_func>
 80118b4:	2300      	movs	r3, #0
 80118b6:	637b      	str	r3, [r7, #52]	; 0x34
 80118b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ba:	3302      	adds	r3, #2
 80118bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80118be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4413      	add	r3, r2
 80118c4:	1e5a      	subs	r2, r3, #1
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80118cc:	627b      	str	r3, [r7, #36]	; 0x24
 80118ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d806      	bhi.n	80118e2 <txPushMultiFrame+0x7e>
 80118d4:	4b54      	ldr	r3, [pc, #336]	; (8011a28 <txPushMultiFrame+0x1c4>)
 80118d6:	4a50      	ldr	r2, [pc, #320]	; (8011a18 <txPushMultiFrame+0x1b4>)
 80118d8:	f240 11f3 	movw	r1, #499	; 0x1f3
 80118dc:	484f      	ldr	r0, [pc, #316]	; (8011a1c <txPushMultiFrame+0x1b8>)
 80118de:	f001 fa5d 	bl	8012d9c <__assert_func>
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	689a      	ldr	r2, [r3, #8]
 80118e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e8:	441a      	add	r2, r3
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d87b      	bhi.n	80119ea <txPushMultiFrame+0x186>
 80118f2:	f107 0010 	add.w	r0, r7, #16
 80118f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118f8:	9305      	str	r3, [sp, #20]
 80118fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118fc:	9304      	str	r3, [sp, #16]
 80118fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011902:	9303      	str	r3, [sp, #12]
 8011904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011906:	9302      	str	r3, [sp, #8]
 8011908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801190c:	e9cd 2300 	strd	r2, r3, [sp]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	68b9      	ldr	r1, [r7, #8]
 8011914:	f7ff fe68 	bl	80115e8 <txGenerateMultiFrameChain>
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d051      	beq.n	80119c2 <txPushMultiFrame+0x15e>
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	633b      	str	r3, [r7, #48]	; 0x30
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f103 000c 	add.w	r0, r3, #12
 8011928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801192a:	4b40      	ldr	r3, [pc, #256]	; (8011a2c <txPushMultiFrame+0x1c8>)
 801192c:	4a40      	ldr	r2, [pc, #256]	; (8011a30 <txPushMultiFrame+0x1cc>)
 801192e:	f7ff f8f3 	bl	8010b18 <cavlSearch>
 8011932:	61f8      	str	r0, [r7, #28]
 8011934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011936:	69fa      	ldr	r2, [r7, #28]
 8011938:	429a      	cmp	r2, r3
 801193a:	d006      	beq.n	801194a <txPushMultiFrame+0xe6>
 801193c:	4b3d      	ldr	r3, [pc, #244]	; (8011a34 <txPushMultiFrame+0x1d0>)
 801193e:	4a36      	ldr	r2, [pc, #216]	; (8011a18 <txPushMultiFrame+0x1b4>)
 8011940:	f240 2105 	movw	r1, #517	; 0x205
 8011944:	4835      	ldr	r0, [pc, #212]	; (8011a1c <txPushMultiFrame+0x1b8>)
 8011946:	f001 fa29 	bl	8012d9c <__assert_func>
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d106      	bne.n	8011960 <txPushMultiFrame+0xfc>
 8011952:	4b39      	ldr	r3, [pc, #228]	; (8011a38 <txPushMultiFrame+0x1d4>)
 8011954:	4a30      	ldr	r2, [pc, #192]	; (8011a18 <txPushMultiFrame+0x1b4>)
 8011956:	f240 2106 	movw	r1, #518	; 0x206
 801195a:	4830      	ldr	r0, [pc, #192]	; (8011a1c <txPushMultiFrame+0x1b8>)
 801195c:	f001 fa1e 	bl	8012d9c <__assert_func>
 8011960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	633b      	str	r3, [r7, #48]	; 0x30
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1da      	bne.n	8011922 <txPushMultiFrame+0xbe>
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011970:	429a      	cmp	r2, r3
 8011972:	d006      	beq.n	8011982 <txPushMultiFrame+0x11e>
 8011974:	4b31      	ldr	r3, [pc, #196]	; (8011a3c <txPushMultiFrame+0x1d8>)
 8011976:	4a28      	ldr	r2, [pc, #160]	; (8011a18 <txPushMultiFrame+0x1b4>)
 8011978:	f240 2109 	movw	r1, #521	; 0x209
 801197c:	4827      	ldr	r0, [pc, #156]	; (8011a1c <txPushMultiFrame+0x1b8>)
 801197e:	f001 fa0d 	bl	8012d9c <__assert_func>
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	689a      	ldr	r2, [r3, #8]
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	441a      	add	r2, r3
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	609a      	str	r2, [r3, #8]
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	689a      	ldr	r2, [r3, #8]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	429a      	cmp	r2, r3
 8011998:	d906      	bls.n	80119a8 <txPushMultiFrame+0x144>
 801199a:	4b29      	ldr	r3, [pc, #164]	; (8011a40 <txPushMultiFrame+0x1dc>)
 801199c:	4a1e      	ldr	r2, [pc, #120]	; (8011a18 <txPushMultiFrame+0x1b4>)
 801199e:	f240 210b 	movw	r1, #523	; 0x20b
 80119a2:	481e      	ldr	r0, [pc, #120]	; (8011a1c <txPushMultiFrame+0x1b8>)
 80119a4:	f001 f9fa 	bl	8012d9c <__assert_func>
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	da06      	bge.n	80119bc <txPushMultiFrame+0x158>
 80119ae:	4b25      	ldr	r3, [pc, #148]	; (8011a44 <txPushMultiFrame+0x1e0>)
 80119b0:	4a19      	ldr	r2, [pc, #100]	; (8011a18 <txPushMultiFrame+0x1b4>)
 80119b2:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80119b6:	4819      	ldr	r0, [pc, #100]	; (8011a1c <txPushMultiFrame+0x1b8>)
 80119b8:	f001 f9f0 	bl	8012d9c <__assert_func>
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	637b      	str	r3, [r7, #52]	; 0x34
 80119c0:	e016      	b.n	80119f0 <txPushMultiFrame+0x18c>
 80119c2:	f06f 0302 	mvn.w	r3, #2
 80119c6:	637b      	str	r3, [r7, #52]	; 0x34
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119cc:	e009      	b.n	80119e2 <txPushMultiFrame+0x17e>
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	691b      	ldr	r3, [r3, #16]
 80119d2:	623b      	str	r3, [r7, #32]
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119da:	68b8      	ldr	r0, [r7, #8]
 80119dc:	4798      	blx	r3
 80119de:	6a3b      	ldr	r3, [r7, #32]
 80119e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1f2      	bne.n	80119ce <txPushMultiFrame+0x16a>
 80119e8:	e002      	b.n	80119f0 <txPushMultiFrame+0x18c>
 80119ea:	f06f 0302 	mvn.w	r3, #2
 80119ee:	637b      	str	r3, [r7, #52]	; 0x34
 80119f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	db09      	blt.n	8011a0a <txPushMultiFrame+0x1a6>
 80119f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	dc06      	bgt.n	8011a0a <txPushMultiFrame+0x1a6>
 80119fc:	4b12      	ldr	r3, [pc, #72]	; (8011a48 <txPushMultiFrame+0x1e4>)
 80119fe:	4a06      	ldr	r2, [pc, #24]	; (8011a18 <txPushMultiFrame+0x1b4>)
 8011a00:	f240 211f 	movw	r1, #543	; 0x21f
 8011a04:	4805      	ldr	r0, [pc, #20]	; (8011a1c <txPushMultiFrame+0x1b8>)
 8011a06:	f001 f9c9 	bl	8012d9c <__assert_func>
 8011a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3738      	adds	r7, #56	; 0x38
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	08017b2c 	.word	0x08017b2c
 8011a18:	08018624 	.word	0x08018624
 8011a1c:	08017798 	.word	0x08017798
 8011a20:	08017aac 	.word	0x08017aac
 8011a24:	08017ac8 	.word	0x08017ac8
 8011a28:	08017b5c 	.word	0x08017b5c
 8011a2c:	08010e79 	.word	0x08010e79
 8011a30:	080113dd 	.word	0x080113dd
 8011a34:	08017b6c 	.word	0x08017b6c
 8011a38:	08017b80 	.word	0x08017b80
 8011a3c:	08017b9c 	.word	0x08017b9c
 8011a40:	08017a78 	.word	0x08017a78
 8011a44:	08017bb4 	.word	0x08017bb4
 8011a48:	08017bd8 	.word	0x08017bd8

08011a4c <rxTryParseFrame>:
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b088      	sub	sp, #32
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
 8011a58:	603b      	str	r3, [r7, #0]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d106      	bne.n	8011a6e <rxTryParseFrame+0x22>
 8011a60:	4b96      	ldr	r3, [pc, #600]	; (8011cbc <rxTryParseFrame+0x270>)
 8011a62:	4a97      	ldr	r2, [pc, #604]	; (8011cc0 <rxTryParseFrame+0x274>)
 8011a64:	f240 214e 	movw	r1, #590	; 0x24e
 8011a68:	4896      	ldr	r0, [pc, #600]	; (8011cc4 <rxTryParseFrame+0x278>)
 8011a6a:	f001 f997 	bl	8012d9c <__assert_func>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a76:	d306      	bcc.n	8011a86 <rxTryParseFrame+0x3a>
 8011a78:	4b93      	ldr	r3, [pc, #588]	; (8011cc8 <rxTryParseFrame+0x27c>)
 8011a7a:	4a91      	ldr	r2, [pc, #580]	; (8011cc0 <rxTryParseFrame+0x274>)
 8011a7c:	f240 214f 	movw	r1, #591	; 0x24f
 8011a80:	4890      	ldr	r0, [pc, #576]	; (8011cc4 <rxTryParseFrame+0x278>)
 8011a82:	f001 f98b 	bl	8012d9c <__assert_func>
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d106      	bne.n	8011a9a <rxTryParseFrame+0x4e>
 8011a8c:	4b8f      	ldr	r3, [pc, #572]	; (8011ccc <rxTryParseFrame+0x280>)
 8011a8e:	4a8c      	ldr	r2, [pc, #560]	; (8011cc0 <rxTryParseFrame+0x274>)
 8011a90:	f44f 7114 	mov.w	r1, #592	; 0x250
 8011a94:	488b      	ldr	r0, [pc, #556]	; (8011cc4 <rxTryParseFrame+0x278>)
 8011a96:	f001 f981 	bl	8012d9c <__assert_func>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	77fb      	strb	r3, [r7, #31]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f000 8105 	beq.w	8011cb2 <rxTryParseFrame+0x266>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d106      	bne.n	8011abe <rxTryParseFrame+0x72>
 8011ab0:	4b87      	ldr	r3, [pc, #540]	; (8011cd0 <rxTryParseFrame+0x284>)
 8011ab2:	4a83      	ldr	r2, [pc, #524]	; (8011cc0 <rxTryParseFrame+0x274>)
 8011ab4:	f44f 7115 	mov.w	r1, #596	; 0x254
 8011ab8:	4882      	ldr	r0, [pc, #520]	; (8011cc4 <rxTryParseFrame+0x278>)
 8011aba:	f001 f96f 	bl	8012d9c <__assert_func>
 8011abe:	6839      	ldr	r1, [r7, #0]
 8011ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011ac4:	e9c1 2300 	strd	r2, r3, [r1]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	61bb      	str	r3, [r7, #24]
 8011ace:	69bb      	ldr	r3, [r7, #24]
 8011ad0:	0e9b      	lsrs	r3, r3, #26
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	f003 0307 	and.w	r3, r3, #7
 8011ad8:	b2da      	uxtb	r2, r3
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	721a      	strb	r2, [r3, #8]
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ae6:	b2da      	uxtb	r2, r3
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	731a      	strb	r2, [r3, #12]
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d128      	bne.n	8011b48 <rxTryParseFrame+0xfc>
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	2200      	movs	r2, #0
 8011afa:	725a      	strb	r2, [r3, #9]
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	0a1b      	lsrs	r3, r3, #8
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	815a      	strh	r2, [r3, #10]
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d002      	beq.n	8011b1c <rxTryParseFrame+0xd0>
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	22ff      	movs	r2, #255	; 0xff
 8011b1a:	731a      	strb	r2, [r3, #12]
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	22ff      	movs	r2, #255	; 0xff
 8011b20:	735a      	strb	r2, [r3, #13]
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d106      	bne.n	8011b3a <rxTryParseFrame+0xee>
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d101      	bne.n	8011b3a <rxTryParseFrame+0xee>
 8011b36:	2301      	movs	r3, #1
 8011b38:	e000      	b.n	8011b3c <rxTryParseFrame+0xf0>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	77fb      	strb	r3, [r7, #31]
 8011b3e:	7ffb      	ldrb	r3, [r7, #31]
 8011b40:	f003 0301 	and.w	r3, r3, #1
 8011b44:	77fb      	strb	r3, [r7, #31]
 8011b46:	e02c      	b.n	8011ba2 <rxTryParseFrame+0x156>
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <rxTryParseFrame+0x10a>
 8011b52:	2202      	movs	r2, #2
 8011b54:	e000      	b.n	8011b58 <rxTryParseFrame+0x10c>
 8011b56:	2201      	movs	r2, #1
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	725a      	strb	r2, [r3, #9]
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	0b9b      	lsrs	r3, r3, #14
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	815a      	strh	r2, [r3, #10]
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	09db      	lsrs	r3, r3, #7
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b76:	b2da      	uxtb	r2, r3
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	735a      	strb	r2, [r3, #13]
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d107      	bne.n	8011b96 <rxTryParseFrame+0x14a>
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	7b1a      	ldrb	r2, [r3, #12]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	7b5b      	ldrb	r3, [r3, #13]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d001      	beq.n	8011b96 <rxTryParseFrame+0x14a>
 8011b92:	2301      	movs	r3, #1
 8011b94:	e000      	b.n	8011b98 <rxTryParseFrame+0x14c>
 8011b96:	2300      	movs	r3, #0
 8011b98:	77fb      	strb	r3, [r7, #31]
 8011b9a:	7ffb      	ldrb	r3, [r7, #31]
 8011b9c:	f003 0301 	and.w	r3, r3, #1
 8011ba0:	77fb      	strb	r3, [r7, #31]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	1e5a      	subs	r2, r3, #1
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	615a      	str	r2, [r3, #20]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	689a      	ldr	r2, [r3, #8]
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	619a      	str	r2, [r3, #24]
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	699a      	ldr	r2, [r3, #24]
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	695b      	ldr	r3, [r3, #20]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	75fb      	strb	r3, [r7, #23]
 8011bc2:	7dfb      	ldrb	r3, [r7, #23]
 8011bc4:	f003 031f 	and.w	r3, r3, #31
 8011bc8:	b2da      	uxtb	r2, r3
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	739a      	strb	r2, [r3, #14]
 8011bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	09db      	lsrs	r3, r3, #7
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	73da      	strb	r2, [r3, #15]
 8011bdc:	7dfb      	ldrb	r3, [r7, #23]
 8011bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	bf14      	ite	ne
 8011be6:	2301      	movne	r3, #1
 8011be8:	2300      	moveq	r3, #0
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	741a      	strb	r2, [r3, #16]
 8011bf0:	7dfb      	ldrb	r3, [r7, #23]
 8011bf2:	f003 0320 	and.w	r3, r3, #32
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	bf14      	ite	ne
 8011bfa:	2301      	movne	r3, #1
 8011bfc:	2300      	moveq	r3, #0
 8011bfe:	b2da      	uxtb	r2, r3
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	745a      	strb	r2, [r3, #17]
 8011c04:	7ffb      	ldrb	r3, [r7, #31]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00c      	beq.n	8011c24 <rxTryParseFrame+0x1d8>
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	7bdb      	ldrb	r3, [r3, #15]
 8011c0e:	f083 0301 	eor.w	r3, r3, #1
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d103      	bne.n	8011c20 <rxTryParseFrame+0x1d4>
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	7c5b      	ldrb	r3, [r3, #17]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d001      	beq.n	8011c24 <rxTryParseFrame+0x1d8>
 8011c20:	2301      	movs	r3, #1
 8011c22:	e000      	b.n	8011c26 <rxTryParseFrame+0x1da>
 8011c24:	2300      	movs	r3, #0
 8011c26:	77fb      	strb	r3, [r7, #31]
 8011c28:	7ffb      	ldrb	r3, [r7, #31]
 8011c2a:	f003 0301 	and.w	r3, r3, #1
 8011c2e:	77fb      	strb	r3, [r7, #31]
 8011c30:	7ffb      	ldrb	r3, [r7, #31]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00d      	beq.n	8011c52 <rxTryParseFrame+0x206>
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	7bdb      	ldrb	r3, [r3, #15]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d003      	beq.n	8011c46 <rxTryParseFrame+0x1fa>
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	7c1b      	ldrb	r3, [r3, #16]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d103      	bne.n	8011c4e <rxTryParseFrame+0x202>
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	7b1b      	ldrb	r3, [r3, #12]
 8011c4a:	2bff      	cmp	r3, #255	; 0xff
 8011c4c:	d001      	beq.n	8011c52 <rxTryParseFrame+0x206>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e000      	b.n	8011c54 <rxTryParseFrame+0x208>
 8011c52:	2300      	movs	r3, #0
 8011c54:	77fb      	strb	r3, [r7, #31]
 8011c56:	7ffb      	ldrb	r3, [r7, #31]
 8011c58:	f003 0301 	and.w	r3, r3, #1
 8011c5c:	77fb      	strb	r3, [r7, #31]
 8011c5e:	7ffb      	ldrb	r3, [r7, #31]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d009      	beq.n	8011c78 <rxTryParseFrame+0x22c>
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	695b      	ldr	r3, [r3, #20]
 8011c68:	2b06      	cmp	r3, #6
 8011c6a:	d803      	bhi.n	8011c74 <rxTryParseFrame+0x228>
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	7c1b      	ldrb	r3, [r3, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <rxTryParseFrame+0x22c>
 8011c74:	2301      	movs	r3, #1
 8011c76:	e000      	b.n	8011c7a <rxTryParseFrame+0x22e>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	77fb      	strb	r3, [r7, #31]
 8011c7c:	7ffb      	ldrb	r3, [r7, #31]
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	77fb      	strb	r3, [r7, #31]
 8011c84:	7ffb      	ldrb	r3, [r7, #31]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d00d      	beq.n	8011ca6 <rxTryParseFrame+0x25a>
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d107      	bne.n	8011ca2 <rxTryParseFrame+0x256>
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	7bdb      	ldrb	r3, [r3, #15]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d005      	beq.n	8011ca6 <rxTryParseFrame+0x25a>
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	7c1b      	ldrb	r3, [r3, #16]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d001      	beq.n	8011ca6 <rxTryParseFrame+0x25a>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	e000      	b.n	8011ca8 <rxTryParseFrame+0x25c>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	77fb      	strb	r3, [r7, #31]
 8011caa:	7ffb      	ldrb	r3, [r7, #31]
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	77fb      	strb	r3, [r7, #31]
 8011cb2:	7ffb      	ldrb	r3, [r7, #31]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3720      	adds	r7, #32
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	08017bf0 	.word	0x08017bf0
 8011cc0:	08018674 	.word	0x08018674
 8011cc4:	08017798 	.word	0x08017798
 8011cc8:	08017c08 	.word	0x08017c08
 8011ccc:	08017c38 	.word	0x08017c38
 8011cd0:	08017c4c 	.word	0x08017c4c

08011cd4 <rxInitTransferMetadataFromFrame>:
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d106      	bne.n	8011cf2 <rxInitTransferMetadataFromFrame+0x1e>
 8011ce4:	4b19      	ldr	r3, [pc, #100]	; (8011d4c <rxInitTransferMetadataFromFrame+0x78>)
 8011ce6:	4a1a      	ldr	r2, [pc, #104]	; (8011d50 <rxInitTransferMetadataFromFrame+0x7c>)
 8011ce8:	f240 218f 	movw	r1, #655	; 0x28f
 8011cec:	4819      	ldr	r0, [pc, #100]	; (8011d54 <rxInitTransferMetadataFromFrame+0x80>)
 8011cee:	f001 f855 	bl	8012d9c <__assert_func>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	699b      	ldr	r3, [r3, #24]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d106      	bne.n	8011d08 <rxInitTransferMetadataFromFrame+0x34>
 8011cfa:	4b17      	ldr	r3, [pc, #92]	; (8011d58 <rxInitTransferMetadataFromFrame+0x84>)
 8011cfc:	4a14      	ldr	r2, [pc, #80]	; (8011d50 <rxInitTransferMetadataFromFrame+0x7c>)
 8011cfe:	f44f 7124 	mov.w	r1, #656	; 0x290
 8011d02:	4814      	ldr	r0, [pc, #80]	; (8011d54 <rxInitTransferMetadataFromFrame+0x80>)
 8011d04:	f001 f84a 	bl	8012d9c <__assert_func>
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d106      	bne.n	8011d1c <rxInitTransferMetadataFromFrame+0x48>
 8011d0e:	4b13      	ldr	r3, [pc, #76]	; (8011d5c <rxInitTransferMetadataFromFrame+0x88>)
 8011d10:	4a0f      	ldr	r2, [pc, #60]	; (8011d50 <rxInitTransferMetadataFromFrame+0x7c>)
 8011d12:	f240 2191 	movw	r1, #657	; 0x291
 8011d16:	480f      	ldr	r0, [pc, #60]	; (8011d54 <rxInitTransferMetadataFromFrame+0x80>)
 8011d18:	f001 f840 	bl	8012d9c <__assert_func>
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	7a1a      	ldrb	r2, [r3, #8]
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	701a      	strb	r2, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	7a5a      	ldrb	r2, [r3, #9]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	705a      	strb	r2, [r3, #1]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	895a      	ldrh	r2, [r3, #10]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	805a      	strh	r2, [r3, #2]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	7b1a      	ldrb	r2, [r3, #12]
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	711a      	strb	r2, [r3, #4]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	7b9a      	ldrb	r2, [r3, #14]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	715a      	strb	r2, [r3, #5]
 8011d44:	bf00      	nop
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	08017bf0 	.word	0x08017bf0
 8011d50:	08018708 	.word	0x08018708
 8011d54:	08017798 	.word	0x08017798
 8011d58:	08017c4c 	.word	0x08017c4c
 8011d5c:	08017c6c 	.word	0x08017c6c

08011d60 <rxComputeTransferIDDifference>:
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	4603      	mov	r3, r0
 8011d68:	460a      	mov	r2, r1
 8011d6a:	71fb      	strb	r3, [r7, #7]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	71bb      	strb	r3, [r7, #6]
 8011d70:	79fb      	ldrb	r3, [r7, #7]
 8011d72:	2b1f      	cmp	r3, #31
 8011d74:	d906      	bls.n	8011d84 <rxComputeTransferIDDifference+0x24>
 8011d76:	4b15      	ldr	r3, [pc, #84]	; (8011dcc <rxComputeTransferIDDifference+0x6c>)
 8011d78:	4a15      	ldr	r2, [pc, #84]	; (8011dd0 <rxComputeTransferIDDifference+0x70>)
 8011d7a:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8011d7e:	4815      	ldr	r0, [pc, #84]	; (8011dd4 <rxComputeTransferIDDifference+0x74>)
 8011d80:	f001 f80c 	bl	8012d9c <__assert_func>
 8011d84:	79bb      	ldrb	r3, [r7, #6]
 8011d86:	2b1f      	cmp	r3, #31
 8011d88:	d906      	bls.n	8011d98 <rxComputeTransferIDDifference+0x38>
 8011d8a:	4b13      	ldr	r3, [pc, #76]	; (8011dd8 <rxComputeTransferIDDifference+0x78>)
 8011d8c:	4a10      	ldr	r2, [pc, #64]	; (8011dd0 <rxComputeTransferIDDifference+0x70>)
 8011d8e:	f240 219d 	movw	r1, #669	; 0x29d
 8011d92:	4810      	ldr	r0, [pc, #64]	; (8011dd4 <rxComputeTransferIDDifference+0x74>)
 8011d94:	f001 f802 	bl	8012d9c <__assert_func>
 8011d98:	79fb      	ldrb	r3, [r7, #7]
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	79bb      	ldrb	r3, [r7, #6]
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	81fb      	strh	r3, [r7, #14]
 8011da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	da07      	bge.n	8011dbe <rxComputeTransferIDDifference+0x5e>
 8011dae:	2320      	movs	r3, #32
 8011db0:	737b      	strb	r3, [r7, #13]
 8011db2:	7b7b      	ldrb	r3, [r7, #13]
 8011db4:	b29a      	uxth	r2, r3
 8011db6:	89fb      	ldrh	r3, [r7, #14]
 8011db8:	4413      	add	r3, r2
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	81fb      	strh	r3, [r7, #14]
 8011dbe:	89fb      	ldrh	r3, [r7, #14]
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	08017c88 	.word	0x08017c88
 8011dd0:	080186a4 	.word	0x080186a4
 8011dd4:	08017798 	.word	0x08017798
 8011dd8:	08017ca0 	.word	0x08017ca0

08011ddc <rxSessionWritePayload>:
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b086      	sub	sp, #24
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
 8011de8:	603b      	str	r3, [r7, #0]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d106      	bne.n	8011dfe <rxSessionWritePayload+0x22>
 8011df0:	4b67      	ldr	r3, [pc, #412]	; (8011f90 <rxSessionWritePayload+0x1b4>)
 8011df2:	4a68      	ldr	r2, [pc, #416]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011df4:	f240 21ad 	movw	r1, #685	; 0x2ad
 8011df8:	4867      	ldr	r0, [pc, #412]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011dfa:	f000 ffcf 	bl	8012d9c <__assert_func>
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d106      	bne.n	8011e12 <rxSessionWritePayload+0x36>
 8011e04:	4b65      	ldr	r3, [pc, #404]	; (8011f9c <rxSessionWritePayload+0x1c0>)
 8011e06:	4a63      	ldr	r2, [pc, #396]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011e08:	f240 21ae 	movw	r1, #686	; 0x2ae
 8011e0c:	4862      	ldr	r0, [pc, #392]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011e0e:	f000 ffc5 	bl	8012d9c <__assert_func>
 8011e12:	6a3b      	ldr	r3, [r7, #32]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d109      	bne.n	8011e2c <rxSessionWritePayload+0x50>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d006      	beq.n	8011e2c <rxSessionWritePayload+0x50>
 8011e1e:	4b60      	ldr	r3, [pc, #384]	; (8011fa0 <rxSessionWritePayload+0x1c4>)
 8011e20:	4a5c      	ldr	r2, [pc, #368]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011e22:	f240 21af 	movw	r1, #687	; 0x2af
 8011e26:	485c      	ldr	r0, [pc, #368]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011e28:	f000 ffb8 	bl	8012d9c <__assert_func>
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d206      	bcs.n	8011e44 <rxSessionWritePayload+0x68>
 8011e36:	4b5b      	ldr	r3, [pc, #364]	; (8011fa4 <rxSessionWritePayload+0x1c8>)
 8011e38:	4a56      	ldr	r2, [pc, #344]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011e3a:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8011e3e:	4856      	ldr	r0, [pc, #344]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011e40:	f000 ffac 	bl	8012d9c <__assert_func>
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	68da      	ldr	r2, [r3, #12]
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d906      	bls.n	8011e5e <rxSessionWritePayload+0x82>
 8011e50:	4b55      	ldr	r3, [pc, #340]	; (8011fa8 <rxSessionWritePayload+0x1cc>)
 8011e52:	4a50      	ldr	r2, [pc, #320]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011e54:	f240 21b1 	movw	r1, #689	; 0x2b1
 8011e58:	484f      	ldr	r0, [pc, #316]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011e5a:	f000 ff9f 	bl	8012d9c <__assert_func>
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	689a      	ldr	r2, [r3, #8]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	441a      	add	r2, r3
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	609a      	str	r2, [r3, #8]
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d115      	bne.n	8011e9e <rxSessionWritePayload+0xc2>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d012      	beq.n	8011e9e <rxSessionWritePayload+0xc2>
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d006      	beq.n	8011e8e <rxSessionWritePayload+0xb2>
 8011e80:	4b4a      	ldr	r3, [pc, #296]	; (8011fac <rxSessionWritePayload+0x1d0>)
 8011e82:	4a44      	ldr	r2, [pc, #272]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011e84:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8011e88:	4843      	ldr	r0, [pc, #268]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011e8a:	f000 ff87 	bl	8012d9c <__assert_func>
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	689b      	ldr	r3, [r3, #8]
 8011e92:	6879      	ldr	r1, [r7, #4]
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	4798      	blx	r3
 8011e98:	4602      	mov	r2, r0
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	611a      	str	r2, [r3, #16]
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	75fb      	strb	r3, [r7, #23]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	691b      	ldr	r3, [r3, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d04e      	beq.n	8011f48 <rxSessionWritePayload+0x16c>
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	613b      	str	r3, [r7, #16]
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	68da      	ldr	r2, [r3, #12]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d229      	bcs.n	8011f10 <rxSessionWritePayload+0x134>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d206      	bcs.n	8011ed4 <rxSessionWritePayload+0xf8>
 8011ec6:	4b37      	ldr	r3, [pc, #220]	; (8011fa4 <rxSessionWritePayload+0x1c8>)
 8011ec8:	4a32      	ldr	r2, [pc, #200]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011eca:	f240 21c3 	movw	r1, #707	; 0x2c3
 8011ece:	4832      	ldr	r0, [pc, #200]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011ed0:	f000 ff64 	bl	8012d9c <__assert_func>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	613b      	str	r3, [r7, #16]
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	68da      	ldr	r2, [r3, #12]
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d006      	beq.n	8011efa <rxSessionWritePayload+0x11e>
 8011eec:	4b30      	ldr	r3, [pc, #192]	; (8011fb0 <rxSessionWritePayload+0x1d4>)
 8011eee:	4a29      	ldr	r2, [pc, #164]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011ef0:	f240 21c5 	movw	r1, #709	; 0x2c5
 8011ef4:	4828      	ldr	r0, [pc, #160]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011ef6:	f000 ff51 	bl	8012d9c <__assert_func>
 8011efa:	693a      	ldr	r2, [r7, #16]
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d306      	bcc.n	8011f10 <rxSessionWritePayload+0x134>
 8011f02:	4b2c      	ldr	r3, [pc, #176]	; (8011fb4 <rxSessionWritePayload+0x1d8>)
 8011f04:	4a23      	ldr	r2, [pc, #140]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011f06:	f240 21c6 	movw	r1, #710	; 0x2c6
 8011f0a:	4823      	ldr	r0, [pc, #140]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011f0c:	f000 ff46 	bl	8012d9c <__assert_func>
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	691a      	ldr	r2, [r3, #16]
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	4413      	add	r3, r2
 8011f1a:	693a      	ldr	r2, [r7, #16]
 8011f1c:	6a39      	ldr	r1, [r7, #32]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f002 f8e5 	bl	80140ee <memcpy>
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	68da      	ldr	r2, [r3, #12]
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	441a      	add	r2, r3
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	60da      	str	r2, [r3, #12]
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d219      	bcs.n	8011f6e <rxSessionWritePayload+0x192>
 8011f3a:	4b1a      	ldr	r3, [pc, #104]	; (8011fa4 <rxSessionWritePayload+0x1c8>)
 8011f3c:	4a15      	ldr	r2, [pc, #84]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011f3e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8011f42:	4815      	ldr	r0, [pc, #84]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011f44:	f000 ff2a 	bl	8012d9c <__assert_func>
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	68db      	ldr	r3, [r3, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d006      	beq.n	8011f5e <rxSessionWritePayload+0x182>
 8011f50:	4b16      	ldr	r3, [pc, #88]	; (8011fac <rxSessionWritePayload+0x1d0>)
 8011f52:	4a10      	ldr	r2, [pc, #64]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011f54:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8011f58:	480f      	ldr	r0, [pc, #60]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011f5a:	f000 ff1f 	bl	8012d9c <__assert_func>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d002      	beq.n	8011f6a <rxSessionWritePayload+0x18e>
 8011f64:	f06f 0302 	mvn.w	r3, #2
 8011f68:	e000      	b.n	8011f6c <rxSessionWritePayload+0x190>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	75fb      	strb	r3, [r7, #23]
 8011f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	dd06      	ble.n	8011f84 <rxSessionWritePayload+0x1a8>
 8011f76:	4b10      	ldr	r3, [pc, #64]	; (8011fb8 <rxSessionWritePayload+0x1dc>)
 8011f78:	4a06      	ldr	r2, [pc, #24]	; (8011f94 <rxSessionWritePayload+0x1b8>)
 8011f7a:	f240 21d7 	movw	r1, #727	; 0x2d7
 8011f7e:	4806      	ldr	r0, [pc, #24]	; (8011f98 <rxSessionWritePayload+0x1bc>)
 8011f80:	f000 ff0c 	bl	8012d9c <__assert_func>
 8011f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3718      	adds	r7, #24
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	0801795c 	.word	0x0801795c
 8011f94:	080186f0 	.word	0x080186f0
 8011f98:	08017798 	.word	0x08017798
 8011f9c:	08017cb8 	.word	0x08017cb8
 8011fa0:	08017854 	.word	0x08017854
 8011fa4:	08017ccc 	.word	0x08017ccc
 8011fa8:	08017ce8 	.word	0x08017ce8
 8011fac:	08017d18 	.word	0x08017d18
 8011fb0:	08017d30 	.word	0x08017d30
 8011fb4:	08017d60 	.word	0x08017d60
 8011fb8:	08017d80 	.word	0x08017d80

08011fbc <rxSessionRestart>:
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d106      	bne.n	8011fda <rxSessionRestart+0x1e>
 8011fcc:	4b1a      	ldr	r3, [pc, #104]	; (8012038 <rxSessionRestart+0x7c>)
 8011fce:	4a1b      	ldr	r2, [pc, #108]	; (801203c <rxSessionRestart+0x80>)
 8011fd0:	f240 21dd 	movw	r1, #733	; 0x2dd
 8011fd4:	481a      	ldr	r0, [pc, #104]	; (8012040 <rxSessionRestart+0x84>)
 8011fd6:	f000 fee1 	bl	8012d9c <__assert_func>
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d106      	bne.n	8011fee <rxSessionRestart+0x32>
 8011fe0:	4b18      	ldr	r3, [pc, #96]	; (8012044 <rxSessionRestart+0x88>)
 8011fe2:	4a16      	ldr	r2, [pc, #88]	; (801203c <rxSessionRestart+0x80>)
 8011fe4:	f240 21de 	movw	r1, #734	; 0x2de
 8011fe8:	4815      	ldr	r0, [pc, #84]	; (8012040 <rxSessionRestart+0x84>)
 8011fea:	f000 fed7 	bl	8012d9c <__assert_func>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	683a      	ldr	r2, [r7, #0]
 8011ff4:	6912      	ldr	r2, [r2, #16]
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	4798      	blx	r3
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	2200      	movs	r2, #0
 8012000:	609a      	str	r2, [r3, #8]
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	2200      	movs	r2, #0
 8012006:	60da      	str	r2, [r3, #12]
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	2200      	movs	r2, #0
 801200c:	611a      	str	r2, [r3, #16]
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012014:	829a      	strh	r2, [r3, #20]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	7d9b      	ldrb	r3, [r3, #22]
 801201a:	3301      	adds	r3, #1
 801201c:	b2db      	uxtb	r3, r3
 801201e:	f003 031f 	and.w	r3, r3, #31
 8012022:	b2da      	uxtb	r2, r3
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	759a      	strb	r2, [r3, #22]
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	2201      	movs	r2, #1
 801202c:	761a      	strb	r2, [r3, #24]
 801202e:	bf00      	nop
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	0801795c 	.word	0x0801795c
 801203c:	080186c4 	.word	0x080186c4
 8012040:	08017798 	.word	0x08017798
 8012044:	08017cb8 	.word	0x08017cb8

08012048 <rxSessionAcceptFrame>:
 8012048:	b580      	push	{r7, lr}
 801204a:	b088      	sub	sp, #32
 801204c:	af02      	add	r7, sp, #8
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	603b      	str	r3, [r7, #0]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d106      	bne.n	801206a <rxSessionAcceptFrame+0x22>
 801205c:	4b81      	ldr	r3, [pc, #516]	; (8012264 <rxSessionAcceptFrame+0x21c>)
 801205e:	4a82      	ldr	r2, [pc, #520]	; (8012268 <rxSessionAcceptFrame+0x220>)
 8012060:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012064:	4881      	ldr	r0, [pc, #516]	; (801226c <rxSessionAcceptFrame+0x224>)
 8012066:	f000 fe99 	bl	8012d9c <__assert_func>
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d106      	bne.n	801207e <rxSessionAcceptFrame+0x36>
 8012070:	4b7f      	ldr	r3, [pc, #508]	; (8012270 <rxSessionAcceptFrame+0x228>)
 8012072:	4a7d      	ldr	r2, [pc, #500]	; (8012268 <rxSessionAcceptFrame+0x220>)
 8012074:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8012078:	487c      	ldr	r0, [pc, #496]	; (801226c <rxSessionAcceptFrame+0x224>)
 801207a:	f000 fe8f 	bl	8012d9c <__assert_func>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d106      	bne.n	8012092 <rxSessionAcceptFrame+0x4a>
 8012084:	4b7b      	ldr	r3, [pc, #492]	; (8012274 <rxSessionAcceptFrame+0x22c>)
 8012086:	4a78      	ldr	r2, [pc, #480]	; (8012268 <rxSessionAcceptFrame+0x220>)
 8012088:	f240 21f1 	movw	r1, #753	; 0x2f1
 801208c:	4877      	ldr	r0, [pc, #476]	; (801226c <rxSessionAcceptFrame+0x224>)
 801208e:	f000 fe85 	bl	8012d9c <__assert_func>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	699b      	ldr	r3, [r3, #24]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <rxSessionAcceptFrame+0x60>
 801209a:	4b77      	ldr	r3, [pc, #476]	; (8012278 <rxSessionAcceptFrame+0x230>)
 801209c:	4a72      	ldr	r2, [pc, #456]	; (8012268 <rxSessionAcceptFrame+0x220>)
 801209e:	f240 21f2 	movw	r1, #754	; 0x2f2
 80120a2:	4872      	ldr	r0, [pc, #456]	; (801226c <rxSessionAcceptFrame+0x224>)
 80120a4:	f000 fe7a 	bl	8012d9c <__assert_func>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	7b9b      	ldrb	r3, [r3, #14]
 80120ac:	2b1f      	cmp	r3, #31
 80120ae:	d906      	bls.n	80120be <rxSessionAcceptFrame+0x76>
 80120b0:	4b72      	ldr	r3, [pc, #456]	; (801227c <rxSessionAcceptFrame+0x234>)
 80120b2:	4a6d      	ldr	r2, [pc, #436]	; (8012268 <rxSessionAcceptFrame+0x220>)
 80120b4:	f240 21f3 	movw	r1, #755	; 0x2f3
 80120b8:	486c      	ldr	r0, [pc, #432]	; (801226c <rxSessionAcceptFrame+0x224>)
 80120ba:	f000 fe6f 	bl	8012d9c <__assert_func>
 80120be:	6a3b      	ldr	r3, [r7, #32]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d106      	bne.n	80120d2 <rxSessionAcceptFrame+0x8a>
 80120c4:	4b6e      	ldr	r3, [pc, #440]	; (8012280 <rxSessionAcceptFrame+0x238>)
 80120c6:	4a68      	ldr	r2, [pc, #416]	; (8012268 <rxSessionAcceptFrame+0x220>)
 80120c8:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80120cc:	4867      	ldr	r0, [pc, #412]	; (801226c <rxSessionAcceptFrame+0x224>)
 80120ce:	f000 fe65 	bl	8012d9c <__assert_func>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	7bdb      	ldrb	r3, [r3, #15]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d005      	beq.n	80120e6 <rxSessionAcceptFrame+0x9e>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	68b9      	ldr	r1, [r7, #8]
 80120e2:	e9c1 2300 	strd	r2, r3, [r1]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	7bdb      	ldrb	r3, [r3, #15]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d005      	beq.n	80120fa <rxSessionAcceptFrame+0xb2>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	7c1b      	ldrb	r3, [r3, #16]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <rxSessionAcceptFrame+0xb2>
 80120f6:	2301      	movs	r3, #1
 80120f8:	e000      	b.n	80120fc <rxSessionAcceptFrame+0xb4>
 80120fa:	2300      	movs	r3, #0
 80120fc:	75bb      	strb	r3, [r7, #22]
 80120fe:	7dbb      	ldrb	r3, [r7, #22]
 8012100:	f003 0301 	and.w	r3, r3, #1
 8012104:	75bb      	strb	r3, [r7, #22]
 8012106:	7dbb      	ldrb	r3, [r7, #22]
 8012108:	f083 0301 	eor.w	r3, r3, #1
 801210c:	b2db      	uxtb	r3, r3
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00c      	beq.n	801212c <rxSessionAcceptFrame+0xe4>
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	8a98      	ldrh	r0, [r3, #20]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6959      	ldr	r1, [r3, #20]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	699b      	ldr	r3, [r3, #24]
 801211e:	461a      	mov	r2, r3
 8012120:	f7fe fed6 	bl	8010ed0 <crcAdd>
 8012124:	4603      	mov	r3, r0
 8012126:	461a      	mov	r2, r3
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	829a      	strh	r2, [r3, #20]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	695a      	ldr	r2, [r3, #20]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	699b      	ldr	r3, [r3, #24]
 8012134:	9300      	str	r3, [sp, #0]
 8012136:	4613      	mov	r3, r2
 8012138:	683a      	ldr	r2, [r7, #0]
 801213a:	68b9      	ldr	r1, [r7, #8]
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	f7ff fe4d 	bl	8011ddc <rxSessionWritePayload>
 8012142:	4603      	mov	r3, r0
 8012144:	75fb      	strb	r3, [r7, #23]
 8012146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801214a:	2b00      	cmp	r3, #0
 801214c:	da10      	bge.n	8012170 <rxSessionAcceptFrame+0x128>
 801214e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012152:	f113 0f03 	cmn.w	r3, #3
 8012156:	d006      	beq.n	8012166 <rxSessionAcceptFrame+0x11e>
 8012158:	4b4a      	ldr	r3, [pc, #296]	; (8012284 <rxSessionAcceptFrame+0x23c>)
 801215a:	4a43      	ldr	r2, [pc, #268]	; (8012268 <rxSessionAcceptFrame+0x220>)
 801215c:	f240 3106 	movw	r1, #774	; 0x306
 8012160:	4842      	ldr	r0, [pc, #264]	; (801226c <rxSessionAcceptFrame+0x224>)
 8012162:	f000 fe1b 	bl	8012d9c <__assert_func>
 8012166:	68b9      	ldr	r1, [r7, #8]
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f7ff ff27 	bl	8011fbc <rxSessionRestart>
 801216e:	e072      	b.n	8012256 <rxSessionAcceptFrame+0x20e>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7c1b      	ldrb	r3, [r3, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d05f      	beq.n	8012238 <rxSessionAcceptFrame+0x1f0>
 8012178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d006      	beq.n	801218e <rxSessionAcceptFrame+0x146>
 8012180:	4b41      	ldr	r3, [pc, #260]	; (8012288 <rxSessionAcceptFrame+0x240>)
 8012182:	4a39      	ldr	r2, [pc, #228]	; (8012268 <rxSessionAcceptFrame+0x220>)
 8012184:	f240 310b 	movw	r1, #779	; 0x30b
 8012188:	4838      	ldr	r0, [pc, #224]	; (801226c <rxSessionAcceptFrame+0x224>)
 801218a:	f000 fe07 	bl	8012d9c <__assert_func>
 801218e:	7dbb      	ldrb	r3, [r7, #22]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d103      	bne.n	801219c <rxSessionAcceptFrame+0x154>
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	8a9b      	ldrh	r3, [r3, #20]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d148      	bne.n	801222e <rxSessionAcceptFrame+0x1e6>
 801219c:	2301      	movs	r3, #1
 801219e:	75fb      	strb	r3, [r7, #23]
 80121a0:	6a3b      	ldr	r3, [r7, #32]
 80121a2:	4619      	mov	r1, r3
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7ff fd95 	bl	8011cd4 <rxInitTransferMetadataFromFrame>
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b0:	6a39      	ldr	r1, [r7, #32]
 80121b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	68da      	ldr	r2, [r3, #12]
 80121ba:	6a3b      	ldr	r3, [r7, #32]
 80121bc:	611a      	str	r2, [r3, #16]
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	691a      	ldr	r2, [r3, #16]
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	615a      	str	r2, [r3, #20]
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	689a      	ldr	r2, [r3, #8]
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d206      	bcs.n	80121e0 <rxSessionAcceptFrame+0x198>
 80121d2:	4b2e      	ldr	r3, [pc, #184]	; (801228c <rxSessionAcceptFrame+0x244>)
 80121d4:	4a24      	ldr	r2, [pc, #144]	; (8012268 <rxSessionAcceptFrame+0x220>)
 80121d6:	f240 3115 	movw	r1, #789	; 0x315
 80121da:	4824      	ldr	r0, [pc, #144]	; (801226c <rxSessionAcceptFrame+0x224>)
 80121dc:	f000 fdde 	bl	8012d9c <__assert_func>
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	689a      	ldr	r2, [r3, #8]
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	1ad3      	subs	r3, r2, r3
 80121ea:	613b      	str	r3, [r7, #16]
 80121ec:	7dbb      	ldrb	r3, [r7, #22]
 80121ee:	f083 0301 	eor.w	r3, r3, #1
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d017      	beq.n	8012228 <rxSessionAcceptFrame+0x1e0>
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d814      	bhi.n	8012228 <rxSessionAcceptFrame+0x1e0>
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	691a      	ldr	r2, [r3, #16]
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	f1c3 0302 	rsb	r3, r3, #2
 8012208:	429a      	cmp	r2, r3
 801220a:	d206      	bcs.n	801221a <rxSessionAcceptFrame+0x1d2>
 801220c:	4b20      	ldr	r3, [pc, #128]	; (8012290 <rxSessionAcceptFrame+0x248>)
 801220e:	4a16      	ldr	r2, [pc, #88]	; (8012268 <rxSessionAcceptFrame+0x220>)
 8012210:	f240 3119 	movw	r1, #793	; 0x319
 8012214:	4815      	ldr	r0, [pc, #84]	; (801226c <rxSessionAcceptFrame+0x224>)
 8012216:	f000 fdc1 	bl	8012d9c <__assert_func>
 801221a:	6a3b      	ldr	r3, [r7, #32]
 801221c:	691a      	ldr	r2, [r3, #16]
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	4413      	add	r3, r2
 8012222:	1e9a      	subs	r2, r3, #2
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	611a      	str	r2, [r3, #16]
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2200      	movs	r2, #0
 801222c:	611a      	str	r2, [r3, #16]
 801222e:	68b9      	ldr	r1, [r7, #8]
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f7ff fec3 	bl	8011fbc <rxSessionRestart>
 8012236:	e00e      	b.n	8012256 <rxSessionAcceptFrame+0x20e>
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	7e1b      	ldrb	r3, [r3, #24]
 801223c:	2b00      	cmp	r3, #0
 801223e:	bf14      	ite	ne
 8012240:	2301      	movne	r3, #1
 8012242:	2300      	moveq	r3, #0
 8012244:	b2db      	uxtb	r3, r3
 8012246:	f083 0301 	eor.w	r3, r3, #1
 801224a:	b2db      	uxtb	r3, r3
 801224c:	f003 0301 	and.w	r3, r3, #1
 8012250:	b2da      	uxtb	r2, r3
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	761a      	strb	r2, [r3, #24]
 8012256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	0801795c 	.word	0x0801795c
 8012268:	080186d8 	.word	0x080186d8
 801226c:	08017798 	.word	0x08017798
 8012270:	08017cb8 	.word	0x08017cb8
 8012274:	08017bf0 	.word	0x08017bf0
 8012278:	08017c4c 	.word	0x08017c4c
 801227c:	08017d8c 	.word	0x08017d8c
 8012280:	08017c6c 	.word	0x08017c6c
 8012284:	08017db4 	.word	0x08017db4
 8012288:	08017dc0 	.word	0x08017dc0
 801228c:	08017dcc 	.word	0x08017dcc
 8012290:	08017dfc 	.word	0x08017dfc

08012294 <rxSessionUpdate>:
 8012294:	b5b0      	push	{r4, r5, r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af02      	add	r7, sp, #8
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
 80122a0:	70fb      	strb	r3, [r7, #3]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d106      	bne.n	80122b6 <rxSessionUpdate+0x22>
 80122a8:	4b6d      	ldr	r3, [pc, #436]	; (8012460 <rxSessionUpdate+0x1cc>)
 80122aa:	4a6e      	ldr	r2, [pc, #440]	; (8012464 <rxSessionUpdate+0x1d0>)
 80122ac:	f240 3137 	movw	r1, #823	; 0x337
 80122b0:	486d      	ldr	r0, [pc, #436]	; (8012468 <rxSessionUpdate+0x1d4>)
 80122b2:	f000 fd73 	bl	8012d9c <__assert_func>
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d106      	bne.n	80122ca <rxSessionUpdate+0x36>
 80122bc:	4b6b      	ldr	r3, [pc, #428]	; (801246c <rxSessionUpdate+0x1d8>)
 80122be:	4a69      	ldr	r2, [pc, #420]	; (8012464 <rxSessionUpdate+0x1d0>)
 80122c0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80122c4:	4868      	ldr	r0, [pc, #416]	; (8012468 <rxSessionUpdate+0x1d4>)
 80122c6:	f000 fd69 	bl	8012d9c <__assert_func>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d106      	bne.n	80122de <rxSessionUpdate+0x4a>
 80122d0:	4b67      	ldr	r3, [pc, #412]	; (8012470 <rxSessionUpdate+0x1dc>)
 80122d2:	4a64      	ldr	r2, [pc, #400]	; (8012464 <rxSessionUpdate+0x1d0>)
 80122d4:	f240 3139 	movw	r1, #825	; 0x339
 80122d8:	4863      	ldr	r0, [pc, #396]	; (8012468 <rxSessionUpdate+0x1d4>)
 80122da:	f000 fd5f 	bl	8012d9c <__assert_func>
 80122de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d106      	bne.n	80122f2 <rxSessionUpdate+0x5e>
 80122e4:	4b63      	ldr	r3, [pc, #396]	; (8012474 <rxSessionUpdate+0x1e0>)
 80122e6:	4a5f      	ldr	r2, [pc, #380]	; (8012464 <rxSessionUpdate+0x1d0>)
 80122e8:	f240 313a 	movw	r1, #826	; 0x33a
 80122ec:	485e      	ldr	r0, [pc, #376]	; (8012468 <rxSessionUpdate+0x1d4>)
 80122ee:	f000 fd55 	bl	8012d9c <__assert_func>
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	7d9b      	ldrb	r3, [r3, #22]
 80122f6:	2b1f      	cmp	r3, #31
 80122f8:	d906      	bls.n	8012308 <rxSessionUpdate+0x74>
 80122fa:	4b5f      	ldr	r3, [pc, #380]	; (8012478 <rxSessionUpdate+0x1e4>)
 80122fc:	4a59      	ldr	r2, [pc, #356]	; (8012464 <rxSessionUpdate+0x1d0>)
 80122fe:	f240 313b 	movw	r1, #827	; 0x33b
 8012302:	4859      	ldr	r0, [pc, #356]	; (8012468 <rxSessionUpdate+0x1d4>)
 8012304:	f000 fd4a 	bl	8012d9c <__assert_func>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	7b9b      	ldrb	r3, [r3, #14]
 801230c:	2b1f      	cmp	r3, #31
 801230e:	d906      	bls.n	801231e <rxSessionUpdate+0x8a>
 8012310:	4b5a      	ldr	r3, [pc, #360]	; (801247c <rxSessionUpdate+0x1e8>)
 8012312:	4a54      	ldr	r2, [pc, #336]	; (8012464 <rxSessionUpdate+0x1d0>)
 8012314:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8012318:	4853      	ldr	r0, [pc, #332]	; (8012468 <rxSessionUpdate+0x1d4>)
 801231a:	f000 fd3f 	bl	8012d9c <__assert_func>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	e9d1 0100 	ldrd	r0, r1, [r1]
 801232a:	4290      	cmp	r0, r2
 801232c:	eb71 0303 	sbcs.w	r3, r1, r3
 8012330:	d20f      	bcs.n	8012352 <rxSessionUpdate+0xbe>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233e:	1a84      	subs	r4, r0, r2
 8012340:	eb61 0503 	sbc.w	r5, r1, r3
 8012344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012348:	42a2      	cmp	r2, r4
 801234a:	41ab      	sbcs	r3, r5
 801234c:	d201      	bcs.n	8012352 <rxSessionUpdate+0xbe>
 801234e:	2301      	movs	r3, #1
 8012350:	e000      	b.n	8012354 <rxSessionUpdate+0xc0>
 8012352:	2300      	movs	r3, #0
 8012354:	75bb      	strb	r3, [r7, #22]
 8012356:	7dbb      	ldrb	r3, [r7, #22]
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	75bb      	strb	r3, [r7, #22]
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	7d9a      	ldrb	r2, [r3, #22]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	7b9b      	ldrb	r3, [r3, #14]
 8012366:	4619      	mov	r1, r3
 8012368:	4610      	mov	r0, r2
 801236a:	f7ff fcf9 	bl	8011d60 <rxComputeTransferIDDifference>
 801236e:	4603      	mov	r3, r0
 8012370:	2b01      	cmp	r3, #1
 8012372:	bf8c      	ite	hi
 8012374:	2301      	movhi	r3, #1
 8012376:	2300      	movls	r3, #0
 8012378:	757b      	strb	r3, [r7, #21]
 801237a:	7dbb      	ldrb	r3, [r7, #22]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10b      	bne.n	8012398 <rxSessionUpdate+0x104>
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	7ddb      	ldrb	r3, [r3, #23]
 8012384:	78fa      	ldrb	r2, [r7, #3]
 8012386:	429a      	cmp	r2, r3
 8012388:	d108      	bne.n	801239c <rxSessionUpdate+0x108>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	7bdb      	ldrb	r3, [r3, #15]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d004      	beq.n	801239c <rxSessionUpdate+0x108>
 8012392:	7d7b      	ldrb	r3, [r7, #21]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d001      	beq.n	801239c <rxSessionUpdate+0x108>
 8012398:	2301      	movs	r3, #1
 801239a:	e000      	b.n	801239e <rxSessionUpdate+0x10a>
 801239c:	2300      	movs	r3, #0
 801239e:	753b      	strb	r3, [r7, #20]
 80123a0:	7d3b      	ldrb	r3, [r7, #20]
 80123a2:	f003 0301 	and.w	r3, r3, #1
 80123a6:	753b      	strb	r3, [r7, #20]
 80123a8:	7d3b      	ldrb	r3, [r7, #20]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d013      	beq.n	80123d6 <rxSessionUpdate+0x142>
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	2200      	movs	r2, #0
 80123b2:	609a      	str	r2, [r3, #8]
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2200      	movs	r2, #0
 80123b8:	60da      	str	r2, [r3, #12]
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123c0:	829a      	strh	r2, [r3, #20]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	7b9a      	ldrb	r2, [r3, #14]
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	759a      	strb	r2, [r3, #22]
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2201      	movs	r2, #1
 80123ce:	761a      	strb	r2, [r3, #24]
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	78fa      	ldrb	r2, [r7, #3]
 80123d4:	75da      	strb	r2, [r3, #23]
 80123d6:	2300      	movs	r3, #0
 80123d8:	75fb      	strb	r3, [r7, #23]
 80123da:	7d3b      	ldrb	r3, [r7, #20]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d00b      	beq.n	80123f8 <rxSessionUpdate+0x164>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	7bdb      	ldrb	r3, [r3, #15]
 80123e4:	f083 0301 	eor.w	r3, r3, #1
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d004      	beq.n	80123f8 <rxSessionUpdate+0x164>
 80123ee:	68b9      	ldr	r1, [r7, #8]
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f7ff fde3 	bl	8011fbc <rxSessionRestart>
 80123f6:	e02c      	b.n	8012452 <rxSessionUpdate+0x1be>
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	7ddb      	ldrb	r3, [r3, #23]
 80123fc:	78fa      	ldrb	r2, [r7, #3]
 80123fe:	429a      	cmp	r2, r3
 8012400:	bf0c      	ite	eq
 8012402:	2301      	moveq	r3, #1
 8012404:	2300      	movne	r3, #0
 8012406:	74fb      	strb	r3, [r7, #19]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	7c5a      	ldrb	r2, [r3, #17]
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	7e1b      	ldrb	r3, [r3, #24]
 8012410:	429a      	cmp	r2, r3
 8012412:	bf0c      	ite	eq
 8012414:	2301      	moveq	r3, #1
 8012416:	2300      	movne	r3, #0
 8012418:	74bb      	strb	r3, [r7, #18]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	7b9a      	ldrb	r2, [r3, #14]
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	7d9b      	ldrb	r3, [r3, #22]
 8012422:	429a      	cmp	r2, r3
 8012424:	bf0c      	ite	eq
 8012426:	2301      	moveq	r3, #1
 8012428:	2300      	movne	r3, #0
 801242a:	747b      	strb	r3, [r7, #17]
 801242c:	7cfb      	ldrb	r3, [r7, #19]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00f      	beq.n	8012452 <rxSessionUpdate+0x1be>
 8012432:	7cbb      	ldrb	r3, [r7, #18]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d00c      	beq.n	8012452 <rxSessionUpdate+0x1be>
 8012438:	7c7b      	ldrb	r3, [r7, #17]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d009      	beq.n	8012452 <rxSessionUpdate+0x1be>
 801243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	68b9      	ldr	r1, [r7, #8]
 8012448:	68f8      	ldr	r0, [r7, #12]
 801244a:	f7ff fdfd 	bl	8012048 <rxSessionAcceptFrame>
 801244e:	4603      	mov	r3, r0
 8012450:	75fb      	strb	r3, [r7, #23]
 8012452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012456:	4618      	mov	r0, r3
 8012458:	3718      	adds	r7, #24
 801245a:	46bd      	mov	sp, r7
 801245c:	bdb0      	pop	{r4, r5, r7, pc}
 801245e:	bf00      	nop
 8012460:	0801795c 	.word	0x0801795c
 8012464:	08018694 	.word	0x08018694
 8012468:	08017798 	.word	0x08017798
 801246c:	08017cb8 	.word	0x08017cb8
 8012470:	08017bf0 	.word	0x08017bf0
 8012474:	08017c6c 	.word	0x08017c6c
 8012478:	08017e34 	.word	0x08017e34
 801247c:	08017d8c 	.word	0x08017d8c

08012480 <rxAcceptFrame>:
 8012480:	b5b0      	push	{r4, r5, r7, lr}
 8012482:	b08c      	sub	sp, #48	; 0x30
 8012484:	af04      	add	r7, sp, #16
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	607a      	str	r2, [r7, #4]
 801248c:	70fb      	strb	r3, [r7, #3]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d106      	bne.n	80124a2 <rxAcceptFrame+0x22>
 8012494:	4b85      	ldr	r3, [pc, #532]	; (80126ac <rxAcceptFrame+0x22c>)
 8012496:	4a86      	ldr	r2, [pc, #536]	; (80126b0 <rxAcceptFrame+0x230>)
 8012498:	f44f 715a 	mov.w	r1, #872	; 0x368
 801249c:	4885      	ldr	r0, [pc, #532]	; (80126b4 <rxAcceptFrame+0x234>)
 801249e:	f000 fc7d 	bl	8012d9c <__assert_func>
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d106      	bne.n	80124b6 <rxAcceptFrame+0x36>
 80124a8:	4b83      	ldr	r3, [pc, #524]	; (80126b8 <rxAcceptFrame+0x238>)
 80124aa:	4a81      	ldr	r2, [pc, #516]	; (80126b0 <rxAcceptFrame+0x230>)
 80124ac:	f240 3169 	movw	r1, #873	; 0x369
 80124b0:	4880      	ldr	r0, [pc, #512]	; (80126b4 <rxAcceptFrame+0x234>)
 80124b2:	f000 fc73 	bl	8012d9c <__assert_func>
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	8b9a      	ldrh	r2, [r3, #28]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	895b      	ldrh	r3, [r3, #10]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d006      	beq.n	80124d0 <rxAcceptFrame+0x50>
 80124c2:	4b7e      	ldr	r3, [pc, #504]	; (80126bc <rxAcceptFrame+0x23c>)
 80124c4:	4a7a      	ldr	r2, [pc, #488]	; (80126b0 <rxAcceptFrame+0x230>)
 80124c6:	f240 316a 	movw	r1, #874	; 0x36a
 80124ca:	487a      	ldr	r0, [pc, #488]	; (80126b4 <rxAcceptFrame+0x234>)
 80124cc:	f000 fc66 	bl	8012d9c <__assert_func>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <rxAcceptFrame+0x64>
 80124d6:	4b7a      	ldr	r3, [pc, #488]	; (80126c0 <rxAcceptFrame+0x240>)
 80124d8:	4a75      	ldr	r2, [pc, #468]	; (80126b0 <rxAcceptFrame+0x230>)
 80124da:	f240 316b 	movw	r1, #875	; 0x36b
 80124de:	4875      	ldr	r0, [pc, #468]	; (80126b4 <rxAcceptFrame+0x234>)
 80124e0:	f000 fc5c 	bl	8012d9c <__assert_func>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	699b      	ldr	r3, [r3, #24]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <rxAcceptFrame+0x7a>
 80124ec:	4b75      	ldr	r3, [pc, #468]	; (80126c4 <rxAcceptFrame+0x244>)
 80124ee:	4a70      	ldr	r2, [pc, #448]	; (80126b0 <rxAcceptFrame+0x230>)
 80124f0:	f44f 715b 	mov.w	r1, #876	; 0x36c
 80124f4:	486f      	ldr	r0, [pc, #444]	; (80126b4 <rxAcceptFrame+0x234>)
 80124f6:	f000 fc51 	bl	8012d9c <__assert_func>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	7b9b      	ldrb	r3, [r3, #14]
 80124fe:	2b1f      	cmp	r3, #31
 8012500:	d906      	bls.n	8012510 <rxAcceptFrame+0x90>
 8012502:	4b71      	ldr	r3, [pc, #452]	; (80126c8 <rxAcceptFrame+0x248>)
 8012504:	4a6a      	ldr	r2, [pc, #424]	; (80126b0 <rxAcceptFrame+0x230>)
 8012506:	f240 316d 	movw	r1, #877	; 0x36d
 801250a:	486a      	ldr	r0, [pc, #424]	; (80126b4 <rxAcceptFrame+0x234>)
 801250c:	f000 fc46 	bl	8012d9c <__assert_func>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	7b5b      	ldrb	r3, [r3, #13]
 8012514:	2bff      	cmp	r3, #255	; 0xff
 8012516:	d00c      	beq.n	8012532 <rxAcceptFrame+0xb2>
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	791a      	ldrb	r2, [r3, #4]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	7b5b      	ldrb	r3, [r3, #13]
 8012520:	429a      	cmp	r2, r3
 8012522:	d006      	beq.n	8012532 <rxAcceptFrame+0xb2>
 8012524:	4b69      	ldr	r3, [pc, #420]	; (80126cc <rxAcceptFrame+0x24c>)
 8012526:	4a62      	ldr	r2, [pc, #392]	; (80126b0 <rxAcceptFrame+0x230>)
 8012528:	f240 316e 	movw	r1, #878	; 0x36e
 801252c:	4861      	ldr	r0, [pc, #388]	; (80126b4 <rxAcceptFrame+0x234>)
 801252e:	f000 fc35 	bl	8012d9c <__assert_func>
 8012532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012534:	2b00      	cmp	r3, #0
 8012536:	d106      	bne.n	8012546 <rxAcceptFrame+0xc6>
 8012538:	4b65      	ldr	r3, [pc, #404]	; (80126d0 <rxAcceptFrame+0x250>)
 801253a:	4a5d      	ldr	r2, [pc, #372]	; (80126b0 <rxAcceptFrame+0x230>)
 801253c:	f240 316f 	movw	r1, #879	; 0x36f
 8012540:	485c      	ldr	r0, [pc, #368]	; (80126b4 <rxAcceptFrame+0x234>)
 8012542:	f000 fc2b 	bl	8012d9c <__assert_func>
 8012546:	2300      	movs	r3, #0
 8012548:	77fb      	strb	r3, [r7, #31]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	7b1b      	ldrb	r3, [r3, #12]
 801254e:	b25b      	sxtb	r3, r3
 8012550:	2b00      	cmp	r3, #0
 8012552:	db6c      	blt.n	801262e <rxAcceptFrame+0x1ae>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	7b1b      	ldrb	r3, [r3, #12]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	3308      	adds	r3, #8
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	4413      	add	r3, r2
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d134      	bne.n	80125d0 <rxAcceptFrame+0x150>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	7bdb      	ldrb	r3, [r3, #15]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d030      	beq.n	80125d0 <rxAcceptFrame+0x150>
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	689b      	ldr	r3, [r3, #8]
 8012572:	2120      	movs	r1, #32
 8012574:	68f8      	ldr	r0, [r7, #12]
 8012576:	4798      	blx	r3
 8012578:	6138      	str	r0, [r7, #16]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	7b1b      	ldrb	r3, [r3, #12]
 801257e:	68ba      	ldr	r2, [r7, #8]
 8012580:	3308      	adds	r3, #8
 8012582:	009b      	lsls	r3, r3, #2
 8012584:	4413      	add	r3, r2
 8012586:	693a      	ldr	r2, [r7, #16]
 8012588:	605a      	str	r2, [r3, #4]
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d01d      	beq.n	80125cc <rxAcceptFrame+0x14c>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012596:	6939      	ldr	r1, [r7, #16]
 8012598:	e9c1 2300 	strd	r2, r3, [r1]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	2200      	movs	r2, #0
 80125a0:	609a      	str	r2, [r3, #8]
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	2200      	movs	r2, #0
 80125a6:	60da      	str	r2, [r3, #12]
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	2200      	movs	r2, #0
 80125ac:	611a      	str	r2, [r3, #16]
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125b4:	829a      	strh	r2, [r3, #20]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	7b9a      	ldrb	r2, [r3, #14]
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	759a      	strb	r2, [r3, #22]
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	78fa      	ldrb	r2, [r7, #3]
 80125c2:	75da      	strb	r2, [r3, #23]
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	2201      	movs	r2, #1
 80125c8:	761a      	strb	r2, [r3, #24]
 80125ca:	e001      	b.n	80125d0 <rxAcceptFrame+0x150>
 80125cc:	23fd      	movs	r3, #253	; 0xfd
 80125ce:	77fb      	strb	r3, [r7, #31]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	7b1b      	ldrb	r3, [r3, #12]
 80125d4:	68ba      	ldr	r2, [r7, #8]
 80125d6:	3308      	adds	r3, #8
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	4413      	add	r3, r2
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d05e      	beq.n	80126a0 <rxAcceptFrame+0x220>
 80125e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d006      	beq.n	80125f8 <rxAcceptFrame+0x178>
 80125ea:	4b3a      	ldr	r3, [pc, #232]	; (80126d4 <rxAcceptFrame+0x254>)
 80125ec:	4a30      	ldr	r2, [pc, #192]	; (80126b0 <rxAcceptFrame+0x230>)
 80125ee:	f240 318e 	movw	r1, #910	; 0x38e
 80125f2:	4830      	ldr	r0, [pc, #192]	; (80126b4 <rxAcceptFrame+0x234>)
 80125f4:	f000 fbd2 	bl	8012d9c <__assert_func>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	7b1b      	ldrb	r3, [r3, #12]
 80125fc:	68ba      	ldr	r2, [r7, #8]
 80125fe:	3308      	adds	r3, #8
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	4413      	add	r3, r2
 8012604:	685c      	ldr	r4, [r3, #4]
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801260c:	68b9      	ldr	r1, [r7, #8]
 801260e:	6989      	ldr	r1, [r1, #24]
 8012610:	78fd      	ldrb	r5, [r7, #3]
 8012612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012614:	9003      	str	r0, [sp, #12]
 8012616:	9102      	str	r1, [sp, #8]
 8012618:	e9cd 2300 	strd	r2, r3, [sp]
 801261c:	462b      	mov	r3, r5
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	4621      	mov	r1, r4
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f7ff fe36 	bl	8012294 <rxSessionUpdate>
 8012628:	4603      	mov	r3, r0
 801262a:	77fb      	strb	r3, [r7, #31]
 801262c:	e038      	b.n	80126a0 <rxAcceptFrame+0x220>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	7b1b      	ldrb	r3, [r3, #12]
 8012632:	2bff      	cmp	r3, #255	; 0xff
 8012634:	d006      	beq.n	8012644 <rxAcceptFrame+0x1c4>
 8012636:	4b28      	ldr	r3, [pc, #160]	; (80126d8 <rxAcceptFrame+0x258>)
 8012638:	4a1d      	ldr	r2, [pc, #116]	; (80126b0 <rxAcceptFrame+0x230>)
 801263a:	f240 319a 	movw	r1, #922	; 0x39a
 801263e:	481d      	ldr	r0, [pc, #116]	; (80126b4 <rxAcceptFrame+0x234>)
 8012640:	f000 fbac 	bl	8012d9c <__assert_func>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	695a      	ldr	r2, [r3, #20]
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	4293      	cmp	r3, r2
 801264e:	bf28      	it	cs
 8012650:	4613      	movcs	r3, r2
 8012652:	61bb      	str	r3, [r7, #24]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	689b      	ldr	r3, [r3, #8]
 8012658:	69b9      	ldr	r1, [r7, #24]
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	4798      	blx	r3
 801265e:	6178      	str	r0, [r7, #20]
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d01a      	beq.n	801269c <rxAcceptFrame+0x21c>
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	4619      	mov	r1, r3
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7ff fb32 	bl	8011cd4 <rxInitTransferMetadataFromFrame>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012678:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267e:	69ba      	ldr	r2, [r7, #24]
 8012680:	611a      	str	r2, [r3, #16]
 8012682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012684:	697a      	ldr	r2, [r7, #20]
 8012686:	615a      	str	r2, [r3, #20]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	699b      	ldr	r3, [r3, #24]
 801268c:	69ba      	ldr	r2, [r7, #24]
 801268e:	4619      	mov	r1, r3
 8012690:	6978      	ldr	r0, [r7, #20]
 8012692:	f001 fd2c 	bl	80140ee <memcpy>
 8012696:	2301      	movs	r3, #1
 8012698:	77fb      	strb	r3, [r7, #31]
 801269a:	e001      	b.n	80126a0 <rxAcceptFrame+0x220>
 801269c:	23fd      	movs	r3, #253	; 0xfd
 801269e:	77fb      	strb	r3, [r7, #31]
 80126a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80126a4:	4618      	mov	r0, r3
 80126a6:	3720      	adds	r7, #32
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bdb0      	pop	{r4, r5, r7, pc}
 80126ac:	0801795c 	.word	0x0801795c
 80126b0:	08018684 	.word	0x08018684
 80126b4:	08017798 	.word	0x08017798
 80126b8:	08017e5c 	.word	0x08017e5c
 80126bc:	08017e78 	.word	0x08017e78
 80126c0:	08017bf0 	.word	0x08017bf0
 80126c4:	08017c4c 	.word	0x08017c4c
 80126c8:	08017d8c 	.word	0x08017d8c
 80126cc:	08017ea0 	.word	0x08017ea0
 80126d0:	08017c6c 	.word	0x08017c6c
 80126d4:	08017ef8 	.word	0x08017ef8
 80126d8:	08017f04 	.word	0x08017f04

080126dc <rxSubscriptionPredicateOnPortID>:
 80126dc:	b480      	push	{r7}
 80126de:	b085      	sub	sp, #20
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	81fb      	strh	r3, [r7, #14]
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	8b9b      	ldrh	r3, [r3, #28]
 80126f0:	81bb      	strh	r3, [r7, #12]
 80126f2:	89fa      	ldrh	r2, [r7, #14]
 80126f4:	89bb      	ldrh	r3, [r7, #12]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d00a      	beq.n	8012710 <rxSubscriptionPredicateOnPortID+0x34>
 80126fa:	89fa      	ldrh	r2, [r7, #14]
 80126fc:	89bb      	ldrh	r3, [r7, #12]
 80126fe:	429a      	cmp	r2, r3
 8012700:	bf8c      	ite	hi
 8012702:	2301      	movhi	r3, #1
 8012704:	2300      	movls	r3, #0
 8012706:	b2db      	uxtb	r3, r3
 8012708:	461a      	mov	r2, r3
 801270a:	4b05      	ldr	r3, [pc, #20]	; (8012720 <rxSubscriptionPredicateOnPortID+0x44>)
 801270c:	569b      	ldrsb	r3, [r3, r2]
 801270e:	e000      	b.n	8012712 <rxSubscriptionPredicateOnPortID+0x36>
 8012710:	2300      	movs	r3, #0
 8012712:	4618      	mov	r0, r3
 8012714:	3714      	adds	r7, #20
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	08018670 	.word	0x08018670

08012724 <rxSubscriptionPredicateOnStruct>:
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	331c      	adds	r3, #28
 8012732:	6839      	ldr	r1, [r7, #0]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff ffd1 	bl	80126dc <rxSubscriptionPredicateOnPortID>
 801273a:	4603      	mov	r3, r0
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <canardInit>:
 8012744:	b5b0      	push	{r4, r5, r7, lr}
 8012746:	b08c      	sub	sp, #48	; 0x30
 8012748:	af00      	add	r7, sp, #0
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	607a      	str	r2, [r7, #4]
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <canardInit+0x20>
 8012756:	4b16      	ldr	r3, [pc, #88]	; (80127b0 <canardInit+0x6c>)
 8012758:	4a16      	ldr	r2, [pc, #88]	; (80127b4 <canardInit+0x70>)
 801275a:	f240 31d6 	movw	r1, #982	; 0x3d6
 801275e:	4816      	ldr	r0, [pc, #88]	; (80127b8 <canardInit+0x74>)
 8012760:	f000 fb1c 	bl	8012d9c <__assert_func>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d106      	bne.n	8012778 <canardInit+0x34>
 801276a:	4b14      	ldr	r3, [pc, #80]	; (80127bc <canardInit+0x78>)
 801276c:	4a11      	ldr	r2, [pc, #68]	; (80127b4 <canardInit+0x70>)
 801276e:	f240 31d7 	movw	r1, #983	; 0x3d7
 8012772:	4811      	ldr	r0, [pc, #68]	; (80127b8 <canardInit+0x74>)
 8012774:	f000 fb12 	bl	8012d9c <__assert_func>
 8012778:	2300      	movs	r3, #0
 801277a:	617b      	str	r3, [r7, #20]
 801277c:	23ff      	movs	r3, #255	; 0xff
 801277e:	763b      	strb	r3, [r7, #24]
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	61fb      	str	r3, [r7, #28]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	623b      	str	r3, [r7, #32]
 8012788:	2300      	movs	r3, #0
 801278a:	627b      	str	r3, [r7, #36]	; 0x24
 801278c:	2300      	movs	r3, #0
 801278e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012790:	2300      	movs	r3, #0
 8012792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	461d      	mov	r5, r3
 8012798:	f107 0414 	add.w	r4, r7, #20
 801279c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801279e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80127a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80127a8:	68f8      	ldr	r0, [r7, #12]
 80127aa:	3730      	adds	r7, #48	; 0x30
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bdb0      	pop	{r4, r5, r7, pc}
 80127b0:	08017f24 	.word	0x08017f24
 80127b4:	080184f8 	.word	0x080184f8
 80127b8:	08017798 	.word	0x08017798
 80127bc:	08017f44 	.word	0x08017f44

080127c0 <canardTxInit>:
 80127c0:	b4b0      	push	{r4, r5, r7}
 80127c2:	b08b      	sub	sp, #44	; 0x2c
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	60b9      	str	r1, [r7, #8]
 80127ca:	607a      	str	r2, [r7, #4]
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	61bb      	str	r3, [r7, #24]
 80127d4:	2300      	movs	r3, #0
 80127d6:	61fb      	str	r3, [r7, #28]
 80127d8:	2300      	movs	r3, #0
 80127da:	623b      	str	r3, [r7, #32]
 80127dc:	2300      	movs	r3, #0
 80127de:	627b      	str	r3, [r7, #36]	; 0x24
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	461d      	mov	r5, r3
 80127e4:	f107 0414 	add.w	r4, r7, #20
 80127e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	602b      	str	r3, [r5, #0]
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	372c      	adds	r7, #44	; 0x2c
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bcb0      	pop	{r4, r5, r7}
 80127f8:	4770      	bx	lr
	...

080127fc <canardTxPush>:
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b08e      	sub	sp, #56	; 0x38
 8012800:	af06      	add	r7, sp, #24
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	e9c7 2300 	strd	r2, r3, [r7]
 801280a:	f06f 0301 	mvn.w	r3, #1
 801280e:	61fb      	str	r3, [r7, #28]
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d062      	beq.n	80128dc <canardTxPush+0xe0>
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d05f      	beq.n	80128dc <canardTxPush+0xe0>
 801281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281e:	2b00      	cmp	r3, #0
 8012820:	d05c      	beq.n	80128dc <canardTxPush+0xe0>
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	2b00      	cmp	r3, #0
 8012826:	d102      	bne.n	801282e <canardTxPush+0x32>
 8012828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282a:	2b00      	cmp	r3, #0
 801282c:	d156      	bne.n	80128dc <canardTxPush+0xe0>
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7fe fc02 	bl	801103c <adjustPresentationLayerMTU>
 8012838:	61b8      	str	r0, [r7, #24]
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	791a      	ldrb	r2, [r3, #4]
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	9300      	str	r3, [sp, #0]
 8012842:	4613      	mov	r3, r2
 8012844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801284a:	f7fe fc27 	bl	801109c <txMakeCANID>
 801284e:	6178      	str	r0, [r7, #20]
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	2b00      	cmp	r3, #0
 8012854:	db40      	blt.n	80128d8 <canardTxPush+0xdc>
 8012856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	429a      	cmp	r2, r3
 801285c:	d81c      	bhi.n	8012898 <canardTxPush+0x9c>
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012862:	7952      	ldrb	r2, [r2, #5]
 8012864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012866:	9103      	str	r1, [sp, #12]
 8012868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801286a:	9102      	str	r1, [sp, #8]
 801286c:	9201      	str	r2, [sp, #4]
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012874:	68b9      	ldr	r1, [r7, #8]
 8012876:	68f8      	ldr	r0, [r7, #12]
 8012878:	f7fe fdda 	bl	8011430 <txPushSingleFrame>
 801287c:	61f8      	str	r0, [r7, #28]
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	2b00      	cmp	r3, #0
 8012882:	db2b      	blt.n	80128dc <canardTxPush+0xe0>
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	2b01      	cmp	r3, #1
 8012888:	d028      	beq.n	80128dc <canardTxPush+0xe0>
 801288a:	4b1c      	ldr	r3, [pc, #112]	; (80128fc <canardTxPush+0x100>)
 801288c:	4a1c      	ldr	r2, [pc, #112]	; (8012900 <canardTxPush+0x104>)
 801288e:	f240 4105 	movw	r1, #1029	; 0x405
 8012892:	481c      	ldr	r0, [pc, #112]	; (8012904 <canardTxPush+0x108>)
 8012894:	f000 fa82 	bl	8012d9c <__assert_func>
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801289c:	7952      	ldrb	r2, [r2, #5]
 801289e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128a0:	9105      	str	r1, [sp, #20]
 80128a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128a4:	9104      	str	r1, [sp, #16]
 80128a6:	9203      	str	r2, [sp, #12]
 80128a8:	9302      	str	r3, [sp, #8]
 80128aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128ae:	e9cd 2300 	strd	r2, r3, [sp]
 80128b2:	69ba      	ldr	r2, [r7, #24]
 80128b4:	68b9      	ldr	r1, [r7, #8]
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f7fe ffd4 	bl	8011864 <txPushMultiFrame>
 80128bc:	61f8      	str	r0, [r7, #28]
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	db0b      	blt.n	80128dc <canardTxPush+0xe0>
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	dc08      	bgt.n	80128dc <canardTxPush+0xe0>
 80128ca:	4b0f      	ldr	r3, [pc, #60]	; (8012908 <canardTxPush+0x10c>)
 80128cc:	4a0c      	ldr	r2, [pc, #48]	; (8012900 <canardTxPush+0x104>)
 80128ce:	f240 4111 	movw	r1, #1041	; 0x411
 80128d2:	480c      	ldr	r0, [pc, #48]	; (8012904 <canardTxPush+0x108>)
 80128d4:	f000 fa62 	bl	8012d9c <__assert_func>
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	61fb      	str	r3, [r7, #28]
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d106      	bne.n	80128f0 <canardTxPush+0xf4>
 80128e2:	4b0a      	ldr	r3, [pc, #40]	; (801290c <canardTxPush+0x110>)
 80128e4:	4a06      	ldr	r2, [pc, #24]	; (8012900 <canardTxPush+0x104>)
 80128e6:	f240 4119 	movw	r1, #1049	; 0x419
 80128ea:	4806      	ldr	r0, [pc, #24]	; (8012904 <canardTxPush+0x108>)
 80128ec:	f000 fa56 	bl	8012d9c <__assert_func>
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	4618      	mov	r0, r3
 80128f4:	3720      	adds	r7, #32
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	08017a94 	.word	0x08017a94
 8012900:	08018504 	.word	0x08018504
 8012904:	08017798 	.word	0x08017798
 8012908:	08017bd8 	.word	0x08017bd8
 801290c:	08017f60 	.word	0x08017f60

08012910 <canardTxPeek>:
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	2300      	movs	r3, #0
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d006      	beq.n	8012930 <canardTxPeek+0x20>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	2100      	movs	r1, #0
 8012928:	4618      	mov	r0, r3
 801292a:	f7fd ff1d 	bl	8010768 <cavlFindExtremum>
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <canardTxPop>:
 801293a:	b580      	push	{r7, lr}
 801293c:	b084      	sub	sp, #16
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
 8012944:	2300      	movs	r3, #0
 8012946:	60fb      	str	r3, [r7, #12]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d010      	beq.n	8012970 <canardTxPop+0x36>
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00d      	beq.n	8012970 <canardTxPop+0x36>
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	60fb      	str	r3, [r7, #12]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	330c      	adds	r3, #12
 801295c:	683a      	ldr	r2, [r7, #0]
 801295e:	4611      	mov	r1, r2
 8012960:	4618      	mov	r0, r3
 8012962:	f7fe f957 	bl	8010c14 <cavlRemove>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	1e5a      	subs	r2, r3, #1
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	609a      	str	r2, [r3, #8]
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	4618      	mov	r0, r3
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <canardRxAccept>:
 801297c:	b580      	push	{r7, lr}
 801297e:	b090      	sub	sp, #64	; 0x40
 8012980:	af02      	add	r7, sp, #8
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	e9c7 2300 	strd	r2, r3, [r7]
 8012988:	23fe      	movs	r3, #254	; 0xfe
 801298a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d068      	beq.n	8012a66 <canardRxAccept+0xea>
 8012994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012996:	2b00      	cmp	r3, #0
 8012998:	d065      	beq.n	8012a66 <canardRxAccept+0xea>
 801299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801299c:	2b00      	cmp	r3, #0
 801299e:	d062      	beq.n	8012a66 <canardRxAccept+0xea>
 80129a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80129a8:	d25d      	bcs.n	8012a66 <canardRxAccept+0xea>
 80129aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d103      	bne.n	80129ba <canardRxAccept+0x3e>
 80129b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d155      	bne.n	8012a66 <canardRxAccept+0xea>
 80129ba:	f107 0310 	add.w	r3, r7, #16
 80129be:	2220      	movs	r2, #32
 80129c0:	2100      	movs	r1, #0
 80129c2:	4618      	mov	r0, r3
 80129c4:	f001 faad 	bl	8013f22 <memset>
 80129c8:	f107 0310 	add.w	r3, r7, #16
 80129cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80129d2:	f7ff f83b 	bl	8011a4c <rxTryParseFrame>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d041      	beq.n	8012a60 <canardRxAccept+0xe4>
 80129dc:	7f7b      	ldrb	r3, [r7, #29]
 80129de:	2bff      	cmp	r3, #255	; 0xff
 80129e0:	d004      	beq.n	80129ec <canardRxAccept+0x70>
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	791a      	ldrb	r2, [r3, #4]
 80129e6:	7f7b      	ldrb	r3, [r7, #29]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d135      	bne.n	8012a58 <canardRxAccept+0xdc>
 80129ec:	7e7b      	ldrb	r3, [r7, #25]
 80129ee:	3304      	adds	r3, #4
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	68fa      	ldr	r2, [r7, #12]
 80129f4:	18d0      	adds	r0, r2, r3
 80129f6:	f107 0310 	add.w	r3, r7, #16
 80129fa:	f103 010a 	add.w	r1, r3, #10
 80129fe:	2300      	movs	r3, #0
 8012a00:	4a21      	ldr	r2, [pc, #132]	; (8012a88 <canardRxAccept+0x10c>)
 8012a02:	f7fe f889 	bl	8010b18 <cavlSearch>
 8012a06:	6338      	str	r0, [r7, #48]	; 0x30
 8012a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d002      	beq.n	8012a14 <canardRxAccept+0x98>
 8012a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a12:	601a      	str	r2, [r3, #0]
 8012a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d01a      	beq.n	8012a50 <canardRxAccept+0xd4>
 8012a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1c:	8b9a      	ldrh	r2, [r3, #28]
 8012a1e:	8b7b      	ldrh	r3, [r7, #26]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d006      	beq.n	8012a32 <canardRxAccept+0xb6>
 8012a24:	4b19      	ldr	r3, [pc, #100]	; (8012a8c <canardRxAccept+0x110>)
 8012a26:	4a1a      	ldr	r2, [pc, #104]	; (8012a90 <canardRxAccept+0x114>)
 8012a28:	f240 415a 	movw	r1, #1114	; 0x45a
 8012a2c:	4819      	ldr	r0, [pc, #100]	; (8012a94 <canardRxAccept+0x118>)
 8012a2e:	f000 f9b5 	bl	8012d9c <__assert_func>
 8012a32:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8012a36:	f107 0210 	add.w	r2, r7, #16
 8012a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	460b      	mov	r3, r1
 8012a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a42:	68f8      	ldr	r0, [r7, #12]
 8012a44:	f7ff fd1c 	bl	8012480 <rxAcceptFrame>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a4e:	e00a      	b.n	8012a66 <canardRxAccept+0xea>
 8012a50:	2300      	movs	r3, #0
 8012a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a56:	e006      	b.n	8012a66 <canardRxAccept+0xea>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a5e:	e002      	b.n	8012a66 <canardRxAccept+0xea>
 8012a60:	2300      	movs	r3, #0
 8012a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a66:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	dd06      	ble.n	8012a7c <canardRxAccept+0x100>
 8012a6e:	4b0a      	ldr	r3, [pc, #40]	; (8012a98 <canardRxAccept+0x11c>)
 8012a70:	4a07      	ldr	r2, [pc, #28]	; (8012a90 <canardRxAccept+0x114>)
 8012a72:	f240 416c 	movw	r1, #1132	; 0x46c
 8012a76:	4807      	ldr	r0, [pc, #28]	; (8012a94 <canardRxAccept+0x118>)
 8012a78:	f000 f990 	bl	8012d9c <__assert_func>
 8012a7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012a80:	4618      	mov	r0, r3
 8012a82:	3738      	adds	r7, #56	; 0x38
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	080126dd 	.word	0x080126dd
 8012a8c:	08017f6c 	.word	0x08017f6c
 8012a90:	08018660 	.word	0x08018660
 8012a94:	08017798 	.word	0x08017798
 8012a98:	08017f8c 	.word	0x08017f8c

08012a9c <canardRxSubscribe>:
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b088      	sub	sp, #32
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	607b      	str	r3, [r7, #4]
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	72fb      	strb	r3, [r7, #11]
 8012aaa:	4613      	mov	r3, r2
 8012aac:	813b      	strh	r3, [r7, #8]
 8012aae:	23fe      	movs	r3, #254	; 0xfe
 8012ab0:	77fb      	strb	r3, [r7, #31]
 8012ab2:	7afb      	ldrb	r3, [r7, #11]
 8012ab4:	617b      	str	r3, [r7, #20]
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d04a      	beq.n	8012b52 <canardRxSubscribe+0xb6>
 8012abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d047      	beq.n	8012b52 <canardRxSubscribe+0xb6>
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d844      	bhi.n	8012b52 <canardRxSubscribe+0xb6>
 8012ac8:	893a      	ldrh	r2, [r7, #8]
 8012aca:	7afb      	ldrb	r3, [r7, #11]
 8012acc:	4619      	mov	r1, r3
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f000 f850 	bl	8012b74 <canardRxUnsubscribe>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	77fb      	strb	r3, [r7, #31]
 8012ad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	db38      	blt.n	8012b52 <canardRxSubscribe+0xb6>
 8012ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012ae6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	619a      	str	r2, [r3, #24]
 8012af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af2:	893a      	ldrh	r2, [r7, #8]
 8012af4:	839a      	strh	r2, [r3, #28]
 8012af6:	2300      	movs	r3, #0
 8012af8:	61bb      	str	r3, [r7, #24]
 8012afa:	e009      	b.n	8012b10 <canardRxSubscribe+0x74>
 8012afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012afe:	69bb      	ldr	r3, [r7, #24]
 8012b00:	3308      	adds	r3, #8
 8012b02:	009b      	lsls	r3, r3, #2
 8012b04:	4413      	add	r3, r2
 8012b06:	2200      	movs	r2, #0
 8012b08:	605a      	str	r2, [r3, #4]
 8012b0a:	69bb      	ldr	r3, [r7, #24]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	61bb      	str	r3, [r7, #24]
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	2b7f      	cmp	r3, #127	; 0x7f
 8012b14:	d9f2      	bls.n	8012afc <canardRxSubscribe+0x60>
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	3304      	adds	r3, #4
 8012b1a:	009b      	lsls	r3, r3, #2
 8012b1c:	68fa      	ldr	r2, [r7, #12]
 8012b1e:	18d0      	adds	r0, r2, r3
 8012b20:	4b0f      	ldr	r3, [pc, #60]	; (8012b60 <canardRxSubscribe+0xc4>)
 8012b22:	4a10      	ldr	r2, [pc, #64]	; (8012b64 <canardRxSubscribe+0xc8>)
 8012b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b26:	f7fd fff7 	bl	8010b18 <cavlSearch>
 8012b2a:	6138      	str	r0, [r7, #16]
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2e:	693a      	ldr	r2, [r7, #16]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d006      	beq.n	8012b42 <canardRxSubscribe+0xa6>
 8012b34:	4b0c      	ldr	r3, [pc, #48]	; (8012b68 <canardRxSubscribe+0xcc>)
 8012b36:	4a0d      	ldr	r2, [pc, #52]	; (8012b6c <canardRxSubscribe+0xd0>)
 8012b38:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8012b3c:	480c      	ldr	r0, [pc, #48]	; (8012b70 <canardRxSubscribe+0xd4>)
 8012b3e:	f000 f92d 	bl	8012d9c <__assert_func>
 8012b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	bfd4      	ite	le
 8012b4a:	2301      	movle	r3, #1
 8012b4c:	2300      	movgt	r3, #0
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	77fb      	strb	r3, [r7, #31]
 8012b52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b56:	4618      	mov	r0, r3
 8012b58:	3720      	adds	r7, #32
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	08010e79 	.word	0x08010e79
 8012b64:	08012725 	.word	0x08012725
 8012b68:	08017f98 	.word	0x08017f98
 8012b6c:	08018728 	.word	0x08018728
 8012b70:	08017798 	.word	0x08017798

08012b74 <canardRxUnsubscribe>:
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b088      	sub	sp, #32
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	70fb      	strb	r3, [r7, #3]
 8012b80:	4613      	mov	r3, r2
 8012b82:	803b      	strh	r3, [r7, #0]
 8012b84:	23fe      	movs	r3, #254	; 0xfe
 8012b86:	77fb      	strb	r3, [r7, #31]
 8012b88:	78fb      	ldrb	r3, [r7, #3]
 8012b8a:	617b      	str	r3, [r7, #20]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d05f      	beq.n	8012c52 <canardRxUnsubscribe+0xde>
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	2b02      	cmp	r3, #2
 8012b96:	d85c      	bhi.n	8012c52 <canardRxUnsubscribe+0xde>
 8012b98:	883b      	ldrh	r3, [r7, #0]
 8012b9a:	81fb      	strh	r3, [r7, #14]
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	3304      	adds	r3, #4
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	18d0      	adds	r0, r2, r3
 8012ba6:	f107 010e 	add.w	r1, r7, #14
 8012baa:	2300      	movs	r3, #0
 8012bac:	4a2c      	ldr	r2, [pc, #176]	; (8012c60 <canardRxUnsubscribe+0xec>)
 8012bae:	f7fd ffb3 	bl	8010b18 <cavlSearch>
 8012bb2:	6138      	str	r0, [r7, #16]
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d049      	beq.n	8012c4e <canardRxUnsubscribe+0xda>
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	3304      	adds	r3, #4
 8012bbe:	009b      	lsls	r3, r3, #2
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	693a      	ldr	r2, [r7, #16]
 8012bc6:	4611      	mov	r1, r2
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fe f823 	bl	8010c14 <cavlRemove>
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	8b9b      	ldrh	r3, [r3, #28]
 8012bd2:	883a      	ldrh	r2, [r7, #0]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d006      	beq.n	8012be6 <canardRxUnsubscribe+0x72>
 8012bd8:	4b22      	ldr	r3, [pc, #136]	; (8012c64 <canardRxUnsubscribe+0xf0>)
 8012bda:	4a23      	ldr	r2, [pc, #140]	; (8012c68 <canardRxUnsubscribe+0xf4>)
 8012bdc:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8012be0:	4822      	ldr	r0, [pc, #136]	; (8012c6c <canardRxUnsubscribe+0xf8>)
 8012be2:	f000 f8db 	bl	8012d9c <__assert_func>
 8012be6:	2301      	movs	r3, #1
 8012be8:	77fb      	strb	r3, [r7, #31]
 8012bea:	2300      	movs	r3, #0
 8012bec:	61bb      	str	r3, [r7, #24]
 8012bee:	e02a      	b.n	8012c46 <canardRxUnsubscribe+0xd2>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	68da      	ldr	r2, [r3, #12]
 8012bf4:	6939      	ldr	r1, [r7, #16]
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	3308      	adds	r3, #8
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	440b      	add	r3, r1
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d007      	beq.n	8012c14 <canardRxUnsubscribe+0xa0>
 8012c04:	6939      	ldr	r1, [r7, #16]
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	3308      	adds	r3, #8
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	440b      	add	r3, r1
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	691b      	ldr	r3, [r3, #16]
 8012c12:	e000      	b.n	8012c16 <canardRxUnsubscribe+0xa2>
 8012c14:	2300      	movs	r3, #0
 8012c16:	4619      	mov	r1, r3
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	4790      	blx	r2
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	68da      	ldr	r2, [r3, #12]
 8012c20:	6939      	ldr	r1, [r7, #16]
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	3308      	adds	r3, #8
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	440b      	add	r3, r1
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	4790      	blx	r2
 8012c32:	693a      	ldr	r2, [r7, #16]
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	3308      	adds	r3, #8
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	4413      	add	r3, r2
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	605a      	str	r2, [r3, #4]
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	3301      	adds	r3, #1
 8012c44:	61bb      	str	r3, [r7, #24]
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	2b7f      	cmp	r3, #127	; 0x7f
 8012c4a:	d9d1      	bls.n	8012bf0 <canardRxUnsubscribe+0x7c>
 8012c4c:	e001      	b.n	8012c52 <canardRxUnsubscribe+0xde>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	77fb      	strb	r3, [r7, #31]
 8012c52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c56:	4618      	mov	r0, r3
 8012c58:	3720      	adds	r7, #32
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	080126dd 	.word	0x080126dd
 8012c64:	08017fb8 	.word	0x08017fb8
 8012c68:	0801873c 	.word	0x0801873c
 8012c6c:	08017798 	.word	0x08017798

08012c70 <canardMakeFilterForSubject>:
 8012c70:	b480      	push	{r7}
 8012c72:	b085      	sub	sp, #20
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	460b      	mov	r3, r1
 8012c7a:	807b      	strh	r3, [r7, #2]
 8012c7c:	f107 0308 	add.w	r3, r7, #8
 8012c80:	2200      	movs	r2, #0
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	605a      	str	r2, [r3, #4]
 8012c86:	887b      	ldrh	r3, [r7, #2]
 8012c88:	021b      	lsls	r3, r3, #8
 8012c8a:	60bb      	str	r3, [r7, #8]
 8012c8c:	4b07      	ldr	r3, [pc, #28]	; (8012cac <canardMakeFilterForSubject+0x3c>)
 8012c8e:	60fb      	str	r3, [r7, #12]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	461a      	mov	r2, r3
 8012c94:	f107 0308 	add.w	r3, r7, #8
 8012c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012c9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	3714      	adds	r7, #20
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr
 8012cac:	021fff80 	.word	0x021fff80

08012cb0 <canardMakeFilterForServices>:
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	460b      	mov	r3, r1
 8012cba:	70fb      	strb	r3, [r7, #3]
 8012cbc:	f107 0308 	add.w	r3, r7, #8
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	601a      	str	r2, [r3, #0]
 8012cc4:	605a      	str	r2, [r3, #4]
 8012cc6:	78fb      	ldrb	r3, [r7, #3]
 8012cc8:	01db      	lsls	r3, r3, #7
 8012cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012cce:	60bb      	str	r3, [r7, #8]
 8012cd0:	4b07      	ldr	r3, [pc, #28]	; (8012cf0 <canardMakeFilterForServices+0x40>)
 8012cd2:	60fb      	str	r3, [r7, #12]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	f107 0308 	add.w	r3, r7, #8
 8012cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012ce0:	e882 0003 	stmia.w	r2, {r0, r1}
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	3714      	adds	r7, #20
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr
 8012cf0:	02803f80 	.word	0x02803f80

08012cf4 <canardConsolidateFilters>:
 8012cf4:	b480      	push	{r7}
 8012cf6:	b087      	sub	sp, #28
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
 8012d00:	f107 0310 	add.w	r3, r7, #16
 8012d04:	2200      	movs	r2, #0
 8012d06:	601a      	str	r2, [r3, #0]
 8012d08:	605a      	str	r2, [r3, #4]
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	685a      	ldr	r2, [r3, #4]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	401a      	ands	r2, r3
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	6819      	ldr	r1, [r3, #0]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	404b      	eors	r3, r1
 8012d1e:	43db      	mvns	r3, r3
 8012d20:	4013      	ands	r3, r2
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	4013      	ands	r3, r2
 8012d2c:	613b      	str	r3, [r7, #16]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	461a      	mov	r2, r3
 8012d32:	f107 0310 	add.w	r3, r7, #16
 8012d36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012d3a:	e882 0003 	stmia.w	r2, {r0, r1}
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	371c      	adds	r7, #28
 8012d42:	46bd      	mov	sp, r7
 8012d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d48:	4770      	bx	lr

08012d4a <_ZdlPvj>:
 8012d4a:	f000 b814 	b.w	8012d76 <_ZdlPv>

08012d4e <_Znwj>:
 8012d4e:	2801      	cmp	r0, #1
 8012d50:	bf38      	it	cc
 8012d52:	2001      	movcc	r0, #1
 8012d54:	b510      	push	{r4, lr}
 8012d56:	4604      	mov	r4, r0
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f000 f84f 	bl	8012dfc <malloc>
 8012d5e:	b100      	cbz	r0, 8012d62 <_Znwj+0x14>
 8012d60:	bd10      	pop	{r4, pc}
 8012d62:	f000 f80b 	bl	8012d7c <_ZSt15get_new_handlerv>
 8012d66:	b908      	cbnz	r0, 8012d6c <_Znwj+0x1e>
 8012d68:	f000 f810 	bl	8012d8c <abort>
 8012d6c:	4780      	blx	r0
 8012d6e:	e7f3      	b.n	8012d58 <_Znwj+0xa>

08012d70 <_ZSt25__throw_bad_function_callv>:
 8012d70:	b508      	push	{r3, lr}
 8012d72:	f000 f80b 	bl	8012d8c <abort>

08012d76 <_ZdlPv>:
 8012d76:	f000 b849 	b.w	8012e0c <free>
	...

08012d7c <_ZSt15get_new_handlerv>:
 8012d7c:	4b02      	ldr	r3, [pc, #8]	; (8012d88 <_ZSt15get_new_handlerv+0xc>)
 8012d7e:	6818      	ldr	r0, [r3, #0]
 8012d80:	f3bf 8f5b 	dmb	ish
 8012d84:	4770      	bx	lr
 8012d86:	bf00      	nop
 8012d88:	2000098c 	.word	0x2000098c

08012d8c <abort>:
 8012d8c:	b508      	push	{r3, lr}
 8012d8e:	2006      	movs	r0, #6
 8012d90:	f001 f90a 	bl	8013fa8 <raise>
 8012d94:	2001      	movs	r0, #1
 8012d96:	f7f6 fb2d 	bl	80093f4 <_exit>
	...

08012d9c <__assert_func>:
 8012d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d9e:	4614      	mov	r4, r2
 8012da0:	461a      	mov	r2, r3
 8012da2:	4b09      	ldr	r3, [pc, #36]	; (8012dc8 <__assert_func+0x2c>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4605      	mov	r5, r0
 8012da8:	68d8      	ldr	r0, [r3, #12]
 8012daa:	b14c      	cbz	r4, 8012dc0 <__assert_func+0x24>
 8012dac:	4b07      	ldr	r3, [pc, #28]	; (8012dcc <__assert_func+0x30>)
 8012dae:	9100      	str	r1, [sp, #0]
 8012db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012db4:	4906      	ldr	r1, [pc, #24]	; (8012dd0 <__assert_func+0x34>)
 8012db6:	462b      	mov	r3, r5
 8012db8:	f000 fff6 	bl	8013da8 <fiprintf>
 8012dbc:	f7ff ffe6 	bl	8012d8c <abort>
 8012dc0:	4b04      	ldr	r3, [pc, #16]	; (8012dd4 <__assert_func+0x38>)
 8012dc2:	461c      	mov	r4, r3
 8012dc4:	e7f3      	b.n	8012dae <__assert_func+0x12>
 8012dc6:	bf00      	nop
 8012dc8:	200000d0 	.word	0x200000d0
 8012dcc:	08018750 	.word	0x08018750
 8012dd0:	0801875d 	.word	0x0801875d
 8012dd4:	0801878b 	.word	0x0801878b

08012dd8 <exit>:
 8012dd8:	b508      	push	{r3, lr}
 8012dda:	4b06      	ldr	r3, [pc, #24]	; (8012df4 <exit+0x1c>)
 8012ddc:	4604      	mov	r4, r0
 8012dde:	b113      	cbz	r3, 8012de6 <exit+0xe>
 8012de0:	2100      	movs	r1, #0
 8012de2:	f3af 8000 	nop.w
 8012de6:	4b04      	ldr	r3, [pc, #16]	; (8012df8 <exit+0x20>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	b103      	cbz	r3, 8012dee <exit+0x16>
 8012dec:	4798      	blx	r3
 8012dee:	4620      	mov	r0, r4
 8012df0:	f7f6 fb00 	bl	80093f4 <_exit>
 8012df4:	00000000 	.word	0x00000000
 8012df8:	20000ad0 	.word	0x20000ad0

08012dfc <malloc>:
 8012dfc:	4b02      	ldr	r3, [pc, #8]	; (8012e08 <malloc+0xc>)
 8012dfe:	4601      	mov	r1, r0
 8012e00:	6818      	ldr	r0, [r3, #0]
 8012e02:	f000 b82b 	b.w	8012e5c <_malloc_r>
 8012e06:	bf00      	nop
 8012e08:	200000d0 	.word	0x200000d0

08012e0c <free>:
 8012e0c:	4b02      	ldr	r3, [pc, #8]	; (8012e18 <free+0xc>)
 8012e0e:	4601      	mov	r1, r0
 8012e10:	6818      	ldr	r0, [r3, #0]
 8012e12:	f001 bffb 	b.w	8014e0c <_free_r>
 8012e16:	bf00      	nop
 8012e18:	200000d0 	.word	0x200000d0

08012e1c <sbrk_aligned>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	4e0e      	ldr	r6, [pc, #56]	; (8012e58 <sbrk_aligned+0x3c>)
 8012e20:	460c      	mov	r4, r1
 8012e22:	6831      	ldr	r1, [r6, #0]
 8012e24:	4605      	mov	r5, r0
 8012e26:	b911      	cbnz	r1, 8012e2e <sbrk_aligned+0x12>
 8012e28:	f001 f912 	bl	8014050 <_sbrk_r>
 8012e2c:	6030      	str	r0, [r6, #0]
 8012e2e:	4621      	mov	r1, r4
 8012e30:	4628      	mov	r0, r5
 8012e32:	f001 f90d 	bl	8014050 <_sbrk_r>
 8012e36:	1c43      	adds	r3, r0, #1
 8012e38:	d00a      	beq.n	8012e50 <sbrk_aligned+0x34>
 8012e3a:	1cc4      	adds	r4, r0, #3
 8012e3c:	f024 0403 	bic.w	r4, r4, #3
 8012e40:	42a0      	cmp	r0, r4
 8012e42:	d007      	beq.n	8012e54 <sbrk_aligned+0x38>
 8012e44:	1a21      	subs	r1, r4, r0
 8012e46:	4628      	mov	r0, r5
 8012e48:	f001 f902 	bl	8014050 <_sbrk_r>
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d101      	bne.n	8012e54 <sbrk_aligned+0x38>
 8012e50:	f04f 34ff 	mov.w	r4, #4294967295
 8012e54:	4620      	mov	r0, r4
 8012e56:	bd70      	pop	{r4, r5, r6, pc}
 8012e58:	20000994 	.word	0x20000994

08012e5c <_malloc_r>:
 8012e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e60:	1ccd      	adds	r5, r1, #3
 8012e62:	f025 0503 	bic.w	r5, r5, #3
 8012e66:	3508      	adds	r5, #8
 8012e68:	2d0c      	cmp	r5, #12
 8012e6a:	bf38      	it	cc
 8012e6c:	250c      	movcc	r5, #12
 8012e6e:	2d00      	cmp	r5, #0
 8012e70:	4607      	mov	r7, r0
 8012e72:	db01      	blt.n	8012e78 <_malloc_r+0x1c>
 8012e74:	42a9      	cmp	r1, r5
 8012e76:	d905      	bls.n	8012e84 <_malloc_r+0x28>
 8012e78:	230c      	movs	r3, #12
 8012e7a:	603b      	str	r3, [r7, #0]
 8012e7c:	2600      	movs	r6, #0
 8012e7e:	4630      	mov	r0, r6
 8012e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012f58 <_malloc_r+0xfc>
 8012e88:	f000 f868 	bl	8012f5c <__malloc_lock>
 8012e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e90:	461c      	mov	r4, r3
 8012e92:	bb5c      	cbnz	r4, 8012eec <_malloc_r+0x90>
 8012e94:	4629      	mov	r1, r5
 8012e96:	4638      	mov	r0, r7
 8012e98:	f7ff ffc0 	bl	8012e1c <sbrk_aligned>
 8012e9c:	1c43      	adds	r3, r0, #1
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	d155      	bne.n	8012f4e <_malloc_r+0xf2>
 8012ea2:	f8d8 4000 	ldr.w	r4, [r8]
 8012ea6:	4626      	mov	r6, r4
 8012ea8:	2e00      	cmp	r6, #0
 8012eaa:	d145      	bne.n	8012f38 <_malloc_r+0xdc>
 8012eac:	2c00      	cmp	r4, #0
 8012eae:	d048      	beq.n	8012f42 <_malloc_r+0xe6>
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	4631      	mov	r1, r6
 8012eb4:	4638      	mov	r0, r7
 8012eb6:	eb04 0903 	add.w	r9, r4, r3
 8012eba:	f001 f8c9 	bl	8014050 <_sbrk_r>
 8012ebe:	4581      	cmp	r9, r0
 8012ec0:	d13f      	bne.n	8012f42 <_malloc_r+0xe6>
 8012ec2:	6821      	ldr	r1, [r4, #0]
 8012ec4:	1a6d      	subs	r5, r5, r1
 8012ec6:	4629      	mov	r1, r5
 8012ec8:	4638      	mov	r0, r7
 8012eca:	f7ff ffa7 	bl	8012e1c <sbrk_aligned>
 8012ece:	3001      	adds	r0, #1
 8012ed0:	d037      	beq.n	8012f42 <_malloc_r+0xe6>
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	442b      	add	r3, r5
 8012ed6:	6023      	str	r3, [r4, #0]
 8012ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d038      	beq.n	8012f52 <_malloc_r+0xf6>
 8012ee0:	685a      	ldr	r2, [r3, #4]
 8012ee2:	42a2      	cmp	r2, r4
 8012ee4:	d12b      	bne.n	8012f3e <_malloc_r+0xe2>
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	605a      	str	r2, [r3, #4]
 8012eea:	e00f      	b.n	8012f0c <_malloc_r+0xb0>
 8012eec:	6822      	ldr	r2, [r4, #0]
 8012eee:	1b52      	subs	r2, r2, r5
 8012ef0:	d41f      	bmi.n	8012f32 <_malloc_r+0xd6>
 8012ef2:	2a0b      	cmp	r2, #11
 8012ef4:	d917      	bls.n	8012f26 <_malloc_r+0xca>
 8012ef6:	1961      	adds	r1, r4, r5
 8012ef8:	42a3      	cmp	r3, r4
 8012efa:	6025      	str	r5, [r4, #0]
 8012efc:	bf18      	it	ne
 8012efe:	6059      	strne	r1, [r3, #4]
 8012f00:	6863      	ldr	r3, [r4, #4]
 8012f02:	bf08      	it	eq
 8012f04:	f8c8 1000 	streq.w	r1, [r8]
 8012f08:	5162      	str	r2, [r4, r5]
 8012f0a:	604b      	str	r3, [r1, #4]
 8012f0c:	4638      	mov	r0, r7
 8012f0e:	f104 060b 	add.w	r6, r4, #11
 8012f12:	f000 f829 	bl	8012f68 <__malloc_unlock>
 8012f16:	f026 0607 	bic.w	r6, r6, #7
 8012f1a:	1d23      	adds	r3, r4, #4
 8012f1c:	1af2      	subs	r2, r6, r3
 8012f1e:	d0ae      	beq.n	8012e7e <_malloc_r+0x22>
 8012f20:	1b9b      	subs	r3, r3, r6
 8012f22:	50a3      	str	r3, [r4, r2]
 8012f24:	e7ab      	b.n	8012e7e <_malloc_r+0x22>
 8012f26:	42a3      	cmp	r3, r4
 8012f28:	6862      	ldr	r2, [r4, #4]
 8012f2a:	d1dd      	bne.n	8012ee8 <_malloc_r+0x8c>
 8012f2c:	f8c8 2000 	str.w	r2, [r8]
 8012f30:	e7ec      	b.n	8012f0c <_malloc_r+0xb0>
 8012f32:	4623      	mov	r3, r4
 8012f34:	6864      	ldr	r4, [r4, #4]
 8012f36:	e7ac      	b.n	8012e92 <_malloc_r+0x36>
 8012f38:	4634      	mov	r4, r6
 8012f3a:	6876      	ldr	r6, [r6, #4]
 8012f3c:	e7b4      	b.n	8012ea8 <_malloc_r+0x4c>
 8012f3e:	4613      	mov	r3, r2
 8012f40:	e7cc      	b.n	8012edc <_malloc_r+0x80>
 8012f42:	230c      	movs	r3, #12
 8012f44:	603b      	str	r3, [r7, #0]
 8012f46:	4638      	mov	r0, r7
 8012f48:	f000 f80e 	bl	8012f68 <__malloc_unlock>
 8012f4c:	e797      	b.n	8012e7e <_malloc_r+0x22>
 8012f4e:	6025      	str	r5, [r4, #0]
 8012f50:	e7dc      	b.n	8012f0c <_malloc_r+0xb0>
 8012f52:	605b      	str	r3, [r3, #4]
 8012f54:	deff      	udf	#255	; 0xff
 8012f56:	bf00      	nop
 8012f58:	20000990 	.word	0x20000990

08012f5c <__malloc_lock>:
 8012f5c:	4801      	ldr	r0, [pc, #4]	; (8012f64 <__malloc_lock+0x8>)
 8012f5e:	f001 b8c4 	b.w	80140ea <__retarget_lock_acquire_recursive>
 8012f62:	bf00      	nop
 8012f64:	20000ad8 	.word	0x20000ad8

08012f68 <__malloc_unlock>:
 8012f68:	4801      	ldr	r0, [pc, #4]	; (8012f70 <__malloc_unlock+0x8>)
 8012f6a:	f001 b8bf 	b.w	80140ec <__retarget_lock_release_recursive>
 8012f6e:	bf00      	nop
 8012f70:	20000ad8 	.word	0x20000ad8

08012f74 <__cvt>:
 8012f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f78:	ec55 4b10 	vmov	r4, r5, d0
 8012f7c:	2d00      	cmp	r5, #0
 8012f7e:	460e      	mov	r6, r1
 8012f80:	4619      	mov	r1, r3
 8012f82:	462b      	mov	r3, r5
 8012f84:	bfbb      	ittet	lt
 8012f86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012f8a:	461d      	movlt	r5, r3
 8012f8c:	2300      	movge	r3, #0
 8012f8e:	232d      	movlt	r3, #45	; 0x2d
 8012f90:	700b      	strb	r3, [r1, #0]
 8012f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012f98:	4691      	mov	r9, r2
 8012f9a:	f023 0820 	bic.w	r8, r3, #32
 8012f9e:	bfbc      	itt	lt
 8012fa0:	4622      	movlt	r2, r4
 8012fa2:	4614      	movlt	r4, r2
 8012fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012fa8:	d005      	beq.n	8012fb6 <__cvt+0x42>
 8012faa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012fae:	d100      	bne.n	8012fb2 <__cvt+0x3e>
 8012fb0:	3601      	adds	r6, #1
 8012fb2:	2102      	movs	r1, #2
 8012fb4:	e000      	b.n	8012fb8 <__cvt+0x44>
 8012fb6:	2103      	movs	r1, #3
 8012fb8:	ab03      	add	r3, sp, #12
 8012fba:	9301      	str	r3, [sp, #4]
 8012fbc:	ab02      	add	r3, sp, #8
 8012fbe:	9300      	str	r3, [sp, #0]
 8012fc0:	ec45 4b10 	vmov	d0, r4, r5
 8012fc4:	4653      	mov	r3, sl
 8012fc6:	4632      	mov	r2, r6
 8012fc8:	f001 f92e 	bl	8014228 <_dtoa_r>
 8012fcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012fd0:	4607      	mov	r7, r0
 8012fd2:	d102      	bne.n	8012fda <__cvt+0x66>
 8012fd4:	f019 0f01 	tst.w	r9, #1
 8012fd8:	d022      	beq.n	8013020 <__cvt+0xac>
 8012fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012fde:	eb07 0906 	add.w	r9, r7, r6
 8012fe2:	d110      	bne.n	8013006 <__cvt+0x92>
 8012fe4:	783b      	ldrb	r3, [r7, #0]
 8012fe6:	2b30      	cmp	r3, #48	; 0x30
 8012fe8:	d10a      	bne.n	8013000 <__cvt+0x8c>
 8012fea:	2200      	movs	r2, #0
 8012fec:	2300      	movs	r3, #0
 8012fee:	4620      	mov	r0, r4
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	f7ed fd91 	bl	8000b18 <__aeabi_dcmpeq>
 8012ff6:	b918      	cbnz	r0, 8013000 <__cvt+0x8c>
 8012ff8:	f1c6 0601 	rsb	r6, r6, #1
 8012ffc:	f8ca 6000 	str.w	r6, [sl]
 8013000:	f8da 3000 	ldr.w	r3, [sl]
 8013004:	4499      	add	r9, r3
 8013006:	2200      	movs	r2, #0
 8013008:	2300      	movs	r3, #0
 801300a:	4620      	mov	r0, r4
 801300c:	4629      	mov	r1, r5
 801300e:	f7ed fd83 	bl	8000b18 <__aeabi_dcmpeq>
 8013012:	b108      	cbz	r0, 8013018 <__cvt+0xa4>
 8013014:	f8cd 900c 	str.w	r9, [sp, #12]
 8013018:	2230      	movs	r2, #48	; 0x30
 801301a:	9b03      	ldr	r3, [sp, #12]
 801301c:	454b      	cmp	r3, r9
 801301e:	d307      	bcc.n	8013030 <__cvt+0xbc>
 8013020:	9b03      	ldr	r3, [sp, #12]
 8013022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013024:	1bdb      	subs	r3, r3, r7
 8013026:	4638      	mov	r0, r7
 8013028:	6013      	str	r3, [r2, #0]
 801302a:	b004      	add	sp, #16
 801302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013030:	1c59      	adds	r1, r3, #1
 8013032:	9103      	str	r1, [sp, #12]
 8013034:	701a      	strb	r2, [r3, #0]
 8013036:	e7f0      	b.n	801301a <__cvt+0xa6>

08013038 <__exponent>:
 8013038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801303a:	4603      	mov	r3, r0
 801303c:	2900      	cmp	r1, #0
 801303e:	bfb8      	it	lt
 8013040:	4249      	neglt	r1, r1
 8013042:	f803 2b02 	strb.w	r2, [r3], #2
 8013046:	bfb4      	ite	lt
 8013048:	222d      	movlt	r2, #45	; 0x2d
 801304a:	222b      	movge	r2, #43	; 0x2b
 801304c:	2909      	cmp	r1, #9
 801304e:	7042      	strb	r2, [r0, #1]
 8013050:	dd2a      	ble.n	80130a8 <__exponent+0x70>
 8013052:	f10d 0207 	add.w	r2, sp, #7
 8013056:	4617      	mov	r7, r2
 8013058:	260a      	movs	r6, #10
 801305a:	4694      	mov	ip, r2
 801305c:	fb91 f5f6 	sdiv	r5, r1, r6
 8013060:	fb06 1415 	mls	r4, r6, r5, r1
 8013064:	3430      	adds	r4, #48	; 0x30
 8013066:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801306a:	460c      	mov	r4, r1
 801306c:	2c63      	cmp	r4, #99	; 0x63
 801306e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013072:	4629      	mov	r1, r5
 8013074:	dcf1      	bgt.n	801305a <__exponent+0x22>
 8013076:	3130      	adds	r1, #48	; 0x30
 8013078:	f1ac 0402 	sub.w	r4, ip, #2
 801307c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013080:	1c41      	adds	r1, r0, #1
 8013082:	4622      	mov	r2, r4
 8013084:	42ba      	cmp	r2, r7
 8013086:	d30a      	bcc.n	801309e <__exponent+0x66>
 8013088:	f10d 0209 	add.w	r2, sp, #9
 801308c:	eba2 020c 	sub.w	r2, r2, ip
 8013090:	42bc      	cmp	r4, r7
 8013092:	bf88      	it	hi
 8013094:	2200      	movhi	r2, #0
 8013096:	4413      	add	r3, r2
 8013098:	1a18      	subs	r0, r3, r0
 801309a:	b003      	add	sp, #12
 801309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801309e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80130a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80130a6:	e7ed      	b.n	8013084 <__exponent+0x4c>
 80130a8:	2330      	movs	r3, #48	; 0x30
 80130aa:	3130      	adds	r1, #48	; 0x30
 80130ac:	7083      	strb	r3, [r0, #2]
 80130ae:	70c1      	strb	r1, [r0, #3]
 80130b0:	1d03      	adds	r3, r0, #4
 80130b2:	e7f1      	b.n	8013098 <__exponent+0x60>

080130b4 <_printf_float>:
 80130b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130b8:	ed2d 8b02 	vpush	{d8}
 80130bc:	b08d      	sub	sp, #52	; 0x34
 80130be:	460c      	mov	r4, r1
 80130c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80130c4:	4616      	mov	r6, r2
 80130c6:	461f      	mov	r7, r3
 80130c8:	4605      	mov	r5, r0
 80130ca:	f000 ff75 	bl	8013fb8 <_localeconv_r>
 80130ce:	f8d0 a000 	ldr.w	sl, [r0]
 80130d2:	4650      	mov	r0, sl
 80130d4:	f7ed f8f4 	bl	80002c0 <strlen>
 80130d8:	2300      	movs	r3, #0
 80130da:	930a      	str	r3, [sp, #40]	; 0x28
 80130dc:	6823      	ldr	r3, [r4, #0]
 80130de:	9305      	str	r3, [sp, #20]
 80130e0:	f8d8 3000 	ldr.w	r3, [r8]
 80130e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80130e8:	3307      	adds	r3, #7
 80130ea:	f023 0307 	bic.w	r3, r3, #7
 80130ee:	f103 0208 	add.w	r2, r3, #8
 80130f2:	f8c8 2000 	str.w	r2, [r8]
 80130f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80130fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80130fe:	9307      	str	r3, [sp, #28]
 8013100:	f8cd 8018 	str.w	r8, [sp, #24]
 8013104:	ee08 0a10 	vmov	s16, r0
 8013108:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801310c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013110:	4b9e      	ldr	r3, [pc, #632]	; (801338c <_printf_float+0x2d8>)
 8013112:	f04f 32ff 	mov.w	r2, #4294967295
 8013116:	f7ed fd31 	bl	8000b7c <__aeabi_dcmpun>
 801311a:	bb88      	cbnz	r0, 8013180 <_printf_float+0xcc>
 801311c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013120:	4b9a      	ldr	r3, [pc, #616]	; (801338c <_printf_float+0x2d8>)
 8013122:	f04f 32ff 	mov.w	r2, #4294967295
 8013126:	f7ed fd0b 	bl	8000b40 <__aeabi_dcmple>
 801312a:	bb48      	cbnz	r0, 8013180 <_printf_float+0xcc>
 801312c:	2200      	movs	r2, #0
 801312e:	2300      	movs	r3, #0
 8013130:	4640      	mov	r0, r8
 8013132:	4649      	mov	r1, r9
 8013134:	f7ed fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8013138:	b110      	cbz	r0, 8013140 <_printf_float+0x8c>
 801313a:	232d      	movs	r3, #45	; 0x2d
 801313c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013140:	4a93      	ldr	r2, [pc, #588]	; (8013390 <_printf_float+0x2dc>)
 8013142:	4b94      	ldr	r3, [pc, #592]	; (8013394 <_printf_float+0x2e0>)
 8013144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013148:	bf94      	ite	ls
 801314a:	4690      	movls	r8, r2
 801314c:	4698      	movhi	r8, r3
 801314e:	2303      	movs	r3, #3
 8013150:	6123      	str	r3, [r4, #16]
 8013152:	9b05      	ldr	r3, [sp, #20]
 8013154:	f023 0304 	bic.w	r3, r3, #4
 8013158:	6023      	str	r3, [r4, #0]
 801315a:	f04f 0900 	mov.w	r9, #0
 801315e:	9700      	str	r7, [sp, #0]
 8013160:	4633      	mov	r3, r6
 8013162:	aa0b      	add	r2, sp, #44	; 0x2c
 8013164:	4621      	mov	r1, r4
 8013166:	4628      	mov	r0, r5
 8013168:	f000 f9da 	bl	8013520 <_printf_common>
 801316c:	3001      	adds	r0, #1
 801316e:	f040 8090 	bne.w	8013292 <_printf_float+0x1de>
 8013172:	f04f 30ff 	mov.w	r0, #4294967295
 8013176:	b00d      	add	sp, #52	; 0x34
 8013178:	ecbd 8b02 	vpop	{d8}
 801317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013180:	4642      	mov	r2, r8
 8013182:	464b      	mov	r3, r9
 8013184:	4640      	mov	r0, r8
 8013186:	4649      	mov	r1, r9
 8013188:	f7ed fcf8 	bl	8000b7c <__aeabi_dcmpun>
 801318c:	b140      	cbz	r0, 80131a0 <_printf_float+0xec>
 801318e:	464b      	mov	r3, r9
 8013190:	2b00      	cmp	r3, #0
 8013192:	bfbc      	itt	lt
 8013194:	232d      	movlt	r3, #45	; 0x2d
 8013196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801319a:	4a7f      	ldr	r2, [pc, #508]	; (8013398 <_printf_float+0x2e4>)
 801319c:	4b7f      	ldr	r3, [pc, #508]	; (801339c <_printf_float+0x2e8>)
 801319e:	e7d1      	b.n	8013144 <_printf_float+0x90>
 80131a0:	6863      	ldr	r3, [r4, #4]
 80131a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80131a6:	9206      	str	r2, [sp, #24]
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	d13f      	bne.n	801322c <_printf_float+0x178>
 80131ac:	2306      	movs	r3, #6
 80131ae:	6063      	str	r3, [r4, #4]
 80131b0:	9b05      	ldr	r3, [sp, #20]
 80131b2:	6861      	ldr	r1, [r4, #4]
 80131b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80131b8:	2300      	movs	r3, #0
 80131ba:	9303      	str	r3, [sp, #12]
 80131bc:	ab0a      	add	r3, sp, #40	; 0x28
 80131be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80131c2:	ab09      	add	r3, sp, #36	; 0x24
 80131c4:	ec49 8b10 	vmov	d0, r8, r9
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	6022      	str	r2, [r4, #0]
 80131cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80131d0:	4628      	mov	r0, r5
 80131d2:	f7ff fecf 	bl	8012f74 <__cvt>
 80131d6:	9b06      	ldr	r3, [sp, #24]
 80131d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131da:	2b47      	cmp	r3, #71	; 0x47
 80131dc:	4680      	mov	r8, r0
 80131de:	d108      	bne.n	80131f2 <_printf_float+0x13e>
 80131e0:	1cc8      	adds	r0, r1, #3
 80131e2:	db02      	blt.n	80131ea <_printf_float+0x136>
 80131e4:	6863      	ldr	r3, [r4, #4]
 80131e6:	4299      	cmp	r1, r3
 80131e8:	dd41      	ble.n	801326e <_printf_float+0x1ba>
 80131ea:	f1ab 0302 	sub.w	r3, fp, #2
 80131ee:	fa5f fb83 	uxtb.w	fp, r3
 80131f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80131f6:	d820      	bhi.n	801323a <_printf_float+0x186>
 80131f8:	3901      	subs	r1, #1
 80131fa:	465a      	mov	r2, fp
 80131fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013200:	9109      	str	r1, [sp, #36]	; 0x24
 8013202:	f7ff ff19 	bl	8013038 <__exponent>
 8013206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013208:	1813      	adds	r3, r2, r0
 801320a:	2a01      	cmp	r2, #1
 801320c:	4681      	mov	r9, r0
 801320e:	6123      	str	r3, [r4, #16]
 8013210:	dc02      	bgt.n	8013218 <_printf_float+0x164>
 8013212:	6822      	ldr	r2, [r4, #0]
 8013214:	07d2      	lsls	r2, r2, #31
 8013216:	d501      	bpl.n	801321c <_printf_float+0x168>
 8013218:	3301      	adds	r3, #1
 801321a:	6123      	str	r3, [r4, #16]
 801321c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013220:	2b00      	cmp	r3, #0
 8013222:	d09c      	beq.n	801315e <_printf_float+0xaa>
 8013224:	232d      	movs	r3, #45	; 0x2d
 8013226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801322a:	e798      	b.n	801315e <_printf_float+0xaa>
 801322c:	9a06      	ldr	r2, [sp, #24]
 801322e:	2a47      	cmp	r2, #71	; 0x47
 8013230:	d1be      	bne.n	80131b0 <_printf_float+0xfc>
 8013232:	2b00      	cmp	r3, #0
 8013234:	d1bc      	bne.n	80131b0 <_printf_float+0xfc>
 8013236:	2301      	movs	r3, #1
 8013238:	e7b9      	b.n	80131ae <_printf_float+0xfa>
 801323a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801323e:	d118      	bne.n	8013272 <_printf_float+0x1be>
 8013240:	2900      	cmp	r1, #0
 8013242:	6863      	ldr	r3, [r4, #4]
 8013244:	dd0b      	ble.n	801325e <_printf_float+0x1aa>
 8013246:	6121      	str	r1, [r4, #16]
 8013248:	b913      	cbnz	r3, 8013250 <_printf_float+0x19c>
 801324a:	6822      	ldr	r2, [r4, #0]
 801324c:	07d0      	lsls	r0, r2, #31
 801324e:	d502      	bpl.n	8013256 <_printf_float+0x1a2>
 8013250:	3301      	adds	r3, #1
 8013252:	440b      	add	r3, r1
 8013254:	6123      	str	r3, [r4, #16]
 8013256:	65a1      	str	r1, [r4, #88]	; 0x58
 8013258:	f04f 0900 	mov.w	r9, #0
 801325c:	e7de      	b.n	801321c <_printf_float+0x168>
 801325e:	b913      	cbnz	r3, 8013266 <_printf_float+0x1b2>
 8013260:	6822      	ldr	r2, [r4, #0]
 8013262:	07d2      	lsls	r2, r2, #31
 8013264:	d501      	bpl.n	801326a <_printf_float+0x1b6>
 8013266:	3302      	adds	r3, #2
 8013268:	e7f4      	b.n	8013254 <_printf_float+0x1a0>
 801326a:	2301      	movs	r3, #1
 801326c:	e7f2      	b.n	8013254 <_printf_float+0x1a0>
 801326e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013274:	4299      	cmp	r1, r3
 8013276:	db05      	blt.n	8013284 <_printf_float+0x1d0>
 8013278:	6823      	ldr	r3, [r4, #0]
 801327a:	6121      	str	r1, [r4, #16]
 801327c:	07d8      	lsls	r0, r3, #31
 801327e:	d5ea      	bpl.n	8013256 <_printf_float+0x1a2>
 8013280:	1c4b      	adds	r3, r1, #1
 8013282:	e7e7      	b.n	8013254 <_printf_float+0x1a0>
 8013284:	2900      	cmp	r1, #0
 8013286:	bfd4      	ite	le
 8013288:	f1c1 0202 	rsble	r2, r1, #2
 801328c:	2201      	movgt	r2, #1
 801328e:	4413      	add	r3, r2
 8013290:	e7e0      	b.n	8013254 <_printf_float+0x1a0>
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	055a      	lsls	r2, r3, #21
 8013296:	d407      	bmi.n	80132a8 <_printf_float+0x1f4>
 8013298:	6923      	ldr	r3, [r4, #16]
 801329a:	4642      	mov	r2, r8
 801329c:	4631      	mov	r1, r6
 801329e:	4628      	mov	r0, r5
 80132a0:	47b8      	blx	r7
 80132a2:	3001      	adds	r0, #1
 80132a4:	d12c      	bne.n	8013300 <_printf_float+0x24c>
 80132a6:	e764      	b.n	8013172 <_printf_float+0xbe>
 80132a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80132ac:	f240 80e0 	bls.w	8013470 <_printf_float+0x3bc>
 80132b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80132b4:	2200      	movs	r2, #0
 80132b6:	2300      	movs	r3, #0
 80132b8:	f7ed fc2e 	bl	8000b18 <__aeabi_dcmpeq>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d034      	beq.n	801332a <_printf_float+0x276>
 80132c0:	4a37      	ldr	r2, [pc, #220]	; (80133a0 <_printf_float+0x2ec>)
 80132c2:	2301      	movs	r3, #1
 80132c4:	4631      	mov	r1, r6
 80132c6:	4628      	mov	r0, r5
 80132c8:	47b8      	blx	r7
 80132ca:	3001      	adds	r0, #1
 80132cc:	f43f af51 	beq.w	8013172 <_printf_float+0xbe>
 80132d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132d4:	429a      	cmp	r2, r3
 80132d6:	db02      	blt.n	80132de <_printf_float+0x22a>
 80132d8:	6823      	ldr	r3, [r4, #0]
 80132da:	07d8      	lsls	r0, r3, #31
 80132dc:	d510      	bpl.n	8013300 <_printf_float+0x24c>
 80132de:	ee18 3a10 	vmov	r3, s16
 80132e2:	4652      	mov	r2, sl
 80132e4:	4631      	mov	r1, r6
 80132e6:	4628      	mov	r0, r5
 80132e8:	47b8      	blx	r7
 80132ea:	3001      	adds	r0, #1
 80132ec:	f43f af41 	beq.w	8013172 <_printf_float+0xbe>
 80132f0:	f04f 0800 	mov.w	r8, #0
 80132f4:	f104 091a 	add.w	r9, r4, #26
 80132f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132fa:	3b01      	subs	r3, #1
 80132fc:	4543      	cmp	r3, r8
 80132fe:	dc09      	bgt.n	8013314 <_printf_float+0x260>
 8013300:	6823      	ldr	r3, [r4, #0]
 8013302:	079b      	lsls	r3, r3, #30
 8013304:	f100 8107 	bmi.w	8013516 <_printf_float+0x462>
 8013308:	68e0      	ldr	r0, [r4, #12]
 801330a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801330c:	4298      	cmp	r0, r3
 801330e:	bfb8      	it	lt
 8013310:	4618      	movlt	r0, r3
 8013312:	e730      	b.n	8013176 <_printf_float+0xc2>
 8013314:	2301      	movs	r3, #1
 8013316:	464a      	mov	r2, r9
 8013318:	4631      	mov	r1, r6
 801331a:	4628      	mov	r0, r5
 801331c:	47b8      	blx	r7
 801331e:	3001      	adds	r0, #1
 8013320:	f43f af27 	beq.w	8013172 <_printf_float+0xbe>
 8013324:	f108 0801 	add.w	r8, r8, #1
 8013328:	e7e6      	b.n	80132f8 <_printf_float+0x244>
 801332a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801332c:	2b00      	cmp	r3, #0
 801332e:	dc39      	bgt.n	80133a4 <_printf_float+0x2f0>
 8013330:	4a1b      	ldr	r2, [pc, #108]	; (80133a0 <_printf_float+0x2ec>)
 8013332:	2301      	movs	r3, #1
 8013334:	4631      	mov	r1, r6
 8013336:	4628      	mov	r0, r5
 8013338:	47b8      	blx	r7
 801333a:	3001      	adds	r0, #1
 801333c:	f43f af19 	beq.w	8013172 <_printf_float+0xbe>
 8013340:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013344:	4313      	orrs	r3, r2
 8013346:	d102      	bne.n	801334e <_printf_float+0x29a>
 8013348:	6823      	ldr	r3, [r4, #0]
 801334a:	07d9      	lsls	r1, r3, #31
 801334c:	d5d8      	bpl.n	8013300 <_printf_float+0x24c>
 801334e:	ee18 3a10 	vmov	r3, s16
 8013352:	4652      	mov	r2, sl
 8013354:	4631      	mov	r1, r6
 8013356:	4628      	mov	r0, r5
 8013358:	47b8      	blx	r7
 801335a:	3001      	adds	r0, #1
 801335c:	f43f af09 	beq.w	8013172 <_printf_float+0xbe>
 8013360:	f04f 0900 	mov.w	r9, #0
 8013364:	f104 0a1a 	add.w	sl, r4, #26
 8013368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801336a:	425b      	negs	r3, r3
 801336c:	454b      	cmp	r3, r9
 801336e:	dc01      	bgt.n	8013374 <_printf_float+0x2c0>
 8013370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013372:	e792      	b.n	801329a <_printf_float+0x1e6>
 8013374:	2301      	movs	r3, #1
 8013376:	4652      	mov	r2, sl
 8013378:	4631      	mov	r1, r6
 801337a:	4628      	mov	r0, r5
 801337c:	47b8      	blx	r7
 801337e:	3001      	adds	r0, #1
 8013380:	f43f aef7 	beq.w	8013172 <_printf_float+0xbe>
 8013384:	f109 0901 	add.w	r9, r9, #1
 8013388:	e7ee      	b.n	8013368 <_printf_float+0x2b4>
 801338a:	bf00      	nop
 801338c:	7fefffff 	.word	0x7fefffff
 8013390:	0801878c 	.word	0x0801878c
 8013394:	08018790 	.word	0x08018790
 8013398:	08018794 	.word	0x08018794
 801339c:	08018798 	.word	0x08018798
 80133a0:	0801879c 	.word	0x0801879c
 80133a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80133a8:	429a      	cmp	r2, r3
 80133aa:	bfa8      	it	ge
 80133ac:	461a      	movge	r2, r3
 80133ae:	2a00      	cmp	r2, #0
 80133b0:	4691      	mov	r9, r2
 80133b2:	dc37      	bgt.n	8013424 <_printf_float+0x370>
 80133b4:	f04f 0b00 	mov.w	fp, #0
 80133b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80133bc:	f104 021a 	add.w	r2, r4, #26
 80133c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80133c2:	9305      	str	r3, [sp, #20]
 80133c4:	eba3 0309 	sub.w	r3, r3, r9
 80133c8:	455b      	cmp	r3, fp
 80133ca:	dc33      	bgt.n	8013434 <_printf_float+0x380>
 80133cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133d0:	429a      	cmp	r2, r3
 80133d2:	db3b      	blt.n	801344c <_printf_float+0x398>
 80133d4:	6823      	ldr	r3, [r4, #0]
 80133d6:	07da      	lsls	r2, r3, #31
 80133d8:	d438      	bmi.n	801344c <_printf_float+0x398>
 80133da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80133de:	eba2 0903 	sub.w	r9, r2, r3
 80133e2:	9b05      	ldr	r3, [sp, #20]
 80133e4:	1ad2      	subs	r2, r2, r3
 80133e6:	4591      	cmp	r9, r2
 80133e8:	bfa8      	it	ge
 80133ea:	4691      	movge	r9, r2
 80133ec:	f1b9 0f00 	cmp.w	r9, #0
 80133f0:	dc35      	bgt.n	801345e <_printf_float+0x3aa>
 80133f2:	f04f 0800 	mov.w	r8, #0
 80133f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80133fa:	f104 0a1a 	add.w	sl, r4, #26
 80133fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013402:	1a9b      	subs	r3, r3, r2
 8013404:	eba3 0309 	sub.w	r3, r3, r9
 8013408:	4543      	cmp	r3, r8
 801340a:	f77f af79 	ble.w	8013300 <_printf_float+0x24c>
 801340e:	2301      	movs	r3, #1
 8013410:	4652      	mov	r2, sl
 8013412:	4631      	mov	r1, r6
 8013414:	4628      	mov	r0, r5
 8013416:	47b8      	blx	r7
 8013418:	3001      	adds	r0, #1
 801341a:	f43f aeaa 	beq.w	8013172 <_printf_float+0xbe>
 801341e:	f108 0801 	add.w	r8, r8, #1
 8013422:	e7ec      	b.n	80133fe <_printf_float+0x34a>
 8013424:	4613      	mov	r3, r2
 8013426:	4631      	mov	r1, r6
 8013428:	4642      	mov	r2, r8
 801342a:	4628      	mov	r0, r5
 801342c:	47b8      	blx	r7
 801342e:	3001      	adds	r0, #1
 8013430:	d1c0      	bne.n	80133b4 <_printf_float+0x300>
 8013432:	e69e      	b.n	8013172 <_printf_float+0xbe>
 8013434:	2301      	movs	r3, #1
 8013436:	4631      	mov	r1, r6
 8013438:	4628      	mov	r0, r5
 801343a:	9205      	str	r2, [sp, #20]
 801343c:	47b8      	blx	r7
 801343e:	3001      	adds	r0, #1
 8013440:	f43f ae97 	beq.w	8013172 <_printf_float+0xbe>
 8013444:	9a05      	ldr	r2, [sp, #20]
 8013446:	f10b 0b01 	add.w	fp, fp, #1
 801344a:	e7b9      	b.n	80133c0 <_printf_float+0x30c>
 801344c:	ee18 3a10 	vmov	r3, s16
 8013450:	4652      	mov	r2, sl
 8013452:	4631      	mov	r1, r6
 8013454:	4628      	mov	r0, r5
 8013456:	47b8      	blx	r7
 8013458:	3001      	adds	r0, #1
 801345a:	d1be      	bne.n	80133da <_printf_float+0x326>
 801345c:	e689      	b.n	8013172 <_printf_float+0xbe>
 801345e:	9a05      	ldr	r2, [sp, #20]
 8013460:	464b      	mov	r3, r9
 8013462:	4442      	add	r2, r8
 8013464:	4631      	mov	r1, r6
 8013466:	4628      	mov	r0, r5
 8013468:	47b8      	blx	r7
 801346a:	3001      	adds	r0, #1
 801346c:	d1c1      	bne.n	80133f2 <_printf_float+0x33e>
 801346e:	e680      	b.n	8013172 <_printf_float+0xbe>
 8013470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013472:	2a01      	cmp	r2, #1
 8013474:	dc01      	bgt.n	801347a <_printf_float+0x3c6>
 8013476:	07db      	lsls	r3, r3, #31
 8013478:	d53a      	bpl.n	80134f0 <_printf_float+0x43c>
 801347a:	2301      	movs	r3, #1
 801347c:	4642      	mov	r2, r8
 801347e:	4631      	mov	r1, r6
 8013480:	4628      	mov	r0, r5
 8013482:	47b8      	blx	r7
 8013484:	3001      	adds	r0, #1
 8013486:	f43f ae74 	beq.w	8013172 <_printf_float+0xbe>
 801348a:	ee18 3a10 	vmov	r3, s16
 801348e:	4652      	mov	r2, sl
 8013490:	4631      	mov	r1, r6
 8013492:	4628      	mov	r0, r5
 8013494:	47b8      	blx	r7
 8013496:	3001      	adds	r0, #1
 8013498:	f43f ae6b 	beq.w	8013172 <_printf_float+0xbe>
 801349c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134a0:	2200      	movs	r2, #0
 80134a2:	2300      	movs	r3, #0
 80134a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80134a8:	f7ed fb36 	bl	8000b18 <__aeabi_dcmpeq>
 80134ac:	b9d8      	cbnz	r0, 80134e6 <_printf_float+0x432>
 80134ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80134b2:	f108 0201 	add.w	r2, r8, #1
 80134b6:	4631      	mov	r1, r6
 80134b8:	4628      	mov	r0, r5
 80134ba:	47b8      	blx	r7
 80134bc:	3001      	adds	r0, #1
 80134be:	d10e      	bne.n	80134de <_printf_float+0x42a>
 80134c0:	e657      	b.n	8013172 <_printf_float+0xbe>
 80134c2:	2301      	movs	r3, #1
 80134c4:	4652      	mov	r2, sl
 80134c6:	4631      	mov	r1, r6
 80134c8:	4628      	mov	r0, r5
 80134ca:	47b8      	blx	r7
 80134cc:	3001      	adds	r0, #1
 80134ce:	f43f ae50 	beq.w	8013172 <_printf_float+0xbe>
 80134d2:	f108 0801 	add.w	r8, r8, #1
 80134d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d8:	3b01      	subs	r3, #1
 80134da:	4543      	cmp	r3, r8
 80134dc:	dcf1      	bgt.n	80134c2 <_printf_float+0x40e>
 80134de:	464b      	mov	r3, r9
 80134e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80134e4:	e6da      	b.n	801329c <_printf_float+0x1e8>
 80134e6:	f04f 0800 	mov.w	r8, #0
 80134ea:	f104 0a1a 	add.w	sl, r4, #26
 80134ee:	e7f2      	b.n	80134d6 <_printf_float+0x422>
 80134f0:	2301      	movs	r3, #1
 80134f2:	4642      	mov	r2, r8
 80134f4:	e7df      	b.n	80134b6 <_printf_float+0x402>
 80134f6:	2301      	movs	r3, #1
 80134f8:	464a      	mov	r2, r9
 80134fa:	4631      	mov	r1, r6
 80134fc:	4628      	mov	r0, r5
 80134fe:	47b8      	blx	r7
 8013500:	3001      	adds	r0, #1
 8013502:	f43f ae36 	beq.w	8013172 <_printf_float+0xbe>
 8013506:	f108 0801 	add.w	r8, r8, #1
 801350a:	68e3      	ldr	r3, [r4, #12]
 801350c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801350e:	1a5b      	subs	r3, r3, r1
 8013510:	4543      	cmp	r3, r8
 8013512:	dcf0      	bgt.n	80134f6 <_printf_float+0x442>
 8013514:	e6f8      	b.n	8013308 <_printf_float+0x254>
 8013516:	f04f 0800 	mov.w	r8, #0
 801351a:	f104 0919 	add.w	r9, r4, #25
 801351e:	e7f4      	b.n	801350a <_printf_float+0x456>

08013520 <_printf_common>:
 8013520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013524:	4616      	mov	r6, r2
 8013526:	4699      	mov	r9, r3
 8013528:	688a      	ldr	r2, [r1, #8]
 801352a:	690b      	ldr	r3, [r1, #16]
 801352c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013530:	4293      	cmp	r3, r2
 8013532:	bfb8      	it	lt
 8013534:	4613      	movlt	r3, r2
 8013536:	6033      	str	r3, [r6, #0]
 8013538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801353c:	4607      	mov	r7, r0
 801353e:	460c      	mov	r4, r1
 8013540:	b10a      	cbz	r2, 8013546 <_printf_common+0x26>
 8013542:	3301      	adds	r3, #1
 8013544:	6033      	str	r3, [r6, #0]
 8013546:	6823      	ldr	r3, [r4, #0]
 8013548:	0699      	lsls	r1, r3, #26
 801354a:	bf42      	ittt	mi
 801354c:	6833      	ldrmi	r3, [r6, #0]
 801354e:	3302      	addmi	r3, #2
 8013550:	6033      	strmi	r3, [r6, #0]
 8013552:	6825      	ldr	r5, [r4, #0]
 8013554:	f015 0506 	ands.w	r5, r5, #6
 8013558:	d106      	bne.n	8013568 <_printf_common+0x48>
 801355a:	f104 0a19 	add.w	sl, r4, #25
 801355e:	68e3      	ldr	r3, [r4, #12]
 8013560:	6832      	ldr	r2, [r6, #0]
 8013562:	1a9b      	subs	r3, r3, r2
 8013564:	42ab      	cmp	r3, r5
 8013566:	dc26      	bgt.n	80135b6 <_printf_common+0x96>
 8013568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801356c:	1e13      	subs	r3, r2, #0
 801356e:	6822      	ldr	r2, [r4, #0]
 8013570:	bf18      	it	ne
 8013572:	2301      	movne	r3, #1
 8013574:	0692      	lsls	r2, r2, #26
 8013576:	d42b      	bmi.n	80135d0 <_printf_common+0xb0>
 8013578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801357c:	4649      	mov	r1, r9
 801357e:	4638      	mov	r0, r7
 8013580:	47c0      	blx	r8
 8013582:	3001      	adds	r0, #1
 8013584:	d01e      	beq.n	80135c4 <_printf_common+0xa4>
 8013586:	6823      	ldr	r3, [r4, #0]
 8013588:	6922      	ldr	r2, [r4, #16]
 801358a:	f003 0306 	and.w	r3, r3, #6
 801358e:	2b04      	cmp	r3, #4
 8013590:	bf02      	ittt	eq
 8013592:	68e5      	ldreq	r5, [r4, #12]
 8013594:	6833      	ldreq	r3, [r6, #0]
 8013596:	1aed      	subeq	r5, r5, r3
 8013598:	68a3      	ldr	r3, [r4, #8]
 801359a:	bf0c      	ite	eq
 801359c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80135a0:	2500      	movne	r5, #0
 80135a2:	4293      	cmp	r3, r2
 80135a4:	bfc4      	itt	gt
 80135a6:	1a9b      	subgt	r3, r3, r2
 80135a8:	18ed      	addgt	r5, r5, r3
 80135aa:	2600      	movs	r6, #0
 80135ac:	341a      	adds	r4, #26
 80135ae:	42b5      	cmp	r5, r6
 80135b0:	d11a      	bne.n	80135e8 <_printf_common+0xc8>
 80135b2:	2000      	movs	r0, #0
 80135b4:	e008      	b.n	80135c8 <_printf_common+0xa8>
 80135b6:	2301      	movs	r3, #1
 80135b8:	4652      	mov	r2, sl
 80135ba:	4649      	mov	r1, r9
 80135bc:	4638      	mov	r0, r7
 80135be:	47c0      	blx	r8
 80135c0:	3001      	adds	r0, #1
 80135c2:	d103      	bne.n	80135cc <_printf_common+0xac>
 80135c4:	f04f 30ff 	mov.w	r0, #4294967295
 80135c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135cc:	3501      	adds	r5, #1
 80135ce:	e7c6      	b.n	801355e <_printf_common+0x3e>
 80135d0:	18e1      	adds	r1, r4, r3
 80135d2:	1c5a      	adds	r2, r3, #1
 80135d4:	2030      	movs	r0, #48	; 0x30
 80135d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80135da:	4422      	add	r2, r4
 80135dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80135e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80135e4:	3302      	adds	r3, #2
 80135e6:	e7c7      	b.n	8013578 <_printf_common+0x58>
 80135e8:	2301      	movs	r3, #1
 80135ea:	4622      	mov	r2, r4
 80135ec:	4649      	mov	r1, r9
 80135ee:	4638      	mov	r0, r7
 80135f0:	47c0      	blx	r8
 80135f2:	3001      	adds	r0, #1
 80135f4:	d0e6      	beq.n	80135c4 <_printf_common+0xa4>
 80135f6:	3601      	adds	r6, #1
 80135f8:	e7d9      	b.n	80135ae <_printf_common+0x8e>
	...

080135fc <_printf_i>:
 80135fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013600:	7e0f      	ldrb	r7, [r1, #24]
 8013602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013604:	2f78      	cmp	r7, #120	; 0x78
 8013606:	4691      	mov	r9, r2
 8013608:	4680      	mov	r8, r0
 801360a:	460c      	mov	r4, r1
 801360c:	469a      	mov	sl, r3
 801360e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013612:	d807      	bhi.n	8013624 <_printf_i+0x28>
 8013614:	2f62      	cmp	r7, #98	; 0x62
 8013616:	d80a      	bhi.n	801362e <_printf_i+0x32>
 8013618:	2f00      	cmp	r7, #0
 801361a:	f000 80d4 	beq.w	80137c6 <_printf_i+0x1ca>
 801361e:	2f58      	cmp	r7, #88	; 0x58
 8013620:	f000 80c0 	beq.w	80137a4 <_printf_i+0x1a8>
 8013624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801362c:	e03a      	b.n	80136a4 <_printf_i+0xa8>
 801362e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013632:	2b15      	cmp	r3, #21
 8013634:	d8f6      	bhi.n	8013624 <_printf_i+0x28>
 8013636:	a101      	add	r1, pc, #4	; (adr r1, 801363c <_printf_i+0x40>)
 8013638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801363c:	08013695 	.word	0x08013695
 8013640:	080136a9 	.word	0x080136a9
 8013644:	08013625 	.word	0x08013625
 8013648:	08013625 	.word	0x08013625
 801364c:	08013625 	.word	0x08013625
 8013650:	08013625 	.word	0x08013625
 8013654:	080136a9 	.word	0x080136a9
 8013658:	08013625 	.word	0x08013625
 801365c:	08013625 	.word	0x08013625
 8013660:	08013625 	.word	0x08013625
 8013664:	08013625 	.word	0x08013625
 8013668:	080137ad 	.word	0x080137ad
 801366c:	080136d5 	.word	0x080136d5
 8013670:	08013767 	.word	0x08013767
 8013674:	08013625 	.word	0x08013625
 8013678:	08013625 	.word	0x08013625
 801367c:	080137cf 	.word	0x080137cf
 8013680:	08013625 	.word	0x08013625
 8013684:	080136d5 	.word	0x080136d5
 8013688:	08013625 	.word	0x08013625
 801368c:	08013625 	.word	0x08013625
 8013690:	0801376f 	.word	0x0801376f
 8013694:	682b      	ldr	r3, [r5, #0]
 8013696:	1d1a      	adds	r2, r3, #4
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	602a      	str	r2, [r5, #0]
 801369c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136a4:	2301      	movs	r3, #1
 80136a6:	e09f      	b.n	80137e8 <_printf_i+0x1ec>
 80136a8:	6820      	ldr	r0, [r4, #0]
 80136aa:	682b      	ldr	r3, [r5, #0]
 80136ac:	0607      	lsls	r7, r0, #24
 80136ae:	f103 0104 	add.w	r1, r3, #4
 80136b2:	6029      	str	r1, [r5, #0]
 80136b4:	d501      	bpl.n	80136ba <_printf_i+0xbe>
 80136b6:	681e      	ldr	r6, [r3, #0]
 80136b8:	e003      	b.n	80136c2 <_printf_i+0xc6>
 80136ba:	0646      	lsls	r6, r0, #25
 80136bc:	d5fb      	bpl.n	80136b6 <_printf_i+0xba>
 80136be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80136c2:	2e00      	cmp	r6, #0
 80136c4:	da03      	bge.n	80136ce <_printf_i+0xd2>
 80136c6:	232d      	movs	r3, #45	; 0x2d
 80136c8:	4276      	negs	r6, r6
 80136ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136ce:	485a      	ldr	r0, [pc, #360]	; (8013838 <_printf_i+0x23c>)
 80136d0:	230a      	movs	r3, #10
 80136d2:	e012      	b.n	80136fa <_printf_i+0xfe>
 80136d4:	682b      	ldr	r3, [r5, #0]
 80136d6:	6820      	ldr	r0, [r4, #0]
 80136d8:	1d19      	adds	r1, r3, #4
 80136da:	6029      	str	r1, [r5, #0]
 80136dc:	0605      	lsls	r5, r0, #24
 80136de:	d501      	bpl.n	80136e4 <_printf_i+0xe8>
 80136e0:	681e      	ldr	r6, [r3, #0]
 80136e2:	e002      	b.n	80136ea <_printf_i+0xee>
 80136e4:	0641      	lsls	r1, r0, #25
 80136e6:	d5fb      	bpl.n	80136e0 <_printf_i+0xe4>
 80136e8:	881e      	ldrh	r6, [r3, #0]
 80136ea:	4853      	ldr	r0, [pc, #332]	; (8013838 <_printf_i+0x23c>)
 80136ec:	2f6f      	cmp	r7, #111	; 0x6f
 80136ee:	bf0c      	ite	eq
 80136f0:	2308      	moveq	r3, #8
 80136f2:	230a      	movne	r3, #10
 80136f4:	2100      	movs	r1, #0
 80136f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80136fa:	6865      	ldr	r5, [r4, #4]
 80136fc:	60a5      	str	r5, [r4, #8]
 80136fe:	2d00      	cmp	r5, #0
 8013700:	bfa2      	ittt	ge
 8013702:	6821      	ldrge	r1, [r4, #0]
 8013704:	f021 0104 	bicge.w	r1, r1, #4
 8013708:	6021      	strge	r1, [r4, #0]
 801370a:	b90e      	cbnz	r6, 8013710 <_printf_i+0x114>
 801370c:	2d00      	cmp	r5, #0
 801370e:	d04b      	beq.n	80137a8 <_printf_i+0x1ac>
 8013710:	4615      	mov	r5, r2
 8013712:	fbb6 f1f3 	udiv	r1, r6, r3
 8013716:	fb03 6711 	mls	r7, r3, r1, r6
 801371a:	5dc7      	ldrb	r7, [r0, r7]
 801371c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013720:	4637      	mov	r7, r6
 8013722:	42bb      	cmp	r3, r7
 8013724:	460e      	mov	r6, r1
 8013726:	d9f4      	bls.n	8013712 <_printf_i+0x116>
 8013728:	2b08      	cmp	r3, #8
 801372a:	d10b      	bne.n	8013744 <_printf_i+0x148>
 801372c:	6823      	ldr	r3, [r4, #0]
 801372e:	07de      	lsls	r6, r3, #31
 8013730:	d508      	bpl.n	8013744 <_printf_i+0x148>
 8013732:	6923      	ldr	r3, [r4, #16]
 8013734:	6861      	ldr	r1, [r4, #4]
 8013736:	4299      	cmp	r1, r3
 8013738:	bfde      	ittt	le
 801373a:	2330      	movle	r3, #48	; 0x30
 801373c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013740:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013744:	1b52      	subs	r2, r2, r5
 8013746:	6122      	str	r2, [r4, #16]
 8013748:	f8cd a000 	str.w	sl, [sp]
 801374c:	464b      	mov	r3, r9
 801374e:	aa03      	add	r2, sp, #12
 8013750:	4621      	mov	r1, r4
 8013752:	4640      	mov	r0, r8
 8013754:	f7ff fee4 	bl	8013520 <_printf_common>
 8013758:	3001      	adds	r0, #1
 801375a:	d14a      	bne.n	80137f2 <_printf_i+0x1f6>
 801375c:	f04f 30ff 	mov.w	r0, #4294967295
 8013760:	b004      	add	sp, #16
 8013762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013766:	6823      	ldr	r3, [r4, #0]
 8013768:	f043 0320 	orr.w	r3, r3, #32
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	4833      	ldr	r0, [pc, #204]	; (801383c <_printf_i+0x240>)
 8013770:	2778      	movs	r7, #120	; 0x78
 8013772:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013776:	6823      	ldr	r3, [r4, #0]
 8013778:	6829      	ldr	r1, [r5, #0]
 801377a:	061f      	lsls	r7, r3, #24
 801377c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013780:	d402      	bmi.n	8013788 <_printf_i+0x18c>
 8013782:	065f      	lsls	r7, r3, #25
 8013784:	bf48      	it	mi
 8013786:	b2b6      	uxthmi	r6, r6
 8013788:	07df      	lsls	r7, r3, #31
 801378a:	bf48      	it	mi
 801378c:	f043 0320 	orrmi.w	r3, r3, #32
 8013790:	6029      	str	r1, [r5, #0]
 8013792:	bf48      	it	mi
 8013794:	6023      	strmi	r3, [r4, #0]
 8013796:	b91e      	cbnz	r6, 80137a0 <_printf_i+0x1a4>
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	f023 0320 	bic.w	r3, r3, #32
 801379e:	6023      	str	r3, [r4, #0]
 80137a0:	2310      	movs	r3, #16
 80137a2:	e7a7      	b.n	80136f4 <_printf_i+0xf8>
 80137a4:	4824      	ldr	r0, [pc, #144]	; (8013838 <_printf_i+0x23c>)
 80137a6:	e7e4      	b.n	8013772 <_printf_i+0x176>
 80137a8:	4615      	mov	r5, r2
 80137aa:	e7bd      	b.n	8013728 <_printf_i+0x12c>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	6826      	ldr	r6, [r4, #0]
 80137b0:	6961      	ldr	r1, [r4, #20]
 80137b2:	1d18      	adds	r0, r3, #4
 80137b4:	6028      	str	r0, [r5, #0]
 80137b6:	0635      	lsls	r5, r6, #24
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	d501      	bpl.n	80137c0 <_printf_i+0x1c4>
 80137bc:	6019      	str	r1, [r3, #0]
 80137be:	e002      	b.n	80137c6 <_printf_i+0x1ca>
 80137c0:	0670      	lsls	r0, r6, #25
 80137c2:	d5fb      	bpl.n	80137bc <_printf_i+0x1c0>
 80137c4:	8019      	strh	r1, [r3, #0]
 80137c6:	2300      	movs	r3, #0
 80137c8:	6123      	str	r3, [r4, #16]
 80137ca:	4615      	mov	r5, r2
 80137cc:	e7bc      	b.n	8013748 <_printf_i+0x14c>
 80137ce:	682b      	ldr	r3, [r5, #0]
 80137d0:	1d1a      	adds	r2, r3, #4
 80137d2:	602a      	str	r2, [r5, #0]
 80137d4:	681d      	ldr	r5, [r3, #0]
 80137d6:	6862      	ldr	r2, [r4, #4]
 80137d8:	2100      	movs	r1, #0
 80137da:	4628      	mov	r0, r5
 80137dc:	f7ec fd20 	bl	8000220 <memchr>
 80137e0:	b108      	cbz	r0, 80137e6 <_printf_i+0x1ea>
 80137e2:	1b40      	subs	r0, r0, r5
 80137e4:	6060      	str	r0, [r4, #4]
 80137e6:	6863      	ldr	r3, [r4, #4]
 80137e8:	6123      	str	r3, [r4, #16]
 80137ea:	2300      	movs	r3, #0
 80137ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137f0:	e7aa      	b.n	8013748 <_printf_i+0x14c>
 80137f2:	6923      	ldr	r3, [r4, #16]
 80137f4:	462a      	mov	r2, r5
 80137f6:	4649      	mov	r1, r9
 80137f8:	4640      	mov	r0, r8
 80137fa:	47d0      	blx	sl
 80137fc:	3001      	adds	r0, #1
 80137fe:	d0ad      	beq.n	801375c <_printf_i+0x160>
 8013800:	6823      	ldr	r3, [r4, #0]
 8013802:	079b      	lsls	r3, r3, #30
 8013804:	d413      	bmi.n	801382e <_printf_i+0x232>
 8013806:	68e0      	ldr	r0, [r4, #12]
 8013808:	9b03      	ldr	r3, [sp, #12]
 801380a:	4298      	cmp	r0, r3
 801380c:	bfb8      	it	lt
 801380e:	4618      	movlt	r0, r3
 8013810:	e7a6      	b.n	8013760 <_printf_i+0x164>
 8013812:	2301      	movs	r3, #1
 8013814:	4632      	mov	r2, r6
 8013816:	4649      	mov	r1, r9
 8013818:	4640      	mov	r0, r8
 801381a:	47d0      	blx	sl
 801381c:	3001      	adds	r0, #1
 801381e:	d09d      	beq.n	801375c <_printf_i+0x160>
 8013820:	3501      	adds	r5, #1
 8013822:	68e3      	ldr	r3, [r4, #12]
 8013824:	9903      	ldr	r1, [sp, #12]
 8013826:	1a5b      	subs	r3, r3, r1
 8013828:	42ab      	cmp	r3, r5
 801382a:	dcf2      	bgt.n	8013812 <_printf_i+0x216>
 801382c:	e7eb      	b.n	8013806 <_printf_i+0x20a>
 801382e:	2500      	movs	r5, #0
 8013830:	f104 0619 	add.w	r6, r4, #25
 8013834:	e7f5      	b.n	8013822 <_printf_i+0x226>
 8013836:	bf00      	nop
 8013838:	0801879e 	.word	0x0801879e
 801383c:	080187af 	.word	0x080187af

08013840 <_scanf_float>:
 8013840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013844:	b087      	sub	sp, #28
 8013846:	4617      	mov	r7, r2
 8013848:	9303      	str	r3, [sp, #12]
 801384a:	688b      	ldr	r3, [r1, #8]
 801384c:	1e5a      	subs	r2, r3, #1
 801384e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013852:	bf83      	ittte	hi
 8013854:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013858:	195b      	addhi	r3, r3, r5
 801385a:	9302      	strhi	r3, [sp, #8]
 801385c:	2300      	movls	r3, #0
 801385e:	bf86      	itte	hi
 8013860:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013864:	608b      	strhi	r3, [r1, #8]
 8013866:	9302      	strls	r3, [sp, #8]
 8013868:	680b      	ldr	r3, [r1, #0]
 801386a:	468b      	mov	fp, r1
 801386c:	2500      	movs	r5, #0
 801386e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013872:	f84b 3b1c 	str.w	r3, [fp], #28
 8013876:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801387a:	4680      	mov	r8, r0
 801387c:	460c      	mov	r4, r1
 801387e:	465e      	mov	r6, fp
 8013880:	46aa      	mov	sl, r5
 8013882:	46a9      	mov	r9, r5
 8013884:	9501      	str	r5, [sp, #4]
 8013886:	68a2      	ldr	r2, [r4, #8]
 8013888:	b152      	cbz	r2, 80138a0 <_scanf_float+0x60>
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	2b4e      	cmp	r3, #78	; 0x4e
 8013890:	d864      	bhi.n	801395c <_scanf_float+0x11c>
 8013892:	2b40      	cmp	r3, #64	; 0x40
 8013894:	d83c      	bhi.n	8013910 <_scanf_float+0xd0>
 8013896:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801389a:	b2c8      	uxtb	r0, r1
 801389c:	280e      	cmp	r0, #14
 801389e:	d93a      	bls.n	8013916 <_scanf_float+0xd6>
 80138a0:	f1b9 0f00 	cmp.w	r9, #0
 80138a4:	d003      	beq.n	80138ae <_scanf_float+0x6e>
 80138a6:	6823      	ldr	r3, [r4, #0]
 80138a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80138ac:	6023      	str	r3, [r4, #0]
 80138ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138b2:	f1ba 0f01 	cmp.w	sl, #1
 80138b6:	f200 8113 	bhi.w	8013ae0 <_scanf_float+0x2a0>
 80138ba:	455e      	cmp	r6, fp
 80138bc:	f200 8105 	bhi.w	8013aca <_scanf_float+0x28a>
 80138c0:	2501      	movs	r5, #1
 80138c2:	4628      	mov	r0, r5
 80138c4:	b007      	add	sp, #28
 80138c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80138ce:	2a0d      	cmp	r2, #13
 80138d0:	d8e6      	bhi.n	80138a0 <_scanf_float+0x60>
 80138d2:	a101      	add	r1, pc, #4	; (adr r1, 80138d8 <_scanf_float+0x98>)
 80138d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80138d8:	08013a17 	.word	0x08013a17
 80138dc:	080138a1 	.word	0x080138a1
 80138e0:	080138a1 	.word	0x080138a1
 80138e4:	080138a1 	.word	0x080138a1
 80138e8:	08013a77 	.word	0x08013a77
 80138ec:	08013a4f 	.word	0x08013a4f
 80138f0:	080138a1 	.word	0x080138a1
 80138f4:	080138a1 	.word	0x080138a1
 80138f8:	08013a25 	.word	0x08013a25
 80138fc:	080138a1 	.word	0x080138a1
 8013900:	080138a1 	.word	0x080138a1
 8013904:	080138a1 	.word	0x080138a1
 8013908:	080138a1 	.word	0x080138a1
 801390c:	080139dd 	.word	0x080139dd
 8013910:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013914:	e7db      	b.n	80138ce <_scanf_float+0x8e>
 8013916:	290e      	cmp	r1, #14
 8013918:	d8c2      	bhi.n	80138a0 <_scanf_float+0x60>
 801391a:	a001      	add	r0, pc, #4	; (adr r0, 8013920 <_scanf_float+0xe0>)
 801391c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013920:	080139cf 	.word	0x080139cf
 8013924:	080138a1 	.word	0x080138a1
 8013928:	080139cf 	.word	0x080139cf
 801392c:	08013a63 	.word	0x08013a63
 8013930:	080138a1 	.word	0x080138a1
 8013934:	0801397d 	.word	0x0801397d
 8013938:	080139b9 	.word	0x080139b9
 801393c:	080139b9 	.word	0x080139b9
 8013940:	080139b9 	.word	0x080139b9
 8013944:	080139b9 	.word	0x080139b9
 8013948:	080139b9 	.word	0x080139b9
 801394c:	080139b9 	.word	0x080139b9
 8013950:	080139b9 	.word	0x080139b9
 8013954:	080139b9 	.word	0x080139b9
 8013958:	080139b9 	.word	0x080139b9
 801395c:	2b6e      	cmp	r3, #110	; 0x6e
 801395e:	d809      	bhi.n	8013974 <_scanf_float+0x134>
 8013960:	2b60      	cmp	r3, #96	; 0x60
 8013962:	d8b2      	bhi.n	80138ca <_scanf_float+0x8a>
 8013964:	2b54      	cmp	r3, #84	; 0x54
 8013966:	d077      	beq.n	8013a58 <_scanf_float+0x218>
 8013968:	2b59      	cmp	r3, #89	; 0x59
 801396a:	d199      	bne.n	80138a0 <_scanf_float+0x60>
 801396c:	2d07      	cmp	r5, #7
 801396e:	d197      	bne.n	80138a0 <_scanf_float+0x60>
 8013970:	2508      	movs	r5, #8
 8013972:	e029      	b.n	80139c8 <_scanf_float+0x188>
 8013974:	2b74      	cmp	r3, #116	; 0x74
 8013976:	d06f      	beq.n	8013a58 <_scanf_float+0x218>
 8013978:	2b79      	cmp	r3, #121	; 0x79
 801397a:	e7f6      	b.n	801396a <_scanf_float+0x12a>
 801397c:	6821      	ldr	r1, [r4, #0]
 801397e:	05c8      	lsls	r0, r1, #23
 8013980:	d51a      	bpl.n	80139b8 <_scanf_float+0x178>
 8013982:	9b02      	ldr	r3, [sp, #8]
 8013984:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013988:	6021      	str	r1, [r4, #0]
 801398a:	f109 0901 	add.w	r9, r9, #1
 801398e:	b11b      	cbz	r3, 8013998 <_scanf_float+0x158>
 8013990:	3b01      	subs	r3, #1
 8013992:	3201      	adds	r2, #1
 8013994:	9302      	str	r3, [sp, #8]
 8013996:	60a2      	str	r2, [r4, #8]
 8013998:	68a3      	ldr	r3, [r4, #8]
 801399a:	3b01      	subs	r3, #1
 801399c:	60a3      	str	r3, [r4, #8]
 801399e:	6923      	ldr	r3, [r4, #16]
 80139a0:	3301      	adds	r3, #1
 80139a2:	6123      	str	r3, [r4, #16]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	3b01      	subs	r3, #1
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	607b      	str	r3, [r7, #4]
 80139ac:	f340 8084 	ble.w	8013ab8 <_scanf_float+0x278>
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	3301      	adds	r3, #1
 80139b4:	603b      	str	r3, [r7, #0]
 80139b6:	e766      	b.n	8013886 <_scanf_float+0x46>
 80139b8:	eb1a 0f05 	cmn.w	sl, r5
 80139bc:	f47f af70 	bne.w	80138a0 <_scanf_float+0x60>
 80139c0:	6822      	ldr	r2, [r4, #0]
 80139c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80139c6:	6022      	str	r2, [r4, #0]
 80139c8:	f806 3b01 	strb.w	r3, [r6], #1
 80139cc:	e7e4      	b.n	8013998 <_scanf_float+0x158>
 80139ce:	6822      	ldr	r2, [r4, #0]
 80139d0:	0610      	lsls	r0, r2, #24
 80139d2:	f57f af65 	bpl.w	80138a0 <_scanf_float+0x60>
 80139d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80139da:	e7f4      	b.n	80139c6 <_scanf_float+0x186>
 80139dc:	f1ba 0f00 	cmp.w	sl, #0
 80139e0:	d10e      	bne.n	8013a00 <_scanf_float+0x1c0>
 80139e2:	f1b9 0f00 	cmp.w	r9, #0
 80139e6:	d10e      	bne.n	8013a06 <_scanf_float+0x1c6>
 80139e8:	6822      	ldr	r2, [r4, #0]
 80139ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80139ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80139f2:	d108      	bne.n	8013a06 <_scanf_float+0x1c6>
 80139f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80139f8:	6022      	str	r2, [r4, #0]
 80139fa:	f04f 0a01 	mov.w	sl, #1
 80139fe:	e7e3      	b.n	80139c8 <_scanf_float+0x188>
 8013a00:	f1ba 0f02 	cmp.w	sl, #2
 8013a04:	d055      	beq.n	8013ab2 <_scanf_float+0x272>
 8013a06:	2d01      	cmp	r5, #1
 8013a08:	d002      	beq.n	8013a10 <_scanf_float+0x1d0>
 8013a0a:	2d04      	cmp	r5, #4
 8013a0c:	f47f af48 	bne.w	80138a0 <_scanf_float+0x60>
 8013a10:	3501      	adds	r5, #1
 8013a12:	b2ed      	uxtb	r5, r5
 8013a14:	e7d8      	b.n	80139c8 <_scanf_float+0x188>
 8013a16:	f1ba 0f01 	cmp.w	sl, #1
 8013a1a:	f47f af41 	bne.w	80138a0 <_scanf_float+0x60>
 8013a1e:	f04f 0a02 	mov.w	sl, #2
 8013a22:	e7d1      	b.n	80139c8 <_scanf_float+0x188>
 8013a24:	b97d      	cbnz	r5, 8013a46 <_scanf_float+0x206>
 8013a26:	f1b9 0f00 	cmp.w	r9, #0
 8013a2a:	f47f af3c 	bne.w	80138a6 <_scanf_float+0x66>
 8013a2e:	6822      	ldr	r2, [r4, #0]
 8013a30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013a34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013a38:	f47f af39 	bne.w	80138ae <_scanf_float+0x6e>
 8013a3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013a40:	6022      	str	r2, [r4, #0]
 8013a42:	2501      	movs	r5, #1
 8013a44:	e7c0      	b.n	80139c8 <_scanf_float+0x188>
 8013a46:	2d03      	cmp	r5, #3
 8013a48:	d0e2      	beq.n	8013a10 <_scanf_float+0x1d0>
 8013a4a:	2d05      	cmp	r5, #5
 8013a4c:	e7de      	b.n	8013a0c <_scanf_float+0x1cc>
 8013a4e:	2d02      	cmp	r5, #2
 8013a50:	f47f af26 	bne.w	80138a0 <_scanf_float+0x60>
 8013a54:	2503      	movs	r5, #3
 8013a56:	e7b7      	b.n	80139c8 <_scanf_float+0x188>
 8013a58:	2d06      	cmp	r5, #6
 8013a5a:	f47f af21 	bne.w	80138a0 <_scanf_float+0x60>
 8013a5e:	2507      	movs	r5, #7
 8013a60:	e7b2      	b.n	80139c8 <_scanf_float+0x188>
 8013a62:	6822      	ldr	r2, [r4, #0]
 8013a64:	0591      	lsls	r1, r2, #22
 8013a66:	f57f af1b 	bpl.w	80138a0 <_scanf_float+0x60>
 8013a6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013a6e:	6022      	str	r2, [r4, #0]
 8013a70:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a74:	e7a8      	b.n	80139c8 <_scanf_float+0x188>
 8013a76:	6822      	ldr	r2, [r4, #0]
 8013a78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013a7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013a80:	d006      	beq.n	8013a90 <_scanf_float+0x250>
 8013a82:	0550      	lsls	r0, r2, #21
 8013a84:	f57f af0c 	bpl.w	80138a0 <_scanf_float+0x60>
 8013a88:	f1b9 0f00 	cmp.w	r9, #0
 8013a8c:	f43f af0f 	beq.w	80138ae <_scanf_float+0x6e>
 8013a90:	0591      	lsls	r1, r2, #22
 8013a92:	bf58      	it	pl
 8013a94:	9901      	ldrpl	r1, [sp, #4]
 8013a96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013a9a:	bf58      	it	pl
 8013a9c:	eba9 0101 	subpl.w	r1, r9, r1
 8013aa0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013aa4:	bf58      	it	pl
 8013aa6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013aaa:	6022      	str	r2, [r4, #0]
 8013aac:	f04f 0900 	mov.w	r9, #0
 8013ab0:	e78a      	b.n	80139c8 <_scanf_float+0x188>
 8013ab2:	f04f 0a03 	mov.w	sl, #3
 8013ab6:	e787      	b.n	80139c8 <_scanf_float+0x188>
 8013ab8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013abc:	4639      	mov	r1, r7
 8013abe:	4640      	mov	r0, r8
 8013ac0:	4798      	blx	r3
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	f43f aedf 	beq.w	8013886 <_scanf_float+0x46>
 8013ac8:	e6ea      	b.n	80138a0 <_scanf_float+0x60>
 8013aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ace:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ad2:	463a      	mov	r2, r7
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	4798      	blx	r3
 8013ad8:	6923      	ldr	r3, [r4, #16]
 8013ada:	3b01      	subs	r3, #1
 8013adc:	6123      	str	r3, [r4, #16]
 8013ade:	e6ec      	b.n	80138ba <_scanf_float+0x7a>
 8013ae0:	1e6b      	subs	r3, r5, #1
 8013ae2:	2b06      	cmp	r3, #6
 8013ae4:	d825      	bhi.n	8013b32 <_scanf_float+0x2f2>
 8013ae6:	2d02      	cmp	r5, #2
 8013ae8:	d836      	bhi.n	8013b58 <_scanf_float+0x318>
 8013aea:	455e      	cmp	r6, fp
 8013aec:	f67f aee8 	bls.w	80138c0 <_scanf_float+0x80>
 8013af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013af4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013af8:	463a      	mov	r2, r7
 8013afa:	4640      	mov	r0, r8
 8013afc:	4798      	blx	r3
 8013afe:	6923      	ldr	r3, [r4, #16]
 8013b00:	3b01      	subs	r3, #1
 8013b02:	6123      	str	r3, [r4, #16]
 8013b04:	e7f1      	b.n	8013aea <_scanf_float+0x2aa>
 8013b06:	9802      	ldr	r0, [sp, #8]
 8013b08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013b10:	9002      	str	r0, [sp, #8]
 8013b12:	463a      	mov	r2, r7
 8013b14:	4640      	mov	r0, r8
 8013b16:	4798      	blx	r3
 8013b18:	6923      	ldr	r3, [r4, #16]
 8013b1a:	3b01      	subs	r3, #1
 8013b1c:	6123      	str	r3, [r4, #16]
 8013b1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b22:	fa5f fa8a 	uxtb.w	sl, sl
 8013b26:	f1ba 0f02 	cmp.w	sl, #2
 8013b2a:	d1ec      	bne.n	8013b06 <_scanf_float+0x2c6>
 8013b2c:	3d03      	subs	r5, #3
 8013b2e:	b2ed      	uxtb	r5, r5
 8013b30:	1b76      	subs	r6, r6, r5
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	05da      	lsls	r2, r3, #23
 8013b36:	d52f      	bpl.n	8013b98 <_scanf_float+0x358>
 8013b38:	055b      	lsls	r3, r3, #21
 8013b3a:	d510      	bpl.n	8013b5e <_scanf_float+0x31e>
 8013b3c:	455e      	cmp	r6, fp
 8013b3e:	f67f aebf 	bls.w	80138c0 <_scanf_float+0x80>
 8013b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b4a:	463a      	mov	r2, r7
 8013b4c:	4640      	mov	r0, r8
 8013b4e:	4798      	blx	r3
 8013b50:	6923      	ldr	r3, [r4, #16]
 8013b52:	3b01      	subs	r3, #1
 8013b54:	6123      	str	r3, [r4, #16]
 8013b56:	e7f1      	b.n	8013b3c <_scanf_float+0x2fc>
 8013b58:	46aa      	mov	sl, r5
 8013b5a:	9602      	str	r6, [sp, #8]
 8013b5c:	e7df      	b.n	8013b1e <_scanf_float+0x2de>
 8013b5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013b62:	6923      	ldr	r3, [r4, #16]
 8013b64:	2965      	cmp	r1, #101	; 0x65
 8013b66:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8013b6e:	6123      	str	r3, [r4, #16]
 8013b70:	d00c      	beq.n	8013b8c <_scanf_float+0x34c>
 8013b72:	2945      	cmp	r1, #69	; 0x45
 8013b74:	d00a      	beq.n	8013b8c <_scanf_float+0x34c>
 8013b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b7a:	463a      	mov	r2, r7
 8013b7c:	4640      	mov	r0, r8
 8013b7e:	4798      	blx	r3
 8013b80:	6923      	ldr	r3, [r4, #16]
 8013b82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013b86:	3b01      	subs	r3, #1
 8013b88:	1eb5      	subs	r5, r6, #2
 8013b8a:	6123      	str	r3, [r4, #16]
 8013b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b90:	463a      	mov	r2, r7
 8013b92:	4640      	mov	r0, r8
 8013b94:	4798      	blx	r3
 8013b96:	462e      	mov	r6, r5
 8013b98:	6825      	ldr	r5, [r4, #0]
 8013b9a:	f015 0510 	ands.w	r5, r5, #16
 8013b9e:	d158      	bne.n	8013c52 <_scanf_float+0x412>
 8013ba0:	7035      	strb	r5, [r6, #0]
 8013ba2:	6823      	ldr	r3, [r4, #0]
 8013ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013bac:	d11c      	bne.n	8013be8 <_scanf_float+0x3a8>
 8013bae:	9b01      	ldr	r3, [sp, #4]
 8013bb0:	454b      	cmp	r3, r9
 8013bb2:	eba3 0209 	sub.w	r2, r3, r9
 8013bb6:	d124      	bne.n	8013c02 <_scanf_float+0x3c2>
 8013bb8:	2200      	movs	r2, #0
 8013bba:	4659      	mov	r1, fp
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	f002 fc2b 	bl	8016418 <_strtod_r>
 8013bc2:	9b03      	ldr	r3, [sp, #12]
 8013bc4:	6821      	ldr	r1, [r4, #0]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f011 0f02 	tst.w	r1, #2
 8013bcc:	ec57 6b10 	vmov	r6, r7, d0
 8013bd0:	f103 0204 	add.w	r2, r3, #4
 8013bd4:	d020      	beq.n	8013c18 <_scanf_float+0x3d8>
 8013bd6:	9903      	ldr	r1, [sp, #12]
 8013bd8:	600a      	str	r2, [r1, #0]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	e9c3 6700 	strd	r6, r7, [r3]
 8013be0:	68e3      	ldr	r3, [r4, #12]
 8013be2:	3301      	adds	r3, #1
 8013be4:	60e3      	str	r3, [r4, #12]
 8013be6:	e66c      	b.n	80138c2 <_scanf_float+0x82>
 8013be8:	9b04      	ldr	r3, [sp, #16]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d0e4      	beq.n	8013bb8 <_scanf_float+0x378>
 8013bee:	9905      	ldr	r1, [sp, #20]
 8013bf0:	230a      	movs	r3, #10
 8013bf2:	462a      	mov	r2, r5
 8013bf4:	3101      	adds	r1, #1
 8013bf6:	4640      	mov	r0, r8
 8013bf8:	f002 fc96 	bl	8016528 <_strtol_r>
 8013bfc:	9b04      	ldr	r3, [sp, #16]
 8013bfe:	9e05      	ldr	r6, [sp, #20]
 8013c00:	1ac2      	subs	r2, r0, r3
 8013c02:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013c06:	429e      	cmp	r6, r3
 8013c08:	bf28      	it	cs
 8013c0a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013c0e:	4912      	ldr	r1, [pc, #72]	; (8013c58 <_scanf_float+0x418>)
 8013c10:	4630      	mov	r0, r6
 8013c12:	f000 f8f9 	bl	8013e08 <siprintf>
 8013c16:	e7cf      	b.n	8013bb8 <_scanf_float+0x378>
 8013c18:	f011 0f04 	tst.w	r1, #4
 8013c1c:	9903      	ldr	r1, [sp, #12]
 8013c1e:	600a      	str	r2, [r1, #0]
 8013c20:	d1db      	bne.n	8013bda <_scanf_float+0x39a>
 8013c22:	f8d3 8000 	ldr.w	r8, [r3]
 8013c26:	ee10 2a10 	vmov	r2, s0
 8013c2a:	ee10 0a10 	vmov	r0, s0
 8013c2e:	463b      	mov	r3, r7
 8013c30:	4639      	mov	r1, r7
 8013c32:	f7ec ffa3 	bl	8000b7c <__aeabi_dcmpun>
 8013c36:	b128      	cbz	r0, 8013c44 <_scanf_float+0x404>
 8013c38:	4808      	ldr	r0, [pc, #32]	; (8013c5c <_scanf_float+0x41c>)
 8013c3a:	f000 fa67 	bl	801410c <nanf>
 8013c3e:	ed88 0a00 	vstr	s0, [r8]
 8013c42:	e7cd      	b.n	8013be0 <_scanf_float+0x3a0>
 8013c44:	4630      	mov	r0, r6
 8013c46:	4639      	mov	r1, r7
 8013c48:	f7ec fff6 	bl	8000c38 <__aeabi_d2f>
 8013c4c:	f8c8 0000 	str.w	r0, [r8]
 8013c50:	e7c6      	b.n	8013be0 <_scanf_float+0x3a0>
 8013c52:	2500      	movs	r5, #0
 8013c54:	e635      	b.n	80138c2 <_scanf_float+0x82>
 8013c56:	bf00      	nop
 8013c58:	080187c0 	.word	0x080187c0
 8013c5c:	0801878b 	.word	0x0801878b

08013c60 <std>:
 8013c60:	2300      	movs	r3, #0
 8013c62:	b510      	push	{r4, lr}
 8013c64:	4604      	mov	r4, r0
 8013c66:	e9c0 3300 	strd	r3, r3, [r0]
 8013c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c6e:	6083      	str	r3, [r0, #8]
 8013c70:	8181      	strh	r1, [r0, #12]
 8013c72:	6643      	str	r3, [r0, #100]	; 0x64
 8013c74:	81c2      	strh	r2, [r0, #14]
 8013c76:	6183      	str	r3, [r0, #24]
 8013c78:	4619      	mov	r1, r3
 8013c7a:	2208      	movs	r2, #8
 8013c7c:	305c      	adds	r0, #92	; 0x5c
 8013c7e:	f000 f950 	bl	8013f22 <memset>
 8013c82:	4b0d      	ldr	r3, [pc, #52]	; (8013cb8 <std+0x58>)
 8013c84:	6263      	str	r3, [r4, #36]	; 0x24
 8013c86:	4b0d      	ldr	r3, [pc, #52]	; (8013cbc <std+0x5c>)
 8013c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c8a:	4b0d      	ldr	r3, [pc, #52]	; (8013cc0 <std+0x60>)
 8013c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c8e:	4b0d      	ldr	r3, [pc, #52]	; (8013cc4 <std+0x64>)
 8013c90:	6323      	str	r3, [r4, #48]	; 0x30
 8013c92:	4b0d      	ldr	r3, [pc, #52]	; (8013cc8 <std+0x68>)
 8013c94:	6224      	str	r4, [r4, #32]
 8013c96:	429c      	cmp	r4, r3
 8013c98:	d006      	beq.n	8013ca8 <std+0x48>
 8013c9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013c9e:	4294      	cmp	r4, r2
 8013ca0:	d002      	beq.n	8013ca8 <std+0x48>
 8013ca2:	33d0      	adds	r3, #208	; 0xd0
 8013ca4:	429c      	cmp	r4, r3
 8013ca6:	d105      	bne.n	8013cb4 <std+0x54>
 8013ca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cb0:	f000 ba1a 	b.w	80140e8 <__retarget_lock_init_recursive>
 8013cb4:	bd10      	pop	{r4, pc}
 8013cb6:	bf00      	nop
 8013cb8:	08013e49 	.word	0x08013e49
 8013cbc:	08013e6b 	.word	0x08013e6b
 8013cc0:	08013ea3 	.word	0x08013ea3
 8013cc4:	08013ec7 	.word	0x08013ec7
 8013cc8:	20000998 	.word	0x20000998

08013ccc <stdio_exit_handler>:
 8013ccc:	4a02      	ldr	r2, [pc, #8]	; (8013cd8 <stdio_exit_handler+0xc>)
 8013cce:	4903      	ldr	r1, [pc, #12]	; (8013cdc <stdio_exit_handler+0x10>)
 8013cd0:	4803      	ldr	r0, [pc, #12]	; (8013ce0 <stdio_exit_handler+0x14>)
 8013cd2:	f000 b87b 	b.w	8013dcc <_fwalk_sglue>
 8013cd6:	bf00      	nop
 8013cd8:	20000078 	.word	0x20000078
 8013cdc:	08016b71 	.word	0x08016b71
 8013ce0:	20000084 	.word	0x20000084

08013ce4 <cleanup_stdio>:
 8013ce4:	6841      	ldr	r1, [r0, #4]
 8013ce6:	4b0c      	ldr	r3, [pc, #48]	; (8013d18 <cleanup_stdio+0x34>)
 8013ce8:	4299      	cmp	r1, r3
 8013cea:	b510      	push	{r4, lr}
 8013cec:	4604      	mov	r4, r0
 8013cee:	d001      	beq.n	8013cf4 <cleanup_stdio+0x10>
 8013cf0:	f002 ff3e 	bl	8016b70 <_fflush_r>
 8013cf4:	68a1      	ldr	r1, [r4, #8]
 8013cf6:	4b09      	ldr	r3, [pc, #36]	; (8013d1c <cleanup_stdio+0x38>)
 8013cf8:	4299      	cmp	r1, r3
 8013cfa:	d002      	beq.n	8013d02 <cleanup_stdio+0x1e>
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	f002 ff37 	bl	8016b70 <_fflush_r>
 8013d02:	68e1      	ldr	r1, [r4, #12]
 8013d04:	4b06      	ldr	r3, [pc, #24]	; (8013d20 <cleanup_stdio+0x3c>)
 8013d06:	4299      	cmp	r1, r3
 8013d08:	d004      	beq.n	8013d14 <cleanup_stdio+0x30>
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d10:	f002 bf2e 	b.w	8016b70 <_fflush_r>
 8013d14:	bd10      	pop	{r4, pc}
 8013d16:	bf00      	nop
 8013d18:	20000998 	.word	0x20000998
 8013d1c:	20000a00 	.word	0x20000a00
 8013d20:	20000a68 	.word	0x20000a68

08013d24 <global_stdio_init.part.0>:
 8013d24:	b510      	push	{r4, lr}
 8013d26:	4b0b      	ldr	r3, [pc, #44]	; (8013d54 <global_stdio_init.part.0+0x30>)
 8013d28:	4c0b      	ldr	r4, [pc, #44]	; (8013d58 <global_stdio_init.part.0+0x34>)
 8013d2a:	4a0c      	ldr	r2, [pc, #48]	; (8013d5c <global_stdio_init.part.0+0x38>)
 8013d2c:	601a      	str	r2, [r3, #0]
 8013d2e:	4620      	mov	r0, r4
 8013d30:	2200      	movs	r2, #0
 8013d32:	2104      	movs	r1, #4
 8013d34:	f7ff ff94 	bl	8013c60 <std>
 8013d38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	2109      	movs	r1, #9
 8013d40:	f7ff ff8e 	bl	8013c60 <std>
 8013d44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013d48:	2202      	movs	r2, #2
 8013d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d4e:	2112      	movs	r1, #18
 8013d50:	f7ff bf86 	b.w	8013c60 <std>
 8013d54:	20000ad0 	.word	0x20000ad0
 8013d58:	20000998 	.word	0x20000998
 8013d5c:	08013ccd 	.word	0x08013ccd

08013d60 <__sfp_lock_acquire>:
 8013d60:	4801      	ldr	r0, [pc, #4]	; (8013d68 <__sfp_lock_acquire+0x8>)
 8013d62:	f000 b9c2 	b.w	80140ea <__retarget_lock_acquire_recursive>
 8013d66:	bf00      	nop
 8013d68:	20000ad9 	.word	0x20000ad9

08013d6c <__sfp_lock_release>:
 8013d6c:	4801      	ldr	r0, [pc, #4]	; (8013d74 <__sfp_lock_release+0x8>)
 8013d6e:	f000 b9bd 	b.w	80140ec <__retarget_lock_release_recursive>
 8013d72:	bf00      	nop
 8013d74:	20000ad9 	.word	0x20000ad9

08013d78 <__sinit>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	f7ff fff0 	bl	8013d60 <__sfp_lock_acquire>
 8013d80:	6a23      	ldr	r3, [r4, #32]
 8013d82:	b11b      	cbz	r3, 8013d8c <__sinit+0x14>
 8013d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d88:	f7ff bff0 	b.w	8013d6c <__sfp_lock_release>
 8013d8c:	4b04      	ldr	r3, [pc, #16]	; (8013da0 <__sinit+0x28>)
 8013d8e:	6223      	str	r3, [r4, #32]
 8013d90:	4b04      	ldr	r3, [pc, #16]	; (8013da4 <__sinit+0x2c>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d1f5      	bne.n	8013d84 <__sinit+0xc>
 8013d98:	f7ff ffc4 	bl	8013d24 <global_stdio_init.part.0>
 8013d9c:	e7f2      	b.n	8013d84 <__sinit+0xc>
 8013d9e:	bf00      	nop
 8013da0:	08013ce5 	.word	0x08013ce5
 8013da4:	20000ad0 	.word	0x20000ad0

08013da8 <fiprintf>:
 8013da8:	b40e      	push	{r1, r2, r3}
 8013daa:	b503      	push	{r0, r1, lr}
 8013dac:	4601      	mov	r1, r0
 8013dae:	ab03      	add	r3, sp, #12
 8013db0:	4805      	ldr	r0, [pc, #20]	; (8013dc8 <fiprintf+0x20>)
 8013db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db6:	6800      	ldr	r0, [r0, #0]
 8013db8:	9301      	str	r3, [sp, #4]
 8013dba:	f002 fd39 	bl	8016830 <_vfiprintf_r>
 8013dbe:	b002      	add	sp, #8
 8013dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dc4:	b003      	add	sp, #12
 8013dc6:	4770      	bx	lr
 8013dc8:	200000d0 	.word	0x200000d0

08013dcc <_fwalk_sglue>:
 8013dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	4688      	mov	r8, r1
 8013dd4:	4614      	mov	r4, r2
 8013dd6:	2600      	movs	r6, #0
 8013dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8013de0:	d505      	bpl.n	8013dee <_fwalk_sglue+0x22>
 8013de2:	6824      	ldr	r4, [r4, #0]
 8013de4:	2c00      	cmp	r4, #0
 8013de6:	d1f7      	bne.n	8013dd8 <_fwalk_sglue+0xc>
 8013de8:	4630      	mov	r0, r6
 8013dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dee:	89ab      	ldrh	r3, [r5, #12]
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d907      	bls.n	8013e04 <_fwalk_sglue+0x38>
 8013df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	d003      	beq.n	8013e04 <_fwalk_sglue+0x38>
 8013dfc:	4629      	mov	r1, r5
 8013dfe:	4638      	mov	r0, r7
 8013e00:	47c0      	blx	r8
 8013e02:	4306      	orrs	r6, r0
 8013e04:	3568      	adds	r5, #104	; 0x68
 8013e06:	e7e9      	b.n	8013ddc <_fwalk_sglue+0x10>

08013e08 <siprintf>:
 8013e08:	b40e      	push	{r1, r2, r3}
 8013e0a:	b500      	push	{lr}
 8013e0c:	b09c      	sub	sp, #112	; 0x70
 8013e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8013e10:	9002      	str	r0, [sp, #8]
 8013e12:	9006      	str	r0, [sp, #24]
 8013e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013e18:	4809      	ldr	r0, [pc, #36]	; (8013e40 <siprintf+0x38>)
 8013e1a:	9107      	str	r1, [sp, #28]
 8013e1c:	9104      	str	r1, [sp, #16]
 8013e1e:	4909      	ldr	r1, [pc, #36]	; (8013e44 <siprintf+0x3c>)
 8013e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e24:	9105      	str	r1, [sp, #20]
 8013e26:	6800      	ldr	r0, [r0, #0]
 8013e28:	9301      	str	r3, [sp, #4]
 8013e2a:	a902      	add	r1, sp, #8
 8013e2c:	f002 fbd8 	bl	80165e0 <_svfiprintf_r>
 8013e30:	9b02      	ldr	r3, [sp, #8]
 8013e32:	2200      	movs	r2, #0
 8013e34:	701a      	strb	r2, [r3, #0]
 8013e36:	b01c      	add	sp, #112	; 0x70
 8013e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e3c:	b003      	add	sp, #12
 8013e3e:	4770      	bx	lr
 8013e40:	200000d0 	.word	0x200000d0
 8013e44:	ffff0208 	.word	0xffff0208

08013e48 <__sread>:
 8013e48:	b510      	push	{r4, lr}
 8013e4a:	460c      	mov	r4, r1
 8013e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e50:	f000 f8d8 	bl	8014004 <_read_r>
 8013e54:	2800      	cmp	r0, #0
 8013e56:	bfab      	itete	ge
 8013e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8013e5c:	181b      	addge	r3, r3, r0
 8013e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e62:	bfac      	ite	ge
 8013e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e66:	81a3      	strhlt	r3, [r4, #12]
 8013e68:	bd10      	pop	{r4, pc}

08013e6a <__swrite>:
 8013e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e6e:	461f      	mov	r7, r3
 8013e70:	898b      	ldrh	r3, [r1, #12]
 8013e72:	05db      	lsls	r3, r3, #23
 8013e74:	4605      	mov	r5, r0
 8013e76:	460c      	mov	r4, r1
 8013e78:	4616      	mov	r6, r2
 8013e7a:	d505      	bpl.n	8013e88 <__swrite+0x1e>
 8013e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e80:	2302      	movs	r3, #2
 8013e82:	2200      	movs	r2, #0
 8013e84:	f000 f8ac 	bl	8013fe0 <_lseek_r>
 8013e88:	89a3      	ldrh	r3, [r4, #12]
 8013e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e92:	81a3      	strh	r3, [r4, #12]
 8013e94:	4632      	mov	r2, r6
 8013e96:	463b      	mov	r3, r7
 8013e98:	4628      	mov	r0, r5
 8013e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e9e:	f000 b8e7 	b.w	8014070 <_write_r>

08013ea2 <__sseek>:
 8013ea2:	b510      	push	{r4, lr}
 8013ea4:	460c      	mov	r4, r1
 8013ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eaa:	f000 f899 	bl	8013fe0 <_lseek_r>
 8013eae:	1c43      	adds	r3, r0, #1
 8013eb0:	89a3      	ldrh	r3, [r4, #12]
 8013eb2:	bf15      	itete	ne
 8013eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ebe:	81a3      	strheq	r3, [r4, #12]
 8013ec0:	bf18      	it	ne
 8013ec2:	81a3      	strhne	r3, [r4, #12]
 8013ec4:	bd10      	pop	{r4, pc}

08013ec6 <__sclose>:
 8013ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eca:	f000 b879 	b.w	8013fc0 <_close_r>

08013ece <memcmp>:
 8013ece:	b510      	push	{r4, lr}
 8013ed0:	3901      	subs	r1, #1
 8013ed2:	4402      	add	r2, r0
 8013ed4:	4290      	cmp	r0, r2
 8013ed6:	d101      	bne.n	8013edc <memcmp+0xe>
 8013ed8:	2000      	movs	r0, #0
 8013eda:	e005      	b.n	8013ee8 <memcmp+0x1a>
 8013edc:	7803      	ldrb	r3, [r0, #0]
 8013ede:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013ee2:	42a3      	cmp	r3, r4
 8013ee4:	d001      	beq.n	8013eea <memcmp+0x1c>
 8013ee6:	1b18      	subs	r0, r3, r4
 8013ee8:	bd10      	pop	{r4, pc}
 8013eea:	3001      	adds	r0, #1
 8013eec:	e7f2      	b.n	8013ed4 <memcmp+0x6>

08013eee <memmove>:
 8013eee:	4288      	cmp	r0, r1
 8013ef0:	b510      	push	{r4, lr}
 8013ef2:	eb01 0402 	add.w	r4, r1, r2
 8013ef6:	d902      	bls.n	8013efe <memmove+0x10>
 8013ef8:	4284      	cmp	r4, r0
 8013efa:	4623      	mov	r3, r4
 8013efc:	d807      	bhi.n	8013f0e <memmove+0x20>
 8013efe:	1e43      	subs	r3, r0, #1
 8013f00:	42a1      	cmp	r1, r4
 8013f02:	d008      	beq.n	8013f16 <memmove+0x28>
 8013f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f0c:	e7f8      	b.n	8013f00 <memmove+0x12>
 8013f0e:	4402      	add	r2, r0
 8013f10:	4601      	mov	r1, r0
 8013f12:	428a      	cmp	r2, r1
 8013f14:	d100      	bne.n	8013f18 <memmove+0x2a>
 8013f16:	bd10      	pop	{r4, pc}
 8013f18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f20:	e7f7      	b.n	8013f12 <memmove+0x24>

08013f22 <memset>:
 8013f22:	4402      	add	r2, r0
 8013f24:	4603      	mov	r3, r0
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d100      	bne.n	8013f2c <memset+0xa>
 8013f2a:	4770      	bx	lr
 8013f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8013f30:	e7f9      	b.n	8013f26 <memset+0x4>

08013f32 <strncpy>:
 8013f32:	b510      	push	{r4, lr}
 8013f34:	3901      	subs	r1, #1
 8013f36:	4603      	mov	r3, r0
 8013f38:	b132      	cbz	r2, 8013f48 <strncpy+0x16>
 8013f3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f3e:	f803 4b01 	strb.w	r4, [r3], #1
 8013f42:	3a01      	subs	r2, #1
 8013f44:	2c00      	cmp	r4, #0
 8013f46:	d1f7      	bne.n	8013f38 <strncpy+0x6>
 8013f48:	441a      	add	r2, r3
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	d100      	bne.n	8013f52 <strncpy+0x20>
 8013f50:	bd10      	pop	{r4, pc}
 8013f52:	f803 1b01 	strb.w	r1, [r3], #1
 8013f56:	e7f9      	b.n	8013f4c <strncpy+0x1a>

08013f58 <_raise_r>:
 8013f58:	291f      	cmp	r1, #31
 8013f5a:	b538      	push	{r3, r4, r5, lr}
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	460d      	mov	r5, r1
 8013f60:	d904      	bls.n	8013f6c <_raise_r+0x14>
 8013f62:	2316      	movs	r3, #22
 8013f64:	6003      	str	r3, [r0, #0]
 8013f66:	f04f 30ff 	mov.w	r0, #4294967295
 8013f6a:	bd38      	pop	{r3, r4, r5, pc}
 8013f6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013f6e:	b112      	cbz	r2, 8013f76 <_raise_r+0x1e>
 8013f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f74:	b94b      	cbnz	r3, 8013f8a <_raise_r+0x32>
 8013f76:	4620      	mov	r0, r4
 8013f78:	f000 f868 	bl	801404c <_getpid_r>
 8013f7c:	462a      	mov	r2, r5
 8013f7e:	4601      	mov	r1, r0
 8013f80:	4620      	mov	r0, r4
 8013f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f86:	f000 b84f 	b.w	8014028 <_kill_r>
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d00a      	beq.n	8013fa4 <_raise_r+0x4c>
 8013f8e:	1c59      	adds	r1, r3, #1
 8013f90:	d103      	bne.n	8013f9a <_raise_r+0x42>
 8013f92:	2316      	movs	r3, #22
 8013f94:	6003      	str	r3, [r0, #0]
 8013f96:	2001      	movs	r0, #1
 8013f98:	e7e7      	b.n	8013f6a <_raise_r+0x12>
 8013f9a:	2400      	movs	r4, #0
 8013f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	4798      	blx	r3
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	e7e0      	b.n	8013f6a <_raise_r+0x12>

08013fa8 <raise>:
 8013fa8:	4b02      	ldr	r3, [pc, #8]	; (8013fb4 <raise+0xc>)
 8013faa:	4601      	mov	r1, r0
 8013fac:	6818      	ldr	r0, [r3, #0]
 8013fae:	f7ff bfd3 	b.w	8013f58 <_raise_r>
 8013fb2:	bf00      	nop
 8013fb4:	200000d0 	.word	0x200000d0

08013fb8 <_localeconv_r>:
 8013fb8:	4800      	ldr	r0, [pc, #0]	; (8013fbc <_localeconv_r+0x4>)
 8013fba:	4770      	bx	lr
 8013fbc:	200001c4 	.word	0x200001c4

08013fc0 <_close_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	4d06      	ldr	r5, [pc, #24]	; (8013fdc <_close_r+0x1c>)
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4608      	mov	r0, r1
 8013fca:	602b      	str	r3, [r5, #0]
 8013fcc:	f7f5 fa55 	bl	800947a <_close>
 8013fd0:	1c43      	adds	r3, r0, #1
 8013fd2:	d102      	bne.n	8013fda <_close_r+0x1a>
 8013fd4:	682b      	ldr	r3, [r5, #0]
 8013fd6:	b103      	cbz	r3, 8013fda <_close_r+0x1a>
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	bd38      	pop	{r3, r4, r5, pc}
 8013fdc:	20000ad4 	.word	0x20000ad4

08013fe0 <_lseek_r>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	4d07      	ldr	r5, [pc, #28]	; (8014000 <_lseek_r+0x20>)
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	4608      	mov	r0, r1
 8013fe8:	4611      	mov	r1, r2
 8013fea:	2200      	movs	r2, #0
 8013fec:	602a      	str	r2, [r5, #0]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	f7f5 fa6a 	bl	80094c8 <_lseek>
 8013ff4:	1c43      	adds	r3, r0, #1
 8013ff6:	d102      	bne.n	8013ffe <_lseek_r+0x1e>
 8013ff8:	682b      	ldr	r3, [r5, #0]
 8013ffa:	b103      	cbz	r3, 8013ffe <_lseek_r+0x1e>
 8013ffc:	6023      	str	r3, [r4, #0]
 8013ffe:	bd38      	pop	{r3, r4, r5, pc}
 8014000:	20000ad4 	.word	0x20000ad4

08014004 <_read_r>:
 8014004:	b538      	push	{r3, r4, r5, lr}
 8014006:	4d07      	ldr	r5, [pc, #28]	; (8014024 <_read_r+0x20>)
 8014008:	4604      	mov	r4, r0
 801400a:	4608      	mov	r0, r1
 801400c:	4611      	mov	r1, r2
 801400e:	2200      	movs	r2, #0
 8014010:	602a      	str	r2, [r5, #0]
 8014012:	461a      	mov	r2, r3
 8014014:	f7f5 f9f8 	bl	8009408 <_read>
 8014018:	1c43      	adds	r3, r0, #1
 801401a:	d102      	bne.n	8014022 <_read_r+0x1e>
 801401c:	682b      	ldr	r3, [r5, #0]
 801401e:	b103      	cbz	r3, 8014022 <_read_r+0x1e>
 8014020:	6023      	str	r3, [r4, #0]
 8014022:	bd38      	pop	{r3, r4, r5, pc}
 8014024:	20000ad4 	.word	0x20000ad4

08014028 <_kill_r>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	4d07      	ldr	r5, [pc, #28]	; (8014048 <_kill_r+0x20>)
 801402c:	2300      	movs	r3, #0
 801402e:	4604      	mov	r4, r0
 8014030:	4608      	mov	r0, r1
 8014032:	4611      	mov	r1, r2
 8014034:	602b      	str	r3, [r5, #0]
 8014036:	f7f5 f9cd 	bl	80093d4 <_kill>
 801403a:	1c43      	adds	r3, r0, #1
 801403c:	d102      	bne.n	8014044 <_kill_r+0x1c>
 801403e:	682b      	ldr	r3, [r5, #0]
 8014040:	b103      	cbz	r3, 8014044 <_kill_r+0x1c>
 8014042:	6023      	str	r3, [r4, #0]
 8014044:	bd38      	pop	{r3, r4, r5, pc}
 8014046:	bf00      	nop
 8014048:	20000ad4 	.word	0x20000ad4

0801404c <_getpid_r>:
 801404c:	f7f5 b9ba 	b.w	80093c4 <_getpid>

08014050 <_sbrk_r>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	4d06      	ldr	r5, [pc, #24]	; (801406c <_sbrk_r+0x1c>)
 8014054:	2300      	movs	r3, #0
 8014056:	4604      	mov	r4, r0
 8014058:	4608      	mov	r0, r1
 801405a:	602b      	str	r3, [r5, #0]
 801405c:	f7f5 fa42 	bl	80094e4 <_sbrk>
 8014060:	1c43      	adds	r3, r0, #1
 8014062:	d102      	bne.n	801406a <_sbrk_r+0x1a>
 8014064:	682b      	ldr	r3, [r5, #0]
 8014066:	b103      	cbz	r3, 801406a <_sbrk_r+0x1a>
 8014068:	6023      	str	r3, [r4, #0]
 801406a:	bd38      	pop	{r3, r4, r5, pc}
 801406c:	20000ad4 	.word	0x20000ad4

08014070 <_write_r>:
 8014070:	b538      	push	{r3, r4, r5, lr}
 8014072:	4d07      	ldr	r5, [pc, #28]	; (8014090 <_write_r+0x20>)
 8014074:	4604      	mov	r4, r0
 8014076:	4608      	mov	r0, r1
 8014078:	4611      	mov	r1, r2
 801407a:	2200      	movs	r2, #0
 801407c:	602a      	str	r2, [r5, #0]
 801407e:	461a      	mov	r2, r3
 8014080:	f7f5 f9df 	bl	8009442 <_write>
 8014084:	1c43      	adds	r3, r0, #1
 8014086:	d102      	bne.n	801408e <_write_r+0x1e>
 8014088:	682b      	ldr	r3, [r5, #0]
 801408a:	b103      	cbz	r3, 801408e <_write_r+0x1e>
 801408c:	6023      	str	r3, [r4, #0]
 801408e:	bd38      	pop	{r3, r4, r5, pc}
 8014090:	20000ad4 	.word	0x20000ad4

08014094 <__errno>:
 8014094:	4b01      	ldr	r3, [pc, #4]	; (801409c <__errno+0x8>)
 8014096:	6818      	ldr	r0, [r3, #0]
 8014098:	4770      	bx	lr
 801409a:	bf00      	nop
 801409c:	200000d0 	.word	0x200000d0

080140a0 <__libc_init_array>:
 80140a0:	b570      	push	{r4, r5, r6, lr}
 80140a2:	4d0d      	ldr	r5, [pc, #52]	; (80140d8 <__libc_init_array+0x38>)
 80140a4:	4c0d      	ldr	r4, [pc, #52]	; (80140dc <__libc_init_array+0x3c>)
 80140a6:	1b64      	subs	r4, r4, r5
 80140a8:	10a4      	asrs	r4, r4, #2
 80140aa:	2600      	movs	r6, #0
 80140ac:	42a6      	cmp	r6, r4
 80140ae:	d109      	bne.n	80140c4 <__libc_init_array+0x24>
 80140b0:	4d0b      	ldr	r5, [pc, #44]	; (80140e0 <__libc_init_array+0x40>)
 80140b2:	4c0c      	ldr	r4, [pc, #48]	; (80140e4 <__libc_init_array+0x44>)
 80140b4:	f003 fa7c 	bl	80175b0 <_init>
 80140b8:	1b64      	subs	r4, r4, r5
 80140ba:	10a4      	asrs	r4, r4, #2
 80140bc:	2600      	movs	r6, #0
 80140be:	42a6      	cmp	r6, r4
 80140c0:	d105      	bne.n	80140ce <__libc_init_array+0x2e>
 80140c2:	bd70      	pop	{r4, r5, r6, pc}
 80140c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80140c8:	4798      	blx	r3
 80140ca:	3601      	adds	r6, #1
 80140cc:	e7ee      	b.n	80140ac <__libc_init_array+0xc>
 80140ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80140d2:	4798      	blx	r3
 80140d4:	3601      	adds	r6, #1
 80140d6:	e7f2      	b.n	80140be <__libc_init_array+0x1e>
 80140d8:	08018b84 	.word	0x08018b84
 80140dc:	08018b84 	.word	0x08018b84
 80140e0:	08018b84 	.word	0x08018b84
 80140e4:	08018b94 	.word	0x08018b94

080140e8 <__retarget_lock_init_recursive>:
 80140e8:	4770      	bx	lr

080140ea <__retarget_lock_acquire_recursive>:
 80140ea:	4770      	bx	lr

080140ec <__retarget_lock_release_recursive>:
 80140ec:	4770      	bx	lr

080140ee <memcpy>:
 80140ee:	440a      	add	r2, r1
 80140f0:	4291      	cmp	r1, r2
 80140f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80140f6:	d100      	bne.n	80140fa <memcpy+0xc>
 80140f8:	4770      	bx	lr
 80140fa:	b510      	push	{r4, lr}
 80140fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014104:	4291      	cmp	r1, r2
 8014106:	d1f9      	bne.n	80140fc <memcpy+0xe>
 8014108:	bd10      	pop	{r4, pc}
	...

0801410c <nanf>:
 801410c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014114 <nanf+0x8>
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	7fc00000 	.word	0x7fc00000

08014118 <quorem>:
 8014118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801411c:	6903      	ldr	r3, [r0, #16]
 801411e:	690c      	ldr	r4, [r1, #16]
 8014120:	42a3      	cmp	r3, r4
 8014122:	4607      	mov	r7, r0
 8014124:	db7e      	blt.n	8014224 <quorem+0x10c>
 8014126:	3c01      	subs	r4, #1
 8014128:	f101 0814 	add.w	r8, r1, #20
 801412c:	f100 0514 	add.w	r5, r0, #20
 8014130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801413a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801413e:	3301      	adds	r3, #1
 8014140:	429a      	cmp	r2, r3
 8014142:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014146:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801414a:	fbb2 f6f3 	udiv	r6, r2, r3
 801414e:	d331      	bcc.n	80141b4 <quorem+0x9c>
 8014150:	f04f 0e00 	mov.w	lr, #0
 8014154:	4640      	mov	r0, r8
 8014156:	46ac      	mov	ip, r5
 8014158:	46f2      	mov	sl, lr
 801415a:	f850 2b04 	ldr.w	r2, [r0], #4
 801415e:	b293      	uxth	r3, r2
 8014160:	fb06 e303 	mla	r3, r6, r3, lr
 8014164:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014168:	0c1a      	lsrs	r2, r3, #16
 801416a:	b29b      	uxth	r3, r3
 801416c:	ebaa 0303 	sub.w	r3, sl, r3
 8014170:	f8dc a000 	ldr.w	sl, [ip]
 8014174:	fa13 f38a 	uxtah	r3, r3, sl
 8014178:	fb06 220e 	mla	r2, r6, lr, r2
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	9b00      	ldr	r3, [sp, #0]
 8014180:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014184:	b292      	uxth	r2, r2
 8014186:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801418a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801418e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014192:	4581      	cmp	r9, r0
 8014194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014198:	f84c 3b04 	str.w	r3, [ip], #4
 801419c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141a0:	d2db      	bcs.n	801415a <quorem+0x42>
 80141a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80141a6:	b92b      	cbnz	r3, 80141b4 <quorem+0x9c>
 80141a8:	9b01      	ldr	r3, [sp, #4]
 80141aa:	3b04      	subs	r3, #4
 80141ac:	429d      	cmp	r5, r3
 80141ae:	461a      	mov	r2, r3
 80141b0:	d32c      	bcc.n	801420c <quorem+0xf4>
 80141b2:	613c      	str	r4, [r7, #16]
 80141b4:	4638      	mov	r0, r7
 80141b6:	f001 f93b 	bl	8015430 <__mcmp>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	db22      	blt.n	8014204 <quorem+0xec>
 80141be:	3601      	adds	r6, #1
 80141c0:	4629      	mov	r1, r5
 80141c2:	2000      	movs	r0, #0
 80141c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80141c8:	f8d1 c000 	ldr.w	ip, [r1]
 80141cc:	b293      	uxth	r3, r2
 80141ce:	1ac3      	subs	r3, r0, r3
 80141d0:	0c12      	lsrs	r2, r2, #16
 80141d2:	fa13 f38c 	uxtah	r3, r3, ip
 80141d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80141da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141de:	b29b      	uxth	r3, r3
 80141e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141e4:	45c1      	cmp	r9, r8
 80141e6:	f841 3b04 	str.w	r3, [r1], #4
 80141ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80141ee:	d2e9      	bcs.n	80141c4 <quorem+0xac>
 80141f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141f8:	b922      	cbnz	r2, 8014204 <quorem+0xec>
 80141fa:	3b04      	subs	r3, #4
 80141fc:	429d      	cmp	r5, r3
 80141fe:	461a      	mov	r2, r3
 8014200:	d30a      	bcc.n	8014218 <quorem+0x100>
 8014202:	613c      	str	r4, [r7, #16]
 8014204:	4630      	mov	r0, r6
 8014206:	b003      	add	sp, #12
 8014208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420c:	6812      	ldr	r2, [r2, #0]
 801420e:	3b04      	subs	r3, #4
 8014210:	2a00      	cmp	r2, #0
 8014212:	d1ce      	bne.n	80141b2 <quorem+0x9a>
 8014214:	3c01      	subs	r4, #1
 8014216:	e7c9      	b.n	80141ac <quorem+0x94>
 8014218:	6812      	ldr	r2, [r2, #0]
 801421a:	3b04      	subs	r3, #4
 801421c:	2a00      	cmp	r2, #0
 801421e:	d1f0      	bne.n	8014202 <quorem+0xea>
 8014220:	3c01      	subs	r4, #1
 8014222:	e7eb      	b.n	80141fc <quorem+0xe4>
 8014224:	2000      	movs	r0, #0
 8014226:	e7ee      	b.n	8014206 <quorem+0xee>

08014228 <_dtoa_r>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	ed2d 8b04 	vpush	{d8-d9}
 8014230:	69c5      	ldr	r5, [r0, #28]
 8014232:	b093      	sub	sp, #76	; 0x4c
 8014234:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014238:	ec57 6b10 	vmov	r6, r7, d0
 801423c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014240:	9107      	str	r1, [sp, #28]
 8014242:	4604      	mov	r4, r0
 8014244:	920a      	str	r2, [sp, #40]	; 0x28
 8014246:	930d      	str	r3, [sp, #52]	; 0x34
 8014248:	b975      	cbnz	r5, 8014268 <_dtoa_r+0x40>
 801424a:	2010      	movs	r0, #16
 801424c:	f7fe fdd6 	bl	8012dfc <malloc>
 8014250:	4602      	mov	r2, r0
 8014252:	61e0      	str	r0, [r4, #28]
 8014254:	b920      	cbnz	r0, 8014260 <_dtoa_r+0x38>
 8014256:	4bae      	ldr	r3, [pc, #696]	; (8014510 <_dtoa_r+0x2e8>)
 8014258:	21ef      	movs	r1, #239	; 0xef
 801425a:	48ae      	ldr	r0, [pc, #696]	; (8014514 <_dtoa_r+0x2ec>)
 801425c:	f7fe fd9e 	bl	8012d9c <__assert_func>
 8014260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014264:	6005      	str	r5, [r0, #0]
 8014266:	60c5      	str	r5, [r0, #12]
 8014268:	69e3      	ldr	r3, [r4, #28]
 801426a:	6819      	ldr	r1, [r3, #0]
 801426c:	b151      	cbz	r1, 8014284 <_dtoa_r+0x5c>
 801426e:	685a      	ldr	r2, [r3, #4]
 8014270:	604a      	str	r2, [r1, #4]
 8014272:	2301      	movs	r3, #1
 8014274:	4093      	lsls	r3, r2
 8014276:	608b      	str	r3, [r1, #8]
 8014278:	4620      	mov	r0, r4
 801427a:	f000 fe53 	bl	8014f24 <_Bfree>
 801427e:	69e3      	ldr	r3, [r4, #28]
 8014280:	2200      	movs	r2, #0
 8014282:	601a      	str	r2, [r3, #0]
 8014284:	1e3b      	subs	r3, r7, #0
 8014286:	bfbb      	ittet	lt
 8014288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801428c:	9303      	strlt	r3, [sp, #12]
 801428e:	2300      	movge	r3, #0
 8014290:	2201      	movlt	r2, #1
 8014292:	bfac      	ite	ge
 8014294:	f8c8 3000 	strge.w	r3, [r8]
 8014298:	f8c8 2000 	strlt.w	r2, [r8]
 801429c:	4b9e      	ldr	r3, [pc, #632]	; (8014518 <_dtoa_r+0x2f0>)
 801429e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80142a2:	ea33 0308 	bics.w	r3, r3, r8
 80142a6:	d11b      	bne.n	80142e0 <_dtoa_r+0xb8>
 80142a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80142ae:	6013      	str	r3, [r2, #0]
 80142b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80142b4:	4333      	orrs	r3, r6
 80142b6:	f000 8593 	beq.w	8014de0 <_dtoa_r+0xbb8>
 80142ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142bc:	b963      	cbnz	r3, 80142d8 <_dtoa_r+0xb0>
 80142be:	4b97      	ldr	r3, [pc, #604]	; (801451c <_dtoa_r+0x2f4>)
 80142c0:	e027      	b.n	8014312 <_dtoa_r+0xea>
 80142c2:	4b97      	ldr	r3, [pc, #604]	; (8014520 <_dtoa_r+0x2f8>)
 80142c4:	9300      	str	r3, [sp, #0]
 80142c6:	3308      	adds	r3, #8
 80142c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	9800      	ldr	r0, [sp, #0]
 80142ce:	b013      	add	sp, #76	; 0x4c
 80142d0:	ecbd 8b04 	vpop	{d8-d9}
 80142d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d8:	4b90      	ldr	r3, [pc, #576]	; (801451c <_dtoa_r+0x2f4>)
 80142da:	9300      	str	r3, [sp, #0]
 80142dc:	3303      	adds	r3, #3
 80142de:	e7f3      	b.n	80142c8 <_dtoa_r+0xa0>
 80142e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80142e4:	2200      	movs	r2, #0
 80142e6:	ec51 0b17 	vmov	r0, r1, d7
 80142ea:	eeb0 8a47 	vmov.f32	s16, s14
 80142ee:	eef0 8a67 	vmov.f32	s17, s15
 80142f2:	2300      	movs	r3, #0
 80142f4:	f7ec fc10 	bl	8000b18 <__aeabi_dcmpeq>
 80142f8:	4681      	mov	r9, r0
 80142fa:	b160      	cbz	r0, 8014316 <_dtoa_r+0xee>
 80142fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142fe:	2301      	movs	r3, #1
 8014300:	6013      	str	r3, [r2, #0]
 8014302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 8568 	beq.w	8014dda <_dtoa_r+0xbb2>
 801430a:	4b86      	ldr	r3, [pc, #536]	; (8014524 <_dtoa_r+0x2fc>)
 801430c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801430e:	6013      	str	r3, [r2, #0]
 8014310:	3b01      	subs	r3, #1
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	e7da      	b.n	80142cc <_dtoa_r+0xa4>
 8014316:	aa10      	add	r2, sp, #64	; 0x40
 8014318:	a911      	add	r1, sp, #68	; 0x44
 801431a:	4620      	mov	r0, r4
 801431c:	eeb0 0a48 	vmov.f32	s0, s16
 8014320:	eef0 0a68 	vmov.f32	s1, s17
 8014324:	f001 f99a 	bl	801565c <__d2b>
 8014328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801432c:	4682      	mov	sl, r0
 801432e:	2d00      	cmp	r5, #0
 8014330:	d07f      	beq.n	8014432 <_dtoa_r+0x20a>
 8014332:	ee18 3a90 	vmov	r3, s17
 8014336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801433a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801433e:	ec51 0b18 	vmov	r0, r1, d8
 8014342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801434a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801434e:	4619      	mov	r1, r3
 8014350:	2200      	movs	r2, #0
 8014352:	4b75      	ldr	r3, [pc, #468]	; (8014528 <_dtoa_r+0x300>)
 8014354:	f7eb ffc0 	bl	80002d8 <__aeabi_dsub>
 8014358:	a367      	add	r3, pc, #412	; (adr r3, 80144f8 <_dtoa_r+0x2d0>)
 801435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435e:	f7ec f973 	bl	8000648 <__aeabi_dmul>
 8014362:	a367      	add	r3, pc, #412	; (adr r3, 8014500 <_dtoa_r+0x2d8>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7eb ffb8 	bl	80002dc <__adddf3>
 801436c:	4606      	mov	r6, r0
 801436e:	4628      	mov	r0, r5
 8014370:	460f      	mov	r7, r1
 8014372:	f7ec f8ff 	bl	8000574 <__aeabi_i2d>
 8014376:	a364      	add	r3, pc, #400	; (adr r3, 8014508 <_dtoa_r+0x2e0>)
 8014378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437c:	f7ec f964 	bl	8000648 <__aeabi_dmul>
 8014380:	4602      	mov	r2, r0
 8014382:	460b      	mov	r3, r1
 8014384:	4630      	mov	r0, r6
 8014386:	4639      	mov	r1, r7
 8014388:	f7eb ffa8 	bl	80002dc <__adddf3>
 801438c:	4606      	mov	r6, r0
 801438e:	460f      	mov	r7, r1
 8014390:	f7ec fc0a 	bl	8000ba8 <__aeabi_d2iz>
 8014394:	2200      	movs	r2, #0
 8014396:	4683      	mov	fp, r0
 8014398:	2300      	movs	r3, #0
 801439a:	4630      	mov	r0, r6
 801439c:	4639      	mov	r1, r7
 801439e:	f7ec fbc5 	bl	8000b2c <__aeabi_dcmplt>
 80143a2:	b148      	cbz	r0, 80143b8 <_dtoa_r+0x190>
 80143a4:	4658      	mov	r0, fp
 80143a6:	f7ec f8e5 	bl	8000574 <__aeabi_i2d>
 80143aa:	4632      	mov	r2, r6
 80143ac:	463b      	mov	r3, r7
 80143ae:	f7ec fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 80143b2:	b908      	cbnz	r0, 80143b8 <_dtoa_r+0x190>
 80143b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143b8:	f1bb 0f16 	cmp.w	fp, #22
 80143bc:	d857      	bhi.n	801446e <_dtoa_r+0x246>
 80143be:	4b5b      	ldr	r3, [pc, #364]	; (801452c <_dtoa_r+0x304>)
 80143c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80143c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c8:	ec51 0b18 	vmov	r0, r1, d8
 80143cc:	f7ec fbae 	bl	8000b2c <__aeabi_dcmplt>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d04e      	beq.n	8014472 <_dtoa_r+0x24a>
 80143d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143d8:	2300      	movs	r3, #0
 80143da:	930c      	str	r3, [sp, #48]	; 0x30
 80143dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143de:	1b5b      	subs	r3, r3, r5
 80143e0:	1e5a      	subs	r2, r3, #1
 80143e2:	bf45      	ittet	mi
 80143e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80143e8:	9305      	strmi	r3, [sp, #20]
 80143ea:	2300      	movpl	r3, #0
 80143ec:	2300      	movmi	r3, #0
 80143ee:	9206      	str	r2, [sp, #24]
 80143f0:	bf54      	ite	pl
 80143f2:	9305      	strpl	r3, [sp, #20]
 80143f4:	9306      	strmi	r3, [sp, #24]
 80143f6:	f1bb 0f00 	cmp.w	fp, #0
 80143fa:	db3c      	blt.n	8014476 <_dtoa_r+0x24e>
 80143fc:	9b06      	ldr	r3, [sp, #24]
 80143fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014402:	445b      	add	r3, fp
 8014404:	9306      	str	r3, [sp, #24]
 8014406:	2300      	movs	r3, #0
 8014408:	9308      	str	r3, [sp, #32]
 801440a:	9b07      	ldr	r3, [sp, #28]
 801440c:	2b09      	cmp	r3, #9
 801440e:	d868      	bhi.n	80144e2 <_dtoa_r+0x2ba>
 8014410:	2b05      	cmp	r3, #5
 8014412:	bfc4      	itt	gt
 8014414:	3b04      	subgt	r3, #4
 8014416:	9307      	strgt	r3, [sp, #28]
 8014418:	9b07      	ldr	r3, [sp, #28]
 801441a:	f1a3 0302 	sub.w	r3, r3, #2
 801441e:	bfcc      	ite	gt
 8014420:	2500      	movgt	r5, #0
 8014422:	2501      	movle	r5, #1
 8014424:	2b03      	cmp	r3, #3
 8014426:	f200 8085 	bhi.w	8014534 <_dtoa_r+0x30c>
 801442a:	e8df f003 	tbb	[pc, r3]
 801442e:	3b2e      	.short	0x3b2e
 8014430:	5839      	.short	0x5839
 8014432:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014436:	441d      	add	r5, r3
 8014438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801443c:	2b20      	cmp	r3, #32
 801443e:	bfc1      	itttt	gt
 8014440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014444:	fa08 f803 	lslgt.w	r8, r8, r3
 8014448:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801444c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014450:	bfd6      	itet	le
 8014452:	f1c3 0320 	rsble	r3, r3, #32
 8014456:	ea48 0003 	orrgt.w	r0, r8, r3
 801445a:	fa06 f003 	lslle.w	r0, r6, r3
 801445e:	f7ec f879 	bl	8000554 <__aeabi_ui2d>
 8014462:	2201      	movs	r2, #1
 8014464:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014468:	3d01      	subs	r5, #1
 801446a:	920e      	str	r2, [sp, #56]	; 0x38
 801446c:	e76f      	b.n	801434e <_dtoa_r+0x126>
 801446e:	2301      	movs	r3, #1
 8014470:	e7b3      	b.n	80143da <_dtoa_r+0x1b2>
 8014472:	900c      	str	r0, [sp, #48]	; 0x30
 8014474:	e7b2      	b.n	80143dc <_dtoa_r+0x1b4>
 8014476:	9b05      	ldr	r3, [sp, #20]
 8014478:	eba3 030b 	sub.w	r3, r3, fp
 801447c:	9305      	str	r3, [sp, #20]
 801447e:	f1cb 0300 	rsb	r3, fp, #0
 8014482:	9308      	str	r3, [sp, #32]
 8014484:	2300      	movs	r3, #0
 8014486:	930b      	str	r3, [sp, #44]	; 0x2c
 8014488:	e7bf      	b.n	801440a <_dtoa_r+0x1e2>
 801448a:	2300      	movs	r3, #0
 801448c:	9309      	str	r3, [sp, #36]	; 0x24
 801448e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014490:	2b00      	cmp	r3, #0
 8014492:	dc52      	bgt.n	801453a <_dtoa_r+0x312>
 8014494:	2301      	movs	r3, #1
 8014496:	9301      	str	r3, [sp, #4]
 8014498:	9304      	str	r3, [sp, #16]
 801449a:	461a      	mov	r2, r3
 801449c:	920a      	str	r2, [sp, #40]	; 0x28
 801449e:	e00b      	b.n	80144b8 <_dtoa_r+0x290>
 80144a0:	2301      	movs	r3, #1
 80144a2:	e7f3      	b.n	801448c <_dtoa_r+0x264>
 80144a4:	2300      	movs	r3, #0
 80144a6:	9309      	str	r3, [sp, #36]	; 0x24
 80144a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144aa:	445b      	add	r3, fp
 80144ac:	9301      	str	r3, [sp, #4]
 80144ae:	3301      	adds	r3, #1
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	9304      	str	r3, [sp, #16]
 80144b4:	bfb8      	it	lt
 80144b6:	2301      	movlt	r3, #1
 80144b8:	69e0      	ldr	r0, [r4, #28]
 80144ba:	2100      	movs	r1, #0
 80144bc:	2204      	movs	r2, #4
 80144be:	f102 0614 	add.w	r6, r2, #20
 80144c2:	429e      	cmp	r6, r3
 80144c4:	d93d      	bls.n	8014542 <_dtoa_r+0x31a>
 80144c6:	6041      	str	r1, [r0, #4]
 80144c8:	4620      	mov	r0, r4
 80144ca:	f000 fceb 	bl	8014ea4 <_Balloc>
 80144ce:	9000      	str	r0, [sp, #0]
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d139      	bne.n	8014548 <_dtoa_r+0x320>
 80144d4:	4b16      	ldr	r3, [pc, #88]	; (8014530 <_dtoa_r+0x308>)
 80144d6:	4602      	mov	r2, r0
 80144d8:	f240 11af 	movw	r1, #431	; 0x1af
 80144dc:	e6bd      	b.n	801425a <_dtoa_r+0x32>
 80144de:	2301      	movs	r3, #1
 80144e0:	e7e1      	b.n	80144a6 <_dtoa_r+0x27e>
 80144e2:	2501      	movs	r5, #1
 80144e4:	2300      	movs	r3, #0
 80144e6:	9307      	str	r3, [sp, #28]
 80144e8:	9509      	str	r5, [sp, #36]	; 0x24
 80144ea:	f04f 33ff 	mov.w	r3, #4294967295
 80144ee:	9301      	str	r3, [sp, #4]
 80144f0:	9304      	str	r3, [sp, #16]
 80144f2:	2200      	movs	r2, #0
 80144f4:	2312      	movs	r3, #18
 80144f6:	e7d1      	b.n	801449c <_dtoa_r+0x274>
 80144f8:	636f4361 	.word	0x636f4361
 80144fc:	3fd287a7 	.word	0x3fd287a7
 8014500:	8b60c8b3 	.word	0x8b60c8b3
 8014504:	3fc68a28 	.word	0x3fc68a28
 8014508:	509f79fb 	.word	0x509f79fb
 801450c:	3fd34413 	.word	0x3fd34413
 8014510:	080187d2 	.word	0x080187d2
 8014514:	080187e9 	.word	0x080187e9
 8014518:	7ff00000 	.word	0x7ff00000
 801451c:	080187ce 	.word	0x080187ce
 8014520:	080187c5 	.word	0x080187c5
 8014524:	0801879d 	.word	0x0801879d
 8014528:	3ff80000 	.word	0x3ff80000
 801452c:	080188d8 	.word	0x080188d8
 8014530:	08018841 	.word	0x08018841
 8014534:	2301      	movs	r3, #1
 8014536:	9309      	str	r3, [sp, #36]	; 0x24
 8014538:	e7d7      	b.n	80144ea <_dtoa_r+0x2c2>
 801453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801453c:	9301      	str	r3, [sp, #4]
 801453e:	9304      	str	r3, [sp, #16]
 8014540:	e7ba      	b.n	80144b8 <_dtoa_r+0x290>
 8014542:	3101      	adds	r1, #1
 8014544:	0052      	lsls	r2, r2, #1
 8014546:	e7ba      	b.n	80144be <_dtoa_r+0x296>
 8014548:	69e3      	ldr	r3, [r4, #28]
 801454a:	9a00      	ldr	r2, [sp, #0]
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	9b04      	ldr	r3, [sp, #16]
 8014550:	2b0e      	cmp	r3, #14
 8014552:	f200 80a8 	bhi.w	80146a6 <_dtoa_r+0x47e>
 8014556:	2d00      	cmp	r5, #0
 8014558:	f000 80a5 	beq.w	80146a6 <_dtoa_r+0x47e>
 801455c:	f1bb 0f00 	cmp.w	fp, #0
 8014560:	dd38      	ble.n	80145d4 <_dtoa_r+0x3ac>
 8014562:	4bc0      	ldr	r3, [pc, #768]	; (8014864 <_dtoa_r+0x63c>)
 8014564:	f00b 020f 	and.w	r2, fp, #15
 8014568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801456c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014570:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014574:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014578:	d019      	beq.n	80145ae <_dtoa_r+0x386>
 801457a:	4bbb      	ldr	r3, [pc, #748]	; (8014868 <_dtoa_r+0x640>)
 801457c:	ec51 0b18 	vmov	r0, r1, d8
 8014580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014584:	f7ec f98a 	bl	800089c <__aeabi_ddiv>
 8014588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801458c:	f008 080f 	and.w	r8, r8, #15
 8014590:	2503      	movs	r5, #3
 8014592:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014868 <_dtoa_r+0x640>
 8014596:	f1b8 0f00 	cmp.w	r8, #0
 801459a:	d10a      	bne.n	80145b2 <_dtoa_r+0x38a>
 801459c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145a0:	4632      	mov	r2, r6
 80145a2:	463b      	mov	r3, r7
 80145a4:	f7ec f97a 	bl	800089c <__aeabi_ddiv>
 80145a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145ac:	e02b      	b.n	8014606 <_dtoa_r+0x3de>
 80145ae:	2502      	movs	r5, #2
 80145b0:	e7ef      	b.n	8014592 <_dtoa_r+0x36a>
 80145b2:	f018 0f01 	tst.w	r8, #1
 80145b6:	d008      	beq.n	80145ca <_dtoa_r+0x3a2>
 80145b8:	4630      	mov	r0, r6
 80145ba:	4639      	mov	r1, r7
 80145bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80145c0:	f7ec f842 	bl	8000648 <__aeabi_dmul>
 80145c4:	3501      	adds	r5, #1
 80145c6:	4606      	mov	r6, r0
 80145c8:	460f      	mov	r7, r1
 80145ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80145ce:	f109 0908 	add.w	r9, r9, #8
 80145d2:	e7e0      	b.n	8014596 <_dtoa_r+0x36e>
 80145d4:	f000 809f 	beq.w	8014716 <_dtoa_r+0x4ee>
 80145d8:	f1cb 0600 	rsb	r6, fp, #0
 80145dc:	4ba1      	ldr	r3, [pc, #644]	; (8014864 <_dtoa_r+0x63c>)
 80145de:	4fa2      	ldr	r7, [pc, #648]	; (8014868 <_dtoa_r+0x640>)
 80145e0:	f006 020f 	and.w	r2, r6, #15
 80145e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80145e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ec:	ec51 0b18 	vmov	r0, r1, d8
 80145f0:	f7ec f82a 	bl	8000648 <__aeabi_dmul>
 80145f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145f8:	1136      	asrs	r6, r6, #4
 80145fa:	2300      	movs	r3, #0
 80145fc:	2502      	movs	r5, #2
 80145fe:	2e00      	cmp	r6, #0
 8014600:	d17e      	bne.n	8014700 <_dtoa_r+0x4d8>
 8014602:	2b00      	cmp	r3, #0
 8014604:	d1d0      	bne.n	80145a8 <_dtoa_r+0x380>
 8014606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014608:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801460c:	2b00      	cmp	r3, #0
 801460e:	f000 8084 	beq.w	801471a <_dtoa_r+0x4f2>
 8014612:	4b96      	ldr	r3, [pc, #600]	; (801486c <_dtoa_r+0x644>)
 8014614:	2200      	movs	r2, #0
 8014616:	4640      	mov	r0, r8
 8014618:	4649      	mov	r1, r9
 801461a:	f7ec fa87 	bl	8000b2c <__aeabi_dcmplt>
 801461e:	2800      	cmp	r0, #0
 8014620:	d07b      	beq.n	801471a <_dtoa_r+0x4f2>
 8014622:	9b04      	ldr	r3, [sp, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d078      	beq.n	801471a <_dtoa_r+0x4f2>
 8014628:	9b01      	ldr	r3, [sp, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	dd39      	ble.n	80146a2 <_dtoa_r+0x47a>
 801462e:	4b90      	ldr	r3, [pc, #576]	; (8014870 <_dtoa_r+0x648>)
 8014630:	2200      	movs	r2, #0
 8014632:	4640      	mov	r0, r8
 8014634:	4649      	mov	r1, r9
 8014636:	f7ec f807 	bl	8000648 <__aeabi_dmul>
 801463a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801463e:	9e01      	ldr	r6, [sp, #4]
 8014640:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014644:	3501      	adds	r5, #1
 8014646:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801464a:	4628      	mov	r0, r5
 801464c:	f7eb ff92 	bl	8000574 <__aeabi_i2d>
 8014650:	4642      	mov	r2, r8
 8014652:	464b      	mov	r3, r9
 8014654:	f7eb fff8 	bl	8000648 <__aeabi_dmul>
 8014658:	4b86      	ldr	r3, [pc, #536]	; (8014874 <_dtoa_r+0x64c>)
 801465a:	2200      	movs	r2, #0
 801465c:	f7eb fe3e 	bl	80002dc <__adddf3>
 8014660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014668:	9303      	str	r3, [sp, #12]
 801466a:	2e00      	cmp	r6, #0
 801466c:	d158      	bne.n	8014720 <_dtoa_r+0x4f8>
 801466e:	4b82      	ldr	r3, [pc, #520]	; (8014878 <_dtoa_r+0x650>)
 8014670:	2200      	movs	r2, #0
 8014672:	4640      	mov	r0, r8
 8014674:	4649      	mov	r1, r9
 8014676:	f7eb fe2f 	bl	80002d8 <__aeabi_dsub>
 801467a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801467e:	4680      	mov	r8, r0
 8014680:	4689      	mov	r9, r1
 8014682:	f7ec fa71 	bl	8000b68 <__aeabi_dcmpgt>
 8014686:	2800      	cmp	r0, #0
 8014688:	f040 8296 	bne.w	8014bb8 <_dtoa_r+0x990>
 801468c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014690:	4640      	mov	r0, r8
 8014692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014696:	4649      	mov	r1, r9
 8014698:	f7ec fa48 	bl	8000b2c <__aeabi_dcmplt>
 801469c:	2800      	cmp	r0, #0
 801469e:	f040 8289 	bne.w	8014bb4 <_dtoa_r+0x98c>
 80146a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80146a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	f2c0 814e 	blt.w	801494a <_dtoa_r+0x722>
 80146ae:	f1bb 0f0e 	cmp.w	fp, #14
 80146b2:	f300 814a 	bgt.w	801494a <_dtoa_r+0x722>
 80146b6:	4b6b      	ldr	r3, [pc, #428]	; (8014864 <_dtoa_r+0x63c>)
 80146b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80146bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	f280 80dc 	bge.w	8014880 <_dtoa_r+0x658>
 80146c8:	9b04      	ldr	r3, [sp, #16]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	f300 80d8 	bgt.w	8014880 <_dtoa_r+0x658>
 80146d0:	f040 826f 	bne.w	8014bb2 <_dtoa_r+0x98a>
 80146d4:	4b68      	ldr	r3, [pc, #416]	; (8014878 <_dtoa_r+0x650>)
 80146d6:	2200      	movs	r2, #0
 80146d8:	4640      	mov	r0, r8
 80146da:	4649      	mov	r1, r9
 80146dc:	f7eb ffb4 	bl	8000648 <__aeabi_dmul>
 80146e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80146e4:	f7ec fa36 	bl	8000b54 <__aeabi_dcmpge>
 80146e8:	9e04      	ldr	r6, [sp, #16]
 80146ea:	4637      	mov	r7, r6
 80146ec:	2800      	cmp	r0, #0
 80146ee:	f040 8245 	bne.w	8014b7c <_dtoa_r+0x954>
 80146f2:	9d00      	ldr	r5, [sp, #0]
 80146f4:	2331      	movs	r3, #49	; 0x31
 80146f6:	f805 3b01 	strb.w	r3, [r5], #1
 80146fa:	f10b 0b01 	add.w	fp, fp, #1
 80146fe:	e241      	b.n	8014b84 <_dtoa_r+0x95c>
 8014700:	07f2      	lsls	r2, r6, #31
 8014702:	d505      	bpl.n	8014710 <_dtoa_r+0x4e8>
 8014704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014708:	f7eb ff9e 	bl	8000648 <__aeabi_dmul>
 801470c:	3501      	adds	r5, #1
 801470e:	2301      	movs	r3, #1
 8014710:	1076      	asrs	r6, r6, #1
 8014712:	3708      	adds	r7, #8
 8014714:	e773      	b.n	80145fe <_dtoa_r+0x3d6>
 8014716:	2502      	movs	r5, #2
 8014718:	e775      	b.n	8014606 <_dtoa_r+0x3de>
 801471a:	9e04      	ldr	r6, [sp, #16]
 801471c:	465f      	mov	r7, fp
 801471e:	e792      	b.n	8014646 <_dtoa_r+0x41e>
 8014720:	9900      	ldr	r1, [sp, #0]
 8014722:	4b50      	ldr	r3, [pc, #320]	; (8014864 <_dtoa_r+0x63c>)
 8014724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014728:	4431      	add	r1, r6
 801472a:	9102      	str	r1, [sp, #8]
 801472c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801472e:	eeb0 9a47 	vmov.f32	s18, s14
 8014732:	eef0 9a67 	vmov.f32	s19, s15
 8014736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801473a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801473e:	2900      	cmp	r1, #0
 8014740:	d044      	beq.n	80147cc <_dtoa_r+0x5a4>
 8014742:	494e      	ldr	r1, [pc, #312]	; (801487c <_dtoa_r+0x654>)
 8014744:	2000      	movs	r0, #0
 8014746:	f7ec f8a9 	bl	800089c <__aeabi_ddiv>
 801474a:	ec53 2b19 	vmov	r2, r3, d9
 801474e:	f7eb fdc3 	bl	80002d8 <__aeabi_dsub>
 8014752:	9d00      	ldr	r5, [sp, #0]
 8014754:	ec41 0b19 	vmov	d9, r0, r1
 8014758:	4649      	mov	r1, r9
 801475a:	4640      	mov	r0, r8
 801475c:	f7ec fa24 	bl	8000ba8 <__aeabi_d2iz>
 8014760:	4606      	mov	r6, r0
 8014762:	f7eb ff07 	bl	8000574 <__aeabi_i2d>
 8014766:	4602      	mov	r2, r0
 8014768:	460b      	mov	r3, r1
 801476a:	4640      	mov	r0, r8
 801476c:	4649      	mov	r1, r9
 801476e:	f7eb fdb3 	bl	80002d8 <__aeabi_dsub>
 8014772:	3630      	adds	r6, #48	; 0x30
 8014774:	f805 6b01 	strb.w	r6, [r5], #1
 8014778:	ec53 2b19 	vmov	r2, r3, d9
 801477c:	4680      	mov	r8, r0
 801477e:	4689      	mov	r9, r1
 8014780:	f7ec f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8014784:	2800      	cmp	r0, #0
 8014786:	d164      	bne.n	8014852 <_dtoa_r+0x62a>
 8014788:	4642      	mov	r2, r8
 801478a:	464b      	mov	r3, r9
 801478c:	4937      	ldr	r1, [pc, #220]	; (801486c <_dtoa_r+0x644>)
 801478e:	2000      	movs	r0, #0
 8014790:	f7eb fda2 	bl	80002d8 <__aeabi_dsub>
 8014794:	ec53 2b19 	vmov	r2, r3, d9
 8014798:	f7ec f9c8 	bl	8000b2c <__aeabi_dcmplt>
 801479c:	2800      	cmp	r0, #0
 801479e:	f040 80b6 	bne.w	801490e <_dtoa_r+0x6e6>
 80147a2:	9b02      	ldr	r3, [sp, #8]
 80147a4:	429d      	cmp	r5, r3
 80147a6:	f43f af7c 	beq.w	80146a2 <_dtoa_r+0x47a>
 80147aa:	4b31      	ldr	r3, [pc, #196]	; (8014870 <_dtoa_r+0x648>)
 80147ac:	ec51 0b19 	vmov	r0, r1, d9
 80147b0:	2200      	movs	r2, #0
 80147b2:	f7eb ff49 	bl	8000648 <__aeabi_dmul>
 80147b6:	4b2e      	ldr	r3, [pc, #184]	; (8014870 <_dtoa_r+0x648>)
 80147b8:	ec41 0b19 	vmov	d9, r0, r1
 80147bc:	2200      	movs	r2, #0
 80147be:	4640      	mov	r0, r8
 80147c0:	4649      	mov	r1, r9
 80147c2:	f7eb ff41 	bl	8000648 <__aeabi_dmul>
 80147c6:	4680      	mov	r8, r0
 80147c8:	4689      	mov	r9, r1
 80147ca:	e7c5      	b.n	8014758 <_dtoa_r+0x530>
 80147cc:	ec51 0b17 	vmov	r0, r1, d7
 80147d0:	f7eb ff3a 	bl	8000648 <__aeabi_dmul>
 80147d4:	9b02      	ldr	r3, [sp, #8]
 80147d6:	9d00      	ldr	r5, [sp, #0]
 80147d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80147da:	ec41 0b19 	vmov	d9, r0, r1
 80147de:	4649      	mov	r1, r9
 80147e0:	4640      	mov	r0, r8
 80147e2:	f7ec f9e1 	bl	8000ba8 <__aeabi_d2iz>
 80147e6:	4606      	mov	r6, r0
 80147e8:	f7eb fec4 	bl	8000574 <__aeabi_i2d>
 80147ec:	3630      	adds	r6, #48	; 0x30
 80147ee:	4602      	mov	r2, r0
 80147f0:	460b      	mov	r3, r1
 80147f2:	4640      	mov	r0, r8
 80147f4:	4649      	mov	r1, r9
 80147f6:	f7eb fd6f 	bl	80002d8 <__aeabi_dsub>
 80147fa:	f805 6b01 	strb.w	r6, [r5], #1
 80147fe:	9b02      	ldr	r3, [sp, #8]
 8014800:	429d      	cmp	r5, r3
 8014802:	4680      	mov	r8, r0
 8014804:	4689      	mov	r9, r1
 8014806:	f04f 0200 	mov.w	r2, #0
 801480a:	d124      	bne.n	8014856 <_dtoa_r+0x62e>
 801480c:	4b1b      	ldr	r3, [pc, #108]	; (801487c <_dtoa_r+0x654>)
 801480e:	ec51 0b19 	vmov	r0, r1, d9
 8014812:	f7eb fd63 	bl	80002dc <__adddf3>
 8014816:	4602      	mov	r2, r0
 8014818:	460b      	mov	r3, r1
 801481a:	4640      	mov	r0, r8
 801481c:	4649      	mov	r1, r9
 801481e:	f7ec f9a3 	bl	8000b68 <__aeabi_dcmpgt>
 8014822:	2800      	cmp	r0, #0
 8014824:	d173      	bne.n	801490e <_dtoa_r+0x6e6>
 8014826:	ec53 2b19 	vmov	r2, r3, d9
 801482a:	4914      	ldr	r1, [pc, #80]	; (801487c <_dtoa_r+0x654>)
 801482c:	2000      	movs	r0, #0
 801482e:	f7eb fd53 	bl	80002d8 <__aeabi_dsub>
 8014832:	4602      	mov	r2, r0
 8014834:	460b      	mov	r3, r1
 8014836:	4640      	mov	r0, r8
 8014838:	4649      	mov	r1, r9
 801483a:	f7ec f977 	bl	8000b2c <__aeabi_dcmplt>
 801483e:	2800      	cmp	r0, #0
 8014840:	f43f af2f 	beq.w	80146a2 <_dtoa_r+0x47a>
 8014844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014846:	1e6b      	subs	r3, r5, #1
 8014848:	930f      	str	r3, [sp, #60]	; 0x3c
 801484a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801484e:	2b30      	cmp	r3, #48	; 0x30
 8014850:	d0f8      	beq.n	8014844 <_dtoa_r+0x61c>
 8014852:	46bb      	mov	fp, r7
 8014854:	e04a      	b.n	80148ec <_dtoa_r+0x6c4>
 8014856:	4b06      	ldr	r3, [pc, #24]	; (8014870 <_dtoa_r+0x648>)
 8014858:	f7eb fef6 	bl	8000648 <__aeabi_dmul>
 801485c:	4680      	mov	r8, r0
 801485e:	4689      	mov	r9, r1
 8014860:	e7bd      	b.n	80147de <_dtoa_r+0x5b6>
 8014862:	bf00      	nop
 8014864:	080188d8 	.word	0x080188d8
 8014868:	080188b0 	.word	0x080188b0
 801486c:	3ff00000 	.word	0x3ff00000
 8014870:	40240000 	.word	0x40240000
 8014874:	401c0000 	.word	0x401c0000
 8014878:	40140000 	.word	0x40140000
 801487c:	3fe00000 	.word	0x3fe00000
 8014880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014884:	9d00      	ldr	r5, [sp, #0]
 8014886:	4642      	mov	r2, r8
 8014888:	464b      	mov	r3, r9
 801488a:	4630      	mov	r0, r6
 801488c:	4639      	mov	r1, r7
 801488e:	f7ec f805 	bl	800089c <__aeabi_ddiv>
 8014892:	f7ec f989 	bl	8000ba8 <__aeabi_d2iz>
 8014896:	9001      	str	r0, [sp, #4]
 8014898:	f7eb fe6c 	bl	8000574 <__aeabi_i2d>
 801489c:	4642      	mov	r2, r8
 801489e:	464b      	mov	r3, r9
 80148a0:	f7eb fed2 	bl	8000648 <__aeabi_dmul>
 80148a4:	4602      	mov	r2, r0
 80148a6:	460b      	mov	r3, r1
 80148a8:	4630      	mov	r0, r6
 80148aa:	4639      	mov	r1, r7
 80148ac:	f7eb fd14 	bl	80002d8 <__aeabi_dsub>
 80148b0:	9e01      	ldr	r6, [sp, #4]
 80148b2:	9f04      	ldr	r7, [sp, #16]
 80148b4:	3630      	adds	r6, #48	; 0x30
 80148b6:	f805 6b01 	strb.w	r6, [r5], #1
 80148ba:	9e00      	ldr	r6, [sp, #0]
 80148bc:	1bae      	subs	r6, r5, r6
 80148be:	42b7      	cmp	r7, r6
 80148c0:	4602      	mov	r2, r0
 80148c2:	460b      	mov	r3, r1
 80148c4:	d134      	bne.n	8014930 <_dtoa_r+0x708>
 80148c6:	f7eb fd09 	bl	80002dc <__adddf3>
 80148ca:	4642      	mov	r2, r8
 80148cc:	464b      	mov	r3, r9
 80148ce:	4606      	mov	r6, r0
 80148d0:	460f      	mov	r7, r1
 80148d2:	f7ec f949 	bl	8000b68 <__aeabi_dcmpgt>
 80148d6:	b9c8      	cbnz	r0, 801490c <_dtoa_r+0x6e4>
 80148d8:	4642      	mov	r2, r8
 80148da:	464b      	mov	r3, r9
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f7ec f91a 	bl	8000b18 <__aeabi_dcmpeq>
 80148e4:	b110      	cbz	r0, 80148ec <_dtoa_r+0x6c4>
 80148e6:	9b01      	ldr	r3, [sp, #4]
 80148e8:	07db      	lsls	r3, r3, #31
 80148ea:	d40f      	bmi.n	801490c <_dtoa_r+0x6e4>
 80148ec:	4651      	mov	r1, sl
 80148ee:	4620      	mov	r0, r4
 80148f0:	f000 fb18 	bl	8014f24 <_Bfree>
 80148f4:	2300      	movs	r3, #0
 80148f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80148f8:	702b      	strb	r3, [r5, #0]
 80148fa:	f10b 0301 	add.w	r3, fp, #1
 80148fe:	6013      	str	r3, [r2, #0]
 8014900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014902:	2b00      	cmp	r3, #0
 8014904:	f43f ace2 	beq.w	80142cc <_dtoa_r+0xa4>
 8014908:	601d      	str	r5, [r3, #0]
 801490a:	e4df      	b.n	80142cc <_dtoa_r+0xa4>
 801490c:	465f      	mov	r7, fp
 801490e:	462b      	mov	r3, r5
 8014910:	461d      	mov	r5, r3
 8014912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014916:	2a39      	cmp	r2, #57	; 0x39
 8014918:	d106      	bne.n	8014928 <_dtoa_r+0x700>
 801491a:	9a00      	ldr	r2, [sp, #0]
 801491c:	429a      	cmp	r2, r3
 801491e:	d1f7      	bne.n	8014910 <_dtoa_r+0x6e8>
 8014920:	9900      	ldr	r1, [sp, #0]
 8014922:	2230      	movs	r2, #48	; 0x30
 8014924:	3701      	adds	r7, #1
 8014926:	700a      	strb	r2, [r1, #0]
 8014928:	781a      	ldrb	r2, [r3, #0]
 801492a:	3201      	adds	r2, #1
 801492c:	701a      	strb	r2, [r3, #0]
 801492e:	e790      	b.n	8014852 <_dtoa_r+0x62a>
 8014930:	4ba3      	ldr	r3, [pc, #652]	; (8014bc0 <_dtoa_r+0x998>)
 8014932:	2200      	movs	r2, #0
 8014934:	f7eb fe88 	bl	8000648 <__aeabi_dmul>
 8014938:	2200      	movs	r2, #0
 801493a:	2300      	movs	r3, #0
 801493c:	4606      	mov	r6, r0
 801493e:	460f      	mov	r7, r1
 8014940:	f7ec f8ea 	bl	8000b18 <__aeabi_dcmpeq>
 8014944:	2800      	cmp	r0, #0
 8014946:	d09e      	beq.n	8014886 <_dtoa_r+0x65e>
 8014948:	e7d0      	b.n	80148ec <_dtoa_r+0x6c4>
 801494a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801494c:	2a00      	cmp	r2, #0
 801494e:	f000 80ca 	beq.w	8014ae6 <_dtoa_r+0x8be>
 8014952:	9a07      	ldr	r2, [sp, #28]
 8014954:	2a01      	cmp	r2, #1
 8014956:	f300 80ad 	bgt.w	8014ab4 <_dtoa_r+0x88c>
 801495a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801495c:	2a00      	cmp	r2, #0
 801495e:	f000 80a5 	beq.w	8014aac <_dtoa_r+0x884>
 8014962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014966:	9e08      	ldr	r6, [sp, #32]
 8014968:	9d05      	ldr	r5, [sp, #20]
 801496a:	9a05      	ldr	r2, [sp, #20]
 801496c:	441a      	add	r2, r3
 801496e:	9205      	str	r2, [sp, #20]
 8014970:	9a06      	ldr	r2, [sp, #24]
 8014972:	2101      	movs	r1, #1
 8014974:	441a      	add	r2, r3
 8014976:	4620      	mov	r0, r4
 8014978:	9206      	str	r2, [sp, #24]
 801497a:	f000 fbd3 	bl	8015124 <__i2b>
 801497e:	4607      	mov	r7, r0
 8014980:	b165      	cbz	r5, 801499c <_dtoa_r+0x774>
 8014982:	9b06      	ldr	r3, [sp, #24]
 8014984:	2b00      	cmp	r3, #0
 8014986:	dd09      	ble.n	801499c <_dtoa_r+0x774>
 8014988:	42ab      	cmp	r3, r5
 801498a:	9a05      	ldr	r2, [sp, #20]
 801498c:	bfa8      	it	ge
 801498e:	462b      	movge	r3, r5
 8014990:	1ad2      	subs	r2, r2, r3
 8014992:	9205      	str	r2, [sp, #20]
 8014994:	9a06      	ldr	r2, [sp, #24]
 8014996:	1aed      	subs	r5, r5, r3
 8014998:	1ad3      	subs	r3, r2, r3
 801499a:	9306      	str	r3, [sp, #24]
 801499c:	9b08      	ldr	r3, [sp, #32]
 801499e:	b1f3      	cbz	r3, 80149de <_dtoa_r+0x7b6>
 80149a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f000 80a3 	beq.w	8014aee <_dtoa_r+0x8c6>
 80149a8:	2e00      	cmp	r6, #0
 80149aa:	dd10      	ble.n	80149ce <_dtoa_r+0x7a6>
 80149ac:	4639      	mov	r1, r7
 80149ae:	4632      	mov	r2, r6
 80149b0:	4620      	mov	r0, r4
 80149b2:	f000 fc77 	bl	80152a4 <__pow5mult>
 80149b6:	4652      	mov	r2, sl
 80149b8:	4601      	mov	r1, r0
 80149ba:	4607      	mov	r7, r0
 80149bc:	4620      	mov	r0, r4
 80149be:	f000 fbc7 	bl	8015150 <__multiply>
 80149c2:	4651      	mov	r1, sl
 80149c4:	4680      	mov	r8, r0
 80149c6:	4620      	mov	r0, r4
 80149c8:	f000 faac 	bl	8014f24 <_Bfree>
 80149cc:	46c2      	mov	sl, r8
 80149ce:	9b08      	ldr	r3, [sp, #32]
 80149d0:	1b9a      	subs	r2, r3, r6
 80149d2:	d004      	beq.n	80149de <_dtoa_r+0x7b6>
 80149d4:	4651      	mov	r1, sl
 80149d6:	4620      	mov	r0, r4
 80149d8:	f000 fc64 	bl	80152a4 <__pow5mult>
 80149dc:	4682      	mov	sl, r0
 80149de:	2101      	movs	r1, #1
 80149e0:	4620      	mov	r0, r4
 80149e2:	f000 fb9f 	bl	8015124 <__i2b>
 80149e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	4606      	mov	r6, r0
 80149ec:	f340 8081 	ble.w	8014af2 <_dtoa_r+0x8ca>
 80149f0:	461a      	mov	r2, r3
 80149f2:	4601      	mov	r1, r0
 80149f4:	4620      	mov	r0, r4
 80149f6:	f000 fc55 	bl	80152a4 <__pow5mult>
 80149fa:	9b07      	ldr	r3, [sp, #28]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	4606      	mov	r6, r0
 8014a00:	dd7a      	ble.n	8014af8 <_dtoa_r+0x8d0>
 8014a02:	f04f 0800 	mov.w	r8, #0
 8014a06:	6933      	ldr	r3, [r6, #16]
 8014a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014a0c:	6918      	ldr	r0, [r3, #16]
 8014a0e:	f000 fb3b 	bl	8015088 <__hi0bits>
 8014a12:	f1c0 0020 	rsb	r0, r0, #32
 8014a16:	9b06      	ldr	r3, [sp, #24]
 8014a18:	4418      	add	r0, r3
 8014a1a:	f010 001f 	ands.w	r0, r0, #31
 8014a1e:	f000 8094 	beq.w	8014b4a <_dtoa_r+0x922>
 8014a22:	f1c0 0320 	rsb	r3, r0, #32
 8014a26:	2b04      	cmp	r3, #4
 8014a28:	f340 8085 	ble.w	8014b36 <_dtoa_r+0x90e>
 8014a2c:	9b05      	ldr	r3, [sp, #20]
 8014a2e:	f1c0 001c 	rsb	r0, r0, #28
 8014a32:	4403      	add	r3, r0
 8014a34:	9305      	str	r3, [sp, #20]
 8014a36:	9b06      	ldr	r3, [sp, #24]
 8014a38:	4403      	add	r3, r0
 8014a3a:	4405      	add	r5, r0
 8014a3c:	9306      	str	r3, [sp, #24]
 8014a3e:	9b05      	ldr	r3, [sp, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	dd05      	ble.n	8014a50 <_dtoa_r+0x828>
 8014a44:	4651      	mov	r1, sl
 8014a46:	461a      	mov	r2, r3
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f000 fc85 	bl	8015358 <__lshift>
 8014a4e:	4682      	mov	sl, r0
 8014a50:	9b06      	ldr	r3, [sp, #24]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	dd05      	ble.n	8014a62 <_dtoa_r+0x83a>
 8014a56:	4631      	mov	r1, r6
 8014a58:	461a      	mov	r2, r3
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f000 fc7c 	bl	8015358 <__lshift>
 8014a60:	4606      	mov	r6, r0
 8014a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d072      	beq.n	8014b4e <_dtoa_r+0x926>
 8014a68:	4631      	mov	r1, r6
 8014a6a:	4650      	mov	r0, sl
 8014a6c:	f000 fce0 	bl	8015430 <__mcmp>
 8014a70:	2800      	cmp	r0, #0
 8014a72:	da6c      	bge.n	8014b4e <_dtoa_r+0x926>
 8014a74:	2300      	movs	r3, #0
 8014a76:	4651      	mov	r1, sl
 8014a78:	220a      	movs	r2, #10
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f000 fa74 	bl	8014f68 <__multadd>
 8014a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a86:	4682      	mov	sl, r0
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f000 81b0 	beq.w	8014dee <_dtoa_r+0xbc6>
 8014a8e:	2300      	movs	r3, #0
 8014a90:	4639      	mov	r1, r7
 8014a92:	220a      	movs	r2, #10
 8014a94:	4620      	mov	r0, r4
 8014a96:	f000 fa67 	bl	8014f68 <__multadd>
 8014a9a:	9b01      	ldr	r3, [sp, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	4607      	mov	r7, r0
 8014aa0:	f300 8096 	bgt.w	8014bd0 <_dtoa_r+0x9a8>
 8014aa4:	9b07      	ldr	r3, [sp, #28]
 8014aa6:	2b02      	cmp	r3, #2
 8014aa8:	dc59      	bgt.n	8014b5e <_dtoa_r+0x936>
 8014aaa:	e091      	b.n	8014bd0 <_dtoa_r+0x9a8>
 8014aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014ab2:	e758      	b.n	8014966 <_dtoa_r+0x73e>
 8014ab4:	9b04      	ldr	r3, [sp, #16]
 8014ab6:	1e5e      	subs	r6, r3, #1
 8014ab8:	9b08      	ldr	r3, [sp, #32]
 8014aba:	42b3      	cmp	r3, r6
 8014abc:	bfbf      	itttt	lt
 8014abe:	9b08      	ldrlt	r3, [sp, #32]
 8014ac0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014ac2:	9608      	strlt	r6, [sp, #32]
 8014ac4:	1af3      	sublt	r3, r6, r3
 8014ac6:	bfb4      	ite	lt
 8014ac8:	18d2      	addlt	r2, r2, r3
 8014aca:	1b9e      	subge	r6, r3, r6
 8014acc:	9b04      	ldr	r3, [sp, #16]
 8014ace:	bfbc      	itt	lt
 8014ad0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014ad2:	2600      	movlt	r6, #0
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	bfb7      	itett	lt
 8014ad8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014adc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014ae0:	1a9d      	sublt	r5, r3, r2
 8014ae2:	2300      	movlt	r3, #0
 8014ae4:	e741      	b.n	801496a <_dtoa_r+0x742>
 8014ae6:	9e08      	ldr	r6, [sp, #32]
 8014ae8:	9d05      	ldr	r5, [sp, #20]
 8014aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014aec:	e748      	b.n	8014980 <_dtoa_r+0x758>
 8014aee:	9a08      	ldr	r2, [sp, #32]
 8014af0:	e770      	b.n	80149d4 <_dtoa_r+0x7ac>
 8014af2:	9b07      	ldr	r3, [sp, #28]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	dc19      	bgt.n	8014b2c <_dtoa_r+0x904>
 8014af8:	9b02      	ldr	r3, [sp, #8]
 8014afa:	b9bb      	cbnz	r3, 8014b2c <_dtoa_r+0x904>
 8014afc:	9b03      	ldr	r3, [sp, #12]
 8014afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b02:	b99b      	cbnz	r3, 8014b2c <_dtoa_r+0x904>
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b0a:	0d1b      	lsrs	r3, r3, #20
 8014b0c:	051b      	lsls	r3, r3, #20
 8014b0e:	b183      	cbz	r3, 8014b32 <_dtoa_r+0x90a>
 8014b10:	9b05      	ldr	r3, [sp, #20]
 8014b12:	3301      	adds	r3, #1
 8014b14:	9305      	str	r3, [sp, #20]
 8014b16:	9b06      	ldr	r3, [sp, #24]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	9306      	str	r3, [sp, #24]
 8014b1c:	f04f 0801 	mov.w	r8, #1
 8014b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f47f af6f 	bne.w	8014a06 <_dtoa_r+0x7de>
 8014b28:	2001      	movs	r0, #1
 8014b2a:	e774      	b.n	8014a16 <_dtoa_r+0x7ee>
 8014b2c:	f04f 0800 	mov.w	r8, #0
 8014b30:	e7f6      	b.n	8014b20 <_dtoa_r+0x8f8>
 8014b32:	4698      	mov	r8, r3
 8014b34:	e7f4      	b.n	8014b20 <_dtoa_r+0x8f8>
 8014b36:	d082      	beq.n	8014a3e <_dtoa_r+0x816>
 8014b38:	9a05      	ldr	r2, [sp, #20]
 8014b3a:	331c      	adds	r3, #28
 8014b3c:	441a      	add	r2, r3
 8014b3e:	9205      	str	r2, [sp, #20]
 8014b40:	9a06      	ldr	r2, [sp, #24]
 8014b42:	441a      	add	r2, r3
 8014b44:	441d      	add	r5, r3
 8014b46:	9206      	str	r2, [sp, #24]
 8014b48:	e779      	b.n	8014a3e <_dtoa_r+0x816>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	e7f4      	b.n	8014b38 <_dtoa_r+0x910>
 8014b4e:	9b04      	ldr	r3, [sp, #16]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	dc37      	bgt.n	8014bc4 <_dtoa_r+0x99c>
 8014b54:	9b07      	ldr	r3, [sp, #28]
 8014b56:	2b02      	cmp	r3, #2
 8014b58:	dd34      	ble.n	8014bc4 <_dtoa_r+0x99c>
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	9301      	str	r3, [sp, #4]
 8014b5e:	9b01      	ldr	r3, [sp, #4]
 8014b60:	b963      	cbnz	r3, 8014b7c <_dtoa_r+0x954>
 8014b62:	4631      	mov	r1, r6
 8014b64:	2205      	movs	r2, #5
 8014b66:	4620      	mov	r0, r4
 8014b68:	f000 f9fe 	bl	8014f68 <__multadd>
 8014b6c:	4601      	mov	r1, r0
 8014b6e:	4606      	mov	r6, r0
 8014b70:	4650      	mov	r0, sl
 8014b72:	f000 fc5d 	bl	8015430 <__mcmp>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	f73f adbb 	bgt.w	80146f2 <_dtoa_r+0x4ca>
 8014b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7e:	9d00      	ldr	r5, [sp, #0]
 8014b80:	ea6f 0b03 	mvn.w	fp, r3
 8014b84:	f04f 0800 	mov.w	r8, #0
 8014b88:	4631      	mov	r1, r6
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f000 f9ca 	bl	8014f24 <_Bfree>
 8014b90:	2f00      	cmp	r7, #0
 8014b92:	f43f aeab 	beq.w	80148ec <_dtoa_r+0x6c4>
 8014b96:	f1b8 0f00 	cmp.w	r8, #0
 8014b9a:	d005      	beq.n	8014ba8 <_dtoa_r+0x980>
 8014b9c:	45b8      	cmp	r8, r7
 8014b9e:	d003      	beq.n	8014ba8 <_dtoa_r+0x980>
 8014ba0:	4641      	mov	r1, r8
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f000 f9be 	bl	8014f24 <_Bfree>
 8014ba8:	4639      	mov	r1, r7
 8014baa:	4620      	mov	r0, r4
 8014bac:	f000 f9ba 	bl	8014f24 <_Bfree>
 8014bb0:	e69c      	b.n	80148ec <_dtoa_r+0x6c4>
 8014bb2:	2600      	movs	r6, #0
 8014bb4:	4637      	mov	r7, r6
 8014bb6:	e7e1      	b.n	8014b7c <_dtoa_r+0x954>
 8014bb8:	46bb      	mov	fp, r7
 8014bba:	4637      	mov	r7, r6
 8014bbc:	e599      	b.n	80146f2 <_dtoa_r+0x4ca>
 8014bbe:	bf00      	nop
 8014bc0:	40240000 	.word	0x40240000
 8014bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	f000 80c8 	beq.w	8014d5c <_dtoa_r+0xb34>
 8014bcc:	9b04      	ldr	r3, [sp, #16]
 8014bce:	9301      	str	r3, [sp, #4]
 8014bd0:	2d00      	cmp	r5, #0
 8014bd2:	dd05      	ble.n	8014be0 <_dtoa_r+0x9b8>
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	462a      	mov	r2, r5
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f000 fbbd 	bl	8015358 <__lshift>
 8014bde:	4607      	mov	r7, r0
 8014be0:	f1b8 0f00 	cmp.w	r8, #0
 8014be4:	d05b      	beq.n	8014c9e <_dtoa_r+0xa76>
 8014be6:	6879      	ldr	r1, [r7, #4]
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 f95b 	bl	8014ea4 <_Balloc>
 8014bee:	4605      	mov	r5, r0
 8014bf0:	b928      	cbnz	r0, 8014bfe <_dtoa_r+0x9d6>
 8014bf2:	4b83      	ldr	r3, [pc, #524]	; (8014e00 <_dtoa_r+0xbd8>)
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014bfa:	f7ff bb2e 	b.w	801425a <_dtoa_r+0x32>
 8014bfe:	693a      	ldr	r2, [r7, #16]
 8014c00:	3202      	adds	r2, #2
 8014c02:	0092      	lsls	r2, r2, #2
 8014c04:	f107 010c 	add.w	r1, r7, #12
 8014c08:	300c      	adds	r0, #12
 8014c0a:	f7ff fa70 	bl	80140ee <memcpy>
 8014c0e:	2201      	movs	r2, #1
 8014c10:	4629      	mov	r1, r5
 8014c12:	4620      	mov	r0, r4
 8014c14:	f000 fba0 	bl	8015358 <__lshift>
 8014c18:	9b00      	ldr	r3, [sp, #0]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	9304      	str	r3, [sp, #16]
 8014c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c22:	4413      	add	r3, r2
 8014c24:	9308      	str	r3, [sp, #32]
 8014c26:	9b02      	ldr	r3, [sp, #8]
 8014c28:	f003 0301 	and.w	r3, r3, #1
 8014c2c:	46b8      	mov	r8, r7
 8014c2e:	9306      	str	r3, [sp, #24]
 8014c30:	4607      	mov	r7, r0
 8014c32:	9b04      	ldr	r3, [sp, #16]
 8014c34:	4631      	mov	r1, r6
 8014c36:	3b01      	subs	r3, #1
 8014c38:	4650      	mov	r0, sl
 8014c3a:	9301      	str	r3, [sp, #4]
 8014c3c:	f7ff fa6c 	bl	8014118 <quorem>
 8014c40:	4641      	mov	r1, r8
 8014c42:	9002      	str	r0, [sp, #8]
 8014c44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014c48:	4650      	mov	r0, sl
 8014c4a:	f000 fbf1 	bl	8015430 <__mcmp>
 8014c4e:	463a      	mov	r2, r7
 8014c50:	9005      	str	r0, [sp, #20]
 8014c52:	4631      	mov	r1, r6
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 fc07 	bl	8015468 <__mdiff>
 8014c5a:	68c2      	ldr	r2, [r0, #12]
 8014c5c:	4605      	mov	r5, r0
 8014c5e:	bb02      	cbnz	r2, 8014ca2 <_dtoa_r+0xa7a>
 8014c60:	4601      	mov	r1, r0
 8014c62:	4650      	mov	r0, sl
 8014c64:	f000 fbe4 	bl	8015430 <__mcmp>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	4629      	mov	r1, r5
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8014c70:	f000 f958 	bl	8014f24 <_Bfree>
 8014c74:	9b07      	ldr	r3, [sp, #28]
 8014c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c78:	9d04      	ldr	r5, [sp, #16]
 8014c7a:	ea43 0102 	orr.w	r1, r3, r2
 8014c7e:	9b06      	ldr	r3, [sp, #24]
 8014c80:	4319      	orrs	r1, r3
 8014c82:	d110      	bne.n	8014ca6 <_dtoa_r+0xa7e>
 8014c84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014c88:	d029      	beq.n	8014cde <_dtoa_r+0xab6>
 8014c8a:	9b05      	ldr	r3, [sp, #20]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	dd02      	ble.n	8014c96 <_dtoa_r+0xa6e>
 8014c90:	9b02      	ldr	r3, [sp, #8]
 8014c92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014c96:	9b01      	ldr	r3, [sp, #4]
 8014c98:	f883 9000 	strb.w	r9, [r3]
 8014c9c:	e774      	b.n	8014b88 <_dtoa_r+0x960>
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	e7ba      	b.n	8014c18 <_dtoa_r+0x9f0>
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	e7e1      	b.n	8014c6a <_dtoa_r+0xa42>
 8014ca6:	9b05      	ldr	r3, [sp, #20]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	db04      	blt.n	8014cb6 <_dtoa_r+0xa8e>
 8014cac:	9907      	ldr	r1, [sp, #28]
 8014cae:	430b      	orrs	r3, r1
 8014cb0:	9906      	ldr	r1, [sp, #24]
 8014cb2:	430b      	orrs	r3, r1
 8014cb4:	d120      	bne.n	8014cf8 <_dtoa_r+0xad0>
 8014cb6:	2a00      	cmp	r2, #0
 8014cb8:	dded      	ble.n	8014c96 <_dtoa_r+0xa6e>
 8014cba:	4651      	mov	r1, sl
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f000 fb4a 	bl	8015358 <__lshift>
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	4682      	mov	sl, r0
 8014cc8:	f000 fbb2 	bl	8015430 <__mcmp>
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	dc03      	bgt.n	8014cd8 <_dtoa_r+0xab0>
 8014cd0:	d1e1      	bne.n	8014c96 <_dtoa_r+0xa6e>
 8014cd2:	f019 0f01 	tst.w	r9, #1
 8014cd6:	d0de      	beq.n	8014c96 <_dtoa_r+0xa6e>
 8014cd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014cdc:	d1d8      	bne.n	8014c90 <_dtoa_r+0xa68>
 8014cde:	9a01      	ldr	r2, [sp, #4]
 8014ce0:	2339      	movs	r3, #57	; 0x39
 8014ce2:	7013      	strb	r3, [r2, #0]
 8014ce4:	462b      	mov	r3, r5
 8014ce6:	461d      	mov	r5, r3
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014cee:	2a39      	cmp	r2, #57	; 0x39
 8014cf0:	d06c      	beq.n	8014dcc <_dtoa_r+0xba4>
 8014cf2:	3201      	adds	r2, #1
 8014cf4:	701a      	strb	r2, [r3, #0]
 8014cf6:	e747      	b.n	8014b88 <_dtoa_r+0x960>
 8014cf8:	2a00      	cmp	r2, #0
 8014cfa:	dd07      	ble.n	8014d0c <_dtoa_r+0xae4>
 8014cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014d00:	d0ed      	beq.n	8014cde <_dtoa_r+0xab6>
 8014d02:	9a01      	ldr	r2, [sp, #4]
 8014d04:	f109 0301 	add.w	r3, r9, #1
 8014d08:	7013      	strb	r3, [r2, #0]
 8014d0a:	e73d      	b.n	8014b88 <_dtoa_r+0x960>
 8014d0c:	9b04      	ldr	r3, [sp, #16]
 8014d0e:	9a08      	ldr	r2, [sp, #32]
 8014d10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d043      	beq.n	8014da0 <_dtoa_r+0xb78>
 8014d18:	4651      	mov	r1, sl
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	220a      	movs	r2, #10
 8014d1e:	4620      	mov	r0, r4
 8014d20:	f000 f922 	bl	8014f68 <__multadd>
 8014d24:	45b8      	cmp	r8, r7
 8014d26:	4682      	mov	sl, r0
 8014d28:	f04f 0300 	mov.w	r3, #0
 8014d2c:	f04f 020a 	mov.w	r2, #10
 8014d30:	4641      	mov	r1, r8
 8014d32:	4620      	mov	r0, r4
 8014d34:	d107      	bne.n	8014d46 <_dtoa_r+0xb1e>
 8014d36:	f000 f917 	bl	8014f68 <__multadd>
 8014d3a:	4680      	mov	r8, r0
 8014d3c:	4607      	mov	r7, r0
 8014d3e:	9b04      	ldr	r3, [sp, #16]
 8014d40:	3301      	adds	r3, #1
 8014d42:	9304      	str	r3, [sp, #16]
 8014d44:	e775      	b.n	8014c32 <_dtoa_r+0xa0a>
 8014d46:	f000 f90f 	bl	8014f68 <__multadd>
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	4680      	mov	r8, r0
 8014d4e:	2300      	movs	r3, #0
 8014d50:	220a      	movs	r2, #10
 8014d52:	4620      	mov	r0, r4
 8014d54:	f000 f908 	bl	8014f68 <__multadd>
 8014d58:	4607      	mov	r7, r0
 8014d5a:	e7f0      	b.n	8014d3e <_dtoa_r+0xb16>
 8014d5c:	9b04      	ldr	r3, [sp, #16]
 8014d5e:	9301      	str	r3, [sp, #4]
 8014d60:	9d00      	ldr	r5, [sp, #0]
 8014d62:	4631      	mov	r1, r6
 8014d64:	4650      	mov	r0, sl
 8014d66:	f7ff f9d7 	bl	8014118 <quorem>
 8014d6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014d6e:	9b00      	ldr	r3, [sp, #0]
 8014d70:	f805 9b01 	strb.w	r9, [r5], #1
 8014d74:	1aea      	subs	r2, r5, r3
 8014d76:	9b01      	ldr	r3, [sp, #4]
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	dd07      	ble.n	8014d8c <_dtoa_r+0xb64>
 8014d7c:	4651      	mov	r1, sl
 8014d7e:	2300      	movs	r3, #0
 8014d80:	220a      	movs	r2, #10
 8014d82:	4620      	mov	r0, r4
 8014d84:	f000 f8f0 	bl	8014f68 <__multadd>
 8014d88:	4682      	mov	sl, r0
 8014d8a:	e7ea      	b.n	8014d62 <_dtoa_r+0xb3a>
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	bfc8      	it	gt
 8014d92:	461d      	movgt	r5, r3
 8014d94:	9b00      	ldr	r3, [sp, #0]
 8014d96:	bfd8      	it	le
 8014d98:	2501      	movle	r5, #1
 8014d9a:	441d      	add	r5, r3
 8014d9c:	f04f 0800 	mov.w	r8, #0
 8014da0:	4651      	mov	r1, sl
 8014da2:	2201      	movs	r2, #1
 8014da4:	4620      	mov	r0, r4
 8014da6:	f000 fad7 	bl	8015358 <__lshift>
 8014daa:	4631      	mov	r1, r6
 8014dac:	4682      	mov	sl, r0
 8014dae:	f000 fb3f 	bl	8015430 <__mcmp>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	dc96      	bgt.n	8014ce4 <_dtoa_r+0xabc>
 8014db6:	d102      	bne.n	8014dbe <_dtoa_r+0xb96>
 8014db8:	f019 0f01 	tst.w	r9, #1
 8014dbc:	d192      	bne.n	8014ce4 <_dtoa_r+0xabc>
 8014dbe:	462b      	mov	r3, r5
 8014dc0:	461d      	mov	r5, r3
 8014dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014dc6:	2a30      	cmp	r2, #48	; 0x30
 8014dc8:	d0fa      	beq.n	8014dc0 <_dtoa_r+0xb98>
 8014dca:	e6dd      	b.n	8014b88 <_dtoa_r+0x960>
 8014dcc:	9a00      	ldr	r2, [sp, #0]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d189      	bne.n	8014ce6 <_dtoa_r+0xabe>
 8014dd2:	f10b 0b01 	add.w	fp, fp, #1
 8014dd6:	2331      	movs	r3, #49	; 0x31
 8014dd8:	e796      	b.n	8014d08 <_dtoa_r+0xae0>
 8014dda:	4b0a      	ldr	r3, [pc, #40]	; (8014e04 <_dtoa_r+0xbdc>)
 8014ddc:	f7ff ba99 	b.w	8014312 <_dtoa_r+0xea>
 8014de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	f47f aa6d 	bne.w	80142c2 <_dtoa_r+0x9a>
 8014de8:	4b07      	ldr	r3, [pc, #28]	; (8014e08 <_dtoa_r+0xbe0>)
 8014dea:	f7ff ba92 	b.w	8014312 <_dtoa_r+0xea>
 8014dee:	9b01      	ldr	r3, [sp, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	dcb5      	bgt.n	8014d60 <_dtoa_r+0xb38>
 8014df4:	9b07      	ldr	r3, [sp, #28]
 8014df6:	2b02      	cmp	r3, #2
 8014df8:	f73f aeb1 	bgt.w	8014b5e <_dtoa_r+0x936>
 8014dfc:	e7b0      	b.n	8014d60 <_dtoa_r+0xb38>
 8014dfe:	bf00      	nop
 8014e00:	08018841 	.word	0x08018841
 8014e04:	0801879c 	.word	0x0801879c
 8014e08:	080187c5 	.word	0x080187c5

08014e0c <_free_r>:
 8014e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e0e:	2900      	cmp	r1, #0
 8014e10:	d044      	beq.n	8014e9c <_free_r+0x90>
 8014e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e16:	9001      	str	r0, [sp, #4]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8014e1e:	bfb8      	it	lt
 8014e20:	18e4      	addlt	r4, r4, r3
 8014e22:	f7fe f89b 	bl	8012f5c <__malloc_lock>
 8014e26:	4a1e      	ldr	r2, [pc, #120]	; (8014ea0 <_free_r+0x94>)
 8014e28:	9801      	ldr	r0, [sp, #4]
 8014e2a:	6813      	ldr	r3, [r2, #0]
 8014e2c:	b933      	cbnz	r3, 8014e3c <_free_r+0x30>
 8014e2e:	6063      	str	r3, [r4, #4]
 8014e30:	6014      	str	r4, [r2, #0]
 8014e32:	b003      	add	sp, #12
 8014e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e38:	f7fe b896 	b.w	8012f68 <__malloc_unlock>
 8014e3c:	42a3      	cmp	r3, r4
 8014e3e:	d908      	bls.n	8014e52 <_free_r+0x46>
 8014e40:	6825      	ldr	r5, [r4, #0]
 8014e42:	1961      	adds	r1, r4, r5
 8014e44:	428b      	cmp	r3, r1
 8014e46:	bf01      	itttt	eq
 8014e48:	6819      	ldreq	r1, [r3, #0]
 8014e4a:	685b      	ldreq	r3, [r3, #4]
 8014e4c:	1949      	addeq	r1, r1, r5
 8014e4e:	6021      	streq	r1, [r4, #0]
 8014e50:	e7ed      	b.n	8014e2e <_free_r+0x22>
 8014e52:	461a      	mov	r2, r3
 8014e54:	685b      	ldr	r3, [r3, #4]
 8014e56:	b10b      	cbz	r3, 8014e5c <_free_r+0x50>
 8014e58:	42a3      	cmp	r3, r4
 8014e5a:	d9fa      	bls.n	8014e52 <_free_r+0x46>
 8014e5c:	6811      	ldr	r1, [r2, #0]
 8014e5e:	1855      	adds	r5, r2, r1
 8014e60:	42a5      	cmp	r5, r4
 8014e62:	d10b      	bne.n	8014e7c <_free_r+0x70>
 8014e64:	6824      	ldr	r4, [r4, #0]
 8014e66:	4421      	add	r1, r4
 8014e68:	1854      	adds	r4, r2, r1
 8014e6a:	42a3      	cmp	r3, r4
 8014e6c:	6011      	str	r1, [r2, #0]
 8014e6e:	d1e0      	bne.n	8014e32 <_free_r+0x26>
 8014e70:	681c      	ldr	r4, [r3, #0]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	6053      	str	r3, [r2, #4]
 8014e76:	440c      	add	r4, r1
 8014e78:	6014      	str	r4, [r2, #0]
 8014e7a:	e7da      	b.n	8014e32 <_free_r+0x26>
 8014e7c:	d902      	bls.n	8014e84 <_free_r+0x78>
 8014e7e:	230c      	movs	r3, #12
 8014e80:	6003      	str	r3, [r0, #0]
 8014e82:	e7d6      	b.n	8014e32 <_free_r+0x26>
 8014e84:	6825      	ldr	r5, [r4, #0]
 8014e86:	1961      	adds	r1, r4, r5
 8014e88:	428b      	cmp	r3, r1
 8014e8a:	bf04      	itt	eq
 8014e8c:	6819      	ldreq	r1, [r3, #0]
 8014e8e:	685b      	ldreq	r3, [r3, #4]
 8014e90:	6063      	str	r3, [r4, #4]
 8014e92:	bf04      	itt	eq
 8014e94:	1949      	addeq	r1, r1, r5
 8014e96:	6021      	streq	r1, [r4, #0]
 8014e98:	6054      	str	r4, [r2, #4]
 8014e9a:	e7ca      	b.n	8014e32 <_free_r+0x26>
 8014e9c:	b003      	add	sp, #12
 8014e9e:	bd30      	pop	{r4, r5, pc}
 8014ea0:	20000990 	.word	0x20000990

08014ea4 <_Balloc>:
 8014ea4:	b570      	push	{r4, r5, r6, lr}
 8014ea6:	69c6      	ldr	r6, [r0, #28]
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	460d      	mov	r5, r1
 8014eac:	b976      	cbnz	r6, 8014ecc <_Balloc+0x28>
 8014eae:	2010      	movs	r0, #16
 8014eb0:	f7fd ffa4 	bl	8012dfc <malloc>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	61e0      	str	r0, [r4, #28]
 8014eb8:	b920      	cbnz	r0, 8014ec4 <_Balloc+0x20>
 8014eba:	4b18      	ldr	r3, [pc, #96]	; (8014f1c <_Balloc+0x78>)
 8014ebc:	4818      	ldr	r0, [pc, #96]	; (8014f20 <_Balloc+0x7c>)
 8014ebe:	216b      	movs	r1, #107	; 0x6b
 8014ec0:	f7fd ff6c 	bl	8012d9c <__assert_func>
 8014ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ec8:	6006      	str	r6, [r0, #0]
 8014eca:	60c6      	str	r6, [r0, #12]
 8014ecc:	69e6      	ldr	r6, [r4, #28]
 8014ece:	68f3      	ldr	r3, [r6, #12]
 8014ed0:	b183      	cbz	r3, 8014ef4 <_Balloc+0x50>
 8014ed2:	69e3      	ldr	r3, [r4, #28]
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014eda:	b9b8      	cbnz	r0, 8014f0c <_Balloc+0x68>
 8014edc:	2101      	movs	r1, #1
 8014ede:	fa01 f605 	lsl.w	r6, r1, r5
 8014ee2:	1d72      	adds	r2, r6, #5
 8014ee4:	0092      	lsls	r2, r2, #2
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f001 ff1a 	bl	8016d20 <_calloc_r>
 8014eec:	b160      	cbz	r0, 8014f08 <_Balloc+0x64>
 8014eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014ef2:	e00e      	b.n	8014f12 <_Balloc+0x6e>
 8014ef4:	2221      	movs	r2, #33	; 0x21
 8014ef6:	2104      	movs	r1, #4
 8014ef8:	4620      	mov	r0, r4
 8014efa:	f001 ff11 	bl	8016d20 <_calloc_r>
 8014efe:	69e3      	ldr	r3, [r4, #28]
 8014f00:	60f0      	str	r0, [r6, #12]
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d1e4      	bne.n	8014ed2 <_Balloc+0x2e>
 8014f08:	2000      	movs	r0, #0
 8014f0a:	bd70      	pop	{r4, r5, r6, pc}
 8014f0c:	6802      	ldr	r2, [r0, #0]
 8014f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f12:	2300      	movs	r3, #0
 8014f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f18:	e7f7      	b.n	8014f0a <_Balloc+0x66>
 8014f1a:	bf00      	nop
 8014f1c:	080187d2 	.word	0x080187d2
 8014f20:	08018852 	.word	0x08018852

08014f24 <_Bfree>:
 8014f24:	b570      	push	{r4, r5, r6, lr}
 8014f26:	69c6      	ldr	r6, [r0, #28]
 8014f28:	4605      	mov	r5, r0
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	b976      	cbnz	r6, 8014f4c <_Bfree+0x28>
 8014f2e:	2010      	movs	r0, #16
 8014f30:	f7fd ff64 	bl	8012dfc <malloc>
 8014f34:	4602      	mov	r2, r0
 8014f36:	61e8      	str	r0, [r5, #28]
 8014f38:	b920      	cbnz	r0, 8014f44 <_Bfree+0x20>
 8014f3a:	4b09      	ldr	r3, [pc, #36]	; (8014f60 <_Bfree+0x3c>)
 8014f3c:	4809      	ldr	r0, [pc, #36]	; (8014f64 <_Bfree+0x40>)
 8014f3e:	218f      	movs	r1, #143	; 0x8f
 8014f40:	f7fd ff2c 	bl	8012d9c <__assert_func>
 8014f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f48:	6006      	str	r6, [r0, #0]
 8014f4a:	60c6      	str	r6, [r0, #12]
 8014f4c:	b13c      	cbz	r4, 8014f5e <_Bfree+0x3a>
 8014f4e:	69eb      	ldr	r3, [r5, #28]
 8014f50:	6862      	ldr	r2, [r4, #4]
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f58:	6021      	str	r1, [r4, #0]
 8014f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f5e:	bd70      	pop	{r4, r5, r6, pc}
 8014f60:	080187d2 	.word	0x080187d2
 8014f64:	08018852 	.word	0x08018852

08014f68 <__multadd>:
 8014f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f6c:	690d      	ldr	r5, [r1, #16]
 8014f6e:	4607      	mov	r7, r0
 8014f70:	460c      	mov	r4, r1
 8014f72:	461e      	mov	r6, r3
 8014f74:	f101 0c14 	add.w	ip, r1, #20
 8014f78:	2000      	movs	r0, #0
 8014f7a:	f8dc 3000 	ldr.w	r3, [ip]
 8014f7e:	b299      	uxth	r1, r3
 8014f80:	fb02 6101 	mla	r1, r2, r1, r6
 8014f84:	0c1e      	lsrs	r6, r3, #16
 8014f86:	0c0b      	lsrs	r3, r1, #16
 8014f88:	fb02 3306 	mla	r3, r2, r6, r3
 8014f8c:	b289      	uxth	r1, r1
 8014f8e:	3001      	adds	r0, #1
 8014f90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014f94:	4285      	cmp	r5, r0
 8014f96:	f84c 1b04 	str.w	r1, [ip], #4
 8014f9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014f9e:	dcec      	bgt.n	8014f7a <__multadd+0x12>
 8014fa0:	b30e      	cbz	r6, 8014fe6 <__multadd+0x7e>
 8014fa2:	68a3      	ldr	r3, [r4, #8]
 8014fa4:	42ab      	cmp	r3, r5
 8014fa6:	dc19      	bgt.n	8014fdc <__multadd+0x74>
 8014fa8:	6861      	ldr	r1, [r4, #4]
 8014faa:	4638      	mov	r0, r7
 8014fac:	3101      	adds	r1, #1
 8014fae:	f7ff ff79 	bl	8014ea4 <_Balloc>
 8014fb2:	4680      	mov	r8, r0
 8014fb4:	b928      	cbnz	r0, 8014fc2 <__multadd+0x5a>
 8014fb6:	4602      	mov	r2, r0
 8014fb8:	4b0c      	ldr	r3, [pc, #48]	; (8014fec <__multadd+0x84>)
 8014fba:	480d      	ldr	r0, [pc, #52]	; (8014ff0 <__multadd+0x88>)
 8014fbc:	21ba      	movs	r1, #186	; 0xba
 8014fbe:	f7fd feed 	bl	8012d9c <__assert_func>
 8014fc2:	6922      	ldr	r2, [r4, #16]
 8014fc4:	3202      	adds	r2, #2
 8014fc6:	f104 010c 	add.w	r1, r4, #12
 8014fca:	0092      	lsls	r2, r2, #2
 8014fcc:	300c      	adds	r0, #12
 8014fce:	f7ff f88e 	bl	80140ee <memcpy>
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	4638      	mov	r0, r7
 8014fd6:	f7ff ffa5 	bl	8014f24 <_Bfree>
 8014fda:	4644      	mov	r4, r8
 8014fdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014fe0:	3501      	adds	r5, #1
 8014fe2:	615e      	str	r6, [r3, #20]
 8014fe4:	6125      	str	r5, [r4, #16]
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fec:	08018841 	.word	0x08018841
 8014ff0:	08018852 	.word	0x08018852

08014ff4 <__s2b>:
 8014ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ff8:	460c      	mov	r4, r1
 8014ffa:	4615      	mov	r5, r2
 8014ffc:	461f      	mov	r7, r3
 8014ffe:	2209      	movs	r2, #9
 8015000:	3308      	adds	r3, #8
 8015002:	4606      	mov	r6, r0
 8015004:	fb93 f3f2 	sdiv	r3, r3, r2
 8015008:	2100      	movs	r1, #0
 801500a:	2201      	movs	r2, #1
 801500c:	429a      	cmp	r2, r3
 801500e:	db09      	blt.n	8015024 <__s2b+0x30>
 8015010:	4630      	mov	r0, r6
 8015012:	f7ff ff47 	bl	8014ea4 <_Balloc>
 8015016:	b940      	cbnz	r0, 801502a <__s2b+0x36>
 8015018:	4602      	mov	r2, r0
 801501a:	4b19      	ldr	r3, [pc, #100]	; (8015080 <__s2b+0x8c>)
 801501c:	4819      	ldr	r0, [pc, #100]	; (8015084 <__s2b+0x90>)
 801501e:	21d3      	movs	r1, #211	; 0xd3
 8015020:	f7fd febc 	bl	8012d9c <__assert_func>
 8015024:	0052      	lsls	r2, r2, #1
 8015026:	3101      	adds	r1, #1
 8015028:	e7f0      	b.n	801500c <__s2b+0x18>
 801502a:	9b08      	ldr	r3, [sp, #32]
 801502c:	6143      	str	r3, [r0, #20]
 801502e:	2d09      	cmp	r5, #9
 8015030:	f04f 0301 	mov.w	r3, #1
 8015034:	6103      	str	r3, [r0, #16]
 8015036:	dd16      	ble.n	8015066 <__s2b+0x72>
 8015038:	f104 0909 	add.w	r9, r4, #9
 801503c:	46c8      	mov	r8, r9
 801503e:	442c      	add	r4, r5
 8015040:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015044:	4601      	mov	r1, r0
 8015046:	3b30      	subs	r3, #48	; 0x30
 8015048:	220a      	movs	r2, #10
 801504a:	4630      	mov	r0, r6
 801504c:	f7ff ff8c 	bl	8014f68 <__multadd>
 8015050:	45a0      	cmp	r8, r4
 8015052:	d1f5      	bne.n	8015040 <__s2b+0x4c>
 8015054:	f1a5 0408 	sub.w	r4, r5, #8
 8015058:	444c      	add	r4, r9
 801505a:	1b2d      	subs	r5, r5, r4
 801505c:	1963      	adds	r3, r4, r5
 801505e:	42bb      	cmp	r3, r7
 8015060:	db04      	blt.n	801506c <__s2b+0x78>
 8015062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015066:	340a      	adds	r4, #10
 8015068:	2509      	movs	r5, #9
 801506a:	e7f6      	b.n	801505a <__s2b+0x66>
 801506c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015070:	4601      	mov	r1, r0
 8015072:	3b30      	subs	r3, #48	; 0x30
 8015074:	220a      	movs	r2, #10
 8015076:	4630      	mov	r0, r6
 8015078:	f7ff ff76 	bl	8014f68 <__multadd>
 801507c:	e7ee      	b.n	801505c <__s2b+0x68>
 801507e:	bf00      	nop
 8015080:	08018841 	.word	0x08018841
 8015084:	08018852 	.word	0x08018852

08015088 <__hi0bits>:
 8015088:	0c03      	lsrs	r3, r0, #16
 801508a:	041b      	lsls	r3, r3, #16
 801508c:	b9d3      	cbnz	r3, 80150c4 <__hi0bits+0x3c>
 801508e:	0400      	lsls	r0, r0, #16
 8015090:	2310      	movs	r3, #16
 8015092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015096:	bf04      	itt	eq
 8015098:	0200      	lsleq	r0, r0, #8
 801509a:	3308      	addeq	r3, #8
 801509c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80150a0:	bf04      	itt	eq
 80150a2:	0100      	lsleq	r0, r0, #4
 80150a4:	3304      	addeq	r3, #4
 80150a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80150aa:	bf04      	itt	eq
 80150ac:	0080      	lsleq	r0, r0, #2
 80150ae:	3302      	addeq	r3, #2
 80150b0:	2800      	cmp	r0, #0
 80150b2:	db05      	blt.n	80150c0 <__hi0bits+0x38>
 80150b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80150b8:	f103 0301 	add.w	r3, r3, #1
 80150bc:	bf08      	it	eq
 80150be:	2320      	moveq	r3, #32
 80150c0:	4618      	mov	r0, r3
 80150c2:	4770      	bx	lr
 80150c4:	2300      	movs	r3, #0
 80150c6:	e7e4      	b.n	8015092 <__hi0bits+0xa>

080150c8 <__lo0bits>:
 80150c8:	6803      	ldr	r3, [r0, #0]
 80150ca:	f013 0207 	ands.w	r2, r3, #7
 80150ce:	d00c      	beq.n	80150ea <__lo0bits+0x22>
 80150d0:	07d9      	lsls	r1, r3, #31
 80150d2:	d422      	bmi.n	801511a <__lo0bits+0x52>
 80150d4:	079a      	lsls	r2, r3, #30
 80150d6:	bf49      	itett	mi
 80150d8:	085b      	lsrmi	r3, r3, #1
 80150da:	089b      	lsrpl	r3, r3, #2
 80150dc:	6003      	strmi	r3, [r0, #0]
 80150de:	2201      	movmi	r2, #1
 80150e0:	bf5c      	itt	pl
 80150e2:	6003      	strpl	r3, [r0, #0]
 80150e4:	2202      	movpl	r2, #2
 80150e6:	4610      	mov	r0, r2
 80150e8:	4770      	bx	lr
 80150ea:	b299      	uxth	r1, r3
 80150ec:	b909      	cbnz	r1, 80150f2 <__lo0bits+0x2a>
 80150ee:	0c1b      	lsrs	r3, r3, #16
 80150f0:	2210      	movs	r2, #16
 80150f2:	b2d9      	uxtb	r1, r3
 80150f4:	b909      	cbnz	r1, 80150fa <__lo0bits+0x32>
 80150f6:	3208      	adds	r2, #8
 80150f8:	0a1b      	lsrs	r3, r3, #8
 80150fa:	0719      	lsls	r1, r3, #28
 80150fc:	bf04      	itt	eq
 80150fe:	091b      	lsreq	r3, r3, #4
 8015100:	3204      	addeq	r2, #4
 8015102:	0799      	lsls	r1, r3, #30
 8015104:	bf04      	itt	eq
 8015106:	089b      	lsreq	r3, r3, #2
 8015108:	3202      	addeq	r2, #2
 801510a:	07d9      	lsls	r1, r3, #31
 801510c:	d403      	bmi.n	8015116 <__lo0bits+0x4e>
 801510e:	085b      	lsrs	r3, r3, #1
 8015110:	f102 0201 	add.w	r2, r2, #1
 8015114:	d003      	beq.n	801511e <__lo0bits+0x56>
 8015116:	6003      	str	r3, [r0, #0]
 8015118:	e7e5      	b.n	80150e6 <__lo0bits+0x1e>
 801511a:	2200      	movs	r2, #0
 801511c:	e7e3      	b.n	80150e6 <__lo0bits+0x1e>
 801511e:	2220      	movs	r2, #32
 8015120:	e7e1      	b.n	80150e6 <__lo0bits+0x1e>
	...

08015124 <__i2b>:
 8015124:	b510      	push	{r4, lr}
 8015126:	460c      	mov	r4, r1
 8015128:	2101      	movs	r1, #1
 801512a:	f7ff febb 	bl	8014ea4 <_Balloc>
 801512e:	4602      	mov	r2, r0
 8015130:	b928      	cbnz	r0, 801513e <__i2b+0x1a>
 8015132:	4b05      	ldr	r3, [pc, #20]	; (8015148 <__i2b+0x24>)
 8015134:	4805      	ldr	r0, [pc, #20]	; (801514c <__i2b+0x28>)
 8015136:	f240 1145 	movw	r1, #325	; 0x145
 801513a:	f7fd fe2f 	bl	8012d9c <__assert_func>
 801513e:	2301      	movs	r3, #1
 8015140:	6144      	str	r4, [r0, #20]
 8015142:	6103      	str	r3, [r0, #16]
 8015144:	bd10      	pop	{r4, pc}
 8015146:	bf00      	nop
 8015148:	08018841 	.word	0x08018841
 801514c:	08018852 	.word	0x08018852

08015150 <__multiply>:
 8015150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015154:	4691      	mov	r9, r2
 8015156:	690a      	ldr	r2, [r1, #16]
 8015158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801515c:	429a      	cmp	r2, r3
 801515e:	bfb8      	it	lt
 8015160:	460b      	movlt	r3, r1
 8015162:	460c      	mov	r4, r1
 8015164:	bfbc      	itt	lt
 8015166:	464c      	movlt	r4, r9
 8015168:	4699      	movlt	r9, r3
 801516a:	6927      	ldr	r7, [r4, #16]
 801516c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015170:	68a3      	ldr	r3, [r4, #8]
 8015172:	6861      	ldr	r1, [r4, #4]
 8015174:	eb07 060a 	add.w	r6, r7, sl
 8015178:	42b3      	cmp	r3, r6
 801517a:	b085      	sub	sp, #20
 801517c:	bfb8      	it	lt
 801517e:	3101      	addlt	r1, #1
 8015180:	f7ff fe90 	bl	8014ea4 <_Balloc>
 8015184:	b930      	cbnz	r0, 8015194 <__multiply+0x44>
 8015186:	4602      	mov	r2, r0
 8015188:	4b44      	ldr	r3, [pc, #272]	; (801529c <__multiply+0x14c>)
 801518a:	4845      	ldr	r0, [pc, #276]	; (80152a0 <__multiply+0x150>)
 801518c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015190:	f7fd fe04 	bl	8012d9c <__assert_func>
 8015194:	f100 0514 	add.w	r5, r0, #20
 8015198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801519c:	462b      	mov	r3, r5
 801519e:	2200      	movs	r2, #0
 80151a0:	4543      	cmp	r3, r8
 80151a2:	d321      	bcc.n	80151e8 <__multiply+0x98>
 80151a4:	f104 0314 	add.w	r3, r4, #20
 80151a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80151ac:	f109 0314 	add.w	r3, r9, #20
 80151b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80151b4:	9202      	str	r2, [sp, #8]
 80151b6:	1b3a      	subs	r2, r7, r4
 80151b8:	3a15      	subs	r2, #21
 80151ba:	f022 0203 	bic.w	r2, r2, #3
 80151be:	3204      	adds	r2, #4
 80151c0:	f104 0115 	add.w	r1, r4, #21
 80151c4:	428f      	cmp	r7, r1
 80151c6:	bf38      	it	cc
 80151c8:	2204      	movcc	r2, #4
 80151ca:	9201      	str	r2, [sp, #4]
 80151cc:	9a02      	ldr	r2, [sp, #8]
 80151ce:	9303      	str	r3, [sp, #12]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d80c      	bhi.n	80151ee <__multiply+0x9e>
 80151d4:	2e00      	cmp	r6, #0
 80151d6:	dd03      	ble.n	80151e0 <__multiply+0x90>
 80151d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d05b      	beq.n	8015298 <__multiply+0x148>
 80151e0:	6106      	str	r6, [r0, #16]
 80151e2:	b005      	add	sp, #20
 80151e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e8:	f843 2b04 	str.w	r2, [r3], #4
 80151ec:	e7d8      	b.n	80151a0 <__multiply+0x50>
 80151ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80151f2:	f1ba 0f00 	cmp.w	sl, #0
 80151f6:	d024      	beq.n	8015242 <__multiply+0xf2>
 80151f8:	f104 0e14 	add.w	lr, r4, #20
 80151fc:	46a9      	mov	r9, r5
 80151fe:	f04f 0c00 	mov.w	ip, #0
 8015202:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015206:	f8d9 1000 	ldr.w	r1, [r9]
 801520a:	fa1f fb82 	uxth.w	fp, r2
 801520e:	b289      	uxth	r1, r1
 8015210:	fb0a 110b 	mla	r1, sl, fp, r1
 8015214:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015218:	f8d9 2000 	ldr.w	r2, [r9]
 801521c:	4461      	add	r1, ip
 801521e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015222:	fb0a c20b 	mla	r2, sl, fp, ip
 8015226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801522a:	b289      	uxth	r1, r1
 801522c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015230:	4577      	cmp	r7, lr
 8015232:	f849 1b04 	str.w	r1, [r9], #4
 8015236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801523a:	d8e2      	bhi.n	8015202 <__multiply+0xb2>
 801523c:	9a01      	ldr	r2, [sp, #4]
 801523e:	f845 c002 	str.w	ip, [r5, r2]
 8015242:	9a03      	ldr	r2, [sp, #12]
 8015244:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015248:	3304      	adds	r3, #4
 801524a:	f1b9 0f00 	cmp.w	r9, #0
 801524e:	d021      	beq.n	8015294 <__multiply+0x144>
 8015250:	6829      	ldr	r1, [r5, #0]
 8015252:	f104 0c14 	add.w	ip, r4, #20
 8015256:	46ae      	mov	lr, r5
 8015258:	f04f 0a00 	mov.w	sl, #0
 801525c:	f8bc b000 	ldrh.w	fp, [ip]
 8015260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015264:	fb09 220b 	mla	r2, r9, fp, r2
 8015268:	4452      	add	r2, sl
 801526a:	b289      	uxth	r1, r1
 801526c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015270:	f84e 1b04 	str.w	r1, [lr], #4
 8015274:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801527c:	f8be 1000 	ldrh.w	r1, [lr]
 8015280:	fb09 110a 	mla	r1, r9, sl, r1
 8015284:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015288:	4567      	cmp	r7, ip
 801528a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801528e:	d8e5      	bhi.n	801525c <__multiply+0x10c>
 8015290:	9a01      	ldr	r2, [sp, #4]
 8015292:	50a9      	str	r1, [r5, r2]
 8015294:	3504      	adds	r5, #4
 8015296:	e799      	b.n	80151cc <__multiply+0x7c>
 8015298:	3e01      	subs	r6, #1
 801529a:	e79b      	b.n	80151d4 <__multiply+0x84>
 801529c:	08018841 	.word	0x08018841
 80152a0:	08018852 	.word	0x08018852

080152a4 <__pow5mult>:
 80152a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152a8:	4615      	mov	r5, r2
 80152aa:	f012 0203 	ands.w	r2, r2, #3
 80152ae:	4606      	mov	r6, r0
 80152b0:	460f      	mov	r7, r1
 80152b2:	d007      	beq.n	80152c4 <__pow5mult+0x20>
 80152b4:	4c25      	ldr	r4, [pc, #148]	; (801534c <__pow5mult+0xa8>)
 80152b6:	3a01      	subs	r2, #1
 80152b8:	2300      	movs	r3, #0
 80152ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80152be:	f7ff fe53 	bl	8014f68 <__multadd>
 80152c2:	4607      	mov	r7, r0
 80152c4:	10ad      	asrs	r5, r5, #2
 80152c6:	d03d      	beq.n	8015344 <__pow5mult+0xa0>
 80152c8:	69f4      	ldr	r4, [r6, #28]
 80152ca:	b97c      	cbnz	r4, 80152ec <__pow5mult+0x48>
 80152cc:	2010      	movs	r0, #16
 80152ce:	f7fd fd95 	bl	8012dfc <malloc>
 80152d2:	4602      	mov	r2, r0
 80152d4:	61f0      	str	r0, [r6, #28]
 80152d6:	b928      	cbnz	r0, 80152e4 <__pow5mult+0x40>
 80152d8:	4b1d      	ldr	r3, [pc, #116]	; (8015350 <__pow5mult+0xac>)
 80152da:	481e      	ldr	r0, [pc, #120]	; (8015354 <__pow5mult+0xb0>)
 80152dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80152e0:	f7fd fd5c 	bl	8012d9c <__assert_func>
 80152e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80152e8:	6004      	str	r4, [r0, #0]
 80152ea:	60c4      	str	r4, [r0, #12]
 80152ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80152f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80152f4:	b94c      	cbnz	r4, 801530a <__pow5mult+0x66>
 80152f6:	f240 2171 	movw	r1, #625	; 0x271
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7ff ff12 	bl	8015124 <__i2b>
 8015300:	2300      	movs	r3, #0
 8015302:	f8c8 0008 	str.w	r0, [r8, #8]
 8015306:	4604      	mov	r4, r0
 8015308:	6003      	str	r3, [r0, #0]
 801530a:	f04f 0900 	mov.w	r9, #0
 801530e:	07eb      	lsls	r3, r5, #31
 8015310:	d50a      	bpl.n	8015328 <__pow5mult+0x84>
 8015312:	4639      	mov	r1, r7
 8015314:	4622      	mov	r2, r4
 8015316:	4630      	mov	r0, r6
 8015318:	f7ff ff1a 	bl	8015150 <__multiply>
 801531c:	4639      	mov	r1, r7
 801531e:	4680      	mov	r8, r0
 8015320:	4630      	mov	r0, r6
 8015322:	f7ff fdff 	bl	8014f24 <_Bfree>
 8015326:	4647      	mov	r7, r8
 8015328:	106d      	asrs	r5, r5, #1
 801532a:	d00b      	beq.n	8015344 <__pow5mult+0xa0>
 801532c:	6820      	ldr	r0, [r4, #0]
 801532e:	b938      	cbnz	r0, 8015340 <__pow5mult+0x9c>
 8015330:	4622      	mov	r2, r4
 8015332:	4621      	mov	r1, r4
 8015334:	4630      	mov	r0, r6
 8015336:	f7ff ff0b 	bl	8015150 <__multiply>
 801533a:	6020      	str	r0, [r4, #0]
 801533c:	f8c0 9000 	str.w	r9, [r0]
 8015340:	4604      	mov	r4, r0
 8015342:	e7e4      	b.n	801530e <__pow5mult+0x6a>
 8015344:	4638      	mov	r0, r7
 8015346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801534a:	bf00      	nop
 801534c:	080189a0 	.word	0x080189a0
 8015350:	080187d2 	.word	0x080187d2
 8015354:	08018852 	.word	0x08018852

08015358 <__lshift>:
 8015358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801535c:	460c      	mov	r4, r1
 801535e:	6849      	ldr	r1, [r1, #4]
 8015360:	6923      	ldr	r3, [r4, #16]
 8015362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015366:	68a3      	ldr	r3, [r4, #8]
 8015368:	4607      	mov	r7, r0
 801536a:	4691      	mov	r9, r2
 801536c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015370:	f108 0601 	add.w	r6, r8, #1
 8015374:	42b3      	cmp	r3, r6
 8015376:	db0b      	blt.n	8015390 <__lshift+0x38>
 8015378:	4638      	mov	r0, r7
 801537a:	f7ff fd93 	bl	8014ea4 <_Balloc>
 801537e:	4605      	mov	r5, r0
 8015380:	b948      	cbnz	r0, 8015396 <__lshift+0x3e>
 8015382:	4602      	mov	r2, r0
 8015384:	4b28      	ldr	r3, [pc, #160]	; (8015428 <__lshift+0xd0>)
 8015386:	4829      	ldr	r0, [pc, #164]	; (801542c <__lshift+0xd4>)
 8015388:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801538c:	f7fd fd06 	bl	8012d9c <__assert_func>
 8015390:	3101      	adds	r1, #1
 8015392:	005b      	lsls	r3, r3, #1
 8015394:	e7ee      	b.n	8015374 <__lshift+0x1c>
 8015396:	2300      	movs	r3, #0
 8015398:	f100 0114 	add.w	r1, r0, #20
 801539c:	f100 0210 	add.w	r2, r0, #16
 80153a0:	4618      	mov	r0, r3
 80153a2:	4553      	cmp	r3, sl
 80153a4:	db33      	blt.n	801540e <__lshift+0xb6>
 80153a6:	6920      	ldr	r0, [r4, #16]
 80153a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80153ac:	f104 0314 	add.w	r3, r4, #20
 80153b0:	f019 091f 	ands.w	r9, r9, #31
 80153b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80153b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80153bc:	d02b      	beq.n	8015416 <__lshift+0xbe>
 80153be:	f1c9 0e20 	rsb	lr, r9, #32
 80153c2:	468a      	mov	sl, r1
 80153c4:	2200      	movs	r2, #0
 80153c6:	6818      	ldr	r0, [r3, #0]
 80153c8:	fa00 f009 	lsl.w	r0, r0, r9
 80153cc:	4310      	orrs	r0, r2
 80153ce:	f84a 0b04 	str.w	r0, [sl], #4
 80153d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80153d6:	459c      	cmp	ip, r3
 80153d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80153dc:	d8f3      	bhi.n	80153c6 <__lshift+0x6e>
 80153de:	ebac 0304 	sub.w	r3, ip, r4
 80153e2:	3b15      	subs	r3, #21
 80153e4:	f023 0303 	bic.w	r3, r3, #3
 80153e8:	3304      	adds	r3, #4
 80153ea:	f104 0015 	add.w	r0, r4, #21
 80153ee:	4584      	cmp	ip, r0
 80153f0:	bf38      	it	cc
 80153f2:	2304      	movcc	r3, #4
 80153f4:	50ca      	str	r2, [r1, r3]
 80153f6:	b10a      	cbz	r2, 80153fc <__lshift+0xa4>
 80153f8:	f108 0602 	add.w	r6, r8, #2
 80153fc:	3e01      	subs	r6, #1
 80153fe:	4638      	mov	r0, r7
 8015400:	612e      	str	r6, [r5, #16]
 8015402:	4621      	mov	r1, r4
 8015404:	f7ff fd8e 	bl	8014f24 <_Bfree>
 8015408:	4628      	mov	r0, r5
 801540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801540e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015412:	3301      	adds	r3, #1
 8015414:	e7c5      	b.n	80153a2 <__lshift+0x4a>
 8015416:	3904      	subs	r1, #4
 8015418:	f853 2b04 	ldr.w	r2, [r3], #4
 801541c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015420:	459c      	cmp	ip, r3
 8015422:	d8f9      	bhi.n	8015418 <__lshift+0xc0>
 8015424:	e7ea      	b.n	80153fc <__lshift+0xa4>
 8015426:	bf00      	nop
 8015428:	08018841 	.word	0x08018841
 801542c:	08018852 	.word	0x08018852

08015430 <__mcmp>:
 8015430:	b530      	push	{r4, r5, lr}
 8015432:	6902      	ldr	r2, [r0, #16]
 8015434:	690c      	ldr	r4, [r1, #16]
 8015436:	1b12      	subs	r2, r2, r4
 8015438:	d10e      	bne.n	8015458 <__mcmp+0x28>
 801543a:	f100 0314 	add.w	r3, r0, #20
 801543e:	3114      	adds	r1, #20
 8015440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801544c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015450:	42a5      	cmp	r5, r4
 8015452:	d003      	beq.n	801545c <__mcmp+0x2c>
 8015454:	d305      	bcc.n	8015462 <__mcmp+0x32>
 8015456:	2201      	movs	r2, #1
 8015458:	4610      	mov	r0, r2
 801545a:	bd30      	pop	{r4, r5, pc}
 801545c:	4283      	cmp	r3, r0
 801545e:	d3f3      	bcc.n	8015448 <__mcmp+0x18>
 8015460:	e7fa      	b.n	8015458 <__mcmp+0x28>
 8015462:	f04f 32ff 	mov.w	r2, #4294967295
 8015466:	e7f7      	b.n	8015458 <__mcmp+0x28>

08015468 <__mdiff>:
 8015468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	460c      	mov	r4, r1
 801546e:	4606      	mov	r6, r0
 8015470:	4611      	mov	r1, r2
 8015472:	4620      	mov	r0, r4
 8015474:	4690      	mov	r8, r2
 8015476:	f7ff ffdb 	bl	8015430 <__mcmp>
 801547a:	1e05      	subs	r5, r0, #0
 801547c:	d110      	bne.n	80154a0 <__mdiff+0x38>
 801547e:	4629      	mov	r1, r5
 8015480:	4630      	mov	r0, r6
 8015482:	f7ff fd0f 	bl	8014ea4 <_Balloc>
 8015486:	b930      	cbnz	r0, 8015496 <__mdiff+0x2e>
 8015488:	4b3a      	ldr	r3, [pc, #232]	; (8015574 <__mdiff+0x10c>)
 801548a:	4602      	mov	r2, r0
 801548c:	f240 2137 	movw	r1, #567	; 0x237
 8015490:	4839      	ldr	r0, [pc, #228]	; (8015578 <__mdiff+0x110>)
 8015492:	f7fd fc83 	bl	8012d9c <__assert_func>
 8015496:	2301      	movs	r3, #1
 8015498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801549c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a0:	bfa4      	itt	ge
 80154a2:	4643      	movge	r3, r8
 80154a4:	46a0      	movge	r8, r4
 80154a6:	4630      	mov	r0, r6
 80154a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80154ac:	bfa6      	itte	ge
 80154ae:	461c      	movge	r4, r3
 80154b0:	2500      	movge	r5, #0
 80154b2:	2501      	movlt	r5, #1
 80154b4:	f7ff fcf6 	bl	8014ea4 <_Balloc>
 80154b8:	b920      	cbnz	r0, 80154c4 <__mdiff+0x5c>
 80154ba:	4b2e      	ldr	r3, [pc, #184]	; (8015574 <__mdiff+0x10c>)
 80154bc:	4602      	mov	r2, r0
 80154be:	f240 2145 	movw	r1, #581	; 0x245
 80154c2:	e7e5      	b.n	8015490 <__mdiff+0x28>
 80154c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80154c8:	6926      	ldr	r6, [r4, #16]
 80154ca:	60c5      	str	r5, [r0, #12]
 80154cc:	f104 0914 	add.w	r9, r4, #20
 80154d0:	f108 0514 	add.w	r5, r8, #20
 80154d4:	f100 0e14 	add.w	lr, r0, #20
 80154d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80154dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80154e0:	f108 0210 	add.w	r2, r8, #16
 80154e4:	46f2      	mov	sl, lr
 80154e6:	2100      	movs	r1, #0
 80154e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80154ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80154f0:	fa11 f88b 	uxtah	r8, r1, fp
 80154f4:	b299      	uxth	r1, r3
 80154f6:	0c1b      	lsrs	r3, r3, #16
 80154f8:	eba8 0801 	sub.w	r8, r8, r1
 80154fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015500:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015504:	fa1f f888 	uxth.w	r8, r8
 8015508:	1419      	asrs	r1, r3, #16
 801550a:	454e      	cmp	r6, r9
 801550c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015510:	f84a 3b04 	str.w	r3, [sl], #4
 8015514:	d8e8      	bhi.n	80154e8 <__mdiff+0x80>
 8015516:	1b33      	subs	r3, r6, r4
 8015518:	3b15      	subs	r3, #21
 801551a:	f023 0303 	bic.w	r3, r3, #3
 801551e:	3304      	adds	r3, #4
 8015520:	3415      	adds	r4, #21
 8015522:	42a6      	cmp	r6, r4
 8015524:	bf38      	it	cc
 8015526:	2304      	movcc	r3, #4
 8015528:	441d      	add	r5, r3
 801552a:	4473      	add	r3, lr
 801552c:	469e      	mov	lr, r3
 801552e:	462e      	mov	r6, r5
 8015530:	4566      	cmp	r6, ip
 8015532:	d30e      	bcc.n	8015552 <__mdiff+0xea>
 8015534:	f10c 0203 	add.w	r2, ip, #3
 8015538:	1b52      	subs	r2, r2, r5
 801553a:	f022 0203 	bic.w	r2, r2, #3
 801553e:	3d03      	subs	r5, #3
 8015540:	45ac      	cmp	ip, r5
 8015542:	bf38      	it	cc
 8015544:	2200      	movcc	r2, #0
 8015546:	4413      	add	r3, r2
 8015548:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801554c:	b17a      	cbz	r2, 801556e <__mdiff+0x106>
 801554e:	6107      	str	r7, [r0, #16]
 8015550:	e7a4      	b.n	801549c <__mdiff+0x34>
 8015552:	f856 8b04 	ldr.w	r8, [r6], #4
 8015556:	fa11 f288 	uxtah	r2, r1, r8
 801555a:	1414      	asrs	r4, r2, #16
 801555c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015560:	b292      	uxth	r2, r2
 8015562:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015566:	f84e 2b04 	str.w	r2, [lr], #4
 801556a:	1421      	asrs	r1, r4, #16
 801556c:	e7e0      	b.n	8015530 <__mdiff+0xc8>
 801556e:	3f01      	subs	r7, #1
 8015570:	e7ea      	b.n	8015548 <__mdiff+0xe0>
 8015572:	bf00      	nop
 8015574:	08018841 	.word	0x08018841
 8015578:	08018852 	.word	0x08018852

0801557c <__ulp>:
 801557c:	b082      	sub	sp, #8
 801557e:	ed8d 0b00 	vstr	d0, [sp]
 8015582:	9a01      	ldr	r2, [sp, #4]
 8015584:	4b0f      	ldr	r3, [pc, #60]	; (80155c4 <__ulp+0x48>)
 8015586:	4013      	ands	r3, r2
 8015588:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801558c:	2b00      	cmp	r3, #0
 801558e:	dc08      	bgt.n	80155a2 <__ulp+0x26>
 8015590:	425b      	negs	r3, r3
 8015592:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015596:	ea4f 5223 	mov.w	r2, r3, asr #20
 801559a:	da04      	bge.n	80155a6 <__ulp+0x2a>
 801559c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80155a0:	4113      	asrs	r3, r2
 80155a2:	2200      	movs	r2, #0
 80155a4:	e008      	b.n	80155b8 <__ulp+0x3c>
 80155a6:	f1a2 0314 	sub.w	r3, r2, #20
 80155aa:	2b1e      	cmp	r3, #30
 80155ac:	bfda      	itte	le
 80155ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80155b2:	40da      	lsrle	r2, r3
 80155b4:	2201      	movgt	r2, #1
 80155b6:	2300      	movs	r3, #0
 80155b8:	4619      	mov	r1, r3
 80155ba:	4610      	mov	r0, r2
 80155bc:	ec41 0b10 	vmov	d0, r0, r1
 80155c0:	b002      	add	sp, #8
 80155c2:	4770      	bx	lr
 80155c4:	7ff00000 	.word	0x7ff00000

080155c8 <__b2d>:
 80155c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155cc:	6906      	ldr	r6, [r0, #16]
 80155ce:	f100 0814 	add.w	r8, r0, #20
 80155d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80155d6:	1f37      	subs	r7, r6, #4
 80155d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80155dc:	4610      	mov	r0, r2
 80155de:	f7ff fd53 	bl	8015088 <__hi0bits>
 80155e2:	f1c0 0320 	rsb	r3, r0, #32
 80155e6:	280a      	cmp	r0, #10
 80155e8:	600b      	str	r3, [r1, #0]
 80155ea:	491b      	ldr	r1, [pc, #108]	; (8015658 <__b2d+0x90>)
 80155ec:	dc15      	bgt.n	801561a <__b2d+0x52>
 80155ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80155f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80155f6:	45b8      	cmp	r8, r7
 80155f8:	ea43 0501 	orr.w	r5, r3, r1
 80155fc:	bf34      	ite	cc
 80155fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015602:	2300      	movcs	r3, #0
 8015604:	3015      	adds	r0, #21
 8015606:	fa02 f000 	lsl.w	r0, r2, r0
 801560a:	fa23 f30c 	lsr.w	r3, r3, ip
 801560e:	4303      	orrs	r3, r0
 8015610:	461c      	mov	r4, r3
 8015612:	ec45 4b10 	vmov	d0, r4, r5
 8015616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561a:	45b8      	cmp	r8, r7
 801561c:	bf3a      	itte	cc
 801561e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015622:	f1a6 0708 	subcc.w	r7, r6, #8
 8015626:	2300      	movcs	r3, #0
 8015628:	380b      	subs	r0, #11
 801562a:	d012      	beq.n	8015652 <__b2d+0x8a>
 801562c:	f1c0 0120 	rsb	r1, r0, #32
 8015630:	fa23 f401 	lsr.w	r4, r3, r1
 8015634:	4082      	lsls	r2, r0
 8015636:	4322      	orrs	r2, r4
 8015638:	4547      	cmp	r7, r8
 801563a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801563e:	bf8c      	ite	hi
 8015640:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015644:	2200      	movls	r2, #0
 8015646:	4083      	lsls	r3, r0
 8015648:	40ca      	lsrs	r2, r1
 801564a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801564e:	4313      	orrs	r3, r2
 8015650:	e7de      	b.n	8015610 <__b2d+0x48>
 8015652:	ea42 0501 	orr.w	r5, r2, r1
 8015656:	e7db      	b.n	8015610 <__b2d+0x48>
 8015658:	3ff00000 	.word	0x3ff00000

0801565c <__d2b>:
 801565c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015660:	460f      	mov	r7, r1
 8015662:	2101      	movs	r1, #1
 8015664:	ec59 8b10 	vmov	r8, r9, d0
 8015668:	4616      	mov	r6, r2
 801566a:	f7ff fc1b 	bl	8014ea4 <_Balloc>
 801566e:	4604      	mov	r4, r0
 8015670:	b930      	cbnz	r0, 8015680 <__d2b+0x24>
 8015672:	4602      	mov	r2, r0
 8015674:	4b24      	ldr	r3, [pc, #144]	; (8015708 <__d2b+0xac>)
 8015676:	4825      	ldr	r0, [pc, #148]	; (801570c <__d2b+0xb0>)
 8015678:	f240 310f 	movw	r1, #783	; 0x30f
 801567c:	f7fd fb8e 	bl	8012d9c <__assert_func>
 8015680:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015688:	bb2d      	cbnz	r5, 80156d6 <__d2b+0x7a>
 801568a:	9301      	str	r3, [sp, #4]
 801568c:	f1b8 0300 	subs.w	r3, r8, #0
 8015690:	d026      	beq.n	80156e0 <__d2b+0x84>
 8015692:	4668      	mov	r0, sp
 8015694:	9300      	str	r3, [sp, #0]
 8015696:	f7ff fd17 	bl	80150c8 <__lo0bits>
 801569a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801569e:	b1e8      	cbz	r0, 80156dc <__d2b+0x80>
 80156a0:	f1c0 0320 	rsb	r3, r0, #32
 80156a4:	fa02 f303 	lsl.w	r3, r2, r3
 80156a8:	430b      	orrs	r3, r1
 80156aa:	40c2      	lsrs	r2, r0
 80156ac:	6163      	str	r3, [r4, #20]
 80156ae:	9201      	str	r2, [sp, #4]
 80156b0:	9b01      	ldr	r3, [sp, #4]
 80156b2:	61a3      	str	r3, [r4, #24]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	bf14      	ite	ne
 80156b8:	2202      	movne	r2, #2
 80156ba:	2201      	moveq	r2, #1
 80156bc:	6122      	str	r2, [r4, #16]
 80156be:	b1bd      	cbz	r5, 80156f0 <__d2b+0x94>
 80156c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80156c4:	4405      	add	r5, r0
 80156c6:	603d      	str	r5, [r7, #0]
 80156c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80156cc:	6030      	str	r0, [r6, #0]
 80156ce:	4620      	mov	r0, r4
 80156d0:	b003      	add	sp, #12
 80156d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80156da:	e7d6      	b.n	801568a <__d2b+0x2e>
 80156dc:	6161      	str	r1, [r4, #20]
 80156de:	e7e7      	b.n	80156b0 <__d2b+0x54>
 80156e0:	a801      	add	r0, sp, #4
 80156e2:	f7ff fcf1 	bl	80150c8 <__lo0bits>
 80156e6:	9b01      	ldr	r3, [sp, #4]
 80156e8:	6163      	str	r3, [r4, #20]
 80156ea:	3020      	adds	r0, #32
 80156ec:	2201      	movs	r2, #1
 80156ee:	e7e5      	b.n	80156bc <__d2b+0x60>
 80156f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80156f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80156f8:	6038      	str	r0, [r7, #0]
 80156fa:	6918      	ldr	r0, [r3, #16]
 80156fc:	f7ff fcc4 	bl	8015088 <__hi0bits>
 8015700:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015704:	e7e2      	b.n	80156cc <__d2b+0x70>
 8015706:	bf00      	nop
 8015708:	08018841 	.word	0x08018841
 801570c:	08018852 	.word	0x08018852

08015710 <__ratio>:
 8015710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015714:	4688      	mov	r8, r1
 8015716:	4669      	mov	r1, sp
 8015718:	4681      	mov	r9, r0
 801571a:	f7ff ff55 	bl	80155c8 <__b2d>
 801571e:	a901      	add	r1, sp, #4
 8015720:	4640      	mov	r0, r8
 8015722:	ec55 4b10 	vmov	r4, r5, d0
 8015726:	f7ff ff4f 	bl	80155c8 <__b2d>
 801572a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801572e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015732:	eba3 0c02 	sub.w	ip, r3, r2
 8015736:	e9dd 3200 	ldrd	r3, r2, [sp]
 801573a:	1a9b      	subs	r3, r3, r2
 801573c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015740:	ec51 0b10 	vmov	r0, r1, d0
 8015744:	2b00      	cmp	r3, #0
 8015746:	bfd6      	itet	le
 8015748:	460a      	movle	r2, r1
 801574a:	462a      	movgt	r2, r5
 801574c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015750:	468b      	mov	fp, r1
 8015752:	462f      	mov	r7, r5
 8015754:	bfd4      	ite	le
 8015756:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801575a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801575e:	4620      	mov	r0, r4
 8015760:	ee10 2a10 	vmov	r2, s0
 8015764:	465b      	mov	r3, fp
 8015766:	4639      	mov	r1, r7
 8015768:	f7eb f898 	bl	800089c <__aeabi_ddiv>
 801576c:	ec41 0b10 	vmov	d0, r0, r1
 8015770:	b003      	add	sp, #12
 8015772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015776 <__copybits>:
 8015776:	3901      	subs	r1, #1
 8015778:	b570      	push	{r4, r5, r6, lr}
 801577a:	1149      	asrs	r1, r1, #5
 801577c:	6914      	ldr	r4, [r2, #16]
 801577e:	3101      	adds	r1, #1
 8015780:	f102 0314 	add.w	r3, r2, #20
 8015784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015788:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801578c:	1f05      	subs	r5, r0, #4
 801578e:	42a3      	cmp	r3, r4
 8015790:	d30c      	bcc.n	80157ac <__copybits+0x36>
 8015792:	1aa3      	subs	r3, r4, r2
 8015794:	3b11      	subs	r3, #17
 8015796:	f023 0303 	bic.w	r3, r3, #3
 801579a:	3211      	adds	r2, #17
 801579c:	42a2      	cmp	r2, r4
 801579e:	bf88      	it	hi
 80157a0:	2300      	movhi	r3, #0
 80157a2:	4418      	add	r0, r3
 80157a4:	2300      	movs	r3, #0
 80157a6:	4288      	cmp	r0, r1
 80157a8:	d305      	bcc.n	80157b6 <__copybits+0x40>
 80157aa:	bd70      	pop	{r4, r5, r6, pc}
 80157ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80157b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80157b4:	e7eb      	b.n	801578e <__copybits+0x18>
 80157b6:	f840 3b04 	str.w	r3, [r0], #4
 80157ba:	e7f4      	b.n	80157a6 <__copybits+0x30>

080157bc <__any_on>:
 80157bc:	f100 0214 	add.w	r2, r0, #20
 80157c0:	6900      	ldr	r0, [r0, #16]
 80157c2:	114b      	asrs	r3, r1, #5
 80157c4:	4298      	cmp	r0, r3
 80157c6:	b510      	push	{r4, lr}
 80157c8:	db11      	blt.n	80157ee <__any_on+0x32>
 80157ca:	dd0a      	ble.n	80157e2 <__any_on+0x26>
 80157cc:	f011 011f 	ands.w	r1, r1, #31
 80157d0:	d007      	beq.n	80157e2 <__any_on+0x26>
 80157d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80157d6:	fa24 f001 	lsr.w	r0, r4, r1
 80157da:	fa00 f101 	lsl.w	r1, r0, r1
 80157de:	428c      	cmp	r4, r1
 80157e0:	d10b      	bne.n	80157fa <__any_on+0x3e>
 80157e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80157e6:	4293      	cmp	r3, r2
 80157e8:	d803      	bhi.n	80157f2 <__any_on+0x36>
 80157ea:	2000      	movs	r0, #0
 80157ec:	bd10      	pop	{r4, pc}
 80157ee:	4603      	mov	r3, r0
 80157f0:	e7f7      	b.n	80157e2 <__any_on+0x26>
 80157f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80157f6:	2900      	cmp	r1, #0
 80157f8:	d0f5      	beq.n	80157e6 <__any_on+0x2a>
 80157fa:	2001      	movs	r0, #1
 80157fc:	e7f6      	b.n	80157ec <__any_on+0x30>

080157fe <sulp>:
 80157fe:	b570      	push	{r4, r5, r6, lr}
 8015800:	4604      	mov	r4, r0
 8015802:	460d      	mov	r5, r1
 8015804:	ec45 4b10 	vmov	d0, r4, r5
 8015808:	4616      	mov	r6, r2
 801580a:	f7ff feb7 	bl	801557c <__ulp>
 801580e:	ec51 0b10 	vmov	r0, r1, d0
 8015812:	b17e      	cbz	r6, 8015834 <sulp+0x36>
 8015814:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015818:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801581c:	2b00      	cmp	r3, #0
 801581e:	dd09      	ble.n	8015834 <sulp+0x36>
 8015820:	051b      	lsls	r3, r3, #20
 8015822:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015826:	2400      	movs	r4, #0
 8015828:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801582c:	4622      	mov	r2, r4
 801582e:	462b      	mov	r3, r5
 8015830:	f7ea ff0a 	bl	8000648 <__aeabi_dmul>
 8015834:	bd70      	pop	{r4, r5, r6, pc}
	...

08015838 <_strtod_l>:
 8015838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	ed2d 8b02 	vpush	{d8}
 8015840:	b09b      	sub	sp, #108	; 0x6c
 8015842:	4604      	mov	r4, r0
 8015844:	9213      	str	r2, [sp, #76]	; 0x4c
 8015846:	2200      	movs	r2, #0
 8015848:	9216      	str	r2, [sp, #88]	; 0x58
 801584a:	460d      	mov	r5, r1
 801584c:	f04f 0800 	mov.w	r8, #0
 8015850:	f04f 0900 	mov.w	r9, #0
 8015854:	460a      	mov	r2, r1
 8015856:	9215      	str	r2, [sp, #84]	; 0x54
 8015858:	7811      	ldrb	r1, [r2, #0]
 801585a:	292b      	cmp	r1, #43	; 0x2b
 801585c:	d04c      	beq.n	80158f8 <_strtod_l+0xc0>
 801585e:	d83a      	bhi.n	80158d6 <_strtod_l+0x9e>
 8015860:	290d      	cmp	r1, #13
 8015862:	d834      	bhi.n	80158ce <_strtod_l+0x96>
 8015864:	2908      	cmp	r1, #8
 8015866:	d834      	bhi.n	80158d2 <_strtod_l+0x9a>
 8015868:	2900      	cmp	r1, #0
 801586a:	d03d      	beq.n	80158e8 <_strtod_l+0xb0>
 801586c:	2200      	movs	r2, #0
 801586e:	920a      	str	r2, [sp, #40]	; 0x28
 8015870:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015872:	7832      	ldrb	r2, [r6, #0]
 8015874:	2a30      	cmp	r2, #48	; 0x30
 8015876:	f040 80b4 	bne.w	80159e2 <_strtod_l+0x1aa>
 801587a:	7872      	ldrb	r2, [r6, #1]
 801587c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015880:	2a58      	cmp	r2, #88	; 0x58
 8015882:	d170      	bne.n	8015966 <_strtod_l+0x12e>
 8015884:	9302      	str	r3, [sp, #8]
 8015886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	ab16      	add	r3, sp, #88	; 0x58
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	4a8e      	ldr	r2, [pc, #568]	; (8015ac8 <_strtod_l+0x290>)
 8015890:	ab17      	add	r3, sp, #92	; 0x5c
 8015892:	a915      	add	r1, sp, #84	; 0x54
 8015894:	4620      	mov	r0, r4
 8015896:	f001 fac1 	bl	8016e1c <__gethex>
 801589a:	f010 070f 	ands.w	r7, r0, #15
 801589e:	4605      	mov	r5, r0
 80158a0:	d005      	beq.n	80158ae <_strtod_l+0x76>
 80158a2:	2f06      	cmp	r7, #6
 80158a4:	d12a      	bne.n	80158fc <_strtod_l+0xc4>
 80158a6:	3601      	adds	r6, #1
 80158a8:	2300      	movs	r3, #0
 80158aa:	9615      	str	r6, [sp, #84]	; 0x54
 80158ac:	930a      	str	r3, [sp, #40]	; 0x28
 80158ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f040 857f 	bne.w	80163b4 <_strtod_l+0xb7c>
 80158b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158b8:	b1db      	cbz	r3, 80158f2 <_strtod_l+0xba>
 80158ba:	4642      	mov	r2, r8
 80158bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80158c0:	ec43 2b10 	vmov	d0, r2, r3
 80158c4:	b01b      	add	sp, #108	; 0x6c
 80158c6:	ecbd 8b02 	vpop	{d8}
 80158ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ce:	2920      	cmp	r1, #32
 80158d0:	d1cc      	bne.n	801586c <_strtod_l+0x34>
 80158d2:	3201      	adds	r2, #1
 80158d4:	e7bf      	b.n	8015856 <_strtod_l+0x1e>
 80158d6:	292d      	cmp	r1, #45	; 0x2d
 80158d8:	d1c8      	bne.n	801586c <_strtod_l+0x34>
 80158da:	2101      	movs	r1, #1
 80158dc:	910a      	str	r1, [sp, #40]	; 0x28
 80158de:	1c51      	adds	r1, r2, #1
 80158e0:	9115      	str	r1, [sp, #84]	; 0x54
 80158e2:	7852      	ldrb	r2, [r2, #1]
 80158e4:	2a00      	cmp	r2, #0
 80158e6:	d1c3      	bne.n	8015870 <_strtod_l+0x38>
 80158e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158ea:	9515      	str	r5, [sp, #84]	; 0x54
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	f040 855f 	bne.w	80163b0 <_strtod_l+0xb78>
 80158f2:	4642      	mov	r2, r8
 80158f4:	464b      	mov	r3, r9
 80158f6:	e7e3      	b.n	80158c0 <_strtod_l+0x88>
 80158f8:	2100      	movs	r1, #0
 80158fa:	e7ef      	b.n	80158dc <_strtod_l+0xa4>
 80158fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80158fe:	b13a      	cbz	r2, 8015910 <_strtod_l+0xd8>
 8015900:	2135      	movs	r1, #53	; 0x35
 8015902:	a818      	add	r0, sp, #96	; 0x60
 8015904:	f7ff ff37 	bl	8015776 <__copybits>
 8015908:	9916      	ldr	r1, [sp, #88]	; 0x58
 801590a:	4620      	mov	r0, r4
 801590c:	f7ff fb0a 	bl	8014f24 <_Bfree>
 8015910:	3f01      	subs	r7, #1
 8015912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015914:	2f04      	cmp	r7, #4
 8015916:	d806      	bhi.n	8015926 <_strtod_l+0xee>
 8015918:	e8df f007 	tbb	[pc, r7]
 801591c:	201d0314 	.word	0x201d0314
 8015920:	14          	.byte	0x14
 8015921:	00          	.byte	0x00
 8015922:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015926:	05e9      	lsls	r1, r5, #23
 8015928:	bf48      	it	mi
 801592a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801592e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015932:	0d1b      	lsrs	r3, r3, #20
 8015934:	051b      	lsls	r3, r3, #20
 8015936:	2b00      	cmp	r3, #0
 8015938:	d1b9      	bne.n	80158ae <_strtod_l+0x76>
 801593a:	f7fe fbab 	bl	8014094 <__errno>
 801593e:	2322      	movs	r3, #34	; 0x22
 8015940:	6003      	str	r3, [r0, #0]
 8015942:	e7b4      	b.n	80158ae <_strtod_l+0x76>
 8015944:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015948:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801594c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015950:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015954:	e7e7      	b.n	8015926 <_strtod_l+0xee>
 8015956:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015ad0 <_strtod_l+0x298>
 801595a:	e7e4      	b.n	8015926 <_strtod_l+0xee>
 801595c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015960:	f04f 38ff 	mov.w	r8, #4294967295
 8015964:	e7df      	b.n	8015926 <_strtod_l+0xee>
 8015966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015968:	1c5a      	adds	r2, r3, #1
 801596a:	9215      	str	r2, [sp, #84]	; 0x54
 801596c:	785b      	ldrb	r3, [r3, #1]
 801596e:	2b30      	cmp	r3, #48	; 0x30
 8015970:	d0f9      	beq.n	8015966 <_strtod_l+0x12e>
 8015972:	2b00      	cmp	r3, #0
 8015974:	d09b      	beq.n	80158ae <_strtod_l+0x76>
 8015976:	2301      	movs	r3, #1
 8015978:	f04f 0a00 	mov.w	sl, #0
 801597c:	9304      	str	r3, [sp, #16]
 801597e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015980:	930b      	str	r3, [sp, #44]	; 0x2c
 8015982:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015986:	46d3      	mov	fp, sl
 8015988:	220a      	movs	r2, #10
 801598a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801598c:	7806      	ldrb	r6, [r0, #0]
 801598e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015992:	b2d9      	uxtb	r1, r3
 8015994:	2909      	cmp	r1, #9
 8015996:	d926      	bls.n	80159e6 <_strtod_l+0x1ae>
 8015998:	494c      	ldr	r1, [pc, #304]	; (8015acc <_strtod_l+0x294>)
 801599a:	2201      	movs	r2, #1
 801599c:	f001 f9a6 	bl	8016cec <strncmp>
 80159a0:	2800      	cmp	r0, #0
 80159a2:	d030      	beq.n	8015a06 <_strtod_l+0x1ce>
 80159a4:	2000      	movs	r0, #0
 80159a6:	4632      	mov	r2, r6
 80159a8:	9005      	str	r0, [sp, #20]
 80159aa:	465e      	mov	r6, fp
 80159ac:	4603      	mov	r3, r0
 80159ae:	2a65      	cmp	r2, #101	; 0x65
 80159b0:	d001      	beq.n	80159b6 <_strtod_l+0x17e>
 80159b2:	2a45      	cmp	r2, #69	; 0x45
 80159b4:	d113      	bne.n	80159de <_strtod_l+0x1a6>
 80159b6:	b91e      	cbnz	r6, 80159c0 <_strtod_l+0x188>
 80159b8:	9a04      	ldr	r2, [sp, #16]
 80159ba:	4302      	orrs	r2, r0
 80159bc:	d094      	beq.n	80158e8 <_strtod_l+0xb0>
 80159be:	2600      	movs	r6, #0
 80159c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80159c2:	1c6a      	adds	r2, r5, #1
 80159c4:	9215      	str	r2, [sp, #84]	; 0x54
 80159c6:	786a      	ldrb	r2, [r5, #1]
 80159c8:	2a2b      	cmp	r2, #43	; 0x2b
 80159ca:	d074      	beq.n	8015ab6 <_strtod_l+0x27e>
 80159cc:	2a2d      	cmp	r2, #45	; 0x2d
 80159ce:	d078      	beq.n	8015ac2 <_strtod_l+0x28a>
 80159d0:	f04f 0c00 	mov.w	ip, #0
 80159d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80159d8:	2909      	cmp	r1, #9
 80159da:	d97f      	bls.n	8015adc <_strtod_l+0x2a4>
 80159dc:	9515      	str	r5, [sp, #84]	; 0x54
 80159de:	2700      	movs	r7, #0
 80159e0:	e09e      	b.n	8015b20 <_strtod_l+0x2e8>
 80159e2:	2300      	movs	r3, #0
 80159e4:	e7c8      	b.n	8015978 <_strtod_l+0x140>
 80159e6:	f1bb 0f08 	cmp.w	fp, #8
 80159ea:	bfd8      	it	le
 80159ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80159ee:	f100 0001 	add.w	r0, r0, #1
 80159f2:	bfda      	itte	le
 80159f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80159f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80159fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80159fe:	f10b 0b01 	add.w	fp, fp, #1
 8015a02:	9015      	str	r0, [sp, #84]	; 0x54
 8015a04:	e7c1      	b.n	801598a <_strtod_l+0x152>
 8015a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	9215      	str	r2, [sp, #84]	; 0x54
 8015a0c:	785a      	ldrb	r2, [r3, #1]
 8015a0e:	f1bb 0f00 	cmp.w	fp, #0
 8015a12:	d037      	beq.n	8015a84 <_strtod_l+0x24c>
 8015a14:	9005      	str	r0, [sp, #20]
 8015a16:	465e      	mov	r6, fp
 8015a18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015a1c:	2b09      	cmp	r3, #9
 8015a1e:	d912      	bls.n	8015a46 <_strtod_l+0x20e>
 8015a20:	2301      	movs	r3, #1
 8015a22:	e7c4      	b.n	80159ae <_strtod_l+0x176>
 8015a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a26:	1c5a      	adds	r2, r3, #1
 8015a28:	9215      	str	r2, [sp, #84]	; 0x54
 8015a2a:	785a      	ldrb	r2, [r3, #1]
 8015a2c:	3001      	adds	r0, #1
 8015a2e:	2a30      	cmp	r2, #48	; 0x30
 8015a30:	d0f8      	beq.n	8015a24 <_strtod_l+0x1ec>
 8015a32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015a36:	2b08      	cmp	r3, #8
 8015a38:	f200 84c1 	bhi.w	80163be <_strtod_l+0xb86>
 8015a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a3e:	9005      	str	r0, [sp, #20]
 8015a40:	2000      	movs	r0, #0
 8015a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a44:	4606      	mov	r6, r0
 8015a46:	3a30      	subs	r2, #48	; 0x30
 8015a48:	f100 0301 	add.w	r3, r0, #1
 8015a4c:	d014      	beq.n	8015a78 <_strtod_l+0x240>
 8015a4e:	9905      	ldr	r1, [sp, #20]
 8015a50:	4419      	add	r1, r3
 8015a52:	9105      	str	r1, [sp, #20]
 8015a54:	4633      	mov	r3, r6
 8015a56:	eb00 0c06 	add.w	ip, r0, r6
 8015a5a:	210a      	movs	r1, #10
 8015a5c:	4563      	cmp	r3, ip
 8015a5e:	d113      	bne.n	8015a88 <_strtod_l+0x250>
 8015a60:	1833      	adds	r3, r6, r0
 8015a62:	2b08      	cmp	r3, #8
 8015a64:	f106 0601 	add.w	r6, r6, #1
 8015a68:	4406      	add	r6, r0
 8015a6a:	dc1a      	bgt.n	8015aa2 <_strtod_l+0x26a>
 8015a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a6e:	230a      	movs	r3, #10
 8015a70:	fb03 2301 	mla	r3, r3, r1, r2
 8015a74:	9309      	str	r3, [sp, #36]	; 0x24
 8015a76:	2300      	movs	r3, #0
 8015a78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015a7a:	1c51      	adds	r1, r2, #1
 8015a7c:	9115      	str	r1, [sp, #84]	; 0x54
 8015a7e:	7852      	ldrb	r2, [r2, #1]
 8015a80:	4618      	mov	r0, r3
 8015a82:	e7c9      	b.n	8015a18 <_strtod_l+0x1e0>
 8015a84:	4658      	mov	r0, fp
 8015a86:	e7d2      	b.n	8015a2e <_strtod_l+0x1f6>
 8015a88:	2b08      	cmp	r3, #8
 8015a8a:	f103 0301 	add.w	r3, r3, #1
 8015a8e:	dc03      	bgt.n	8015a98 <_strtod_l+0x260>
 8015a90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015a92:	434f      	muls	r7, r1
 8015a94:	9709      	str	r7, [sp, #36]	; 0x24
 8015a96:	e7e1      	b.n	8015a5c <_strtod_l+0x224>
 8015a98:	2b10      	cmp	r3, #16
 8015a9a:	bfd8      	it	le
 8015a9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015aa0:	e7dc      	b.n	8015a5c <_strtod_l+0x224>
 8015aa2:	2e10      	cmp	r6, #16
 8015aa4:	bfdc      	itt	le
 8015aa6:	230a      	movle	r3, #10
 8015aa8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015aac:	e7e3      	b.n	8015a76 <_strtod_l+0x23e>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	9305      	str	r3, [sp, #20]
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e780      	b.n	80159b8 <_strtod_l+0x180>
 8015ab6:	f04f 0c00 	mov.w	ip, #0
 8015aba:	1caa      	adds	r2, r5, #2
 8015abc:	9215      	str	r2, [sp, #84]	; 0x54
 8015abe:	78aa      	ldrb	r2, [r5, #2]
 8015ac0:	e788      	b.n	80159d4 <_strtod_l+0x19c>
 8015ac2:	f04f 0c01 	mov.w	ip, #1
 8015ac6:	e7f8      	b.n	8015aba <_strtod_l+0x282>
 8015ac8:	080189b0 	.word	0x080189b0
 8015acc:	080189ac 	.word	0x080189ac
 8015ad0:	7ff00000 	.word	0x7ff00000
 8015ad4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015ad6:	1c51      	adds	r1, r2, #1
 8015ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8015ada:	7852      	ldrb	r2, [r2, #1]
 8015adc:	2a30      	cmp	r2, #48	; 0x30
 8015ade:	d0f9      	beq.n	8015ad4 <_strtod_l+0x29c>
 8015ae0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015ae4:	2908      	cmp	r1, #8
 8015ae6:	f63f af7a 	bhi.w	80159de <_strtod_l+0x1a6>
 8015aea:	3a30      	subs	r2, #48	; 0x30
 8015aec:	9208      	str	r2, [sp, #32]
 8015aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015af0:	920c      	str	r2, [sp, #48]	; 0x30
 8015af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015af4:	1c57      	adds	r7, r2, #1
 8015af6:	9715      	str	r7, [sp, #84]	; 0x54
 8015af8:	7852      	ldrb	r2, [r2, #1]
 8015afa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015afe:	f1be 0f09 	cmp.w	lr, #9
 8015b02:	d938      	bls.n	8015b76 <_strtod_l+0x33e>
 8015b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b06:	1a7f      	subs	r7, r7, r1
 8015b08:	2f08      	cmp	r7, #8
 8015b0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015b0e:	dc03      	bgt.n	8015b18 <_strtod_l+0x2e0>
 8015b10:	9908      	ldr	r1, [sp, #32]
 8015b12:	428f      	cmp	r7, r1
 8015b14:	bfa8      	it	ge
 8015b16:	460f      	movge	r7, r1
 8015b18:	f1bc 0f00 	cmp.w	ip, #0
 8015b1c:	d000      	beq.n	8015b20 <_strtod_l+0x2e8>
 8015b1e:	427f      	negs	r7, r7
 8015b20:	2e00      	cmp	r6, #0
 8015b22:	d14f      	bne.n	8015bc4 <_strtod_l+0x38c>
 8015b24:	9904      	ldr	r1, [sp, #16]
 8015b26:	4301      	orrs	r1, r0
 8015b28:	f47f aec1 	bne.w	80158ae <_strtod_l+0x76>
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f47f aedb 	bne.w	80158e8 <_strtod_l+0xb0>
 8015b32:	2a69      	cmp	r2, #105	; 0x69
 8015b34:	d029      	beq.n	8015b8a <_strtod_l+0x352>
 8015b36:	dc26      	bgt.n	8015b86 <_strtod_l+0x34e>
 8015b38:	2a49      	cmp	r2, #73	; 0x49
 8015b3a:	d026      	beq.n	8015b8a <_strtod_l+0x352>
 8015b3c:	2a4e      	cmp	r2, #78	; 0x4e
 8015b3e:	f47f aed3 	bne.w	80158e8 <_strtod_l+0xb0>
 8015b42:	499b      	ldr	r1, [pc, #620]	; (8015db0 <_strtod_l+0x578>)
 8015b44:	a815      	add	r0, sp, #84	; 0x54
 8015b46:	f001 fba9 	bl	801729c <__match>
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	f43f aecc 	beq.w	80158e8 <_strtod_l+0xb0>
 8015b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	2b28      	cmp	r3, #40	; 0x28
 8015b56:	d12f      	bne.n	8015bb8 <_strtod_l+0x380>
 8015b58:	4996      	ldr	r1, [pc, #600]	; (8015db4 <_strtod_l+0x57c>)
 8015b5a:	aa18      	add	r2, sp, #96	; 0x60
 8015b5c:	a815      	add	r0, sp, #84	; 0x54
 8015b5e:	f001 fbb1 	bl	80172c4 <__hexnan>
 8015b62:	2805      	cmp	r0, #5
 8015b64:	d128      	bne.n	8015bb8 <_strtod_l+0x380>
 8015b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015b6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015b70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015b74:	e69b      	b.n	80158ae <_strtod_l+0x76>
 8015b76:	9f08      	ldr	r7, [sp, #32]
 8015b78:	210a      	movs	r1, #10
 8015b7a:	fb01 2107 	mla	r1, r1, r7, r2
 8015b7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015b82:	9208      	str	r2, [sp, #32]
 8015b84:	e7b5      	b.n	8015af2 <_strtod_l+0x2ba>
 8015b86:	2a6e      	cmp	r2, #110	; 0x6e
 8015b88:	e7d9      	b.n	8015b3e <_strtod_l+0x306>
 8015b8a:	498b      	ldr	r1, [pc, #556]	; (8015db8 <_strtod_l+0x580>)
 8015b8c:	a815      	add	r0, sp, #84	; 0x54
 8015b8e:	f001 fb85 	bl	801729c <__match>
 8015b92:	2800      	cmp	r0, #0
 8015b94:	f43f aea8 	beq.w	80158e8 <_strtod_l+0xb0>
 8015b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b9a:	4988      	ldr	r1, [pc, #544]	; (8015dbc <_strtod_l+0x584>)
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	a815      	add	r0, sp, #84	; 0x54
 8015ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8015ba2:	f001 fb7b 	bl	801729c <__match>
 8015ba6:	b910      	cbnz	r0, 8015bae <_strtod_l+0x376>
 8015ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015baa:	3301      	adds	r3, #1
 8015bac:	9315      	str	r3, [sp, #84]	; 0x54
 8015bae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015dcc <_strtod_l+0x594>
 8015bb2:	f04f 0800 	mov.w	r8, #0
 8015bb6:	e67a      	b.n	80158ae <_strtod_l+0x76>
 8015bb8:	4881      	ldr	r0, [pc, #516]	; (8015dc0 <_strtod_l+0x588>)
 8015bba:	f001 f8a9 	bl	8016d10 <nan>
 8015bbe:	ec59 8b10 	vmov	r8, r9, d0
 8015bc2:	e674      	b.n	80158ae <_strtod_l+0x76>
 8015bc4:	9b05      	ldr	r3, [sp, #20]
 8015bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bc8:	1afb      	subs	r3, r7, r3
 8015bca:	f1bb 0f00 	cmp.w	fp, #0
 8015bce:	bf08      	it	eq
 8015bd0:	46b3      	moveq	fp, r6
 8015bd2:	2e10      	cmp	r6, #16
 8015bd4:	9308      	str	r3, [sp, #32]
 8015bd6:	4635      	mov	r5, r6
 8015bd8:	bfa8      	it	ge
 8015bda:	2510      	movge	r5, #16
 8015bdc:	f7ea fcba 	bl	8000554 <__aeabi_ui2d>
 8015be0:	2e09      	cmp	r6, #9
 8015be2:	4680      	mov	r8, r0
 8015be4:	4689      	mov	r9, r1
 8015be6:	dd13      	ble.n	8015c10 <_strtod_l+0x3d8>
 8015be8:	4b76      	ldr	r3, [pc, #472]	; (8015dc4 <_strtod_l+0x58c>)
 8015bea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015bee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015bf2:	f7ea fd29 	bl	8000648 <__aeabi_dmul>
 8015bf6:	4680      	mov	r8, r0
 8015bf8:	4650      	mov	r0, sl
 8015bfa:	4689      	mov	r9, r1
 8015bfc:	f7ea fcaa 	bl	8000554 <__aeabi_ui2d>
 8015c00:	4602      	mov	r2, r0
 8015c02:	460b      	mov	r3, r1
 8015c04:	4640      	mov	r0, r8
 8015c06:	4649      	mov	r1, r9
 8015c08:	f7ea fb68 	bl	80002dc <__adddf3>
 8015c0c:	4680      	mov	r8, r0
 8015c0e:	4689      	mov	r9, r1
 8015c10:	2e0f      	cmp	r6, #15
 8015c12:	dc38      	bgt.n	8015c86 <_strtod_l+0x44e>
 8015c14:	9b08      	ldr	r3, [sp, #32]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	f43f ae49 	beq.w	80158ae <_strtod_l+0x76>
 8015c1c:	dd24      	ble.n	8015c68 <_strtod_l+0x430>
 8015c1e:	2b16      	cmp	r3, #22
 8015c20:	dc0b      	bgt.n	8015c3a <_strtod_l+0x402>
 8015c22:	4968      	ldr	r1, [pc, #416]	; (8015dc4 <_strtod_l+0x58c>)
 8015c24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c2c:	4642      	mov	r2, r8
 8015c2e:	464b      	mov	r3, r9
 8015c30:	f7ea fd0a 	bl	8000648 <__aeabi_dmul>
 8015c34:	4680      	mov	r8, r0
 8015c36:	4689      	mov	r9, r1
 8015c38:	e639      	b.n	80158ae <_strtod_l+0x76>
 8015c3a:	9a08      	ldr	r2, [sp, #32]
 8015c3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015c40:	4293      	cmp	r3, r2
 8015c42:	db20      	blt.n	8015c86 <_strtod_l+0x44e>
 8015c44:	4c5f      	ldr	r4, [pc, #380]	; (8015dc4 <_strtod_l+0x58c>)
 8015c46:	f1c6 060f 	rsb	r6, r6, #15
 8015c4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015c4e:	4642      	mov	r2, r8
 8015c50:	464b      	mov	r3, r9
 8015c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c56:	f7ea fcf7 	bl	8000648 <__aeabi_dmul>
 8015c5a:	9b08      	ldr	r3, [sp, #32]
 8015c5c:	1b9e      	subs	r6, r3, r6
 8015c5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015c62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015c66:	e7e3      	b.n	8015c30 <_strtod_l+0x3f8>
 8015c68:	9b08      	ldr	r3, [sp, #32]
 8015c6a:	3316      	adds	r3, #22
 8015c6c:	db0b      	blt.n	8015c86 <_strtod_l+0x44e>
 8015c6e:	9b05      	ldr	r3, [sp, #20]
 8015c70:	1bdf      	subs	r7, r3, r7
 8015c72:	4b54      	ldr	r3, [pc, #336]	; (8015dc4 <_strtod_l+0x58c>)
 8015c74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c7c:	4640      	mov	r0, r8
 8015c7e:	4649      	mov	r1, r9
 8015c80:	f7ea fe0c 	bl	800089c <__aeabi_ddiv>
 8015c84:	e7d6      	b.n	8015c34 <_strtod_l+0x3fc>
 8015c86:	9b08      	ldr	r3, [sp, #32]
 8015c88:	1b75      	subs	r5, r6, r5
 8015c8a:	441d      	add	r5, r3
 8015c8c:	2d00      	cmp	r5, #0
 8015c8e:	dd70      	ble.n	8015d72 <_strtod_l+0x53a>
 8015c90:	f015 030f 	ands.w	r3, r5, #15
 8015c94:	d00a      	beq.n	8015cac <_strtod_l+0x474>
 8015c96:	494b      	ldr	r1, [pc, #300]	; (8015dc4 <_strtod_l+0x58c>)
 8015c98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c9c:	4642      	mov	r2, r8
 8015c9e:	464b      	mov	r3, r9
 8015ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ca4:	f7ea fcd0 	bl	8000648 <__aeabi_dmul>
 8015ca8:	4680      	mov	r8, r0
 8015caa:	4689      	mov	r9, r1
 8015cac:	f035 050f 	bics.w	r5, r5, #15
 8015cb0:	d04d      	beq.n	8015d4e <_strtod_l+0x516>
 8015cb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015cb6:	dd22      	ble.n	8015cfe <_strtod_l+0x4c6>
 8015cb8:	2500      	movs	r5, #0
 8015cba:	46ab      	mov	fp, r5
 8015cbc:	9509      	str	r5, [sp, #36]	; 0x24
 8015cbe:	9505      	str	r5, [sp, #20]
 8015cc0:	2322      	movs	r3, #34	; 0x22
 8015cc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015dcc <_strtod_l+0x594>
 8015cc6:	6023      	str	r3, [r4, #0]
 8015cc8:	f04f 0800 	mov.w	r8, #0
 8015ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	f43f aded 	beq.w	80158ae <_strtod_l+0x76>
 8015cd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f7ff f924 	bl	8014f24 <_Bfree>
 8015cdc:	9905      	ldr	r1, [sp, #20]
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f7ff f920 	bl	8014f24 <_Bfree>
 8015ce4:	4659      	mov	r1, fp
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f7ff f91c 	bl	8014f24 <_Bfree>
 8015cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f7ff f918 	bl	8014f24 <_Bfree>
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f7ff f914 	bl	8014f24 <_Bfree>
 8015cfc:	e5d7      	b.n	80158ae <_strtod_l+0x76>
 8015cfe:	4b32      	ldr	r3, [pc, #200]	; (8015dc8 <_strtod_l+0x590>)
 8015d00:	9304      	str	r3, [sp, #16]
 8015d02:	2300      	movs	r3, #0
 8015d04:	112d      	asrs	r5, r5, #4
 8015d06:	4640      	mov	r0, r8
 8015d08:	4649      	mov	r1, r9
 8015d0a:	469a      	mov	sl, r3
 8015d0c:	2d01      	cmp	r5, #1
 8015d0e:	dc21      	bgt.n	8015d54 <_strtod_l+0x51c>
 8015d10:	b10b      	cbz	r3, 8015d16 <_strtod_l+0x4de>
 8015d12:	4680      	mov	r8, r0
 8015d14:	4689      	mov	r9, r1
 8015d16:	492c      	ldr	r1, [pc, #176]	; (8015dc8 <_strtod_l+0x590>)
 8015d18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015d1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015d20:	4642      	mov	r2, r8
 8015d22:	464b      	mov	r3, r9
 8015d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d28:	f7ea fc8e 	bl	8000648 <__aeabi_dmul>
 8015d2c:	4b27      	ldr	r3, [pc, #156]	; (8015dcc <_strtod_l+0x594>)
 8015d2e:	460a      	mov	r2, r1
 8015d30:	400b      	ands	r3, r1
 8015d32:	4927      	ldr	r1, [pc, #156]	; (8015dd0 <_strtod_l+0x598>)
 8015d34:	428b      	cmp	r3, r1
 8015d36:	4680      	mov	r8, r0
 8015d38:	d8be      	bhi.n	8015cb8 <_strtod_l+0x480>
 8015d3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015d3e:	428b      	cmp	r3, r1
 8015d40:	bf86      	itte	hi
 8015d42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015dd4 <_strtod_l+0x59c>
 8015d46:	f04f 38ff 	movhi.w	r8, #4294967295
 8015d4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015d4e:	2300      	movs	r3, #0
 8015d50:	9304      	str	r3, [sp, #16]
 8015d52:	e07b      	b.n	8015e4c <_strtod_l+0x614>
 8015d54:	07ea      	lsls	r2, r5, #31
 8015d56:	d505      	bpl.n	8015d64 <_strtod_l+0x52c>
 8015d58:	9b04      	ldr	r3, [sp, #16]
 8015d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5e:	f7ea fc73 	bl	8000648 <__aeabi_dmul>
 8015d62:	2301      	movs	r3, #1
 8015d64:	9a04      	ldr	r2, [sp, #16]
 8015d66:	3208      	adds	r2, #8
 8015d68:	f10a 0a01 	add.w	sl, sl, #1
 8015d6c:	106d      	asrs	r5, r5, #1
 8015d6e:	9204      	str	r2, [sp, #16]
 8015d70:	e7cc      	b.n	8015d0c <_strtod_l+0x4d4>
 8015d72:	d0ec      	beq.n	8015d4e <_strtod_l+0x516>
 8015d74:	426d      	negs	r5, r5
 8015d76:	f015 020f 	ands.w	r2, r5, #15
 8015d7a:	d00a      	beq.n	8015d92 <_strtod_l+0x55a>
 8015d7c:	4b11      	ldr	r3, [pc, #68]	; (8015dc4 <_strtod_l+0x58c>)
 8015d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d82:	4640      	mov	r0, r8
 8015d84:	4649      	mov	r1, r9
 8015d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8a:	f7ea fd87 	bl	800089c <__aeabi_ddiv>
 8015d8e:	4680      	mov	r8, r0
 8015d90:	4689      	mov	r9, r1
 8015d92:	112d      	asrs	r5, r5, #4
 8015d94:	d0db      	beq.n	8015d4e <_strtod_l+0x516>
 8015d96:	2d1f      	cmp	r5, #31
 8015d98:	dd1e      	ble.n	8015dd8 <_strtod_l+0x5a0>
 8015d9a:	2500      	movs	r5, #0
 8015d9c:	46ab      	mov	fp, r5
 8015d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8015da0:	9505      	str	r5, [sp, #20]
 8015da2:	2322      	movs	r3, #34	; 0x22
 8015da4:	f04f 0800 	mov.w	r8, #0
 8015da8:	f04f 0900 	mov.w	r9, #0
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	e78d      	b.n	8015ccc <_strtod_l+0x494>
 8015db0:	08018799 	.word	0x08018799
 8015db4:	080189c4 	.word	0x080189c4
 8015db8:	08018791 	.word	0x08018791
 8015dbc:	080187c8 	.word	0x080187c8
 8015dc0:	0801878b 	.word	0x0801878b
 8015dc4:	080188d8 	.word	0x080188d8
 8015dc8:	080188b0 	.word	0x080188b0
 8015dcc:	7ff00000 	.word	0x7ff00000
 8015dd0:	7ca00000 	.word	0x7ca00000
 8015dd4:	7fefffff 	.word	0x7fefffff
 8015dd8:	f015 0310 	ands.w	r3, r5, #16
 8015ddc:	bf18      	it	ne
 8015dde:	236a      	movne	r3, #106	; 0x6a
 8015de0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016184 <_strtod_l+0x94c>
 8015de4:	9304      	str	r3, [sp, #16]
 8015de6:	4640      	mov	r0, r8
 8015de8:	4649      	mov	r1, r9
 8015dea:	2300      	movs	r3, #0
 8015dec:	07ea      	lsls	r2, r5, #31
 8015dee:	d504      	bpl.n	8015dfa <_strtod_l+0x5c2>
 8015df0:	e9da 2300 	ldrd	r2, r3, [sl]
 8015df4:	f7ea fc28 	bl	8000648 <__aeabi_dmul>
 8015df8:	2301      	movs	r3, #1
 8015dfa:	106d      	asrs	r5, r5, #1
 8015dfc:	f10a 0a08 	add.w	sl, sl, #8
 8015e00:	d1f4      	bne.n	8015dec <_strtod_l+0x5b4>
 8015e02:	b10b      	cbz	r3, 8015e08 <_strtod_l+0x5d0>
 8015e04:	4680      	mov	r8, r0
 8015e06:	4689      	mov	r9, r1
 8015e08:	9b04      	ldr	r3, [sp, #16]
 8015e0a:	b1bb      	cbz	r3, 8015e3c <_strtod_l+0x604>
 8015e0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015e10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	4649      	mov	r1, r9
 8015e18:	dd10      	ble.n	8015e3c <_strtod_l+0x604>
 8015e1a:	2b1f      	cmp	r3, #31
 8015e1c:	f340 811e 	ble.w	801605c <_strtod_l+0x824>
 8015e20:	2b34      	cmp	r3, #52	; 0x34
 8015e22:	bfde      	ittt	le
 8015e24:	f04f 33ff 	movle.w	r3, #4294967295
 8015e28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015e2c:	4093      	lslle	r3, r2
 8015e2e:	f04f 0800 	mov.w	r8, #0
 8015e32:	bfcc      	ite	gt
 8015e34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015e38:	ea03 0901 	andle.w	r9, r3, r1
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	2300      	movs	r3, #0
 8015e40:	4640      	mov	r0, r8
 8015e42:	4649      	mov	r1, r9
 8015e44:	f7ea fe68 	bl	8000b18 <__aeabi_dcmpeq>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d1a6      	bne.n	8015d9a <_strtod_l+0x562>
 8015e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e4e:	9300      	str	r3, [sp, #0]
 8015e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e52:	4633      	mov	r3, r6
 8015e54:	465a      	mov	r2, fp
 8015e56:	4620      	mov	r0, r4
 8015e58:	f7ff f8cc 	bl	8014ff4 <__s2b>
 8015e5c:	9009      	str	r0, [sp, #36]	; 0x24
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	f43f af2a 	beq.w	8015cb8 <_strtod_l+0x480>
 8015e64:	9a08      	ldr	r2, [sp, #32]
 8015e66:	9b05      	ldr	r3, [sp, #20]
 8015e68:	2a00      	cmp	r2, #0
 8015e6a:	eba3 0307 	sub.w	r3, r3, r7
 8015e6e:	bfa8      	it	ge
 8015e70:	2300      	movge	r3, #0
 8015e72:	930c      	str	r3, [sp, #48]	; 0x30
 8015e74:	2500      	movs	r5, #0
 8015e76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8015e7c:	46ab      	mov	fp, r5
 8015e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e80:	4620      	mov	r0, r4
 8015e82:	6859      	ldr	r1, [r3, #4]
 8015e84:	f7ff f80e 	bl	8014ea4 <_Balloc>
 8015e88:	9005      	str	r0, [sp, #20]
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	f43f af18 	beq.w	8015cc0 <_strtod_l+0x488>
 8015e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e92:	691a      	ldr	r2, [r3, #16]
 8015e94:	3202      	adds	r2, #2
 8015e96:	f103 010c 	add.w	r1, r3, #12
 8015e9a:	0092      	lsls	r2, r2, #2
 8015e9c:	300c      	adds	r0, #12
 8015e9e:	f7fe f926 	bl	80140ee <memcpy>
 8015ea2:	ec49 8b10 	vmov	d0, r8, r9
 8015ea6:	aa18      	add	r2, sp, #96	; 0x60
 8015ea8:	a917      	add	r1, sp, #92	; 0x5c
 8015eaa:	4620      	mov	r0, r4
 8015eac:	f7ff fbd6 	bl	801565c <__d2b>
 8015eb0:	ec49 8b18 	vmov	d8, r8, r9
 8015eb4:	9016      	str	r0, [sp, #88]	; 0x58
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	f43f af02 	beq.w	8015cc0 <_strtod_l+0x488>
 8015ebc:	2101      	movs	r1, #1
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f7ff f930 	bl	8015124 <__i2b>
 8015ec4:	4683      	mov	fp, r0
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f43f aefa 	beq.w	8015cc0 <_strtod_l+0x488>
 8015ecc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015ece:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ed0:	2e00      	cmp	r6, #0
 8015ed2:	bfab      	itete	ge
 8015ed4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015ed6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015ed8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015eda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015ede:	bfac      	ite	ge
 8015ee0:	eb06 0a03 	addge.w	sl, r6, r3
 8015ee4:	1b9f      	sublt	r7, r3, r6
 8015ee6:	9b04      	ldr	r3, [sp, #16]
 8015ee8:	1af6      	subs	r6, r6, r3
 8015eea:	4416      	add	r6, r2
 8015eec:	4ba0      	ldr	r3, [pc, #640]	; (8016170 <_strtod_l+0x938>)
 8015eee:	3e01      	subs	r6, #1
 8015ef0:	429e      	cmp	r6, r3
 8015ef2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015ef6:	f280 80c4 	bge.w	8016082 <_strtod_l+0x84a>
 8015efa:	1b9b      	subs	r3, r3, r6
 8015efc:	2b1f      	cmp	r3, #31
 8015efe:	eba2 0203 	sub.w	r2, r2, r3
 8015f02:	f04f 0101 	mov.w	r1, #1
 8015f06:	f300 80b0 	bgt.w	801606a <_strtod_l+0x832>
 8015f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8015f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8015f10:	2300      	movs	r3, #0
 8015f12:	930d      	str	r3, [sp, #52]	; 0x34
 8015f14:	eb0a 0602 	add.w	r6, sl, r2
 8015f18:	9b04      	ldr	r3, [sp, #16]
 8015f1a:	45b2      	cmp	sl, r6
 8015f1c:	4417      	add	r7, r2
 8015f1e:	441f      	add	r7, r3
 8015f20:	4653      	mov	r3, sl
 8015f22:	bfa8      	it	ge
 8015f24:	4633      	movge	r3, r6
 8015f26:	42bb      	cmp	r3, r7
 8015f28:	bfa8      	it	ge
 8015f2a:	463b      	movge	r3, r7
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	bfc2      	ittt	gt
 8015f30:	1af6      	subgt	r6, r6, r3
 8015f32:	1aff      	subgt	r7, r7, r3
 8015f34:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	dd17      	ble.n	8015f6e <_strtod_l+0x736>
 8015f3e:	4659      	mov	r1, fp
 8015f40:	461a      	mov	r2, r3
 8015f42:	4620      	mov	r0, r4
 8015f44:	f7ff f9ae 	bl	80152a4 <__pow5mult>
 8015f48:	4683      	mov	fp, r0
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	f43f aeb8 	beq.w	8015cc0 <_strtod_l+0x488>
 8015f50:	4601      	mov	r1, r0
 8015f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f54:	4620      	mov	r0, r4
 8015f56:	f7ff f8fb 	bl	8015150 <__multiply>
 8015f5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	f43f aeaf 	beq.w	8015cc0 <_strtod_l+0x488>
 8015f62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015f64:	4620      	mov	r0, r4
 8015f66:	f7fe ffdd 	bl	8014f24 <_Bfree>
 8015f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f6c:	9316      	str	r3, [sp, #88]	; 0x58
 8015f6e:	2e00      	cmp	r6, #0
 8015f70:	f300 808c 	bgt.w	801608c <_strtod_l+0x854>
 8015f74:	9b08      	ldr	r3, [sp, #32]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	dd08      	ble.n	8015f8c <_strtod_l+0x754>
 8015f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f7c:	9905      	ldr	r1, [sp, #20]
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f7ff f990 	bl	80152a4 <__pow5mult>
 8015f84:	9005      	str	r0, [sp, #20]
 8015f86:	2800      	cmp	r0, #0
 8015f88:	f43f ae9a 	beq.w	8015cc0 <_strtod_l+0x488>
 8015f8c:	2f00      	cmp	r7, #0
 8015f8e:	dd08      	ble.n	8015fa2 <_strtod_l+0x76a>
 8015f90:	9905      	ldr	r1, [sp, #20]
 8015f92:	463a      	mov	r2, r7
 8015f94:	4620      	mov	r0, r4
 8015f96:	f7ff f9df 	bl	8015358 <__lshift>
 8015f9a:	9005      	str	r0, [sp, #20]
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	f43f ae8f 	beq.w	8015cc0 <_strtod_l+0x488>
 8015fa2:	f1ba 0f00 	cmp.w	sl, #0
 8015fa6:	dd08      	ble.n	8015fba <_strtod_l+0x782>
 8015fa8:	4659      	mov	r1, fp
 8015faa:	4652      	mov	r2, sl
 8015fac:	4620      	mov	r0, r4
 8015fae:	f7ff f9d3 	bl	8015358 <__lshift>
 8015fb2:	4683      	mov	fp, r0
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	f43f ae83 	beq.w	8015cc0 <_strtod_l+0x488>
 8015fba:	9a05      	ldr	r2, [sp, #20]
 8015fbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015fbe:	4620      	mov	r0, r4
 8015fc0:	f7ff fa52 	bl	8015468 <__mdiff>
 8015fc4:	4605      	mov	r5, r0
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	f43f ae7a 	beq.w	8015cc0 <_strtod_l+0x488>
 8015fcc:	68c3      	ldr	r3, [r0, #12]
 8015fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	60c3      	str	r3, [r0, #12]
 8015fd4:	4659      	mov	r1, fp
 8015fd6:	f7ff fa2b 	bl	8015430 <__mcmp>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	da60      	bge.n	80160a0 <_strtod_l+0x868>
 8015fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fe0:	ea53 0308 	orrs.w	r3, r3, r8
 8015fe4:	f040 8084 	bne.w	80160f0 <_strtod_l+0x8b8>
 8015fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d17f      	bne.n	80160f0 <_strtod_l+0x8b8>
 8015ff0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015ff4:	0d1b      	lsrs	r3, r3, #20
 8015ff6:	051b      	lsls	r3, r3, #20
 8015ff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015ffc:	d978      	bls.n	80160f0 <_strtod_l+0x8b8>
 8015ffe:	696b      	ldr	r3, [r5, #20]
 8016000:	b913      	cbnz	r3, 8016008 <_strtod_l+0x7d0>
 8016002:	692b      	ldr	r3, [r5, #16]
 8016004:	2b01      	cmp	r3, #1
 8016006:	dd73      	ble.n	80160f0 <_strtod_l+0x8b8>
 8016008:	4629      	mov	r1, r5
 801600a:	2201      	movs	r2, #1
 801600c:	4620      	mov	r0, r4
 801600e:	f7ff f9a3 	bl	8015358 <__lshift>
 8016012:	4659      	mov	r1, fp
 8016014:	4605      	mov	r5, r0
 8016016:	f7ff fa0b 	bl	8015430 <__mcmp>
 801601a:	2800      	cmp	r0, #0
 801601c:	dd68      	ble.n	80160f0 <_strtod_l+0x8b8>
 801601e:	9904      	ldr	r1, [sp, #16]
 8016020:	4a54      	ldr	r2, [pc, #336]	; (8016174 <_strtod_l+0x93c>)
 8016022:	464b      	mov	r3, r9
 8016024:	2900      	cmp	r1, #0
 8016026:	f000 8084 	beq.w	8016132 <_strtod_l+0x8fa>
 801602a:	ea02 0109 	and.w	r1, r2, r9
 801602e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016032:	dc7e      	bgt.n	8016132 <_strtod_l+0x8fa>
 8016034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016038:	f77f aeb3 	ble.w	8015da2 <_strtod_l+0x56a>
 801603c:	4b4e      	ldr	r3, [pc, #312]	; (8016178 <_strtod_l+0x940>)
 801603e:	4640      	mov	r0, r8
 8016040:	4649      	mov	r1, r9
 8016042:	2200      	movs	r2, #0
 8016044:	f7ea fb00 	bl	8000648 <__aeabi_dmul>
 8016048:	4b4a      	ldr	r3, [pc, #296]	; (8016174 <_strtod_l+0x93c>)
 801604a:	400b      	ands	r3, r1
 801604c:	4680      	mov	r8, r0
 801604e:	4689      	mov	r9, r1
 8016050:	2b00      	cmp	r3, #0
 8016052:	f47f ae3f 	bne.w	8015cd4 <_strtod_l+0x49c>
 8016056:	2322      	movs	r3, #34	; 0x22
 8016058:	6023      	str	r3, [r4, #0]
 801605a:	e63b      	b.n	8015cd4 <_strtod_l+0x49c>
 801605c:	f04f 32ff 	mov.w	r2, #4294967295
 8016060:	fa02 f303 	lsl.w	r3, r2, r3
 8016064:	ea03 0808 	and.w	r8, r3, r8
 8016068:	e6e8      	b.n	8015e3c <_strtod_l+0x604>
 801606a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801606e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016072:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016076:	36e2      	adds	r6, #226	; 0xe2
 8016078:	fa01 f306 	lsl.w	r3, r1, r6
 801607c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016080:	e748      	b.n	8015f14 <_strtod_l+0x6dc>
 8016082:	2100      	movs	r1, #0
 8016084:	2301      	movs	r3, #1
 8016086:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801608a:	e743      	b.n	8015f14 <_strtod_l+0x6dc>
 801608c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801608e:	4632      	mov	r2, r6
 8016090:	4620      	mov	r0, r4
 8016092:	f7ff f961 	bl	8015358 <__lshift>
 8016096:	9016      	str	r0, [sp, #88]	; 0x58
 8016098:	2800      	cmp	r0, #0
 801609a:	f47f af6b 	bne.w	8015f74 <_strtod_l+0x73c>
 801609e:	e60f      	b.n	8015cc0 <_strtod_l+0x488>
 80160a0:	46ca      	mov	sl, r9
 80160a2:	d171      	bne.n	8016188 <_strtod_l+0x950>
 80160a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80160aa:	b352      	cbz	r2, 8016102 <_strtod_l+0x8ca>
 80160ac:	4a33      	ldr	r2, [pc, #204]	; (801617c <_strtod_l+0x944>)
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d12a      	bne.n	8016108 <_strtod_l+0x8d0>
 80160b2:	9b04      	ldr	r3, [sp, #16]
 80160b4:	4641      	mov	r1, r8
 80160b6:	b1fb      	cbz	r3, 80160f8 <_strtod_l+0x8c0>
 80160b8:	4b2e      	ldr	r3, [pc, #184]	; (8016174 <_strtod_l+0x93c>)
 80160ba:	ea09 0303 	and.w	r3, r9, r3
 80160be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80160c2:	f04f 32ff 	mov.w	r2, #4294967295
 80160c6:	d81a      	bhi.n	80160fe <_strtod_l+0x8c6>
 80160c8:	0d1b      	lsrs	r3, r3, #20
 80160ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80160ce:	fa02 f303 	lsl.w	r3, r2, r3
 80160d2:	4299      	cmp	r1, r3
 80160d4:	d118      	bne.n	8016108 <_strtod_l+0x8d0>
 80160d6:	4b2a      	ldr	r3, [pc, #168]	; (8016180 <_strtod_l+0x948>)
 80160d8:	459a      	cmp	sl, r3
 80160da:	d102      	bne.n	80160e2 <_strtod_l+0x8aa>
 80160dc:	3101      	adds	r1, #1
 80160de:	f43f adef 	beq.w	8015cc0 <_strtod_l+0x488>
 80160e2:	4b24      	ldr	r3, [pc, #144]	; (8016174 <_strtod_l+0x93c>)
 80160e4:	ea0a 0303 	and.w	r3, sl, r3
 80160e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80160ec:	f04f 0800 	mov.w	r8, #0
 80160f0:	9b04      	ldr	r3, [sp, #16]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d1a2      	bne.n	801603c <_strtod_l+0x804>
 80160f6:	e5ed      	b.n	8015cd4 <_strtod_l+0x49c>
 80160f8:	f04f 33ff 	mov.w	r3, #4294967295
 80160fc:	e7e9      	b.n	80160d2 <_strtod_l+0x89a>
 80160fe:	4613      	mov	r3, r2
 8016100:	e7e7      	b.n	80160d2 <_strtod_l+0x89a>
 8016102:	ea53 0308 	orrs.w	r3, r3, r8
 8016106:	d08a      	beq.n	801601e <_strtod_l+0x7e6>
 8016108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801610a:	b1e3      	cbz	r3, 8016146 <_strtod_l+0x90e>
 801610c:	ea13 0f0a 	tst.w	r3, sl
 8016110:	d0ee      	beq.n	80160f0 <_strtod_l+0x8b8>
 8016112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016114:	9a04      	ldr	r2, [sp, #16]
 8016116:	4640      	mov	r0, r8
 8016118:	4649      	mov	r1, r9
 801611a:	b1c3      	cbz	r3, 801614e <_strtod_l+0x916>
 801611c:	f7ff fb6f 	bl	80157fe <sulp>
 8016120:	4602      	mov	r2, r0
 8016122:	460b      	mov	r3, r1
 8016124:	ec51 0b18 	vmov	r0, r1, d8
 8016128:	f7ea f8d8 	bl	80002dc <__adddf3>
 801612c:	4680      	mov	r8, r0
 801612e:	4689      	mov	r9, r1
 8016130:	e7de      	b.n	80160f0 <_strtod_l+0x8b8>
 8016132:	4013      	ands	r3, r2
 8016134:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016138:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801613c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016140:	f04f 38ff 	mov.w	r8, #4294967295
 8016144:	e7d4      	b.n	80160f0 <_strtod_l+0x8b8>
 8016146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016148:	ea13 0f08 	tst.w	r3, r8
 801614c:	e7e0      	b.n	8016110 <_strtod_l+0x8d8>
 801614e:	f7ff fb56 	bl	80157fe <sulp>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	ec51 0b18 	vmov	r0, r1, d8
 801615a:	f7ea f8bd 	bl	80002d8 <__aeabi_dsub>
 801615e:	2200      	movs	r2, #0
 8016160:	2300      	movs	r3, #0
 8016162:	4680      	mov	r8, r0
 8016164:	4689      	mov	r9, r1
 8016166:	f7ea fcd7 	bl	8000b18 <__aeabi_dcmpeq>
 801616a:	2800      	cmp	r0, #0
 801616c:	d0c0      	beq.n	80160f0 <_strtod_l+0x8b8>
 801616e:	e618      	b.n	8015da2 <_strtod_l+0x56a>
 8016170:	fffffc02 	.word	0xfffffc02
 8016174:	7ff00000 	.word	0x7ff00000
 8016178:	39500000 	.word	0x39500000
 801617c:	000fffff 	.word	0x000fffff
 8016180:	7fefffff 	.word	0x7fefffff
 8016184:	080189d8 	.word	0x080189d8
 8016188:	4659      	mov	r1, fp
 801618a:	4628      	mov	r0, r5
 801618c:	f7ff fac0 	bl	8015710 <__ratio>
 8016190:	ec57 6b10 	vmov	r6, r7, d0
 8016194:	ee10 0a10 	vmov	r0, s0
 8016198:	2200      	movs	r2, #0
 801619a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801619e:	4639      	mov	r1, r7
 80161a0:	f7ea fcce 	bl	8000b40 <__aeabi_dcmple>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d071      	beq.n	801628c <_strtod_l+0xa54>
 80161a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d17c      	bne.n	80162a8 <_strtod_l+0xa70>
 80161ae:	f1b8 0f00 	cmp.w	r8, #0
 80161b2:	d15a      	bne.n	801626a <_strtod_l+0xa32>
 80161b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d15d      	bne.n	8016278 <_strtod_l+0xa40>
 80161bc:	4b90      	ldr	r3, [pc, #576]	; (8016400 <_strtod_l+0xbc8>)
 80161be:	2200      	movs	r2, #0
 80161c0:	4630      	mov	r0, r6
 80161c2:	4639      	mov	r1, r7
 80161c4:	f7ea fcb2 	bl	8000b2c <__aeabi_dcmplt>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d15c      	bne.n	8016286 <_strtod_l+0xa4e>
 80161cc:	4630      	mov	r0, r6
 80161ce:	4639      	mov	r1, r7
 80161d0:	4b8c      	ldr	r3, [pc, #560]	; (8016404 <_strtod_l+0xbcc>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	f7ea fa38 	bl	8000648 <__aeabi_dmul>
 80161d8:	4606      	mov	r6, r0
 80161da:	460f      	mov	r7, r1
 80161dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80161e0:	9606      	str	r6, [sp, #24]
 80161e2:	9307      	str	r3, [sp, #28]
 80161e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80161e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80161ec:	4b86      	ldr	r3, [pc, #536]	; (8016408 <_strtod_l+0xbd0>)
 80161ee:	ea0a 0303 	and.w	r3, sl, r3
 80161f2:	930d      	str	r3, [sp, #52]	; 0x34
 80161f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80161f6:	4b85      	ldr	r3, [pc, #532]	; (801640c <_strtod_l+0xbd4>)
 80161f8:	429a      	cmp	r2, r3
 80161fa:	f040 8090 	bne.w	801631e <_strtod_l+0xae6>
 80161fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016202:	ec49 8b10 	vmov	d0, r8, r9
 8016206:	f7ff f9b9 	bl	801557c <__ulp>
 801620a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801620e:	ec51 0b10 	vmov	r0, r1, d0
 8016212:	f7ea fa19 	bl	8000648 <__aeabi_dmul>
 8016216:	4642      	mov	r2, r8
 8016218:	464b      	mov	r3, r9
 801621a:	f7ea f85f 	bl	80002dc <__adddf3>
 801621e:	460b      	mov	r3, r1
 8016220:	4979      	ldr	r1, [pc, #484]	; (8016408 <_strtod_l+0xbd0>)
 8016222:	4a7b      	ldr	r2, [pc, #492]	; (8016410 <_strtod_l+0xbd8>)
 8016224:	4019      	ands	r1, r3
 8016226:	4291      	cmp	r1, r2
 8016228:	4680      	mov	r8, r0
 801622a:	d944      	bls.n	80162b6 <_strtod_l+0xa7e>
 801622c:	ee18 2a90 	vmov	r2, s17
 8016230:	4b78      	ldr	r3, [pc, #480]	; (8016414 <_strtod_l+0xbdc>)
 8016232:	429a      	cmp	r2, r3
 8016234:	d104      	bne.n	8016240 <_strtod_l+0xa08>
 8016236:	ee18 3a10 	vmov	r3, s16
 801623a:	3301      	adds	r3, #1
 801623c:	f43f ad40 	beq.w	8015cc0 <_strtod_l+0x488>
 8016240:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016414 <_strtod_l+0xbdc>
 8016244:	f04f 38ff 	mov.w	r8, #4294967295
 8016248:	9916      	ldr	r1, [sp, #88]	; 0x58
 801624a:	4620      	mov	r0, r4
 801624c:	f7fe fe6a 	bl	8014f24 <_Bfree>
 8016250:	9905      	ldr	r1, [sp, #20]
 8016252:	4620      	mov	r0, r4
 8016254:	f7fe fe66 	bl	8014f24 <_Bfree>
 8016258:	4659      	mov	r1, fp
 801625a:	4620      	mov	r0, r4
 801625c:	f7fe fe62 	bl	8014f24 <_Bfree>
 8016260:	4629      	mov	r1, r5
 8016262:	4620      	mov	r0, r4
 8016264:	f7fe fe5e 	bl	8014f24 <_Bfree>
 8016268:	e609      	b.n	8015e7e <_strtod_l+0x646>
 801626a:	f1b8 0f01 	cmp.w	r8, #1
 801626e:	d103      	bne.n	8016278 <_strtod_l+0xa40>
 8016270:	f1b9 0f00 	cmp.w	r9, #0
 8016274:	f43f ad95 	beq.w	8015da2 <_strtod_l+0x56a>
 8016278:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80163d0 <_strtod_l+0xb98>
 801627c:	4f60      	ldr	r7, [pc, #384]	; (8016400 <_strtod_l+0xbc8>)
 801627e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016282:	2600      	movs	r6, #0
 8016284:	e7ae      	b.n	80161e4 <_strtod_l+0x9ac>
 8016286:	4f5f      	ldr	r7, [pc, #380]	; (8016404 <_strtod_l+0xbcc>)
 8016288:	2600      	movs	r6, #0
 801628a:	e7a7      	b.n	80161dc <_strtod_l+0x9a4>
 801628c:	4b5d      	ldr	r3, [pc, #372]	; (8016404 <_strtod_l+0xbcc>)
 801628e:	4630      	mov	r0, r6
 8016290:	4639      	mov	r1, r7
 8016292:	2200      	movs	r2, #0
 8016294:	f7ea f9d8 	bl	8000648 <__aeabi_dmul>
 8016298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801629a:	4606      	mov	r6, r0
 801629c:	460f      	mov	r7, r1
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d09c      	beq.n	80161dc <_strtod_l+0x9a4>
 80162a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80162a6:	e79d      	b.n	80161e4 <_strtod_l+0x9ac>
 80162a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80163d8 <_strtod_l+0xba0>
 80162ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80162b0:	ec57 6b17 	vmov	r6, r7, d7
 80162b4:	e796      	b.n	80161e4 <_strtod_l+0x9ac>
 80162b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80162ba:	9b04      	ldr	r3, [sp, #16]
 80162bc:	46ca      	mov	sl, r9
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d1c2      	bne.n	8016248 <_strtod_l+0xa10>
 80162c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162c8:	0d1b      	lsrs	r3, r3, #20
 80162ca:	051b      	lsls	r3, r3, #20
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d1bb      	bne.n	8016248 <_strtod_l+0xa10>
 80162d0:	4630      	mov	r0, r6
 80162d2:	4639      	mov	r1, r7
 80162d4:	f7ea fd18 	bl	8000d08 <__aeabi_d2lz>
 80162d8:	f7ea f988 	bl	80005ec <__aeabi_l2d>
 80162dc:	4602      	mov	r2, r0
 80162de:	460b      	mov	r3, r1
 80162e0:	4630      	mov	r0, r6
 80162e2:	4639      	mov	r1, r7
 80162e4:	f7e9 fff8 	bl	80002d8 <__aeabi_dsub>
 80162e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162ee:	ea43 0308 	orr.w	r3, r3, r8
 80162f2:	4313      	orrs	r3, r2
 80162f4:	4606      	mov	r6, r0
 80162f6:	460f      	mov	r7, r1
 80162f8:	d054      	beq.n	80163a4 <_strtod_l+0xb6c>
 80162fa:	a339      	add	r3, pc, #228	; (adr r3, 80163e0 <_strtod_l+0xba8>)
 80162fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016300:	f7ea fc14 	bl	8000b2c <__aeabi_dcmplt>
 8016304:	2800      	cmp	r0, #0
 8016306:	f47f ace5 	bne.w	8015cd4 <_strtod_l+0x49c>
 801630a:	a337      	add	r3, pc, #220	; (adr r3, 80163e8 <_strtod_l+0xbb0>)
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	4630      	mov	r0, r6
 8016312:	4639      	mov	r1, r7
 8016314:	f7ea fc28 	bl	8000b68 <__aeabi_dcmpgt>
 8016318:	2800      	cmp	r0, #0
 801631a:	d095      	beq.n	8016248 <_strtod_l+0xa10>
 801631c:	e4da      	b.n	8015cd4 <_strtod_l+0x49c>
 801631e:	9b04      	ldr	r3, [sp, #16]
 8016320:	b333      	cbz	r3, 8016370 <_strtod_l+0xb38>
 8016322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016324:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016328:	d822      	bhi.n	8016370 <_strtod_l+0xb38>
 801632a:	a331      	add	r3, pc, #196	; (adr r3, 80163f0 <_strtod_l+0xbb8>)
 801632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016330:	4630      	mov	r0, r6
 8016332:	4639      	mov	r1, r7
 8016334:	f7ea fc04 	bl	8000b40 <__aeabi_dcmple>
 8016338:	b1a0      	cbz	r0, 8016364 <_strtod_l+0xb2c>
 801633a:	4639      	mov	r1, r7
 801633c:	4630      	mov	r0, r6
 801633e:	f7ea fc5b 	bl	8000bf8 <__aeabi_d2uiz>
 8016342:	2801      	cmp	r0, #1
 8016344:	bf38      	it	cc
 8016346:	2001      	movcc	r0, #1
 8016348:	f7ea f904 	bl	8000554 <__aeabi_ui2d>
 801634c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801634e:	4606      	mov	r6, r0
 8016350:	460f      	mov	r7, r1
 8016352:	bb23      	cbnz	r3, 801639e <_strtod_l+0xb66>
 8016354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016358:	9010      	str	r0, [sp, #64]	; 0x40
 801635a:	9311      	str	r3, [sp, #68]	; 0x44
 801635c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016360:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016368:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801636c:	1a9b      	subs	r3, r3, r2
 801636e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016374:	eeb0 0a48 	vmov.f32	s0, s16
 8016378:	eef0 0a68 	vmov.f32	s1, s17
 801637c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016380:	f7ff f8fc 	bl	801557c <__ulp>
 8016384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016388:	ec53 2b10 	vmov	r2, r3, d0
 801638c:	f7ea f95c 	bl	8000648 <__aeabi_dmul>
 8016390:	ec53 2b18 	vmov	r2, r3, d8
 8016394:	f7e9 ffa2 	bl	80002dc <__adddf3>
 8016398:	4680      	mov	r8, r0
 801639a:	4689      	mov	r9, r1
 801639c:	e78d      	b.n	80162ba <_strtod_l+0xa82>
 801639e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80163a2:	e7db      	b.n	801635c <_strtod_l+0xb24>
 80163a4:	a314      	add	r3, pc, #80	; (adr r3, 80163f8 <_strtod_l+0xbc0>)
 80163a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163aa:	f7ea fbbf 	bl	8000b2c <__aeabi_dcmplt>
 80163ae:	e7b3      	b.n	8016318 <_strtod_l+0xae0>
 80163b0:	2300      	movs	r3, #0
 80163b2:	930a      	str	r3, [sp, #40]	; 0x28
 80163b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80163b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163b8:	6013      	str	r3, [r2, #0]
 80163ba:	f7ff ba7c 	b.w	80158b6 <_strtod_l+0x7e>
 80163be:	2a65      	cmp	r2, #101	; 0x65
 80163c0:	f43f ab75 	beq.w	8015aae <_strtod_l+0x276>
 80163c4:	2a45      	cmp	r2, #69	; 0x45
 80163c6:	f43f ab72 	beq.w	8015aae <_strtod_l+0x276>
 80163ca:	2301      	movs	r3, #1
 80163cc:	f7ff bbaa 	b.w	8015b24 <_strtod_l+0x2ec>
 80163d0:	00000000 	.word	0x00000000
 80163d4:	bff00000 	.word	0xbff00000
 80163d8:	00000000 	.word	0x00000000
 80163dc:	3ff00000 	.word	0x3ff00000
 80163e0:	94a03595 	.word	0x94a03595
 80163e4:	3fdfffff 	.word	0x3fdfffff
 80163e8:	35afe535 	.word	0x35afe535
 80163ec:	3fe00000 	.word	0x3fe00000
 80163f0:	ffc00000 	.word	0xffc00000
 80163f4:	41dfffff 	.word	0x41dfffff
 80163f8:	94a03595 	.word	0x94a03595
 80163fc:	3fcfffff 	.word	0x3fcfffff
 8016400:	3ff00000 	.word	0x3ff00000
 8016404:	3fe00000 	.word	0x3fe00000
 8016408:	7ff00000 	.word	0x7ff00000
 801640c:	7fe00000 	.word	0x7fe00000
 8016410:	7c9fffff 	.word	0x7c9fffff
 8016414:	7fefffff 	.word	0x7fefffff

08016418 <_strtod_r>:
 8016418:	4b01      	ldr	r3, [pc, #4]	; (8016420 <_strtod_r+0x8>)
 801641a:	f7ff ba0d 	b.w	8015838 <_strtod_l>
 801641e:	bf00      	nop
 8016420:	200000d4 	.word	0x200000d4

08016424 <_strtol_l.constprop.0>:
 8016424:	2b01      	cmp	r3, #1
 8016426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801642a:	d001      	beq.n	8016430 <_strtol_l.constprop.0+0xc>
 801642c:	2b24      	cmp	r3, #36	; 0x24
 801642e:	d906      	bls.n	801643e <_strtol_l.constprop.0+0x1a>
 8016430:	f7fd fe30 	bl	8014094 <__errno>
 8016434:	2316      	movs	r3, #22
 8016436:	6003      	str	r3, [r0, #0]
 8016438:	2000      	movs	r0, #0
 801643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801643e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016524 <_strtol_l.constprop.0+0x100>
 8016442:	460d      	mov	r5, r1
 8016444:	462e      	mov	r6, r5
 8016446:	f815 4b01 	ldrb.w	r4, [r5], #1
 801644a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801644e:	f017 0708 	ands.w	r7, r7, #8
 8016452:	d1f7      	bne.n	8016444 <_strtol_l.constprop.0+0x20>
 8016454:	2c2d      	cmp	r4, #45	; 0x2d
 8016456:	d132      	bne.n	80164be <_strtol_l.constprop.0+0x9a>
 8016458:	782c      	ldrb	r4, [r5, #0]
 801645a:	2701      	movs	r7, #1
 801645c:	1cb5      	adds	r5, r6, #2
 801645e:	2b00      	cmp	r3, #0
 8016460:	d05b      	beq.n	801651a <_strtol_l.constprop.0+0xf6>
 8016462:	2b10      	cmp	r3, #16
 8016464:	d109      	bne.n	801647a <_strtol_l.constprop.0+0x56>
 8016466:	2c30      	cmp	r4, #48	; 0x30
 8016468:	d107      	bne.n	801647a <_strtol_l.constprop.0+0x56>
 801646a:	782c      	ldrb	r4, [r5, #0]
 801646c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016470:	2c58      	cmp	r4, #88	; 0x58
 8016472:	d14d      	bne.n	8016510 <_strtol_l.constprop.0+0xec>
 8016474:	786c      	ldrb	r4, [r5, #1]
 8016476:	2310      	movs	r3, #16
 8016478:	3502      	adds	r5, #2
 801647a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801647e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016482:	f04f 0e00 	mov.w	lr, #0
 8016486:	fbb8 f9f3 	udiv	r9, r8, r3
 801648a:	4676      	mov	r6, lr
 801648c:	fb03 8a19 	mls	sl, r3, r9, r8
 8016490:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016494:	f1bc 0f09 	cmp.w	ip, #9
 8016498:	d816      	bhi.n	80164c8 <_strtol_l.constprop.0+0xa4>
 801649a:	4664      	mov	r4, ip
 801649c:	42a3      	cmp	r3, r4
 801649e:	dd24      	ble.n	80164ea <_strtol_l.constprop.0+0xc6>
 80164a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80164a4:	d008      	beq.n	80164b8 <_strtol_l.constprop.0+0x94>
 80164a6:	45b1      	cmp	r9, r6
 80164a8:	d31c      	bcc.n	80164e4 <_strtol_l.constprop.0+0xc0>
 80164aa:	d101      	bne.n	80164b0 <_strtol_l.constprop.0+0x8c>
 80164ac:	45a2      	cmp	sl, r4
 80164ae:	db19      	blt.n	80164e4 <_strtol_l.constprop.0+0xc0>
 80164b0:	fb06 4603 	mla	r6, r6, r3, r4
 80164b4:	f04f 0e01 	mov.w	lr, #1
 80164b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164bc:	e7e8      	b.n	8016490 <_strtol_l.constprop.0+0x6c>
 80164be:	2c2b      	cmp	r4, #43	; 0x2b
 80164c0:	bf04      	itt	eq
 80164c2:	782c      	ldrbeq	r4, [r5, #0]
 80164c4:	1cb5      	addeq	r5, r6, #2
 80164c6:	e7ca      	b.n	801645e <_strtol_l.constprop.0+0x3a>
 80164c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80164cc:	f1bc 0f19 	cmp.w	ip, #25
 80164d0:	d801      	bhi.n	80164d6 <_strtol_l.constprop.0+0xb2>
 80164d2:	3c37      	subs	r4, #55	; 0x37
 80164d4:	e7e2      	b.n	801649c <_strtol_l.constprop.0+0x78>
 80164d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80164da:	f1bc 0f19 	cmp.w	ip, #25
 80164de:	d804      	bhi.n	80164ea <_strtol_l.constprop.0+0xc6>
 80164e0:	3c57      	subs	r4, #87	; 0x57
 80164e2:	e7db      	b.n	801649c <_strtol_l.constprop.0+0x78>
 80164e4:	f04f 3eff 	mov.w	lr, #4294967295
 80164e8:	e7e6      	b.n	80164b8 <_strtol_l.constprop.0+0x94>
 80164ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80164ee:	d105      	bne.n	80164fc <_strtol_l.constprop.0+0xd8>
 80164f0:	2322      	movs	r3, #34	; 0x22
 80164f2:	6003      	str	r3, [r0, #0]
 80164f4:	4646      	mov	r6, r8
 80164f6:	b942      	cbnz	r2, 801650a <_strtol_l.constprop.0+0xe6>
 80164f8:	4630      	mov	r0, r6
 80164fa:	e79e      	b.n	801643a <_strtol_l.constprop.0+0x16>
 80164fc:	b107      	cbz	r7, 8016500 <_strtol_l.constprop.0+0xdc>
 80164fe:	4276      	negs	r6, r6
 8016500:	2a00      	cmp	r2, #0
 8016502:	d0f9      	beq.n	80164f8 <_strtol_l.constprop.0+0xd4>
 8016504:	f1be 0f00 	cmp.w	lr, #0
 8016508:	d000      	beq.n	801650c <_strtol_l.constprop.0+0xe8>
 801650a:	1e69      	subs	r1, r5, #1
 801650c:	6011      	str	r1, [r2, #0]
 801650e:	e7f3      	b.n	80164f8 <_strtol_l.constprop.0+0xd4>
 8016510:	2430      	movs	r4, #48	; 0x30
 8016512:	2b00      	cmp	r3, #0
 8016514:	d1b1      	bne.n	801647a <_strtol_l.constprop.0+0x56>
 8016516:	2308      	movs	r3, #8
 8016518:	e7af      	b.n	801647a <_strtol_l.constprop.0+0x56>
 801651a:	2c30      	cmp	r4, #48	; 0x30
 801651c:	d0a5      	beq.n	801646a <_strtol_l.constprop.0+0x46>
 801651e:	230a      	movs	r3, #10
 8016520:	e7ab      	b.n	801647a <_strtol_l.constprop.0+0x56>
 8016522:	bf00      	nop
 8016524:	08018a01 	.word	0x08018a01

08016528 <_strtol_r>:
 8016528:	f7ff bf7c 	b.w	8016424 <_strtol_l.constprop.0>

0801652c <__ssputs_r>:
 801652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016530:	688e      	ldr	r6, [r1, #8]
 8016532:	461f      	mov	r7, r3
 8016534:	42be      	cmp	r6, r7
 8016536:	680b      	ldr	r3, [r1, #0]
 8016538:	4682      	mov	sl, r0
 801653a:	460c      	mov	r4, r1
 801653c:	4690      	mov	r8, r2
 801653e:	d82c      	bhi.n	801659a <__ssputs_r+0x6e>
 8016540:	898a      	ldrh	r2, [r1, #12]
 8016542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016546:	d026      	beq.n	8016596 <__ssputs_r+0x6a>
 8016548:	6965      	ldr	r5, [r4, #20]
 801654a:	6909      	ldr	r1, [r1, #16]
 801654c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016550:	eba3 0901 	sub.w	r9, r3, r1
 8016554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016558:	1c7b      	adds	r3, r7, #1
 801655a:	444b      	add	r3, r9
 801655c:	106d      	asrs	r5, r5, #1
 801655e:	429d      	cmp	r5, r3
 8016560:	bf38      	it	cc
 8016562:	461d      	movcc	r5, r3
 8016564:	0553      	lsls	r3, r2, #21
 8016566:	d527      	bpl.n	80165b8 <__ssputs_r+0x8c>
 8016568:	4629      	mov	r1, r5
 801656a:	f7fc fc77 	bl	8012e5c <_malloc_r>
 801656e:	4606      	mov	r6, r0
 8016570:	b360      	cbz	r0, 80165cc <__ssputs_r+0xa0>
 8016572:	6921      	ldr	r1, [r4, #16]
 8016574:	464a      	mov	r2, r9
 8016576:	f7fd fdba 	bl	80140ee <memcpy>
 801657a:	89a3      	ldrh	r3, [r4, #12]
 801657c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016584:	81a3      	strh	r3, [r4, #12]
 8016586:	6126      	str	r6, [r4, #16]
 8016588:	6165      	str	r5, [r4, #20]
 801658a:	444e      	add	r6, r9
 801658c:	eba5 0509 	sub.w	r5, r5, r9
 8016590:	6026      	str	r6, [r4, #0]
 8016592:	60a5      	str	r5, [r4, #8]
 8016594:	463e      	mov	r6, r7
 8016596:	42be      	cmp	r6, r7
 8016598:	d900      	bls.n	801659c <__ssputs_r+0x70>
 801659a:	463e      	mov	r6, r7
 801659c:	6820      	ldr	r0, [r4, #0]
 801659e:	4632      	mov	r2, r6
 80165a0:	4641      	mov	r1, r8
 80165a2:	f7fd fca4 	bl	8013eee <memmove>
 80165a6:	68a3      	ldr	r3, [r4, #8]
 80165a8:	1b9b      	subs	r3, r3, r6
 80165aa:	60a3      	str	r3, [r4, #8]
 80165ac:	6823      	ldr	r3, [r4, #0]
 80165ae:	4433      	add	r3, r6
 80165b0:	6023      	str	r3, [r4, #0]
 80165b2:	2000      	movs	r0, #0
 80165b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165b8:	462a      	mov	r2, r5
 80165ba:	f000 ff30 	bl	801741e <_realloc_r>
 80165be:	4606      	mov	r6, r0
 80165c0:	2800      	cmp	r0, #0
 80165c2:	d1e0      	bne.n	8016586 <__ssputs_r+0x5a>
 80165c4:	6921      	ldr	r1, [r4, #16]
 80165c6:	4650      	mov	r0, sl
 80165c8:	f7fe fc20 	bl	8014e0c <_free_r>
 80165cc:	230c      	movs	r3, #12
 80165ce:	f8ca 3000 	str.w	r3, [sl]
 80165d2:	89a3      	ldrh	r3, [r4, #12]
 80165d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165d8:	81a3      	strh	r3, [r4, #12]
 80165da:	f04f 30ff 	mov.w	r0, #4294967295
 80165de:	e7e9      	b.n	80165b4 <__ssputs_r+0x88>

080165e0 <_svfiprintf_r>:
 80165e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e4:	4698      	mov	r8, r3
 80165e6:	898b      	ldrh	r3, [r1, #12]
 80165e8:	061b      	lsls	r3, r3, #24
 80165ea:	b09d      	sub	sp, #116	; 0x74
 80165ec:	4607      	mov	r7, r0
 80165ee:	460d      	mov	r5, r1
 80165f0:	4614      	mov	r4, r2
 80165f2:	d50e      	bpl.n	8016612 <_svfiprintf_r+0x32>
 80165f4:	690b      	ldr	r3, [r1, #16]
 80165f6:	b963      	cbnz	r3, 8016612 <_svfiprintf_r+0x32>
 80165f8:	2140      	movs	r1, #64	; 0x40
 80165fa:	f7fc fc2f 	bl	8012e5c <_malloc_r>
 80165fe:	6028      	str	r0, [r5, #0]
 8016600:	6128      	str	r0, [r5, #16]
 8016602:	b920      	cbnz	r0, 801660e <_svfiprintf_r+0x2e>
 8016604:	230c      	movs	r3, #12
 8016606:	603b      	str	r3, [r7, #0]
 8016608:	f04f 30ff 	mov.w	r0, #4294967295
 801660c:	e0d0      	b.n	80167b0 <_svfiprintf_r+0x1d0>
 801660e:	2340      	movs	r3, #64	; 0x40
 8016610:	616b      	str	r3, [r5, #20]
 8016612:	2300      	movs	r3, #0
 8016614:	9309      	str	r3, [sp, #36]	; 0x24
 8016616:	2320      	movs	r3, #32
 8016618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801661c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016620:	2330      	movs	r3, #48	; 0x30
 8016622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80167c8 <_svfiprintf_r+0x1e8>
 8016626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801662a:	f04f 0901 	mov.w	r9, #1
 801662e:	4623      	mov	r3, r4
 8016630:	469a      	mov	sl, r3
 8016632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016636:	b10a      	cbz	r2, 801663c <_svfiprintf_r+0x5c>
 8016638:	2a25      	cmp	r2, #37	; 0x25
 801663a:	d1f9      	bne.n	8016630 <_svfiprintf_r+0x50>
 801663c:	ebba 0b04 	subs.w	fp, sl, r4
 8016640:	d00b      	beq.n	801665a <_svfiprintf_r+0x7a>
 8016642:	465b      	mov	r3, fp
 8016644:	4622      	mov	r2, r4
 8016646:	4629      	mov	r1, r5
 8016648:	4638      	mov	r0, r7
 801664a:	f7ff ff6f 	bl	801652c <__ssputs_r>
 801664e:	3001      	adds	r0, #1
 8016650:	f000 80a9 	beq.w	80167a6 <_svfiprintf_r+0x1c6>
 8016654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016656:	445a      	add	r2, fp
 8016658:	9209      	str	r2, [sp, #36]	; 0x24
 801665a:	f89a 3000 	ldrb.w	r3, [sl]
 801665e:	2b00      	cmp	r3, #0
 8016660:	f000 80a1 	beq.w	80167a6 <_svfiprintf_r+0x1c6>
 8016664:	2300      	movs	r3, #0
 8016666:	f04f 32ff 	mov.w	r2, #4294967295
 801666a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801666e:	f10a 0a01 	add.w	sl, sl, #1
 8016672:	9304      	str	r3, [sp, #16]
 8016674:	9307      	str	r3, [sp, #28]
 8016676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801667a:	931a      	str	r3, [sp, #104]	; 0x68
 801667c:	4654      	mov	r4, sl
 801667e:	2205      	movs	r2, #5
 8016680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016684:	4850      	ldr	r0, [pc, #320]	; (80167c8 <_svfiprintf_r+0x1e8>)
 8016686:	f7e9 fdcb 	bl	8000220 <memchr>
 801668a:	9a04      	ldr	r2, [sp, #16]
 801668c:	b9d8      	cbnz	r0, 80166c6 <_svfiprintf_r+0xe6>
 801668e:	06d0      	lsls	r0, r2, #27
 8016690:	bf44      	itt	mi
 8016692:	2320      	movmi	r3, #32
 8016694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016698:	0711      	lsls	r1, r2, #28
 801669a:	bf44      	itt	mi
 801669c:	232b      	movmi	r3, #43	; 0x2b
 801669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166a2:	f89a 3000 	ldrb.w	r3, [sl]
 80166a6:	2b2a      	cmp	r3, #42	; 0x2a
 80166a8:	d015      	beq.n	80166d6 <_svfiprintf_r+0xf6>
 80166aa:	9a07      	ldr	r2, [sp, #28]
 80166ac:	4654      	mov	r4, sl
 80166ae:	2000      	movs	r0, #0
 80166b0:	f04f 0c0a 	mov.w	ip, #10
 80166b4:	4621      	mov	r1, r4
 80166b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166ba:	3b30      	subs	r3, #48	; 0x30
 80166bc:	2b09      	cmp	r3, #9
 80166be:	d94d      	bls.n	801675c <_svfiprintf_r+0x17c>
 80166c0:	b1b0      	cbz	r0, 80166f0 <_svfiprintf_r+0x110>
 80166c2:	9207      	str	r2, [sp, #28]
 80166c4:	e014      	b.n	80166f0 <_svfiprintf_r+0x110>
 80166c6:	eba0 0308 	sub.w	r3, r0, r8
 80166ca:	fa09 f303 	lsl.w	r3, r9, r3
 80166ce:	4313      	orrs	r3, r2
 80166d0:	9304      	str	r3, [sp, #16]
 80166d2:	46a2      	mov	sl, r4
 80166d4:	e7d2      	b.n	801667c <_svfiprintf_r+0x9c>
 80166d6:	9b03      	ldr	r3, [sp, #12]
 80166d8:	1d19      	adds	r1, r3, #4
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	9103      	str	r1, [sp, #12]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	bfbb      	ittet	lt
 80166e2:	425b      	neglt	r3, r3
 80166e4:	f042 0202 	orrlt.w	r2, r2, #2
 80166e8:	9307      	strge	r3, [sp, #28]
 80166ea:	9307      	strlt	r3, [sp, #28]
 80166ec:	bfb8      	it	lt
 80166ee:	9204      	strlt	r2, [sp, #16]
 80166f0:	7823      	ldrb	r3, [r4, #0]
 80166f2:	2b2e      	cmp	r3, #46	; 0x2e
 80166f4:	d10c      	bne.n	8016710 <_svfiprintf_r+0x130>
 80166f6:	7863      	ldrb	r3, [r4, #1]
 80166f8:	2b2a      	cmp	r3, #42	; 0x2a
 80166fa:	d134      	bne.n	8016766 <_svfiprintf_r+0x186>
 80166fc:	9b03      	ldr	r3, [sp, #12]
 80166fe:	1d1a      	adds	r2, r3, #4
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	9203      	str	r2, [sp, #12]
 8016704:	2b00      	cmp	r3, #0
 8016706:	bfb8      	it	lt
 8016708:	f04f 33ff 	movlt.w	r3, #4294967295
 801670c:	3402      	adds	r4, #2
 801670e:	9305      	str	r3, [sp, #20]
 8016710:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80167d8 <_svfiprintf_r+0x1f8>
 8016714:	7821      	ldrb	r1, [r4, #0]
 8016716:	2203      	movs	r2, #3
 8016718:	4650      	mov	r0, sl
 801671a:	f7e9 fd81 	bl	8000220 <memchr>
 801671e:	b138      	cbz	r0, 8016730 <_svfiprintf_r+0x150>
 8016720:	9b04      	ldr	r3, [sp, #16]
 8016722:	eba0 000a 	sub.w	r0, r0, sl
 8016726:	2240      	movs	r2, #64	; 0x40
 8016728:	4082      	lsls	r2, r0
 801672a:	4313      	orrs	r3, r2
 801672c:	3401      	adds	r4, #1
 801672e:	9304      	str	r3, [sp, #16]
 8016730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016734:	4825      	ldr	r0, [pc, #148]	; (80167cc <_svfiprintf_r+0x1ec>)
 8016736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801673a:	2206      	movs	r2, #6
 801673c:	f7e9 fd70 	bl	8000220 <memchr>
 8016740:	2800      	cmp	r0, #0
 8016742:	d038      	beq.n	80167b6 <_svfiprintf_r+0x1d6>
 8016744:	4b22      	ldr	r3, [pc, #136]	; (80167d0 <_svfiprintf_r+0x1f0>)
 8016746:	bb1b      	cbnz	r3, 8016790 <_svfiprintf_r+0x1b0>
 8016748:	9b03      	ldr	r3, [sp, #12]
 801674a:	3307      	adds	r3, #7
 801674c:	f023 0307 	bic.w	r3, r3, #7
 8016750:	3308      	adds	r3, #8
 8016752:	9303      	str	r3, [sp, #12]
 8016754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016756:	4433      	add	r3, r6
 8016758:	9309      	str	r3, [sp, #36]	; 0x24
 801675a:	e768      	b.n	801662e <_svfiprintf_r+0x4e>
 801675c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016760:	460c      	mov	r4, r1
 8016762:	2001      	movs	r0, #1
 8016764:	e7a6      	b.n	80166b4 <_svfiprintf_r+0xd4>
 8016766:	2300      	movs	r3, #0
 8016768:	3401      	adds	r4, #1
 801676a:	9305      	str	r3, [sp, #20]
 801676c:	4619      	mov	r1, r3
 801676e:	f04f 0c0a 	mov.w	ip, #10
 8016772:	4620      	mov	r0, r4
 8016774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016778:	3a30      	subs	r2, #48	; 0x30
 801677a:	2a09      	cmp	r2, #9
 801677c:	d903      	bls.n	8016786 <_svfiprintf_r+0x1a6>
 801677e:	2b00      	cmp	r3, #0
 8016780:	d0c6      	beq.n	8016710 <_svfiprintf_r+0x130>
 8016782:	9105      	str	r1, [sp, #20]
 8016784:	e7c4      	b.n	8016710 <_svfiprintf_r+0x130>
 8016786:	fb0c 2101 	mla	r1, ip, r1, r2
 801678a:	4604      	mov	r4, r0
 801678c:	2301      	movs	r3, #1
 801678e:	e7f0      	b.n	8016772 <_svfiprintf_r+0x192>
 8016790:	ab03      	add	r3, sp, #12
 8016792:	9300      	str	r3, [sp, #0]
 8016794:	462a      	mov	r2, r5
 8016796:	4b0f      	ldr	r3, [pc, #60]	; (80167d4 <_svfiprintf_r+0x1f4>)
 8016798:	a904      	add	r1, sp, #16
 801679a:	4638      	mov	r0, r7
 801679c:	f7fc fc8a 	bl	80130b4 <_printf_float>
 80167a0:	1c42      	adds	r2, r0, #1
 80167a2:	4606      	mov	r6, r0
 80167a4:	d1d6      	bne.n	8016754 <_svfiprintf_r+0x174>
 80167a6:	89ab      	ldrh	r3, [r5, #12]
 80167a8:	065b      	lsls	r3, r3, #25
 80167aa:	f53f af2d 	bmi.w	8016608 <_svfiprintf_r+0x28>
 80167ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167b0:	b01d      	add	sp, #116	; 0x74
 80167b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b6:	ab03      	add	r3, sp, #12
 80167b8:	9300      	str	r3, [sp, #0]
 80167ba:	462a      	mov	r2, r5
 80167bc:	4b05      	ldr	r3, [pc, #20]	; (80167d4 <_svfiprintf_r+0x1f4>)
 80167be:	a904      	add	r1, sp, #16
 80167c0:	4638      	mov	r0, r7
 80167c2:	f7fc ff1b 	bl	80135fc <_printf_i>
 80167c6:	e7eb      	b.n	80167a0 <_svfiprintf_r+0x1c0>
 80167c8:	08018b01 	.word	0x08018b01
 80167cc:	08018b0b 	.word	0x08018b0b
 80167d0:	080130b5 	.word	0x080130b5
 80167d4:	0801652d 	.word	0x0801652d
 80167d8:	08018b07 	.word	0x08018b07

080167dc <__sfputc_r>:
 80167dc:	6893      	ldr	r3, [r2, #8]
 80167de:	3b01      	subs	r3, #1
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	b410      	push	{r4}
 80167e4:	6093      	str	r3, [r2, #8]
 80167e6:	da08      	bge.n	80167fa <__sfputc_r+0x1e>
 80167e8:	6994      	ldr	r4, [r2, #24]
 80167ea:	42a3      	cmp	r3, r4
 80167ec:	db01      	blt.n	80167f2 <__sfputc_r+0x16>
 80167ee:	290a      	cmp	r1, #10
 80167f0:	d103      	bne.n	80167fa <__sfputc_r+0x1e>
 80167f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167f6:	f000 b9e3 	b.w	8016bc0 <__swbuf_r>
 80167fa:	6813      	ldr	r3, [r2, #0]
 80167fc:	1c58      	adds	r0, r3, #1
 80167fe:	6010      	str	r0, [r2, #0]
 8016800:	7019      	strb	r1, [r3, #0]
 8016802:	4608      	mov	r0, r1
 8016804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016808:	4770      	bx	lr

0801680a <__sfputs_r>:
 801680a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801680c:	4606      	mov	r6, r0
 801680e:	460f      	mov	r7, r1
 8016810:	4614      	mov	r4, r2
 8016812:	18d5      	adds	r5, r2, r3
 8016814:	42ac      	cmp	r4, r5
 8016816:	d101      	bne.n	801681c <__sfputs_r+0x12>
 8016818:	2000      	movs	r0, #0
 801681a:	e007      	b.n	801682c <__sfputs_r+0x22>
 801681c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016820:	463a      	mov	r2, r7
 8016822:	4630      	mov	r0, r6
 8016824:	f7ff ffda 	bl	80167dc <__sfputc_r>
 8016828:	1c43      	adds	r3, r0, #1
 801682a:	d1f3      	bne.n	8016814 <__sfputs_r+0xa>
 801682c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016830 <_vfiprintf_r>:
 8016830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016834:	460d      	mov	r5, r1
 8016836:	b09d      	sub	sp, #116	; 0x74
 8016838:	4614      	mov	r4, r2
 801683a:	4698      	mov	r8, r3
 801683c:	4606      	mov	r6, r0
 801683e:	b118      	cbz	r0, 8016848 <_vfiprintf_r+0x18>
 8016840:	6a03      	ldr	r3, [r0, #32]
 8016842:	b90b      	cbnz	r3, 8016848 <_vfiprintf_r+0x18>
 8016844:	f7fd fa98 	bl	8013d78 <__sinit>
 8016848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801684a:	07d9      	lsls	r1, r3, #31
 801684c:	d405      	bmi.n	801685a <_vfiprintf_r+0x2a>
 801684e:	89ab      	ldrh	r3, [r5, #12]
 8016850:	059a      	lsls	r2, r3, #22
 8016852:	d402      	bmi.n	801685a <_vfiprintf_r+0x2a>
 8016854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016856:	f7fd fc48 	bl	80140ea <__retarget_lock_acquire_recursive>
 801685a:	89ab      	ldrh	r3, [r5, #12]
 801685c:	071b      	lsls	r3, r3, #28
 801685e:	d501      	bpl.n	8016864 <_vfiprintf_r+0x34>
 8016860:	692b      	ldr	r3, [r5, #16]
 8016862:	b99b      	cbnz	r3, 801688c <_vfiprintf_r+0x5c>
 8016864:	4629      	mov	r1, r5
 8016866:	4630      	mov	r0, r6
 8016868:	f000 f9e8 	bl	8016c3c <__swsetup_r>
 801686c:	b170      	cbz	r0, 801688c <_vfiprintf_r+0x5c>
 801686e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016870:	07dc      	lsls	r4, r3, #31
 8016872:	d504      	bpl.n	801687e <_vfiprintf_r+0x4e>
 8016874:	f04f 30ff 	mov.w	r0, #4294967295
 8016878:	b01d      	add	sp, #116	; 0x74
 801687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801687e:	89ab      	ldrh	r3, [r5, #12]
 8016880:	0598      	lsls	r0, r3, #22
 8016882:	d4f7      	bmi.n	8016874 <_vfiprintf_r+0x44>
 8016884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016886:	f7fd fc31 	bl	80140ec <__retarget_lock_release_recursive>
 801688a:	e7f3      	b.n	8016874 <_vfiprintf_r+0x44>
 801688c:	2300      	movs	r3, #0
 801688e:	9309      	str	r3, [sp, #36]	; 0x24
 8016890:	2320      	movs	r3, #32
 8016892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016896:	f8cd 800c 	str.w	r8, [sp, #12]
 801689a:	2330      	movs	r3, #48	; 0x30
 801689c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016a50 <_vfiprintf_r+0x220>
 80168a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80168a4:	f04f 0901 	mov.w	r9, #1
 80168a8:	4623      	mov	r3, r4
 80168aa:	469a      	mov	sl, r3
 80168ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168b0:	b10a      	cbz	r2, 80168b6 <_vfiprintf_r+0x86>
 80168b2:	2a25      	cmp	r2, #37	; 0x25
 80168b4:	d1f9      	bne.n	80168aa <_vfiprintf_r+0x7a>
 80168b6:	ebba 0b04 	subs.w	fp, sl, r4
 80168ba:	d00b      	beq.n	80168d4 <_vfiprintf_r+0xa4>
 80168bc:	465b      	mov	r3, fp
 80168be:	4622      	mov	r2, r4
 80168c0:	4629      	mov	r1, r5
 80168c2:	4630      	mov	r0, r6
 80168c4:	f7ff ffa1 	bl	801680a <__sfputs_r>
 80168c8:	3001      	adds	r0, #1
 80168ca:	f000 80a9 	beq.w	8016a20 <_vfiprintf_r+0x1f0>
 80168ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168d0:	445a      	add	r2, fp
 80168d2:	9209      	str	r2, [sp, #36]	; 0x24
 80168d4:	f89a 3000 	ldrb.w	r3, [sl]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 80a1 	beq.w	8016a20 <_vfiprintf_r+0x1f0>
 80168de:	2300      	movs	r3, #0
 80168e0:	f04f 32ff 	mov.w	r2, #4294967295
 80168e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168e8:	f10a 0a01 	add.w	sl, sl, #1
 80168ec:	9304      	str	r3, [sp, #16]
 80168ee:	9307      	str	r3, [sp, #28]
 80168f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168f4:	931a      	str	r3, [sp, #104]	; 0x68
 80168f6:	4654      	mov	r4, sl
 80168f8:	2205      	movs	r2, #5
 80168fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168fe:	4854      	ldr	r0, [pc, #336]	; (8016a50 <_vfiprintf_r+0x220>)
 8016900:	f7e9 fc8e 	bl	8000220 <memchr>
 8016904:	9a04      	ldr	r2, [sp, #16]
 8016906:	b9d8      	cbnz	r0, 8016940 <_vfiprintf_r+0x110>
 8016908:	06d1      	lsls	r1, r2, #27
 801690a:	bf44      	itt	mi
 801690c:	2320      	movmi	r3, #32
 801690e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016912:	0713      	lsls	r3, r2, #28
 8016914:	bf44      	itt	mi
 8016916:	232b      	movmi	r3, #43	; 0x2b
 8016918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801691c:	f89a 3000 	ldrb.w	r3, [sl]
 8016920:	2b2a      	cmp	r3, #42	; 0x2a
 8016922:	d015      	beq.n	8016950 <_vfiprintf_r+0x120>
 8016924:	9a07      	ldr	r2, [sp, #28]
 8016926:	4654      	mov	r4, sl
 8016928:	2000      	movs	r0, #0
 801692a:	f04f 0c0a 	mov.w	ip, #10
 801692e:	4621      	mov	r1, r4
 8016930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016934:	3b30      	subs	r3, #48	; 0x30
 8016936:	2b09      	cmp	r3, #9
 8016938:	d94d      	bls.n	80169d6 <_vfiprintf_r+0x1a6>
 801693a:	b1b0      	cbz	r0, 801696a <_vfiprintf_r+0x13a>
 801693c:	9207      	str	r2, [sp, #28]
 801693e:	e014      	b.n	801696a <_vfiprintf_r+0x13a>
 8016940:	eba0 0308 	sub.w	r3, r0, r8
 8016944:	fa09 f303 	lsl.w	r3, r9, r3
 8016948:	4313      	orrs	r3, r2
 801694a:	9304      	str	r3, [sp, #16]
 801694c:	46a2      	mov	sl, r4
 801694e:	e7d2      	b.n	80168f6 <_vfiprintf_r+0xc6>
 8016950:	9b03      	ldr	r3, [sp, #12]
 8016952:	1d19      	adds	r1, r3, #4
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	9103      	str	r1, [sp, #12]
 8016958:	2b00      	cmp	r3, #0
 801695a:	bfbb      	ittet	lt
 801695c:	425b      	neglt	r3, r3
 801695e:	f042 0202 	orrlt.w	r2, r2, #2
 8016962:	9307      	strge	r3, [sp, #28]
 8016964:	9307      	strlt	r3, [sp, #28]
 8016966:	bfb8      	it	lt
 8016968:	9204      	strlt	r2, [sp, #16]
 801696a:	7823      	ldrb	r3, [r4, #0]
 801696c:	2b2e      	cmp	r3, #46	; 0x2e
 801696e:	d10c      	bne.n	801698a <_vfiprintf_r+0x15a>
 8016970:	7863      	ldrb	r3, [r4, #1]
 8016972:	2b2a      	cmp	r3, #42	; 0x2a
 8016974:	d134      	bne.n	80169e0 <_vfiprintf_r+0x1b0>
 8016976:	9b03      	ldr	r3, [sp, #12]
 8016978:	1d1a      	adds	r2, r3, #4
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	9203      	str	r2, [sp, #12]
 801697e:	2b00      	cmp	r3, #0
 8016980:	bfb8      	it	lt
 8016982:	f04f 33ff 	movlt.w	r3, #4294967295
 8016986:	3402      	adds	r4, #2
 8016988:	9305      	str	r3, [sp, #20]
 801698a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016a60 <_vfiprintf_r+0x230>
 801698e:	7821      	ldrb	r1, [r4, #0]
 8016990:	2203      	movs	r2, #3
 8016992:	4650      	mov	r0, sl
 8016994:	f7e9 fc44 	bl	8000220 <memchr>
 8016998:	b138      	cbz	r0, 80169aa <_vfiprintf_r+0x17a>
 801699a:	9b04      	ldr	r3, [sp, #16]
 801699c:	eba0 000a 	sub.w	r0, r0, sl
 80169a0:	2240      	movs	r2, #64	; 0x40
 80169a2:	4082      	lsls	r2, r0
 80169a4:	4313      	orrs	r3, r2
 80169a6:	3401      	adds	r4, #1
 80169a8:	9304      	str	r3, [sp, #16]
 80169aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169ae:	4829      	ldr	r0, [pc, #164]	; (8016a54 <_vfiprintf_r+0x224>)
 80169b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80169b4:	2206      	movs	r2, #6
 80169b6:	f7e9 fc33 	bl	8000220 <memchr>
 80169ba:	2800      	cmp	r0, #0
 80169bc:	d03f      	beq.n	8016a3e <_vfiprintf_r+0x20e>
 80169be:	4b26      	ldr	r3, [pc, #152]	; (8016a58 <_vfiprintf_r+0x228>)
 80169c0:	bb1b      	cbnz	r3, 8016a0a <_vfiprintf_r+0x1da>
 80169c2:	9b03      	ldr	r3, [sp, #12]
 80169c4:	3307      	adds	r3, #7
 80169c6:	f023 0307 	bic.w	r3, r3, #7
 80169ca:	3308      	adds	r3, #8
 80169cc:	9303      	str	r3, [sp, #12]
 80169ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169d0:	443b      	add	r3, r7
 80169d2:	9309      	str	r3, [sp, #36]	; 0x24
 80169d4:	e768      	b.n	80168a8 <_vfiprintf_r+0x78>
 80169d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80169da:	460c      	mov	r4, r1
 80169dc:	2001      	movs	r0, #1
 80169de:	e7a6      	b.n	801692e <_vfiprintf_r+0xfe>
 80169e0:	2300      	movs	r3, #0
 80169e2:	3401      	adds	r4, #1
 80169e4:	9305      	str	r3, [sp, #20]
 80169e6:	4619      	mov	r1, r3
 80169e8:	f04f 0c0a 	mov.w	ip, #10
 80169ec:	4620      	mov	r0, r4
 80169ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169f2:	3a30      	subs	r2, #48	; 0x30
 80169f4:	2a09      	cmp	r2, #9
 80169f6:	d903      	bls.n	8016a00 <_vfiprintf_r+0x1d0>
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d0c6      	beq.n	801698a <_vfiprintf_r+0x15a>
 80169fc:	9105      	str	r1, [sp, #20]
 80169fe:	e7c4      	b.n	801698a <_vfiprintf_r+0x15a>
 8016a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a04:	4604      	mov	r4, r0
 8016a06:	2301      	movs	r3, #1
 8016a08:	e7f0      	b.n	80169ec <_vfiprintf_r+0x1bc>
 8016a0a:	ab03      	add	r3, sp, #12
 8016a0c:	9300      	str	r3, [sp, #0]
 8016a0e:	462a      	mov	r2, r5
 8016a10:	4b12      	ldr	r3, [pc, #72]	; (8016a5c <_vfiprintf_r+0x22c>)
 8016a12:	a904      	add	r1, sp, #16
 8016a14:	4630      	mov	r0, r6
 8016a16:	f7fc fb4d 	bl	80130b4 <_printf_float>
 8016a1a:	4607      	mov	r7, r0
 8016a1c:	1c78      	adds	r0, r7, #1
 8016a1e:	d1d6      	bne.n	80169ce <_vfiprintf_r+0x19e>
 8016a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a22:	07d9      	lsls	r1, r3, #31
 8016a24:	d405      	bmi.n	8016a32 <_vfiprintf_r+0x202>
 8016a26:	89ab      	ldrh	r3, [r5, #12]
 8016a28:	059a      	lsls	r2, r3, #22
 8016a2a:	d402      	bmi.n	8016a32 <_vfiprintf_r+0x202>
 8016a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a2e:	f7fd fb5d 	bl	80140ec <__retarget_lock_release_recursive>
 8016a32:	89ab      	ldrh	r3, [r5, #12]
 8016a34:	065b      	lsls	r3, r3, #25
 8016a36:	f53f af1d 	bmi.w	8016874 <_vfiprintf_r+0x44>
 8016a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a3c:	e71c      	b.n	8016878 <_vfiprintf_r+0x48>
 8016a3e:	ab03      	add	r3, sp, #12
 8016a40:	9300      	str	r3, [sp, #0]
 8016a42:	462a      	mov	r2, r5
 8016a44:	4b05      	ldr	r3, [pc, #20]	; (8016a5c <_vfiprintf_r+0x22c>)
 8016a46:	a904      	add	r1, sp, #16
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f7fc fdd7 	bl	80135fc <_printf_i>
 8016a4e:	e7e4      	b.n	8016a1a <_vfiprintf_r+0x1ea>
 8016a50:	08018b01 	.word	0x08018b01
 8016a54:	08018b0b 	.word	0x08018b0b
 8016a58:	080130b5 	.word	0x080130b5
 8016a5c:	0801680b 	.word	0x0801680b
 8016a60:	08018b07 	.word	0x08018b07

08016a64 <__sflush_r>:
 8016a64:	898a      	ldrh	r2, [r1, #12]
 8016a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a6a:	4605      	mov	r5, r0
 8016a6c:	0710      	lsls	r0, r2, #28
 8016a6e:	460c      	mov	r4, r1
 8016a70:	d458      	bmi.n	8016b24 <__sflush_r+0xc0>
 8016a72:	684b      	ldr	r3, [r1, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	dc05      	bgt.n	8016a84 <__sflush_r+0x20>
 8016a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	dc02      	bgt.n	8016a84 <__sflush_r+0x20>
 8016a7e:	2000      	movs	r0, #0
 8016a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a86:	2e00      	cmp	r6, #0
 8016a88:	d0f9      	beq.n	8016a7e <__sflush_r+0x1a>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016a90:	682f      	ldr	r7, [r5, #0]
 8016a92:	6a21      	ldr	r1, [r4, #32]
 8016a94:	602b      	str	r3, [r5, #0]
 8016a96:	d032      	beq.n	8016afe <__sflush_r+0x9a>
 8016a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016a9a:	89a3      	ldrh	r3, [r4, #12]
 8016a9c:	075a      	lsls	r2, r3, #29
 8016a9e:	d505      	bpl.n	8016aac <__sflush_r+0x48>
 8016aa0:	6863      	ldr	r3, [r4, #4]
 8016aa2:	1ac0      	subs	r0, r0, r3
 8016aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016aa6:	b10b      	cbz	r3, 8016aac <__sflush_r+0x48>
 8016aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016aaa:	1ac0      	subs	r0, r0, r3
 8016aac:	2300      	movs	r3, #0
 8016aae:	4602      	mov	r2, r0
 8016ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ab2:	6a21      	ldr	r1, [r4, #32]
 8016ab4:	4628      	mov	r0, r5
 8016ab6:	47b0      	blx	r6
 8016ab8:	1c43      	adds	r3, r0, #1
 8016aba:	89a3      	ldrh	r3, [r4, #12]
 8016abc:	d106      	bne.n	8016acc <__sflush_r+0x68>
 8016abe:	6829      	ldr	r1, [r5, #0]
 8016ac0:	291d      	cmp	r1, #29
 8016ac2:	d82b      	bhi.n	8016b1c <__sflush_r+0xb8>
 8016ac4:	4a29      	ldr	r2, [pc, #164]	; (8016b6c <__sflush_r+0x108>)
 8016ac6:	410a      	asrs	r2, r1
 8016ac8:	07d6      	lsls	r6, r2, #31
 8016aca:	d427      	bmi.n	8016b1c <__sflush_r+0xb8>
 8016acc:	2200      	movs	r2, #0
 8016ace:	6062      	str	r2, [r4, #4]
 8016ad0:	04d9      	lsls	r1, r3, #19
 8016ad2:	6922      	ldr	r2, [r4, #16]
 8016ad4:	6022      	str	r2, [r4, #0]
 8016ad6:	d504      	bpl.n	8016ae2 <__sflush_r+0x7e>
 8016ad8:	1c42      	adds	r2, r0, #1
 8016ada:	d101      	bne.n	8016ae0 <__sflush_r+0x7c>
 8016adc:	682b      	ldr	r3, [r5, #0]
 8016ade:	b903      	cbnz	r3, 8016ae2 <__sflush_r+0x7e>
 8016ae0:	6560      	str	r0, [r4, #84]	; 0x54
 8016ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ae4:	602f      	str	r7, [r5, #0]
 8016ae6:	2900      	cmp	r1, #0
 8016ae8:	d0c9      	beq.n	8016a7e <__sflush_r+0x1a>
 8016aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016aee:	4299      	cmp	r1, r3
 8016af0:	d002      	beq.n	8016af8 <__sflush_r+0x94>
 8016af2:	4628      	mov	r0, r5
 8016af4:	f7fe f98a 	bl	8014e0c <_free_r>
 8016af8:	2000      	movs	r0, #0
 8016afa:	6360      	str	r0, [r4, #52]	; 0x34
 8016afc:	e7c0      	b.n	8016a80 <__sflush_r+0x1c>
 8016afe:	2301      	movs	r3, #1
 8016b00:	4628      	mov	r0, r5
 8016b02:	47b0      	blx	r6
 8016b04:	1c41      	adds	r1, r0, #1
 8016b06:	d1c8      	bne.n	8016a9a <__sflush_r+0x36>
 8016b08:	682b      	ldr	r3, [r5, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d0c5      	beq.n	8016a9a <__sflush_r+0x36>
 8016b0e:	2b1d      	cmp	r3, #29
 8016b10:	d001      	beq.n	8016b16 <__sflush_r+0xb2>
 8016b12:	2b16      	cmp	r3, #22
 8016b14:	d101      	bne.n	8016b1a <__sflush_r+0xb6>
 8016b16:	602f      	str	r7, [r5, #0]
 8016b18:	e7b1      	b.n	8016a7e <__sflush_r+0x1a>
 8016b1a:	89a3      	ldrh	r3, [r4, #12]
 8016b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b20:	81a3      	strh	r3, [r4, #12]
 8016b22:	e7ad      	b.n	8016a80 <__sflush_r+0x1c>
 8016b24:	690f      	ldr	r7, [r1, #16]
 8016b26:	2f00      	cmp	r7, #0
 8016b28:	d0a9      	beq.n	8016a7e <__sflush_r+0x1a>
 8016b2a:	0793      	lsls	r3, r2, #30
 8016b2c:	680e      	ldr	r6, [r1, #0]
 8016b2e:	bf08      	it	eq
 8016b30:	694b      	ldreq	r3, [r1, #20]
 8016b32:	600f      	str	r7, [r1, #0]
 8016b34:	bf18      	it	ne
 8016b36:	2300      	movne	r3, #0
 8016b38:	eba6 0807 	sub.w	r8, r6, r7
 8016b3c:	608b      	str	r3, [r1, #8]
 8016b3e:	f1b8 0f00 	cmp.w	r8, #0
 8016b42:	dd9c      	ble.n	8016a7e <__sflush_r+0x1a>
 8016b44:	6a21      	ldr	r1, [r4, #32]
 8016b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016b48:	4643      	mov	r3, r8
 8016b4a:	463a      	mov	r2, r7
 8016b4c:	4628      	mov	r0, r5
 8016b4e:	47b0      	blx	r6
 8016b50:	2800      	cmp	r0, #0
 8016b52:	dc06      	bgt.n	8016b62 <__sflush_r+0xfe>
 8016b54:	89a3      	ldrh	r3, [r4, #12]
 8016b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b5a:	81a3      	strh	r3, [r4, #12]
 8016b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b60:	e78e      	b.n	8016a80 <__sflush_r+0x1c>
 8016b62:	4407      	add	r7, r0
 8016b64:	eba8 0800 	sub.w	r8, r8, r0
 8016b68:	e7e9      	b.n	8016b3e <__sflush_r+0xda>
 8016b6a:	bf00      	nop
 8016b6c:	dfbffffe 	.word	0xdfbffffe

08016b70 <_fflush_r>:
 8016b70:	b538      	push	{r3, r4, r5, lr}
 8016b72:	690b      	ldr	r3, [r1, #16]
 8016b74:	4605      	mov	r5, r0
 8016b76:	460c      	mov	r4, r1
 8016b78:	b913      	cbnz	r3, 8016b80 <_fflush_r+0x10>
 8016b7a:	2500      	movs	r5, #0
 8016b7c:	4628      	mov	r0, r5
 8016b7e:	bd38      	pop	{r3, r4, r5, pc}
 8016b80:	b118      	cbz	r0, 8016b8a <_fflush_r+0x1a>
 8016b82:	6a03      	ldr	r3, [r0, #32]
 8016b84:	b90b      	cbnz	r3, 8016b8a <_fflush_r+0x1a>
 8016b86:	f7fd f8f7 	bl	8013d78 <__sinit>
 8016b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d0f3      	beq.n	8016b7a <_fflush_r+0xa>
 8016b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016b94:	07d0      	lsls	r0, r2, #31
 8016b96:	d404      	bmi.n	8016ba2 <_fflush_r+0x32>
 8016b98:	0599      	lsls	r1, r3, #22
 8016b9a:	d402      	bmi.n	8016ba2 <_fflush_r+0x32>
 8016b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b9e:	f7fd faa4 	bl	80140ea <__retarget_lock_acquire_recursive>
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	4621      	mov	r1, r4
 8016ba6:	f7ff ff5d 	bl	8016a64 <__sflush_r>
 8016baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bac:	07da      	lsls	r2, r3, #31
 8016bae:	4605      	mov	r5, r0
 8016bb0:	d4e4      	bmi.n	8016b7c <_fflush_r+0xc>
 8016bb2:	89a3      	ldrh	r3, [r4, #12]
 8016bb4:	059b      	lsls	r3, r3, #22
 8016bb6:	d4e1      	bmi.n	8016b7c <_fflush_r+0xc>
 8016bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bba:	f7fd fa97 	bl	80140ec <__retarget_lock_release_recursive>
 8016bbe:	e7dd      	b.n	8016b7c <_fflush_r+0xc>

08016bc0 <__swbuf_r>:
 8016bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bc2:	460e      	mov	r6, r1
 8016bc4:	4614      	mov	r4, r2
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	b118      	cbz	r0, 8016bd2 <__swbuf_r+0x12>
 8016bca:	6a03      	ldr	r3, [r0, #32]
 8016bcc:	b90b      	cbnz	r3, 8016bd2 <__swbuf_r+0x12>
 8016bce:	f7fd f8d3 	bl	8013d78 <__sinit>
 8016bd2:	69a3      	ldr	r3, [r4, #24]
 8016bd4:	60a3      	str	r3, [r4, #8]
 8016bd6:	89a3      	ldrh	r3, [r4, #12]
 8016bd8:	071a      	lsls	r2, r3, #28
 8016bda:	d525      	bpl.n	8016c28 <__swbuf_r+0x68>
 8016bdc:	6923      	ldr	r3, [r4, #16]
 8016bde:	b31b      	cbz	r3, 8016c28 <__swbuf_r+0x68>
 8016be0:	6823      	ldr	r3, [r4, #0]
 8016be2:	6922      	ldr	r2, [r4, #16]
 8016be4:	1a98      	subs	r0, r3, r2
 8016be6:	6963      	ldr	r3, [r4, #20]
 8016be8:	b2f6      	uxtb	r6, r6
 8016bea:	4283      	cmp	r3, r0
 8016bec:	4637      	mov	r7, r6
 8016bee:	dc04      	bgt.n	8016bfa <__swbuf_r+0x3a>
 8016bf0:	4621      	mov	r1, r4
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	f7ff ffbc 	bl	8016b70 <_fflush_r>
 8016bf8:	b9e0      	cbnz	r0, 8016c34 <__swbuf_r+0x74>
 8016bfa:	68a3      	ldr	r3, [r4, #8]
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	60a3      	str	r3, [r4, #8]
 8016c00:	6823      	ldr	r3, [r4, #0]
 8016c02:	1c5a      	adds	r2, r3, #1
 8016c04:	6022      	str	r2, [r4, #0]
 8016c06:	701e      	strb	r6, [r3, #0]
 8016c08:	6962      	ldr	r2, [r4, #20]
 8016c0a:	1c43      	adds	r3, r0, #1
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	d004      	beq.n	8016c1a <__swbuf_r+0x5a>
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	07db      	lsls	r3, r3, #31
 8016c14:	d506      	bpl.n	8016c24 <__swbuf_r+0x64>
 8016c16:	2e0a      	cmp	r6, #10
 8016c18:	d104      	bne.n	8016c24 <__swbuf_r+0x64>
 8016c1a:	4621      	mov	r1, r4
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	f7ff ffa7 	bl	8016b70 <_fflush_r>
 8016c22:	b938      	cbnz	r0, 8016c34 <__swbuf_r+0x74>
 8016c24:	4638      	mov	r0, r7
 8016c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c28:	4621      	mov	r1, r4
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	f000 f806 	bl	8016c3c <__swsetup_r>
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d0d5      	beq.n	8016be0 <__swbuf_r+0x20>
 8016c34:	f04f 37ff 	mov.w	r7, #4294967295
 8016c38:	e7f4      	b.n	8016c24 <__swbuf_r+0x64>
	...

08016c3c <__swsetup_r>:
 8016c3c:	b538      	push	{r3, r4, r5, lr}
 8016c3e:	4b2a      	ldr	r3, [pc, #168]	; (8016ce8 <__swsetup_r+0xac>)
 8016c40:	4605      	mov	r5, r0
 8016c42:	6818      	ldr	r0, [r3, #0]
 8016c44:	460c      	mov	r4, r1
 8016c46:	b118      	cbz	r0, 8016c50 <__swsetup_r+0x14>
 8016c48:	6a03      	ldr	r3, [r0, #32]
 8016c4a:	b90b      	cbnz	r3, 8016c50 <__swsetup_r+0x14>
 8016c4c:	f7fd f894 	bl	8013d78 <__sinit>
 8016c50:	89a3      	ldrh	r3, [r4, #12]
 8016c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c56:	0718      	lsls	r0, r3, #28
 8016c58:	d422      	bmi.n	8016ca0 <__swsetup_r+0x64>
 8016c5a:	06d9      	lsls	r1, r3, #27
 8016c5c:	d407      	bmi.n	8016c6e <__swsetup_r+0x32>
 8016c5e:	2309      	movs	r3, #9
 8016c60:	602b      	str	r3, [r5, #0]
 8016c62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c66:	81a3      	strh	r3, [r4, #12]
 8016c68:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6c:	e034      	b.n	8016cd8 <__swsetup_r+0x9c>
 8016c6e:	0758      	lsls	r0, r3, #29
 8016c70:	d512      	bpl.n	8016c98 <__swsetup_r+0x5c>
 8016c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c74:	b141      	cbz	r1, 8016c88 <__swsetup_r+0x4c>
 8016c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c7a:	4299      	cmp	r1, r3
 8016c7c:	d002      	beq.n	8016c84 <__swsetup_r+0x48>
 8016c7e:	4628      	mov	r0, r5
 8016c80:	f7fe f8c4 	bl	8014e0c <_free_r>
 8016c84:	2300      	movs	r3, #0
 8016c86:	6363      	str	r3, [r4, #52]	; 0x34
 8016c88:	89a3      	ldrh	r3, [r4, #12]
 8016c8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c8e:	81a3      	strh	r3, [r4, #12]
 8016c90:	2300      	movs	r3, #0
 8016c92:	6063      	str	r3, [r4, #4]
 8016c94:	6923      	ldr	r3, [r4, #16]
 8016c96:	6023      	str	r3, [r4, #0]
 8016c98:	89a3      	ldrh	r3, [r4, #12]
 8016c9a:	f043 0308 	orr.w	r3, r3, #8
 8016c9e:	81a3      	strh	r3, [r4, #12]
 8016ca0:	6923      	ldr	r3, [r4, #16]
 8016ca2:	b94b      	cbnz	r3, 8016cb8 <__swsetup_r+0x7c>
 8016ca4:	89a3      	ldrh	r3, [r4, #12]
 8016ca6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016cae:	d003      	beq.n	8016cb8 <__swsetup_r+0x7c>
 8016cb0:	4621      	mov	r1, r4
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	f000 fc15 	bl	80174e2 <__smakebuf_r>
 8016cb8:	89a0      	ldrh	r0, [r4, #12]
 8016cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016cbe:	f010 0301 	ands.w	r3, r0, #1
 8016cc2:	d00a      	beq.n	8016cda <__swsetup_r+0x9e>
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	60a3      	str	r3, [r4, #8]
 8016cc8:	6963      	ldr	r3, [r4, #20]
 8016cca:	425b      	negs	r3, r3
 8016ccc:	61a3      	str	r3, [r4, #24]
 8016cce:	6923      	ldr	r3, [r4, #16]
 8016cd0:	b943      	cbnz	r3, 8016ce4 <__swsetup_r+0xa8>
 8016cd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016cd6:	d1c4      	bne.n	8016c62 <__swsetup_r+0x26>
 8016cd8:	bd38      	pop	{r3, r4, r5, pc}
 8016cda:	0781      	lsls	r1, r0, #30
 8016cdc:	bf58      	it	pl
 8016cde:	6963      	ldrpl	r3, [r4, #20]
 8016ce0:	60a3      	str	r3, [r4, #8]
 8016ce2:	e7f4      	b.n	8016cce <__swsetup_r+0x92>
 8016ce4:	2000      	movs	r0, #0
 8016ce6:	e7f7      	b.n	8016cd8 <__swsetup_r+0x9c>
 8016ce8:	200000d0 	.word	0x200000d0

08016cec <strncmp>:
 8016cec:	b510      	push	{r4, lr}
 8016cee:	b16a      	cbz	r2, 8016d0c <strncmp+0x20>
 8016cf0:	3901      	subs	r1, #1
 8016cf2:	1884      	adds	r4, r0, r2
 8016cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d103      	bne.n	8016d08 <strncmp+0x1c>
 8016d00:	42a0      	cmp	r0, r4
 8016d02:	d001      	beq.n	8016d08 <strncmp+0x1c>
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	d1f5      	bne.n	8016cf4 <strncmp+0x8>
 8016d08:	1ad0      	subs	r0, r2, r3
 8016d0a:	bd10      	pop	{r4, pc}
 8016d0c:	4610      	mov	r0, r2
 8016d0e:	e7fc      	b.n	8016d0a <strncmp+0x1e>

08016d10 <nan>:
 8016d10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d18 <nan+0x8>
 8016d14:	4770      	bx	lr
 8016d16:	bf00      	nop
 8016d18:	00000000 	.word	0x00000000
 8016d1c:	7ff80000 	.word	0x7ff80000

08016d20 <_calloc_r>:
 8016d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d22:	fba1 2402 	umull	r2, r4, r1, r2
 8016d26:	b94c      	cbnz	r4, 8016d3c <_calloc_r+0x1c>
 8016d28:	4611      	mov	r1, r2
 8016d2a:	9201      	str	r2, [sp, #4]
 8016d2c:	f7fc f896 	bl	8012e5c <_malloc_r>
 8016d30:	9a01      	ldr	r2, [sp, #4]
 8016d32:	4605      	mov	r5, r0
 8016d34:	b930      	cbnz	r0, 8016d44 <_calloc_r+0x24>
 8016d36:	4628      	mov	r0, r5
 8016d38:	b003      	add	sp, #12
 8016d3a:	bd30      	pop	{r4, r5, pc}
 8016d3c:	220c      	movs	r2, #12
 8016d3e:	6002      	str	r2, [r0, #0]
 8016d40:	2500      	movs	r5, #0
 8016d42:	e7f8      	b.n	8016d36 <_calloc_r+0x16>
 8016d44:	4621      	mov	r1, r4
 8016d46:	f7fd f8ec 	bl	8013f22 <memset>
 8016d4a:	e7f4      	b.n	8016d36 <_calloc_r+0x16>

08016d4c <rshift>:
 8016d4c:	6903      	ldr	r3, [r0, #16]
 8016d4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016d52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016d5a:	f100 0414 	add.w	r4, r0, #20
 8016d5e:	dd45      	ble.n	8016dec <rshift+0xa0>
 8016d60:	f011 011f 	ands.w	r1, r1, #31
 8016d64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016d68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016d6c:	d10c      	bne.n	8016d88 <rshift+0x3c>
 8016d6e:	f100 0710 	add.w	r7, r0, #16
 8016d72:	4629      	mov	r1, r5
 8016d74:	42b1      	cmp	r1, r6
 8016d76:	d334      	bcc.n	8016de2 <rshift+0x96>
 8016d78:	1a9b      	subs	r3, r3, r2
 8016d7a:	009b      	lsls	r3, r3, #2
 8016d7c:	1eea      	subs	r2, r5, #3
 8016d7e:	4296      	cmp	r6, r2
 8016d80:	bf38      	it	cc
 8016d82:	2300      	movcc	r3, #0
 8016d84:	4423      	add	r3, r4
 8016d86:	e015      	b.n	8016db4 <rshift+0x68>
 8016d88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016d8c:	f1c1 0820 	rsb	r8, r1, #32
 8016d90:	40cf      	lsrs	r7, r1
 8016d92:	f105 0e04 	add.w	lr, r5, #4
 8016d96:	46a1      	mov	r9, r4
 8016d98:	4576      	cmp	r6, lr
 8016d9a:	46f4      	mov	ip, lr
 8016d9c:	d815      	bhi.n	8016dca <rshift+0x7e>
 8016d9e:	1a9a      	subs	r2, r3, r2
 8016da0:	0092      	lsls	r2, r2, #2
 8016da2:	3a04      	subs	r2, #4
 8016da4:	3501      	adds	r5, #1
 8016da6:	42ae      	cmp	r6, r5
 8016da8:	bf38      	it	cc
 8016daa:	2200      	movcc	r2, #0
 8016dac:	18a3      	adds	r3, r4, r2
 8016dae:	50a7      	str	r7, [r4, r2]
 8016db0:	b107      	cbz	r7, 8016db4 <rshift+0x68>
 8016db2:	3304      	adds	r3, #4
 8016db4:	1b1a      	subs	r2, r3, r4
 8016db6:	42a3      	cmp	r3, r4
 8016db8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016dbc:	bf08      	it	eq
 8016dbe:	2300      	moveq	r3, #0
 8016dc0:	6102      	str	r2, [r0, #16]
 8016dc2:	bf08      	it	eq
 8016dc4:	6143      	streq	r3, [r0, #20]
 8016dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dca:	f8dc c000 	ldr.w	ip, [ip]
 8016dce:	fa0c fc08 	lsl.w	ip, ip, r8
 8016dd2:	ea4c 0707 	orr.w	r7, ip, r7
 8016dd6:	f849 7b04 	str.w	r7, [r9], #4
 8016dda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016dde:	40cf      	lsrs	r7, r1
 8016de0:	e7da      	b.n	8016d98 <rshift+0x4c>
 8016de2:	f851 cb04 	ldr.w	ip, [r1], #4
 8016de6:	f847 cf04 	str.w	ip, [r7, #4]!
 8016dea:	e7c3      	b.n	8016d74 <rshift+0x28>
 8016dec:	4623      	mov	r3, r4
 8016dee:	e7e1      	b.n	8016db4 <rshift+0x68>

08016df0 <__hexdig_fun>:
 8016df0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016df4:	2b09      	cmp	r3, #9
 8016df6:	d802      	bhi.n	8016dfe <__hexdig_fun+0xe>
 8016df8:	3820      	subs	r0, #32
 8016dfa:	b2c0      	uxtb	r0, r0
 8016dfc:	4770      	bx	lr
 8016dfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016e02:	2b05      	cmp	r3, #5
 8016e04:	d801      	bhi.n	8016e0a <__hexdig_fun+0x1a>
 8016e06:	3847      	subs	r0, #71	; 0x47
 8016e08:	e7f7      	b.n	8016dfa <__hexdig_fun+0xa>
 8016e0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016e0e:	2b05      	cmp	r3, #5
 8016e10:	d801      	bhi.n	8016e16 <__hexdig_fun+0x26>
 8016e12:	3827      	subs	r0, #39	; 0x27
 8016e14:	e7f1      	b.n	8016dfa <__hexdig_fun+0xa>
 8016e16:	2000      	movs	r0, #0
 8016e18:	4770      	bx	lr
	...

08016e1c <__gethex>:
 8016e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e20:	4617      	mov	r7, r2
 8016e22:	680a      	ldr	r2, [r1, #0]
 8016e24:	b085      	sub	sp, #20
 8016e26:	f102 0b02 	add.w	fp, r2, #2
 8016e2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016e2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016e32:	4681      	mov	r9, r0
 8016e34:	468a      	mov	sl, r1
 8016e36:	9302      	str	r3, [sp, #8]
 8016e38:	32fe      	adds	r2, #254	; 0xfe
 8016e3a:	eb02 030b 	add.w	r3, r2, fp
 8016e3e:	46d8      	mov	r8, fp
 8016e40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016e44:	9301      	str	r3, [sp, #4]
 8016e46:	2830      	cmp	r0, #48	; 0x30
 8016e48:	d0f7      	beq.n	8016e3a <__gethex+0x1e>
 8016e4a:	f7ff ffd1 	bl	8016df0 <__hexdig_fun>
 8016e4e:	4604      	mov	r4, r0
 8016e50:	2800      	cmp	r0, #0
 8016e52:	d138      	bne.n	8016ec6 <__gethex+0xaa>
 8016e54:	49a7      	ldr	r1, [pc, #668]	; (80170f4 <__gethex+0x2d8>)
 8016e56:	2201      	movs	r2, #1
 8016e58:	4640      	mov	r0, r8
 8016e5a:	f7ff ff47 	bl	8016cec <strncmp>
 8016e5e:	4606      	mov	r6, r0
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d169      	bne.n	8016f38 <__gethex+0x11c>
 8016e64:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016e68:	465d      	mov	r5, fp
 8016e6a:	f7ff ffc1 	bl	8016df0 <__hexdig_fun>
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	d064      	beq.n	8016f3c <__gethex+0x120>
 8016e72:	465a      	mov	r2, fp
 8016e74:	7810      	ldrb	r0, [r2, #0]
 8016e76:	2830      	cmp	r0, #48	; 0x30
 8016e78:	4690      	mov	r8, r2
 8016e7a:	f102 0201 	add.w	r2, r2, #1
 8016e7e:	d0f9      	beq.n	8016e74 <__gethex+0x58>
 8016e80:	f7ff ffb6 	bl	8016df0 <__hexdig_fun>
 8016e84:	2301      	movs	r3, #1
 8016e86:	fab0 f480 	clz	r4, r0
 8016e8a:	0964      	lsrs	r4, r4, #5
 8016e8c:	465e      	mov	r6, fp
 8016e8e:	9301      	str	r3, [sp, #4]
 8016e90:	4642      	mov	r2, r8
 8016e92:	4615      	mov	r5, r2
 8016e94:	3201      	adds	r2, #1
 8016e96:	7828      	ldrb	r0, [r5, #0]
 8016e98:	f7ff ffaa 	bl	8016df0 <__hexdig_fun>
 8016e9c:	2800      	cmp	r0, #0
 8016e9e:	d1f8      	bne.n	8016e92 <__gethex+0x76>
 8016ea0:	4994      	ldr	r1, [pc, #592]	; (80170f4 <__gethex+0x2d8>)
 8016ea2:	2201      	movs	r2, #1
 8016ea4:	4628      	mov	r0, r5
 8016ea6:	f7ff ff21 	bl	8016cec <strncmp>
 8016eaa:	b978      	cbnz	r0, 8016ecc <__gethex+0xb0>
 8016eac:	b946      	cbnz	r6, 8016ec0 <__gethex+0xa4>
 8016eae:	1c6e      	adds	r6, r5, #1
 8016eb0:	4632      	mov	r2, r6
 8016eb2:	4615      	mov	r5, r2
 8016eb4:	3201      	adds	r2, #1
 8016eb6:	7828      	ldrb	r0, [r5, #0]
 8016eb8:	f7ff ff9a 	bl	8016df0 <__hexdig_fun>
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d1f8      	bne.n	8016eb2 <__gethex+0x96>
 8016ec0:	1b73      	subs	r3, r6, r5
 8016ec2:	009e      	lsls	r6, r3, #2
 8016ec4:	e004      	b.n	8016ed0 <__gethex+0xb4>
 8016ec6:	2400      	movs	r4, #0
 8016ec8:	4626      	mov	r6, r4
 8016eca:	e7e1      	b.n	8016e90 <__gethex+0x74>
 8016ecc:	2e00      	cmp	r6, #0
 8016ece:	d1f7      	bne.n	8016ec0 <__gethex+0xa4>
 8016ed0:	782b      	ldrb	r3, [r5, #0]
 8016ed2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ed6:	2b50      	cmp	r3, #80	; 0x50
 8016ed8:	d13d      	bne.n	8016f56 <__gethex+0x13a>
 8016eda:	786b      	ldrb	r3, [r5, #1]
 8016edc:	2b2b      	cmp	r3, #43	; 0x2b
 8016ede:	d02f      	beq.n	8016f40 <__gethex+0x124>
 8016ee0:	2b2d      	cmp	r3, #45	; 0x2d
 8016ee2:	d031      	beq.n	8016f48 <__gethex+0x12c>
 8016ee4:	1c69      	adds	r1, r5, #1
 8016ee6:	f04f 0b00 	mov.w	fp, #0
 8016eea:	7808      	ldrb	r0, [r1, #0]
 8016eec:	f7ff ff80 	bl	8016df0 <__hexdig_fun>
 8016ef0:	1e42      	subs	r2, r0, #1
 8016ef2:	b2d2      	uxtb	r2, r2
 8016ef4:	2a18      	cmp	r2, #24
 8016ef6:	d82e      	bhi.n	8016f56 <__gethex+0x13a>
 8016ef8:	f1a0 0210 	sub.w	r2, r0, #16
 8016efc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016f00:	f7ff ff76 	bl	8016df0 <__hexdig_fun>
 8016f04:	f100 3cff 	add.w	ip, r0, #4294967295
 8016f08:	fa5f fc8c 	uxtb.w	ip, ip
 8016f0c:	f1bc 0f18 	cmp.w	ip, #24
 8016f10:	d91d      	bls.n	8016f4e <__gethex+0x132>
 8016f12:	f1bb 0f00 	cmp.w	fp, #0
 8016f16:	d000      	beq.n	8016f1a <__gethex+0xfe>
 8016f18:	4252      	negs	r2, r2
 8016f1a:	4416      	add	r6, r2
 8016f1c:	f8ca 1000 	str.w	r1, [sl]
 8016f20:	b1dc      	cbz	r4, 8016f5a <__gethex+0x13e>
 8016f22:	9b01      	ldr	r3, [sp, #4]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	bf14      	ite	ne
 8016f28:	f04f 0800 	movne.w	r8, #0
 8016f2c:	f04f 0806 	moveq.w	r8, #6
 8016f30:	4640      	mov	r0, r8
 8016f32:	b005      	add	sp, #20
 8016f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f38:	4645      	mov	r5, r8
 8016f3a:	4626      	mov	r6, r4
 8016f3c:	2401      	movs	r4, #1
 8016f3e:	e7c7      	b.n	8016ed0 <__gethex+0xb4>
 8016f40:	f04f 0b00 	mov.w	fp, #0
 8016f44:	1ca9      	adds	r1, r5, #2
 8016f46:	e7d0      	b.n	8016eea <__gethex+0xce>
 8016f48:	f04f 0b01 	mov.w	fp, #1
 8016f4c:	e7fa      	b.n	8016f44 <__gethex+0x128>
 8016f4e:	230a      	movs	r3, #10
 8016f50:	fb03 0002 	mla	r0, r3, r2, r0
 8016f54:	e7d0      	b.n	8016ef8 <__gethex+0xdc>
 8016f56:	4629      	mov	r1, r5
 8016f58:	e7e0      	b.n	8016f1c <__gethex+0x100>
 8016f5a:	eba5 0308 	sub.w	r3, r5, r8
 8016f5e:	3b01      	subs	r3, #1
 8016f60:	4621      	mov	r1, r4
 8016f62:	2b07      	cmp	r3, #7
 8016f64:	dc0a      	bgt.n	8016f7c <__gethex+0x160>
 8016f66:	4648      	mov	r0, r9
 8016f68:	f7fd ff9c 	bl	8014ea4 <_Balloc>
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	b940      	cbnz	r0, 8016f82 <__gethex+0x166>
 8016f70:	4b61      	ldr	r3, [pc, #388]	; (80170f8 <__gethex+0x2dc>)
 8016f72:	4602      	mov	r2, r0
 8016f74:	21e4      	movs	r1, #228	; 0xe4
 8016f76:	4861      	ldr	r0, [pc, #388]	; (80170fc <__gethex+0x2e0>)
 8016f78:	f7fb ff10 	bl	8012d9c <__assert_func>
 8016f7c:	3101      	adds	r1, #1
 8016f7e:	105b      	asrs	r3, r3, #1
 8016f80:	e7ef      	b.n	8016f62 <__gethex+0x146>
 8016f82:	f100 0a14 	add.w	sl, r0, #20
 8016f86:	2300      	movs	r3, #0
 8016f88:	495a      	ldr	r1, [pc, #360]	; (80170f4 <__gethex+0x2d8>)
 8016f8a:	f8cd a004 	str.w	sl, [sp, #4]
 8016f8e:	469b      	mov	fp, r3
 8016f90:	45a8      	cmp	r8, r5
 8016f92:	d342      	bcc.n	801701a <__gethex+0x1fe>
 8016f94:	9801      	ldr	r0, [sp, #4]
 8016f96:	f840 bb04 	str.w	fp, [r0], #4
 8016f9a:	eba0 000a 	sub.w	r0, r0, sl
 8016f9e:	1080      	asrs	r0, r0, #2
 8016fa0:	6120      	str	r0, [r4, #16]
 8016fa2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016fa6:	4658      	mov	r0, fp
 8016fa8:	f7fe f86e 	bl	8015088 <__hi0bits>
 8016fac:	683d      	ldr	r5, [r7, #0]
 8016fae:	eba8 0000 	sub.w	r0, r8, r0
 8016fb2:	42a8      	cmp	r0, r5
 8016fb4:	dd59      	ble.n	801706a <__gethex+0x24e>
 8016fb6:	eba0 0805 	sub.w	r8, r0, r5
 8016fba:	4641      	mov	r1, r8
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	f7fe fbfd 	bl	80157bc <__any_on>
 8016fc2:	4683      	mov	fp, r0
 8016fc4:	b1b8      	cbz	r0, 8016ff6 <__gethex+0x1da>
 8016fc6:	f108 33ff 	add.w	r3, r8, #4294967295
 8016fca:	1159      	asrs	r1, r3, #5
 8016fcc:	f003 021f 	and.w	r2, r3, #31
 8016fd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016fd4:	f04f 0b01 	mov.w	fp, #1
 8016fd8:	fa0b f202 	lsl.w	r2, fp, r2
 8016fdc:	420a      	tst	r2, r1
 8016fde:	d00a      	beq.n	8016ff6 <__gethex+0x1da>
 8016fe0:	455b      	cmp	r3, fp
 8016fe2:	dd06      	ble.n	8016ff2 <__gethex+0x1d6>
 8016fe4:	f1a8 0102 	sub.w	r1, r8, #2
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f7fe fbe7 	bl	80157bc <__any_on>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d138      	bne.n	8017064 <__gethex+0x248>
 8016ff2:	f04f 0b02 	mov.w	fp, #2
 8016ff6:	4641      	mov	r1, r8
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f7ff fea7 	bl	8016d4c <rshift>
 8016ffe:	4446      	add	r6, r8
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	42b3      	cmp	r3, r6
 8017004:	da41      	bge.n	801708a <__gethex+0x26e>
 8017006:	4621      	mov	r1, r4
 8017008:	4648      	mov	r0, r9
 801700a:	f7fd ff8b 	bl	8014f24 <_Bfree>
 801700e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017010:	2300      	movs	r3, #0
 8017012:	6013      	str	r3, [r2, #0]
 8017014:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017018:	e78a      	b.n	8016f30 <__gethex+0x114>
 801701a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801701e:	2a2e      	cmp	r2, #46	; 0x2e
 8017020:	d014      	beq.n	801704c <__gethex+0x230>
 8017022:	2b20      	cmp	r3, #32
 8017024:	d106      	bne.n	8017034 <__gethex+0x218>
 8017026:	9b01      	ldr	r3, [sp, #4]
 8017028:	f843 bb04 	str.w	fp, [r3], #4
 801702c:	f04f 0b00 	mov.w	fp, #0
 8017030:	9301      	str	r3, [sp, #4]
 8017032:	465b      	mov	r3, fp
 8017034:	7828      	ldrb	r0, [r5, #0]
 8017036:	9303      	str	r3, [sp, #12]
 8017038:	f7ff feda 	bl	8016df0 <__hexdig_fun>
 801703c:	9b03      	ldr	r3, [sp, #12]
 801703e:	f000 000f 	and.w	r0, r0, #15
 8017042:	4098      	lsls	r0, r3
 8017044:	ea4b 0b00 	orr.w	fp, fp, r0
 8017048:	3304      	adds	r3, #4
 801704a:	e7a1      	b.n	8016f90 <__gethex+0x174>
 801704c:	45a8      	cmp	r8, r5
 801704e:	d8e8      	bhi.n	8017022 <__gethex+0x206>
 8017050:	2201      	movs	r2, #1
 8017052:	4628      	mov	r0, r5
 8017054:	9303      	str	r3, [sp, #12]
 8017056:	f7ff fe49 	bl	8016cec <strncmp>
 801705a:	4926      	ldr	r1, [pc, #152]	; (80170f4 <__gethex+0x2d8>)
 801705c:	9b03      	ldr	r3, [sp, #12]
 801705e:	2800      	cmp	r0, #0
 8017060:	d1df      	bne.n	8017022 <__gethex+0x206>
 8017062:	e795      	b.n	8016f90 <__gethex+0x174>
 8017064:	f04f 0b03 	mov.w	fp, #3
 8017068:	e7c5      	b.n	8016ff6 <__gethex+0x1da>
 801706a:	da0b      	bge.n	8017084 <__gethex+0x268>
 801706c:	eba5 0800 	sub.w	r8, r5, r0
 8017070:	4621      	mov	r1, r4
 8017072:	4642      	mov	r2, r8
 8017074:	4648      	mov	r0, r9
 8017076:	f7fe f96f 	bl	8015358 <__lshift>
 801707a:	eba6 0608 	sub.w	r6, r6, r8
 801707e:	4604      	mov	r4, r0
 8017080:	f100 0a14 	add.w	sl, r0, #20
 8017084:	f04f 0b00 	mov.w	fp, #0
 8017088:	e7ba      	b.n	8017000 <__gethex+0x1e4>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	42b3      	cmp	r3, r6
 801708e:	dd73      	ble.n	8017178 <__gethex+0x35c>
 8017090:	1b9e      	subs	r6, r3, r6
 8017092:	42b5      	cmp	r5, r6
 8017094:	dc34      	bgt.n	8017100 <__gethex+0x2e4>
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	2b02      	cmp	r3, #2
 801709a:	d023      	beq.n	80170e4 <__gethex+0x2c8>
 801709c:	2b03      	cmp	r3, #3
 801709e:	d025      	beq.n	80170ec <__gethex+0x2d0>
 80170a0:	2b01      	cmp	r3, #1
 80170a2:	d115      	bne.n	80170d0 <__gethex+0x2b4>
 80170a4:	42b5      	cmp	r5, r6
 80170a6:	d113      	bne.n	80170d0 <__gethex+0x2b4>
 80170a8:	2d01      	cmp	r5, #1
 80170aa:	d10b      	bne.n	80170c4 <__gethex+0x2a8>
 80170ac:	9a02      	ldr	r2, [sp, #8]
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6013      	str	r3, [r2, #0]
 80170b2:	2301      	movs	r3, #1
 80170b4:	6123      	str	r3, [r4, #16]
 80170b6:	f8ca 3000 	str.w	r3, [sl]
 80170ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170bc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80170c0:	601c      	str	r4, [r3, #0]
 80170c2:	e735      	b.n	8016f30 <__gethex+0x114>
 80170c4:	1e69      	subs	r1, r5, #1
 80170c6:	4620      	mov	r0, r4
 80170c8:	f7fe fb78 	bl	80157bc <__any_on>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d1ed      	bne.n	80170ac <__gethex+0x290>
 80170d0:	4621      	mov	r1, r4
 80170d2:	4648      	mov	r0, r9
 80170d4:	f7fd ff26 	bl	8014f24 <_Bfree>
 80170d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170da:	2300      	movs	r3, #0
 80170dc:	6013      	str	r3, [r2, #0]
 80170de:	f04f 0850 	mov.w	r8, #80	; 0x50
 80170e2:	e725      	b.n	8016f30 <__gethex+0x114>
 80170e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d1f2      	bne.n	80170d0 <__gethex+0x2b4>
 80170ea:	e7df      	b.n	80170ac <__gethex+0x290>
 80170ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d1dc      	bne.n	80170ac <__gethex+0x290>
 80170f2:	e7ed      	b.n	80170d0 <__gethex+0x2b4>
 80170f4:	080189ac 	.word	0x080189ac
 80170f8:	08018841 	.word	0x08018841
 80170fc:	08018b1a 	.word	0x08018b1a
 8017100:	f106 38ff 	add.w	r8, r6, #4294967295
 8017104:	f1bb 0f00 	cmp.w	fp, #0
 8017108:	d133      	bne.n	8017172 <__gethex+0x356>
 801710a:	f1b8 0f00 	cmp.w	r8, #0
 801710e:	d004      	beq.n	801711a <__gethex+0x2fe>
 8017110:	4641      	mov	r1, r8
 8017112:	4620      	mov	r0, r4
 8017114:	f7fe fb52 	bl	80157bc <__any_on>
 8017118:	4683      	mov	fp, r0
 801711a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801711e:	2301      	movs	r3, #1
 8017120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017124:	f008 081f 	and.w	r8, r8, #31
 8017128:	fa03 f308 	lsl.w	r3, r3, r8
 801712c:	4213      	tst	r3, r2
 801712e:	4631      	mov	r1, r6
 8017130:	4620      	mov	r0, r4
 8017132:	bf18      	it	ne
 8017134:	f04b 0b02 	orrne.w	fp, fp, #2
 8017138:	1bad      	subs	r5, r5, r6
 801713a:	f7ff fe07 	bl	8016d4c <rshift>
 801713e:	687e      	ldr	r6, [r7, #4]
 8017140:	f04f 0802 	mov.w	r8, #2
 8017144:	f1bb 0f00 	cmp.w	fp, #0
 8017148:	d04a      	beq.n	80171e0 <__gethex+0x3c4>
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	2b02      	cmp	r3, #2
 801714e:	d016      	beq.n	801717e <__gethex+0x362>
 8017150:	2b03      	cmp	r3, #3
 8017152:	d018      	beq.n	8017186 <__gethex+0x36a>
 8017154:	2b01      	cmp	r3, #1
 8017156:	d109      	bne.n	801716c <__gethex+0x350>
 8017158:	f01b 0f02 	tst.w	fp, #2
 801715c:	d006      	beq.n	801716c <__gethex+0x350>
 801715e:	f8da 3000 	ldr.w	r3, [sl]
 8017162:	ea4b 0b03 	orr.w	fp, fp, r3
 8017166:	f01b 0f01 	tst.w	fp, #1
 801716a:	d10f      	bne.n	801718c <__gethex+0x370>
 801716c:	f048 0810 	orr.w	r8, r8, #16
 8017170:	e036      	b.n	80171e0 <__gethex+0x3c4>
 8017172:	f04f 0b01 	mov.w	fp, #1
 8017176:	e7d0      	b.n	801711a <__gethex+0x2fe>
 8017178:	f04f 0801 	mov.w	r8, #1
 801717c:	e7e2      	b.n	8017144 <__gethex+0x328>
 801717e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017180:	f1c3 0301 	rsb	r3, r3, #1
 8017184:	930f      	str	r3, [sp, #60]	; 0x3c
 8017186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017188:	2b00      	cmp	r3, #0
 801718a:	d0ef      	beq.n	801716c <__gethex+0x350>
 801718c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017190:	f104 0214 	add.w	r2, r4, #20
 8017194:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017198:	9301      	str	r3, [sp, #4]
 801719a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801719e:	2300      	movs	r3, #0
 80171a0:	4694      	mov	ip, r2
 80171a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80171a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80171aa:	d01e      	beq.n	80171ea <__gethex+0x3ce>
 80171ac:	3101      	adds	r1, #1
 80171ae:	f8cc 1000 	str.w	r1, [ip]
 80171b2:	f1b8 0f02 	cmp.w	r8, #2
 80171b6:	f104 0214 	add.w	r2, r4, #20
 80171ba:	d13d      	bne.n	8017238 <__gethex+0x41c>
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	3b01      	subs	r3, #1
 80171c0:	42ab      	cmp	r3, r5
 80171c2:	d10b      	bne.n	80171dc <__gethex+0x3c0>
 80171c4:	1169      	asrs	r1, r5, #5
 80171c6:	2301      	movs	r3, #1
 80171c8:	f005 051f 	and.w	r5, r5, #31
 80171cc:	fa03 f505 	lsl.w	r5, r3, r5
 80171d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80171d4:	421d      	tst	r5, r3
 80171d6:	bf18      	it	ne
 80171d8:	f04f 0801 	movne.w	r8, #1
 80171dc:	f048 0820 	orr.w	r8, r8, #32
 80171e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171e2:	601c      	str	r4, [r3, #0]
 80171e4:	9b02      	ldr	r3, [sp, #8]
 80171e6:	601e      	str	r6, [r3, #0]
 80171e8:	e6a2      	b.n	8016f30 <__gethex+0x114>
 80171ea:	4290      	cmp	r0, r2
 80171ec:	f842 3c04 	str.w	r3, [r2, #-4]
 80171f0:	d8d6      	bhi.n	80171a0 <__gethex+0x384>
 80171f2:	68a2      	ldr	r2, [r4, #8]
 80171f4:	4593      	cmp	fp, r2
 80171f6:	db17      	blt.n	8017228 <__gethex+0x40c>
 80171f8:	6861      	ldr	r1, [r4, #4]
 80171fa:	4648      	mov	r0, r9
 80171fc:	3101      	adds	r1, #1
 80171fe:	f7fd fe51 	bl	8014ea4 <_Balloc>
 8017202:	4682      	mov	sl, r0
 8017204:	b918      	cbnz	r0, 801720e <__gethex+0x3f2>
 8017206:	4b1b      	ldr	r3, [pc, #108]	; (8017274 <__gethex+0x458>)
 8017208:	4602      	mov	r2, r0
 801720a:	2184      	movs	r1, #132	; 0x84
 801720c:	e6b3      	b.n	8016f76 <__gethex+0x15a>
 801720e:	6922      	ldr	r2, [r4, #16]
 8017210:	3202      	adds	r2, #2
 8017212:	f104 010c 	add.w	r1, r4, #12
 8017216:	0092      	lsls	r2, r2, #2
 8017218:	300c      	adds	r0, #12
 801721a:	f7fc ff68 	bl	80140ee <memcpy>
 801721e:	4621      	mov	r1, r4
 8017220:	4648      	mov	r0, r9
 8017222:	f7fd fe7f 	bl	8014f24 <_Bfree>
 8017226:	4654      	mov	r4, sl
 8017228:	6922      	ldr	r2, [r4, #16]
 801722a:	1c51      	adds	r1, r2, #1
 801722c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017230:	6121      	str	r1, [r4, #16]
 8017232:	2101      	movs	r1, #1
 8017234:	6151      	str	r1, [r2, #20]
 8017236:	e7bc      	b.n	80171b2 <__gethex+0x396>
 8017238:	6921      	ldr	r1, [r4, #16]
 801723a:	4559      	cmp	r1, fp
 801723c:	dd0b      	ble.n	8017256 <__gethex+0x43a>
 801723e:	2101      	movs	r1, #1
 8017240:	4620      	mov	r0, r4
 8017242:	f7ff fd83 	bl	8016d4c <rshift>
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	3601      	adds	r6, #1
 801724a:	42b3      	cmp	r3, r6
 801724c:	f6ff aedb 	blt.w	8017006 <__gethex+0x1ea>
 8017250:	f04f 0801 	mov.w	r8, #1
 8017254:	e7c2      	b.n	80171dc <__gethex+0x3c0>
 8017256:	f015 051f 	ands.w	r5, r5, #31
 801725a:	d0f9      	beq.n	8017250 <__gethex+0x434>
 801725c:	9b01      	ldr	r3, [sp, #4]
 801725e:	441a      	add	r2, r3
 8017260:	f1c5 0520 	rsb	r5, r5, #32
 8017264:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017268:	f7fd ff0e 	bl	8015088 <__hi0bits>
 801726c:	42a8      	cmp	r0, r5
 801726e:	dbe6      	blt.n	801723e <__gethex+0x422>
 8017270:	e7ee      	b.n	8017250 <__gethex+0x434>
 8017272:	bf00      	nop
 8017274:	08018841 	.word	0x08018841

08017278 <L_shift>:
 8017278:	f1c2 0208 	rsb	r2, r2, #8
 801727c:	0092      	lsls	r2, r2, #2
 801727e:	b570      	push	{r4, r5, r6, lr}
 8017280:	f1c2 0620 	rsb	r6, r2, #32
 8017284:	6843      	ldr	r3, [r0, #4]
 8017286:	6804      	ldr	r4, [r0, #0]
 8017288:	fa03 f506 	lsl.w	r5, r3, r6
 801728c:	432c      	orrs	r4, r5
 801728e:	40d3      	lsrs	r3, r2
 8017290:	6004      	str	r4, [r0, #0]
 8017292:	f840 3f04 	str.w	r3, [r0, #4]!
 8017296:	4288      	cmp	r0, r1
 8017298:	d3f4      	bcc.n	8017284 <L_shift+0xc>
 801729a:	bd70      	pop	{r4, r5, r6, pc}

0801729c <__match>:
 801729c:	b530      	push	{r4, r5, lr}
 801729e:	6803      	ldr	r3, [r0, #0]
 80172a0:	3301      	adds	r3, #1
 80172a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172a6:	b914      	cbnz	r4, 80172ae <__match+0x12>
 80172a8:	6003      	str	r3, [r0, #0]
 80172aa:	2001      	movs	r0, #1
 80172ac:	bd30      	pop	{r4, r5, pc}
 80172ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80172b6:	2d19      	cmp	r5, #25
 80172b8:	bf98      	it	ls
 80172ba:	3220      	addls	r2, #32
 80172bc:	42a2      	cmp	r2, r4
 80172be:	d0f0      	beq.n	80172a2 <__match+0x6>
 80172c0:	2000      	movs	r0, #0
 80172c2:	e7f3      	b.n	80172ac <__match+0x10>

080172c4 <__hexnan>:
 80172c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c8:	680b      	ldr	r3, [r1, #0]
 80172ca:	6801      	ldr	r1, [r0, #0]
 80172cc:	115e      	asrs	r6, r3, #5
 80172ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80172d2:	f013 031f 	ands.w	r3, r3, #31
 80172d6:	b087      	sub	sp, #28
 80172d8:	bf18      	it	ne
 80172da:	3604      	addne	r6, #4
 80172dc:	2500      	movs	r5, #0
 80172de:	1f37      	subs	r7, r6, #4
 80172e0:	4682      	mov	sl, r0
 80172e2:	4690      	mov	r8, r2
 80172e4:	9301      	str	r3, [sp, #4]
 80172e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80172ea:	46b9      	mov	r9, r7
 80172ec:	463c      	mov	r4, r7
 80172ee:	9502      	str	r5, [sp, #8]
 80172f0:	46ab      	mov	fp, r5
 80172f2:	784a      	ldrb	r2, [r1, #1]
 80172f4:	1c4b      	adds	r3, r1, #1
 80172f6:	9303      	str	r3, [sp, #12]
 80172f8:	b342      	cbz	r2, 801734c <__hexnan+0x88>
 80172fa:	4610      	mov	r0, r2
 80172fc:	9105      	str	r1, [sp, #20]
 80172fe:	9204      	str	r2, [sp, #16]
 8017300:	f7ff fd76 	bl	8016df0 <__hexdig_fun>
 8017304:	2800      	cmp	r0, #0
 8017306:	d14f      	bne.n	80173a8 <__hexnan+0xe4>
 8017308:	9a04      	ldr	r2, [sp, #16]
 801730a:	9905      	ldr	r1, [sp, #20]
 801730c:	2a20      	cmp	r2, #32
 801730e:	d818      	bhi.n	8017342 <__hexnan+0x7e>
 8017310:	9b02      	ldr	r3, [sp, #8]
 8017312:	459b      	cmp	fp, r3
 8017314:	dd13      	ble.n	801733e <__hexnan+0x7a>
 8017316:	454c      	cmp	r4, r9
 8017318:	d206      	bcs.n	8017328 <__hexnan+0x64>
 801731a:	2d07      	cmp	r5, #7
 801731c:	dc04      	bgt.n	8017328 <__hexnan+0x64>
 801731e:	462a      	mov	r2, r5
 8017320:	4649      	mov	r1, r9
 8017322:	4620      	mov	r0, r4
 8017324:	f7ff ffa8 	bl	8017278 <L_shift>
 8017328:	4544      	cmp	r4, r8
 801732a:	d950      	bls.n	80173ce <__hexnan+0x10a>
 801732c:	2300      	movs	r3, #0
 801732e:	f1a4 0904 	sub.w	r9, r4, #4
 8017332:	f844 3c04 	str.w	r3, [r4, #-4]
 8017336:	f8cd b008 	str.w	fp, [sp, #8]
 801733a:	464c      	mov	r4, r9
 801733c:	461d      	mov	r5, r3
 801733e:	9903      	ldr	r1, [sp, #12]
 8017340:	e7d7      	b.n	80172f2 <__hexnan+0x2e>
 8017342:	2a29      	cmp	r2, #41	; 0x29
 8017344:	d155      	bne.n	80173f2 <__hexnan+0x12e>
 8017346:	3102      	adds	r1, #2
 8017348:	f8ca 1000 	str.w	r1, [sl]
 801734c:	f1bb 0f00 	cmp.w	fp, #0
 8017350:	d04f      	beq.n	80173f2 <__hexnan+0x12e>
 8017352:	454c      	cmp	r4, r9
 8017354:	d206      	bcs.n	8017364 <__hexnan+0xa0>
 8017356:	2d07      	cmp	r5, #7
 8017358:	dc04      	bgt.n	8017364 <__hexnan+0xa0>
 801735a:	462a      	mov	r2, r5
 801735c:	4649      	mov	r1, r9
 801735e:	4620      	mov	r0, r4
 8017360:	f7ff ff8a 	bl	8017278 <L_shift>
 8017364:	4544      	cmp	r4, r8
 8017366:	d934      	bls.n	80173d2 <__hexnan+0x10e>
 8017368:	f1a8 0204 	sub.w	r2, r8, #4
 801736c:	4623      	mov	r3, r4
 801736e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017372:	f842 1f04 	str.w	r1, [r2, #4]!
 8017376:	429f      	cmp	r7, r3
 8017378:	d2f9      	bcs.n	801736e <__hexnan+0xaa>
 801737a:	1b3b      	subs	r3, r7, r4
 801737c:	f023 0303 	bic.w	r3, r3, #3
 8017380:	3304      	adds	r3, #4
 8017382:	3e03      	subs	r6, #3
 8017384:	3401      	adds	r4, #1
 8017386:	42a6      	cmp	r6, r4
 8017388:	bf38      	it	cc
 801738a:	2304      	movcc	r3, #4
 801738c:	4443      	add	r3, r8
 801738e:	2200      	movs	r2, #0
 8017390:	f843 2b04 	str.w	r2, [r3], #4
 8017394:	429f      	cmp	r7, r3
 8017396:	d2fb      	bcs.n	8017390 <__hexnan+0xcc>
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	b91b      	cbnz	r3, 80173a4 <__hexnan+0xe0>
 801739c:	4547      	cmp	r7, r8
 801739e:	d126      	bne.n	80173ee <__hexnan+0x12a>
 80173a0:	2301      	movs	r3, #1
 80173a2:	603b      	str	r3, [r7, #0]
 80173a4:	2005      	movs	r0, #5
 80173a6:	e025      	b.n	80173f4 <__hexnan+0x130>
 80173a8:	3501      	adds	r5, #1
 80173aa:	2d08      	cmp	r5, #8
 80173ac:	f10b 0b01 	add.w	fp, fp, #1
 80173b0:	dd06      	ble.n	80173c0 <__hexnan+0xfc>
 80173b2:	4544      	cmp	r4, r8
 80173b4:	d9c3      	bls.n	801733e <__hexnan+0x7a>
 80173b6:	2300      	movs	r3, #0
 80173b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80173bc:	2501      	movs	r5, #1
 80173be:	3c04      	subs	r4, #4
 80173c0:	6822      	ldr	r2, [r4, #0]
 80173c2:	f000 000f 	and.w	r0, r0, #15
 80173c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80173ca:	6020      	str	r0, [r4, #0]
 80173cc:	e7b7      	b.n	801733e <__hexnan+0x7a>
 80173ce:	2508      	movs	r5, #8
 80173d0:	e7b5      	b.n	801733e <__hexnan+0x7a>
 80173d2:	9b01      	ldr	r3, [sp, #4]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d0df      	beq.n	8017398 <__hexnan+0xd4>
 80173d8:	f1c3 0320 	rsb	r3, r3, #32
 80173dc:	f04f 32ff 	mov.w	r2, #4294967295
 80173e0:	40da      	lsrs	r2, r3
 80173e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80173e6:	4013      	ands	r3, r2
 80173e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80173ec:	e7d4      	b.n	8017398 <__hexnan+0xd4>
 80173ee:	3f04      	subs	r7, #4
 80173f0:	e7d2      	b.n	8017398 <__hexnan+0xd4>
 80173f2:	2004      	movs	r0, #4
 80173f4:	b007      	add	sp, #28
 80173f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080173fa <__ascii_mbtowc>:
 80173fa:	b082      	sub	sp, #8
 80173fc:	b901      	cbnz	r1, 8017400 <__ascii_mbtowc+0x6>
 80173fe:	a901      	add	r1, sp, #4
 8017400:	b142      	cbz	r2, 8017414 <__ascii_mbtowc+0x1a>
 8017402:	b14b      	cbz	r3, 8017418 <__ascii_mbtowc+0x1e>
 8017404:	7813      	ldrb	r3, [r2, #0]
 8017406:	600b      	str	r3, [r1, #0]
 8017408:	7812      	ldrb	r2, [r2, #0]
 801740a:	1e10      	subs	r0, r2, #0
 801740c:	bf18      	it	ne
 801740e:	2001      	movne	r0, #1
 8017410:	b002      	add	sp, #8
 8017412:	4770      	bx	lr
 8017414:	4610      	mov	r0, r2
 8017416:	e7fb      	b.n	8017410 <__ascii_mbtowc+0x16>
 8017418:	f06f 0001 	mvn.w	r0, #1
 801741c:	e7f8      	b.n	8017410 <__ascii_mbtowc+0x16>

0801741e <_realloc_r>:
 801741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017422:	4680      	mov	r8, r0
 8017424:	4614      	mov	r4, r2
 8017426:	460e      	mov	r6, r1
 8017428:	b921      	cbnz	r1, 8017434 <_realloc_r+0x16>
 801742a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801742e:	4611      	mov	r1, r2
 8017430:	f7fb bd14 	b.w	8012e5c <_malloc_r>
 8017434:	b92a      	cbnz	r2, 8017442 <_realloc_r+0x24>
 8017436:	f7fd fce9 	bl	8014e0c <_free_r>
 801743a:	4625      	mov	r5, r4
 801743c:	4628      	mov	r0, r5
 801743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017442:	f000 f8ad 	bl	80175a0 <_malloc_usable_size_r>
 8017446:	4284      	cmp	r4, r0
 8017448:	4607      	mov	r7, r0
 801744a:	d802      	bhi.n	8017452 <_realloc_r+0x34>
 801744c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017450:	d812      	bhi.n	8017478 <_realloc_r+0x5a>
 8017452:	4621      	mov	r1, r4
 8017454:	4640      	mov	r0, r8
 8017456:	f7fb fd01 	bl	8012e5c <_malloc_r>
 801745a:	4605      	mov	r5, r0
 801745c:	2800      	cmp	r0, #0
 801745e:	d0ed      	beq.n	801743c <_realloc_r+0x1e>
 8017460:	42bc      	cmp	r4, r7
 8017462:	4622      	mov	r2, r4
 8017464:	4631      	mov	r1, r6
 8017466:	bf28      	it	cs
 8017468:	463a      	movcs	r2, r7
 801746a:	f7fc fe40 	bl	80140ee <memcpy>
 801746e:	4631      	mov	r1, r6
 8017470:	4640      	mov	r0, r8
 8017472:	f7fd fccb 	bl	8014e0c <_free_r>
 8017476:	e7e1      	b.n	801743c <_realloc_r+0x1e>
 8017478:	4635      	mov	r5, r6
 801747a:	e7df      	b.n	801743c <_realloc_r+0x1e>

0801747c <__ascii_wctomb>:
 801747c:	b149      	cbz	r1, 8017492 <__ascii_wctomb+0x16>
 801747e:	2aff      	cmp	r2, #255	; 0xff
 8017480:	bf85      	ittet	hi
 8017482:	238a      	movhi	r3, #138	; 0x8a
 8017484:	6003      	strhi	r3, [r0, #0]
 8017486:	700a      	strbls	r2, [r1, #0]
 8017488:	f04f 30ff 	movhi.w	r0, #4294967295
 801748c:	bf98      	it	ls
 801748e:	2001      	movls	r0, #1
 8017490:	4770      	bx	lr
 8017492:	4608      	mov	r0, r1
 8017494:	4770      	bx	lr

08017496 <__swhatbuf_r>:
 8017496:	b570      	push	{r4, r5, r6, lr}
 8017498:	460c      	mov	r4, r1
 801749a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801749e:	2900      	cmp	r1, #0
 80174a0:	b096      	sub	sp, #88	; 0x58
 80174a2:	4615      	mov	r5, r2
 80174a4:	461e      	mov	r6, r3
 80174a6:	da0d      	bge.n	80174c4 <__swhatbuf_r+0x2e>
 80174a8:	89a3      	ldrh	r3, [r4, #12]
 80174aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80174ae:	f04f 0100 	mov.w	r1, #0
 80174b2:	bf0c      	ite	eq
 80174b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80174b8:	2340      	movne	r3, #64	; 0x40
 80174ba:	2000      	movs	r0, #0
 80174bc:	6031      	str	r1, [r6, #0]
 80174be:	602b      	str	r3, [r5, #0]
 80174c0:	b016      	add	sp, #88	; 0x58
 80174c2:	bd70      	pop	{r4, r5, r6, pc}
 80174c4:	466a      	mov	r2, sp
 80174c6:	f000 f849 	bl	801755c <_fstat_r>
 80174ca:	2800      	cmp	r0, #0
 80174cc:	dbec      	blt.n	80174a8 <__swhatbuf_r+0x12>
 80174ce:	9901      	ldr	r1, [sp, #4]
 80174d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80174d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80174d8:	4259      	negs	r1, r3
 80174da:	4159      	adcs	r1, r3
 80174dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80174e0:	e7eb      	b.n	80174ba <__swhatbuf_r+0x24>

080174e2 <__smakebuf_r>:
 80174e2:	898b      	ldrh	r3, [r1, #12]
 80174e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174e6:	079d      	lsls	r5, r3, #30
 80174e8:	4606      	mov	r6, r0
 80174ea:	460c      	mov	r4, r1
 80174ec:	d507      	bpl.n	80174fe <__smakebuf_r+0x1c>
 80174ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80174f2:	6023      	str	r3, [r4, #0]
 80174f4:	6123      	str	r3, [r4, #16]
 80174f6:	2301      	movs	r3, #1
 80174f8:	6163      	str	r3, [r4, #20]
 80174fa:	b002      	add	sp, #8
 80174fc:	bd70      	pop	{r4, r5, r6, pc}
 80174fe:	ab01      	add	r3, sp, #4
 8017500:	466a      	mov	r2, sp
 8017502:	f7ff ffc8 	bl	8017496 <__swhatbuf_r>
 8017506:	9900      	ldr	r1, [sp, #0]
 8017508:	4605      	mov	r5, r0
 801750a:	4630      	mov	r0, r6
 801750c:	f7fb fca6 	bl	8012e5c <_malloc_r>
 8017510:	b948      	cbnz	r0, 8017526 <__smakebuf_r+0x44>
 8017512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017516:	059a      	lsls	r2, r3, #22
 8017518:	d4ef      	bmi.n	80174fa <__smakebuf_r+0x18>
 801751a:	f023 0303 	bic.w	r3, r3, #3
 801751e:	f043 0302 	orr.w	r3, r3, #2
 8017522:	81a3      	strh	r3, [r4, #12]
 8017524:	e7e3      	b.n	80174ee <__smakebuf_r+0xc>
 8017526:	89a3      	ldrh	r3, [r4, #12]
 8017528:	6020      	str	r0, [r4, #0]
 801752a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801752e:	81a3      	strh	r3, [r4, #12]
 8017530:	9b00      	ldr	r3, [sp, #0]
 8017532:	6163      	str	r3, [r4, #20]
 8017534:	9b01      	ldr	r3, [sp, #4]
 8017536:	6120      	str	r0, [r4, #16]
 8017538:	b15b      	cbz	r3, 8017552 <__smakebuf_r+0x70>
 801753a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801753e:	4630      	mov	r0, r6
 8017540:	f000 f81e 	bl	8017580 <_isatty_r>
 8017544:	b128      	cbz	r0, 8017552 <__smakebuf_r+0x70>
 8017546:	89a3      	ldrh	r3, [r4, #12]
 8017548:	f023 0303 	bic.w	r3, r3, #3
 801754c:	f043 0301 	orr.w	r3, r3, #1
 8017550:	81a3      	strh	r3, [r4, #12]
 8017552:	89a3      	ldrh	r3, [r4, #12]
 8017554:	431d      	orrs	r5, r3
 8017556:	81a5      	strh	r5, [r4, #12]
 8017558:	e7cf      	b.n	80174fa <__smakebuf_r+0x18>
	...

0801755c <_fstat_r>:
 801755c:	b538      	push	{r3, r4, r5, lr}
 801755e:	4d07      	ldr	r5, [pc, #28]	; (801757c <_fstat_r+0x20>)
 8017560:	2300      	movs	r3, #0
 8017562:	4604      	mov	r4, r0
 8017564:	4608      	mov	r0, r1
 8017566:	4611      	mov	r1, r2
 8017568:	602b      	str	r3, [r5, #0]
 801756a:	f7f1 ff92 	bl	8009492 <_fstat>
 801756e:	1c43      	adds	r3, r0, #1
 8017570:	d102      	bne.n	8017578 <_fstat_r+0x1c>
 8017572:	682b      	ldr	r3, [r5, #0]
 8017574:	b103      	cbz	r3, 8017578 <_fstat_r+0x1c>
 8017576:	6023      	str	r3, [r4, #0]
 8017578:	bd38      	pop	{r3, r4, r5, pc}
 801757a:	bf00      	nop
 801757c:	20000ad4 	.word	0x20000ad4

08017580 <_isatty_r>:
 8017580:	b538      	push	{r3, r4, r5, lr}
 8017582:	4d06      	ldr	r5, [pc, #24]	; (801759c <_isatty_r+0x1c>)
 8017584:	2300      	movs	r3, #0
 8017586:	4604      	mov	r4, r0
 8017588:	4608      	mov	r0, r1
 801758a:	602b      	str	r3, [r5, #0]
 801758c:	f7f1 ff91 	bl	80094b2 <_isatty>
 8017590:	1c43      	adds	r3, r0, #1
 8017592:	d102      	bne.n	801759a <_isatty_r+0x1a>
 8017594:	682b      	ldr	r3, [r5, #0]
 8017596:	b103      	cbz	r3, 801759a <_isatty_r+0x1a>
 8017598:	6023      	str	r3, [r4, #0]
 801759a:	bd38      	pop	{r3, r4, r5, pc}
 801759c:	20000ad4 	.word	0x20000ad4

080175a0 <_malloc_usable_size_r>:
 80175a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175a4:	1f18      	subs	r0, r3, #4
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	bfbc      	itt	lt
 80175aa:	580b      	ldrlt	r3, [r1, r0]
 80175ac:	18c0      	addlt	r0, r0, r3
 80175ae:	4770      	bx	lr

080175b0 <_init>:
 80175b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b2:	bf00      	nop
 80175b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175b6:	bc08      	pop	{r3}
 80175b8:	469e      	mov	lr, r3
 80175ba:	4770      	bx	lr

080175bc <_fini>:
 80175bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175be:	bf00      	nop
 80175c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175c2:	bc08      	pop	{r3}
 80175c4:	469e      	mov	lr, r3
 80175c6:	4770      	bx	lr
