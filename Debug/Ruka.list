
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  080177d0  080177d0  000277d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d84  08018d84  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  08018d84  08018d84  00028d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d8c  08018d8c  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08018d8c  08018d8c  00028d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08018d9c  08018d9c  00028d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08018dac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000248  08018ff0  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08018ff0  00030ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047a1f  00000000  00000000  000302b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000087d7  00000000  00000000  00077cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029b8  00000000  00000000  000804b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020b2  00000000  00000000  00082e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b26  00000000  00000000  00084f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037397  00000000  00000000  000b6a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001297ba  00000000  00000000  000eddd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cad4  00000000  00000000  00217594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00224068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000248 	.word	0x20000248
 80001fc:	00000000 	.word	0x00000000
 8000200:	080177b8 	.word	0x080177b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000024c 	.word	0x2000024c
 800021c:	080177b8 	.word	0x080177b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	080181fc 	.word	0x080181fc

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	080181fc 	.word	0x080181fc

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f011 ff5e 	bl	8012f52 <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	609a      	str	r2, [r3, #8]
  _address = address;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	715a      	strb	r2, [r3, #5]
}
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	080181e0 	.word	0x080181e0

080010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa5c 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f013 f80c 	bl	801412a <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
 8001116:	8bfb      	ldrh	r3, [r7, #30]
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2306      	movs	r3, #6
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 fa05 	bl	8001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	b21a      	sxth	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001148:	7e3b      	ldrb	r3, [r7, #24]
 800114a:	b21a      	sxth	r2, r3
 800114c:	7e7b      	ldrb	r3, [r7, #25]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b08      	subs	r3, #8
 800115a:	2b26      	cmp	r3, #38	; 0x26
 800115c:	f200 8152 	bhi.w	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001385 	.word	0x08001385
 800116c:	08001405 	.word	0x08001405
 8001170:	08001405 	.word	0x08001405
 8001174:	08001405 	.word	0x08001405
 8001178:	08001405 	.word	0x08001405
 800117c:	08001405 	.word	0x08001405
 8001180:	08001205 	.word	0x08001205
 8001184:	08001405 	.word	0x08001405
 8001188:	08001405 	.word	0x08001405
 800118c:	08001405 	.word	0x08001405
 8001190:	08001405 	.word	0x08001405
 8001194:	08001405 	.word	0x08001405
 8001198:	08001285 	.word	0x08001285
 800119c:	08001405 	.word	0x08001405
 80011a0:	08001405 	.word	0x08001405
 80011a4:	08001405 	.word	0x08001405
 80011a8:	08001405 	.word	0x08001405
 80011ac:	08001405 	.word	0x08001405
 80011b0:	08001305 	.word	0x08001305
 80011b4:	08001405 	.word	0x08001405
 80011b8:	08001405 	.word	0x08001405
 80011bc:	08001405 	.word	0x08001405
 80011c0:	08001405 	.word	0x08001405
 80011c4:	08001405 	.word	0x08001405
 80011c8:	08001405 	.word	0x08001405
 80011cc:	08001405 	.word	0x08001405
 80011d0:	08001405 	.word	0x08001405
 80011d4:	08001405 	.word	0x08001405
 80011d8:	08001405 	.word	0x08001405
 80011dc:	08001405 	.word	0x08001405
 80011e0:	08001405 	.word	0x08001405
 80011e4:	08001405 	.word	0x08001405
 80011e8:	08001385 	.word	0x08001385
 80011ec:	08001405 	.word	0x08001405
 80011f0:	08001405 	.word	0x08001405
 80011f4:	08001405 	.word	0x08001405
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001405 	.word	0x08001405
 8001200:	08001385 	.word	0x08001385
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b3 	bl	8000574 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	2100      	movs	r1, #0
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9d9 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001228:	4603      	mov	r3, r0
 800122a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800122e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f99e 	bl	8000574 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800123e:	f7ff fb2d 	bl	800089c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	2101      	movs	r1, #1
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9c4 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001252:	4603      	mov	r3, r0
 8001254:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 8001258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f989 	bl	8000574 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001268:	f7ff fb18 	bl	800089c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	2102      	movs	r1, #2
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9af 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800127c:	4603      	mov	r3, r0
 800127e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001282:	e0bf      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f973 	bl	8000574 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f999 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f95e 	bl	8000574 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f984 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f949 	bl	8000574 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f96f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001302:	e07f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f933 	bl	8000574 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001314:	f7ff fac2 	bl	800089c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f959 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001328:	4603      	mov	r3, r0
 800132a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800132e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f91e 	bl	8000574 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	2101      	movs	r1, #1
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f944 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001352:	4603      	mov	r3, r0
 8001354:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f909 	bl	8000574 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001368:	f7ff fa98 	bl	800089c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	2102      	movs	r1, #2
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f92f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800137c:	4603      	mov	r3, r0
 800137e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001382:	e03f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001384:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f3 	bl	8000574 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001394:	f7ff fa82 	bl	800089c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f919 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8de 	bl	8000574 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f904 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c9 	bl	8000574 <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	2102      	movs	r1, #2
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f8ef 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001402:	bf00      	nop
  }

  return xyz;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	40300000 	.word	0x40300000
 8001414:	408c2000 	.word	0x408c2000
 8001418:	40590000 	.word	0x40590000

0800141c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f012 fe7d 	bl	801412a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220b      	movs	r2, #11
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001436:	4618      	mov	r0, r3
 8001438:	f012 fe7f 	bl	801413a <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2203      	movs	r2, #3
 8001454:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001470:	621a      	str	r2, [r3, #32]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	080177d0 	.word	0x080177d0
 8001480:	3c23d70a 	.word	0x3c23d70a

08001484 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f012 fe49 	bl	801412a <memset>

  event->version   = sizeof(sensors_event_t);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2203      	movs	r2, #3
 80014aa:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014ac:	f008 ff2e 	bl	800a30c <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	221a      	movs	r2, #26
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe15 	bl	80010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f853 	bl	8001576 <_ZN3imu6VectorILh3EE1xEv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84f 	bl	800158c <_ZN3imu6VectorILh3EE1yEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb9e 	bl	8000c38 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84c 	bl	80015a4 <_ZN3imu6VectorILh3EE1zEv>
 800150c:	4603      	mov	r3, r0
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb8f 	bl	8000c38 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61da      	str	r2, [r3, #28]

  return true;
 8001520:	2401      	movs	r4, #1
}
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81a 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800152c:	4623      	mov	r3, r4
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800154a:	7aba      	ldrb	r2, [r7, #10]
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f89b 	bl	800168c <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    {
    }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3310      	adds	r3, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2218      	movs	r2, #24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f012 fdad 	bl	801412a <memset>
    }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd29 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	080181e0 	.word	0x080181e0

0800161c <_ZN15Adafruit_BNO055D0Ev>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
 800162a:	2110      	movs	r1, #16
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f011 fc90 	bl	8012f52 <_ZdlPvj>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN3imu10QuaternionC1Ev+0x4c>)
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016b4:	f00a f8c6 	bl	800b844 <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016bc:	bf00      	nop
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016c0:	f00a fa8f 	bl	800bbe2 <HAL_I2C_GetState>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f4      	bne.n	80016be <I2C_n_byte_receive+0x32>

  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000314 	.word	0x20000314

080016e4 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016fe:	2229      	movs	r2, #41	; 0x29
 8001700:	2137      	movs	r1, #55	; 0x37
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001704:	f7ff fcd8 	bl	80010b8 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800170a:	f7ff ff97 	bl	800163c <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001710:	f7ff ff54 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	4293      	cmp	r3, r2
 8001722:	d105      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001726:	f7ff ff1b 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800172c:	f7ff ff64 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000264 	.word	0x20000264
 800173c:	20000278 	.word	0x20000278
 8001740:	20000298 	.word	0x20000298

08001744 <_GLOBAL__sub_I_bno>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffc9 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <_GLOBAL__sub_D_bno>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffc1 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_DMA_Init+0x60>)
 800176c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_DMA_Init+0x60>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6493      	str	r3, [r2, #72]	; 0x48
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_DMA_Init+0x60>)
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_DMA_Init+0x60>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_DMA_Init+0x60>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6493      	str	r3, [r2, #72]	; 0x48
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_DMA_Init+0x60>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200b      	movs	r0, #11
 80017a0:	f008 febd 	bl	800a51e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f008 fed4 	bl	800a552 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200c      	movs	r0, #12
 80017b0:	f008 feb5 	bl	800a51e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b4:	200c      	movs	r0, #12
 80017b6:	f008 fecc 	bl	800a552 <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_FDCAN1_Init+0x8c>)
 80017d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001800:	2201      	movs	r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001806:	221d      	movs	r2, #29
 8001808:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800180c:	220a      	movs	r2, #10
 800180e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001812:	2204      	movs	r2, #4
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001818:	2201      	movs	r2, #1
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800181e:	2202      	movs	r2, #2
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001824:	2202      	movs	r2, #2
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001830:	2203      	movs	r2, #3
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800183c:	f009 f92c 	bl	800aa98 <HAL_FDCAN_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001846:	f000 fb6a 	bl	8001f1e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002b0 	.word	0x200002b0
 8001854:	40006400 	.word	0x40006400

08001858 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f012 fc56 	bl	801412a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_FDCAN_MspInit+0xac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d138      	bne.n	80018fa <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f00b ffbb 	bl	800d814 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018a4:	f000 fb3b 	bl	8001f1e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018ea:	2309      	movs	r3, #9
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_FDCAN_MspInit+0xb4>)
 80018f6:	f009 fd55 	bl	800b3a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	; 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40006400 	.word	0x40006400
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <MX_GPIO_Init+0x140>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <MX_GPIO_Init+0x140>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <MX_GPIO_Init+0x140>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <MX_GPIO_Init+0x140>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <MX_GPIO_Init+0x140>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 800199e:	2200      	movs	r2, #0
 80019a0:	f649 3110 	movw	r1, #39696	; 0x9b10
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f009 fe7e 	bl	800b6a8 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019b2:	f009 fe79 	bl	800b6a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4827      	ldr	r0, [pc, #156]	; (8001a58 <MX_GPIO_Init+0x148>)
 80019bc:	f009 fe74 	bl	800b6a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c4:	2303      	movs	r3, #3
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4820      	ldr	r0, [pc, #128]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019d4:	f009 fce6 	bl	800b3a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 80019d8:	230c      	movs	r3, #12
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019ec:	f009 fcda 	bl	800b3a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 80019f0:	f649 3310 	movw	r3, #39696	; 0x9b10
 80019f4:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f009 fcca 	bl	800b3a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001a10:	2320      	movs	r3, #32
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <MX_GPIO_Init+0x144>)
 8001a28:	f009 fcbc 	bl	800b3a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_GPIO_Init+0x148>)
 8001a44:	f009 fcae 	bl	800b3a4 <HAL_GPIO_Init>

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00

08001a5c <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C4_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C4_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a98:	f009 fe38 	bl	800b70c <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 fa3c 	bl	8001f1e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001aaa:	f00b f839 	bl	800cb20 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 fa33 	bl	8001f1e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001abc:	f00b f87b 	bl	800cbb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 fa2a 	bl	8001f1e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000314 	.word	0x20000314
 8001ad4:	40008400 	.word	0x40008400
 8001ad8:	00702991 	.word	0x00702991

08001adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a0      	sub	sp, #128	; 0x80
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f012 fb14 	bl	801412a <memset>
  if(i2cHandle->Instance==I2C4)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_I2C_MspInit+0x1a4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f040 80b5 	bne.w	8001c78 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00b fe79 	bl	800d814 <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b28:	f000 f9f9 	bl	8001f1e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4844      	ldr	r0, [pc, #272]	; (8001c88 <HAL_I2C_MspInit+0x1ac>)
 8001b78:	f009 fc14 	bl	800b3a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b94:	4619      	mov	r1, r3
 8001b96:	483d      	ldr	r0, [pc, #244]	; (8001c8c <HAL_I2C_MspInit+0x1b0>)
 8001b98:	f009 fc04 	bl	800b3a4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_I2C_MspInit+0x1b8>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001bea:	4829      	ldr	r0, [pc, #164]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bec:	f008 fccc 	bl	800a588 <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001bf6:	f000 f992 	bl	8001f1e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_I2C_MspInit+0x1c0>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c0e:	2217      	movs	r2, #23
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c14:	2210      	movs	r2, #16
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001c3c:	4816      	ldr	r0, [pc, #88]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c3e:	f008 fca3 	bl	800a588 <HAL_DMA_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001c48:	f000 f969 	bl	8001f1e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2052      	movs	r0, #82	; 0x52
 8001c5e:	f008 fc5e 	bl	800a51e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001c62:	2052      	movs	r0, #82	; 0x52
 8001c64:	f008 fc75 	bl	800a552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2053      	movs	r0, #83	; 0x53
 8001c6e:	f008 fc56 	bl	800a51e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001c72:	2053      	movs	r0, #83	; 0x53
 8001c74:	f008 fc6d 	bl	800a552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3780      	adds	r7, #128	; 0x80
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40008400 	.word	0x40008400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	20000368 	.word	0x20000368
 8001c94:	40020008 	.word	0x40020008
 8001c98:	200003c8 	.word	0x200003c8
 8001c9c:	4002001c 	.word	0x4002001c

08001ca0 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	{
		mc->motor_type = 17;
	}
	else if (JOINT_N == 4)
	{
		mc->motor_type = 14;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	220e      	movs	r2, #14
 8001cae:	701a      	strb	r2, [r3, #0]
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
	}

	switch(mc->motor_type)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb6:	2b17      	cmp	r3, #23
 8001cb8:	d019      	beq.n	8001cee <motor_config_assembler+0x4e>
 8001cba:	2b17      	cmp	r3, #23
 8001cbc:	dc20      	bgt.n	8001d00 <motor_config_assembler+0x60>
 8001cbe:	2b0e      	cmp	r3, #14
 8001cc0:	d002      	beq.n	8001cc8 <motor_config_assembler+0x28>
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d00a      	beq.n	8001cdc <motor_config_assembler+0x3c>
 8001cc6:	e01b      	b.n	8001d00 <motor_config_assembler+0x60>
	{
	case 14:
		mc->max_irun_scaler = 8;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001cd4:	605a      	str	r2, [r3, #4]
		mc->init_irun = 0;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	725a      	strb	r2, [r3, #9]
	case 17:
		mc->max_irun_scaler = 12;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	220c      	movs	r2, #12
 8001ce0:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <motor_config_assembler+0x78>)
 8001ce6:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	725a      	strb	r2, [r3, #9]
	case 23:
		mc->max_irun_scaler = 31;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <motor_config_assembler+0x7c>)
 8001cf8:	605a      	str	r2, [r3, #4]
		mc->init_irun = 4;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	725a      	strb	r2, [r3, #9]
	}
	mc->direction = jc->direction;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	729a      	strb	r2, [r3, #10]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	4079999a 	.word	0x4079999a
 8001d1c:	41233333 	.word	0x41233333

08001d20 <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
		jconf->direction = 1;
	}
	else if (JOINT_N == 4)
	{
		jconf->motor_gear_ratio = 19.203208;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <joint_config_assembler+0x84>)
 8001d2c:	611a      	str	r2, [r3, #16]
		jconf->joint_gear_ratio = 2.5;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <joint_config_assembler+0x88>)
 8001d32:	60da      	str	r2, [r3, #12]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d3a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001dac <joint_config_assembler+0x8c>
 8001d3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d50:	ee17 2a90 	vmov	r2, s15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
		jconf->direction = 1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	711a      	strb	r2, [r3, #4]
		jconf->joint_gear_ratio = 1;
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
		jconf->direction = -1;
	}

	jconf->domain_id = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
	jconf->lower_limit_enc = 0.0;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
	jconf->lower_limit_ticks = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
	jconf->motor_type = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	70da      	strb	r2, [r3, #3]
	jconf->upper_limit_enc = 0.0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_ticks = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
	jconf->zero_enc = 0.0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
	jconf->upper_limit_effort = 0.0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
//
//
//#define NEMA14_GR 19 //TODO possible to correct ratio to 19.38/187 for more precise velocity calculation
//#define NEMA17_GR 50
//#define NEMA23_GR 50
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	4199a02c 	.word	0x4199a02c
 8001da8:	40200000 	.word	0x40200000
 8001dac:	47480000 	.word	0x47480000

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b094      	sub	sp, #80	; 0x50
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db6:	f008 fa44 	bl	800a242 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dba:	f000 f865 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dbe:	f7ff fda7 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc2:	f7ff fccf 	bl	8001764 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001dc6:	f7ff fcff 	bl	80017c8 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001dca:	f7ff fe47 	bl	8001a5c <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001dce:	f008 f8d3 	bl	8009f78 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001dd2:	f007 fa03 	bl	80091dc <MX_SPI1_Init>
  MX_SPI3_Init();
 8001dd6:	f007 fa3f 	bl	8009258 <MX_SPI3_Init>
  MX_TIM8_Init();
 8001dda:	f007 fc5b 	bl	8009694 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8001dde:	4827      	ldr	r0, [pc, #156]	; (8001e7c <main+0xcc>)
 8001de0:	f005 fa04 	bl	80071ec <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8001de4:	4825      	ldr	r0, [pc, #148]	; (8001e7c <main+0xcc>)
 8001de6:	f005 f95d 	bl	80070a4 <setup_cyphal>
  HAL_Delay(10);
 8001dea:	200a      	movs	r0, #10
 8001dec:	f008 fa9a 	bl	800a324 <HAL_Delay>
  joint_config_assembler(&jc);
 8001df0:	4823      	ldr	r0, [pc, #140]	; (8001e80 <main+0xd0>)
 8001df2:	f7ff ff95 	bl	8001d20 <joint_config_assembler>
  motor_config_assembler(&mc, &jc);
 8001df6:	4922      	ldr	r1, [pc, #136]	; (8001e80 <main+0xd0>)
 8001df8:	4822      	ldr	r0, [pc, #136]	; (8001e84 <main+0xd4>)
 8001dfa:	f7ff ff51 	bl	8001ca0 <motor_config_assembler>
  HAL_Delay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f008 fa90 	bl	800a324 <HAL_Delay>
  tmc5160_init(&mc);
 8001e04:	481f      	ldr	r0, [pc, #124]	; (8001e84 <main+0xd4>)
 8001e06:	f007 ff43 	bl	8009c90 <tmc5160_init>
  HAL_Delay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f008 fa8a 	bl	800a324 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	647b      	str	r3, [r7, #68]	; 0x44
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8001e14:	f008 fa7a 	bl	800a30c <HAL_GetTick>
 8001e18:	64f8      	str	r0, [r7, #76]	; 0x4c
  uint32_t last_js = HAL_GetTick();
 8001e1a:	f008 fa77 	bl	800a30c <HAL_GetTick>
 8001e1e:	64b8      	str	r0, [r7, #72]	; 0x48

  vec_4ax linear = {0};
 8001e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  //rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
  //IMU_setup();

  while (1)
  {
      uint32_t now = HAL_GetTick();
 8001e48:	f008 fa60 	bl	800a30c <HAL_GetTick>
 8001e4c:	6438      	str	r0, [r7, #64]	; 0x40
      if ( (now - last_hbeat) >= 1000) {
 8001e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d303      	bcc.n	8001e62 <main+0xb2>
          last_hbeat = now;
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
          heartbeat();
 8001e5e:	f005 f8f1 	bl	8007044 <heartbeat>
      	  //imu_get_gyro(&gyro);
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      if ( (now - last_js) >= 100) {
 8001e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b63      	cmp	r3, #99	; 0x63
 8001e6a:	d904      	bls.n	8001e76 <main+0xc6>
    	  last_js = now;
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
    	  send_JS(&jc);
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <main+0xd0>)
 8001e72:	f005 f8a5 	bl	8006fc0 <send_JS>
      }
      cyphal_loop();
 8001e76:	f005 f9ab 	bl	80071d0 <cyphal_loop>
  {
 8001e7a:	e7e5      	b.n	8001e48 <main+0x98>
 8001e7c:	200002b0 	.word	0x200002b0
 8001e80:	20000434 	.word	0x20000434
 8001e84:	20000428 	.word	0x20000428

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2238      	movs	r2, #56	; 0x38
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f012 f947 	bl	801412a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f00a fed0 	bl	800cc50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001ec6:	2328      	movs	r3, #40	; 0x28
 8001ec8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00a ff6c 	bl	800cdb8 <HAL_RCC_OscConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001ee6:	f000 f81a 	bl	8001f1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eea:	230f      	movs	r3, #15
 8001eec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2104      	movs	r1, #4
 8001f06:	4618      	mov	r0, r3
 8001f08:	f00b fa68 	bl	800d3dc <HAL_RCC_ClockConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f12:	f000 f804 	bl	8001f1e <Error_Handler>
  }
}
 8001f16:	bf00      	nop
 8001f18:	3750      	adds	r7, #80	; 0x50
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f22:	b672      	cpsid	i
}
 8001f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <Error_Handler+0x8>

08001f28 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d019      	beq.n	8001fb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3308      	adds	r3, #8
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
        }
    }
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	4798      	blx	r3
    }
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ffd4 	bl	8001fea <_ZNSt14_Function_baseD1Ev>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZNSt8functionIFvvEED1Ev>:
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ffc7 	bl	8001fea <_ZNSt14_Function_baseD1Ev>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f005 f99c 	bl	80073b4 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3310      	adds	r3, #16
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	f005 f9c1 	bl	800740a <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	080182cc 	.word	0x080182cc

080020c0 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <_Z7alloc_fP14CanardInstancej+0x40>)
 80020cc:	f005 f9c8 	bl	8007460 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80020dc:	2001      	movs	r0, #1
 80020de:	f010 ff7f 	bl	8012fe0 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <_Z7alloc_fP14CanardInstancej+0x40>)
 80020e4:	f005 f9cd 	bl	8007482 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80020e8:	4603      	mov	r3, r0
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	6814      	ldr	r4, [r2, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	47a0      	blx	r4
 80020f6:	4603      	mov	r3, r0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}
 8002100:	20000990 	.word	0x20000990

08002104 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <_Z6free_fP14CanardInstancePv+0x40>)
 8002110:	f005 f9a6 	bl	8007460 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002114:	4603      	mov	r3, r0
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8002120:	2001      	movs	r0, #1
 8002122:	f010 ff5d 	bl	8012fe0 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8002126:	4807      	ldr	r0, [pc, #28]	; (8002144 <_Z6free_fP14CanardInstancePv+0x40>)
 8002128:	f005 f9ab 	bl	8007482 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 800212c:	4603      	mov	r3, r0
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	3204      	adds	r2, #4
 8002132:	6814      	ldr	r4, [r2, #0]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	47a0      	blx	r4
 800213c:	bf00      	nop
}
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	20000990 	.word	0x20000990

08002148 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	330c      	adds	r3, #12
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f010 fc28 	bl	80129c8 <canardTxInit>
        utilities(utilities)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	08018490 	.word	0x08018490

0800218c <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	460b      	mov	r3, r1
 800219a:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	7afa      	ldrb	r2, [r7, #11]
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3308      	adds	r3, #8
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 f983 	bl	80074ba <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2248      	movs	r2, #72	; 0x48
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	f7ff ffb5 	bl	8002148 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0801846c 	.word	0x0801846c

080021f8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff42 	bl	8002094 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	08018350 	.word	0x08018350

08002224 <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	ed87 0a01 	vstr	s0, [r7, #4]
 800222e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002232:	eef0 7ae7 	vabs.f32	s15, s15
 8002236:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002268 <_ZSt8isfinitef+0x44>
 800223a:	eef4 7a47 	vcmp.f32	s15, s14
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002242:	bf8c      	ite	hi
 8002244:	2301      	movhi	r3, #1
 8002246:	2300      	movls	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	7f7fffff 	.word	0x7f7fffff

0800226c <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d201      	bcs.n	8002282 <nunavutChooseMin+0x16>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e000      	b.n	8002284 <nunavutChooseMin+0x18>
 8002282:	683b      	ldr	r3, [r7, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7ff ffe1 	bl	800226c <nunavutChooseMin>
 80022aa:	4602      	mov	r2, r0
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ffd9 	bl	800226c <nunavutChooseMin>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d145      	bne.n	8002368 <nunavutCopyBits+0xa4>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d140      	bne.n	8002368 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 80022ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8002300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002304:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002306:	f011 fef6 	bl	80140f6 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8002316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 808a 	beq.w	8002434 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8002320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002324:	4413      	add	r3, r2
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232c:	4413      	add	r3, r2
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8002330:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002334:	2201      	movs	r2, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234a:	43db      	mvns	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4013      	ands	r3, r2
 8002350:	b2da      	uxtb	r2, r3
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	7819      	ldrb	r1, [r3, #0]
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235a:	400b      	ands	r3, r1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b2da      	uxtb	r2, r3
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	701a      	strb	r2, [r3, #0]
        }
    }
 8002366:	e065      	b.n	8002434 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8002378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8002380:	e053      	b.n	800242a <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8002382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 800238c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8002396:	7dfa      	ldrb	r2, [r7, #23]
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	429a      	cmp	r2, r3
 800239c:	d901      	bls.n	80023a2 <nunavutCopyBits+0xde>
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	e000      	b.n	80023a4 <nunavutCopyBits+0xe0>
 80023a2:	7dbb      	ldrb	r3, [r7, #22]
 80023a4:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80023a6:	7d7b      	ldrb	r3, [r7, #21]
 80023a8:	f1c3 0008 	rsb	r0, r3, #8
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7ff ff5a 	bl	800226c <nunavutChooseMin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80023bc:	7d3b      	ldrb	r3, [r7, #20]
 80023be:	2201      	movs	r2, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	7dbb      	ldrb	r3, [r7, #22]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80023ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	6a3a      	ldr	r2, [r7, #32]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	fa42 f303 	asr.w	r3, r2, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	7dbb      	ldrb	r3, [r7, #22]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80023ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8002400:	7cba      	ldrb	r2, [r7, #18]
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	4013      	ands	r3, r2
 8002406:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240a:	08db      	lsrs	r3, r3, #3
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	7c79      	ldrb	r1, [r7, #17]
 8002412:	7c3a      	ldrb	r2, [r7, #16]
 8002414:	430a      	orrs	r2, r1
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800241a:	7d3b      	ldrb	r3, [r7, #20]
 800241c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800241e:	4413      	add	r3, r2
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 8002422:	7d3b      	ldrb	r3, [r7, #20]
 8002424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002426:	4413      	add	r3, r2
 8002428:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242e:	429a      	cmp	r2, r3
 8002430:	d8a7      	bhi.n	8002382 <nunavutCopyBits+0xbe>
        }

    }
}
 8002432:	e000      	b.n	8002436 <nunavutCopyBits+0x172>
    }
 8002434:	bf00      	nop
}
 8002436:	bf00      	nop
 8002438:	3748      	adds	r7, #72	; 0x48
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b088      	sub	sp, #32
 8002442:	af02      	add	r7, sp, #8
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff1d 	bl	8002290 <nunavutSaturateBufferFragmentBitLength>
 8002456:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	18d0      	adds	r0, r2, r3
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	3307      	adds	r3, #7
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	461a      	mov	r2, r3
 800246e:	2100      	movs	r1, #0
 8002470:	f011 fe5b 	bl	801412a <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	2100      	movs	r1, #0
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff ff20 	bl	80022c4 <nunavutCopyBits>
}
 8002484:	bf00      	nop
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	440b      	add	r3, r1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d202      	bcs.n	80024ae <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80024a8:	f06f 0302 	mvn.w	r3, #2
 80024ac:	e010      	b.n	80024d0 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80024ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80024b2:	2140      	movs	r1, #64	; 0x40
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fed9 	bl	800226c <nunavutChooseMin>
 80024ba:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff fefb 	bl	80022c4 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	2110      	movs	r1, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff febe 	bl	800226c <nunavutChooseMin>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68b8      	ldr	r0, [r7, #8]
 80024f8:	f7ff feca 	bl	8002290 <nunavutSaturateBufferFragmentBitLength>
 80024fc:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002502:	f107 0012 	add.w	r0, r7, #18
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	2100      	movs	r1, #0
 8002510:	f7ff fed8 	bl	80022c4 <nunavutCopyBits>
    return val;
 8002514:	8a7b      	ldrh	r3, [r7, #18]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b088      	sub	sp, #32
 8002522:	af02      	add	r7, sp, #8
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	2120      	movs	r1, #32
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fe9b 	bl	800226c <nunavutChooseMin>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	f7ff fea7 	bl	8002290 <nunavutSaturateBufferFragmentBitLength>
 8002542:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002548:	f107 0010 	add.w	r0, r7, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	2100      	movs	r1, #0
 8002556:	f7ff feb5 	bl	80022c4 <nunavutCopyBits>
    return val;
 800255a:	693b      	ldr	r3, [r7, #16]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8002564:	b480      	push	{r7}
 8002566:	b08b      	sub	sp, #44	; 0x2c
 8002568:	af00      	add	r7, sp, #0
 800256a:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <nunavutFloat16Pack+0xb8>)
 8002570:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8002572:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8002576:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8002578:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 800257c:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 800257e:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8002582:	613b      	str	r3, [r7, #16]
    in.real = value;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800258e:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4053      	eors	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d313      	bcc.n	80025cc <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 80025ae:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80025b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025b4:	e025      	b.n	8002602 <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d902      	bls.n	80025c4 <nunavutFloat16Pack+0x60>
 80025be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80025c2:	e001      	b.n	80025c8 <nunavutFloat16Pack+0x64>
 80025c4:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80025c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025ca:	e01a      	b.n	8002602 <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 80025d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80025dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e4:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ee:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d901      	bls.n	80025fc <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	b29a      	uxth	r2, r3
 8002608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800260a:	4313      	orrs	r3, r2
 800260c:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 800260e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8002610:	4618      	mov	r0, r3
 8002612:	372c      	adds	r7, #44	; 0x2c
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	fffff000 	.word	0xfffff000

08002620 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 800262a:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 800262e:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8002630:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8002634:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	035a      	lsls	r2, r3, #13
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <nunavutFloat16Unpack+0x6c>)
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8002640:	ed97 7a03 	vldr	s14, [r7, #12]
 8002644:	edd7 7a05 	vldr	s15, [r7, #20]
 8002648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8002650:	ed97 7a03 	vldr	s14, [r7, #12]
 8002654:	edd7 7a04 	vldr	s15, [r7, #16]
 8002658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	db03      	blt.n	800266a <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8002668:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	ee07 3a90 	vmov	s15, r3
}
 800267e:	eeb0 0a67 	vmov.f32	s0, s15
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	0fffe000 	.word	0x0fffe000

08002690 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 800269c:	2310      	movs	r3, #16
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff ff18 	bl	80024d8 <nunavutGetU16>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ffb8 	bl	8002620 <nunavutFloat16Unpack>
 80026b0:	eef0 7a40 	vmov.f32	s15, s0
}
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 80026ca:	2320      	movs	r3, #32
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff ff24 	bl	800251e <nunavutGetU32>
 80026d6:	4603      	mov	r3, r0
 80026d8:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	ee07 3a90 	vmov	s15, r3
}
 80026e0:	eeb0 0a67 	vmov.f32	s0, s15
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b08c      	sub	sp, #48	; 0x30
 80026ee:	af04      	add	r7, sp, #16
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <uavcan_node_Health_1_0_serialize_+0x1e>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002708:	f06f 0301 	mvn.w	r3, #1
 800270c:	e048      	b.n	80027a0 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	2b07      	cmp	r3, #7
 800271a:	d802      	bhi.n	8002722 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800271c:	f06f 0302 	mvn.w	r3, #2
 8002720:	e03e      	b.n	80027a0 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 800272c:	7efb      	ldrb	r3, [r7, #27]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d901      	bls.n	8002736 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002732:	2303      	movs	r3, #3
 8002734:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4413      	add	r3, r2
 800273e:	7efa      	ldrb	r2, [r7, #27]
 8002740:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3302      	adds	r3, #2
 8002746:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	2b00      	cmp	r3, #0
 8002750:	d021      	beq.n	8002796 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f1c3 0308 	rsb	r3, r3, #8
 8002760:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9cd 2300 	strd	r2, r3, [sp]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	f7ff fe88 	bl	800248c <nunavutSetUxx>
 800277c:	4603      	mov	r3, r0
 800277e:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002780:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da02      	bge.n	800278e <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002788:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800278c:	e008      	b.n	80027a0 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <uavcan_node_Health_1_0_deserialize_+0x26>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <uavcan_node_Health_1_0_deserialize_+0x26>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <uavcan_node_Health_1_0_deserialize_+0x2c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027ce:	f06f 0301 	mvn.w	r3, #1
 80027d2:	e030      	b.n	8002836 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <uavcan_node_Health_1_0_deserialize_+0x98>)
 80027dc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3302      	adds	r3, #2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d30a      	bcc.n	800280e <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	08db      	lsrs	r3, r3, #3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e002      	b.n	8002814 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3302      	adds	r3, #2
 8002818:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3307      	adds	r3, #7
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff fd20 	bl	800226c <nunavutChooseMin>
 800282c:	4603      	mov	r3, r0
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	08018218 	.word	0x08018218

08002844 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af04      	add	r7, sp, #16
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <uavcan_node_Mode_1_0_serialize_+0x1e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002862:	f06f 0301 	mvn.w	r3, #1
 8002866:	e048      	b.n	80028fa <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	2b07      	cmp	r3, #7
 8002874:	d802      	bhi.n	800287c <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002876:	f06f 0302 	mvn.w	r3, #2
 800287a:	e03e      	b.n	80028fa <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002886:	7efb      	ldrb	r3, [r7, #27]
 8002888:	2b07      	cmp	r3, #7
 800288a:	d901      	bls.n	8002890 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 800288c:	2307      	movs	r3, #7
 800288e:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	4413      	add	r3, r2
 8002898:	7efa      	ldrb	r2, [r7, #27]
 800289a:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3303      	adds	r3, #3
 80028a0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d021      	beq.n	80028f0 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f1c3 0308 	rsb	r3, r3, #8
 80028ba:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9cd 2300 	strd	r2, r3, [sp]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	6979      	ldr	r1, [r7, #20]
 80028d0:	68b8      	ldr	r0, [r7, #8]
 80028d2:	f7ff fddb 	bl	800248c <nunavutSetUxx>
 80028d6:	4603      	mov	r3, r0
 80028d8:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80028da:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da02      	bge.n	80028e8 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 80028e2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80028e6:	e008      	b.n	80028fa <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <uavcan_node_Mode_1_0_deserialize_+0x26>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800292a:	f06f 0301 	mvn.w	r3, #1
 800292e:	e030      	b.n	8002992 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002938:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3303      	adds	r3, #3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d30a      	bcc.n	800296a <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e002      	b.n	8002970 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3303      	adds	r3, #3
 8002974:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3307      	adds	r3, #7
 800297a:	f023 0307 	bic.w	r3, r3, #7
 800297e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002980:	69b9      	ldr	r1, [r7, #24]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff fc72 	bl	800226c <nunavutChooseMin>
 8002988:	4603      	mov	r3, r0
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	08018218 	.word	0x08018218

080029a0 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	; 0x38
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80029be:	f06f 0301 	mvn.w	r3, #1
 80029c2:	e0cf      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	2b37      	cmp	r3, #55	; 0x37
 80029d0:	d802      	bhi.n	80029d8 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80029d2:	f06f 0302 	mvn.w	r3, #2
 80029d6:	e0c5      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	08db      	lsrs	r3, r3, #3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	4413      	add	r3, r2
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	3320      	adds	r3, #32
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d021      	beq.n	8002a3e <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f1c3 0308 	rsb	r3, r3, #8
 8002a08:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9cd 2300 	strd	r2, r3, [sp]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	f7ff fd34 	bl	800248c <nunavutSetUxx>
 8002a24:	4603      	mov	r3, r0
 8002a26:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002a28:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da02      	bge.n	8002a36 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002a30:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002a34:	e096      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	4413      	add	r3, r2
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002a3e:	2301      	movs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f107 0214 	add.w	r2, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7ff fe49 	bl	80026ea <uavcan_node_Health_1_0_serialize_>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002a5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da02      	bge.n	8002a6a <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002a64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a68:	e07c      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	4413      	add	r3, r2
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d021      	beq.n	8002ac2 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f1c3 0308 	rsb	r3, r3, #8
 8002a8c:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002a8e:	7f3b      	ldrb	r3, [r7, #28]
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	6a39      	ldr	r1, [r7, #32]
 8002aa2:	68b8      	ldr	r0, [r7, #8]
 8002aa4:	f7ff fcf2 	bl	800248c <nunavutSetUxx>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002aac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da02      	bge.n	8002aba <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002ab4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ab8:	e054      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002aba:	7f3b      	ldrb	r3, [r7, #28]
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	4413      	add	r3, r2
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f107 0210 	add.w	r2, r7, #16
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7ff feb4 	bl	8002844 <uavcan_node_Mode_1_0_serialize_>
 8002adc:	4603      	mov	r3, r0
 8002ade:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002ae0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da02      	bge.n	8002aee <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002ae8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002aec:	e03a      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	4413      	add	r3, r2
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4413      	add	r3, r2
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	7992      	ldrb	r2, [r2, #6]
 8002b04:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	3308      	adds	r3, #8
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d021      	beq.n	8002b5a <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f1c3 0308 	rsb	r3, r3, #8
 8002b24:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002b26:	7e7b      	ldrb	r3, [r7, #25]
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9cd 2300 	strd	r2, r3, [sp]
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	68b8      	ldr	r0, [r7, #8]
 8002b3c:	f7ff fca6 	bl	800248c <nunavutSetUxx>
 8002b40:	4603      	mov	r3, r0
 8002b42:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002b44:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da02      	bge.n	8002b52 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002b4c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002b50:	e008      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002b52:	7e7b      	ldrb	r3, [r7, #25]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	4413      	add	r3, r2
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b92:	f06f 0301 	mvn.w	r3, #1
 8002b96:	e089      	b.n	8002cac <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002ba0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb8:	68b8      	ldr	r0, [r7, #8]
 8002bba:	f7ff fcb0 	bl	800251e <nunavutGetU32>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	3320      	adds	r3, #32
 8002bc8:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3307      	adds	r3, #7
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fb46 	bl	800226c <nunavutChooseMin>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f107 0214 	add.w	r2, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7ff fdd5 	bl	80027a8 <uavcan_node_Health_1_0_deserialize_>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002c02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da02      	bge.n	8002c10 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002c0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002c0e:	e04d      	b.n	8002cac <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fb1e 	bl	800226c <nunavutChooseMin>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4413      	add	r3, r2
 8002c44:	f107 0210 	add.w	r2, r7, #16
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7ff fe5b 	bl	8002904 <uavcan_node_Mode_1_0_deserialize_>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002c52:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da02      	bge.n	8002c60 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002c5a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002c5e:	e025      	b.n	8002cac <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d307      	bcc.n	8002c84 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	719a      	strb	r2, [r3, #6]
 8002c82:	e002      	b.n	8002c8a <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3307      	adds	r3, #7
 8002c94:	f023 0307 	bic.w	r3, r3, #7
 8002c98:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	69f8      	ldr	r0, [r7, #28]
 8002c9e:	f7ff fae5 	bl	800226c <nunavutChooseMin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3728      	adds	r7, #40	; 0x28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	08018218 	.word	0x08018218

08002cb8 <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002cd6:	f06f 0301 	mvn.w	r3, #1
 8002cda:	e041      	b.n	8002d60 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	2b1f      	cmp	r3, #31
 8002ce8:	d802      	bhi.n	8002cf0 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002cea:	f06f 0302 	mvn.w	r3, #2
 8002cee:	e037      	b.n	8002d60 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3320      	adds	r3, #32
 8002d06:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d021      	beq.n	8002d56 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f1c3 0308 	rsb	r3, r3, #8
 8002d20:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	69b9      	ldr	r1, [r7, #24]
 8002d36:	68b8      	ldr	r0, [r7, #8]
 8002d38:	f7ff fba8 	bl	800248c <nunavutSetUxx>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002d40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da02      	bge.n	8002d4e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002d48:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d4c:	e008      	b.n	8002d60 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d8e:	f06f 0301 	mvn.w	r3, #1
 8002d92:	e027      	b.n	8002de4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002d9c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	69f9      	ldr	r1, [r7, #28]
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff fc83 	bl	80026be <nunavutGetF32>
 8002db8:	eef0 7a40 	vmov.f32	s15, s0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3320      	adds	r3, #32
 8002dc6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	6978      	ldr	r0, [r7, #20]
 8002dd6:	f7ff fa49 	bl	800226c <nunavutChooseMin>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08018218 	.word	0x08018218

08002df0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af04      	add	r7, sp, #16
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e0e:	f06f 0301 	mvn.w	r3, #1
 8002e12:	e041      	b.n	8002e98 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	2b1f      	cmp	r3, #31
 8002e20:	d802      	bhi.n	8002e28 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002e22:	f06f 0302 	mvn.w	r3, #2
 8002e26:	e037      	b.n	8002e98 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4413      	add	r3, r2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d021      	beq.n	8002e8e <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f1c3 0308 	rsb	r3, r3, #8
 8002e58:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9cd 2300 	strd	r2, r3, [sp]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	69b9      	ldr	r1, [r7, #24]
 8002e6e:	68b8      	ldr	r0, [r7, #8]
 8002e70:	f7ff fb0c 	bl	800248c <nunavutSetUxx>
 8002e74:	4603      	mov	r3, r0
 8002e76:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002e78:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da02      	bge.n	8002e86 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002e80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e84:	e008      	b.n	8002e98 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	08da      	lsrs	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ec6:	f06f 0301 	mvn.w	r3, #1
 8002eca:	e027      	b.n	8002f1c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002ed4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	69f9      	ldr	r1, [r7, #28]
 8002eea:	68b8      	ldr	r0, [r7, #8]
 8002eec:	f7ff fbe7 	bl	80026be <nunavutGetF32>
 8002ef0:	eef0 7a40 	vmov.f32	s15, s0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3320      	adds	r3, #32
 8002efe:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3307      	adds	r3, #7
 8002f04:	f023 0307 	bic.w	r3, r3, #7
 8002f08:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f7ff f9ad 	bl	800226c <nunavutChooseMin>
 8002f12:	4603      	mov	r3, r0
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08018218 	.word	0x08018218

08002f28 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f46:	f06f 0301 	mvn.w	r3, #1
 8002f4a:	e041      	b.n	8002fd0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	2b1f      	cmp	r3, #31
 8002f58:	d802      	bhi.n	8002f60 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f5a:	f06f 0302 	mvn.w	r3, #2
 8002f5e:	e037      	b.n	8002fd0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	08db      	lsrs	r3, r3, #3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3320      	adds	r3, #32
 8002f76:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d021      	beq.n	8002fc6 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f1c3 0308 	rsb	r3, r3, #8
 8002f90:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	69b9      	ldr	r1, [r7, #24]
 8002fa6:	68b8      	ldr	r0, [r7, #8]
 8002fa8:	f7ff fa70 	bl	800248c <nunavutSetUxx>
 8002fac:	4603      	mov	r3, r0
 8002fae:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002fb0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da02      	bge.n	8002fbe <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002fb8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fbc:	e008      	b.n	8002fd0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ffe:	f06f 0301 	mvn.w	r3, #1
 8003002:	e027      	b.n	8003054 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 800300c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	69f9      	ldr	r1, [r7, #28]
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	f7ff fb4b 	bl	80026be <nunavutGetF32>
 8003028:	eef0 7a40 	vmov.f32	s15, s0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3320      	adds	r3, #32
 8003036:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3307      	adds	r3, #7
 800303c:	f023 0307 	bic.w	r3, r3, #7
 8003040:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7ff f911 	bl	800226c <nunavutChooseMin>
 800304a:	4603      	mov	r3, r0
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	08018218 	.word	0x08018218

08003060 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b090      	sub	sp, #64	; 0x40
 8003064:	af04      	add	r7, sp, #16
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800307e:	f06f 0301 	mvn.w	r3, #1
 8003082:	e0e4      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	2b5f      	cmp	r3, #95	; 0x5f
 8003090:	d802      	bhi.n	8003098 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003092:	f06f 0302 	mvn.w	r3, #2
 8003096:	e0da      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 800309c:	2304      	movs	r3, #4
 800309e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80030a0:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4413      	add	r3, r2
 80030aa:	f107 0218 	add.w	r2, r7, #24
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7ff fe02 	bl	8002cb8 <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 80030ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da02      	bge.n	80030c8 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 80030c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030c6:	e0c2      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ce:	4413      	add	r3, r2
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d025      	beq.n	8003128 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f1c3 0308 	rsb	r3, r3, #8
 80030ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80030ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f7ff f9c1 	bl	800248c <nunavutSetUxx>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 8003110:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003114:	2b00      	cmp	r3, #0
 8003116:	da02      	bge.n	800311e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 8003118:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800311c:	e097      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 800311e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003124:	4413      	add	r3, r2
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 8003128:	2304      	movs	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4413      	add	r3, r2
 8003138:	f107 0214 	add.w	r2, r7, #20
 800313c:	4619      	mov	r1, r3
 800313e:	f7ff fef3 	bl	8002f28 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 8003148:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	da02      	bge.n	8003156 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8003150:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003154:	e07b      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315c:	4413      	add	r3, r2
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d025      	beq.n	80031b6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f1c3 0308 	rsb	r3, r3, #8
 8003178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800317c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9cd 2300 	strd	r2, r3, [sp]
 800318e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003192:	68b8      	ldr	r0, [r7, #8]
 8003194:	f7ff f97a 	bl	800248c <nunavutSetUxx>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 800319e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da02      	bge.n	80031ac <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 80031a6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80031aa:	e050      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 80031ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b2:	4413      	add	r3, r2
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 80031b6:	2304      	movs	r3, #4
 80031b8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	4413      	add	r3, r2
 80031c8:	f107 0210 	add.w	r2, r7, #16
 80031cc:	4619      	mov	r1, r3
 80031ce:	f7ff fe0f 	bl	8002df0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 80031d8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da02      	bge.n	80031e6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 80031e0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80031e4:	e033      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	4413      	add	r3, r2
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d024      	beq.n	8003244 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f1c3 0308 	rsb	r3, r3, #8
 8003208:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 800320c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003210:	9302      	str	r3, [sp, #8]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9cd 2300 	strd	r2, r3, [sp]
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003222:	68b8      	ldr	r0, [r7, #8]
 8003224:	f7ff f932 	bl	800248c <nunavutSetUxx>
 8003228:	4603      	mov	r3, r0
 800322a:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 800322c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003230:	2b00      	cmp	r3, #0
 8003232:	da02      	bge.n	800323a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8003234:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003238:	e009      	b.n	800324e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 800323a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800323e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003240:	4413      	add	r3, r2
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800327e:	f06f 0301 	mvn.w	r3, #1
 8003282:	e090      	b.n	80033a6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800328a:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 800328c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe ffe1 	bl	800226c <nunavutChooseMin>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80032b2:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4413      	add	r3, r2
 80032bc:	f107 021c 	add.w	r2, r7, #28
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7ff fd51 	bl	8002d68 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 80032cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da02      	bge.n	80032da <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 80032d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80032d8:	e065      	b.n	80033a6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	4413      	add	r3, r2
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	3307      	adds	r3, #7
 80032e8:	f023 0307 	bic.w	r3, r3, #7
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe ffb9 	bl	800226c <nunavutChooseMin>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	f107 0218 	add.w	r2, r7, #24
 8003312:	4619      	mov	r1, r3
 8003314:	f7ff fe60 	bl	8002fd8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 800331e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003322:	2b00      	cmp	r3, #0
 8003324:	da02      	bge.n	800332c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8003326:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800332a:	e03c      	b.n	80033a6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	4413      	add	r3, r2
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	3307      	adds	r3, #7
 800333a:	f023 0307 	bic.w	r3, r3, #7
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff90 	bl	800226c <nunavutChooseMin>
 800334c:	4602      	mov	r2, r0
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	f107 0214 	add.w	r2, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	f7ff fd9a 	bl	8002ea0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8003372:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003376:	2b00      	cmp	r3, #0
 8003378:	da02      	bge.n	8003380 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 800337a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800337e:	e012      	b.n	80033a6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	4413      	add	r3, r2
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	3307      	adds	r3, #7
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003398:	f7fe ff68 	bl	800226c <nunavutChooseMin>
 800339c:	4603      	mov	r3, r0
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3730      	adds	r7, #48	; 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08018218 	.word	0x08018218

080033b4 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <uavcan_register_Name_1_0_deserialize_+0x26>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <uavcan_register_Name_1_0_deserialize_+0x26>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <uavcan_register_Name_1_0_deserialize_+0x2c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033da:	f06f 0301 	mvn.w	r3, #1
 80033de:	e04a      	b.n	8003476 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 80033e8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3308      	adds	r3, #8
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	429a      	cmp	r2, r3
 8003402:	d309      	bcc.n	8003418 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003416:	e003      	b.n	8003420 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3308      	adds	r3, #8
 8003424:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800342c:	2bff      	cmp	r3, #255	; 0xff
 800342e:	d902      	bls.n	8003436 <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003430:	f06f 0309 	mvn.w	r3, #9
 8003434:	e01f      	b.n	8003476 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	f7fe fff9 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4413      	add	r3, r2
 8003458:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3307      	adds	r3, #7
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003464:	69b9      	ldr	r1, [r7, #24]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7fe ff00 	bl	800226c <nunavutChooseMin>
 800346c:	4603      	mov	r3, r0
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	08018218 	.word	0x08018218

08003484 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	; 0x30
 8003488:	af04      	add	r7, sp, #16
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80034a2:	f06f 0301 	mvn.w	r3, #1
 80034a6:	e05e      	b.n	8003566 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80034b6:	d202      	bcs.n	80034be <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80034b8:	f06f 0302 	mvn.w	r3, #2
 80034bc:	e053      	b.n	8003566 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034cc:	d902      	bls.n	80034d4 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80034ce:	f06f 0309 	mvn.w	r3, #9
 80034d2:	e048      	b.n	8003566 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	4413      	add	r3, r2
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80034e2:	8812      	ldrh	r2, [r2, #0]
 80034e4:	b292      	uxth	r2, r2
 80034e6:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	3310      	adds	r3, #16
 80034ec:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2100      	movs	r1, #0
 80034f8:	9100      	str	r1, [sp, #0]
 80034fa:	69f9      	ldr	r1, [r7, #28]
 80034fc:	68b8      	ldr	r0, [r7, #8]
 80034fe:	f7fe fee1 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f1c3 0308 	rsb	r3, r3, #8
 8003526:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9cd 2300 	strd	r2, r3, [sp]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	68b8      	ldr	r0, [r7, #8]
 800353e:	f7fe ffa5 	bl	800248c <nunavutSetUxx>
 8003542:	4603      	mov	r3, r0
 8003544:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003546:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800354a:	2b00      	cmp	r3, #0
 800354c:	da02      	bge.n	8003554 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 800354e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003552:	e008      	b.n	8003566 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d006      	beq.n	8003596 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003596:	f06f 0301 	mvn.w	r3, #1
 800359a:	e041      	b.n	8003620 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80035a2:	4b21      	ldr	r3, [pc, #132]	; (8003628 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 80035a4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80035b6:	2310      	movs	r3, #16
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	69f9      	ldr	r1, [r7, #28]
 80035bc:	68b8      	ldr	r0, [r7, #8]
 80035be:	f7fe ff8b 	bl	80024d8 <nunavutGetU16>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3310      	adds	r3, #16
 80035d0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035dc:	d902      	bls.n	80035e4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035de:	f06f 0309 	mvn.w	r3, #9
 80035e2:	e01d      	b.n	8003620 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	f7fe ff23 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4413      	add	r3, r2
 8003602:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3307      	adds	r3, #7
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f7fe fe2b 	bl	800226c <nunavutChooseMin>
 8003616:	4603      	mov	r3, r0
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	08018218 	.word	0x08018218

0800362c <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af04      	add	r7, sp, #16
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800364a:	f06f 0301 	mvn.w	r3, #1
 800364e:	e05f      	b.n	8003710 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f640 0207 	movw	r2, #2055	; 0x807
 800365e:	4293      	cmp	r3, r2
 8003660:	d802      	bhi.n	8003668 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003662:	f06f 0302 	mvn.w	r3, #2
 8003666:	e053      	b.n	8003710 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d902      	bls.n	800367c <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003676:	f06f 0309 	mvn.w	r3, #9
 800367a:	e049      	b.n	8003710 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	08db      	lsrs	r3, r3, #3
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3308      	adds	r3, #8
 8003692:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800369a:	011a      	lsls	r2, r3, #4
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2100      	movs	r1, #0
 80036a0:	9100      	str	r1, [sp, #0]
 80036a2:	69f9      	ldr	r1, [r7, #28]
 80036a4:	68b8      	ldr	r0, [r7, #8]
 80036a6:	f7fe fe0d 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d021      	beq.n	8003706 <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f1c3 0308 	rsb	r3, r3, #8
 80036d0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9cd 2300 	strd	r2, r3, [sp]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f7fe fed0 	bl	800248c <nunavutSetUxx>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80036f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da02      	bge.n	80036fe <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80036f8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036fc:	e008      	b.n	8003710 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	08da      	lsrs	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800373e:	f06f 0301 	mvn.w	r3, #1
 8003742:	e04a      	b.n	80037da <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 800374c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3308      	adds	r3, #8
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d309      	bcc.n	800377c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800377a:	e003      	b.n	8003784 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3308      	adds	r3, #8
 8003788:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d902      	bls.n	800379a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003794:	f06f 0309 	mvn.w	r3, #9
 8003798:	e01f      	b.n	80037da <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	f7fe fe47 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4413      	add	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	3307      	adds	r3, #7
 80037c2:	f023 0307 	bic.w	r3, r3, #7
 80037c6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7fe fd4e 	bl	800226c <nunavutChooseMin>
 80037d0:	4603      	mov	r3, r0
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	08018218 	.word	0x08018218

080037e8 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003806:	f06f 0301 	mvn.w	r3, #1
 800380a:	e05f      	b.n	80038cc <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	f640 0207 	movw	r2, #2055	; 0x807
 800381a:	4293      	cmp	r3, r2
 800381c:	d802      	bhi.n	8003824 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800381e:	f06f 0302 	mvn.w	r3, #2
 8003822:	e053      	b.n	80038cc <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d902      	bls.n	8003838 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003832:	f06f 0309 	mvn.w	r3, #9
 8003836:	e049      	b.n	80038cc <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	08db      	lsrs	r3, r3, #3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	4413      	add	r3, r2
 8003846:	b2ca      	uxtb	r2, r1
 8003848:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3308      	adds	r3, #8
 800384e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2100      	movs	r1, #0
 800385c:	9100      	str	r1, [sp, #0]
 800385e:	69f9      	ldr	r1, [r7, #28]
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f7fe fd2f 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800386c:	015b      	lsls	r3, r3, #5
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d021      	beq.n	80038c2 <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f1c3 0308 	rsb	r3, r3, #8
 800388c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	9302      	str	r3, [sp, #8]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9cd 2300 	strd	r2, r3, [sp]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	68b8      	ldr	r0, [r7, #8]
 80038a4:	f7fe fdf2 	bl	800248c <nunavutSetUxx>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80038ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da02      	bge.n	80038ba <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80038b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038b8:	e008      	b.n	80038cc <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038fa:	f06f 0301 	mvn.w	r3, #1
 80038fe:	e04a      	b.n	8003996 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 8003908:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3308      	adds	r3, #8
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	429a      	cmp	r2, r3
 8003922:	d309      	bcc.n	8003938 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08db      	lsrs	r3, r3, #3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003936:	e003      	b.n	8003940 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3308      	adds	r3, #8
 8003944:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d902      	bls.n	8003956 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003950:	f06f 0309 	mvn.w	r3, #9
 8003954:	e01f      	b.n	8003996 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800395e:	015b      	lsls	r3, r3, #5
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	f7fe fd69 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003972:	015b      	lsls	r3, r3, #5
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4413      	add	r3, r2
 8003978:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3307      	adds	r3, #7
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7fe fc70 	bl	800226c <nunavutChooseMin>
 800398c:	4603      	mov	r3, r0
 800398e:	08da      	lsrs	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	08018218 	.word	0x08018218

080039a4 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af04      	add	r7, sp, #16
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80039c2:	f06f 0301 	mvn.w	r3, #1
 80039c6:	e05f      	b.n	8003a88 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	f640 0207 	movw	r2, #2055	; 0x807
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d802      	bhi.n	80039e0 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80039da:	f06f 0302 	mvn.w	r3, #2
 80039de:	e053      	b.n	8003a88 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d902      	bls.n	80039f4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039ee:	f06f 0309 	mvn.w	r3, #9
 80039f2:	e049      	b.n	8003a88 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4413      	add	r3, r2
 8003a02:	b2ca      	uxtb	r2, r1
 8003a04:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2100      	movs	r1, #0
 8003a18:	9100      	str	r1, [sp, #0]
 8003a1a:	69f9      	ldr	r1, [r7, #28]
 8003a1c:	68b8      	ldr	r0, [r7, #8]
 8003a1e:	f7fe fc51 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a28:	019b      	lsls	r3, r3, #6
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d021      	beq.n	8003a7e <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f1c3 0308 	rsb	r3, r3, #8
 8003a48:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9cd 2300 	strd	r2, r3, [sp]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	69b9      	ldr	r1, [r7, #24]
 8003a5e:	68b8      	ldr	r0, [r7, #8]
 8003a60:	f7fe fd14 	bl	800248c <nunavutSetUxx>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003a68:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da02      	bge.n	8003a76 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003a70:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a74:	e008      	b.n	8003a88 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ab6:	f06f 0301 	mvn.w	r3, #1
 8003aba:	e04a      	b.n	8003b52 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003ac4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d309      	bcc.n	8003af4 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	08db      	lsrs	r3, r3, #3
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003af2:	e003      	b.n	8003afc <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3308      	adds	r3, #8
 8003b00:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d902      	bls.n	8003b12 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b0c:	f06f 0309 	mvn.w	r3, #9
 8003b10:	e01f      	b.n	8003b52 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b1a:	019b      	lsls	r3, r3, #6
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	f7fe fc8b 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3307      	adds	r3, #7
 8003b3a:	f023 0307 	bic.w	r3, r3, #7
 8003b3e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7fe fb92 	bl	800226c <nunavutChooseMin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	08018218 	.word	0x08018218

08003b60 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	; 0x30
 8003b64:	af04      	add	r7, sp, #16
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b7e:	f06f 0301 	mvn.w	r3, #1
 8003b82:	e060      	b.n	8003c46 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003b92:	d202      	bcs.n	8003b9a <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003b94:	f06f 0302 	mvn.w	r3, #2
 8003b98:	e055      	b.n	8003c46 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba8:	d902      	bls.n	8003bb0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003baa:	f06f 0309 	mvn.w	r3, #9
 8003bae:	e04a      	b.n	8003c46 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08db      	lsrs	r3, r3, #3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3310      	adds	r3, #16
 8003bc8:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003bd0:	00da      	lsls	r2, r3, #3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	9100      	str	r1, [sp, #0]
 8003bd8:	69f9      	ldr	r1, [r7, #28]
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	f7fe fb72 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d021      	beq.n	8003c3c <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f1c3 0308 	rsb	r3, r3, #8
 8003c06:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9cd 2300 	strd	r2, r3, [sp]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f7fe fc35 	bl	800248c <nunavutSetUxx>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003c26:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da02      	bge.n	8003c34 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003c2e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c32:	e008      	b.n	8003c46 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c76:	f06f 0301 	mvn.w	r3, #1
 8003c7a:	e043      	b.n	8003d04 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003c84:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003c96:	2310      	movs	r3, #16
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	68b8      	ldr	r0, [r7, #8]
 8003c9e:	f7fe fc1b 	bl	80024d8 <nunavutGetU16>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3310      	adds	r3, #16
 8003cb0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbc:	d902      	bls.n	8003cc4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003cbe:	f06f 0309 	mvn.w	r3, #9
 8003cc2:	e01f      	b.n	8003d04 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	f7fe fbb2 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3307      	adds	r3, #7
 8003cec:	f023 0307 	bic.w	r3, r3, #7
 8003cf0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	6978      	ldr	r0, [r7, #20]
 8003cf6:	f7fe fab9 	bl	800226c <nunavutChooseMin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	08da      	lsrs	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08018218 	.word	0x08018218

08003d10 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	; 0x30
 8003d14:	af04      	add	r7, sp, #16
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d2e:	f06f 0301 	mvn.w	r3, #1
 8003d32:	e05f      	b.n	8003df4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	f640 0207 	movw	r2, #2055	; 0x807
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d802      	bhi.n	8003d4c <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003d46:	f06f 0302 	mvn.w	r3, #2
 8003d4a:	e053      	b.n	8003df4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d902      	bls.n	8003d60 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d5a:	f06f 0309 	mvn.w	r3, #9
 8003d5e:	e049      	b.n	8003df4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	08db      	lsrs	r3, r3, #3
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b2ca      	uxtb	r2, r1
 8003d70:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3308      	adds	r3, #8
 8003d76:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d7e:	011a      	lsls	r2, r3, #4
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2100      	movs	r1, #0
 8003d84:	9100      	str	r1, [sp, #0]
 8003d86:	69f9      	ldr	r1, [r7, #28]
 8003d88:	68b8      	ldr	r0, [r7, #8]
 8003d8a:	f7fe fa9b 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d021      	beq.n	8003dea <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f1c3 0308 	rsb	r3, r3, #8
 8003db4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9cd 2300 	strd	r2, r3, [sp]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	f7fe fb5e 	bl	800248c <nunavutSetUxx>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003dd4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da02      	bge.n	8003de2 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003ddc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003de0:	e008      	b.n	8003df4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	4413      	add	r3, r2
 8003de8:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	08da      	lsrs	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d006      	beq.n	8003e22 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e22:	f06f 0301 	mvn.w	r3, #1
 8003e26:	e04a      	b.n	8003ebe <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 8003e30:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3308      	adds	r3, #8
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d309      	bcc.n	8003e60 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	08db      	lsrs	r3, r3, #3
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	4413      	add	r3, r2
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003e5e:	e003      	b.n	8003e68 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d902      	bls.n	8003e7e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e78:	f06f 0309 	mvn.w	r3, #9
 8003e7c:	e01f      	b.n	8003ebe <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	f7fe fad5 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	f023 0307 	bic.w	r3, r3, #7
 8003eaa:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f7fe f9dc 	bl	800226c <nunavutChooseMin>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	08da      	lsrs	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	08018218 	.word	0x08018218

08003ecc <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af04      	add	r7, sp, #16
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003eea:	f06f 0301 	mvn.w	r3, #1
 8003eee:	e05f      	b.n	8003fb0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	f640 0207 	movw	r2, #2055	; 0x807
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003f02:	f06f 0302 	mvn.w	r3, #2
 8003f06:	e053      	b.n	8003fb0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d902      	bls.n	8003f1c <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f16:	f06f 0309 	mvn.w	r3, #9
 8003f1a:	e049      	b.n	8003fb0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	b2ca      	uxtb	r2, r1
 8003f2c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3308      	adds	r3, #8
 8003f32:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	9100      	str	r1, [sp, #0]
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	f7fe f9bd 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f50:	015b      	lsls	r3, r3, #5
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d021      	beq.n	8003fa6 <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f1c3 0308 	rsb	r3, r3, #8
 8003f70:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	9302      	str	r3, [sp, #8]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f7fe fa80 	bl	800248c <nunavutSetUxx>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003f90:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da02      	bge.n	8003f9e <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f9c:	e008      	b.n	8003fb0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	08da      	lsrs	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d006      	beq.n	8003fde <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003fde:	f06f 0301 	mvn.w	r3, #1
 8003fe2:	e04a      	b.n	800407a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003fec:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3308      	adds	r3, #8
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d309      	bcc.n	800401c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	08db      	lsrs	r3, r3, #3
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800401a:	e003      	b.n	8004024 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3308      	adds	r3, #8
 8004028:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d902      	bls.n	800403a <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004034:	f06f 0309 	mvn.w	r3, #9
 8004038:	e01f      	b.n	800407a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004042:	015b      	lsls	r3, r3, #5
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	f7fe f9f7 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004056:	015b      	lsls	r3, r3, #5
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4413      	add	r3, r2
 800405c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3307      	adds	r3, #7
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7fe f8fe 	bl	800226c <nunavutChooseMin>
 8004070:	4603      	mov	r3, r0
 8004072:	08da      	lsrs	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	08018218 	.word	0x08018218

08004088 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08c      	sub	sp, #48	; 0x30
 800408c:	af04      	add	r7, sp, #16
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80040a6:	f06f 0301 	mvn.w	r3, #1
 80040aa:	e05f      	b.n	800416c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f640 0207 	movw	r2, #2055	; 0x807
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d802      	bhi.n	80040c4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80040be:	f06f 0302 	mvn.w	r3, #2
 80040c2:	e053      	b.n	800416c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d902      	bls.n	80040d8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80040d2:	f06f 0309 	mvn.w	r3, #9
 80040d6:	e049      	b.n	800416c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	08db      	lsrs	r3, r3, #3
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4413      	add	r3, r2
 80040e6:	b2ca      	uxtb	r2, r1
 80040e8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3308      	adds	r3, #8
 80040ee:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040f6:	019a      	lsls	r2, r3, #6
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2100      	movs	r1, #0
 80040fc:	9100      	str	r1, [sp, #0]
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f7fe f8df 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f1c3 0308 	rsb	r3, r3, #8
 800412c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9cd 2300 	strd	r2, r3, [sp]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7fe f9a2 	bl	800248c <nunavutSetUxx>
 8004148:	4603      	mov	r3, r0
 800414a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800414c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004150:	2b00      	cmp	r3, #0
 8004152:	da02      	bge.n	800415a <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004154:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004158:	e008      	b.n	800416c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	08da      	lsrs	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800419a:	f06f 0301 	mvn.w	r3, #1
 800419e:	e04a      	b.n	8004236 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80041a6:	4b26      	ldr	r3, [pc, #152]	; (8004240 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 80041a8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	3308      	adds	r3, #8
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d309      	bcc.n	80041d8 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	08db      	lsrs	r3, r3, #3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80041d6:	e003      	b.n	80041e0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3308      	adds	r3, #8
 80041e4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d902      	bls.n	80041f6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80041f0:	f06f 0309 	mvn.w	r3, #9
 80041f4:	e01f      	b.n	8004236 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041fe:	019b      	lsls	r3, r3, #6
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	f7fe f919 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3307      	adds	r3, #7
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	6978      	ldr	r0, [r7, #20]
 8004228:	f7fe f820 	bl	800226c <nunavutChooseMin>
 800422c:	4603      	mov	r3, r0
 800422e:	08da      	lsrs	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	08018218 	.word	0x08018218

08004244 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	; 0x30
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004262:	f06f 0301 	mvn.w	r3, #1
 8004266:	e060      	b.n	800432a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004276:	d202      	bcs.n	800427e <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004278:	f06f 0302 	mvn.w	r3, #2
 800427c:	e055      	b.n	800432a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428c:	d902      	bls.n	8004294 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800428e:	f06f 0309 	mvn.w	r3, #9
 8004292:	e04a      	b.n	800432a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	08db      	lsrs	r3, r3, #3
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	4413      	add	r3, r2
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80042a2:	8812      	ldrh	r2, [r2, #0]
 80042a4:	b292      	uxth	r2, r2
 80042a6:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3310      	adds	r3, #16
 80042ac:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042b4:	00da      	lsls	r2, r3, #3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2100      	movs	r1, #0
 80042ba:	9100      	str	r1, [sp, #0]
 80042bc:	69f9      	ldr	r1, [r7, #28]
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7fe f800 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d021      	beq.n	8004320 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f1c3 0308 	rsb	r3, r3, #8
 80042ea:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	9302      	str	r3, [sp, #8]
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9cd 2300 	strd	r2, r3, [sp]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	68b8      	ldr	r0, [r7, #8]
 8004302:	f7fe f8c3 	bl	800248c <nunavutSetUxx>
 8004306:	4603      	mov	r3, r0
 8004308:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800430a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da02      	bge.n	8004318 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004312:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004316:	e008      	b.n	800432a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	08da      	lsrs	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800435a:	f06f 0301 	mvn.w	r3, #1
 800435e:	e043      	b.n	80043e8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8004368:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800437a:	2310      	movs	r3, #16
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	69f9      	ldr	r1, [r7, #28]
 8004380:	68b8      	ldr	r0, [r7, #8]
 8004382:	f7fe f8a9 	bl	80024d8 <nunavutGetU16>
 8004386:	4603      	mov	r3, r0
 8004388:	461a      	mov	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3310      	adds	r3, #16
 8004394:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d902      	bls.n	80043a8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80043a2:	f06f 0309 	mvn.w	r3, #9
 80043a6:	e01f      	b.n	80043e8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	f7fe f840 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3307      	adds	r3, #7
 80043d0:	f023 0307 	bic.w	r3, r3, #7
 80043d4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80043d6:	69b9      	ldr	r1, [r7, #24]
 80043d8:	6978      	ldr	r0, [r7, #20]
 80043da:	f7fd ff47 	bl	800226c <nunavutChooseMin>
 80043de:	4603      	mov	r3, r0
 80043e0:	08da      	lsrs	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	08018218 	.word	0x08018218

080043f4 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08e      	sub	sp, #56	; 0x38
 80043f8:	af04      	add	r7, sp, #16
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004412:	f06f 0301 	mvn.w	r3, #1
 8004416:	e08b      	b.n	8004530 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f640 0207 	movw	r2, #2055	; 0x807
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800442a:	f06f 0302 	mvn.w	r3, #2
 800442e:	e07f      	b.n	8004530 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d902      	bls.n	8004444 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800443e:	f06f 0309 	mvn.w	r3, #9
 8004442:	e075      	b.n	8004530 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4413      	add	r3, r2
 8004452:	b2ca      	uxtb	r2, r1
 8004454:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	3308      	adds	r3, #8
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800445c:	2300      	movs	r3, #0
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	e034      	b.n	80044cc <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 800446e:	ed97 0a07 	vldr	s0, [r7, #28]
 8004472:	f7fd fed7 	bl	8002224 <_ZSt8isfinitef>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 800447c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004480:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004538 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 8004484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	d501      	bpl.n	8004492 <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 800448e:	4b2b      	ldr	r3, [pc, #172]	; (800453c <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 8004490:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 8004492:	edd7 7a07 	vldr	s15, [r7, #28]
 8004496:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004540 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 800449a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	dd01      	ble.n	80044a8 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 80044a6:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 80044a8:	ed97 0a07 	vldr	s0, [r7, #28]
 80044ac:	f7fe f85a 	bl	8002564 <nunavutFloat16Pack>
 80044b0:	4603      	mov	r3, r0
 80044b2:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4413      	add	r3, r2
 80044bc:	8aba      	ldrh	r2, [r7, #20]
 80044be:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	3310      	adds	r3, #16
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	3301      	adds	r3, #1
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d3c4      	bcc.n	8004462 <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d021      	beq.n	8004526 <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f1c3 0308 	rsb	r3, r3, #8
 80044f0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9cd 2300 	strd	r2, r3, [sp]
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	68b8      	ldr	r0, [r7, #8]
 8004508:	f7fd ffc0 	bl	800248c <nunavutSetUxx>
 800450c:	4603      	mov	r3, r0
 800450e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004510:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004514:	2b00      	cmp	r3, #0
 8004516:	da02      	bge.n	800451e <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8004518:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800451c:	e008      	b.n	8004530 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004522:	4413      	add	r3, r2
 8004524:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	c77fe000 	.word	0xc77fe000
 800453c:	c77fe000 	.word	0xc77fe000
 8004540:	477fe000 	.word	0x477fe000
 8004544:	477fe000 	.word	0x477fe000

08004548 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d006      	beq.n	800456e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800456e:	f06f 0301 	mvn.w	r3, #1
 8004572:	e054      	b.n	800461e <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800457a:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 800457c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3308      	adds	r3, #8
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d309      	bcc.n	80045ac <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	08db      	lsrs	r3, r3, #3
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	4413      	add	r3, r2
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80045aa:	e003      	b.n	80045b4 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3308      	adds	r3, #8
 80045b8:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d902      	bls.n	80045ca <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80045c4:	f06f 0309 	mvn.w	r3, #9
 80045c8:	e029      	b.n	800461e <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e012      	b.n	80045f6 <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	68b8      	ldr	r0, [r7, #8]
 80045d6:	f7fe f85b 	bl	8002690 <nunavutGetF16>
 80045da:	eef0 7a40 	vmov.f32	s15, s0
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3310      	adds	r3, #16
 80045ee:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	3301      	adds	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3e6      	bcc.n	80045d0 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3307      	adds	r3, #7
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	69f8      	ldr	r0, [r7, #28]
 8004610:	f7fd fe2c 	bl	800226c <nunavutChooseMin>
 8004614:	4603      	mov	r3, r0
 8004616:	08da      	lsrs	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	08018218 	.word	0x08018218

0800462c <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af04      	add	r7, sp, #16
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800464a:	f06f 0301 	mvn.w	r3, #1
 800464e:	e05f      	b.n	8004710 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	f640 0207 	movw	r2, #2055	; 0x807
 800465e:	4293      	cmp	r3, r2
 8004660:	d802      	bhi.n	8004668 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004662:	f06f 0302 	mvn.w	r3, #2
 8004666:	e053      	b.n	8004710 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d902      	bls.n	800467c <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004676:	f06f 0309 	mvn.w	r3, #9
 800467a:	e049      	b.n	8004710 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4413      	add	r3, r2
 800468a:	b2ca      	uxtb	r2, r1
 800468c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3308      	adds	r3, #8
 8004692:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2100      	movs	r1, #0
 80046a0:	9100      	str	r1, [sp, #0]
 80046a2:	69f9      	ldr	r1, [r7, #28]
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f7fd fe0d 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046b0:	015b      	lsls	r3, r3, #5
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d021      	beq.n	8004706 <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f1c3 0308 	rsb	r3, r3, #8
 80046d0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	9302      	str	r3, [sp, #8]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9cd 2300 	strd	r2, r3, [sp]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	68b8      	ldr	r0, [r7, #8]
 80046e8:	f7fd fed0 	bl	800248c <nunavutSetUxx>
 80046ec:	4603      	mov	r3, r0
 80046ee:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80046f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da02      	bge.n	80046fe <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80046f8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046fc:	e008      	b.n	8004710 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	08da      	lsrs	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800473e:	f06f 0301 	mvn.w	r3, #1
 8004742:	e04a      	b.n	80047da <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 800474c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3308      	adds	r3, #8
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d309      	bcc.n	800477c <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	08db      	lsrs	r3, r3, #3
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800477a:	e003      	b.n	8004784 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3308      	adds	r3, #8
 8004788:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d902      	bls.n	800479a <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004794:	f06f 0309 	mvn.w	r3, #9
 8004798:	e01f      	b.n	80047da <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047a2:	015b      	lsls	r3, r3, #5
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	f7fd fe47 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047b6:	015b      	lsls	r3, r3, #5
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3307      	adds	r3, #7
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80047c8:	69b9      	ldr	r1, [r7, #24]
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7fd fd4e 	bl	800226c <nunavutChooseMin>
 80047d0:	4603      	mov	r3, r0
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	08018218 	.word	0x08018218

080047e8 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08c      	sub	sp, #48	; 0x30
 80047ec:	af04      	add	r7, sp, #16
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004806:	f06f 0301 	mvn.w	r3, #1
 800480a:	e05f      	b.n	80048cc <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f640 0207 	movw	r2, #2055	; 0x807
 800481a:	4293      	cmp	r3, r2
 800481c:	d802      	bhi.n	8004824 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800481e:	f06f 0302 	mvn.w	r3, #2
 8004822:	e053      	b.n	80048cc <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800482e:	2b20      	cmp	r3, #32
 8004830:	d902      	bls.n	8004838 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004832:	f06f 0309 	mvn.w	r3, #9
 8004836:	e049      	b.n	80048cc <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	4413      	add	r3, r2
 8004846:	b2ca      	uxtb	r2, r1
 8004848:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3308      	adds	r3, #8
 800484e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004856:	019a      	lsls	r2, r3, #6
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2100      	movs	r1, #0
 800485c:	9100      	str	r1, [sp, #0]
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	68b8      	ldr	r0, [r7, #8]
 8004862:	f7fd fd2f 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d021      	beq.n	80048c2 <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f1c3 0308 	rsb	r3, r3, #8
 800488c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	9302      	str	r3, [sp, #8]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9cd 2300 	strd	r2, r3, [sp]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	69b9      	ldr	r1, [r7, #24]
 80048a2:	68b8      	ldr	r0, [r7, #8]
 80048a4:	f7fd fdf2 	bl	800248c <nunavutSetUxx>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80048ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da02      	bge.n	80048ba <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 80048b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80048b8:	e008      	b.n	80048cc <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	08da      	lsrs	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80048fa:	f06f 0301 	mvn.w	r3, #1
 80048fe:	e04a      	b.n	8004996 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 8004908:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3308      	adds	r3, #8
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	429a      	cmp	r2, r3
 8004922:	d309      	bcc.n	8004938 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004936:	e003      	b.n	8004940 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	3308      	adds	r3, #8
 8004944:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800494c:	2b20      	cmp	r3, #32
 800494e:	d902      	bls.n	8004956 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004950:	f06f 0309 	mvn.w	r3, #9
 8004954:	e01f      	b.n	8004996 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800495e:	019b      	lsls	r3, r3, #6
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	f7fd fd69 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004972:	019b      	lsls	r3, r3, #6
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3307      	adds	r3, #7
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004984:	69b9      	ldr	r1, [r7, #24]
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f7fd fc70 	bl	800226c <nunavutChooseMin>
 800498c:	4603      	mov	r3, r0
 800498e:	08da      	lsrs	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	08018218 	.word	0x08018218

080049a4 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80049c2:	f06f 0301 	mvn.w	r3, #1
 80049c6:	e003      	b.n	80049d0 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d006      	beq.n	8004a02 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a02:	f06f 0301 	mvn.w	r3, #1
 8004a06:	e008      	b.n	8004a1a <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8004a10:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	08018218 	.word	0x08018218

08004a2c <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af04      	add	r7, sp, #16
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a4a:	f06f 0301 	mvn.w	r3, #1
 8004a4e:	e060      	b.n	8004b12 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004a5e:	d202      	bcs.n	8004a66 <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004a60:	f06f 0302 	mvn.w	r3, #2
 8004a64:	e055      	b.n	8004b12 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a74:	d902      	bls.n	8004a7c <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004a76:	f06f 0309 	mvn.w	r3, #9
 8004a7a:	e04a      	b.n	8004b12 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	4413      	add	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	3310      	adds	r3, #16
 8004a94:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a9c:	00da      	lsls	r2, r3, #3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	9100      	str	r1, [sp, #0]
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f7fd fc0c 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d021      	beq.n	8004b08 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f1c3 0308 	rsb	r3, r3, #8
 8004ad2:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	9302      	str	r3, [sp, #8]
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9cd 2300 	strd	r2, r3, [sp]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	69b9      	ldr	r1, [r7, #24]
 8004ae8:	68b8      	ldr	r0, [r7, #8]
 8004aea:	f7fd fccf 	bl	800248c <nunavutSetUxx>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004af2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da02      	bge.n	8004b00 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004afa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004afe:	e008      	b.n	8004b12 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	08da      	lsrs	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004b42:	f06f 0301 	mvn.w	r3, #1
 8004b46:	e043      	b.n	8004bd0 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004b50:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004b62:	2310      	movs	r3, #16
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	69f9      	ldr	r1, [r7, #28]
 8004b68:	68b8      	ldr	r0, [r7, #8]
 8004b6a:	f7fd fcb5 	bl	80024d8 <nunavutGetU16>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b88:	d902      	bls.n	8004b90 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004b8a:	f06f 0309 	mvn.w	r3, #9
 8004b8e:	e01f      	b.n	8004bd0 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	f7fd fc4c 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	6978      	ldr	r0, [r7, #20]
 8004bc2:	f7fd fb53 	bl	800226c <nunavutChooseMin>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	08da      	lsrs	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	08018218 	.word	0x08018218

08004bdc <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af04      	add	r7, sp, #16
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004bfa:	f06f 0301 	mvn.w	r3, #1
 8004bfe:	e060      	b.n	8004cc2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004c0e:	d202      	bcs.n	8004c16 <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004c10:	f06f 0302 	mvn.w	r3, #2
 8004c14:	e055      	b.n	8004cc2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d902      	bls.n	8004c2c <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004c26:	f06f 0309 	mvn.w	r3, #9
 8004c2a:	e04a      	b.n	8004cc2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	4413      	add	r3, r2
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004c3a:	8812      	ldrh	r2, [r2, #0]
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3310      	adds	r3, #16
 8004c44:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c4c:	00da      	lsls	r2, r3, #3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2100      	movs	r1, #0
 8004c52:	9100      	str	r1, [sp, #0]
 8004c54:	69f9      	ldr	r1, [r7, #28]
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f7fd fb34 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d021      	beq.n	8004cb8 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f1c3 0308 	rsb	r3, r3, #8
 8004c82:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9cd 2300 	strd	r2, r3, [sp]
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	69b9      	ldr	r1, [r7, #24]
 8004c98:	68b8      	ldr	r0, [r7, #8]
 8004c9a:	f7fd fbf7 	bl	800248c <nunavutSetUxx>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004ca2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da02      	bge.n	8004cb0 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004caa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004cae:	e008      	b.n	8004cc2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	08da      	lsrs	r2, r3, #3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004cf2:	f06f 0301 	mvn.w	r3, #1
 8004cf6:	e043      	b.n	8004d80 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 8004d00:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004d12:	2310      	movs	r3, #16
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	69f9      	ldr	r1, [r7, #28]
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f7fd fbdd 	bl	80024d8 <nunavutGetU16>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d902      	bls.n	8004d40 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004d3a:	f06f 0309 	mvn.w	r3, #9
 8004d3e:	e01f      	b.n	8004d80 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	f7fd fb74 	bl	800243e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3307      	adds	r3, #7
 8004d68:	f023 0307 	bic.w	r3, r3, #7
 8004d6c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	6978      	ldr	r0, [r7, #20]
 8004d72:	f7fd fa7b 	bl	800226c <nunavutChooseMin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	08018218 	.word	0x08018218

08004d8c <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b09e      	sub	sp, #120	; 0x78
 8004d90:	af04      	add	r7, sp, #16
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <uavcan_register_Value_1_0_serialize_+0x1e>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <uavcan_register_Value_1_0_serialize_+0x1e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004daa:	f06f 0301 	mvn.w	r3, #1
 8004dae:	e248      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	663b      	str	r3, [r7, #96]	; 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 8004db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f640 0217 	movw	r2, #2071	; 0x817
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d802      	bhi.n	8004dc8 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004dc2:	f06f 0302 	mvn.w	r3, #2
 8004dc6:	e23c      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 8004dda:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dde:	3308      	adds	r3, #8
 8004de0:	667b      	str	r3, [r7, #100]	; 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11b      	bne.n	8004e24 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004df0:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 8004df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df4:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f7ff fdd0 	bl	80049a4 <uavcan_primitive_Empty_1_0_serialize_>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
        if (_err0_ < 0)
 8004e0a:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da02      	bge.n	8004e18 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 8004e12:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004e16:	e214      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e1e:	4413      	add	r3, r2
 8004e20:	667b      	str	r3, [r7, #100]	; 0x64
 8004e22:	e1de      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d11c      	bne.n	8004e68 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 8004e2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004e32:	647b      	str	r3, [r7, #68]	; 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8004e34:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 8004e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e38:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7ff fdf2 	bl	8004a2c <uavcan_primitive_String_1_0_serialize_>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (_err1_ < 0)
 8004e4e:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da02      	bge.n	8004e5c <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 8004e56:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004e5a:	e1f2      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e62:	4413      	add	r3, r2
 8004e64:	667b      	str	r3, [r7, #100]	; 0x64
 8004e66:	e1bc      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d11c      	bne.n	8004eac <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8004e72:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004e76:	643b      	str	r3, [r7, #64]	; 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004e78:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 8004e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7c:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4413      	add	r3, r2
 8004e82:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7ff fea8 	bl	8004bdc <uavcan_primitive_Unstructured_1_0_serialize_>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (_err2_ < 0)
 8004e92:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da02      	bge.n	8004ea0 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 8004e9a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004e9e:	e1d0      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8004ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ea6:	4413      	add	r3, r2
 8004ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eaa:	e19a      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d11c      	bne.n	8004ef0 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 8004eb6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004ebc:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 8004ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec0:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f7fe fada 	bl	8003484 <uavcan_primitive_array_Bit_1_0_serialize_>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        if (_err3_ < 0)
 8004ed6:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da02      	bge.n	8004ee4 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 8004ede:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004ee2:	e1ae      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eea:	4413      	add	r3, r2
 8004eec:	667b      	str	r3, [r7, #100]	; 0x64
 8004eee:	e178      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d11c      	bne.n	8004f34 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 8004efa:	f240 1301 	movw	r3, #257	; 0x101
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8004f00:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 8004f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f04:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f7fe fd48 	bl	80039a4 <uavcan_primitive_array_Integer64_1_0_serialize_>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if (_err4_ < 0)
 8004f1a:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da02      	bge.n	8004f28 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 8004f22:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8004f26:	e18c      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f2e:	4413      	add	r3, r2
 8004f30:	667b      	str	r3, [r7, #100]	; 0x64
 8004f32:	e156      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d11c      	bne.n	8004f78 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 8004f3e:	f240 1301 	movw	r3, #257	; 0x101
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8004f44:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 8004f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f48:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f52:	4619      	mov	r1, r3
 8004f54:	f7fe fc48 	bl	80037e8 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        if (_err5_ < 0)
 8004f5e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da02      	bge.n	8004f6c <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 8004f66:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004f6a:	e16a      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f72:	4413      	add	r3, r2
 8004f74:	667b      	str	r3, [r7, #100]	; 0x64
 8004f76:	e134      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d11c      	bne.n	8004fbc <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8004f82:	f240 1301 	movw	r3, #257	; 0x101
 8004f86:	633b      	str	r3, [r7, #48]	; 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004f88:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8004f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8c:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f96:	4619      	mov	r1, r3
 8004f98:	f7fe fb48 	bl	800362c <uavcan_primitive_array_Integer16_1_0_serialize_>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (_err6_ < 0)
 8004fa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	da02      	bge.n	8004fb0 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 8004faa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fae:	e148      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fb6:	4413      	add	r3, r2
 8004fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fba:	e112      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d11c      	bne.n	8005000 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 8004fc6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004fcc:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd0:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f7fe fdc0 	bl	8003b60 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
        if (_err7_ < 0)
 8004fe6:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da02      	bge.n	8004ff4 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004fee:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004ff2:	e126      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ffa:	4413      	add	r3, r2
 8004ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffe:	e0f0      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005006:	2b08      	cmp	r3, #8
 8005008:	d11c      	bne.n	8005044 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 800500a:	f240 1301 	movw	r3, #257	; 0x101
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8005010:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8005012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005014:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4413      	add	r3, r2
 800501a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800501e:	4619      	mov	r1, r3
 8005020:	f7ff f832 	bl	8004088 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (_err8_ < 0)
 800502a:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 800502e:	2b00      	cmp	r3, #0
 8005030:	da02      	bge.n	8005038 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 8005032:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005036:	e104      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800503e:	4413      	add	r3, r2
 8005040:	667b      	str	r3, [r7, #100]	; 0x64
 8005042:	e0ce      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800504a:	2b09      	cmp	r3, #9
 800504c:	d11c      	bne.n	8005088 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 800504e:	f240 1301 	movw	r3, #257	; 0x101
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8005054:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8005056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005058:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005062:	4619      	mov	r1, r3
 8005064:	f7fe ff32 	bl	8003ecc <uavcan_primitive_array_Natural32_1_0_serialize_>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        if (_err9_ < 0)
 800506e:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8005072:	2b00      	cmp	r3, #0
 8005074:	da02      	bge.n	800507c <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8005076:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800507a:	e0e2      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005082:	4413      	add	r3, r2
 8005084:	667b      	str	r3, [r7, #100]	; 0x64
 8005086:	e0ac      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800508e:	2b0a      	cmp	r3, #10
 8005090:	d11c      	bne.n	80050cc <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8005092:	f240 1301 	movw	r3, #257	; 0x101
 8005096:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8005098:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 800509a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800509c:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	f107 0220 	add.w	r2, r7, #32
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7fe fe32 	bl	8003d10 <uavcan_primitive_array_Natural16_1_0_serialize_>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if (_err10_ < 0)
 80050b2:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da02      	bge.n	80050c0 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 80050ba:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80050be:	e0c0      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050c6:	4413      	add	r3, r2
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ca:	e08a      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050d2:	2b0b      	cmp	r3, #11
 80050d4:	d11c      	bne.n	8005110 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 80050d6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80050da:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80050dc:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 80050de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e0:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	f107 021c 	add.w	r2, r7, #28
 80050ea:	4619      	mov	r1, r3
 80050ec:	f7ff f8aa 	bl	8004244 <uavcan_primitive_array_Natural8_1_0_serialize_>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (_err11_ < 0)
 80050f6:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	da02      	bge.n	8005104 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 80050fe:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8005102:	e09e      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800510a:	4413      	add	r3, r2
 800510c:	667b      	str	r3, [r7, #100]	; 0x64
 800510e:	e068      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d11c      	bne.n	8005154 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 800511a:	f240 1301 	movw	r3, #257	; 0x101
 800511e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8005120:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8005122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005124:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	f107 0218 	add.w	r2, r7, #24
 800512e:	4619      	mov	r1, r3
 8005130:	f7ff fb5a 	bl	80047e8 <uavcan_primitive_array_Real64_1_0_serialize_>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if (_err12_ < 0)
 800513a:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 800513e:	2b00      	cmp	r3, #0
 8005140:	da02      	bge.n	8005148 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8005142:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8005146:	e07c      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800514e:	4413      	add	r3, r2
 8005150:	667b      	str	r3, [r7, #100]	; 0x64
 8005152:	e046      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800515a:	2b0d      	cmp	r3, #13
 800515c:	d11c      	bne.n	8005198 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 800515e:	f240 1301 	movw	r3, #257	; 0x101
 8005162:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8005164:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8005166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005168:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4413      	add	r3, r2
 800516e:	f107 0214 	add.w	r2, r7, #20
 8005172:	4619      	mov	r1, r3
 8005174:	f7ff fa5a 	bl	800462c <uavcan_primitive_array_Real32_1_0_serialize_>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (_err13_ < 0)
 800517e:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8005182:	2b00      	cmp	r3, #0
 8005184:	da02      	bge.n	800518c <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 8005186:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 800518a:	e05a      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005192:	4413      	add	r3, r2
 8005194:	667b      	str	r3, [r7, #100]	; 0x64
 8005196:	e024      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800519e:	2b0e      	cmp	r3, #14
 80051a0:	d11c      	bne.n	80051dc <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 80051a2:	f240 1301 	movw	r3, #257	; 0x101
 80051a6:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80051a8:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 80051aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ac:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	f107 0210 	add.w	r2, r7, #16
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7ff f91c 	bl	80043f4 <uavcan_primitive_array_Real16_1_0_serialize_>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (_err14_ < 0)
 80051c2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da02      	bge.n	80051d0 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 80051ca:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80051ce:	e038      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051d6:	4413      	add	r3, r2
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
 80051da:	e002      	b.n	80051e2 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80051dc:	f06f 030a 	mvn.w	r3, #10
 80051e0:	e02f      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80051e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d025      	beq.n	8005238 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80051ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f1c3 0308 	rsb	r3, r3, #8
 80051fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80051fe:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005202:	9302      	str	r3, [sp, #8]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9cd 2300 	strd	r2, r3, [sp]
 8005210:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005212:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005214:	68b8      	ldr	r0, [r7, #8]
 8005216:	f7fd f939 	bl	800248c <nunavutSetUxx>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (_err15_ < 0)
 8005220:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005224:	2b00      	cmp	r3, #0
 8005226:	da02      	bge.n	800522e <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8005228:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800522c:	e009      	b.n	8005242 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 800522e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005234:	4413      	add	r3, r2
 8005236:	667b      	str	r3, [r7, #100]	; 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523a:	08da      	lsrs	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3768      	adds	r7, #104	; 0x68
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b09a      	sub	sp, #104	; 0x68
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <uavcan_register_Value_1_0_deserialize_+0x26>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <uavcan_register_Value_1_0_deserialize_+0x26>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <uavcan_register_Value_1_0_deserialize_+0x2c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005272:	f06f 0301 	mvn.w	r3, #1
 8005276:	e29b      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800527e:	4bb0      	ldr	r3, [pc, #704]	; (8005540 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8005280:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	667b      	str	r3, [r7, #100]	; 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005294:	3308      	adds	r3, #8
 8005296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005298:	429a      	cmp	r2, r3
 800529a:	d308      	bcc.n	80052ae <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 800529c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529e:	08db      	lsrs	r3, r3, #3
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	4413      	add	r3, r2
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80052ac:	e003      	b.n	80052b6 <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 80052b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b8:	3308      	adds	r3, #8
 80052ba:	667b      	str	r3, [r7, #100]	; 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d123      	bne.n	800530e <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80052c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fc ffcd 	bl	800226c <nunavutChooseMin>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80052da:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 80052dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052de:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4413      	add	r3, r2
 80052e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052e8:	4619      	mov	r1, r3
 80052ea:	f7ff fb77 	bl	80049dc <uavcan_primitive_Empty_1_0_deserialize_>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 80052f4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da02      	bge.n	8005302 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 80052fc:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8005300:	e256      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8005302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005308:	4413      	add	r3, r2
 800530a:	667b      	str	r3, [r7, #100]	; 0x64
 800530c:	e242      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005314:	2b01      	cmp	r3, #1
 8005316:	d123      	bne.n	8005360 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531a:	08db      	lsrs	r3, r3, #3
 800531c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800531e:	4618      	mov	r0, r3
 8005320:	f7fc ffa4 	bl	800226c <nunavutChooseMin>
 8005324:	4602      	mov	r2, r0
 8005326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 800532c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 800532e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005330:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800533a:	4619      	mov	r1, r3
 800533c:	f7ff fbee 	bl	8004b1c <uavcan_primitive_String_1_0_deserialize_>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 8005346:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800534a:	2b00      	cmp	r3, #0
 800534c:	da02      	bge.n	8005354 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 800534e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8005352:	e22d      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8005354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800535a:	4413      	add	r3, r2
 800535c:	667b      	str	r3, [r7, #100]	; 0x64
 800535e:	e219      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005366:	2b02      	cmp	r3, #2
 8005368:	d123      	bne.n	80053b2 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800536a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005370:	4618      	mov	r0, r3
 8005372:	f7fc ff7b 	bl	800226c <nunavutChooseMin>
 8005376:	4602      	mov	r2, r0
 8005378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 800537e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8005380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005382:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	4413      	add	r3, r2
 8005388:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800538c:	4619      	mov	r1, r3
 800538e:	f7ff fc9d 	bl	8004ccc <uavcan_primitive_Unstructured_1_0_deserialize_>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 8005398:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800539c:	2b00      	cmp	r3, #0
 800539e:	da02      	bge.n	80053a6 <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 80053a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80053a4:	e204      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053ac:	4413      	add	r3, r2
 80053ae:	667b      	str	r3, [r7, #100]	; 0x64
 80053b0:	e1f0      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d123      	bne.n	8005404 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80053bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053be:	08db      	lsrs	r3, r3, #3
 80053c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fc ff52 	bl	800226c <nunavutChooseMin>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80053d0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 80053d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d4:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4413      	add	r3, r2
 80053da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053de:	4619      	mov	r1, r3
 80053e0:	f7fe f8c6 	bl	8003570 <uavcan_primitive_array_Bit_1_0_deserialize_>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 80053ea:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da02      	bge.n	80053f8 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 80053f2:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80053f6:	e1db      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 80053f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053fe:	4413      	add	r3, r2
 8005400:	667b      	str	r3, [r7, #100]	; 0x64
 8005402:	e1c7      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800540a:	2b04      	cmp	r3, #4
 800540c:	d123      	bne.n	8005456 <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800540e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005414:	4618      	mov	r0, r3
 8005416:	f7fc ff29 	bl	800226c <nunavutChooseMin>
 800541a:	4602      	mov	r2, r0
 800541c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8005422:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4413      	add	r3, r2
 800542c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005430:	4619      	mov	r1, r3
 8005432:	f7fe fb2d 	bl	8003a90 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 800543c:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8005440:	2b00      	cmp	r3, #0
 8005442:	da02      	bge.n	800544a <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8005444:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8005448:	e1b2      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005450:	4413      	add	r3, r2
 8005452:	667b      	str	r3, [r7, #100]	; 0x64
 8005454:	e19e      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800545c:	2b05      	cmp	r3, #5
 800545e:	d123      	bne.n	80054a8 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005462:	08db      	lsrs	r3, r3, #3
 8005464:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f7fc ff00 	bl	800226c <nunavutChooseMin>
 800546c:	4602      	mov	r2, r0
 800546e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8005474:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8005476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005478:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005482:	4619      	mov	r1, r3
 8005484:	f7fe fa26 	bl	80038d4 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 800548e:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8005492:	2b00      	cmp	r3, #0
 8005494:	da02      	bge.n	800549c <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 8005496:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800549a:	e189      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054a2:	4413      	add	r3, r2
 80054a4:	667b      	str	r3, [r7, #100]	; 0x64
 80054a6:	e175      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d123      	bne.n	80054fa <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80054b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fc fed7 	bl	800226c <nunavutChooseMin>
 80054be:	4602      	mov	r2, r0
 80054c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80054c6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	4413      	add	r3, r2
 80054d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054d4:	4619      	mov	r1, r3
 80054d6:	f7fe f91f 	bl	8003718 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 80054e0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da02      	bge.n	80054ee <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 80054e8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80054ec:	e160      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054f4:	4413      	add	r3, r2
 80054f6:	667b      	str	r3, [r7, #100]	; 0x64
 80054f8:	e14c      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005500:	2b07      	cmp	r3, #7
 8005502:	d125      	bne.n	8005550 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005506:	08db      	lsrs	r3, r3, #3
 8005508:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800550a:	4618      	mov	r0, r3
 800550c:	f7fc feae 	bl	800226c <nunavutChooseMin>
 8005510:	4602      	mov	r2, r0
 8005512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8005518:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 800551a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551c:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005526:	4619      	mov	r1, r3
 8005528:	f7fe fb92 	bl	8003c50 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8005532:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8005536:	2b00      	cmp	r3, #0
 8005538:	da04      	bge.n	8005544 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 800553a:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 800553e:	e137      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
 8005540:	08018218 	.word	0x08018218
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800554a:	4413      	add	r3, r2
 800554c:	667b      	str	r3, [r7, #100]	; 0x64
 800554e:	e121      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005556:	2b08      	cmp	r3, #8
 8005558:	d123      	bne.n	80055a2 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800555a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555c:	08db      	lsrs	r3, r3, #3
 800555e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005560:	4618      	mov	r0, r3
 8005562:	f7fc fe83 	bl	800226c <nunavutChooseMin>
 8005566:	4602      	mov	r2, r0
 8005568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 800556e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8005570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005572:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4413      	add	r3, r2
 8005578:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800557c:	4619      	mov	r1, r3
 800557e:	f7fe fdf9 	bl	8004174 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 8005588:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800558c:	2b00      	cmp	r3, #0
 800558e:	da02      	bge.n	8005596 <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8005590:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005594:	e10c      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800559c:	4413      	add	r3, r2
 800559e:	667b      	str	r3, [r7, #100]	; 0x64
 80055a0:	e0f8      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055a8:	2b09      	cmp	r3, #9
 80055aa:	d123      	bne.n	80055f4 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ae:	08db      	lsrs	r3, r3, #3
 80055b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc fe5a 	bl	800226c <nunavutChooseMin>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80055c0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 80055c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c4:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055ce:	4619      	mov	r1, r3
 80055d0:	f7fe fcf2 	bl	8003fb8 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 80055da:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da02      	bge.n	80055e8 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 80055e2:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80055e6:	e0e3      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055ee:	4413      	add	r3, r2
 80055f0:	667b      	str	r3, [r7, #100]	; 0x64
 80055f2:	e0cf      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055fa:	2b0a      	cmp	r3, #10
 80055fc:	d123      	bne.n	8005646 <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005600:	08db      	lsrs	r3, r3, #3
 8005602:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005604:	4618      	mov	r0, r3
 8005606:	f7fc fe31 	bl	800226c <nunavutChooseMin>
 800560a:	4602      	mov	r2, r0
 800560c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005612:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8005614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005616:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4413      	add	r3, r2
 800561c:	f107 0220 	add.w	r2, r7, #32
 8005620:	4619      	mov	r1, r3
 8005622:	f7fe fbeb 	bl	8003dfc <uavcan_primitive_array_Natural16_1_0_deserialize_>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 800562c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005630:	2b00      	cmp	r3, #0
 8005632:	da02      	bge.n	800563a <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 8005634:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005638:	e0ba      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005640:	4413      	add	r3, r2
 8005642:	667b      	str	r3, [r7, #100]	; 0x64
 8005644:	e0a6      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800564c:	2b0b      	cmp	r3, #11
 800564e:	d123      	bne.n	8005698 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005656:	4618      	mov	r0, r3
 8005658:	f7fc fe08 	bl	800226c <nunavutChooseMin>
 800565c:	4602      	mov	r2, r0
 800565e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005664:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 8005666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005668:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	4413      	add	r3, r2
 800566e:	f107 021c 	add.w	r2, r7, #28
 8005672:	4619      	mov	r1, r3
 8005674:	f7fe fe5e 	bl	8004334 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 800567e:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8005682:	2b00      	cmp	r3, #0
 8005684:	da02      	bge.n	800568c <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 8005686:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800568a:	e091      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005692:	4413      	add	r3, r2
 8005694:	667b      	str	r3, [r7, #100]	; 0x64
 8005696:	e07d      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800569e:	2b0c      	cmp	r3, #12
 80056a0:	d123      	bne.n	80056ea <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80056a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fc fddf 	bl	800226c <nunavutChooseMin>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80056b6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80056b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ba:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	4413      	add	r3, r2
 80056c0:	f107 0218 	add.w	r2, r7, #24
 80056c4:	4619      	mov	r1, r3
 80056c6:	f7ff f905 	bl	80048d4 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 80056d0:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da02      	bge.n	80056de <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 80056d8:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80056dc:	e068      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056e4:	4413      	add	r3, r2
 80056e6:	667b      	str	r3, [r7, #100]	; 0x64
 80056e8:	e054      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80056f0:	2b0d      	cmp	r3, #13
 80056f2:	d123      	bne.n	800573c <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80056f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f6:	08db      	lsrs	r3, r3, #3
 80056f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc fdb6 	bl	800226c <nunavutChooseMin>
 8005700:	4602      	mov	r2, r0
 8005702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8005708:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 800570a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570c:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	f107 0214 	add.w	r2, r7, #20
 8005716:	4619      	mov	r1, r3
 8005718:	f7fe fffe 	bl	8004718 <uavcan_primitive_array_Real32_1_0_deserialize_>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 8005722:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8005726:	2b00      	cmp	r3, #0
 8005728:	da02      	bge.n	8005730 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 800572a:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800572e:	e03f      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005736:	4413      	add	r3, r2
 8005738:	667b      	str	r3, [r7, #100]	; 0x64
 800573a:	e02b      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005742:	2b0e      	cmp	r3, #14
 8005744:	d123      	bne.n	800578e <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800574c:	4618      	mov	r0, r3
 800574e:	f7fc fd8d 	bl	800226c <nunavutChooseMin>
 8005752:	4602      	mov	r2, r0
 8005754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800575a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 800575c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800575e:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	4413      	add	r3, r2
 8005764:	f107 0210 	add.w	r2, r7, #16
 8005768:	4619      	mov	r1, r3
 800576a:	f7fe feed 	bl	8004548 <uavcan_primitive_array_Real16_1_0_deserialize_>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8005774:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005778:	2b00      	cmp	r3, #0
 800577a:	da02      	bge.n	8005782 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 800577c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005780:	e016      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005788:	4413      	add	r3, r2
 800578a:	667b      	str	r3, [r7, #100]	; 0x64
 800578c:	e002      	b.n	8005794 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 800578e:	f06f 030a 	mvn.w	r3, #10
 8005792:	e00d      	b.n	80057b0 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005796:	3307      	adds	r3, #7
 8005798:	f023 0307 	bic.w	r3, r3, #7
 800579c:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800579e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80057a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80057a2:	f7fc fd63 	bl	800226c <nunavutChooseMin>
 80057a6:	4603      	mov	r3, r0
 80057a8:	08da      	lsrs	r2, r3, #3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3768      	adds	r7, #104	; 0x68
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af04      	add	r7, sp, #16
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80057d6:	f06f 0301 	mvn.w	r3, #1
 80057da:	e043      	b.n	8005864 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	2b37      	cmp	r3, #55	; 0x37
 80057e8:	d802      	bhi.n	80057f0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80057ea:	f06f 0302 	mvn.w	r3, #2
 80057ee:	e039      	b.n	8005864 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	08db      	lsrs	r3, r3, #3
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	4413      	add	r3, r2
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	2207      	movs	r2, #7
 8005800:	4618      	mov	r0, r3
 8005802:	f00e fc78 	bl	80140f6 <memmove>
        offset_bits += 56U;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3338      	adds	r3, #56	; 0x38
 800580a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b00      	cmp	r3, #0
 8005814:	d021      	beq.n	800585a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f1c3 0308 	rsb	r3, r3, #8
 8005824:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	9302      	str	r3, [sp, #8]
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	e9cd 2300 	strd	r2, r3, [sp]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	69b9      	ldr	r1, [r7, #24]
 800583a:	68b8      	ldr	r0, [r7, #8]
 800583c:	f7fc fe26 	bl	800248c <nunavutSetUxx>
 8005840:	4603      	mov	r3, r0
 8005842:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005844:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005848:	2b00      	cmp	r3, #0
 800584a:	da02      	bge.n	8005852 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 800584c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005850:	e008      	b.n	8005864 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	08da      	lsrs	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d006      	beq.n	8005892 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005892:	f06f 0301 	mvn.w	r3, #1
 8005896:	e065      	b.n	8005964 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800589e:	4b33      	ldr	r3, [pc, #204]	; (800596c <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 80058a0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	08db      	lsrs	r3, r3, #3
 80058b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fc fcd7 	bl	800226c <nunavutChooseMin>
 80058be:	4602      	mov	r2, r0
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80058c6:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	4413      	add	r3, r2
 80058d0:	f107 0214 	add.w	r2, r7, #20
 80058d4:	4619      	mov	r1, r3
 80058d6:	f7fd fd6d 	bl	80033b4 <uavcan_register_Name_1_0_deserialize_>
 80058da:	4603      	mov	r3, r0
 80058dc:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 80058de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da02      	bge.n	80058ec <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 80058e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80058ea:	e03b      	b.n	8005964 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3307      	adds	r3, #7
 80058fa:	f023 0307 	bic.w	r3, r3, #7
 80058fe:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc fcb0 	bl	800226c <nunavutChooseMin>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	f107 0210 	add.w	r2, r7, #16
 8005926:	4619      	mov	r1, r3
 8005928:	f7ff fc90 	bl	800524c <uavcan_register_Value_1_0_deserialize_>
 800592c:	4603      	mov	r3, r0
 800592e:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8005930:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005934:	2b00      	cmp	r3, #0
 8005936:	da02      	bge.n	800593e <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 8005938:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800593c:	e012      	b.n	8005964 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3307      	adds	r3, #7
 800594c:	f023 0307 	bic.w	r3, r3, #7
 8005950:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005952:	6a39      	ldr	r1, [r7, #32]
 8005954:	69f8      	ldr	r0, [r7, #28]
 8005956:	f7fc fc89 	bl	800226c <nunavutChooseMin>
 800595a:	4603      	mov	r3, r0
 800595c:	08da      	lsrs	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3728      	adds	r7, #40	; 0x28
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	08018218 	.word	0x08018218

08005970 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af04      	add	r7, sp, #16
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800598e:	f06f 0301 	mvn.w	r3, #1
 8005992:	e0f0      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	f640 0257 	movw	r2, #2135	; 0x857
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d802      	bhi.n	80059ac <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80059a6:	f06f 0302 	mvn.w	r3, #2
 80059aa:	e0e4      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 80059b0:	2307      	movs	r3, #7
 80059b2:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 80059b4:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	f107 0214 	add.w	r2, r7, #20
 80059c2:	4619      	mov	r1, r3
 80059c4:	f7ff fef8 	bl	80057b8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 80059c8:	4603      	mov	r3, r0
 80059ca:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 80059cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da02      	bge.n	80059da <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 80059d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059d8:	e0cd      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	4413      	add	r3, r2
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	7a1b      	ldrb	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 80059ec:	2101      	movs	r1, #1
 80059ee:	e000      	b.n	80059f2 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 80059f0:	2100      	movs	r1, #0
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	460a      	mov	r2, r1
 80059fc:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	3301      	adds	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	7a5b      	ldrb	r3, [r3, #9]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	08db      	lsrs	r3, r3, #3
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	4413      	add	r3, r2
 8005a14:	7819      	ldrb	r1, [r3, #0]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	4403      	add	r3, r0
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e014      	b.n	8005a5e <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	7819      	ldrb	r1, [r3, #0]
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	2201      	movs	r2, #1
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	08db      	lsrs	r3, r3, #3
 8005a54:	68b8      	ldr	r0, [r7, #8]
 8005a56:	4403      	add	r3, r0
 8005a58:	400a      	ands	r2, r1
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	3301      	adds	r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005a64:	2306      	movs	r3, #6
 8005a66:	9302      	str	r3, [sp, #8]
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9cd 2300 	strd	r2, r3, [sp]
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	6a39      	ldr	r1, [r7, #32]
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f7fc fd07 	bl	800248c <nunavutSetUxx>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005a82:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da02      	bge.n	8005a90 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8005a8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a8e:	e072      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	3306      	adds	r3, #6
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d021      	beq.n	8005ae4 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f1c3 0308 	rsb	r3, r3, #8
 8005aae:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005ab0:	7f7b      	ldrb	r3, [r7, #29]
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	e9cd 2300 	strd	r2, r3, [sp]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	6a39      	ldr	r1, [r7, #32]
 8005ac4:	68b8      	ldr	r0, [r7, #8]
 8005ac6:	f7fc fce1 	bl	800248c <nunavutSetUxx>
 8005aca:	4603      	mov	r3, r0
 8005acc:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005ace:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da02      	bge.n	8005adc <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005ad6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ada:	e04c      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005adc:	7f7b      	ldrb	r3, [r7, #29]
 8005ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae0:	4413      	add	r3, r2
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005ae4:	f240 1303 	movw	r3, #259	; 0x103
 8005ae8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4413      	add	r3, r2
 8005af8:	f107 0210 	add.w	r2, r7, #16
 8005afc:	4619      	mov	r1, r3
 8005afe:	f7ff f945 	bl	8004d8c <uavcan_register_Value_1_0_serialize_>
 8005b02:	4603      	mov	r3, r0
 8005b04:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 8005b06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da02      	bge.n	8005b14 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8005b0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b12:	e030      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	4413      	add	r3, r2
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d021      	beq.n	8005b6c <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f1c3 0308 	rsb	r3, r3, #8
 8005b36:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8005b38:	7ebb      	ldrb	r3, [r7, #26]
 8005b3a:	9302      	str	r3, [sp, #8]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9cd 2300 	strd	r2, r3, [sp]
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	6a39      	ldr	r1, [r7, #32]
 8005b4c:	68b8      	ldr	r0, [r7, #8]
 8005b4e:	f7fc fc9d 	bl	800248c <nunavutSetUxx>
 8005b52:	4603      	mov	r3, r0
 8005b54:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005b56:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da02      	bge.n	8005b64 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005b5e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005b62:	e008      	b.n	8005b76 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005b64:	7ebb      	ldrb	r3, [r7, #26]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	4413      	add	r3, r2
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	08da      	lsrs	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3728      	adds	r7, #40	; 0x28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08c      	sub	sp, #48	; 0x30
 8005b82:	af04      	add	r7, sp, #16
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <uavcan_node_Version_1_0_serialize_+0x1e>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <uavcan_node_Version_1_0_serialize_+0x1e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005b9c:	f06f 0301 	mvn.w	r3, #1
 8005ba0:	e04b      	b.n	8005c3a <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	2b0f      	cmp	r3, #15
 8005bae:	d802      	bhi.n	8005bb6 <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005bb0:	f06f 0302 	mvn.w	r3, #2
 8005bb4:	e041      	b.n	8005c3a <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	08db      	lsrs	r3, r3, #3
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	7852      	ldrb	r2, [r2, #1]
 8005bda:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	3308      	adds	r3, #8
 8005be0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d021      	beq.n	8005c30 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f1c3 0308 	rsb	r3, r3, #8
 8005bfa:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	9302      	str	r3, [sp, #8]
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9cd 2300 	strd	r2, r3, [sp]
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	69b9      	ldr	r1, [r7, #24]
 8005c10:	68b8      	ldr	r0, [r7, #8]
 8005c12:	f7fc fc3b 	bl	800248c <nunavutSetUxx>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005c1a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da02      	bge.n	8005c28 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 8005c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005c26:	e008      	b.n	8005c3a <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	08da      	lsrs	r2, r3, #3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d006      	beq.n	8005c6a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005c6a:	f06f 0301 	mvn.w	r3, #1
 8005c6e:	e008      	b.n	8005c82 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005c78:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	08018218 	.word	0x08018218

08005c94 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b090      	sub	sp, #64	; 0x40
 8005c98:	af04      	add	r7, sp, #16
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005cb2:	f06f 0301 	mvn.w	r3, #1
 8005cb6:	e16b      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	f640 12c7 	movw	r2, #2503	; 0x9c7
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d802      	bhi.n	8005cd0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005cca:	f06f 0302 	mvn.w	r3, #2
 8005cce:	e15f      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005cd8:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f107 0218 	add.w	r2, r7, #24
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f7ff ff49 	bl	8005b7e <uavcan_node_Version_1_0_serialize_>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 8005cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da02      	bge.n	8005d00 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 8005cfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cfe:	e147      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d06:	4413      	add	r3, r2
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d025      	beq.n	8005d60 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f1c3 0308 	rsb	r3, r3, #8
 8005d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005d26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9cd 2300 	strd	r2, r3, [sp]
 8005d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	f7fc fba5 	bl	800248c <nunavutSetUxx>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 8005d48:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da02      	bge.n	8005d56 <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8005d50:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005d54:	e11c      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8005d56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5c:	4413      	add	r3, r2
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8005d60:	2302      	movs	r3, #2
 8005d62:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f107 0214 	add.w	r2, r7, #20
 8005d74:	4619      	mov	r1, r3
 8005d76:	f7ff ff02 	bl	8005b7e <uavcan_node_Version_1_0_serialize_>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 8005d80:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da02      	bge.n	8005d8e <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8005d88:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005d8c:	e100      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d94:	4413      	add	r3, r2
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d025      	beq.n	8005dee <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f1c3 0308 	rsb	r3, r3, #8
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8005db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	e9cd 2300 	strd	r2, r3, [sp]
 8005dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dca:	68b8      	ldr	r0, [r7, #8]
 8005dcc:	f7fc fb5e 	bl	800248c <nunavutSetUxx>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 8005dd6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da02      	bge.n	8005de4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 8005dde:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005de2:	e0d5      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 8005de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dea:	4413      	add	r3, r2
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 8005dee:	2302      	movs	r3, #2
 8005df0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f107 0210 	add.w	r2, r7, #16
 8005e02:	4619      	mov	r1, r3
 8005e04:	f7ff febb 	bl	8005b7e <uavcan_node_Version_1_0_serialize_>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 8005e0e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da02      	bge.n	8005e1c <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 8005e16:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005e1a:	e0b9      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e22:	4413      	add	r3, r2
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	18d0      	adds	r0, r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3308      	adds	r3, #8
 8005e32:	2208      	movs	r2, #8
 8005e34:	4619      	mov	r1, r3
 8005e36:	f00e f95e 	bl	80140f6 <memmove>
        offset_bits += 64U;
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	3340      	adds	r3, #64	; 0x40
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3310      	adds	r3, #16
 8005e44:	2200      	movs	r2, #0
 8005e46:	9200      	str	r2, [sp, #0]
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	f7fc fa39 	bl	80022c4 <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	3380      	adds	r3, #128	; 0x80
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	2b32      	cmp	r3, #50	; 0x32
 8005e5e:	d902      	bls.n	8005e66 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005e60:	f06f 0309 	mvn.w	r3, #9
 8005e64:	e094      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	b2ca      	uxtb	r2, r1
 8005e74:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	3308      	adds	r3, #8
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	00da      	lsls	r2, r3, #3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3320      	adds	r3, #32
 8005e86:	2100      	movs	r1, #0
 8005e88:	9100      	str	r1, [sp, #0]
 8005e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e8c:	68b8      	ldr	r0, [r7, #8]
 8005e8e:	f7fc fa19 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e9a:	4413      	add	r3, r2
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d902      	bls.n	8005eac <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005ea6:	f06f 0309 	mvn.w	r3, #9
 8005eaa:	e071      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b2ca      	uxtb	r2, r1
 8005eba:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	019a      	lsls	r2, r3, #6
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3358      	adds	r3, #88	; 0x58
 8005ecc:	2100      	movs	r1, #0
 8005ece:	9100      	str	r1, [sp, #0]
 8005ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed2:	68b8      	ldr	r0, [r7, #8]
 8005ed4:	f7fc f9f6 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee0:	4413      	add	r3, r2
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005eea:	2bde      	cmp	r3, #222	; 0xde
 8005eec:	d902      	bls.n	8005ef4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005eee:	f06f 0309 	mvn.w	r3, #9
 8005ef2:	e04d      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	b2ca      	uxtb	r2, r1
 8005f04:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	3308      	adds	r3, #8
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3368      	adds	r3, #104	; 0x68
 8005f18:	2100      	movs	r1, #0
 8005f1a:	9100      	str	r1, [sp, #0]
 8005f1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f7fc f9d0 	bl	80022c4 <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2e:	4413      	add	r3, r2
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d024      	beq.n	8005f86 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	f1c3 0308 	rsb	r3, r3, #8
 8005f4a:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f52:	9302      	str	r3, [sp, #8]
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9cd 2300 	strd	r2, r3, [sp]
 8005f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f64:	68b8      	ldr	r0, [r7, #8]
 8005f66:	f7fc fa91 	bl	800248c <nunavutSetUxx>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8005f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da02      	bge.n	8005f7c <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 8005f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f7a:	e009      	b.n	8005f90 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8005f7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f82:	4413      	add	r3, r2
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	08da      	lsrs	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3730      	adds	r7, #48	; 0x30
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fab9 	bl	800751c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
      { }
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	f7fb ffa3 	bl	8001f1e <Error_Handler>
 8005fd8:	bf00      	nop
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8005fdc:	b5b0      	push	{r4, r5, r7, lr}
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	f004 f994 	bl	800a30c <HAL_GetTick>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	2200      	movs	r2, #0
 8005ff0:	461c      	mov	r4, r3
 8005ff2:	4615      	mov	r5, r2
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	bdb0      	pop	{r4, r5, r7, pc}

08005ffe <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f001 faf0 	bl	8007600 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff ffdf 	bl	8005ffe <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff9f 	bl	8005f98 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800606e:	687c      	ldr	r4, [r7, #4]
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ffd7 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	f641 5255 	movw	r2, #7509	; 0x1d55
 8006084:	4619      	mov	r1, r3
 8006086:	4620      	mov	r0, r4
 8006088:	f001 fad1 	bl	800762e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff ffda 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006096:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd90      	pop	{r4, r7, pc}
 80060a6:	bf00      	nop
 80060a8:	080182a0 	.word	0x080182a0

080060ac <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 80060c4:	b590      	push	{r4, r7, lr}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 80060ce:	687c      	ldr	r4, [r7, #4]
 80060d0:	f107 0308 	add.w	r3, r7, #8
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff ffa7 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80060dc:	f107 0308 	add.w	r3, r7, #8
 80060e0:	f240 4264 	movw	r2, #1124	; 0x464
 80060e4:	4619      	mov	r1, r3
 80060e6:	4620      	mov	r0, r4
 80060e8:	f001 fabf 	bl	800766a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80060ec:	f107 0308 	add.w	r3, r7, #8
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ffaa 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80060f6:	4a04      	ldr	r2, [pc, #16]	; (8006108 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	bd90      	pop	{r4, r7, pc}
 8006106:	bf00      	nop
 8006108:	08018280 	.word	0x08018280

0800610c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
    {
    	if(js_in.angular_velocity.radian_per_second)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	edd3 7a01 	vldr	s15, [r3, #4]
 800611e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006126:	d012      	beq.n	800614e <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x42>
    	{
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006128:	2104      	movs	r1, #4
 800612a:	4816      	ldr	r0, [pc, #88]	; (8006184 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x78>)
 800612c:	f005 fad4 	bl	800b6d8 <HAL_GPIO_TogglePin>
    		tmc5160_move(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps));
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	edd3 7a01 	vldr	s15, [r3, #4]
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x7c>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	eeb0 0a67 	vmov.f32	s0, s15
 8006140:	f004 f82a 	bl	800a198 <rad_to_steps>
 8006144:	4603      	mov	r3, r0
 8006146:	4618      	mov	r0, r3
 8006148:	f003 fb92 	bl	8009870 <tmc5160_move>
//    	{
//
//    		pos_in = js_in.angular_position.radian;
//    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, 2560000)); //jc.full_steps
//    	}
    }
 800614c:	e016      	b.n	800617c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x70>
    		js_in.angular_position.radian != steps_to_rads(tmc5160_position_read(), jc.full_steps);
 800614e:	f003 fd11 	bl	8009b74 <tmc5160_position_read>
 8006152:	4603      	mov	r3, r0
 8006154:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x7c>)
 8006156:	6892      	ldr	r2, [r2, #8]
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f003 ffe8 	bl	800a130 <steps_to_rads>
    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	edd3 7a00 	vldr	s15, [r3]
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x7c>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4618      	mov	r0, r3
 800616c:	eeb0 0a67 	vmov.f32	s0, s15
 8006170:	f004 f812 	bl	800a198 <rad_to_steps>
 8006174:	4603      	mov	r3, r0
 8006176:	4618      	mov	r0, r3
 8006178:	f003 fb48 	bl	800980c <tmc5160_position>
    }
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	48000c00 	.word	0x48000c00
 8006188:	20000434 	.word	0x20000434

0800618c <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8006196:	687c      	ldr	r4, [r7, #4]
 8006198:	f107 0308 	add.w	r3, r7, #8
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff43 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80061a4:	f107 0108 	add.w	r1, r7, #8
 80061a8:	2302      	movs	r3, #2
 80061aa:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80061ae:	4620      	mov	r0, r4
 80061b0:	f001 fa8a 	bl	80076c8 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ff46 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80061be:	4a04      	ldr	r2, [pc, #16]	; (80061d0 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd90      	pop	{r4, r7, pc}
 80061ce:	bf00      	nop
 80061d0:	08018260 	.word	0x08018260

080061d4 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 80061d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061d8:	b0e7      	sub	sp, #412	; 0x19c
 80061da:	af06      	add	r7, sp, #24
 80061dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80061e4:	6018      	str	r0, [r3, #0]
 80061e6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061ea:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80061ee:	6019      	str	r1, [r3, #0]
 80061f0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80061f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80061f8:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 80061fa:	466b      	mov	r3, sp
 80061fc:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 80061fe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006202:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006206:	4618      	mov	r0, r3
 8006208:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800620c:	461a      	mov	r2, r3
 800620e:	2100      	movs	r1, #0
 8006210:	f00d ff8b 	bl	801412a <memset>
 8006214:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006218:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800621c:	2201      	movs	r2, #1
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006224:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006228:	2201      	movs	r2, #1
 800622a:	709a      	strb	r2, [r3, #2]
 800622c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006230:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006234:	2201      	movs	r2, #1
 8006236:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8006238:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800623c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    node_info_response.software_image_crc.count = 0;
 8006246:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800624a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800624e:	2200      	movs	r2, #0
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
    size_t name_len = 8;
 8006252:	2308      	movs	r3, #8
 8006254:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    char joint_name[name_len];
 8006258:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800625c:	460b      	mov	r3, r1
 800625e:	3b01      	subs	r3, #1
 8006260:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006264:	2300      	movs	r3, #0
 8006266:	4688      	mov	r8, r1
 8006268:	4699      	mov	r9, r3
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800627a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800627e:	2300      	movs	r3, #0
 8006280:	460c      	mov	r4, r1
 8006282:	461d      	mov	r5, r3
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	00eb      	lsls	r3, r5, #3
 800628e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006292:	00e2      	lsls	r2, r4, #3
 8006294:	1dcb      	adds	r3, r1, #7
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	ebad 0d03 	sub.w	sp, sp, r3
 800629e:	ab06      	add	r3, sp, #24
 80062a0:	3300      	adds	r3, #0
 80062a2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 80062a6:	2204      	movs	r2, #4
 80062a8:	4939      	ldr	r1, [pc, #228]	; (8006390 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 80062aa:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 80062ae:	f00d feaf 	bl	8014010 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 80062b2:	f107 0320 	add.w	r3, r7, #32
 80062b6:	3320      	adds	r3, #32
 80062b8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80062bc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00e f818 	bl	80142f6 <memcpy>
    node_info_response.name.count = name_len;
 80062c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80062ce:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54
    uint32_t word0 = 1;
 80062d4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 80062e0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80062e8:	2202      	movs	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 80062ec:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80062f4:	2203      	movs	r2, #3
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80062fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006300:	681a      	ldr	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8006302:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006306:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800630a:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 800630c:	f107 0320 	add.w	r3, r7, #32
 8006310:	3310      	adds	r3, #16
 8006312:	3304      	adds	r3, #4
 8006314:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8006318:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8006320:	f107 0320 	add.w	r3, r7, #32
 8006324:	3310      	adds	r3, #16
 8006326:	3308      	adds	r3, #8
 8006328:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800632c:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 8006334:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006338:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800633c:	2204      	movs	r2, #4
 800633e:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8006340:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006344:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f9ec 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006354:	4604      	mov	r4, r0
 8006356:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800635a:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 800635e:	f107 0020 	add.w	r0, r7, #32
 8006362:	2304      	movs	r3, #4
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006370:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	4a07      	ldr	r2, [pc, #28]	; (8006398 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 800637a:	4601      	mov	r1, r0
 800637c:	4620      	mov	r0, r4
 800637e:	f001 f9e1 	bl	8007744 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 8006382:	46b5      	mov	sp, r6
}
 8006384:	bf00      	nop
 8006386:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006390:	08018210 	.word	0x08018210
 8006394:	000f4240 	.word	0x000f4240
 8006398:	200004f0 	.word	0x200004f0

0800639c <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 80063a6:	687c      	ldr	r4, [r7, #4]
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff fe3b 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80063b4:	f107 0108 	add.w	r1, r7, #8
 80063b8:	2302      	movs	r3, #2
 80063ba:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80063be:	4620      	mov	r0, r4
 80063c0:	f001 fa0a 	bl	80077d8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80063c4:	f107 0308 	add.w	r3, r7, #8
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fe3e 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80063ce:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd90      	pop	{r4, r7, pc}
 80063de:	bf00      	nop
 80063e0:	08018240 	.word	0x08018240

080063e4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	f2ad 5d7c 	subw	sp, sp, #1404	; 0x57c
 80063ea:	af06      	add	r7, sp, #24
 80063ec:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063f0:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80063f4:	6018      	str	r0, [r3, #0]
 80063f6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80063fa:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80063fe:	6019      	str	r1, [r3, #0]
 8006400:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006404:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8006408:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 800640a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800640e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006412:	4618      	mov	r0, r3
 8006414:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006418:	461a      	mov	r2, r3
 800641a:	2100      	movs	r1, #0
 800641c:	f00d fe85 	bl	801412a <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8006420:	f7ff fddc 	bl	8005fdc <micros_64>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 800642c:	f5a1 710c 	sub.w	r1, r1, #560	; 0x230
 8006430:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 8006434:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006438:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800643c:	4618      	mov	r0, r3
 800643e:	f44f 7304 	mov.w	r3, #528	; 0x210
 8006442:	461a      	mov	r2, r3
 8006444:	2100      	movs	r1, #0
 8006446:	f00d fe70 	bl	801412a <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006456:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 8006460:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006464:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2204      	movs	r2, #4
 800646c:	49cd      	ldr	r1, [pc, #820]	; (80067a4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c0>)
 800646e:	4618      	mov	r0, r3
 8006470:	f00d fe31 	bl	80140d6 <memcmp>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d15c      	bne.n	8006534 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 800647a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800647e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006488:	2b04      	cmp	r3, #4
 800648a:	d113      	bne.n	80064b4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800648c:	2104      	movs	r1, #4
 800648e:	48c6      	ldr	r0, [pc, #792]	; (80067a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c4>)
 8006490:	f005 f922 	bl	800b6d8 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 8006494:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006498:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80064a2:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80064a6:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 80064aa:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80064ae:	4618      	mov	r0, r3
 80064b0:	f003 f9de 	bl	8009870 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 80064b4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064b8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80064bc:	2201      	movs	r2, #1
 80064be:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80064c0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064c4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80064c8:	2201      	movs	r2, #1
 80064ca:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 80064cc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064d0:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80064d4:	2204      	movs	r2, #4
 80064d6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 80064da:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80064de:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80064e2:	4618      	mov	r0, r3
 80064e4:	f44f 7384 	mov.w	r3, #264	; 0x108
 80064e8:	461a      	mov	r2, r3
 80064ea:	2100      	movs	r1, #0
 80064ec:	f00d fe1d 	bl	801412a <memset>
        result.value.elements[0] = tv; //PZDC!!!
 80064f0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80064fc:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 8006500:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8006504:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006508:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800650c:	2201      	movs	r2, #1
 800650e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer64 = result;
 8006512:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006516:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800651a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800651e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	f44f 7384 	mov.w	r3, #264	; 0x108
 800652a:	461a      	mov	r2, r3
 800652c:	f00d fee3 	bl	80142f6 <memcpy>
 8006530:	f000 bd08 	b.w	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 8006534:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006538:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2204      	movs	r2, #4
 8006540:	499a      	ldr	r1, [pc, #616]	; (80067ac <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c8>)
 8006542:	4618      	mov	r0, r3
 8006544:	f00d fdc7 	bl	80140d6 <memcmp>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d161      	bne.n	8006612 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x22e>
        if (register_access_request.value._tag_ == 9) {
 800654e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006552:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800655c:	2b09      	cmp	r3, #9
 800655e:	d115      	bne.n	800658c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a8>
            tmc5160_move(register_access_request.value.integer32.value.elements[0]);
 8006560:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006564:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800656e:	4618      	mov	r0, r3
 8006570:	f003 f97e 	bl	8009870 <tmc5160_move>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006574:	2104      	movs	r1, #4
 8006576:	488c      	ldr	r0, [pc, #560]	; (80067a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c4>)
 8006578:	f005 f8ae 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006588:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 800658c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006590:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006594:	2201      	movs	r2, #1
 8006596:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006598:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800659c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80065a0:	2201      	movs	r2, #1
 80065a2:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 80065a4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065a8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80065ac:	2209      	movs	r2, #9
 80065ae:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 80065b2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065b6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065ba:	4618      	mov	r0, r3
 80065bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80065c0:	461a      	mov	r2, r3
 80065c2:	2100      	movs	r1, #0
 80065c4:	f00d fdb1 	bl	801412a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 80065c8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065cc:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80065d6:	461a      	mov	r2, r3
 80065d8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065dc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065e0:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 80065e2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065e6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 80065f0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065f4:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80065f8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80065fc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006608:	461a      	mov	r2, r3
 800660a:	f00d fe74 	bl	80142f6 <memcpy>
 800660e:	f000 bc99 	b.w	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 8006612:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006616:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2203      	movs	r2, #3
 800661e:	4964      	ldr	r1, [pc, #400]	; (80067b0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3cc>)
 8006620:	4618      	mov	r0, r3
 8006622:	f00d fd58 	bl	80140d6 <memcmp>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d159      	bne.n	80066e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2fc>

        if (register_access_request.value._tag_ == 9) {
 800662c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006630:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800663a:	2b09      	cmp	r3, #9
 800663c:	d113      	bne.n	8006666 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x282>
        	tmc5160_set_default_vel();
 800663e:	f003 f98f 	bl	8009960 <tmc5160_set_default_vel>
            tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 8006642:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006646:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006650:	4618      	mov	r0, r3
 8006652:	f003 f8db 	bl	800980c <tmc5160_position>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006656:	2104      	movs	r1, #4
 8006658:	4853      	ldr	r0, [pc, #332]	; (80067a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c4>)
 800665a:	f005 f83d 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	js_pos_v = tmc5160_position_read();
 800665e:	f003 fa89 	bl	8009b74 <tmc5160_position_read>
 8006662:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
        }
        register_access_response.persistent = true;
 8006666:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800666a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800666e:	2201      	movs	r2, #1
 8006670:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006672:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006676:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800667a:	2201      	movs	r2, #1
 800667c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 800667e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006682:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006686:	2209      	movs	r2, #9
 8006688:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 800668c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006690:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006694:	4618      	mov	r0, r3
 8006696:	f44f 7382 	mov.w	r3, #260	; 0x104
 800669a:	461a      	mov	r2, r3
 800669c:	2100      	movs	r1, #0
 800669e:	f00d fd44 	bl	801412a <memset>
        result.value.elements[0] = js_pos_v;
 80066a2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066a6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80066aa:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80066ae:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 80066b0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066b4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80066b8:	2201      	movs	r2, #1
 80066ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 80066be:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066c2:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80066c6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066ca:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80066d6:	461a      	mov	r2, r3
 80066d8:	f00d fe0d 	bl	80142f6 <memcpy>
 80066dc:	f000 bc32 	b.w	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 80066e0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066e4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2207      	movs	r2, #7
 80066ec:	4931      	ldr	r1, [pc, #196]	; (80067b4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3d0>)
 80066ee:	4618      	mov	r0, r3
 80066f0:	f00d fcf1 	bl	80140d6 <memcmp>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d15e      	bne.n	80067b8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3d4>
        if (register_access_request.value._tag_ == 9) {
 80066fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066fe:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006708:	2b09      	cmp	r3, #9
 800670a:	d10f      	bne.n	800672c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x348>
        	js_pos_v = tmc5160_position_read();
 800670c:	f003 fa32 	bl	8009b74 <tmc5160_position_read>
 8006710:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006714:	2104      	movs	r1, #4
 8006716:	4824      	ldr	r0, [pc, #144]	; (80067a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c4>)
 8006718:	f004 ffde 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006728:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 800672c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006730:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006734:	2201      	movs	r2, #1
 8006736:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006738:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800673c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006740:	2201      	movs	r2, #1
 8006742:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006744:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006748:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800674c:	2209      	movs	r2, #9
 800674e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006752:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006756:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800675a:	4618      	mov	r0, r3
 800675c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006760:	461a      	mov	r2, r3
 8006762:	2100      	movs	r1, #0
 8006764:	f00d fce1 	bl	801412a <memset>
        result.value.elements[0] = js_pos_v;
 8006768:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800676c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006770:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8006774:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006776:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800677a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800677e:	2201      	movs	r2, #1
 8006780:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 8006784:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006788:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800678c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006790:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006794:	4610      	mov	r0, r2
 8006796:	4619      	mov	r1, r3
 8006798:	f44f 7382 	mov.w	r3, #260	; 0x104
 800679c:	461a      	mov	r2, r3
 800679e:	f00d fdaa 	bl	80142f6 <memcpy>
 80067a2:	e3cf      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
 80067a4:	20000000 	.word	0x20000000
 80067a8:	48000c00 	.word	0x48000c00
 80067ac:	2000000c 	.word	0x2000000c
 80067b0:	20000014 	.word	0x20000014
 80067b4:	2000001c 	.word	0x2000001c
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 80067b8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067bc:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2203      	movs	r2, #3
 80067c4:	49cf      	ldr	r1, [pc, #828]	; (8006b04 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x720>)
 80067c6:	4618      	mov	r0, r3
 80067c8:	f00d fc85 	bl	80140d6 <memcmp>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d15f      	bne.n	8006892 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4ae>
        if (register_access_request.value._tag_ == 7) {
 80067d2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067d6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80067e0:	2b07      	cmp	r3, #7
 80067e2:	d115      	bne.n	8006810 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x42c>
            tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 80067e4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067e8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f993 3108 	ldrsb.w	r3, [r3, #264]	; 0x108
 80067f2:	4618      	mov	r0, r3
 80067f4:	f003 fb4c 	bl	8009e90 <tmc5160_set_motor_direction>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80067f8:	2104      	movs	r1, #4
 80067fa:	48c3      	ldr	r0, [pc, #780]	; (8006b08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x724>)
 80067fc:	f004 ff6c 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800680c:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006810:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006814:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006818:	2201      	movs	r2, #1
 800681a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800681c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006820:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006824:	2201      	movs	r2, #1
 8006826:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006828:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800682c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006830:	220b      	movs	r2, #11
 8006832:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006836:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800683a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800683e:	4618      	mov	r0, r3
 8006840:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006844:	461a      	mov	r2, r3
 8006846:	2100      	movs	r1, #0
 8006848:	f00d fc6f 	bl	801412a <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 800684c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006850:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f993 2108 	ldrsb.w	r2, [r3, #264]	; 0x108
 800685a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800685e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006862:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006864:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006868:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800686c:	2201      	movs	r2, #1
 800686e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer8 = result;
 8006872:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006876:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800687a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800687e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	f44f 7382 	mov.w	r3, #260	; 0x104
 800688a:	461a      	mov	r2, r3
 800688c:	f00d fd33 	bl	80142f6 <memcpy>
 8006890:	e358      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    	}
    else if (memcmp(register_access_request.name.name.elements, arm_reg_name, ARM_REG_NAME_LEN) == 0) {
 8006892:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006896:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2203      	movs	r2, #3
 800689e:	499b      	ldr	r1, [pc, #620]	; (8006b0c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x728>)
 80068a0:	4618      	mov	r0, r3
 80068a2:	f00d fc18 	bl	80140d6 <memcmp>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d163      	bne.n	8006974 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x590>
        if (register_access_request.value._tag_ == 7) {
 80068ac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068b0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80068ba:	2b07      	cmp	r3, #7
 80068bc:	d119      	bne.n	80068f2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x50e>
        	if(register_access_request.value.integer8.value.elements[0])
 80068be:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068c2:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f993 3108 	ldrsb.w	r3, [r3, #264]	; 0x108
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4f2>
        	{
        		tmc5160_arm();
 80068d0:	f003 fb46 	bl	8009f60 <tmc5160_arm>
 80068d4:	e001      	b.n	80068da <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4f6>
        	}
        	else
        	{
        		tmc5160_disarm();
 80068d6:	f003 fb37 	bl	8009f48 <tmc5160_disarm>
        	}
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80068da:	2104      	movs	r1, #4
 80068dc:	488a      	ldr	r0, [pc, #552]	; (8006b08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x724>)
 80068de:	f004 fefb 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80068ee:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 80068f2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068f6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80068fa:	2201      	movs	r2, #1
 80068fc:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80068fe:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006902:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006906:	2201      	movs	r2, #1
 8006908:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 800690a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800690e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006912:	220b      	movs	r2, #11
 8006914:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006918:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800691c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006920:	4618      	mov	r0, r3
 8006922:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006926:	461a      	mov	r2, r3
 8006928:	2100      	movs	r1, #0
 800692a:	f00d fbfe 	bl	801412a <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 800692e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006932:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f993 2108 	ldrsb.w	r2, [r3, #264]	; 0x108
 800693c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006940:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006944:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006946:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800694a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800694e:	2201      	movs	r2, #1
 8006950:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer8 = result;
 8006954:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006958:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800695c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006960:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006964:	4610      	mov	r0, r2
 8006966:	4619      	mov	r1, r3
 8006968:	f44f 7382 	mov.w	r3, #260	; 0x104
 800696c:	461a      	mov	r2, r3
 800696e:	f00d fcc2 	bl	80142f6 <memcpy>
 8006972:	e2e7      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 8006974:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006978:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2205      	movs	r2, #5
 8006980:	4963      	ldr	r1, [pc, #396]	; (8006b10 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x72c>)
 8006982:	4618      	mov	r0, r3
 8006984:	f00d fba7 	bl	80140d6 <memcmp>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d155      	bne.n	8006a3a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x656>
        if (register_access_request.value._tag_ == 11) {
 800698e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006992:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800699c:	2b0b      	cmp	r3, #11
 800699e:	d10b      	bne.n	80069b8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x5d4>
            //ENABLE CALIB
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80069a0:	2104      	movs	r1, #4
 80069a2:	4859      	ldr	r0, [pc, #356]	; (8006b08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x724>)
 80069a4:	f004 fe98 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80069b4:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 80069b8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069bc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069c0:	2201      	movs	r2, #1
 80069c2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80069c4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069c8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069cc:	2201      	movs	r2, #1
 80069ce:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80069d0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069d4:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80069d8:	220b      	movs	r2, #11
 80069da:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 80069de:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069e2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069e6:	4618      	mov	r0, r3
 80069e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80069ec:	461a      	mov	r2, r3
 80069ee:	2100      	movs	r1, #0
 80069f0:	f00d fb9b 	bl	801412a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 80069f4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069f8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006a02:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a06:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a0a:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006a0c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a10:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006a1a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a1e:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006a22:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a26:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006a32:	461a      	mov	r2, r3
 8006a34:	f00d fc5f 	bl	80142f6 <memcpy>
 8006a38:	e284      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8006a3a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a3e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2209      	movs	r2, #9
 8006a46:	4933      	ldr	r1, [pc, #204]	; (8006b14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x730>)
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f00d fb44 	bl	80140d6 <memcmp>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d161      	bne.n	8006b18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x734>
		if (register_access_request.value._tag_ == 9) {
 8006a54:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a58:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	d10b      	bne.n	8006a7e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x69a>
			//SET UPPER LIMIT FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006a66:	2104      	movs	r1, #4
 8006a68:	4827      	ldr	r0, [pc, #156]	; (8006b08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x724>)
 8006a6a:	f004 fe35 	bl	800b6d8 <HAL_GPIO_TogglePin>
			tv = 0;
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006a7a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 8006a7e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a82:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a86:	2201      	movs	r2, #1
 8006a88:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006a8a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a8e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a92:	2201      	movs	r2, #1
 8006a94:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006a96:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a9a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006a9e:	2209      	movs	r2, #9
 8006aa0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006aa4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006aa8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006aac:	4618      	mov	r0, r3
 8006aae:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	f00d fb38 	bl	801412a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006aba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006abe:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ace:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ad2:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006ad4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ad8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006adc:	2201      	movs	r2, #1
 8006ade:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006ae2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ae6:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006aea:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006aee:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006af2:	4610      	mov	r0, r2
 8006af4:	4619      	mov	r1, r3
 8006af6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006afa:	461a      	mov	r2, r3
 8006afc:	f00d fbfb 	bl	80142f6 <memcpy>
 8006b00:	e220      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
 8006b02:	bf00      	nop
 8006b04:	20000018 	.word	0x20000018
 8006b08:	48000c00 	.word	0x48000c00
 8006b0c:	20000008 	.word	0x20000008
 8006b10:	20000024 	.word	0x20000024
 8006b14:	2000002c 	.word	0x2000002c
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8006b18:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b1c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2209      	movs	r2, #9
 8006b24:	49c9      	ldr	r1, [pc, #804]	; (8006e4c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa68>)
 8006b26:	4618      	mov	r0, r3
 8006b28:	f00d fad5 	bl	80140d6 <memcmp>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d156      	bne.n	8006be0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7fc>
		if (register_access_request.value._tag_ == 9) {
 8006b32:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b36:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006b40:	2b09      	cmp	r3, #9
 8006b42:	d10b      	bne.n	8006b5c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x778>
			//SET UPPER LIMIT FOR JOINT
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006b44:	2104      	movs	r1, #4
 8006b46:	48c2      	ldr	r0, [pc, #776]	; (8006e50 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa6c>)
 8006b48:	f004 fdc6 	bl	800b6d8 <HAL_GPIO_TogglePin>
			tv = 0;
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006b58:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 8006b5c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b60:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b64:	2201      	movs	r2, #1
 8006b66:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006b68:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b6c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b70:	2201      	movs	r2, #1
 8006b72:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006b74:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b78:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006b7c:	2209      	movs	r2, #9
 8006b7e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006b82:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b86:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006b90:	461a      	mov	r2, r3
 8006b92:	2100      	movs	r1, #0
 8006b94:	f00d fac9 	bl	801412a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006b98:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b9c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bac:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006bb0:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006bb2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bb6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006bc0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bc4:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006bc8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bcc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f00d fb8c 	bl	80142f6 <memcpy>
 8006bde:	e1b1      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8006be0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006be4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2208      	movs	r2, #8
 8006bec:	4999      	ldr	r1, [pc, #612]	; (8006e54 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa70>)
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f00d fa71 	bl	80140d6 <memcmp>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d15d      	bne.n	8006cb6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8d2>
		if (register_access_request.value._tag_ == 12) {
 8006bfa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bfe:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006c08:	2b0c      	cmp	r3, #12
 8006c0a:	d10d      	bne.n	8006c28 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x844>
			tmc5160_set_zero();
 8006c0c:	f003 f974 	bl	8009ef8 <tmc5160_set_zero>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006c10:	2104      	movs	r1, #4
 8006c12:	488f      	ldr	r0, [pc, #572]	; (8006e50 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa6c>)
 8006c14:	f004 fd60 	bl	800b6d8 <HAL_GPIO_TogglePin>
			tv = 0;
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006c24:	e9c1 2300 	strd	r2, r3, [r1]
		}
		register_access_response.persistent = true;
 8006c28:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c2c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006c30:	2201      	movs	r2, #1
 8006c32:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006c34:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c38:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	721a      	strb	r2, [r3, #8]
		value._tag_ = 12;
 8006c40:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c44:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006c48:	220c      	movs	r2, #12
 8006c4a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 8006c4e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c52:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c56:	4618      	mov	r0, r3
 8006c58:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f00d fa63 	bl	801412a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006c64:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c68:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7f9 fc6e 	bl	8000554 <__aeabi_ui2d>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8006c80:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 8006c84:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8006c88:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c8c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c90:	2201      	movs	r2, #1
 8006c92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.real64 = result;
 8006c96:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c9a:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006c9e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ca2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f00d fb21 	bl	80142f6 <memcpy>
 8006cb4:	e146      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_zero_reg_name, SET_ENC_ZERO_REG_NAME_LEN) == 0) {
 8006cb6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cba:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	220c      	movs	r2, #12
 8006cc2:	4965      	ldr	r1, [pc, #404]	; (8006e58 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa74>)
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f00d fa06 	bl	80140d6 <memcmp>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d155      	bne.n	8006d7c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x998>
        if (register_access_request.value._tag_ == 11) {
 8006cd0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cd4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006cde:	2b0b      	cmp	r3, #11
 8006ce0:	d10b      	bne.n	8006cfa <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x916>
            //SET TYPE OF MOTOR FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	485a      	ldr	r0, [pc, #360]	; (8006e50 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa6c>)
 8006ce6:	f004 fcf7 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006cf6:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006cfa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cfe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006d02:	2201      	movs	r2, #1
 8006d04:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006d06:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d0a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006d0e:	2201      	movs	r2, #1
 8006d10:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006d12:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d16:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006d1a:	220b      	movs	r2, #11
 8006d1c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006d20:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d24:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2100      	movs	r1, #0
 8006d32:	f00d f9fa 	bl	801412a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006d36:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d3a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006d44:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d48:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d4c:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006d4e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d52:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d56:	2201      	movs	r2, #1
 8006d58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006d5c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d60:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006d64:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d68:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d74:	461a      	mov	r2, r3
 8006d76:	f00d fabe 	bl	80142f6 <memcpy>
 8006d7a:	e0e3      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 8006d7c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d80:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2204      	movs	r2, #4
 8006d88:	4934      	ldr	r1, [pc, #208]	; (8006e5c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa78>)
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f00d f9a3 	bl	80140d6 <memcmp>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d166      	bne.n	8006e64 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa80>
        if (register_access_request.value._tag_ == 1) {
 8006d96:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d9a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d10b      	bne.n	8006dc0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x9dc>
            //SET NAME FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006da8:	2104      	movs	r1, #4
 8006daa:	4829      	ldr	r0, [pc, #164]	; (8006e50 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa6c>)
 8006dac:	f004 fc94 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006dbc:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006dc0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dc4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006dc8:	2201      	movs	r2, #1
 8006dca:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006dcc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dd0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 8006dd8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ddc:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_String_1_0 result = {};
 8006de6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dea:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006dee:	4618      	mov	r0, r3
 8006df0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006df4:	461a      	mov	r2, r3
 8006df6:	2100      	movs	r1, #0
 8006df8:	f00d f997 	bl	801412a <memset>

        char mystring[4] = "xyz";
 8006dfc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e00:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006e04:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa7c>)
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e0c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8006e10:	681a      	ldr	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 8006e12:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e16:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e1a:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 8006e1c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e20:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e24:	2203      	movs	r2, #3
 8006e26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value._string = result;
 8006e2a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e2e:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006e32:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e36:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006e42:	461a      	mov	r2, r3
 8006e44:	f00d fa57 	bl	80142f6 <memcpy>
 8006e48:	e07c      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
 8006e4a:	bf00      	nop
 8006e4c:	20000038 	.word	0x20000038
 8006e50:	48000c00 	.word	0x48000c00
 8006e54:	20000054 	.word	0x20000054
 8006e58:	20000044 	.word	0x20000044
 8006e5c:	20000060 	.word	0x20000060
 8006e60:	007a7978 	.word	0x007a7978
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 8006e64:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e68:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	494f      	ldr	r1, [pc, #316]	; (8006fb0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbcc>)
 8006e72:	4618      	mov	r0, r3
 8006e74:	f00d f92f 	bl	80140d6 <memcmp>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d155      	bne.n	8006f2a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb46>
        if (register_access_request.value._tag_ == 11) {
 8006e7e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e82:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006e8c:	2b0b      	cmp	r3, #11
 8006e8e:	d10b      	bne.n	8006ea8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xac4>
            //SET TYPE OF MOTOR FOR JOINT
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006e90:	2104      	movs	r1, #4
 8006e92:	4848      	ldr	r0, [pc, #288]	; (8006fb4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbd0>)
 8006e94:	f004 fc20 	bl	800b6d8 <HAL_GPIO_TogglePin>
        	tv = 0;
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006ea4:	e9c1 2300 	strd	r2, r3, [r1]
        }
        register_access_response.persistent = true;
 8006ea8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006eac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006eb4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006eb8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006ec0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ec4:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006ec8:	220b      	movs	r2, #11
 8006eca:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006ece:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ed2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006edc:	461a      	mov	r2, r3
 8006ede:	2100      	movs	r1, #0
 8006ee0:	f00d f923 	bl	801412a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006ee4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ee8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006ef2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ef6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006efa:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006efc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f00:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006f04:	2201      	movs	r2, #1
 8006f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006f0a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f0e:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006f12:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f16:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006f22:	461a      	mov	r2, r3
 8006f24:	f00d f9e7 	bl	80142f6 <memcpy>
 8006f28:	e00c      	b.n	8006f44 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb60>
    }
    else {
        value._tag_ = 0;
 8006f2a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f2e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 8006f38:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f3c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8006f44:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f48:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006f4c:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8006f50:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8006f54:	3310      	adds	r3, #16
 8006f56:	4611      	mov	r1, r2
 8006f58:	f44f 7204 	mov.w	r2, #528	; 0x210
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f00d f9ca 	bl	80142f6 <memcpy>

    interface->send_response<RegisterAccessResponse>(
 8006f62:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f66:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fbdb 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f76:	4604      	mov	r4, r0
 8006f78:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f7c:	f2a3 515c 	subw	r1, r3, #1372	; 0x55c
 8006f80:	f507 704c 	add.w	r0, r7, #816	; 0x330
 8006f84:	2304      	movs	r3, #4
 8006f86:	9304      	str	r3, [sp, #16]
 8006f88:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbd4>)
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	680b      	ldr	r3, [r1, #0]
 8006f9a:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbd8>)
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fc4c 	bl	800783c <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 8006fa4:	bf00      	nop
 8006fa6:	f207 5764 	addw	r7, r7, #1380	; 0x564
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000068 	.word	0x20000068
 8006fb4:	48000c00 	.word	0x48000c00
 8006fb8:	000f4240 	.word	0x000f4240
 8006fbc:	20000630 	.word	0x20000630

08006fc0 <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08c      	sub	sp, #48	; 0x30
 8006fc4:	af06      	add	r7, sp, #24
 8006fc6:	6078      	str	r0, [r7, #4]
//	pos.radian = steps_to_rads(tmc5160_position_read(), jc->full_steps);
//	uavcan_si_unit_angular_velocity_Scalar_1_0 vel;
//	vel.radian_per_second = steps_to_rads(tmc5160_velocity_read(), jc->full_steps);
	reg_udral_physics_kinematics_rotation_Planar_0_1 js_msg =
	{
			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
 8006fc8:	f002 fdd4 	bl	8009b74 <tmc5160_position_read>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f003 f8ab 	bl	800a130 <steps_to_rads>
 8006fda:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
			.angular_acceleration = eff_in
	};
 8006fde:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
 8006fe2:	f002 fe01 	bl	8009be8 <tmc5160_velocity_read>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f003 f89e 	bl	800a130 <steps_to_rads>
 8006ff4:	eef0 7a40 	vmov.f32	s15, s0
	};
 8006ff8:	edc7 7a04 	vstr	s15, [r7, #16]
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <send_JS+0x70>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 8007002:	480c      	ldr	r0, [pc, #48]	; (8007034 <send_JS+0x74>)
 8007004:	f000 fb92 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007008:	f107 010c 	add.w	r1, r7, #12
 800700c:	2304      	movs	r3, #4
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	4a09      	ldr	r2, [pc, #36]	; (8007038 <send_JS+0x78>)
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <send_JS+0x7c>)
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8007022:	4a07      	ldr	r2, [pc, #28]	; (8007040 <send_JS+0x80>)
 8007024:	f000 fc53 	bl	80078ce <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 8007028:	bf00      	nop
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000460 	.word	0x20000460
 8007034:	200004bc 	.word	0x200004bc
 8007038:	000f4240 	.word	0x000f4240
 800703c:	20000748 	.word	0x20000748
 8007040:	2000073c 	.word	0x2000073c

08007044 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 800704a:	463b      	mov	r3, r7
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <heartbeat+0x4c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 8007058:	480e      	ldr	r0, [pc, #56]	; (8007094 <heartbeat+0x50>)
 800705a:	f000 fb67 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800705e:	4639      	mov	r1, r7
 8007060:	2304      	movs	r3, #4
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	4a0c      	ldr	r2, [pc, #48]	; (8007098 <heartbeat+0x54>)
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <heartbeat+0x58>)
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	f641 5355 	movw	r3, #7509	; 0x1d55
 8007076:	4a0a      	ldr	r2, [pc, #40]	; (80070a0 <heartbeat+0x5c>)
 8007078:	f000 fc48 	bl	800790c <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <heartbeat+0x4c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	4a03      	ldr	r2, [pc, #12]	; (8007090 <heartbeat+0x4c>)
 8007084:	6013      	str	r3, [r2, #0]
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000754 	.word	0x20000754
 8007094:	200004bc 	.word	0x200004bc
 8007098:	000f4240 	.word	0x000f4240
 800709c:	20000753 	.word	0x20000753
 80070a0:	2000074c 	.word	0x2000074c

080070a4 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 80070a4:	b5b0      	push	{r4, r5, r7, lr}
 80070a6:	b08e      	sub	sp, #56	; 0x38
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 80070ac:	4b41      	ldr	r3, [pc, #260]	; (80071b4 <setup_cyphal+0x110>)
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	2104      	movs	r1, #4
 80070b8:	483f      	ldr	r0, [pc, #252]	; (80071b8 <setup_cyphal+0x114>)
 80070ba:	f000 fc46 	bl	800794a <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 80070be:	4602      	mov	r2, r0
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fc68 	bl	800799c <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 80070cc:	f107 0308 	add.w	r3, r7, #8
 80070d0:	4619      	mov	r1, r3
 80070d2:	483a      	ldr	r0, [pc, #232]	; (80071bc <setup_cyphal+0x118>)
 80070d4:	f000 fc71 	bl	80079ba <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 80070d8:	f107 0308 	add.w	r3, r7, #8
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe ffb4 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 80070e2:	f107 0310 	add.w	r3, r7, #16
 80070e6:	4935      	ldr	r1, [pc, #212]	; (80071bc <setup_cyphal+0x118>)
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe ff9e 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80070ee:	f107 0510 	add.w	r5, r7, #16
 80070f2:	f44f 700e 	mov.w	r0, #568	; 0x238
 80070f6:	f00b ff2e 	bl	8012f56 <_Znwj>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461c      	mov	r4, r3
 80070fe:	4629      	mov	r1, r5
 8007100:	4620      	mov	r0, r4
 8007102:	f7fe ffaf 	bl	8006064 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <setup_cyphal+0x11c>)
 8007108:	601c      	str	r4, [r3, #0]
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe ff9b 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8007114:	f107 0318 	add.w	r3, r7, #24
 8007118:	4928      	ldr	r1, [pc, #160]	; (80071bc <setup_cyphal+0x118>)
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe ff85 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007120:	f107 0518 	add.w	r5, r7, #24
 8007124:	f44f 700e 	mov.w	r0, #568	; 0x238
 8007128:	f00b ff15 	bl	8012f56 <_Znwj>
 800712c:	4603      	mov	r3, r0
 800712e:	461c      	mov	r4, r3
 8007130:	4629      	mov	r1, r5
 8007132:	4620      	mov	r0, r4
 8007134:	f7fe ffc6 	bl	80060c4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007138:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <setup_cyphal+0x120>)
 800713a:	601c      	str	r4, [r3, #0]
 800713c:	f107 0318 	add.w	r3, r7, #24
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe ff82 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 8007146:	f107 0320 	add.w	r3, r7, #32
 800714a:	491c      	ldr	r1, [pc, #112]	; (80071bc <setup_cyphal+0x118>)
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe ff6c 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007152:	f107 0520 	add.w	r5, r7, #32
 8007156:	f44f 700e 	mov.w	r0, #568	; 0x238
 800715a:	f00b fefc 	bl	8012f56 <_Znwj>
 800715e:	4603      	mov	r3, r0
 8007160:	461c      	mov	r4, r3
 8007162:	4629      	mov	r1, r5
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff f919 	bl	800639c <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <setup_cyphal+0x124>)
 800716c:	601c      	str	r4, [r3, #0]
 800716e:	f107 0320 	add.w	r3, r7, #32
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe ff69 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 8007178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800717c:	490f      	ldr	r1, [pc, #60]	; (80071bc <setup_cyphal+0x118>)
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe ff53 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007184:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8007188:	f44f 700e 	mov.w	r0, #568	; 0x238
 800718c:	f00b fee3 	bl	8012f56 <_Znwj>
 8007190:	4603      	mov	r3, r0
 8007192:	461c      	mov	r4, r3
 8007194:	4629      	mov	r1, r5
 8007196:	4620      	mov	r0, r4
 8007198:	f7fe fff8 	bl	800618c <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800719c:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <setup_cyphal+0x128>)
 800719e:	601c      	str	r4, [r3, #0]
 80071a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe ff50 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80071aa:	bf00      	nop
 80071ac:	3730      	adds	r7, #48	; 0x30
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bdb0      	pop	{r4, r5, r7, pc}
 80071b2:	bf00      	nop
 80071b4:	200004c4 	.word	0x200004c4
 80071b8:	20000464 	.word	0x20000464
 80071bc:	200004bc 	.word	0x200004bc
 80071c0:	200004e4 	.word	0x200004e4
 80071c4:	200004e8 	.word	0x200004e8
 80071c8:	2000062c 	.word	0x2000062c
 80071cc:	200004ec 	.word	0x200004ec

080071d0 <cyphal_loop>:

void cyphal_loop() {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
    interface->loop();
 80071d4:	4804      	ldr	r0, [pc, #16]	; (80071e8 <cyphal_loop+0x18>)
 80071d6:	f000 faa9 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80071da:	4603      	mov	r3, r0
 80071dc:	4618      	mov	r0, r3
 80071de:	f009 f8f9 	bl	80103d4 <_ZN15CyphalInterface4loopEv>
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200004bc 	.word	0x200004bc

080071ec <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08c      	sub	sp, #48	; 0x30
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 80071f4:	f107 0320 	add.w	r3, r7, #32
 80071f8:	2104      	movs	r1, #4
 80071fa:	4618      	mov	r0, r3
 80071fc:	f00b fe5c 	bl	8012eb8 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//JS_SUB_PORT_ID //1121
 8007200:	f107 0318 	add.w	r3, r7, #24
 8007204:	f240 4164 	movw	r1, #1124	; 0x464
 8007208:	4618      	mov	r0, r3
 800720a:	f00b fe35 	bl	8012e78 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 800720e:	f107 0310 	add.w	r3, r7, #16
 8007212:	f641 5155 	movw	r1, #7509	; 0x1d55
 8007216:	4618      	mov	r0, r3
 8007218:	f00b fe2e 	bl	8012e78 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	f107 0218 	add.w	r2, r7, #24
 8007224:	f107 0120 	add.w	r1, r7, #32
 8007228:	4618      	mov	r0, r3
 800722a:	f00b fe67 	bl	8012efc <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800722e:	4b4c      	ldr	r3, [pc, #304]	; (8007360 <cyphal_can_starter+0x174>)
 8007230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007234:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8007236:	4b4a      	ldr	r3, [pc, #296]	; (8007360 <cyphal_can_starter+0x174>)
 8007238:	2200      	movs	r2, #0
 800723a:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800723c:	4b48      	ldr	r3, [pc, #288]	; (8007360 <cyphal_can_starter+0x174>)
 800723e:	2202      	movs	r2, #2
 8007240:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007242:	4b47      	ldr	r3, [pc, #284]	; (8007360 <cyphal_can_starter+0x174>)
 8007244:	2201      	movs	r2, #1
 8007246:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	4a45      	ldr	r2, [pc, #276]	; (8007360 <cyphal_can_starter+0x174>)
 800724c:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	4a43      	ldr	r2, [pc, #268]	; (8007360 <cyphal_can_starter+0x174>)
 8007252:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8007254:	4b43      	ldr	r3, [pc, #268]	; (8007364 <cyphal_can_starter+0x178>)
 8007256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800725a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 800725c:	4b41      	ldr	r3, [pc, #260]	; (8007364 <cyphal_can_starter+0x178>)
 800725e:	2201      	movs	r2, #1
 8007260:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007262:	4b40      	ldr	r3, [pc, #256]	; (8007364 <cyphal_can_starter+0x178>)
 8007264:	2202      	movs	r2, #2
 8007266:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007268:	4b3e      	ldr	r3, [pc, #248]	; (8007364 <cyphal_can_starter+0x178>)
 800726a:	2201      	movs	r2, #1
 800726c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <cyphal_can_starter+0x178>)
 8007272:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4a3b      	ldr	r2, [pc, #236]	; (8007364 <cyphal_can_starter+0x178>)
 8007278:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800727a:	4b3b      	ldr	r3, [pc, #236]	; (8007368 <cyphal_can_starter+0x17c>)
 800727c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007280:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 8007282:	4b39      	ldr	r3, [pc, #228]	; (8007368 <cyphal_can_starter+0x17c>)
 8007284:	2202      	movs	r2, #2
 8007286:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007288:	4b37      	ldr	r3, [pc, #220]	; (8007368 <cyphal_can_starter+0x17c>)
 800728a:	2202      	movs	r2, #2
 800728c:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800728e:	4b36      	ldr	r3, [pc, #216]	; (8007368 <cyphal_can_starter+0x17c>)
 8007290:	2201      	movs	r2, #1
 8007292:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4a34      	ldr	r2, [pc, #208]	; (8007368 <cyphal_can_starter+0x17c>)
 8007298:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	4a32      	ldr	r2, [pc, #200]	; (8007368 <cyphal_can_starter+0x17c>)
 800729e:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 80072a0:	2302      	movs	r3, #2
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2302      	movs	r3, #2
 80072a6:	2202      	movs	r2, #2
 80072a8:	2102      	movs	r1, #2
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f003 fda8 	bl	800ae00 <HAL_FDCAN_ConfigGlobalFilter>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80072c0:	f7fa fe2d 	bl	8001f1e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80072c4:	4926      	ldr	r1, [pc, #152]	; (8007360 <cyphal_can_starter+0x174>)
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f003 fd40 	bl	800ad4c <HAL_FDCAN_ConfigFilter>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bf14      	ite	ne
 80072d2:	2301      	movne	r3, #1
 80072d4:	2300      	moveq	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <cyphal_can_starter+0xf4>
	  Error_Handler();
 80072dc:	f7fa fe1f 	bl	8001f1e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 80072e0:	4920      	ldr	r1, [pc, #128]	; (8007364 <cyphal_can_starter+0x178>)
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f003 fd32 	bl	800ad4c <HAL_FDCAN_ConfigFilter>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bf14      	ite	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	2300      	moveq	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <cyphal_can_starter+0x110>
	  Error_Handler();
 80072f8:	f7fa fe11 	bl	8001f1e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 80072fc:	491a      	ldr	r1, [pc, #104]	; (8007368 <cyphal_can_starter+0x17c>)
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f003 fd24 	bl	800ad4c <HAL_FDCAN_ConfigFilter>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	bf14      	ite	ne
 800730a:	2301      	movne	r3, #1
 800730c:	2300      	moveq	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <cyphal_can_starter+0x12c>
	  Error_Handler();
 8007314:	f7fa fe03 	bl	8001f1e <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8007318:	2200      	movs	r2, #0
 800731a:	2105      	movs	r1, #5
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f003 fda0 	bl	800ae62 <HAL_FDCAN_ConfigTxDelayCompensation>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	bf14      	ite	ne
 8007328:	2301      	movne	r3, #1
 800732a:	2300      	moveq	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <cyphal_can_starter+0x14a>
	  Error_Handler();
 8007332:	f7fa fdf4 	bl	8001f1e <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f003 fdb5 	bl	800aea6 <HAL_FDCAN_EnableTxDelayCompensation>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	bf14      	ite	ne
 8007342:	2301      	movne	r3, #1
 8007344:	2300      	moveq	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <cyphal_can_starter+0x164>
	  Error_Handler();
 800734c:	f7fa fde7 	bl	8001f1e <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f003 fdc9 	bl	800aee8 <HAL_FDCAN_Start>
}
 8007356:	bf00      	nop
 8007358:	3728      	adds	r7, #40	; 0x28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000788 	.word	0x20000788
 8007364:	20000758 	.word	0x20000758
 8007368:	20000770 	.word	0x20000770

0800736c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
      { delete this; }
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3304      	adds	r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	6053      	str	r3, [r2, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	461a      	mov	r2, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	6053      	str	r3, [r2, #4]
 80073c8:	6093      	str	r3, [r2, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff ffde 	bl	800738e <_ZNSt14_Function_baseC1Ev>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80073d8:	6838      	ldr	r0, [r7, #0]
 80073da:	f000 fb21 	bl	8007a20 <_ZNKSt8functionIFyvEEcvbEv>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	2202      	movs	r2, #2
 80073ee:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	609a      	str	r2, [r3, #8]
	  }
      }
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	461a      	mov	r2, r3
 8007418:	2300      	movs	r3, #0
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	6053      	str	r3, [r2, #4]
 800741e:	6093      	str	r3, [r2, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ffb3 	bl	800738e <_ZNSt14_Function_baseC1Ev>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800742e:	6838      	ldr	r0, [r7, #0]
 8007430:	f000 fb06 	bl	8007a40 <_ZNKSt8functionIFvvEEcvbEv>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	2202      	movs	r2, #2
 8007444:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	609a      	str	r2, [r3, #8]
      }
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 faf9 	bl	8007a60 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
	return get();
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fae8 	bl	8007a60 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8007490:	4603      	mov	r3, r0
      }
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fae5 	bl	8007a7a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff ffe6 	bl	800749a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fadd 	bl	8007aa2 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 80074e8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fae2 	bl	8007abc <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 80074f8:	4604      	mov	r4, r0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 faeb 	bl	8007ad6 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8007500:	4603      	mov	r3, r0
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	4620      	mov	r0, r4
 8007508:	f000 faf0 	bl	8007aec <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
      }
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f7fa fd14 	bl	8001f5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8007540:	b590      	push	{r4, r7, lr}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	461a      	mov	r2, r3
 800754e:	2300      	movs	r3, #0
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	6053      	str	r3, [r2, #4]
 8007554:	6093      	str	r3, [r2, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff ff18 	bl	800738e <_ZNSt14_Function_baseC1Ev>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8007564:	6838      	ldr	r0, [r7, #0]
 8007566:	f000 fad2 	bl	8007b0e <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00e      	beq.n	800758e <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8007570:	687c      	ldr	r4, [r7, #4]
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f000 fadb 	bl	8007b2e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007578:	4603      	mov	r3, r0
 800757a:	4619      	mov	r1, r3
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fae1 	bl	8007b44 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a04      	ldr	r2, [pc, #16]	; (8007598 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8007586:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a04      	ldr	r2, [pc, #16]	; (800759c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 800758c:	609a      	str	r2, [r3, #8]
	    }
	}
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bd90      	pop	{r4, r7, pc}
 8007598:	08007b69 	.word	0x08007b69
 800759c:	08007b8d 	.word	0x08007b8d

080075a0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 80075a0:	b590      	push	{r4, r7, lr}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	461a      	mov	r2, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	6053      	str	r3, [r2, #4]
 80075b4:	6093      	str	r3, [r2, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fee8 	bl	800738e <_ZNSt14_Function_baseC1Ev>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80075c4:	6838      	ldr	r0, [r7, #0]
 80075c6:	f000 fb00 	bl	8007bca <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80075d0:	687c      	ldr	r4, [r7, #4]
 80075d2:	6838      	ldr	r0, [r7, #0]
 80075d4:	f000 fb09 	bl	8007bea <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80075d8:	4603      	mov	r3, r0
 80075da:	4619      	mov	r1, r3
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 fb0f 	bl	8007c00 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 80075e6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a04      	ldr	r2, [pc, #16]	; (80075fc <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 80075ec:	609a      	str	r2, [r3, #8]
	}
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd90      	pop	{r4, r7, pc}
 80075f8:	08007c25 	.word	0x08007c25
 80075fc:	08007c43 	.word	0x08007c43

08007600 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fa fc8e 	bl	8001f40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	4613      	mov	r3, r2
 800763a:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 800763c:	f107 0310 	add.w	r3, r7, #16
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fcf1 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	f107 0110 	add.w	r1, r7, #16
 800764e:	2300      	movs	r3, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fb15 	bl	8007c80 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007656:	f107 0310 	add.w	r3, r7, #16
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fcf5 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	4613      	mov	r3, r2
 8007676:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007678:	f107 0310 	add.w	r3, r7, #16
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fcd3 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	f107 0110 	add.w	r1, r7, #16
 800768a:	2300      	movs	r3, #0
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb29 	bl	8007ce4 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007692:	f107 0310 	add.w	r3, r7, #16
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fcd7 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	080182c0 	.word	0x080182c0

080076c8 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4611      	mov	r1, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	460b      	mov	r3, r1
 80076d8:	80fb      	strh	r3, [r7, #6]
 80076da:	4613      	mov	r3, r2
 80076dc:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff ffe1 	bl	80076a8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80076e6:	4a10      	ldr	r2, [pc, #64]	; (8007728 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	797a      	ldrb	r2, [r7, #5]
 80076f0:	711a      	strb	r2, [r3, #4]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3308      	adds	r3, #8
 80076f6:	f44f 720a 	mov.w	r2, #552	; 0x228
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f00c fd14 	bl	801412a <memset>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fc8d 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007710:	797a      	ldrb	r2, [r7, #5]
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fb16 	bl	8007d48 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	08018270 	.word	0x08018270

0800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	return _M_get();
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb25 	bl	8007d84 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800773a:	4603      	mov	r3, r0
      }
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8007744:	b5b0      	push	{r4, r5, r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af04      	add	r7, sp, #16
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007752:	f240 1339 	movw	r3, #313	; 0x139
 8007756:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007758:	f107 031c 	add.w	r3, r7, #28
 800775c:	461a      	mov	r2, r3
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f7fe fa97 	bl	8005c94 <uavcan_node_GetInfo_Response_1_0_serialize_>
 8007766:	4603      	mov	r3, r0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	09db      	lsrs	r3, r3, #7
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	3310      	adds	r3, #16
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fb0f 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800777e:	f107 0314 	add.w	r3, r7, #20
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	809a      	strh	r2, [r3, #4]
 8007788:	2301      	movs	r3, #1
 800778a:	757b      	strb	r3, [r7, #21]
 800778c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007790:	753b      	strb	r3, [r7, #20]
 8007792:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007794:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800779a:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80077a0:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fb0e 	bl	8007dc8 <_ZNKSt8functionIFyvEEclEv>
    push(
 80077ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077b0:	1884      	adds	r4, r0, r2
 80077b2:	eb41 0503 	adc.w	r5, r1, r3
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	9202      	str	r2, [sp, #8]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f008 fd95 	bl	80102f8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 80077ce:	bf00      	nop
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080077d8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4611      	mov	r1, r2
 80077e4:	461a      	mov	r2, r3
 80077e6:	460b      	mov	r3, r1
 80077e8:	80fb      	strh	r3, [r7, #6]
 80077ea:	4613      	mov	r3, r2
 80077ec:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff ff59 	bl	80076a8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80077f6:	4a10      	ldr	r2, [pc, #64]	; (8007838 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	797a      	ldrb	r2, [r7, #5]
 8007800:	711a      	strb	r2, [r3, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3308      	adds	r3, #8
 8007806:	f44f 720a 	mov.w	r2, #552	; 0x228
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f00c fc8c 	bl	801412a <memset>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fc05 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007820:	797a      	ldrb	r2, [r7, #5]
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	4619      	mov	r1, r3
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fae7 	bl	8007dfa <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	08018250 	.word	0x08018250

0800783c <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 800783c:	b5b0      	push	{r4, r5, r7, lr}
 800783e:	b08c      	sub	sp, #48	; 0x30
 8007840:	af04      	add	r7, sp, #16
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800784a:	f240 130b 	movw	r3, #267	; 0x10b
 800784e:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007850:	f107 031c 	add.w	r3, r7, #28
 8007854:	461a      	mov	r2, r3
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	68b8      	ldr	r0, [r7, #8]
 800785a:	f7fe f889 	bl	8005970 <uavcan_register_Access_Response_1_0_serialize_>
 800785e:	4603      	mov	r3, r0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	09db      	lsrs	r3, r3, #7
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	3310      	adds	r3, #16
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fa93 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007876:	f107 0314 	add.w	r3, r7, #20
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	809a      	strh	r2, [r3, #4]
 8007880:	2301      	movs	r3, #1
 8007882:	757b      	strb	r3, [r7, #21]
 8007884:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007888:	753b      	strb	r3, [r7, #20]
 800788a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800788c:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007892:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007898:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fa92 	bl	8007dc8 <_ZNKSt8functionIFyvEEclEv>
    push(
 80078a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078a8:	1884      	adds	r4, r0, r2
 80078aa:	eb41 0503 	adc.w	r5, r1, r3
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	9202      	str	r2, [sp, #8]
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f107 0314 	add.w	r3, r7, #20
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4622      	mov	r2, r4
 80078be:	462b      	mov	r3, r5
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f008 fd19 	bl	80102f8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 80078c6:	bf00      	nop
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bdb0      	pop	{r4, r5, r7, pc}

080078ce <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b08a      	sub	sp, #40	; 0x28
 80078d2:	af06      	add	r7, sp, #24
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
 80078da:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 80078dc:	8879      	ldrh	r1, [r7, #2]
 80078de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078e6:	23ff      	movs	r3, #255	; 0xff
 80078e8:	9303      	str	r3, [sp, #12]
 80078ea:	2300      	movs	r3, #0
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	460b      	mov	r3, r1
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fa9a 	bl	8007e38 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	; 0x28
 8007910:	af06      	add	r7, sp, #24
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 800791a:	8879      	ldrh	r1, [r7, #2]
 800791c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007924:	23ff      	movs	r3, #255	; 0xff
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	2300      	movs	r3, #0
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	460b      	mov	r3, r1
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fac5 	bl	8007ecc <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 800794a:	b590      	push	{r4, r7, lr}
 800794c:	b08b      	sub	sp, #44	; 0x2c
 800794e:	af02      	add	r7, sp, #8
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
 8007956:	460b      	mov	r3, r1
 8007958:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 800795a:	f107 030c 	add.w	r3, r7, #12
 800795e:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8007960:	7afa      	ldrb	r2, [r7, #11]
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	69f8      	ldr	r0, [r7, #28]
 800796c:	f000 faf8 	bl	8007f60 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8007970:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	4619      	mov	r1, r3
 800797c:	200c      	movs	r0, #12
 800797e:	f7fa fad3 	bl	8001f28 <_ZnwjPv>
 8007982:	4604      	mov	r4, r0
 8007984:	7af9      	ldrb	r1, [r7, #11]
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798a:	4620      	mov	r0, r4
 800798c:	f7fa fbfe 	bl	800218c <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8007990:	613c      	str	r4, [r7, #16]

        return interface;
 8007992:	693b      	ldr	r3, [r7, #16]
    }
 8007994:	4618      	mov	r0, r3
 8007996:	3724      	adds	r7, #36	; 0x24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd90      	pop	{r4, r7, pc}

0800799c <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fb26 	bl	8007ffc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 80079ba:	b590      	push	{r4, r7, lr}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80079c4:	687c      	ldr	r4, [r7, #4]
 80079c6:	6838      	ldr	r0, [r7, #0]
 80079c8:	f000 fb30 	bl	800802c <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 80079cc:	4603      	mov	r3, r0
 80079ce:	4619      	mov	r1, r3
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fb36 	bl	8008042 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 80079d6:	687b      	ldr	r3, [r7, #4]
      }
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd90      	pop	{r4, r7, pc}

080079e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
      { }
 80079e8:	4a04      	ldr	r2, [pc, #16]	; (80079fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	080182e4 	.word	0x080182e4

08007a00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
      { }
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ffe9 	bl	80079e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007a0e:	210c      	movs	r1, #12
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f00b fa9e 	bl	8012f52 <_ZdlPvj>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fa faf0 	bl	8002010 <_ZNKSt14_Function_base8_M_emptyEv>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f083 0301 	eor.w	r3, r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fa fae0 	bl	8002010 <_ZNKSt14_Function_base8_M_emptyEv>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f083 0301 	eor.w	r3, r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fb08 	bl	8008080 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007a7a:	b590      	push	{r4, r7, lr}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fb08 	bl	800809c <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007a8c:	683c      	ldr	r4, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f807 	bl	8007aa2 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007a94:	4603      	mov	r3, r0
 8007a96:	601c      	str	r4, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd90      	pop	{r4, r7, pc}

08007aa2 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fb02 	bl	80080b6 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fb02 	bl	80080d0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	3218      	adds	r2, #24
 8007b00:	6812      	ldr	r2, [r2, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	4790      	blx	r2
      }
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007b4e:	6838      	ldr	r0, [r7, #0]
 8007b50:	f7ff ffed 	bl	8007b2e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007b54:	4603      	mov	r3, r0
 8007b56:	4622      	mov	r2, r4
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fac5 	bl	80080ea <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}

08007b68 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fad2 	bl	800811a <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007b76:	4603      	mov	r3, r0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fade 	bl	800813a <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
      }
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007b8c:	b590      	push	{r4, r7, lr}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d109      	bne.n	8007bb4 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007ba0:	68b8      	ldr	r0, [r7, #8]
 8007ba2:	f000 faba 	bl	800811a <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fad9 	bl	8008160 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	601c      	str	r4, [r3, #0]
	    break;
 8007bb2:	e005      	b.n	8007bc0 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fadc 	bl	8008178 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007bc0:	2300      	movs	r3, #0
      }
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd90      	pop	{r4, r7, pc}

08007bca <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007c0a:	6838      	ldr	r0, [r7, #0]
 8007c0c:	f7ff ffed 	bl	8007bea <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007c10:	4603      	mov	r3, r0
 8007c12:	4622      	mov	r2, r4
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fae8 	bl	80081ec <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd90      	pop	{r4, r7, pc}

08007c24 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 faf5 	bl	800821c <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007c32:	4603      	mov	r3, r0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fb01 	bl	800823c <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8007c3a:	bf00      	nop
      }
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007c42:	b590      	push	{r4, r7, lr}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d109      	bne.n	8007c6a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007c56:	68b8      	ldr	r0, [r7, #8]
 8007c58:	f000 fae0 	bl	800821c <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fafc 	bl	800825c <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007c64:	4603      	mov	r3, r0
 8007c66:	601c      	str	r4, [r3, #0]
	    break;
 8007c68:	e005      	b.n	8007c76 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 faff 	bl	8008274 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007c76:	2300      	movs	r3, #0
      }
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd90      	pop	{r4, r7, pc}

08007c80 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	460b      	mov	r3, r1
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	4613      	mov	r3, r2
 8007c94:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fd05 	bl	80076a8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	797a      	ldrb	r2, [r7, #5]
 8007ca8:	711a      	strb	r2, [r3, #4]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f44f 720a 	mov.w	r2, #552	; 0x228
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f00c fa38 	bl	801412a <memset>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe f9b1 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007cc8:	797a      	ldrb	r2, [r7, #5]
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fb0a 	bl	80082e8 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	080182b0 	.word	0x080182b0

08007ce4 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	80fb      	strh	r3, [r7, #6]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fcd3 	bl	80076a8 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007d02:	4a10      	ldr	r2, [pc, #64]	; (8007d44 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	797a      	ldrb	r2, [r7, #5]
 8007d0c:	711a      	strb	r2, [r3, #4]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3308      	adds	r3, #8
 8007d12:	f44f 720a 	mov.w	r2, #552	; 0x228
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f00c fa06 	bl	801412a <memset>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe f97f 	bl	800602a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007d2c:	797a      	ldrb	r2, [r7, #5]
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	4619      	mov	r1, r3
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 faf6 	bl	8008324 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	08018290 	.word	0x08018290

08007d48 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
 8007d54:	4613      	mov	r3, r2
 8007d56:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff fce1 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	787a      	ldrb	r2, [r7, #1]
 8007d70:	8879      	ldrh	r1, [r7, #2]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	f008 faf8 	bl	801036c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fae7 	bl	8008360 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fa f932 	bl	8002010 <_ZNKSt14_Function_base8_M_emptyEv>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8007db2:	f00b f8e1 	bl	8012f78 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	bf00      	nop
      }
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fa f91c 	bl	8002010 <_ZNKSt14_Function_base8_M_emptyEv>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8007dde:	f00b f8cb 	bl	8012f78 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
      }
 8007df0:	4610      	mov	r0, r2
 8007df2:	4619      	mov	r1, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af02      	add	r7, sp, #8
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	807b      	strh	r3, [r7, #2]
 8007e06:	4613      	mov	r3, r2
 8007e08:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fc88 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	787a      	ldrb	r2, [r7, #1]
 8007e22:	8879      	ldrh	r1, [r7, #2]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	f240 2203 	movw	r2, #515	; 0x203
 8007e2c:	f008 fa9e 	bl	801036c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8007e38:	b5b0      	push	{r4, r5, r7, lr}
 8007e3a:	b08c      	sub	sp, #48	; 0x30
 8007e3c:	af04      	add	r7, sp, #16
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007e46:	230c      	movs	r3, #12
 8007e48:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007e4a:	f107 031c 	add.w	r3, r7, #28
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	68b8      	ldr	r0, [r7, #8]
 8007e54:	f7fb f904 	bl	8003060 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	09db      	lsrs	r3, r3, #7
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	3310      	adds	r3, #16
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff ff96 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007e70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007e74:	753b      	strb	r3, [r7, #20]
 8007e76:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007e7a:	757b      	strb	r3, [r7, #21]
 8007e7c:	887b      	ldrh	r3, [r7, #2]
 8007e7e:	82fb      	strh	r3, [r7, #22]
 8007e80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007e84:	763b      	strb	r3, [r7, #24]
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff ff99 	bl	8007dc8 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e9a:	1884      	adds	r4, r0, r2
 8007e9c:	eb41 0503 	adc.w	r5, r1, r3
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	9202      	str	r2, [sp, #8]
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	4622      	mov	r2, r4
 8007eb0:	462b      	mov	r3, r5
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f008 fa20 	bl	80102f8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	701a      	strb	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bdb0      	pop	{r4, r5, r7, pc}

08007ecc <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8007ecc:	b5b0      	push	{r4, r5, r7, lr}
 8007ece:	b08c      	sub	sp, #48	; 0x30
 8007ed0:	af04      	add	r7, sp, #16
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007eda:	2307      	movs	r3, #7
 8007edc:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007ede:	f107 031c 	add.w	r3, r7, #28
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	68b8      	ldr	r0, [r7, #8]
 8007ee8:	f7fa fd5a 	bl	80029a0 <uavcan_node_Heartbeat_1_0_serialize_>
 8007eec:	4603      	mov	r3, r0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	09db      	lsrs	r3, r3, #7
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	3310      	adds	r3, #16
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff ff4c 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007f04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007f08:	753b      	strb	r3, [r7, #20]
 8007f0a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007f0e:	757b      	strb	r3, [r7, #21]
 8007f10:	887b      	ldrh	r3, [r7, #2]
 8007f12:	82fb      	strh	r3, [r7, #22]
 8007f14:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007f18:	763b      	strb	r3, [r7, #24]
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff ff4f 	bl	8007dc8 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f2e:	1884      	adds	r4, r0, r2
 8007f30:	eb41 0503 	adc.w	r5, r1, r3
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	9202      	str	r2, [sp, #8]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4622      	mov	r2, r4
 8007f44:	462b      	mov	r3, r5
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f008 f9d6 	bl	80102f8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	701a      	strb	r2, [r3, #0]
}
 8007f58:	bf00      	nop
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bdb0      	pop	{r4, r5, r7, pc}

08007f60 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b089      	sub	sp, #36	; 0x24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	2008      	movs	r0, #8
 8007f7c:	f7f9 ffd4 	bl	8001f28 <_ZnwjPv>
 8007f80:	4604      	mov	r4, r0
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	4413      	add	r3, r2
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7f8 fae1 	bl	8000554 <__aeabi_ui2d>
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	4b18      	ldr	r3, [pc, #96]	; (8007ff8 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8007f98:	f7f8 fb56 	bl	8000648 <__aeabi_dmul>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f7f8 fe28 	bl	8000bf8 <__aeabi_d2uiz>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fac:	4619      	mov	r1, r3
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f7fa f922 	bl	80021f8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8007fb4:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	2044      	movs	r0, #68	; 0x44
 8007fc2:	f7f9 ffb1 	bl	8001f28 <_ZnwjPv>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f7fa f8f6 	bl	80021c0 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8007fd4:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	79fa      	ldrb	r2, [r7, #7]
 8007fda:	69b9      	ldr	r1, [r7, #24]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f9cb 	bl	8008378 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	601a      	str	r2, [r3, #0]
        return ptr;
 8007fec:	693b      	ldr	r3, [r7, #16]
    }
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd90      	pop	{r4, r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40040000 	.word	0x40040000

08007ffc <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	4622      	mov	r2, r4
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 f9f3 	bl	8008400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f9fe 	bl	800841e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bd90      	pop	{r4, r7, pc}

0800802c <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 800804c:	6838      	ldr	r0, [r7, #0]
 800804e:	f000 f9f1 	bl	8008434 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8008052:	4602      	mov	r2, r0
 8008054:	f107 0308 	add.w	r3, r7, #8
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f9f5 	bl	800844a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8008060:	f107 0308 	add.w	r3, r7, #8
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fa0d 	bl	8008486 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800806c:	f107 0308 	add.w	r3, r7, #8
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd ff91 	bl	8005f98 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8008076:	687b      	ldr	r3, [r7, #4]
      }
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fa12 	bl	80084b4 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008090:	4603      	mov	r3, r0
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fa11 	bl	80084ce <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fa14 	bl	80084ee <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80080c6:	4603      	mov	r3, r0
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fa13 	bl	8008506 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80080e0:	4603      	mov	r3, r0
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80080ea:	b590      	push	{r4, r7, lr}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80080f6:	68b8      	ldr	r0, [r7, #8]
 80080f8:	f7ff fd19 	bl	8007b2e <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80080fc:	4604      	mov	r4, r0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7f9 ff5d 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 8008104:	4603      	mov	r3, r0
 8008106:	4619      	mov	r1, r3
 8008108:	2004      	movs	r0, #4
 800810a:	f7f9 ff0d 	bl	8001f28 <_ZnwjPv>
 800810e:	4603      	mov	r3, r0
 8008110:	601c      	str	r4, [r3, #0]
	  }
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	bd90      	pop	{r4, r7, pc}

0800811a <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9fb 	bl	800851e <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8008128:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fa03 	bl	8008536 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8008130:	4603      	mov	r3, r0
	}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa02 	bl	800854c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008148:	4603      	mov	r3, r0
 800814a:	4619      	mov	r1, r3
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fa08 	bl	8008562 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}

08008160 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7f9 ff28 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 800816e:	4603      	mov	r3, r0
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d82a      	bhi.n	80081e2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081a5 	.word	0x080081a5
 8008198:	080081b3 	.word	0x080081b3
 800819c:	080081c7 	.word	0x080081c7
 80081a0:	080081d9 	.word	0x080081d9
	      __dest._M_access<const type_info*>() = nullptr;
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f9ee 	bl	8008586 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
	      break;
 80081b0:	e017      	b.n	80081e2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80081b2:	68b8      	ldr	r0, [r7, #8]
 80081b4:	f7ff ffb1 	bl	800811a <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80081b8:	4604      	mov	r4, r0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff ffd0 	bl	8008160 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80081c0:	4603      	mov	r3, r0
 80081c2:	601c      	str	r4, [r3, #0]
	      break;
 80081c4:	e00d      	b.n	80081e2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80081c6:	68b8      	ldr	r0, [r7, #8]
 80081c8:	f7ff ffa7 	bl	800811a <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80081cc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80081ce:	4619      	mov	r1, r3
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f9e4 	bl	800859e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80081d6:	e004      	b.n	80081e2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80081d8:	4621      	mov	r1, r4
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 f9f1 	bl	80085c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80081e0:	bf00      	nop
	  return false;
 80081e2:	2300      	movs	r3, #0
	}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}

080081ec <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80081f8:	68b8      	ldr	r0, [r7, #8]
 80081fa:	f7ff fcf6 	bl	8007bea <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80081fe:	4604      	mov	r4, r0
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7f9 fedc 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 8008206:	4603      	mov	r3, r0
 8008208:	4619      	mov	r1, r3
 800820a:	2004      	movs	r0, #4
 800820c:	f7f9 fe8c 	bl	8001f28 <_ZnwjPv>
 8008210:	4603      	mov	r3, r0
 8008212:	601c      	str	r4, [r3, #0]
	  }
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	bd90      	pop	{r4, r7, pc}

0800821c <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f9d8 	bl	80085da <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 800822a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f9e0 	bl	80085f2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8008232:	4603      	mov	r3, r0
	}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800823c:	b590      	push	{r4, r7, lr}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f9df 	bl	8008608 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800824a:	4603      	mov	r3, r0
 800824c:	4619      	mov	r1, r3
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f9e5 	bl	800861e <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bd90      	pop	{r4, r7, pc}

0800825c <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7f9 feaa 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 800826a:	4603      	mov	r3, r0
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008274:	b590      	push	{r4, r7, lr}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d82a      	bhi.n	80082de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008288:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082af 	.word	0x080082af
 8008298:	080082c3 	.word	0x080082c3
 800829c:	080082d5 	.word	0x080082d5
	      __dest._M_access<const type_info*>() = nullptr;
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f970 	bl	8008586 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
	      break;
 80082ac:	e017      	b.n	80082de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80082ae:	68b8      	ldr	r0, [r7, #8]
 80082b0:	f7ff ffb4 	bl	800821c <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80082b4:	4604      	mov	r4, r0
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f7ff ffd0 	bl	800825c <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 80082bc:	4603      	mov	r3, r0
 80082be:	601c      	str	r4, [r3, #0]
	      break;
 80082c0:	e00d      	b.n	80082de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80082c2:	68b8      	ldr	r0, [r7, #8]
 80082c4:	f7ff ffaa 	bl	800821c <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80082c8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80082ca:	4619      	mov	r1, r3
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f9b5 	bl	800863c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80082d2:	e004      	b.n	80082de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80082d4:	4621      	mov	r1, r4
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f9c2 	bl	8008660 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80082dc:	bf00      	nop
	  return false;
 80082de:	2300      	movs	r3, #0
	}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd90      	pop	{r4, r7, pc}

080082e8 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
 80082f4:	4613      	mov	r3, r2
 80082f6:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fa11 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3308      	adds	r3, #8
 800830e:	787a      	ldrb	r2, [r7, #1]
 8008310:	8879      	ldrh	r1, [r7, #2]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	220c      	movs	r2, #12
 8008318:	f008 f828 	bl	801036c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af02      	add	r7, sp, #8
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	807b      	strh	r3, [r7, #2]
 8008330:	4613      	mov	r3, r2
 8008332:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff f9f3 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3308      	adds	r3, #8
 800834a:	787a      	ldrb	r2, [r7, #1]
 800834c:	8879      	ldrh	r1, [r7, #2]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	4613      	mov	r3, r2
 8008352:	220c      	movs	r2, #12
 8008354:	f008 f80a 	bl	801036c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8008378:	b5b0      	push	{r4, r5, r7, lr}
 800837a:	b08e      	sub	sp, #56	; 0x38
 800837c:	af00      	add	r7, sp, #0
 800837e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008380:	62b9      	str	r1, [r7, #40]	; 0x28
 8008382:	4613      	mov	r3, r2
 8008384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8008388:	481a      	ldr	r0, [pc, #104]	; (80083f4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800838a:	f7ff f869 	bl	8007460 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008398:	3310      	adds	r3, #16
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff fcfe 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 80083a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f976 	bl	8008698 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80083ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083b0:	4619      	mov	r1, r3
 80083b2:	4810      	ldr	r0, [pc, #64]	; (80083f4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 80083b4:	f000 f9a1 	bl	80086fa <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 80083b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 f97a 	bl	80086b6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80083c2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80083c4:	463b      	mov	r3, r7
 80083c6:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80083c8:	490c      	ldr	r1, [pc, #48]	; (80083fc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80083ca:	4618      	mov	r0, r3
 80083cc:	f00a fabe 	bl	801294c <canardInit>
 80083d0:	3420      	adds	r4, #32
 80083d2:	463d      	mov	r5, r7
 80083d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80083dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80083e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80083ea:	bf00      	nop
 80083ec:	3738      	adds	r7, #56	; 0x38
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bdb0      	pop	{r4, r5, r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000990 	.word	0x20000990
 80083f8:	08002105 	.word	0x08002105
 80083fc:	080020c1 	.word	0x080020c1

08008400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 f9a4 	bl	800875c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
	{ }
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fd fda7 	bl	8005fb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	1d1a      	adds	r2, r3, #4
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f000 f98b 	bl	800878c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
      }
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f998 	bl	80087cc <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1d1a      	adds	r2, r3, #4
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f000 f970 	bl	800878c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f9a3 	bl	800880a <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80084c4:	4603      	mov	r3, r0
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f9a3 	bl	8008822 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f9ab 	bl	800883a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9ad 	bl	8008856 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80084fc:	4603      	mov	r3, r0
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f9ae 	bl	8008870 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008514:	4603      	mov	r3, r0
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7f9 fd54 	bl	8001fd4 <_ZNKSt9_Any_data9_M_accessEv>
 800852c:	4603      	mov	r3, r0
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	7138      	strb	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800856c:	6838      	ldr	r0, [r7, #0]
 800856e:	f7ff ffed 	bl	800854c <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008572:	4603      	mov	r3, r0
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4798      	blx	r3
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4610      	mov	r0, r2
 800857e:	4619      	mov	r1, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7f9 fd15 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 8008594:	4603      	mov	r3, r0
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800859e:	b590      	push	{r4, r7, lr}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80085a8:	6838      	ldr	r0, [r7, #0]
 80085aa:	f000 f96d 	bl	8008888 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80085ae:	4603      	mov	r3, r0
 80085b0:	4622      	mov	r2, r4
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f972 	bl	800889e <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd90      	pop	{r4, r7, pc}

080085c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f97f 	bl	80088d0 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7f9 fcf6 	bl	8001fd4 <_ZNKSt9_Any_data9_M_accessEv>
 80085e8:	4603      	mov	r3, r0
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	7138      	strb	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008628:	6838      	ldr	r0, [r7, #0]
 800862a:	f7ff ffed 	bl	8008608 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800862e:	4603      	mov	r3, r0
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4798      	blx	r3
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008646:	6838      	ldr	r0, [r7, #0]
 8008648:	f000 f94e 	bl	80088e8 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800864c:	4603      	mov	r3, r0
 800864e:	4622      	mov	r2, r4
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f953 	bl	80088fe <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	bd90      	pop	{r4, r7, pc}

08008660 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f960 	bl	8008930 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f95d 	bl	8008948 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff ffe6 	bl	8008678 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80086b6:	b590      	push	{r4, r7, lr}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f955 	bl	8008970 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80086c6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f95a 	bl	800898a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80086d6:	4604      	mov	r4, r0
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f963 	bl	80089a4 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80086de:	4603      	mov	r3, r0
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4619      	mov	r1, r3
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 f968 	bl	80089ba <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
      }
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}

080086fa <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8008704:	6838      	ldr	r0, [r7, #0]
 8008706:	f000 f97d 	bl	8008a04 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 800870a:	4603      	mov	r3, r0
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f964 	bl	80089dc <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8008714:	6838      	ldr	r0, [r7, #0]
 8008716:	f000 f938 	bl	800898a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800871a:	4603      	mov	r3, r0
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f98b 	bl	8008a38 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008722:	4602      	mov	r2, r0
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f98f 	bl	8008a4e <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f974 	bl	8008a1e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8008736:	687b      	ldr	r3, [r7, #4]
	}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3308      	adds	r3, #8
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fec3 	bl	80074d8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 800876c:	2010      	movs	r0, #16
 800876e:	f00a fbf2 	bl	8012f56 <_Znwj>
 8008772:	4603      	mov	r3, r0
 8008774:	461c      	mov	r4, r3
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	4620      	mov	r0, r4
 800877a:	f000 f975 	bl	8008a68 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601c      	str	r4, [r3, #0]
	}
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}

0800878c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	601a      	str	r2, [r3, #0]
      }
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff ffed 	bl	80087b6 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80087dc:	4603      	mov	r3, r0
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80087e2:	6838      	ldr	r0, [r7, #0]
 80087e4:	f7ff ffe7 	bl	80087b6 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80087e8:	4603      	mov	r3, r0
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80087f0:	f107 030c 	add.w	r3, r7, #12
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff ffde 	bl	80087b6 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80087fa:	4603      	mov	r3, r0
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	601a      	str	r2, [r3, #0]
    }
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f93e 	bl	8008a94 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008818:	4603      	mov	r3, r0
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f93f 	bl	8008aae <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f92f 	bl	8008ac4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8008866:	4603      	mov	r3, r0
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f92e 	bl	8008ada <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 800887e:	4603      	mov	r3, r0
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800889e:	b590      	push	{r4, r7, lr}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80088aa:	68b8      	ldr	r0, [r7, #8]
 80088ac:	f7ff ffec 	bl	8008888 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80088b0:	4603      	mov	r3, r0
 80088b2:	681c      	ldr	r4, [r3, #0]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7f9 fb82 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4619      	mov	r1, r3
 80088be:	2004      	movs	r0, #4
 80088c0:	f7f9 fb32 	bl	8001f28 <_ZnwjPv>
 80088c4:	4603      	mov	r3, r0
 80088c6:	601c      	str	r4, [r3, #0]
	  }
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd90      	pop	{r4, r7, pc}

080088d0 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7f9 fb70 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 80088de:	4603      	mov	r3, r0
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80088fe:	b590      	push	{r4, r7, lr}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800890a:	68b8      	ldr	r0, [r7, #8]
 800890c:	f7ff ffec 	bl	80088e8 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008910:	4603      	mov	r3, r0
 8008912:	681c      	ldr	r4, [r3, #0]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7f9 fb52 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 800891a:	4603      	mov	r3, r0
 800891c:	4619      	mov	r1, r3
 800891e:	2004      	movs	r0, #4
 8008920:	f7f9 fb02 	bl	8001f28 <_ZnwjPv>
 8008924:	4603      	mov	r3, r0
 8008926:	601c      	str	r4, [r3, #0]
	  }
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	bd90      	pop	{r4, r7, pc}

08008930 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7f9 fb40 	bl	8001fbe <_ZNSt9_Any_data9_M_accessEv>
 800893e:	4603      	mov	r3, r0
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8008948:	b590      	push	{r4, r7, lr}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f8cc 	bl	8008af2 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800895a:	683c      	ldr	r4, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f807 	bl	8008970 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008962:	4603      	mov	r3, r0
 8008964:	601c      	str	r4, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bd90      	pop	{r4, r7, pc}

08008970 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f8c6 	bl	8008b0c <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008980:	4603      	mov	r3, r0
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f8c6 	bl	8008b26 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 800899a:	4603      	mov	r3, r0
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	320c      	adds	r2, #12
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	4790      	blx	r2
      }
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80089e6:	687c      	ldr	r4, [r7, #4]
 80089e8:	463b      	mov	r3, r7
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f8a8 	bl	8008b40 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80089f0:	4603      	mov	r3, r0
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4619      	mov	r1, r3
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 f8ad 	bl	8008b56 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd90      	pop	{r4, r7, pc}

08008a04 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f8c1 	bl	8008b96 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8008a14:	4603      	mov	r3, r0
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f8c9 	bl	8008bc0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
	...

08008a68 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f8b1 	bl	8008bdc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8008a7a:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	60da      	str	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	08018224 	.word	0x08018224

08008a94 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f8b2 	bl	8008c08 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f89b 	bl	8008c1e <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f899 	bl	8008c34 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 f89c 	bl	8008c54 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f89b 	bl	8008c6c <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008b36:	4603      	mov	r3, r0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008b56:	b590      	push	{r4, r7, lr}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f88f 	bl	8008c84 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008b6c:	683c      	ldr	r4, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f888 	bl	8008c84 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008b74:	4603      	mov	r3, r0
 8008b76:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f81e 	bl	8008bc0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008b84:	4603      	mov	r3, r0
 8008b86:	68f9      	ldr	r1, [r7, #12]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f888 	bl	8008c9e <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008b8e:	bf00      	nop
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd90      	pop	{r4, r7, pc}

08008b96 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff fee6 	bl	8008970 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fee0 	bl	8008970 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
	return __p;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
      }
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f878 	bl	8008cc0 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8008be4:	4a07      	ldr	r2, [pc, #28]	; (8008c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	605a      	str	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	609a      	str	r2, [r3, #8]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	080182e4 	.word	0x080182e4

08008c08 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f84b 	bl	8008cd8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 f853 	bl	8008cf0 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f855 	bl	8008d0c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008c62:	4603      	mov	r3, r0
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f856 	bl	8008d26 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f855 	bl	8008d3e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008c94:	4603      	mov	r3, r0
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	320c      	adds	r2, #12
 8008cb2:	6812      	ldr	r2, [r2, #0]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	4790      	blx	r2
      }
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f845 	bl	8008d58 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f845 	bl	8008d70 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f835 	bl	8008d86 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f834 	bl	8008d9c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8008d34:	4603      	mov	r3, r0
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f833 	bl	8008db4 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f833 	bl	8008dcc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8008d66:	4603      	mov	r3, r0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f81d 	bl	8008de4 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8008daa:	4603      	mov	r3, r0
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f81c 	bl	8008dfa <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f81d 	bl	8008e14 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f810 	bl	8008e2a <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	4a05      	ldr	r2, [pc, #20]	; (8008e60 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fdc5 	bl	80079e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	08018224 	.word	0x08018224

08008e64 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ffe7 	bl	8008e40 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008e72:	2110      	movs	r1, #16
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f00a f86c 	bl	8012f52 <_ZdlPvj>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3310      	adds	r3, #16
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f9 f8db 	bl	800204c <_ZNSt8functionIFvvEED1Ev>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f9 f8ca 	bl	8002032 <_ZNSt8functionIFyvEED1Ev>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <_Z41__static_initialization_and_destruction_0ii>:




}
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d122      	bne.n	8008efe <_Z41__static_initialization_and_destruction_0ii+0x56>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d11d      	bne.n	8008efe <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8008ec2:	f107 0308 	add.w	r3, r7, #8
 8008ec6:	4917      	ldr	r1, [pc, #92]	; (8008f24 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fb39 	bl	8007540 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8008ece:	f107 0318 	add.w	r3, r7, #24
 8008ed2:	4915      	ldr	r1, [pc, #84]	; (8008f28 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fb63 	bl	80075a0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8008eda:	f107 0218 	add.w	r2, r7, #24
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4811      	ldr	r0, [pc, #68]	; (8008f2c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008ee6:	f7f9 f8be 	bl	8002066 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8008eea:	f107 0318 	add.w	r3, r7, #24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 f8ac 	bl	800204c <_ZNSt8functionIFvvEED1Ev>
 8008ef4:	f107 0308 	add.w	r3, r7, #8
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7f9 f89a 	bl	8002032 <_ZNSt8functionIFyvEED1Ev>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d105      	bne.n	8008f1a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008f0e:	4807      	ldr	r0, [pc, #28]	; (8008f2c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008f10:	f7ff ffb8 	bl	8008e84 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8008f14:	4806      	ldr	r0, [pc, #24]	; (8008f30 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008f16:	f7fd f898 	bl	800604a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8008f1a:	bf00      	nop
 8008f1c:	3728      	adds	r7, #40	; 0x28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08005fdd 	.word	0x08005fdd
 8008f28:	08005fd1 	.word	0x08005fd1
 8008f2c:	200004c4 	.word	0x200004c4
 8008f30:	200004bc 	.word	0x200004bc

08008f34 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68dc      	ldr	r4, [r3, #12]
 8008f40:	2c00      	cmp	r4, #0
 8008f42:	d006      	beq.n	8008f52 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8008f44:	4620      	mov	r0, r4
 8008f46:	f7ff fbfb 	bl	8008740 <_ZN15CyphalInterfaceD1Ev>
 8008f4a:	210c      	movs	r1, #12
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f00a f800 	bl	8012f52 <_ZdlPvj>
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd90      	pop	{r4, r7, pc}

08008f5a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
      { delete this; }
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff7b 	bl	8008e64 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8008f80:	2300      	movs	r3, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008f9a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008f9e:	6018      	str	r0, [r3, #0]
 8008fa0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008fa4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008fa8:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 8008faa:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008fae:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fbb7 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008fbe:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008fc2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008fc6:	f107 0108 	add.w	r1, r7, #8
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	f000 f874 	bl	80090b8 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008fd0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008fd4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008fe4:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8008ff0:	f5a0 7047 	sub.w	r0, r0, #796	; 0x31c
 8008ff4:	6812      	ldr	r2, [r2, #0]
 8008ff6:	6800      	ldr	r0, [r0, #0]
 8008ff8:	4798      	blx	r3
    }
 8008ffa:	bf00      	nop
 8008ffc:	f507 7748 	add.w	r7, r7, #800	; 0x320
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fb89 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800901a:	f107 030c 	add.w	r3, r7, #12
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	f000 f86a 	bl	80090fa <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3304      	adds	r3, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f107 010c 	add.w	r1, r7, #12
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
    }
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fb6b 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009056:	f107 030c 	add.w	r3, r7, #12
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4619      	mov	r1, r3
 800905e:	f000 f86c 	bl	800913a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3304      	adds	r3, #4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f107 010c 	add.w	r1, r7, #12
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
    }
 8009074:	bf00      	nop
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fb4d 	bl	800772c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4619      	mov	r1, r3
 800909a:	f000 f86e 	bl	800917a <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3304      	adds	r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f107 0108 	add.w	r1, r7, #8
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
    }
 80090b0:	bf00      	nop
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 80090c4:	f240 2303 	movw	r3, #515	; 0x203
 80090c8:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f107 0214 	add.w	r2, r7, #20
 80090d2:	4619      	mov	r1, r3
 80090d4:	68b8      	ldr	r0, [r7, #8]
 80090d6:	f7fc fbc9 	bl	800586c <uavcan_register_Access_Request_1_0_deserialize_>
 80090da:	4603      	mov	r3, r0
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	09db      	lsrs	r3, r3, #7
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d005      	beq.n	80090f2 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	3310      	adds	r3, #16
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fe55 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
    }
}
 80090f2:	bf00      	nop
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b086      	sub	sp, #24
 80090fe:	af00      	add	r7, sp, #0
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	f107 0214 	add.w	r2, r7, #20
 8009112:	4619      	mov	r1, r3
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f7fc fd95 	bl	8005c44 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 800911a:	4603      	mov	r3, r0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	09db      	lsrs	r3, r3, #7
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	3310      	adds	r3, #16
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fe35 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
}
 8009132:	bf00      	nop
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009146:	230c      	movs	r3, #12
 8009148:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	f107 0214 	add.w	r2, r7, #20
 8009152:	4619      	mov	r1, r3
 8009154:	68b8      	ldr	r0, [r7, #8]
 8009156:	f7fa f87f 	bl	8003258 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 800915a:	4603      	mov	r3, r0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	09db      	lsrs	r3, r3, #7
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	3310      	adds	r3, #16
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fe15 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
}
 8009172:	bf00      	nop
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	60b9      	str	r1, [r7, #8]
 8009184:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009186:	230c      	movs	r3, #12
 8009188:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f107 0214 	add.w	r2, r7, #20
 8009192:	4619      	mov	r1, r3
 8009194:	68b8      	ldr	r0, [r7, #8]
 8009196:	f7f9 fce9 	bl	8002b6c <uavcan_node_Heartbeat_1_0_deserialize_>
 800919a:	4603      	mov	r3, r0
 800919c:	b2db      	uxtb	r3, r3
 800919e:	09db      	lsrs	r3, r3, #7
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	3310      	adds	r3, #16
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe fdf5 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
}
 80091b2:	bf00      	nop
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <_GLOBAL__sub_I_buffer>:
 80091ba:	b580      	push	{r7, lr}
 80091bc:	af00      	add	r7, sp, #0
 80091be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80091c2:	2001      	movs	r0, #1
 80091c4:	f7ff fe70 	bl	8008ea8 <_Z41__static_initialization_and_destruction_0ii>
 80091c8:	bd80      	pop	{r7, pc}

080091ca <_GLOBAL__sub_D_buffer>:
 80091ca:	b580      	push	{r7, lr}
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7ff fe68 	bl	8008ea8 <_Z41__static_initialization_and_destruction_0ii>
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80091e0:	4b1b      	ldr	r3, [pc, #108]	; (8009250 <MX_SPI1_Init+0x74>)
 80091e2:	4a1c      	ldr	r2, [pc, #112]	; (8009254 <MX_SPI1_Init+0x78>)
 80091e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80091e6:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <MX_SPI1_Init+0x74>)
 80091e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80091ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80091ee:	4b18      	ldr	r3, [pc, #96]	; (8009250 <MX_SPI1_Init+0x74>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80091f4:	4b16      	ldr	r3, [pc, #88]	; (8009250 <MX_SPI1_Init+0x74>)
 80091f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80091fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80091fc:	4b14      	ldr	r3, [pc, #80]	; (8009250 <MX_SPI1_Init+0x74>)
 80091fe:	2202      	movs	r2, #2
 8009200:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009202:	4b13      	ldr	r3, [pc, #76]	; (8009250 <MX_SPI1_Init+0x74>)
 8009204:	2201      	movs	r2, #1
 8009206:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009208:	4b11      	ldr	r3, [pc, #68]	; (8009250 <MX_SPI1_Init+0x74>)
 800920a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800920e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <MX_SPI1_Init+0x74>)
 8009212:	2220      	movs	r2, #32
 8009214:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009216:	4b0e      	ldr	r3, [pc, #56]	; (8009250 <MX_SPI1_Init+0x74>)
 8009218:	2200      	movs	r2, #0
 800921a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800921c:	4b0c      	ldr	r3, [pc, #48]	; (8009250 <MX_SPI1_Init+0x74>)
 800921e:	2200      	movs	r2, #0
 8009220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009222:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <MX_SPI1_Init+0x74>)
 8009224:	2200      	movs	r2, #0
 8009226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009228:	4b09      	ldr	r3, [pc, #36]	; (8009250 <MX_SPI1_Init+0x74>)
 800922a:	2207      	movs	r2, #7
 800922c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800922e:	4b08      	ldr	r3, [pc, #32]	; (8009250 <MX_SPI1_Init+0x74>)
 8009230:	2200      	movs	r2, #0
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <MX_SPI1_Init+0x74>)
 8009236:	2200      	movs	r2, #0
 8009238:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800923a:	4805      	ldr	r0, [pc, #20]	; (8009250 <MX_SPI1_Init+0x74>)
 800923c:	f004 fd38 	bl	800dcb0 <HAL_SPI_Init>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009246:	f7f8 fe6a 	bl	8001f1e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800924a:	bf00      	nop
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200007a0 	.word	0x200007a0
 8009254:	40013000 	.word	0x40013000

08009258 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800925c:	4b1b      	ldr	r3, [pc, #108]	; (80092cc <MX_SPI3_Init+0x74>)
 800925e:	4a1c      	ldr	r2, [pc, #112]	; (80092d0 <MX_SPI3_Init+0x78>)
 8009260:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009262:	4b1a      	ldr	r3, [pc, #104]	; (80092cc <MX_SPI3_Init+0x74>)
 8009264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009268:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800926a:	4b18      	ldr	r3, [pc, #96]	; (80092cc <MX_SPI3_Init+0x74>)
 800926c:	2200      	movs	r2, #0
 800926e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8009270:	4b16      	ldr	r3, [pc, #88]	; (80092cc <MX_SPI3_Init+0x74>)
 8009272:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009276:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009278:	4b14      	ldr	r3, [pc, #80]	; (80092cc <MX_SPI3_Init+0x74>)
 800927a:	2200      	movs	r2, #0
 800927c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800927e:	4b13      	ldr	r3, [pc, #76]	; (80092cc <MX_SPI3_Init+0x74>)
 8009280:	2201      	movs	r2, #1
 8009282:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009284:	4b11      	ldr	r3, [pc, #68]	; (80092cc <MX_SPI3_Init+0x74>)
 8009286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800928a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800928c:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <MX_SPI3_Init+0x74>)
 800928e:	2218      	movs	r2, #24
 8009290:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009292:	4b0e      	ldr	r3, [pc, #56]	; (80092cc <MX_SPI3_Init+0x74>)
 8009294:	2200      	movs	r2, #0
 8009296:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009298:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <MX_SPI3_Init+0x74>)
 800929a:	2200      	movs	r2, #0
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800929e:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <MX_SPI3_Init+0x74>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <MX_SPI3_Init+0x74>)
 80092a6:	2207      	movs	r2, #7
 80092a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80092aa:	4b08      	ldr	r3, [pc, #32]	; (80092cc <MX_SPI3_Init+0x74>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80092b0:	4b06      	ldr	r3, [pc, #24]	; (80092cc <MX_SPI3_Init+0x74>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80092b6:	4805      	ldr	r0, [pc, #20]	; (80092cc <MX_SPI3_Init+0x74>)
 80092b8:	f004 fcfa 	bl	800dcb0 <HAL_SPI_Init>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80092c2:	f7f8 fe2c 	bl	8001f1e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80092c6:	bf00      	nop
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000804 	.word	0x20000804
 80092d0:	40003c00 	.word	0x40003c00

080092d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08c      	sub	sp, #48	; 0x30
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092dc:	f107 031c 	add.w	r3, r7, #28
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	605a      	str	r2, [r3, #4]
 80092e6:	609a      	str	r2, [r3, #8]
 80092e8:	60da      	str	r2, [r3, #12]
 80092ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a33      	ldr	r2, [pc, #204]	; (80093c0 <HAL_SPI_MspInit+0xec>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d131      	bne.n	800935a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80092f6:	4b33      	ldr	r3, [pc, #204]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 80092f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fa:	4a32      	ldr	r2, [pc, #200]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 80092fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009300:	6613      	str	r3, [r2, #96]	; 0x60
 8009302:	4b30      	ldr	r3, [pc, #192]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 8009304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800930a:	61bb      	str	r3, [r7, #24]
 800930c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800930e:	4b2d      	ldr	r3, [pc, #180]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 8009310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009312:	4a2c      	ldr	r2, [pc, #176]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800931a:	4b2a      	ldr	r3, [pc, #168]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 800931c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009326:	23e0      	movs	r3, #224	; 0xe0
 8009328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800932a:	2302      	movs	r3, #2
 800932c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009332:	2300      	movs	r3, #0
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009336:	2305      	movs	r3, #5
 8009338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800933a:	f107 031c 	add.w	r3, r7, #28
 800933e:	4619      	mov	r1, r3
 8009340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009344:	f002 f82e 	bl	800b3a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8009348:	2200      	movs	r2, #0
 800934a:	2100      	movs	r1, #0
 800934c:	2023      	movs	r0, #35	; 0x23
 800934e:	f001 f8e6 	bl	800a51e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009352:	2023      	movs	r0, #35	; 0x23
 8009354:	f001 f8fd 	bl	800a552 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009358:	e02d      	b.n	80093b6 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1a      	ldr	r2, [pc, #104]	; (80093c8 <HAL_SPI_MspInit+0xf4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d128      	bne.n	80093b6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009364:	4b17      	ldr	r3, [pc, #92]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 8009366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009368:	4a16      	ldr	r2, [pc, #88]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 800936a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800936e:	6593      	str	r3, [r2, #88]	; 0x58
 8009370:	4b14      	ldr	r3, [pc, #80]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 8009372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 800937e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009380:	4a10      	ldr	r2, [pc, #64]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 8009382:	f043 0304 	orr.w	r3, r3, #4
 8009386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <HAL_SPI_MspInit+0xf0>)
 800938a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009394:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800939a:	2302      	movs	r3, #2
 800939c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093a2:	2300      	movs	r3, #0
 80093a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80093a6:	2306      	movs	r3, #6
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093aa:	f107 031c 	add.w	r3, r7, #28
 80093ae:	4619      	mov	r1, r3
 80093b0:	4806      	ldr	r0, [pc, #24]	; (80093cc <HAL_SPI_MspInit+0xf8>)
 80093b2:	f001 fff7 	bl	800b3a4 <HAL_GPIO_Init>
}
 80093b6:	bf00      	nop
 80093b8:	3730      	adds	r7, #48	; 0x30
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	40013000 	.word	0x40013000
 80093c4:	40021000 	.word	0x40021000
 80093c8:	40003c00 	.word	0x40003c00
 80093cc:	48000800 	.word	0x48000800

080093d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <HAL_MspInit+0x44>)
 80093d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093da:	4a0e      	ldr	r2, [pc, #56]	; (8009414 <HAL_MspInit+0x44>)
 80093dc:	f043 0301 	orr.w	r3, r3, #1
 80093e0:	6613      	str	r3, [r2, #96]	; 0x60
 80093e2:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <HAL_MspInit+0x44>)
 80093e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	607b      	str	r3, [r7, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093ee:	4b09      	ldr	r3, [pc, #36]	; (8009414 <HAL_MspInit+0x44>)
 80093f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f2:	4a08      	ldr	r2, [pc, #32]	; (8009414 <HAL_MspInit+0x44>)
 80093f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f8:	6593      	str	r3, [r2, #88]	; 0x58
 80093fa:	4b06      	ldr	r3, [pc, #24]	; (8009414 <HAL_MspInit+0x44>)
 80093fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009406:	f003 fcc7 	bl	800cd98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40021000 	.word	0x40021000

08009418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800941c:	e7fe      	b.n	800941c <NMI_Handler+0x4>

0800941e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800941e:	b480      	push	{r7}
 8009420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009422:	e7fe      	b.n	8009422 <HardFault_Handler+0x4>

08009424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009428:	e7fe      	b.n	8009428 <MemManage_Handler+0x4>

0800942a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800942a:	b480      	push	{r7}
 800942c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800942e:	e7fe      	b.n	800942e <BusFault_Handler+0x4>

08009430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009434:	e7fe      	b.n	8009434 <UsageFault_Handler+0x4>

08009436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009436:	b480      	push	{r7}
 8009438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800943a:	bf00      	nop
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009448:	bf00      	nop
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009452:	b480      	push	{r7}
 8009454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009456:	bf00      	nop
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009464:	f000 ff40 	bl	800a2e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009468:	bf00      	nop
 800946a:	bd80      	pop	{r7, pc}

0800946c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8009470:	4802      	ldr	r0, [pc, #8]	; (800947c <DMA1_Channel1_IRQHandler+0x10>)
 8009472:	f001 f9f1 	bl	800a858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009476:	bf00      	nop
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000368 	.word	0x20000368

08009480 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8009484:	4802      	ldr	r0, [pc, #8]	; (8009490 <DMA1_Channel2_IRQHandler+0x10>)
 8009486:	f001 f9e7 	bl	800a858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800948a:	bf00      	nop
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200003c8 	.word	0x200003c8

08009494 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009498:	4802      	ldr	r0, [pc, #8]	; (80094a4 <SPI1_IRQHandler+0x10>)
 800949a:	f005 f84b 	bl	800e534 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200007a0 	.word	0x200007a0

080094a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80094ac:	4802      	ldr	r0, [pc, #8]	; (80094b8 <USART2_IRQHandler+0x10>)
 80094ae:	f005 fcf9 	bl	800eea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80094b2:	bf00      	nop
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200008b8 	.word	0x200008b8

080094bc <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80094c0:	4802      	ldr	r0, [pc, #8]	; (80094cc <I2C4_EV_IRQHandler+0x10>)
 80094c2:	f002 fad9 	bl	800ba78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80094c6:	bf00      	nop
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000314 	.word	0x20000314

080094d0 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80094d4:	4802      	ldr	r0, [pc, #8]	; (80094e0 <I2C4_ER_IRQHandler+0x10>)
 80094d6:	f002 fae9 	bl	800baac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80094da:	bf00      	nop
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000314 	.word	0x20000314

080094e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return 1;
 80094e8:	2301      	movs	r3, #1
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <_kill>:

int _kill(int pid, int sig)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80094fe:	f00a fecd 	bl	801429c <__errno>
 8009502:	4603      	mov	r3, r0
 8009504:	2216      	movs	r2, #22
 8009506:	601a      	str	r2, [r3, #0]
  return -1;
 8009508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <_exit>:

void _exit (int status)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800951c:	f04f 31ff 	mov.w	r1, #4294967295
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff ffe7 	bl	80094f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009526:	e7fe      	b.n	8009526 <_exit+0x12>

08009528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e00a      	b.n	8009550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800953a:	f3af 8000 	nop.w
 800953e:	4601      	mov	r1, r0
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	60ba      	str	r2, [r7, #8]
 8009546:	b2ca      	uxtb	r2, r1
 8009548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	3301      	adds	r3, #1
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	dbf0      	blt.n	800953a <_read+0x12>
  }

  return len;
 8009558:	687b      	ldr	r3, [r7, #4]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b086      	sub	sp, #24
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	e009      	b.n	8009588 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	60ba      	str	r2, [r7, #8]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	3301      	adds	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	429a      	cmp	r2, r3
 800958e:	dbf1      	blt.n	8009574 <_write+0x12>
  }
  return len;
 8009590:	687b      	ldr	r3, [r7, #4]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <_close>:

int _close(int file)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80095a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80095c2:	605a      	str	r2, [r3, #4]
  return 0;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <_isatty>:

int _isatty(int file)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80095da:	2301      	movs	r3, #1
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800960c:	4a14      	ldr	r2, [pc, #80]	; (8009660 <_sbrk+0x5c>)
 800960e:	4b15      	ldr	r3, [pc, #84]	; (8009664 <_sbrk+0x60>)
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009618:	4b13      	ldr	r3, [pc, #76]	; (8009668 <_sbrk+0x64>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009620:	4b11      	ldr	r3, [pc, #68]	; (8009668 <_sbrk+0x64>)
 8009622:	4a12      	ldr	r2, [pc, #72]	; (800966c <_sbrk+0x68>)
 8009624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009626:	4b10      	ldr	r3, [pc, #64]	; (8009668 <_sbrk+0x64>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	429a      	cmp	r2, r3
 8009632:	d207      	bcs.n	8009644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009634:	f00a fe32 	bl	801429c <__errno>
 8009638:	4603      	mov	r3, r0
 800963a:	220c      	movs	r2, #12
 800963c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800963e:	f04f 33ff 	mov.w	r3, #4294967295
 8009642:	e009      	b.n	8009658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009644:	4b08      	ldr	r3, [pc, #32]	; (8009668 <_sbrk+0x64>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <_sbrk+0x64>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	4a05      	ldr	r2, [pc, #20]	; (8009668 <_sbrk+0x64>)
 8009654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009656:	68fb      	ldr	r3, [r7, #12]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20020000 	.word	0x20020000
 8009664:	00000400 	.word	0x00000400
 8009668:	20000868 	.word	0x20000868
 800966c:	20000ae8 	.word	0x20000ae8

08009670 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009674:	4b06      	ldr	r3, [pc, #24]	; (8009690 <SystemInit+0x20>)
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967a:	4a05      	ldr	r2, [pc, #20]	; (8009690 <SystemInit+0x20>)
 800967c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009684:	bf00      	nop
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	e000ed00 	.word	0xe000ed00

08009694 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08c      	sub	sp, #48	; 0x30
 8009698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800969a:	f107 030c 	add.w	r3, r7, #12
 800969e:	2224      	movs	r2, #36	; 0x24
 80096a0:	2100      	movs	r1, #0
 80096a2:	4618      	mov	r0, r3
 80096a4:	f00a fd41 	bl	801412a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096a8:	463b      	mov	r3, r7
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	605a      	str	r2, [r3, #4]
 80096b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80096b2:	4b23      	ldr	r3, [pc, #140]	; (8009740 <MX_TIM8_Init+0xac>)
 80096b4:	4a23      	ldr	r2, [pc, #140]	; (8009744 <MX_TIM8_Init+0xb0>)
 80096b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80096b8:	4b21      	ldr	r3, [pc, #132]	; (8009740 <MX_TIM8_Init+0xac>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096be:	4b20      	ldr	r3, [pc, #128]	; (8009740 <MX_TIM8_Init+0xac>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80096c4:	4b1e      	ldr	r3, [pc, #120]	; (8009740 <MX_TIM8_Init+0xac>)
 80096c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096cc:	4b1c      	ldr	r3, [pc, #112]	; (8009740 <MX_TIM8_Init+0xac>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80096d2:	4b1b      	ldr	r3, [pc, #108]	; (8009740 <MX_TIM8_Init+0xac>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096d8:	4b19      	ldr	r3, [pc, #100]	; (8009740 <MX_TIM8_Init+0xac>)
 80096da:	2200      	movs	r2, #0
 80096dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80096de:	2301      	movs	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80096e2:	2300      	movs	r3, #0
 80096e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80096e6:	2301      	movs	r3, #1
 80096e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80096ea:	2300      	movs	r3, #0
 80096ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80096f2:	2300      	movs	r3, #0
 80096f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80096f6:	2301      	movs	r3, #1
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80096fa:	2300      	movs	r3, #0
 80096fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	4619      	mov	r1, r3
 8009708:	480d      	ldr	r0, [pc, #52]	; (8009740 <MX_TIM8_Init+0xac>)
 800970a:	f005 f98b 	bl	800ea24 <HAL_TIM_Encoder_Init>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8009714:	f7f8 fc03 	bl	8001f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009718:	2300      	movs	r3, #0
 800971a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800971c:	2300      	movs	r3, #0
 800971e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009720:	2300      	movs	r3, #0
 8009722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009724:	463b      	mov	r3, r7
 8009726:	4619      	mov	r1, r3
 8009728:	4805      	ldr	r0, [pc, #20]	; (8009740 <MX_TIM8_Init+0xac>)
 800972a:	f005 fad5 	bl	800ecd8 <HAL_TIMEx_MasterConfigSynchronization>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8009734:	f7f8 fbf3 	bl	8001f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009738:	bf00      	nop
 800973a:	3730      	adds	r7, #48	; 0x30
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	2000086c 	.word	0x2000086c
 8009744:	40013400 	.word	0x40013400

08009748 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a25      	ldr	r2, [pc, #148]	; (80097fc <HAL_TIM_Encoder_MspInit+0xb4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d143      	bne.n	80097f2 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800976a:	4b25      	ldr	r3, [pc, #148]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 800976c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976e:	4a24      	ldr	r2, [pc, #144]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009774:	6613      	str	r3, [r2, #96]	; 0x60
 8009776:	4b22      	ldr	r3, [pc, #136]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009782:	4b1f      	ldr	r3, [pc, #124]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	4a1e      	ldr	r2, [pc, #120]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009788:	f043 0304 	orr.w	r3, r3, #4
 800978c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800978e:	4b1c      	ldr	r3, [pc, #112]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800979a:	4b19      	ldr	r3, [pc, #100]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 800979c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979e:	4a18      	ldr	r2, [pc, #96]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 80097a0:	f043 0302 	orr.w	r3, r3, #2
 80097a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097a6:	4b16      	ldr	r3, [pc, #88]	; (8009800 <HAL_TIM_Encoder_MspInit+0xb8>)
 80097a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	60bb      	str	r3, [r7, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80097b2:	2380      	movs	r3, #128	; 0x80
 80097b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097b6:	2302      	movs	r3, #2
 80097b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ba:	2300      	movs	r3, #0
 80097bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097be:	2300      	movs	r3, #0
 80097c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80097c2:	2304      	movs	r3, #4
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097c6:	f107 0314 	add.w	r3, r7, #20
 80097ca:	4619      	mov	r1, r3
 80097cc:	480d      	ldr	r0, [pc, #52]	; (8009804 <HAL_TIM_Encoder_MspInit+0xbc>)
 80097ce:	f001 fde9 	bl	800b3a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80097d2:	2340      	movs	r3, #64	; 0x40
 80097d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d6:	2302      	movs	r3, #2
 80097d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097de:	2300      	movs	r3, #0
 80097e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80097e2:	2305      	movs	r3, #5
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097e6:	f107 0314 	add.w	r3, r7, #20
 80097ea:	4619      	mov	r1, r3
 80097ec:	4806      	ldr	r0, [pc, #24]	; (8009808 <HAL_TIM_Encoder_MspInit+0xc0>)
 80097ee:	f001 fdd9 	bl	800b3a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80097f2:	bf00      	nop
 80097f4:	3728      	adds	r7, #40	; 0x28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	40013400 	.word	0x40013400
 8009800:	40021000 	.word	0x40021000
 8009804:	48000800 	.word	0x48000800
 8009808:	48000400 	.word	0x48000400

0800980c <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8009814:	2300      	movs	r3, #0
 8009816:	60bb      	str	r3, [r7, #8]
 8009818:	2300      	movs	r3, #0
 800981a:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 800981c:	23a0      	movs	r3, #160	; 0xa0
 800981e:	723b      	strb	r3, [r7, #8]
 8009820:	2300      	movs	r3, #0
 8009822:	727b      	strb	r3, [r7, #9]
 8009824:	2300      	movs	r3, #0
 8009826:	72bb      	strb	r3, [r7, #10]
 8009828:	2300      	movs	r3, #0
 800982a:	72fb      	strb	r3, [r7, #11]
 800982c:	2300      	movs	r3, #0
 800982e:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009830:	f107 0308 	add.w	r3, r7, #8
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f947 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 800983a:	23ad      	movs	r3, #173	; 0xad
 800983c:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	0e1b      	lsrs	r3, r3, #24
 8009842:	b2db      	uxtb	r3, r3
 8009844:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	141b      	asrs	r3, r3, #16
 800984a:	b2db      	uxtb	r3, r3
 800984c:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	121b      	asrs	r3, r3, #8
 8009852:	b2db      	uxtb	r3, r3
 8009854:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800985c:	f107 0308 	add.w	r3, r7, #8
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f931 	bl	8009ac8 <tmc5160_write>
}
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f6 fe7b 	bl	8000574 <__aeabi_i2d>
 800987e:	a336      	add	r3, pc, #216	; (adr r3, 8009958 <tmc5160_move+0xe8>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 fee0 	bl	8000648 <__aeabi_dmul>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4610      	mov	r0, r2
 800988e:	4619      	mov	r1, r3
 8009890:	f7f7 f98a 	bl	8000ba8 <__aeabi_d2iz>
 8009894:	4603      	mov	r3, r0
 8009896:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	2300      	movs	r3, #0
 800989e:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	105b      	asrs	r3, r3, #1
 80098a4:	617b      	str	r3, [r7, #20]

	if (vel < 0) //select positive or negative mode depending on vel sign
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0f      	bge.n	80098cc <tmc5160_move+0x5c>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 80098ac:	23a0      	movs	r3, #160	; 0xa0
 80098ae:	733b      	strb	r3, [r7, #12]
 80098b0:	2300      	movs	r3, #0
 80098b2:	737b      	strb	r3, [r7, #13]
 80098b4:	2300      	movs	r3, #0
 80098b6:	73bb      	strb	r3, [r7, #14]
 80098b8:	2300      	movs	r3, #0
 80098ba:	73fb      	strb	r3, [r7, #15]
 80098bc:	2302      	movs	r3, #2
 80098be:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 80098c0:	f107 030c 	add.w	r3, r7, #12
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 f8ff 	bl	8009ac8 <tmc5160_write>
 80098ca:	e00e      	b.n	80098ea <tmc5160_move+0x7a>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 80098cc:	23a0      	movs	r3, #160	; 0xa0
 80098ce:	733b      	strb	r3, [r7, #12]
 80098d0:	2300      	movs	r3, #0
 80098d2:	737b      	strb	r3, [r7, #13]
 80098d4:	2300      	movs	r3, #0
 80098d6:	73bb      	strb	r3, [r7, #14]
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	2301      	movs	r3, #1
 80098de:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f8ef 	bl	8009ac8 <tmc5160_write>
	}

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 80098ea:	23a5      	movs	r3, #165	; 0xa5
 80098ec:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	0e1b      	lsrs	r3, r3, #24
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	141b      	asrs	r3, r3, #16
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	121b      	asrs	r3, r3, #8
 8009902:	b2db      	uxtb	r3, r3
 8009904:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800990c:	f107 030c 	add.w	r3, r7, #12
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f8d9 	bl	8009ac8 <tmc5160_write>

	vel = abs(vel);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfb8      	it	lt
 800991c:	425b      	neglt	r3, r3
 800991e:	607b      	str	r3, [r7, #4]
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009920:	23a7      	movs	r3, #167	; 0xa7
 8009922:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	0e1b      	lsrs	r3, r3, #24
 8009928:	b2db      	uxtb	r3, r3
 800992a:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	141b      	asrs	r3, r3, #16
 8009930:	b2db      	uxtb	r3, r3
 8009932:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	121b      	asrs	r3, r3, #8
 8009938:	b2db      	uxtb	r3, r3
 800993a:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f8be 	bl	8009ac8 <tmc5160_write>
}
 800994c:	bf00      	nop
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	f3af 8000 	nop.w
 8009958:	77ffebde 	.word	0x77ffebde
 800995c:	3ff65e9f 	.word	0x3ff65e9f

08009960 <tmc5160_set_default_vel>:

void tmc5160_set_default_vel()
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009966:	2300      	movs	r3, #0
 8009968:	603b      	str	r3, [r7, #0]
 800996a:	2300      	movs	r3, #0
 800996c:	713b      	strb	r3, [r7, #4]

	tmc5160_velocity(1000000); //initial vel config
 800996e:	482d      	ldr	r0, [pc, #180]	; (8009a24 <tmc5160_set_default_vel+0xc4>)
 8009970:	f000 f85a 	bl	8009a28 <tmc5160_velocity>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009974:	23a3      	movs	r3, #163	; 0xa3
 8009976:	703b      	strb	r3, [r7, #0]
 8009978:	2300      	movs	r3, #0
 800997a:	707b      	strb	r3, [r7, #1]
 800997c:	2300      	movs	r3, #0
 800997e:	70bb      	strb	r3, [r7, #2]
 8009980:	2300      	movs	r3, #0
 8009982:	70fb      	strb	r3, [r7, #3]
 8009984:	230a      	movs	r3, #10
 8009986:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009988:	463b      	mov	r3, r7
 800998a:	4618      	mov	r0, r3
 800998c:	f000 f89c 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8009990:	23a4      	movs	r3, #164	; 0xa4
 8009992:	703b      	strb	r3, [r7, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	707b      	strb	r3, [r7, #1]
 8009998:	2300      	movs	r3, #0
 800999a:	70bb      	strb	r3, [r7, #2]
 800999c:	236e      	movs	r3, #110	; 0x6e
 800999e:	70fb      	strb	r3, [r7, #3]
 80099a0:	2320      	movs	r3, #32
 80099a2:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80099a4:	463b      	mov	r3, r7
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f88e 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 80099ac:	23a6      	movs	r3, #166	; 0xa6
 80099ae:	703b      	strb	r3, [r7, #0]
 80099b0:	2300      	movs	r3, #0
 80099b2:	707b      	strb	r3, [r7, #1]
 80099b4:	2300      	movs	r3, #0
 80099b6:	70bb      	strb	r3, [r7, #2]
 80099b8:	2323      	movs	r3, #35	; 0x23
 80099ba:	70fb      	strb	r3, [r7, #3]
 80099bc:	2388      	movs	r3, #136	; 0x88
 80099be:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80099c0:	463b      	mov	r3, r7
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f880 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 80099c8:	23a8      	movs	r3, #168	; 0xa8
 80099ca:	703b      	strb	r3, [r7, #0]
 80099cc:	2300      	movs	r3, #0
 80099ce:	707b      	strb	r3, [r7, #1]
 80099d0:	2300      	movs	r3, #0
 80099d2:	70bb      	strb	r3, [r7, #2]
 80099d4:	2323      	movs	r3, #35	; 0x23
 80099d6:	70fb      	strb	r3, [r7, #3]
 80099d8:	2388      	movs	r3, #136	; 0x88
 80099da:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80099dc:	463b      	mov	r3, r7
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f872 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 80099e4:	23aa      	movs	r3, #170	; 0xaa
 80099e6:	703b      	strb	r3, [r7, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	707b      	strb	r3, [r7, #1]
 80099ec:	2300      	movs	r3, #0
 80099ee:	70bb      	strb	r3, [r7, #2]
 80099f0:	236e      	movs	r3, #110	; 0x6e
 80099f2:	70fb      	strb	r3, [r7, #3]
 80099f4:	2320      	movs	r3, #32
 80099f6:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80099f8:	463b      	mov	r3, r7
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 f864 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8009a00:	23ab      	movs	r3, #171	; 0xab
 8009a02:	703b      	strb	r3, [r7, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	707b      	strb	r3, [r7, #1]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	70bb      	strb	r3, [r7, #2]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	70fb      	strb	r3, [r7, #3]
 8009a10:	230a      	movs	r3, #10
 8009a12:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009a14:	463b      	mov	r3, r7
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 f856 	bl	8009ac8 <tmc5160_write>
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	000f4240 	.word	0x000f4240

08009a28 <tmc5160_velocity>:

void tmc5160_velocity(uint32_t vel)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7f6 fd8f 	bl	8000554 <__aeabi_ui2d>
 8009a36:	a322      	add	r3, pc, #136	; (adr r3, 8009ac0 <tmc5160_velocity+0x98>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fe04 	bl	8000648 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4610      	mov	r0, r2
 8009a46:	4619      	mov	r1, r3
 8009a48:	f7f7 f8d6 	bl	8000bf8 <__aeabi_d2uiz>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	2300      	movs	r3, #0
 8009a56:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	085b      	lsrs	r3, r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009a5e:	23a5      	movs	r3, #165	; 0xa5
 8009a60:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	0e1b      	lsrs	r3, r3, #24
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	0c1b      	lsrs	r3, r3, #16
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009a80:	f107 030c 	add.w	r3, r7, #12
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f81f 	bl	8009ac8 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009a8a:	23a7      	movs	r3, #167	; 0xa7
 8009a8c:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	0e1b      	lsrs	r3, r3, #24
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	0c1b      	lsrs	r3, r3, #16
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	0a1b      	lsrs	r3, r3, #8
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 f809 	bl	8009ac8 <tmc5160_write>

}
 8009ab6:	bf00      	nop
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	77ffebde 	.word	0x77ffebde
 8009ac4:	3ff65e9f 	.word	0x3ff65e9f

08009ac8 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2110      	movs	r1, #16
 8009ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ad8:	f001 fde6 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	2205      	movs	r2, #5
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	4806      	ldr	r0, [pc, #24]	; (8009b00 <tmc5160_write+0x38>)
 8009ae6:	f004 f98e 	bl	800de06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 8009aea:	2201      	movs	r2, #1
 8009aec:	2110      	movs	r1, #16
 8009aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009af2:	f001 fdd9 	bl	800b6a8 <HAL_GPIO_WritePin>
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	200007a0 	.word	0x200007a0

08009b04 <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af02      	add	r7, sp, #8
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2110      	movs	r1, #16
 8009b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b16:	f001 fdc7 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	2305      	movs	r3, #5
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4812      	ldr	r0, [pc, #72]	; (8009b70 <tmc5160_read+0x6c>)
 8009b28:	f004 fae2 	bl	800e0f0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	2110      	movs	r1, #16
 8009b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b34:	f001 fdb8 	bl	800b6a8 <HAL_GPIO_WritePin>
	nop();
 8009b38:	bf00      	nop
	nop();
 8009b3a:	bf00      	nop
	nop();
 8009b3c:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2110      	movs	r1, #16
 8009b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b46:	f001 fdaf 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	2305      	movs	r3, #5
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	4806      	ldr	r0, [pc, #24]	; (8009b70 <tmc5160_read+0x6c>)
 8009b58:	f004 faca 	bl	800e0f0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	2110      	movs	r1, #16
 8009b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b64:	f001 fda0 	bl	800b6a8 <HAL_GPIO_WritePin>
}
 8009b68:	bf00      	nop
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	200007a0 	.word	0x200007a0

08009b74 <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 8009b82:	2300      	movs	r3, #0
 8009b84:	607b      	str	r3, [r7, #4]
 8009b86:	2300      	movs	r3, #0
 8009b88:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 8009b8a:	2321      	movs	r3, #33	; 0x21
 8009b8c:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 8009b8e:	1d3a      	adds	r2, r7, #4
 8009b90:	f107 030c 	add.w	r3, r7, #12
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff ffb4 	bl	8009b04 <tmc5160_read>

	int32_t response = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8009ba0:	797b      	ldrb	r3, [r7, #5]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8009bb0:	79bb      	ldrb	r3, [r7, #6]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8009bd0:	7a3b      	ldrb	r3, [r7, #8]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]

	return response;
 8009bda:	697b      	ldr	r3, [r7, #20]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	0000      	movs	r0, r0
	...

08009be8 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	603b      	str	r3, [r7, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 8009bfe:	2322      	movs	r3, #34	; 0x22
 8009c00:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8009c02:	463a      	mov	r2, r7
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff ff7a 	bl	8009b04 <tmc5160_read>

	int32_t response = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 8009c14:	787b      	ldrb	r3, [r7, #1]
 8009c16:	461a      	mov	r2, r3
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 8009c24:	78bb      	ldrb	r3, [r7, #2]
 8009c26:	461a      	mov	r2, r3
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	461a      	mov	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 8009c44:	793b      	ldrb	r3, [r7, #4]
 8009c46:	461a      	mov	r2, r3
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 8009c52:	2118      	movs	r1, #24
 8009c54:	6978      	ldr	r0, [r7, #20]
 8009c56:	f000 fa3b 	bl	800a0d0 <sign_extend_bits_to_32>
 8009c5a:	6138      	str	r0, [r7, #16]

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009c5c:	6938      	ldr	r0, [r7, #16]
 8009c5e:	f7f6 fc89 	bl	8000574 <__aeabi_i2d>
 8009c62:	a309      	add	r3, pc, #36	; (adr r3, 8009c88 <tmc5160_velocity_read+0xa0>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f7f6 fe18 	bl	800089c <__aeabi_ddiv>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	4610      	mov	r0, r2
 8009c72:	4619      	mov	r1, r3
 8009c74:	f7f6 ff98 	bl	8000ba8 <__aeabi_d2iz>
 8009c78:	4603      	mov	r3, r0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	f3af 8000 	nop.w
 8009c88:	77ffebde 	.word	0x77ffebde
 8009c8c:	3ff65e9f 	.word	0x3ff65e9f

08009c90 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2120      	movs	r1, #32
 8009c9c:	487a      	ldr	r0, [pc, #488]	; (8009e88 <tmc5160_init+0x1f8>)
 8009c9e:	f001 fd03 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cac:	f001 fcfc 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cba:	f001 fcf5 	bl	800b6a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2110      	movs	r1, #16
 8009cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cc6:	f001 fcef 	bl	800b6a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cd4:	f001 fce8 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ce2:	f001 fce1 	bl	800b6a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009ce6:	2064      	movs	r0, #100	; 0x64
 8009ce8:	f000 fb1c 	bl	800a324 <HAL_Delay>

	uint8_t WData[5] = {0};
 8009cec:	2300      	movs	r3, #0
 8009cee:	60bb      	str	r3, [r7, #8]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8009cf4:	23ec      	movs	r3, #236	; 0xec
 8009cf6:	723b      	strb	r3, [r7, #8]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	727b      	strb	r3, [r7, #9]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	72bb      	strb	r3, [r7, #10]
 8009d00:	2300      	movs	r3, #0
 8009d02:	72fb      	strb	r3, [r7, #11]
 8009d04:	23c3      	movs	r3, #195	; 0xc3
 8009d06:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff fedb 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 8009d12:	2390      	movs	r3, #144	; 0x90
 8009d14:	723b      	strb	r3, [r7, #8]
 8009d16:	2300      	movs	r3, #0
 8009d18:	727b      	strb	r3, [r7, #9]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	72bb      	strb	r3, [r7, #10]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	72fb      	strb	r3, [r7, #11]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff fec6 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 8009d3c:	2391      	movs	r3, #145	; 0x91
 8009d3e:	723b      	strb	r3, [r7, #8]
 8009d40:	2300      	movs	r3, #0
 8009d42:	727b      	strb	r3, [r7, #9]
 8009d44:	2300      	movs	r3, #0
 8009d46:	72bb      	strb	r3, [r7, #10]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	72fb      	strb	r3, [r7, #11]
 8009d4c:	230a      	movs	r3, #10
 8009d4e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff feb7 	bl	8009ac8 <tmc5160_write>

	//WData[0] = 0xF0; WData[1] = 0x04; WData[2] = 0x0d; WData[3] = 0x00; WData[4] = 0x30; // PWM_CONF PWM_FREQ 35kHz TODO
	//tmc5160_write(WData);

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009d5a:	2380      	movs	r3, #128	; 0x80
 8009d5c:	723b      	strb	r3, [r7, #8]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	727b      	strb	r3, [r7, #9]
 8009d62:	2300      	movs	r3, #0
 8009d64:	72bb      	strb	r3, [r7, #10]
 8009d66:	2300      	movs	r3, #0
 8009d68:	72fb      	strb	r3, [r7, #11]
 8009d6a:	2304      	movs	r3, #4
 8009d6c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009d6e:	f107 0308 	add.w	r3, r7, #8
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff fea8 	bl	8009ac8 <tmc5160_write>

	tmc5160_velocity(1000000); //initial vel config
 8009d78:	4844      	ldr	r0, [pc, #272]	; (8009e8c <tmc5160_init+0x1fc>)
 8009d7a:	f7ff fe55 	bl	8009a28 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 8009d7e:	2393      	movs	r3, #147	; 0x93
 8009d80:	723b      	strb	r3, [r7, #8]
 8009d82:	2300      	movs	r3, #0
 8009d84:	727b      	strb	r3, [r7, #9]
 8009d86:	2300      	movs	r3, #0
 8009d88:	72bb      	strb	r3, [r7, #10]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	72fb      	strb	r3, [r7, #11]
 8009d8e:	23c8      	movs	r3, #200	; 0xc8
 8009d90:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fe96 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 8009d9c:	23a0      	movs	r3, #160	; 0xa0
 8009d9e:	723b      	strb	r3, [r7, #8]
 8009da0:	2300      	movs	r3, #0
 8009da2:	727b      	strb	r3, [r7, #9]
 8009da4:	2300      	movs	r3, #0
 8009da6:	72bb      	strb	r3, [r7, #10]
 8009da8:	2300      	movs	r3, #0
 8009daa:	72fb      	strb	r3, [r7, #11]
 8009dac:	2300      	movs	r3, #0
 8009dae:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009db0:	f107 0308 	add.w	r3, r7, #8
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff fe87 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009dba:	23a3      	movs	r3, #163	; 0xa3
 8009dbc:	723b      	strb	r3, [r7, #8]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	727b      	strb	r3, [r7, #9]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	72bb      	strb	r3, [r7, #10]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	72fb      	strb	r3, [r7, #11]
 8009dca:	230a      	movs	r3, #10
 8009dcc:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009dce:	f107 0308 	add.w	r3, r7, #8
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff fe78 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8009dd8:	23a4      	movs	r3, #164	; 0xa4
 8009dda:	723b      	strb	r3, [r7, #8]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	727b      	strb	r3, [r7, #9]
 8009de0:	2300      	movs	r3, #0
 8009de2:	72bb      	strb	r3, [r7, #10]
 8009de4:	236e      	movs	r3, #110	; 0x6e
 8009de6:	72fb      	strb	r3, [r7, #11]
 8009de8:	2320      	movs	r3, #32
 8009dea:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009dec:	f107 0308 	add.w	r3, r7, #8
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fe69 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8009df6:	23a6      	movs	r3, #166	; 0xa6
 8009df8:	723b      	strb	r3, [r7, #8]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	727b      	strb	r3, [r7, #9]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	72bb      	strb	r3, [r7, #10]
 8009e02:	2323      	movs	r3, #35	; 0x23
 8009e04:	72fb      	strb	r3, [r7, #11]
 8009e06:	2388      	movs	r3, #136	; 0x88
 8009e08:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009e0a:	f107 0308 	add.w	r3, r7, #8
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff fe5a 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 8009e14:	23a8      	movs	r3, #168	; 0xa8
 8009e16:	723b      	strb	r3, [r7, #8]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	727b      	strb	r3, [r7, #9]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	72bb      	strb	r3, [r7, #10]
 8009e20:	2323      	movs	r3, #35	; 0x23
 8009e22:	72fb      	strb	r3, [r7, #11]
 8009e24:	2388      	movs	r3, #136	; 0x88
 8009e26:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fe4b 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 8009e32:	23aa      	movs	r3, #170	; 0xaa
 8009e34:	723b      	strb	r3, [r7, #8]
 8009e36:	2300      	movs	r3, #0
 8009e38:	727b      	strb	r3, [r7, #9]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	72bb      	strb	r3, [r7, #10]
 8009e3e:	236e      	movs	r3, #110	; 0x6e
 8009e40:	72fb      	strb	r3, [r7, #11]
 8009e42:	2320      	movs	r3, #32
 8009e44:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fe3c 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8009e50:	23ab      	movs	r3, #171	; 0xab
 8009e52:	723b      	strb	r3, [r7, #8]
 8009e54:	2300      	movs	r3, #0
 8009e56:	727b      	strb	r3, [r7, #9]
 8009e58:	2300      	movs	r3, #0
 8009e5a:	72bb      	strb	r3, [r7, #10]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	72fb      	strb	r3, [r7, #11]
 8009e60:	230a      	movs	r3, #10
 8009e62:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009e64:	f107 0308 	add.w	r3, r7, #8
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff fe2d 	bl	8009ac8 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 f80b 	bl	8009e90 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 8009e7a:	2064      	movs	r0, #100	; 0x64
 8009e7c:	f000 fa52 	bl	800a324 <HAL_Delay>
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	48000800 	.word	0x48000800
 8009e8c:	000f4240 	.word	0x000f4240

08009e90 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 8009e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dc13      	bgt.n	8009eca <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009eaa:	2380      	movs	r3, #128	; 0x80
 8009eac:	743b      	strb	r3, [r7, #16]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	747b      	strb	r3, [r7, #17]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	74bb      	strb	r3, [r7, #18]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	74fb      	strb	r3, [r7, #19]
 8009eba:	2314      	movs	r3, #20
 8009ebc:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 8009ebe:	f107 0310 	add.w	r3, r7, #16
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7ff fe00 	bl	8009ac8 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 8009ec8:	e012      	b.n	8009ef0 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009ed2:	2380      	movs	r3, #128	; 0x80
 8009ed4:	723b      	strb	r3, [r7, #8]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	727b      	strb	r3, [r7, #9]
 8009eda:	2300      	movs	r3, #0
 8009edc:	72bb      	strb	r3, [r7, #10]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	72fb      	strb	r3, [r7, #11]
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff fdec 	bl	8009ac8 <tmc5160_write>
}
 8009ef0:	bf00      	nop
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009efe:	2300      	movs	r3, #0
 8009f00:	603b      	str	r3, [r7, #0]
 8009f02:	2300      	movs	r3, #0
 8009f04:	713b      	strb	r3, [r7, #4]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 8009f06:	23a0      	movs	r3, #160	; 0xa0
 8009f08:	703b      	strb	r3, [r7, #0]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	707b      	strb	r3, [r7, #1]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	70bb      	strb	r3, [r7, #2]
 8009f12:	2300      	movs	r3, #0
 8009f14:	70fb      	strb	r3, [r7, #3]
 8009f16:	2303      	movs	r3, #3
 8009f18:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009f1a:	463b      	mov	r3, r7
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff fdd3 	bl	8009ac8 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 8009f22:	23a1      	movs	r3, #161	; 0xa1
 8009f24:	703b      	strb	r3, [r7, #0]
 8009f26:	2300      	movs	r3, #0
 8009f28:	707b      	strb	r3, [r7, #1]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	70bb      	strb	r3, [r7, #2]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	70fb      	strb	r3, [r7, #3]
 8009f32:	2300      	movs	r3, #0
 8009f34:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009f36:	463b      	mov	r3, r7
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff fdc5 	bl	8009ac8 <tmc5160_write>
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <tmc5160_disarm>:

void tmc5160_disarm()
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //DRV SLEEP 0 for power on, 1 for power off
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	2120      	movs	r1, #32
 8009f50:	4802      	ldr	r0, [pc, #8]	; (8009f5c <tmc5160_disarm+0x14>)
 8009f52:	f001 fba9 	bl	800b6a8 <HAL_GPIO_WritePin>
}
 8009f56:	bf00      	nop
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	48000800 	.word	0x48000800

08009f60 <tmc5160_arm>:

void tmc5160_arm()
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8009f64:	2200      	movs	r2, #0
 8009f66:	2120      	movs	r1, #32
 8009f68:	4802      	ldr	r0, [pc, #8]	; (8009f74 <tmc5160_arm+0x14>)
 8009f6a:	f001 fb9d 	bl	800b6a8 <HAL_GPIO_WritePin>
}
 8009f6e:	bf00      	nop
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	48000800 	.word	0x48000800

08009f78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f7c:	4b22      	ldr	r3, [pc, #136]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009f7e:	4a23      	ldr	r2, [pc, #140]	; (800a00c <MX_USART2_UART_Init+0x94>)
 8009f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009f82:	4b21      	ldr	r3, [pc, #132]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f8a:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f90:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f96:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fa2:	4b19      	ldr	r3, [pc, #100]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fa8:	4b17      	ldr	r3, [pc, #92]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fae:	4b16      	ldr	r3, [pc, #88]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009fb4:	4b14      	ldr	r3, [pc, #80]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fba:	4b13      	ldr	r3, [pc, #76]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009fc0:	4811      	ldr	r0, [pc, #68]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fc2:	f004 ff1f 	bl	800ee04 <HAL_UART_Init>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009fcc:	f7f7 ffa7 	bl	8001f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	480d      	ldr	r0, [pc, #52]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fd4:	f006 f85d 	bl	8010092 <HAL_UARTEx_SetTxFifoThreshold>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009fde:	f7f7 ff9e 	bl	8001f1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4808      	ldr	r0, [pc, #32]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009fe6:	f006 f892 	bl	801010e <HAL_UARTEx_SetRxFifoThreshold>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009ff0:	f7f7 ff95 	bl	8001f1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009ff4:	4804      	ldr	r0, [pc, #16]	; (800a008 <MX_USART2_UART_Init+0x90>)
 8009ff6:	f006 f813 	bl	8010020 <HAL_UARTEx_DisableFifoMode>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a000:	f7f7 ff8d 	bl	8001f1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a004:	bf00      	nop
 800a006:	bd80      	pop	{r7, pc}
 800a008:	200008b8 	.word	0x200008b8
 800a00c:	40004400 	.word	0x40004400

0800a010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b09e      	sub	sp, #120	; 0x78
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	609a      	str	r2, [r3, #8]
 800a024:	60da      	str	r2, [r3, #12]
 800a026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a028:	f107 0310 	add.w	r3, r7, #16
 800a02c:	2254      	movs	r2, #84	; 0x54
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f00a f87a 	bl	801412a <memset>
  if(uartHandle->Instance==USART2)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a23      	ldr	r2, [pc, #140]	; (800a0c8 <HAL_UART_MspInit+0xb8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d13e      	bne.n	800a0be <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a040:	2302      	movs	r3, #2
 800a042:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a044:	2300      	movs	r3, #0
 800a046:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a048:	f107 0310 	add.w	r3, r7, #16
 800a04c:	4618      	mov	r0, r3
 800a04e:	f003 fbe1 	bl	800d814 <HAL_RCCEx_PeriphCLKConfig>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a058:	f7f7 ff61 	bl	8001f1e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a05c:	4b1b      	ldr	r3, [pc, #108]	; (800a0cc <HAL_UART_MspInit+0xbc>)
 800a05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a060:	4a1a      	ldr	r2, [pc, #104]	; (800a0cc <HAL_UART_MspInit+0xbc>)
 800a062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a066:	6593      	str	r3, [r2, #88]	; 0x58
 800a068:	4b18      	ldr	r3, [pc, #96]	; (800a0cc <HAL_UART_MspInit+0xbc>)
 800a06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a074:	4b15      	ldr	r3, [pc, #84]	; (800a0cc <HAL_UART_MspInit+0xbc>)
 800a076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <HAL_UART_MspInit+0xbc>)
 800a07a:	f043 0301 	orr.w	r3, r3, #1
 800a07e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a080:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <HAL_UART_MspInit+0xbc>)
 800a082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	60bb      	str	r3, [r7, #8]
 800a08a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a08c:	230c      	movs	r3, #12
 800a08e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a090:	2302      	movs	r3, #2
 800a092:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a094:	2300      	movs	r3, #0
 800a096:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a098:	2300      	movs	r3, #0
 800a09a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a09c:	2307      	movs	r3, #7
 800a09e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0aa:	f001 f97b 	bl	800b3a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	2026      	movs	r0, #38	; 0x26
 800a0b4:	f000 fa33 	bl	800a51e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a0b8:	2026      	movs	r0, #38	; 0x26
 800a0ba:	f000 fa4a 	bl	800a552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a0be:	bf00      	nop
 800a0c0:	3778      	adds	r7, #120	; 0x78
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	40004400 	.word	0x40004400
 800a0cc:	40021000 	.word	0x40021000

0800a0d0 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ea:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d010      	beq.n	800a120 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 800a102:	23ff      	movs	r3, #255	; 0xff
 800a104:	60bb      	str	r3, [r7, #8]
		res |= x;
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	fa02 f303 	lsl.w	r3, r2, r3
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4313      	orrs	r3, r2
 800a11a:	60fb      	str	r3, [r7, #12]
		return res;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	e000      	b.n	800a122 <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 800a120:	687b      	ldr	r3, [r7, #4]
}
 800a122:	4618      	mov	r0, r3
 800a124:	371c      	adds	r7, #28
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
	...

0800a130 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
	float rads = 0;
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a154:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a158:	ee16 0a90 	vmov	r0, s13
 800a15c:	f7f6 fa1c 	bl	8000598 <__aeabi_f2d>
 800a160:	a30b      	add	r3, pc, #44	; (adr r3, 800a190 <steps_to_rads+0x60>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 fa6f 	bl	8000648 <__aeabi_dmul>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4610      	mov	r0, r2
 800a170:	4619      	mov	r1, r3
 800a172:	f7f6 fd61 	bl	8000c38 <__aeabi_d2f>
 800a176:	4603      	mov	r3, r0
 800a178:	60fb      	str	r3, [r7, #12]
	return rads;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	ee07 3a90 	vmov	s15, r3
}
 800a180:	eeb0 0a67 	vmov.f32	s0, s15
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w
 800a190:	54442d18 	.word	0x54442d18
 800a194:	401921fb 	.word	0x401921fb

0800a198 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a1a2:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ba:	ee17 0a90 	vmov	r0, s15
 800a1be:	f7f6 f9eb 	bl	8000598 <__aeabi_f2d>
 800a1c2:	a309      	add	r3, pc, #36	; (adr r3, 800a1e8 <rad_to_steps+0x50>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f6 fb68 	bl	800089c <__aeabi_ddiv>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f7f6 fce8 	bl	8000ba8 <__aeabi_d2iz>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	60fb      	str	r3, [r7, #12]
	return steps;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	54442d18 	.word	0x54442d18
 800a1ec:	401921fb 	.word	0x401921fb

0800a1f0 <Reset_Handler>:
 800a1f0:	480d      	ldr	r0, [pc, #52]	; (800a228 <LoopForever+0x2>)
 800a1f2:	4685      	mov	sp, r0
 800a1f4:	f7ff fa3c 	bl	8009670 <SystemInit>
 800a1f8:	480c      	ldr	r0, [pc, #48]	; (800a22c <LoopForever+0x6>)
 800a1fa:	490d      	ldr	r1, [pc, #52]	; (800a230 <LoopForever+0xa>)
 800a1fc:	4a0d      	ldr	r2, [pc, #52]	; (800a234 <LoopForever+0xe>)
 800a1fe:	2300      	movs	r3, #0
 800a200:	e002      	b.n	800a208 <LoopCopyDataInit>

0800a202 <CopyDataInit>:
 800a202:	58d4      	ldr	r4, [r2, r3]
 800a204:	50c4      	str	r4, [r0, r3]
 800a206:	3304      	adds	r3, #4

0800a208 <LoopCopyDataInit>:
 800a208:	18c4      	adds	r4, r0, r3
 800a20a:	428c      	cmp	r4, r1
 800a20c:	d3f9      	bcc.n	800a202 <CopyDataInit>
 800a20e:	4a0a      	ldr	r2, [pc, #40]	; (800a238 <LoopForever+0x12>)
 800a210:	4c0a      	ldr	r4, [pc, #40]	; (800a23c <LoopForever+0x16>)
 800a212:	2300      	movs	r3, #0
 800a214:	e001      	b.n	800a21a <LoopFillZerobss>

0800a216 <FillZerobss>:
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	3204      	adds	r2, #4

0800a21a <LoopFillZerobss>:
 800a21a:	42a2      	cmp	r2, r4
 800a21c:	d3fb      	bcc.n	800a216 <FillZerobss>
 800a21e:	f00a f843 	bl	80142a8 <__libc_init_array>
 800a222:	f7f7 fdc5 	bl	8001db0 <main>

0800a226 <LoopForever>:
 800a226:	e7fe      	b.n	800a226 <LoopForever>
 800a228:	20020000 	.word	0x20020000
 800a22c:	20000000 	.word	0x20000000
 800a230:	20000244 	.word	0x20000244
 800a234:	08018dac 	.word	0x08018dac
 800a238:	20000248 	.word	0x20000248
 800a23c:	20000ae4 	.word	0x20000ae4

0800a240 <ADC1_2_IRQHandler>:
 800a240:	e7fe      	b.n	800a240 <ADC1_2_IRQHandler>

0800a242 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a24c:	2003      	movs	r0, #3
 800a24e:	f000 f95b 	bl	800a508 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a252:	200f      	movs	r0, #15
 800a254:	f000 f80e 	bl	800a274 <HAL_InitTick>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	71fb      	strb	r3, [r7, #7]
 800a262:	e001      	b.n	800a268 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a264:	f7ff f8b4 	bl	80093d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a268:	79fb      	ldrb	r3, [r7, #7]

}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a280:	4b16      	ldr	r3, [pc, #88]	; (800a2dc <HAL_InitTick+0x68>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d022      	beq.n	800a2ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a288:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <HAL_InitTick+0x6c>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <HAL_InitTick+0x68>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a294:	fbb1 f3f3 	udiv	r3, r1, r3
 800a298:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 f966 	bl	800a56e <HAL_SYSTICK_Config>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10f      	bne.n	800a2c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b0f      	cmp	r3, #15
 800a2ac:	d809      	bhi.n	800a2c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b6:	f000 f932 	bl	800a51e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a2ba:	4a0a      	ldr	r2, [pc, #40]	; (800a2e4 <HAL_InitTick+0x70>)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	e007      	b.n	800a2d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	73fb      	strb	r3, [r7, #15]
 800a2c6:	e004      	b.n	800a2d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	73fb      	strb	r3, [r7, #15]
 800a2cc:	e001      	b.n	800a2d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20000078 	.word	0x20000078
 800a2e0:	20000070 	.word	0x20000070
 800a2e4:	20000074 	.word	0x20000074

0800a2e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a2ec:	4b05      	ldr	r3, [pc, #20]	; (800a304 <HAL_IncTick+0x1c>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <HAL_IncTick+0x20>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	4a03      	ldr	r2, [pc, #12]	; (800a304 <HAL_IncTick+0x1c>)
 800a2f8:	6013      	str	r3, [r2, #0]
}
 800a2fa:	bf00      	nop
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	2000094c 	.word	0x2000094c
 800a308:	20000078 	.word	0x20000078

0800a30c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
  return uwTick;
 800a310:	4b03      	ldr	r3, [pc, #12]	; (800a320 <HAL_GetTick+0x14>)
 800a312:	681b      	ldr	r3, [r3, #0]
}
 800a314:	4618      	mov	r0, r3
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	2000094c 	.word	0x2000094c

0800a324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a32c:	f7ff ffee 	bl	800a30c <HAL_GetTick>
 800a330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33c:	d004      	beq.n	800a348 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a33e:	4b09      	ldr	r3, [pc, #36]	; (800a364 <HAL_Delay+0x40>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4413      	add	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a348:	bf00      	nop
 800a34a:	f7ff ffdf 	bl	800a30c <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	429a      	cmp	r2, r3
 800a358:	d8f7      	bhi.n	800a34a <HAL_Delay+0x26>
  {
  }
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	20000078 	.word	0x20000078

0800a368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a378:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <__NVIC_SetPriorityGrouping+0x44>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a384:	4013      	ands	r3, r2
 800a386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a39a:	4a04      	ldr	r2, [pc, #16]	; (800a3ac <__NVIC_SetPriorityGrouping+0x44>)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	60d3      	str	r3, [r2, #12]
}
 800a3a0:	bf00      	nop
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	e000ed00 	.word	0xe000ed00

0800a3b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a3b4:	4b04      	ldr	r3, [pc, #16]	; (800a3c8 <__NVIC_GetPriorityGrouping+0x18>)
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	0a1b      	lsrs	r3, r3, #8
 800a3ba:	f003 0307 	and.w	r3, r3, #7
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	e000ed00 	.word	0xe000ed00

0800a3cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	db0b      	blt.n	800a3f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	f003 021f 	and.w	r2, r3, #31
 800a3e4:	4907      	ldr	r1, [pc, #28]	; (800a404 <__NVIC_EnableIRQ+0x38>)
 800a3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	fa00 f202 	lsl.w	r2, r0, r2
 800a3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	e000e100 	.word	0xe000e100

0800a408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	db0a      	blt.n	800a432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	490c      	ldr	r1, [pc, #48]	; (800a454 <__NVIC_SetPriority+0x4c>)
 800a422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a426:	0112      	lsls	r2, r2, #4
 800a428:	b2d2      	uxtb	r2, r2
 800a42a:	440b      	add	r3, r1
 800a42c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a430:	e00a      	b.n	800a448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	b2da      	uxtb	r2, r3
 800a436:	4908      	ldr	r1, [pc, #32]	; (800a458 <__NVIC_SetPriority+0x50>)
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	f003 030f 	and.w	r3, r3, #15
 800a43e:	3b04      	subs	r3, #4
 800a440:	0112      	lsls	r2, r2, #4
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	440b      	add	r3, r1
 800a446:	761a      	strb	r2, [r3, #24]
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	e000e100 	.word	0xe000e100
 800a458:	e000ed00 	.word	0xe000ed00

0800a45c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	f1c3 0307 	rsb	r3, r3, #7
 800a476:	2b04      	cmp	r3, #4
 800a478:	bf28      	it	cs
 800a47a:	2304      	movcs	r3, #4
 800a47c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	3304      	adds	r3, #4
 800a482:	2b06      	cmp	r3, #6
 800a484:	d902      	bls.n	800a48c <NVIC_EncodePriority+0x30>
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	3b03      	subs	r3, #3
 800a48a:	e000      	b.n	800a48e <NVIC_EncodePriority+0x32>
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a490:	f04f 32ff 	mov.w	r2, #4294967295
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	43da      	mvns	r2, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	401a      	ands	r2, r3
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a4a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ae:	43d9      	mvns	r1, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4b4:	4313      	orrs	r3, r2
         );
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3724      	adds	r7, #36	; 0x24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a4d4:	d301      	bcc.n	800a4da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e00f      	b.n	800a4fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a4da:	4a0a      	ldr	r2, [pc, #40]	; (800a504 <SysTick_Config+0x40>)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a4e2:	210f      	movs	r1, #15
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	f7ff ff8e 	bl	800a408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a4ec:	4b05      	ldr	r3, [pc, #20]	; (800a504 <SysTick_Config+0x40>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a4f2:	4b04      	ldr	r3, [pc, #16]	; (800a504 <SysTick_Config+0x40>)
 800a4f4:	2207      	movs	r2, #7
 800a4f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	e000e010 	.word	0xe000e010

0800a508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff ff29 	bl	800a368 <__NVIC_SetPriorityGrouping>
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	4603      	mov	r3, r0
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
 800a52a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a52c:	f7ff ff40 	bl	800a3b0 <__NVIC_GetPriorityGrouping>
 800a530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	f7ff ff90 	bl	800a45c <NVIC_EncodePriority>
 800a53c:	4602      	mov	r2, r0
 800a53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff ff5f 	bl	800a408 <__NVIC_SetPriority>
}
 800a54a:	bf00      	nop
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	4603      	mov	r3, r0
 800a55a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a55c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff ff33 	bl	800a3cc <__NVIC_EnableIRQ>
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff ffa4 	bl	800a4c4 <SysTick_Config>
 800a57c:	4603      	mov	r3, r0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e08d      	b.n	800a6b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	4b47      	ldr	r3, [pc, #284]	; (800a6c0 <HAL_DMA_Init+0x138>)
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d80f      	bhi.n	800a5c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4b45      	ldr	r3, [pc, #276]	; (800a6c4 <HAL_DMA_Init+0x13c>)
 800a5ae:	4413      	add	r3, r2
 800a5b0:	4a45      	ldr	r2, [pc, #276]	; (800a6c8 <HAL_DMA_Init+0x140>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	091b      	lsrs	r3, r3, #4
 800a5b8:	009a      	lsls	r2, r3, #2
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a42      	ldr	r2, [pc, #264]	; (800a6cc <HAL_DMA_Init+0x144>)
 800a5c2:	641a      	str	r2, [r3, #64]	; 0x40
 800a5c4:	e00e      	b.n	800a5e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4b40      	ldr	r3, [pc, #256]	; (800a6d0 <HAL_DMA_Init+0x148>)
 800a5ce:	4413      	add	r3, r2
 800a5d0:	4a3d      	ldr	r2, [pc, #244]	; (800a6c8 <HAL_DMA_Init+0x140>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	091b      	lsrs	r3, r3, #4
 800a5d8:	009a      	lsls	r2, r3, #2
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a3c      	ldr	r2, [pc, #240]	; (800a6d4 <HAL_DMA_Init+0x14c>)
 800a5e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f9cc 	bl	800a9d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a644:	d102      	bne.n	800a64c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a654:	b2d2      	uxtb	r2, r2
 800a656:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a660:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d010      	beq.n	800a68c <HAL_DMA_Init+0x104>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d80c      	bhi.n	800a68c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f9ec 	bl	800aa50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a688:	605a      	str	r2, [r3, #4]
 800a68a:	e008      	b.n	800a69e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	40020407 	.word	0x40020407
 800a6c4:	bffdfff8 	.word	0xbffdfff8
 800a6c8:	cccccccd 	.word	0xcccccccd
 800a6cc:	40020000 	.word	0x40020000
 800a6d0:	bffdfbf8 	.word	0xbffdfbf8
 800a6d4:	40020400 	.word	0x40020400

0800a6d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d005      	beq.n	800a6fc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	73fb      	strb	r3, [r7, #15]
 800a6fa:	e037      	b.n	800a76c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 020e 	bic.w	r2, r2, #14
 800a70a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a71a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a730:	f003 021f 	and.w	r2, r3, #31
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2101      	movs	r1, #1
 800a73a:	fa01 f202 	lsl.w	r2, r1, r2
 800a73e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a748:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00c      	beq.n	800a76c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a760:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a76a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d00d      	beq.n	800a7be <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2204      	movs	r2, #4
 800a7a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
 800a7bc:	e047      	b.n	800a84e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 020e 	bic.w	r2, r2, #14
 800a7cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 0201 	bic.w	r2, r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f2:	f003 021f 	and.w	r2, r3, #31
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	fa01 f202 	lsl.w	r2, r1, r2
 800a800:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a80a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00c      	beq.n	800a82e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a822:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a82c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
    }
  }
  return status;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a874:	f003 031f 	and.w	r3, r3, #31
 800a878:	2204      	movs	r2, #4
 800a87a:	409a      	lsls	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4013      	ands	r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d026      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x7a>
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f003 0304 	and.w	r3, r3, #4
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d021      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d107      	bne.n	800a8ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0204 	bic.w	r2, r2, #4
 800a8aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b0:	f003 021f 	and.w	r2, r3, #31
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b8:	2104      	movs	r1, #4
 800a8ba:	fa01 f202 	lsl.w	r2, r1, r2
 800a8be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d071      	beq.n	800a9ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a8d0:	e06c      	b.n	800a9ac <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d6:	f003 031f 	and.w	r3, r3, #31
 800a8da:	2202      	movs	r2, #2
 800a8dc:	409a      	lsls	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d02e      	beq.n	800a944 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f003 0302 	and.w	r3, r3, #2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d029      	beq.n	800a944 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 020a 	bic.w	r2, r2, #10
 800a90c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	f003 021f 	and.w	r2, r3, #31
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a922:	2102      	movs	r1, #2
 800a924:	fa01 f202 	lsl.w	r2, r1, r2
 800a928:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d038      	beq.n	800a9ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a942:	e033      	b.n	800a9ac <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a948:	f003 031f 	and.w	r3, r3, #31
 800a94c:	2208      	movs	r2, #8
 800a94e:	409a      	lsls	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4013      	ands	r3, r2
 800a954:	2b00      	cmp	r3, #0
 800a956:	d02a      	beq.n	800a9ae <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f003 0308 	and.w	r3, r3, #8
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d025      	beq.n	800a9ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 020e 	bic.w	r2, r2, #14
 800a970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a976:	f003 021f 	and.w	r2, r3, #31
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	2101      	movs	r1, #1
 800a980:	fa01 f202 	lsl.w	r2, r1, r2
 800a984:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
}
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a9c4:	b2db      	uxtb	r3, r3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b16      	ldr	r3, [pc, #88]	; (800aa3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d802      	bhi.n	800a9ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	e001      	b.n	800a9f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a9ee:	4b15      	ldr	r3, [pc, #84]	; (800aa44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a9f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	3b08      	subs	r3, #8
 800a9fe:	4a12      	ldr	r2, [pc, #72]	; (800aa48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800aa00:	fba2 2303 	umull	r2, r3, r2, r3
 800aa04:	091b      	lsrs	r3, r3, #4
 800aa06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0c:	089b      	lsrs	r3, r3, #2
 800aa0e:	009a      	lsls	r2, r3, #2
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4413      	add	r3, r2
 800aa14:	461a      	mov	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a0b      	ldr	r2, [pc, #44]	; (800aa4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800aa1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f003 031f 	and.w	r3, r3, #31
 800aa26:	2201      	movs	r2, #1
 800aa28:	409a      	lsls	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800aa2e:	bf00      	nop
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	40020407 	.word	0x40020407
 800aa40:	40020800 	.word	0x40020800
 800aa44:	40020820 	.word	0x40020820
 800aa48:	cccccccd 	.word	0xcccccccd
 800aa4c:	40020880 	.word	0x40020880

0800aa50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800aa72:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	f003 031f 	and.w	r3, r3, #31
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	409a      	lsls	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800aa84:	bf00      	nop
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	1000823f 	.word	0x1000823f
 800aa94:	40020940 	.word	0x40020940

0800aa98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e147      	b.n	800ad3a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7f6 feca 	bl	8001858 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699a      	ldr	r2, [r3, #24]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0210 	bic.w	r2, r2, #16
 800aad2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aad4:	f7ff fc1a 	bl	800a30c <HAL_GetTick>
 800aad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800aada:	e012      	b.n	800ab02 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800aadc:	f7ff fc16 	bl	800a30c <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	2b0a      	cmp	r3, #10
 800aae8:	d90b      	bls.n	800ab02 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaee:	f043 0201 	orr.w	r2, r3, #1
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2203      	movs	r2, #3
 800aafa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e11b      	b.n	800ad3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d0e5      	beq.n	800aadc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699a      	ldr	r2, [r3, #24]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab20:	f7ff fbf4 	bl	800a30c <HAL_GetTick>
 800ab24:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800ab26:	e012      	b.n	800ab4e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800ab28:	f7ff fbf0 	bl	800a30c <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b0a      	cmp	r3, #10
 800ab34:	d90b      	bls.n	800ab4e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab3a:	f043 0201 	orr.w	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2203      	movs	r2, #3
 800ab46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e0f5      	b.n	800ad3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0e5      	beq.n	800ab28 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0202 	orr.w	r2, r2, #2
 800ab6a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a74      	ldr	r2, [pc, #464]	; (800ad44 <HAL_FDCAN_Init+0x2ac>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d103      	bne.n	800ab7e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800ab76:	4a74      	ldr	r2, [pc, #464]	; (800ad48 <HAL_FDCAN_Init+0x2b0>)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	7c1b      	ldrb	r3, [r3, #16]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d108      	bne.n	800ab98 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	699a      	ldr	r2, [r3, #24]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab94:	619a      	str	r2, [r3, #24]
 800ab96:	e007      	b.n	800aba8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aba6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7c5b      	ldrb	r3, [r3, #17]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d108      	bne.n	800abc2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abbe:	619a      	str	r2, [r3, #24]
 800abc0:	e007      	b.n	800abd2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800abd0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	7c9b      	ldrb	r3, [r3, #18]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d108      	bne.n	800abec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699a      	ldr	r2, [r3, #24]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abe8:	619a      	str	r2, [r3, #24]
 800abea:	e007      	b.n	800abfc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abfa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	699a      	ldr	r2, [r3, #24]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800ac20:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	691a      	ldr	r2, [r3, #16]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 0210 	bic.w	r2, r2, #16
 800ac30:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d108      	bne.n	800ac4c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	699a      	ldr	r2, [r3, #24]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f042 0204 	orr.w	r2, r2, #4
 800ac48:	619a      	str	r2, [r3, #24]
 800ac4a:	e02c      	b.n	800aca6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d028      	beq.n	800aca6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d01c      	beq.n	800ac96 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	699a      	ldr	r2, [r3, #24]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac6a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691a      	ldr	r2, [r3, #16]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f042 0210 	orr.w	r2, r2, #16
 800ac7a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d110      	bne.n	800aca6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f042 0220 	orr.w	r2, r2, #32
 800ac92:	619a      	str	r2, [r3, #24]
 800ac94:	e007      	b.n	800aca6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	699a      	ldr	r2, [r3, #24]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0220 	orr.w	r2, r2, #32
 800aca4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	3b01      	subs	r3, #1
 800acac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800acb6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800acbe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800acce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800acd0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acda:	d115      	bne.n	800ad08 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	3b01      	subs	r3, #1
 800ace8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800acea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf0:	3b01      	subs	r3, #1
 800acf2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800acf4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	3b01      	subs	r3, #1
 800acfe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800ad04:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800ad06:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa58 	bl	800b1d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	40006400 	.word	0x40006400
 800ad48:	40006500 	.word	0x40006500

0800ad4c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ad5c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d002      	beq.n	800ad6a <HAL_FDCAN_ConfigFilter+0x1e>
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d13d      	bne.n	800ade6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d119      	bne.n	800ada6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800ad7e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800ad86:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e01d      	b.n	800ade2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	075a      	lsls	r2, r3, #29
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	079a      	lsls	r2, r3, #30
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	4413      	add	r3, r2
 800adce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	3304      	adds	r3, #4
 800adda:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	e006      	b.n	800adf4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adea:	f043 0202 	orr.w	r2, r3, #2
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
  }
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d116      	bne.n	800ae48 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae22:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	011a      	lsls	r2, r3, #4
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	431a      	orrs	r2, r3
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	e006      	b.n	800ae56 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae4c:	f043 0204 	orr.w	r2, r3, #4
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
  }
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b085      	sub	sp, #20
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d108      	bne.n	800ae8c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0219      	lsls	r1, r3, #8
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e006      	b.n	800ae9a <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae90:	f043 0204 	orr.w	r2, r3, #4
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d109      	bne.n	800aece <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800aec8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e006      	b.n	800aedc <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed2:	f043 0204 	orr.w	r2, r3, #4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
  }
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d110      	bne.n	800af1e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	699a      	ldr	r2, [r3, #24]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 0201 	bic.w	r2, r2, #1
 800af12:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e006      	b.n	800af2c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af22:	f043 0204 	orr.w	r2, r3, #4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
  }
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d12c      	bne.n	800afaa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800af58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d007      	beq.n	800af70 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e023      	b.n	800afb8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f990 	bl	800b2ac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2101      	movs	r1, #1
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	fa01 f202 	lsl.w	r2, r1, r2
 800af98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800af9c:	2201      	movs	r2, #1
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	409a      	lsls	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	e006      	b.n	800afb8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afae:	f043 0208 	orr.w	r2, r3, #8
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
  }
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b08b      	sub	sp, #44	; 0x2c
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800afd4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800afd6:	7efb      	ldrb	r3, [r7, #27]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	f040 80bc 	bne.w	800b156 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b40      	cmp	r3, #64	; 0x40
 800afe2:	d121      	bne.n	800b028 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afec:	f003 030f 	and.w	r3, r3, #15
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d107      	bne.n	800b004 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e0af      	b.n	800b164 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b00c:	0a1b      	lsrs	r3, r3, #8
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b018:	69fa      	ldr	r2, [r7, #28]
 800b01a:	4613      	mov	r3, r2
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4413      	add	r3, r2
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	440b      	add	r3, r1
 800b024:	627b      	str	r3, [r7, #36]	; 0x24
 800b026:	e020      	b.n	800b06a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b030:	f003 030f 	and.w	r3, r3, #15
 800b034:	2b00      	cmp	r3, #0
 800b036:	d107      	bne.n	800b048 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b03c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e08d      	b.n	800b164 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b050:	0a1b      	lsrs	r3, r3, #8
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b05c:	69fa      	ldr	r2, [r7, #28]
 800b05e:	4613      	mov	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4413      	add	r3, r2
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	440b      	add	r3, r1
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d107      	bne.n	800b08e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	0c9b      	lsrs	r3, r3, #18
 800b084:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	e005      	b.n	800b09a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	0e1b      	lsrs	r3, r3, #24
 800b0ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	0fda      	lsrs	r2, r3, #31
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	3304      	adds	r3, #4
 800b102:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b108:	2300      	movs	r3, #0
 800b10a:	623b      	str	r3, [r7, #32]
 800b10c:	e00a      	b.n	800b124 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	441a      	add	r2, r3
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	440b      	add	r3, r1
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	3301      	adds	r3, #1
 800b122:	623b      	str	r3, [r7, #32]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	0c1b      	lsrs	r3, r3, #16
 800b12a:	4a11      	ldr	r2, [pc, #68]	; (800b170 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800b12c:	5cd3      	ldrb	r3, [r2, r3]
 800b12e:	461a      	mov	r2, r3
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	4293      	cmp	r3, r2
 800b134:	d3eb      	bcc.n	800b10e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b40      	cmp	r3, #64	; 0x40
 800b13a:	d105      	bne.n	800b148 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69fa      	ldr	r2, [r7, #28]
 800b142:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b146:	e004      	b.n	800b152 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69fa      	ldr	r2, [r7, #28]
 800b14e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	e006      	b.n	800b164 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b15a:	f043 0208 	orr.w	r2, r3, #8
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
  }
}
 800b164:	4618      	mov	r0, r3
 800b166:	372c      	adds	r7, #44	; 0x2c
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	08018310 	.word	0x08018310

0800b174 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b40      	cmp	r3, #64	; 0x40
 800b182:	d107      	bne.n	800b194 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e006      	b.n	800b1a2 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b19c:	f003 030f 	and.w	r3, r3, #15
 800b1a0:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b1c0:	f003 0307 	and.w	r3, r3, #7
 800b1c4:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800b1dc:	4b30      	ldr	r3, [pc, #192]	; (800b2a0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800b1de:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a2f      	ldr	r2, [pc, #188]	; (800b2a4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d103      	bne.n	800b1f2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b1f0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a2c      	ldr	r2, [pc, #176]	; (800b2a8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d103      	bne.n	800b204 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800b202:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b212:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21a:	041a      	lsls	r2, r3, #16
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b238:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b240:	061a      	lsls	r2, r3, #24
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	e005      	b.n	800b286 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3304      	adds	r3, #4
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d3f3      	bcc.n	800b27a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b292:	bf00      	nop
 800b294:	bf00      	nop
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	4000a400 	.word	0x4000a400
 800b2a4:	40006800 	.word	0x40006800
 800b2a8:	40006c00 	.word	0x40006c00

0800b2ac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b089      	sub	sp, #36	; 0x24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b2ca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e00a      	b.n	800b2ee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b2e0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b2e6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b2e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2ec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b2f8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b2fe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b304:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	4613      	mov	r3, r2
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	4413      	add	r3, r2
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	440b      	add	r3, r1
 800b31e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	3304      	adds	r3, #4
 800b32a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	3304      	adds	r3, #4
 800b336:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	e020      	b.n	800b380 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	3303      	adds	r3, #3
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	3302      	adds	r3, #2
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	440b      	add	r3, r1
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b356:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	3301      	adds	r3, #1
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	440b      	add	r3, r1
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b364:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	440a      	add	r2, r1
 800b36c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b36e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	3304      	adds	r3, #4
 800b378:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	3304      	adds	r3, #4
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	0c1b      	lsrs	r3, r3, #16
 800b386:	4a06      	ldr	r2, [pc, #24]	; (800b3a0 <FDCAN_CopyMessageToRAM+0xf4>)
 800b388:	5cd3      	ldrb	r3, [r2, r3]
 800b38a:	461a      	mov	r2, r3
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	4293      	cmp	r3, r2
 800b390:	d3d5      	bcc.n	800b33e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	3724      	adds	r7, #36	; 0x24
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	08018310 	.word	0x08018310

0800b3a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b3b2:	e15a      	b.n	800b66a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 814c 	beq.w	800b664 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d005      	beq.n	800b3e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d130      	bne.n	800b446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	2203      	movs	r2, #3
 800b3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f4:	43db      	mvns	r3, r3
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	68da      	ldr	r2, [r3, #12]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	fa02 f303 	lsl.w	r3, r2, r3
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b41a:	2201      	movs	r2, #1
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	fa02 f303 	lsl.w	r3, r2, r3
 800b422:	43db      	mvns	r3, r3
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	4013      	ands	r3, r2
 800b428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	091b      	lsrs	r3, r3, #4
 800b430:	f003 0201 	and.w	r2, r3, #1
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	fa02 f303 	lsl.w	r3, r2, r3
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f003 0303 	and.w	r3, r3, #3
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d017      	beq.n	800b482 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	2203      	movs	r2, #3
 800b45e:	fa02 f303 	lsl.w	r3, r2, r3
 800b462:	43db      	mvns	r3, r3
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	4013      	ands	r3, r2
 800b468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	fa02 f303 	lsl.w	r3, r2, r3
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	4313      	orrs	r3, r2
 800b47a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d123      	bne.n	800b4d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	08da      	lsrs	r2, r3, #3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	3208      	adds	r2, #8
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f003 0307 	and.w	r3, r3, #7
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	220f      	movs	r2, #15
 800b4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4aa:	43db      	mvns	r3, r3
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	691a      	ldr	r2, [r3, #16]
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	08da      	lsrs	r2, r3, #3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3208      	adds	r2, #8
 800b4d0:	6939      	ldr	r1, [r7, #16]
 800b4d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	2203      	movs	r2, #3
 800b4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e6:	43db      	mvns	r3, r3
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f003 0203 	and.w	r2, r3, #3
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	005b      	lsls	r3, r3, #1
 800b4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	4313      	orrs	r3, r2
 800b502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 80a6 	beq.w	800b664 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b518:	4b5b      	ldr	r3, [pc, #364]	; (800b688 <HAL_GPIO_Init+0x2e4>)
 800b51a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b51c:	4a5a      	ldr	r2, [pc, #360]	; (800b688 <HAL_GPIO_Init+0x2e4>)
 800b51e:	f043 0301 	orr.w	r3, r3, #1
 800b522:	6613      	str	r3, [r2, #96]	; 0x60
 800b524:	4b58      	ldr	r3, [pc, #352]	; (800b688 <HAL_GPIO_Init+0x2e4>)
 800b526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	60bb      	str	r3, [r7, #8]
 800b52e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b530:	4a56      	ldr	r2, [pc, #344]	; (800b68c <HAL_GPIO_Init+0x2e8>)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	089b      	lsrs	r3, r3, #2
 800b536:	3302      	adds	r3, #2
 800b538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b53c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	220f      	movs	r2, #15
 800b548:	fa02 f303 	lsl.w	r3, r2, r3
 800b54c:	43db      	mvns	r3, r3
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	4013      	ands	r3, r2
 800b552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b55a:	d01f      	beq.n	800b59c <HAL_GPIO_Init+0x1f8>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a4c      	ldr	r2, [pc, #304]	; (800b690 <HAL_GPIO_Init+0x2ec>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d019      	beq.n	800b598 <HAL_GPIO_Init+0x1f4>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a4b      	ldr	r2, [pc, #300]	; (800b694 <HAL_GPIO_Init+0x2f0>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d013      	beq.n	800b594 <HAL_GPIO_Init+0x1f0>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a4a      	ldr	r2, [pc, #296]	; (800b698 <HAL_GPIO_Init+0x2f4>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d00d      	beq.n	800b590 <HAL_GPIO_Init+0x1ec>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a49      	ldr	r2, [pc, #292]	; (800b69c <HAL_GPIO_Init+0x2f8>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d007      	beq.n	800b58c <HAL_GPIO_Init+0x1e8>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a48      	ldr	r2, [pc, #288]	; (800b6a0 <HAL_GPIO_Init+0x2fc>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d101      	bne.n	800b588 <HAL_GPIO_Init+0x1e4>
 800b584:	2305      	movs	r3, #5
 800b586:	e00a      	b.n	800b59e <HAL_GPIO_Init+0x1fa>
 800b588:	2306      	movs	r3, #6
 800b58a:	e008      	b.n	800b59e <HAL_GPIO_Init+0x1fa>
 800b58c:	2304      	movs	r3, #4
 800b58e:	e006      	b.n	800b59e <HAL_GPIO_Init+0x1fa>
 800b590:	2303      	movs	r3, #3
 800b592:	e004      	b.n	800b59e <HAL_GPIO_Init+0x1fa>
 800b594:	2302      	movs	r3, #2
 800b596:	e002      	b.n	800b59e <HAL_GPIO_Init+0x1fa>
 800b598:	2301      	movs	r3, #1
 800b59a:	e000      	b.n	800b59e <HAL_GPIO_Init+0x1fa>
 800b59c:	2300      	movs	r3, #0
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	f002 0203 	and.w	r2, r2, #3
 800b5a4:	0092      	lsls	r2, r2, #2
 800b5a6:	4093      	lsls	r3, r2
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b5ae:	4937      	ldr	r1, [pc, #220]	; (800b68c <HAL_GPIO_Init+0x2e8>)
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	089b      	lsrs	r3, r3, #2
 800b5b4:	3302      	adds	r3, #2
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b5bc:	4b39      	ldr	r3, [pc, #228]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b5e0:	4a30      	ldr	r2, [pc, #192]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b5e6:	4b2f      	ldr	r3, [pc, #188]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	43db      	mvns	r3, r3
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4313      	orrs	r3, r2
 800b608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b60a:	4a26      	ldr	r2, [pc, #152]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b610:	4b24      	ldr	r3, [pc, #144]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	43db      	mvns	r3, r3
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	4013      	ands	r3, r2
 800b61e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4313      	orrs	r3, r2
 800b632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b634:	4a1b      	ldr	r2, [pc, #108]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b63a:	4b1a      	ldr	r3, [pc, #104]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	43db      	mvns	r3, r3
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	4013      	ands	r3, r2
 800b648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b65e:	4a11      	ldr	r2, [pc, #68]	; (800b6a4 <HAL_GPIO_Init+0x300>)
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	3301      	adds	r3, #1
 800b668:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	fa22 f303 	lsr.w	r3, r2, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	f47f ae9d 	bne.w	800b3b4 <HAL_GPIO_Init+0x10>
  }
}
 800b67a:	bf00      	nop
 800b67c:	bf00      	nop
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	40021000 	.word	0x40021000
 800b68c:	40010000 	.word	0x40010000
 800b690:	48000400 	.word	0x48000400
 800b694:	48000800 	.word	0x48000800
 800b698:	48000c00 	.word	0x48000c00
 800b69c:	48001000 	.word	0x48001000
 800b6a0:	48001400 	.word	0x48001400
 800b6a4:	40010400 	.word	0x40010400

0800b6a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b6b8:	787b      	ldrb	r3, [r7, #1]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b6be:	887a      	ldrh	r2, [r7, #2]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b6c4:	e002      	b.n	800b6cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b6c6:	887a      	ldrh	r2, [r7, #2]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b6ea:	887a      	ldrh	r2, [r7, #2]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	041a      	lsls	r2, r3, #16
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	43d9      	mvns	r1, r3
 800b6f6:	887b      	ldrh	r3, [r7, #2]
 800b6f8:	400b      	ands	r3, r1
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	619a      	str	r2, [r3, #24]
}
 800b700:	bf00      	nop
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e08d      	b.n	800b83a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7f6 f9d2 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2224      	movs	r2, #36	; 0x24
 800b73c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f022 0201 	bic.w	r2, r2, #1
 800b74e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b75c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	689a      	ldr	r2, [r3, #8]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b76c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d107      	bne.n	800b786 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	689a      	ldr	r2, [r3, #8]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b782:	609a      	str	r2, [r3, #8]
 800b784:	e006      	b.n	800b794 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689a      	ldr	r2, [r3, #8]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b792:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d108      	bne.n	800b7ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7aa:	605a      	str	r2, [r3, #4]
 800b7ac:	e007      	b.n	800b7be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6812      	ldr	r2, [r2, #0]
 800b7c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b7cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b7e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691a      	ldr	r2, [r3, #16]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	430a      	orrs	r2, r1
 800b7fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	69d9      	ldr	r1, [r3, #28]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a1a      	ldr	r2, [r3, #32]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f042 0201 	orr.w	r2, r2, #1
 800b81a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2220      	movs	r2, #32
 800b826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af02      	add	r7, sp, #8
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	4608      	mov	r0, r1
 800b84e:	4611      	mov	r1, r2
 800b850:	461a      	mov	r2, r3
 800b852:	4603      	mov	r3, r0
 800b854:	817b      	strh	r3, [r7, #10]
 800b856:	460b      	mov	r3, r1
 800b858:	813b      	strh	r3, [r7, #8]
 800b85a:	4613      	mov	r3, r2
 800b85c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b20      	cmp	r3, #32
 800b868:	f040 80fd 	bne.w	800ba66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <HAL_I2C_Mem_Read+0x34>
 800b872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b874:	2b00      	cmp	r3, #0
 800b876:	d105      	bne.n	800b884 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b87e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e0f1      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d101      	bne.n	800b892 <HAL_I2C_Mem_Read+0x4e>
 800b88e:	2302      	movs	r3, #2
 800b890:	e0ea      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b89a:	f7fe fd37 	bl	800a30c <HAL_GetTick>
 800b89e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	2319      	movs	r3, #25
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 fee4 	bl	800c67a <I2C_WaitOnFlagUntilTimeout>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e0d5      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2222      	movs	r2, #34	; 0x22
 800b8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2240      	movs	r2, #64	; 0x40
 800b8c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6a3a      	ldr	r2, [r7, #32]
 800b8d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b8e4:	88f8      	ldrh	r0, [r7, #6]
 800b8e6:	893a      	ldrh	r2, [r7, #8]
 800b8e8:	8979      	ldrh	r1, [r7, #10]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 fa7b 	bl	800bdf0 <I2C_RequestMemoryRead>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d005      	beq.n	800b90c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e0ad      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b910:	b29b      	uxth	r3, r3
 800b912:	2bff      	cmp	r3, #255	; 0xff
 800b914:	d90e      	bls.n	800b934 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	22ff      	movs	r2, #255	; 0xff
 800b91a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b920:	b2da      	uxtb	r2, r3
 800b922:	8979      	ldrh	r1, [r7, #10]
 800b924:	4b52      	ldr	r3, [pc, #328]	; (800ba70 <HAL_I2C_Mem_Read+0x22c>)
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f001 f867 	bl	800ca00 <I2C_TransferConfig>
 800b932:	e00f      	b.n	800b954 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b938:	b29a      	uxth	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b942:	b2da      	uxtb	r2, r3
 800b944:	8979      	ldrh	r1, [r7, #10]
 800b946:	4b4a      	ldr	r3, [pc, #296]	; (800ba70 <HAL_I2C_Mem_Read+0x22c>)
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f001 f856 	bl	800ca00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	2200      	movs	r2, #0
 800b95c:	2104      	movs	r1, #4
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 fe8b 	bl	800c67a <I2C_WaitOnFlagUntilTimeout>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e07c      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	b2d2      	uxtb	r2, r2
 800b97a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b98a:	3b01      	subs	r3, #1
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b996:	b29b      	uxth	r3, r3
 800b998:	3b01      	subs	r3, #1
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d034      	beq.n	800ba14 <HAL_I2C_Mem_Read+0x1d0>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d130      	bne.n	800ba14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2180      	movs	r1, #128	; 0x80
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fe5c 	bl	800c67a <I2C_WaitOnFlagUntilTimeout>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e04d      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2bff      	cmp	r3, #255	; 0xff
 800b9d4:	d90e      	bls.n	800b9f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	22ff      	movs	r2, #255	; 0xff
 800b9da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	8979      	ldrh	r1, [r7, #10]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f001 f807 	bl	800ca00 <I2C_TransferConfig>
 800b9f2:	e00f      	b.n	800ba14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	8979      	ldrh	r1, [r7, #10]
 800ba06:	2300      	movs	r3, #0
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 fff6 	bl	800ca00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d19a      	bne.n	800b954 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fec9 	bl	800c7ba <I2C_WaitOnSTOPFlagUntilTimeout>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e01a      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2220      	movs	r2, #32
 800ba38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6859      	ldr	r1, [r3, #4]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	4b0b      	ldr	r3, [pc, #44]	; (800ba74 <HAL_I2C_Mem_Read+0x230>)
 800ba46:	400b      	ands	r3, r1
 800ba48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e000      	b.n	800ba68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ba66:	2302      	movs	r3, #2
  }
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	80002400 	.word	0x80002400
 800ba74:	fe00e800 	.word	0xfe00e800

0800ba78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	68f9      	ldr	r1, [r7, #12]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	4798      	blx	r3
  }
}
 800baa4:	bf00      	nop
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00f      	beq.n	800baee <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00a      	beq.n	800baee <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800badc:	f043 0201 	orr.w	r2, r3, #1
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00f      	beq.n	800bb18 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb06:	f043 0208 	orr.w	r2, r3, #8
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb16:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00f      	beq.n	800bb42 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00a      	beq.n	800bb42 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb30:	f043 0202 	orr.w	r2, r3, #2
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb40:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f003 030b 	and.w	r3, r3, #11
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800bb52:	68f9      	ldr	r1, [r7, #12]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fc37 	bl	800c3c8 <I2C_ITError>
  }
}
 800bb5a:	bf00      	nop
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bb6a:	bf00      	nop
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bb7e:	bf00      	nop
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b083      	sub	sp, #12
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
 800bb96:	4613      	mov	r3, r2
 800bb98:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bb9a:	bf00      	nop
 800bb9c:	370c      	adds	r7, #12
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b083      	sub	sp, #12
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bbc2:	bf00      	nop
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bbd6:	bf00      	nop
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbf0:	b2db      	uxtb	r3, r3
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d101      	bne.n	800bc22 <I2C_Slave_ISR_IT+0x24>
 800bc1e:	2302      	movs	r3, #2
 800bc20:	e0e2      	b.n	800bde8 <I2C_Slave_ISR_IT+0x1ea>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	f003 0320 	and.w	r3, r3, #32
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d004      	beq.n	800bc48 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bc3e:	6939      	ldr	r1, [r7, #16]
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 fa09 	bl	800c058 <I2C_ITSlaveCplt>
 800bc46:	e0ca      	b.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	f003 0310 	and.w	r3, r3, #16
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d04b      	beq.n	800bcea <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d046      	beq.n	800bcea <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d128      	bne.n	800bcb8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b28      	cmp	r3, #40	; 0x28
 800bc70:	d108      	bne.n	800bc84 <I2C_Slave_ISR_IT+0x86>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc78:	d104      	bne.n	800bc84 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bc7a:	6939      	ldr	r1, [r7, #16]
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f000 fb4f 	bl	800c320 <I2C_ITListenCplt>
 800bc82:	e031      	b.n	800bce8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b29      	cmp	r3, #41	; 0x29
 800bc8e:	d10e      	bne.n	800bcae <I2C_Slave_ISR_IT+0xb0>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc96:	d00a      	beq.n	800bcae <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2210      	movs	r2, #16
 800bc9e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 fca8 	bl	800c5f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f000 f97a 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
 800bcac:	e01c      	b.n	800bce8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2210      	movs	r2, #16
 800bcb4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bcb6:	e08f      	b.n	800bdd8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2210      	movs	r2, #16
 800bcbe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc4:	f043 0204 	orr.w	r2, r3, #4
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <I2C_Slave_ISR_IT+0xdc>
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcd8:	d17e      	bne.n	800bdd8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcde:	4619      	mov	r1, r3
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 fb71 	bl	800c3c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bce6:	e077      	b.n	800bdd8 <I2C_Slave_ISR_IT+0x1da>
 800bce8:	e076      	b.n	800bdd8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d02f      	beq.n	800bd54 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d02a      	beq.n	800bd54 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d018      	beq.n	800bd3a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd24:	3b01      	subs	r3, #1
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d14b      	bne.n	800bddc <I2C_Slave_ISR_IT+0x1de>
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd4a:	d047      	beq.n	800bddc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 f927 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bd52:	e043      	b.n	800bddc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d009      	beq.n	800bd72 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bd68:	6939      	ldr	r1, [r7, #16]
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 f894 	bl	800be98 <I2C_ITAddrCplt>
 800bd70:	e035      	b.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f003 0302 	and.w	r3, r3, #2
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d030      	beq.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d02b      	beq.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d018      	beq.n	800bdc2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	781a      	ldrb	r2, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	3b01      	subs	r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	851a      	strh	r2, [r3, #40]	; 0x28
 800bdc0:	e00d      	b.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdc8:	d002      	beq.n	800bdd0 <I2C_Slave_ISR_IT+0x1d2>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f000 f8e5 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
 800bdd6:	e002      	b.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800bdd8:	bf00      	nop
 800bdda:	e000      	b.n	800bdde <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800bddc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	817b      	strh	r3, [r7, #10]
 800be02:	460b      	mov	r3, r1
 800be04:	813b      	strh	r3, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	8979      	ldrh	r1, [r7, #10]
 800be10:	4b20      	ldr	r3, [pc, #128]	; (800be94 <I2C_RequestMemoryRead+0xa4>)
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	2300      	movs	r3, #0
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 fdf2 	bl	800ca00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	69b9      	ldr	r1, [r7, #24]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 fc83 	bl	800c72c <I2C_WaitOnTXISFlagUntilTimeout>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e02c      	b.n	800be8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be30:	88fb      	ldrh	r3, [r7, #6]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d105      	bne.n	800be42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be36:	893b      	ldrh	r3, [r7, #8]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	629a      	str	r2, [r3, #40]	; 0x28
 800be40:	e015      	b.n	800be6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be42:	893b      	ldrh	r3, [r7, #8]
 800be44:	0a1b      	lsrs	r3, r3, #8
 800be46:	b29b      	uxth	r3, r3
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	69b9      	ldr	r1, [r7, #24]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f000 fc69 	bl	800c72c <I2C_WaitOnTXISFlagUntilTimeout>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e012      	b.n	800be8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be64:	893b      	ldrh	r3, [r7, #8]
 800be66:	b2da      	uxtb	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2200      	movs	r2, #0
 800be76:	2140      	movs	r1, #64	; 0x40
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f000 fbfe 	bl	800c67a <I2C_WaitOnFlagUntilTimeout>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e000      	b.n	800be8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	80002000 	.word	0x80002000

0800be98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800beae:	2b28      	cmp	r3, #40	; 0x28
 800beb0:	d16a      	bne.n	800bf88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	0c1b      	lsrs	r3, r3, #16
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	0c1b      	lsrs	r3, r3, #16
 800beca:	b29b      	uxth	r3, r3
 800becc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bed0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bede:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800beec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d138      	bne.n	800bf68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800bef6:	897b      	ldrh	r3, [r7, #10]
 800bef8:	09db      	lsrs	r3, r3, #7
 800befa:	b29a      	uxth	r2, r3
 800befc:	89bb      	ldrh	r3, [r7, #12]
 800befe:	4053      	eors	r3, r2
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f003 0306 	and.w	r3, r3, #6
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d11c      	bne.n	800bf44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bf0a:	897b      	ldrh	r3, [r7, #10]
 800bf0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d13b      	bne.n	800bf98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2208      	movs	r2, #8
 800bf2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf36:	89ba      	ldrh	r2, [r7, #12]
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7ff fe24 	bl	800bb8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bf42:	e029      	b.n	800bf98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bf44:	893b      	ldrh	r3, [r7, #8]
 800bf46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bf48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fd89 	bl	800ca64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf5a:	89ba      	ldrh	r2, [r7, #12]
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff fe12 	bl	800bb8a <HAL_I2C_AddrCallback>
}
 800bf66:	e017      	b.n	800bf98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bf68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fd79 	bl	800ca64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bf7a:	89ba      	ldrh	r2, [r7, #12]
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff fe02 	bl	800bb8a <HAL_I2C_AddrCallback>
}
 800bf86:	e007      	b.n	800bf98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d008      	beq.n	800bfd4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	e00c      	b.n	800bfee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d007      	beq.n	800bfee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bfec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b29      	cmp	r3, #41	; 0x29
 800bff8:	d112      	bne.n	800c020 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2228      	movs	r2, #40	; 0x28
 800bffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2221      	movs	r2, #33	; 0x21
 800c006:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c008:	2101      	movs	r1, #1
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fd2a 	bl	800ca64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff fda2 	bl	800bb62 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c01e:	e017      	b.n	800c050 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b2a      	cmp	r3, #42	; 0x2a
 800c02a:	d111      	bne.n	800c050 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2228      	movs	r2, #40	; 0x28
 800c030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2222      	movs	r2, #34	; 0x22
 800c038:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c03a:	2102      	movs	r1, #2
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fd11 	bl	800ca64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fd93 	bl	800bb76 <HAL_I2C_SlaveRxCpltCallback>
}
 800c050:	bf00      	nop
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c07a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2220      	movs	r2, #32
 800c082:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c084:	7afb      	ldrb	r3, [r7, #11]
 800c086:	2b21      	cmp	r3, #33	; 0x21
 800c088:	d002      	beq.n	800c090 <I2C_ITSlaveCplt+0x38>
 800c08a:	7afb      	ldrb	r3, [r7, #11]
 800c08c:	2b29      	cmp	r3, #41	; 0x29
 800c08e:	d108      	bne.n	800c0a2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c090:	f248 0101 	movw	r1, #32769	; 0x8001
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fce5 	bl	800ca64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2221      	movs	r2, #33	; 0x21
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
 800c0a0:	e019      	b.n	800c0d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c0a2:	7afb      	ldrb	r3, [r7, #11]
 800c0a4:	2b22      	cmp	r3, #34	; 0x22
 800c0a6:	d002      	beq.n	800c0ae <I2C_ITSlaveCplt+0x56>
 800c0a8:	7afb      	ldrb	r3, [r7, #11]
 800c0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ac:	d108      	bne.n	800c0c0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c0ae:	f248 0102 	movw	r1, #32770	; 0x8002
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fcd6 	bl	800ca64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2222      	movs	r2, #34	; 0x22
 800c0bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c0be:	e00a      	b.n	800c0d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c0c0:	7afb      	ldrb	r3, [r7, #11]
 800c0c2:	2b28      	cmp	r3, #40	; 0x28
 800c0c4:	d107      	bne.n	800c0d6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c0c6:	f248 0103 	movw	r1, #32771	; 0x8003
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fcca 	bl	800ca64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6859      	ldr	r1, [r3, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	4b89      	ldr	r3, [pc, #548]	; (800c318 <I2C_ITSlaveCplt+0x2c0>)
 800c0f2:	400b      	ands	r3, r1
 800c0f4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fa7d 	bl	800c5f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c102:	2b00      	cmp	r3, #0
 800c104:	d013      	beq.n	800c12e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c114:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d01f      	beq.n	800c15e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29a      	uxth	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c12c:	e017      	b.n	800c15e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d012      	beq.n	800c15e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c146:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d006      	beq.n	800c15e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	b29a      	uxth	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d020      	beq.n	800c1aa <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	f023 0304 	bic.w	r3, r3, #4
 800c16e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17a:	b2d2      	uxtb	r2, r2
 800c17c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00c      	beq.n	800c1aa <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c194:	3b01      	subs	r3, #1
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d005      	beq.n	800c1c0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b8:	f043 0204 	orr.w	r2, r3, #4
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f003 0310 	and.w	r3, r3, #16
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d049      	beq.n	800c25e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d044      	beq.n	800c25e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d128      	bne.n	800c230 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b28      	cmp	r3, #40	; 0x28
 800c1e8:	d108      	bne.n	800c1fc <I2C_ITSlaveCplt+0x1a4>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1f0:	d104      	bne.n	800c1fc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c1f2:	6979      	ldr	r1, [r7, #20]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f893 	bl	800c320 <I2C_ITListenCplt>
 800c1fa:	e030      	b.n	800c25e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b29      	cmp	r3, #41	; 0x29
 800c206:	d10e      	bne.n	800c226 <I2C_ITSlaveCplt+0x1ce>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c20e:	d00a      	beq.n	800c226 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2210      	movs	r2, #16
 800c216:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f9ec 	bl	800c5f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff febe 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
 800c224:	e01b      	b.n	800c25e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2210      	movs	r2, #16
 800c22c:	61da      	str	r2, [r3, #28]
 800c22e:	e016      	b.n	800c25e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2210      	movs	r2, #16
 800c236:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c23c:	f043 0204 	orr.w	r2, r3, #4
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <I2C_ITSlaveCplt+0x1fa>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c250:	d105      	bne.n	800c25e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f8b5 	bl	800c3c8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c270:	2b00      	cmp	r3, #0
 800c272:	d010      	beq.n	800c296 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f8a4 	bl	800c3c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b28      	cmp	r3, #40	; 0x28
 800c28a:	d141      	bne.n	800c310 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c28c:	6979      	ldr	r1, [r7, #20]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f846 	bl	800c320 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c294:	e03c      	b.n	800c310 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c29e:	d014      	beq.n	800c2ca <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff fe7d 	bl	800bfa0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a1c      	ldr	r2, [pc, #112]	; (800c31c <I2C_ITSlaveCplt+0x2c4>)
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff fc6f 	bl	800bba6 <HAL_I2C_ListenCpltCallback>
}
 800c2c8:	e022      	b.n	800c310 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b22      	cmp	r3, #34	; 0x22
 800c2d4:	d10e      	bne.n	800c2f4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2220      	movs	r2, #32
 800c2da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7ff fc42 	bl	800bb76 <HAL_I2C_SlaveRxCpltCallback>
}
 800c2f2:	e00d      	b.n	800c310 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff fc29 	bl	800bb62 <HAL_I2C_SlaveTxCpltCallback>
}
 800c310:	bf00      	nop
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	fe00e800 	.word	0xfe00e800
 800c31c:	ffff0000 	.word	0xffff0000

0800c320 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a25      	ldr	r2, [pc, #148]	; (800c3c4 <I2C_ITListenCplt+0xa4>)
 800c32e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2220      	movs	r2, #32
 800c33a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	f003 0304 	and.w	r3, r3, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	d022      	beq.n	800c39c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c360:	b2d2      	uxtb	r2, r2
 800c362:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c372:	2b00      	cmp	r3, #0
 800c374:	d012      	beq.n	800c39c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c37a:	3b01      	subs	r3, #1
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c386:	b29b      	uxth	r3, r3
 800c388:	3b01      	subs	r3, #1
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c394:	f043 0204 	orr.w	r2, r3, #4
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c39c:	f248 0103 	movw	r1, #32771	; 0x8003
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fb5f 	bl	800ca64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2210      	movs	r2, #16
 800c3ac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7ff fbf5 	bl	800bba6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	ffff0000 	.word	0xffff0000

0800c3c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3d8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a6d      	ldr	r2, [pc, #436]	; (800c59c <I2C_ITError+0x1d4>)
 800c3e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	431a      	orrs	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
 800c3fc:	2b28      	cmp	r3, #40	; 0x28
 800c3fe:	d005      	beq.n	800c40c <I2C_ITError+0x44>
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	2b29      	cmp	r3, #41	; 0x29
 800c404:	d002      	beq.n	800c40c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	2b2a      	cmp	r3, #42	; 0x2a
 800c40a:	d10b      	bne.n	800c424 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c40c:	2103      	movs	r1, #3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fb28 	bl	800ca64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2228      	movs	r2, #40	; 0x28
 800c418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a60      	ldr	r2, [pc, #384]	; (800c5a0 <I2C_ITError+0x1d8>)
 800c420:	635a      	str	r2, [r3, #52]	; 0x34
 800c422:	e030      	b.n	800c486 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c424:	f248 0103 	movw	r1, #32771	; 0x8003
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fb1b 	bl	800ca64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f8e1 	bl	800c5f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b60      	cmp	r3, #96	; 0x60
 800c43e:	d01f      	beq.n	800c480 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	f003 0320 	and.w	r3, r3, #32
 800c452:	2b20      	cmp	r3, #32
 800c454:	d114      	bne.n	800c480 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	f003 0310 	and.w	r3, r3, #16
 800c460:	2b10      	cmp	r3, #16
 800c462:	d109      	bne.n	800c478 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2210      	movs	r2, #16
 800c46a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c470:	f043 0204 	orr.w	r2, r3, #4
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2220      	movs	r2, #32
 800c47e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c490:	2b00      	cmp	r3, #0
 800c492:	d039      	beq.n	800c508 <I2C_ITError+0x140>
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	2b11      	cmp	r3, #17
 800c498:	d002      	beq.n	800c4a0 <I2C_ITError+0xd8>
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2b21      	cmp	r3, #33	; 0x21
 800c49e:	d133      	bne.n	800c508 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4ae:	d107      	bne.n	800c4c0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c4be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fe fa76 	bl	800a9b6 <HAL_DMA_GetState>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d017      	beq.n	800c500 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d4:	4a33      	ldr	r2, [pc, #204]	; (800c5a4 <I2C_ITError+0x1dc>)
 800c4d6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe f950 	bl	800a78a <HAL_DMA_Abort_IT>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d04d      	beq.n	800c58c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c4fe:	e045      	b.n	800c58c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f851 	bl	800c5a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c506:	e041      	b.n	800c58c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d039      	beq.n	800c584 <I2C_ITError+0x1bc>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2b12      	cmp	r3, #18
 800c514:	d002      	beq.n	800c51c <I2C_ITError+0x154>
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2b22      	cmp	r3, #34	; 0x22
 800c51a:	d133      	bne.n	800c584 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c52a:	d107      	bne.n	800c53c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c53a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fa38 	bl	800a9b6 <HAL_DMA_GetState>
 800c546:	4603      	mov	r3, r0
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d017      	beq.n	800c57c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c550:	4a14      	ldr	r2, [pc, #80]	; (800c5a4 <I2C_ITError+0x1dc>)
 800c552:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe f912 	bl	800a78a <HAL_DMA_Abort_IT>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d011      	beq.n	800c590 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c576:	4610      	mov	r0, r2
 800c578:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c57a:	e009      	b.n	800c590 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f813 	bl	800c5a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c582:	e005      	b.n	800c590 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f80f 	bl	800c5a8 <I2C_TreatErrorCallback>
  }
}
 800c58a:	e002      	b.n	800c592 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c58c:	bf00      	nop
 800c58e:	e000      	b.n	800c592 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c590:	bf00      	nop
}
 800c592:	bf00      	nop
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	ffff0000 	.word	0xffff0000
 800c5a0:	0800bbff 	.word	0x0800bbff
 800c5a4:	0800c63f 	.word	0x0800c63f

0800c5a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b60      	cmp	r3, #96	; 0x60
 800c5ba:	d10e      	bne.n	800c5da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2220      	movs	r2, #32
 800c5c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fafb 	bl	800bbce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c5d8:	e009      	b.n	800c5ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fae6 	bl	800bbba <HAL_I2C_ErrorCallback>
}
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	f003 0302 	and.w	r3, r3, #2
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d103      	bne.n	800c614 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2200      	movs	r2, #0
 800c612:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d007      	beq.n	800c632 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f042 0201 	orr.w	r2, r2, #1
 800c630:	619a      	str	r2, [r3, #24]
  }
}
 800c632:	bf00      	nop
 800c634:	370c      	adds	r7, #12
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	2200      	movs	r2, #0
 800c65a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c668:	2200      	movs	r2, #0
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff ff9b 	bl	800c5a8 <I2C_TreatErrorCallback>
}
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	603b      	str	r3, [r7, #0]
 800c686:	4613      	mov	r3, r2
 800c688:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c68a:	e03b      	b.n	800c704 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f000 f8d5 	bl	800c840 <I2C_IsErrorOccurred>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e041      	b.n	800c724 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d02d      	beq.n	800c704 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6a8:	f7fd fe30 	bl	800a30c <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d302      	bcc.n	800c6be <I2C_WaitOnFlagUntilTimeout+0x44>
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d122      	bne.n	800c704 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	699a      	ldr	r2, [r3, #24]
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	bf0c      	ite	eq
 800c6ce:	2301      	moveq	r3, #1
 800c6d0:	2300      	movne	r3, #0
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	79fb      	ldrb	r3, [r7, #7]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d113      	bne.n	800c704 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e0:	f043 0220 	orr.w	r2, r3, #32
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	e00f      	b.n	800c724 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	699a      	ldr	r2, [r3, #24]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	4013      	ands	r3, r2
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	429a      	cmp	r2, r3
 800c712:	bf0c      	ite	eq
 800c714:	2301      	moveq	r3, #1
 800c716:	2300      	movne	r3, #0
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	461a      	mov	r2, r3
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d0b4      	beq.n	800c68c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c738:	e033      	b.n	800c7a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	68b9      	ldr	r1, [r7, #8]
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 f87e 	bl	800c840 <I2C_IsErrorOccurred>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e031      	b.n	800c7b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c754:	d025      	beq.n	800c7a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c756:	f7fd fdd9 	bl	800a30c <HAL_GetTick>
 800c75a:	4602      	mov	r2, r0
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	429a      	cmp	r2, r3
 800c764:	d302      	bcc.n	800c76c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11a      	bne.n	800c7a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	f003 0302 	and.w	r3, r3, #2
 800c776:	2b02      	cmp	r3, #2
 800c778:	d013      	beq.n	800c7a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c77e:	f043 0220 	orr.w	r2, r3, #32
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2220      	movs	r2, #32
 800c78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e007      	b.n	800c7b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d1c4      	bne.n	800c73a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b084      	sub	sp, #16
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7c6:	e02f      	b.n	800c828 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f837 	bl	800c840 <I2C_IsErrorOccurred>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e02d      	b.n	800c838 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7dc:	f7fd fd96 	bl	800a30c <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d302      	bcc.n	800c7f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d11a      	bne.n	800c828 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	f003 0320 	and.w	r3, r3, #32
 800c7fc:	2b20      	cmp	r3, #32
 800c7fe:	d013      	beq.n	800c828 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c804:	f043 0220 	orr.w	r2, r3, #32
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2220      	movs	r2, #32
 800c810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e007      	b.n	800c838 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b20      	cmp	r3, #32
 800c834:	d1c8      	bne.n	800c7c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08a      	sub	sp, #40	; 0x28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	f003 0310 	and.w	r3, r3, #16
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d068      	beq.n	800c93e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2210      	movs	r2, #16
 800c872:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c874:	e049      	b.n	800c90a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87c:	d045      	beq.n	800c90a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c87e:	f7fd fd45 	bl	800a30c <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d302      	bcc.n	800c894 <I2C_IsErrorOccurred+0x54>
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d13a      	bne.n	800c90a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c89e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8b6:	d121      	bne.n	800c8fc <I2C_IsErrorOccurred+0xbc>
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8be:	d01d      	beq.n	800c8fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c8c0:	7cfb      	ldrb	r3, [r7, #19]
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	d01a      	beq.n	800c8fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	685a      	ldr	r2, [r3, #4]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c8d6:	f7fd fd19 	bl	800a30c <HAL_GetTick>
 800c8da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c8dc:	e00e      	b.n	800c8fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c8de:	f7fd fd15 	bl	800a30c <HAL_GetTick>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b19      	cmp	r3, #25
 800c8ea:	d907      	bls.n	800c8fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	f043 0320 	orr.w	r3, r3, #32
 800c8f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c8fa:	e006      	b.n	800c90a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	f003 0320 	and.w	r3, r3, #32
 800c906:	2b20      	cmp	r3, #32
 800c908:	d1e9      	bne.n	800c8de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	f003 0320 	and.w	r3, r3, #32
 800c914:	2b20      	cmp	r3, #32
 800c916:	d003      	beq.n	800c920 <I2C_IsErrorOccurred+0xe0>
 800c918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d0aa      	beq.n	800c876 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c924:	2b00      	cmp	r3, #0
 800c926:	d103      	bne.n	800c930 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2220      	movs	r2, #32
 800c92e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	f043 0304 	orr.w	r3, r3, #4
 800c936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	f043 0301 	orr.w	r3, r3, #1
 800c956:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00b      	beq.n	800c98a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	f043 0308 	orr.w	r3, r3, #8
 800c978:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00b      	beq.n	800c9ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	f043 0302 	orr.w	r3, r3, #2
 800c99a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d01c      	beq.n	800c9ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f7ff fe1e 	bl	800c5f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6859      	ldr	r1, [r3, #4]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <I2C_IsErrorOccurred+0x1bc>)
 800c9c6:	400b      	ands	r3, r1
 800c9c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2220      	movs	r2, #32
 800c9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3728      	adds	r7, #40	; 0x28
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	fe00e800 	.word	0xfe00e800

0800ca00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	607b      	str	r3, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	817b      	strh	r3, [r7, #10]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca12:	897b      	ldrh	r3, [r7, #10]
 800ca14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca18:	7a7b      	ldrb	r3, [r7, #9]
 800ca1a:	041b      	lsls	r3, r3, #16
 800ca1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	0d5b      	lsrs	r3, r3, #21
 800ca3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ca3e:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <I2C_TransferConfig+0x60>)
 800ca40:	430b      	orrs	r3, r1
 800ca42:	43db      	mvns	r3, r3
 800ca44:	ea02 0103 	and.w	r1, r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ca52:	bf00      	nop
 800ca54:	371c      	adds	r7, #28
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	03ff63ff 	.word	0x03ff63ff

0800ca64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ca74:	887b      	ldrh	r3, [r7, #2]
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00f      	beq.n	800ca9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ca84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ca92:	2b28      	cmp	r3, #40	; 0x28
 800ca94:	d003      	beq.n	800ca9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ca9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ca9e:	887b      	ldrh	r3, [r7, #2]
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00f      	beq.n	800cac8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800caae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cabc:	2b28      	cmp	r3, #40	; 0x28
 800cabe:	d003      	beq.n	800cac8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cac6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	da03      	bge.n	800cad8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cad6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cad8:	887b      	ldrh	r3, [r7, #2]
 800cada:	2b10      	cmp	r3, #16
 800cadc:	d103      	bne.n	800cae6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cae4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cae6:	887b      	ldrh	r3, [r7, #2]
 800cae8:	2b20      	cmp	r3, #32
 800caea:	d103      	bne.n	800caf4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f043 0320 	orr.w	r3, r3, #32
 800caf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800caf4:	887b      	ldrh	r3, [r7, #2]
 800caf6:	2b40      	cmp	r3, #64	; 0x40
 800caf8:	d103      	bne.n	800cb02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6819      	ldr	r1, [r3, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	43da      	mvns	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	400a      	ands	r2, r1
 800cb12:	601a      	str	r2, [r3, #0]
}
 800cb14:	bf00      	nop
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b20      	cmp	r3, #32
 800cb34:	d138      	bne.n	800cba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d101      	bne.n	800cb44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cb40:	2302      	movs	r3, #2
 800cb42:	e032      	b.n	800cbaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2224      	movs	r2, #36	; 0x24
 800cb50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f022 0201 	bic.w	r2, r2, #1
 800cb62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6819      	ldr	r1, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	430a      	orrs	r2, r1
 800cb82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0201 	orr.w	r2, r2, #1
 800cb92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2220      	movs	r2, #32
 800cb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	e000      	b.n	800cbaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cba8:	2302      	movs	r3, #2
  }
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b085      	sub	sp, #20
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	2b20      	cmp	r3, #32
 800cbca:	d139      	bne.n	800cc40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d101      	bne.n	800cbda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e033      	b.n	800cc42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2224      	movs	r2, #36	; 0x24
 800cbe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f022 0201 	bic.w	r2, r2, #1
 800cbf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cc08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	021b      	lsls	r3, r3, #8
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f042 0201 	orr.w	r2, r2, #1
 800cc2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e000      	b.n	800cc42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cc40:	2302      	movs	r3, #2
  }
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
	...

0800cc50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d141      	bne.n	800cce2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cc5e:	4b4b      	ldr	r3, [pc, #300]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cc66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc6a:	d131      	bne.n	800ccd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cc6c:	4b47      	ldr	r3, [pc, #284]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc72:	4a46      	ldr	r2, [pc, #280]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cc7c:	4b43      	ldr	r3, [pc, #268]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cc84:	4a41      	ldr	r2, [pc, #260]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cc8c:	4b40      	ldr	r3, [pc, #256]	; (800cd90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2232      	movs	r2, #50	; 0x32
 800cc92:	fb02 f303 	mul.w	r3, r2, r3
 800cc96:	4a3f      	ldr	r2, [pc, #252]	; (800cd94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cc98:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9c:	0c9b      	lsrs	r3, r3, #18
 800cc9e:	3301      	adds	r3, #1
 800cca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cca2:	e002      	b.n	800ccaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ccaa:	4b38      	ldr	r3, [pc, #224]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccb6:	d102      	bne.n	800ccbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f2      	bne.n	800cca4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ccbe:	4b33      	ldr	r3, [pc, #204]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccca:	d158      	bne.n	800cd7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e057      	b.n	800cd80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ccd0:	4b2e      	ldr	r3, [pc, #184]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ccd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccd6:	4a2d      	ldr	r2, [pc, #180]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ccd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cce0:	e04d      	b.n	800cd7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cce8:	d141      	bne.n	800cd6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ccea:	4b28      	ldr	r3, [pc, #160]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ccf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccf6:	d131      	bne.n	800cd5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ccf8:	4b24      	ldr	r3, [pc, #144]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ccfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccfe:	4a23      	ldr	r2, [pc, #140]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd08:	4b20      	ldr	r3, [pc, #128]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cd10:	4a1e      	ldr	r2, [pc, #120]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cd18:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2232      	movs	r2, #50	; 0x32
 800cd1e:	fb02 f303 	mul.w	r3, r2, r3
 800cd22:	4a1c      	ldr	r2, [pc, #112]	; (800cd94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cd24:	fba2 2303 	umull	r2, r3, r2, r3
 800cd28:	0c9b      	lsrs	r3, r3, #18
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd2e:	e002      	b.n	800cd36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd36:	4b15      	ldr	r3, [pc, #84]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd38:	695b      	ldr	r3, [r3, #20]
 800cd3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd42:	d102      	bne.n	800cd4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1f2      	bne.n	800cd30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cd4a:	4b10      	ldr	r3, [pc, #64]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd56:	d112      	bne.n	800cd7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e011      	b.n	800cd80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd62:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cd6c:	e007      	b.n	800cd7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cd6e:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cd76:	4a05      	ldr	r2, [pc, #20]	; (800cd8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	40007000 	.word	0x40007000
 800cd90:	20000070 	.word	0x20000070
 800cd94:	431bde83 	.word	0x431bde83

0800cd98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800cd9c:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	4a04      	ldr	r2, [pc, #16]	; (800cdb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cda2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cda6:	6093      	str	r3, [r2, #8]
}
 800cda8:	bf00      	nop
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	40007000 	.word	0x40007000

0800cdb8 <HAL_RCC_OscConfig>:
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b088      	sub	sp, #32
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <HAL_RCC_OscConfig+0x12>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e2fe      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d075      	beq.n	800cec2 <HAL_RCC_OscConfig+0x10a>
 800cdd6:	4b97      	ldr	r3, [pc, #604]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f003 030c 	and.w	r3, r3, #12
 800cdde:	61bb      	str	r3, [r7, #24]
 800cde0:	4b94      	ldr	r3, [pc, #592]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	f003 0303 	and.w	r3, r3, #3
 800cde8:	617b      	str	r3, [r7, #20]
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	2b0c      	cmp	r3, #12
 800cdee:	d102      	bne.n	800cdf6 <HAL_RCC_OscConfig+0x3e>
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d002      	beq.n	800cdfc <HAL_RCC_OscConfig+0x44>
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b08      	cmp	r3, #8
 800cdfa:	d10b      	bne.n	800ce14 <HAL_RCC_OscConfig+0x5c>
 800cdfc:	4b8d      	ldr	r3, [pc, #564]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d05b      	beq.n	800cec0 <HAL_RCC_OscConfig+0x108>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d157      	bne.n	800cec0 <HAL_RCC_OscConfig+0x108>
 800ce10:	2301      	movs	r3, #1
 800ce12:	e2d9      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce1c:	d106      	bne.n	800ce2c <HAL_RCC_OscConfig+0x74>
 800ce1e:	4b85      	ldr	r3, [pc, #532]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a84      	ldr	r2, [pc, #528]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce28:	6013      	str	r3, [r2, #0]
 800ce2a:	e01d      	b.n	800ce68 <HAL_RCC_OscConfig+0xb0>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce34:	d10c      	bne.n	800ce50 <HAL_RCC_OscConfig+0x98>
 800ce36:	4b7f      	ldr	r3, [pc, #508]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a7e      	ldr	r2, [pc, #504]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	4b7c      	ldr	r3, [pc, #496]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a7b      	ldr	r2, [pc, #492]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	e00b      	b.n	800ce68 <HAL_RCC_OscConfig+0xb0>
 800ce50:	4b78      	ldr	r3, [pc, #480]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a77      	ldr	r2, [pc, #476]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	4b75      	ldr	r3, [pc, #468]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a74      	ldr	r2, [pc, #464]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d013      	beq.n	800ce98 <HAL_RCC_OscConfig+0xe0>
 800ce70:	f7fd fa4c 	bl	800a30c <HAL_GetTick>
 800ce74:	6138      	str	r0, [r7, #16]
 800ce76:	e008      	b.n	800ce8a <HAL_RCC_OscConfig+0xd2>
 800ce78:	f7fd fa48 	bl	800a30c <HAL_GetTick>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	2b64      	cmp	r3, #100	; 0x64
 800ce84:	d901      	bls.n	800ce8a <HAL_RCC_OscConfig+0xd2>
 800ce86:	2303      	movs	r3, #3
 800ce88:	e29e      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800ce8a:	4b6a      	ldr	r3, [pc, #424]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0f0      	beq.n	800ce78 <HAL_RCC_OscConfig+0xc0>
 800ce96:	e014      	b.n	800cec2 <HAL_RCC_OscConfig+0x10a>
 800ce98:	f7fd fa38 	bl	800a30c <HAL_GetTick>
 800ce9c:	6138      	str	r0, [r7, #16]
 800ce9e:	e008      	b.n	800ceb2 <HAL_RCC_OscConfig+0xfa>
 800cea0:	f7fd fa34 	bl	800a30c <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b64      	cmp	r3, #100	; 0x64
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0xfa>
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e28a      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800ceb2:	4b60      	ldr	r3, [pc, #384]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f0      	bne.n	800cea0 <HAL_RCC_OscConfig+0xe8>
 800cebe:	e000      	b.n	800cec2 <HAL_RCC_OscConfig+0x10a>
 800cec0:	bf00      	nop
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d075      	beq.n	800cfba <HAL_RCC_OscConfig+0x202>
 800cece:	4b59      	ldr	r3, [pc, #356]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	f003 030c 	and.w	r3, r3, #12
 800ced6:	61bb      	str	r3, [r7, #24]
 800ced8:	4b56      	ldr	r3, [pc, #344]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	f003 0303 	and.w	r3, r3, #3
 800cee0:	617b      	str	r3, [r7, #20]
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	2b0c      	cmp	r3, #12
 800cee6:	d102      	bne.n	800ceee <HAL_RCC_OscConfig+0x136>
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d002      	beq.n	800cef4 <HAL_RCC_OscConfig+0x13c>
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	2b04      	cmp	r3, #4
 800cef2:	d11f      	bne.n	800cf34 <HAL_RCC_OscConfig+0x17c>
 800cef4:	4b4f      	ldr	r3, [pc, #316]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d005      	beq.n	800cf0c <HAL_RCC_OscConfig+0x154>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d101      	bne.n	800cf0c <HAL_RCC_OscConfig+0x154>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e25d      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800cf0c:	4b49      	ldr	r3, [pc, #292]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	061b      	lsls	r3, r3, #24
 800cf1a:	4946      	ldr	r1, [pc, #280]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	604b      	str	r3, [r1, #4]
 800cf20:	4b45      	ldr	r3, [pc, #276]	; (800d038 <HAL_RCC_OscConfig+0x280>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fd f9a5 	bl	800a274 <HAL_InitTick>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d043      	beq.n	800cfb8 <HAL_RCC_OscConfig+0x200>
 800cf30:	2301      	movs	r3, #1
 800cf32:	e249      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d023      	beq.n	800cf84 <HAL_RCC_OscConfig+0x1cc>
 800cf3c:	4b3d      	ldr	r3, [pc, #244]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a3c      	ldr	r2, [pc, #240]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	f7fd f9e0 	bl	800a30c <HAL_GetTick>
 800cf4c:	6138      	str	r0, [r7, #16]
 800cf4e:	e008      	b.n	800cf62 <HAL_RCC_OscConfig+0x1aa>
 800cf50:	f7fd f9dc 	bl	800a30c <HAL_GetTick>
 800cf54:	4602      	mov	r2, r0
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d901      	bls.n	800cf62 <HAL_RCC_OscConfig+0x1aa>
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e232      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800cf62:	4b34      	ldr	r3, [pc, #208]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d0f0      	beq.n	800cf50 <HAL_RCC_OscConfig+0x198>
 800cf6e:	4b31      	ldr	r3, [pc, #196]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	061b      	lsls	r3, r3, #24
 800cf7c:	492d      	ldr	r1, [pc, #180]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	604b      	str	r3, [r1, #4]
 800cf82:	e01a      	b.n	800cfba <HAL_RCC_OscConfig+0x202>
 800cf84:	4b2b      	ldr	r3, [pc, #172]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a2a      	ldr	r2, [pc, #168]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cf8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	f7fd f9bc 	bl	800a30c <HAL_GetTick>
 800cf94:	6138      	str	r0, [r7, #16]
 800cf96:	e008      	b.n	800cfaa <HAL_RCC_OscConfig+0x1f2>
 800cf98:	f7fd f9b8 	bl	800a30c <HAL_GetTick>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d901      	bls.n	800cfaa <HAL_RCC_OscConfig+0x1f2>
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	e20e      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800cfaa:	4b22      	ldr	r3, [pc, #136]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1f0      	bne.n	800cf98 <HAL_RCC_OscConfig+0x1e0>
 800cfb6:	e000      	b.n	800cfba <HAL_RCC_OscConfig+0x202>
 800cfb8:	bf00      	nop
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0308 	and.w	r3, r3, #8
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d041      	beq.n	800d04a <HAL_RCC_OscConfig+0x292>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	695b      	ldr	r3, [r3, #20]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d01c      	beq.n	800d008 <HAL_RCC_OscConfig+0x250>
 800cfce:	4b19      	ldr	r3, [pc, #100]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cfd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfd4:	4a17      	ldr	r2, [pc, #92]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cfd6:	f043 0301 	orr.w	r3, r3, #1
 800cfda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cfde:	f7fd f995 	bl	800a30c <HAL_GetTick>
 800cfe2:	6138      	str	r0, [r7, #16]
 800cfe4:	e008      	b.n	800cff8 <HAL_RCC_OscConfig+0x240>
 800cfe6:	f7fd f991 	bl	800a30c <HAL_GetTick>
 800cfea:	4602      	mov	r2, r0
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d901      	bls.n	800cff8 <HAL_RCC_OscConfig+0x240>
 800cff4:	2303      	movs	r3, #3
 800cff6:	e1e7      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800cff8:	4b0e      	ldr	r3, [pc, #56]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800cffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cffe:	f003 0302 	and.w	r3, r3, #2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0ef      	beq.n	800cfe6 <HAL_RCC_OscConfig+0x22e>
 800d006:	e020      	b.n	800d04a <HAL_RCC_OscConfig+0x292>
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800d00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d00e:	4a09      	ldr	r2, [pc, #36]	; (800d034 <HAL_RCC_OscConfig+0x27c>)
 800d010:	f023 0301 	bic.w	r3, r3, #1
 800d014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d018:	f7fd f978 	bl	800a30c <HAL_GetTick>
 800d01c:	6138      	str	r0, [r7, #16]
 800d01e:	e00d      	b.n	800d03c <HAL_RCC_OscConfig+0x284>
 800d020:	f7fd f974 	bl	800a30c <HAL_GetTick>
 800d024:	4602      	mov	r2, r0
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d906      	bls.n	800d03c <HAL_RCC_OscConfig+0x284>
 800d02e:	2303      	movs	r3, #3
 800d030:	e1ca      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d032:	bf00      	nop
 800d034:	40021000 	.word	0x40021000
 800d038:	20000074 	.word	0x20000074
 800d03c:	4b8c      	ldr	r3, [pc, #560]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d03e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d042:	f003 0302 	and.w	r3, r3, #2
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1ea      	bne.n	800d020 <HAL_RCC_OscConfig+0x268>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0304 	and.w	r3, r3, #4
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 80a6 	beq.w	800d1a4 <HAL_RCC_OscConfig+0x3ec>
 800d058:	2300      	movs	r3, #0
 800d05a:	77fb      	strb	r3, [r7, #31]
 800d05c:	4b84      	ldr	r3, [pc, #528]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <HAL_RCC_OscConfig+0x2b4>
 800d068:	2301      	movs	r3, #1
 800d06a:	e000      	b.n	800d06e <HAL_RCC_OscConfig+0x2b6>
 800d06c:	2300      	movs	r3, #0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00d      	beq.n	800d08e <HAL_RCC_OscConfig+0x2d6>
 800d072:	4b7f      	ldr	r3, [pc, #508]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d076:	4a7e      	ldr	r2, [pc, #504]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d07c:	6593      	str	r3, [r2, #88]	; 0x58
 800d07e:	4b7c      	ldr	r3, [pc, #496]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2301      	movs	r3, #1
 800d08c:	77fb      	strb	r3, [r7, #31]
 800d08e:	4b79      	ldr	r3, [pc, #484]	; (800d274 <HAL_RCC_OscConfig+0x4bc>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d096:	2b00      	cmp	r3, #0
 800d098:	d118      	bne.n	800d0cc <HAL_RCC_OscConfig+0x314>
 800d09a:	4b76      	ldr	r3, [pc, #472]	; (800d274 <HAL_RCC_OscConfig+0x4bc>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a75      	ldr	r2, [pc, #468]	; (800d274 <HAL_RCC_OscConfig+0x4bc>)
 800d0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	f7fd f931 	bl	800a30c <HAL_GetTick>
 800d0aa:	6138      	str	r0, [r7, #16]
 800d0ac:	e008      	b.n	800d0c0 <HAL_RCC_OscConfig+0x308>
 800d0ae:	f7fd f92d 	bl	800a30c <HAL_GetTick>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d901      	bls.n	800d0c0 <HAL_RCC_OscConfig+0x308>
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e183      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d0c0:	4b6c      	ldr	r3, [pc, #432]	; (800d274 <HAL_RCC_OscConfig+0x4bc>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d0f0      	beq.n	800d0ae <HAL_RCC_OscConfig+0x2f6>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d108      	bne.n	800d0e6 <HAL_RCC_OscConfig+0x32e>
 800d0d4:	4b66      	ldr	r3, [pc, #408]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0da:	4a65      	ldr	r2, [pc, #404]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d0dc:	f043 0301 	orr.w	r3, r3, #1
 800d0e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d0e4:	e024      	b.n	800d130 <HAL_RCC_OscConfig+0x378>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	2b05      	cmp	r3, #5
 800d0ec:	d110      	bne.n	800d110 <HAL_RCC_OscConfig+0x358>
 800d0ee:	4b60      	ldr	r3, [pc, #384]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0f4:	4a5e      	ldr	r2, [pc, #376]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d0f6:	f043 0304 	orr.w	r3, r3, #4
 800d0fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d0fe:	4b5c      	ldr	r3, [pc, #368]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d104:	4a5a      	ldr	r2, [pc, #360]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d10e:	e00f      	b.n	800d130 <HAL_RCC_OscConfig+0x378>
 800d110:	4b57      	ldr	r3, [pc, #348]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d116:	4a56      	ldr	r2, [pc, #344]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d118:	f023 0301 	bic.w	r3, r3, #1
 800d11c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d120:	4b53      	ldr	r3, [pc, #332]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d126:	4a52      	ldr	r2, [pc, #328]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d128:	f023 0304 	bic.w	r3, r3, #4
 800d12c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d016      	beq.n	800d166 <HAL_RCC_OscConfig+0x3ae>
 800d138:	f7fd f8e8 	bl	800a30c <HAL_GetTick>
 800d13c:	6138      	str	r0, [r7, #16]
 800d13e:	e00a      	b.n	800d156 <HAL_RCC_OscConfig+0x39e>
 800d140:	f7fd f8e4 	bl	800a30c <HAL_GetTick>
 800d144:	4602      	mov	r2, r0
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d14e:	4293      	cmp	r3, r2
 800d150:	d901      	bls.n	800d156 <HAL_RCC_OscConfig+0x39e>
 800d152:	2303      	movs	r3, #3
 800d154:	e138      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d156:	4b46      	ldr	r3, [pc, #280]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d15c:	f003 0302 	and.w	r3, r3, #2
 800d160:	2b00      	cmp	r3, #0
 800d162:	d0ed      	beq.n	800d140 <HAL_RCC_OscConfig+0x388>
 800d164:	e015      	b.n	800d192 <HAL_RCC_OscConfig+0x3da>
 800d166:	f7fd f8d1 	bl	800a30c <HAL_GetTick>
 800d16a:	6138      	str	r0, [r7, #16]
 800d16c:	e00a      	b.n	800d184 <HAL_RCC_OscConfig+0x3cc>
 800d16e:	f7fd f8cd 	bl	800a30c <HAL_GetTick>
 800d172:	4602      	mov	r2, r0
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	f241 3288 	movw	r2, #5000	; 0x1388
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d901      	bls.n	800d184 <HAL_RCC_OscConfig+0x3cc>
 800d180:	2303      	movs	r3, #3
 800d182:	e121      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d184:	4b3a      	ldr	r3, [pc, #232]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18a:	f003 0302 	and.w	r3, r3, #2
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1ed      	bne.n	800d16e <HAL_RCC_OscConfig+0x3b6>
 800d192:	7ffb      	ldrb	r3, [r7, #31]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d105      	bne.n	800d1a4 <HAL_RCC_OscConfig+0x3ec>
 800d198:	4b35      	ldr	r3, [pc, #212]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d19c:	4a34      	ldr	r2, [pc, #208]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d19e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1a2:	6593      	str	r3, [r2, #88]	; 0x58
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 0320 	and.w	r3, r3, #32
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d03c      	beq.n	800d22a <HAL_RCC_OscConfig+0x472>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d01c      	beq.n	800d1f2 <HAL_RCC_OscConfig+0x43a>
 800d1b8:	4b2d      	ldr	r3, [pc, #180]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d1ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d1be:	4a2c      	ldr	r2, [pc, #176]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d1c0:	f043 0301 	orr.w	r3, r3, #1
 800d1c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800d1c8:	f7fd f8a0 	bl	800a30c <HAL_GetTick>
 800d1cc:	6138      	str	r0, [r7, #16]
 800d1ce:	e008      	b.n	800d1e2 <HAL_RCC_OscConfig+0x42a>
 800d1d0:	f7fd f89c 	bl	800a30c <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d901      	bls.n	800d1e2 <HAL_RCC_OscConfig+0x42a>
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e0f2      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d1e2:	4b23      	ldr	r3, [pc, #140]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d1e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d1e8:	f003 0302 	and.w	r3, r3, #2
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d0ef      	beq.n	800d1d0 <HAL_RCC_OscConfig+0x418>
 800d1f0:	e01b      	b.n	800d22a <HAL_RCC_OscConfig+0x472>
 800d1f2:	4b1f      	ldr	r3, [pc, #124]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d1f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d1f8:	4a1d      	ldr	r2, [pc, #116]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d1fa:	f023 0301 	bic.w	r3, r3, #1
 800d1fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800d202:	f7fd f883 	bl	800a30c <HAL_GetTick>
 800d206:	6138      	str	r0, [r7, #16]
 800d208:	e008      	b.n	800d21c <HAL_RCC_OscConfig+0x464>
 800d20a:	f7fd f87f 	bl	800a30c <HAL_GetTick>
 800d20e:	4602      	mov	r2, r0
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	1ad3      	subs	r3, r2, r3
 800d214:	2b02      	cmp	r3, #2
 800d216:	d901      	bls.n	800d21c <HAL_RCC_OscConfig+0x464>
 800d218:	2303      	movs	r3, #3
 800d21a:	e0d5      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d21c:	4b14      	ldr	r3, [pc, #80]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d21e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1ef      	bne.n	800d20a <HAL_RCC_OscConfig+0x452>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	69db      	ldr	r3, [r3, #28]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 80c9 	beq.w	800d3c6 <HAL_RCC_OscConfig+0x60e>
 800d234:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f003 030c 	and.w	r3, r3, #12
 800d23c:	2b0c      	cmp	r3, #12
 800d23e:	f000 8083 	beq.w	800d348 <HAL_RCC_OscConfig+0x590>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	69db      	ldr	r3, [r3, #28]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d15e      	bne.n	800d308 <HAL_RCC_OscConfig+0x550>
 800d24a:	4b09      	ldr	r3, [pc, #36]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a08      	ldr	r2, [pc, #32]	; (800d270 <HAL_RCC_OscConfig+0x4b8>)
 800d250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	f7fd f859 	bl	800a30c <HAL_GetTick>
 800d25a:	6138      	str	r0, [r7, #16]
 800d25c:	e00c      	b.n	800d278 <HAL_RCC_OscConfig+0x4c0>
 800d25e:	f7fd f855 	bl	800a30c <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d905      	bls.n	800d278 <HAL_RCC_OscConfig+0x4c0>
 800d26c:	2303      	movs	r3, #3
 800d26e:	e0ab      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d270:	40021000 	.word	0x40021000
 800d274:	40007000 	.word	0x40007000
 800d278:	4b55      	ldr	r3, [pc, #340]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1ec      	bne.n	800d25e <HAL_RCC_OscConfig+0x4a6>
 800d284:	4b52      	ldr	r3, [pc, #328]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d286:	68da      	ldr	r2, [r3, #12]
 800d288:	4b52      	ldr	r3, [pc, #328]	; (800d3d4 <HAL_RCC_OscConfig+0x61c>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6a11      	ldr	r1, [r2, #32]
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d294:	3a01      	subs	r2, #1
 800d296:	0112      	lsls	r2, r2, #4
 800d298:	4311      	orrs	r1, r2
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d29e:	0212      	lsls	r2, r2, #8
 800d2a0:	4311      	orrs	r1, r2
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d2a6:	0852      	lsrs	r2, r2, #1
 800d2a8:	3a01      	subs	r2, #1
 800d2aa:	0552      	lsls	r2, r2, #21
 800d2ac:	4311      	orrs	r1, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d2b2:	0852      	lsrs	r2, r2, #1
 800d2b4:	3a01      	subs	r2, #1
 800d2b6:	0652      	lsls	r2, r2, #25
 800d2b8:	4311      	orrs	r1, r2
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d2be:	06d2      	lsls	r2, r2, #27
 800d2c0:	430a      	orrs	r2, r1
 800d2c2:	4943      	ldr	r1, [pc, #268]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60cb      	str	r3, [r1, #12]
 800d2c8:	4b41      	ldr	r3, [pc, #260]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a40      	ldr	r2, [pc, #256]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d2ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2d2:	6013      	str	r3, [r2, #0]
 800d2d4:	4b3e      	ldr	r3, [pc, #248]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	4a3d      	ldr	r2, [pc, #244]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d2da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2de:	60d3      	str	r3, [r2, #12]
 800d2e0:	f7fd f814 	bl	800a30c <HAL_GetTick>
 800d2e4:	6138      	str	r0, [r7, #16]
 800d2e6:	e008      	b.n	800d2fa <HAL_RCC_OscConfig+0x542>
 800d2e8:	f7fd f810 	bl	800a30c <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d901      	bls.n	800d2fa <HAL_RCC_OscConfig+0x542>
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	e066      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d2fa:	4b35      	ldr	r3, [pc, #212]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0f0      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x530>
 800d306:	e05e      	b.n	800d3c6 <HAL_RCC_OscConfig+0x60e>
 800d308:	4b31      	ldr	r3, [pc, #196]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a30      	ldr	r2, [pc, #192]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d30e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d312:	6013      	str	r3, [r2, #0]
 800d314:	f7fc fffa 	bl	800a30c <HAL_GetTick>
 800d318:	6138      	str	r0, [r7, #16]
 800d31a:	e008      	b.n	800d32e <HAL_RCC_OscConfig+0x576>
 800d31c:	f7fc fff6 	bl	800a30c <HAL_GetTick>
 800d320:	4602      	mov	r2, r0
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	2b02      	cmp	r3, #2
 800d328:	d901      	bls.n	800d32e <HAL_RCC_OscConfig+0x576>
 800d32a:	2303      	movs	r3, #3
 800d32c:	e04c      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d32e:	4b28      	ldr	r3, [pc, #160]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1f0      	bne.n	800d31c <HAL_RCC_OscConfig+0x564>
 800d33a:	4b25      	ldr	r3, [pc, #148]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	4924      	ldr	r1, [pc, #144]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d340:	4b25      	ldr	r3, [pc, #148]	; (800d3d8 <HAL_RCC_OscConfig+0x620>)
 800d342:	4013      	ands	r3, r2
 800d344:	60cb      	str	r3, [r1, #12]
 800d346:	e03e      	b.n	800d3c6 <HAL_RCC_OscConfig+0x60e>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	69db      	ldr	r3, [r3, #28]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d101      	bne.n	800d354 <HAL_RCC_OscConfig+0x59c>
 800d350:	2301      	movs	r3, #1
 800d352:	e039      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d354:	4b1e      	ldr	r3, [pc, #120]	; (800d3d0 <HAL_RCC_OscConfig+0x618>)
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f003 0203 	and.w	r2, r3, #3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a1b      	ldr	r3, [r3, #32]
 800d364:	429a      	cmp	r2, r3
 800d366:	d12c      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x60a>
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	3b01      	subs	r3, #1
 800d374:	011b      	lsls	r3, r3, #4
 800d376:	429a      	cmp	r2, r3
 800d378:	d123      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x60a>
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d384:	021b      	lsls	r3, r3, #8
 800d386:	429a      	cmp	r2, r3
 800d388:	d11b      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x60a>
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	06db      	lsls	r3, r3, #27
 800d396:	429a      	cmp	r2, r3
 800d398:	d113      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x60a>
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a4:	085b      	lsrs	r3, r3, #1
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	055b      	lsls	r3, r3, #21
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d109      	bne.n	800d3c2 <HAL_RCC_OscConfig+0x60a>
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b8:	085b      	lsrs	r3, r3, #1
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	065b      	lsls	r3, r3, #25
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d001      	beq.n	800d3c6 <HAL_RCC_OscConfig+0x60e>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e000      	b.n	800d3c8 <HAL_RCC_OscConfig+0x610>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3720      	adds	r7, #32
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	40021000 	.word	0x40021000
 800d3d4:	019f800c 	.word	0x019f800c
 800d3d8:	feeefffc 	.word	0xfeeefffc

0800d3dc <HAL_RCC_ClockConfig>:
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <HAL_RCC_ClockConfig+0x18>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e11e      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d3f4:	4b91      	ldr	r3, [pc, #580]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d910      	bls.n	800d424 <HAL_RCC_ClockConfig+0x48>
 800d402:	4b8e      	ldr	r3, [pc, #568]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f023 020f 	bic.w	r2, r3, #15
 800d40a:	498c      	ldr	r1, [pc, #560]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	4313      	orrs	r3, r2
 800d410:	600b      	str	r3, [r1, #0]
 800d412:	4b8a      	ldr	r3, [pc, #552]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 030f 	and.w	r3, r3, #15
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d001      	beq.n	800d424 <HAL_RCC_ClockConfig+0x48>
 800d420:	2301      	movs	r3, #1
 800d422:	e106      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d073      	beq.n	800d518 <HAL_RCC_ClockConfig+0x13c>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b03      	cmp	r3, #3
 800d436:	d129      	bne.n	800d48c <HAL_RCC_ClockConfig+0xb0>
 800d438:	4b81      	ldr	r3, [pc, #516]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <HAL_RCC_ClockConfig+0x6c>
 800d444:	2301      	movs	r3, #1
 800d446:	e0f4      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d448:	f000 f99e 	bl	800d788 <RCC_GetSysClockFreqFromPLLSource>
 800d44c:	6138      	str	r0, [r7, #16]
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	4a7c      	ldr	r2, [pc, #496]	; (800d644 <HAL_RCC_ClockConfig+0x268>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d93f      	bls.n	800d4d6 <HAL_RCC_ClockConfig+0xfa>
 800d456:	4b7a      	ldr	r3, [pc, #488]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <HAL_RCC_ClockConfig+0x9a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 0302 	and.w	r3, r3, #2
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d033      	beq.n	800d4d6 <HAL_RCC_ClockConfig+0xfa>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d12f      	bne.n	800d4d6 <HAL_RCC_ClockConfig+0xfa>
 800d476:	4b72      	ldr	r3, [pc, #456]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d47e:	4a70      	ldr	r2, [pc, #448]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d484:	6093      	str	r3, [r2, #8]
 800d486:	2380      	movs	r3, #128	; 0x80
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e024      	b.n	800d4d6 <HAL_RCC_ClockConfig+0xfa>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	2b02      	cmp	r3, #2
 800d492:	d107      	bne.n	800d4a4 <HAL_RCC_ClockConfig+0xc8>
 800d494:	4b6a      	ldr	r3, [pc, #424]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d109      	bne.n	800d4b4 <HAL_RCC_ClockConfig+0xd8>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e0c6      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d4a4:	4b66      	ldr	r3, [pc, #408]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <HAL_RCC_ClockConfig+0xd8>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e0be      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d4b4:	f000 f8ce 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 800d4b8:	6138      	str	r0, [r7, #16]
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	4a61      	ldr	r2, [pc, #388]	; (800d644 <HAL_RCC_ClockConfig+0x268>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d909      	bls.n	800d4d6 <HAL_RCC_ClockConfig+0xfa>
 800d4c2:	4b5f      	ldr	r3, [pc, #380]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4ca:	4a5d      	ldr	r2, [pc, #372]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d0:	6093      	str	r3, [r2, #8]
 800d4d2:	2380      	movs	r3, #128	; 0x80
 800d4d4:	617b      	str	r3, [r7, #20]
 800d4d6:	4b5a      	ldr	r3, [pc, #360]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	f023 0203 	bic.w	r2, r3, #3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	4957      	ldr	r1, [pc, #348]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	608b      	str	r3, [r1, #8]
 800d4e8:	f7fc ff10 	bl	800a30c <HAL_GetTick>
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	e00a      	b.n	800d506 <HAL_RCC_ClockConfig+0x12a>
 800d4f0:	f7fc ff0c 	bl	800a30c <HAL_GetTick>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d901      	bls.n	800d506 <HAL_RCC_ClockConfig+0x12a>
 800d502:	2303      	movs	r3, #3
 800d504:	e095      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d506:	4b4e      	ldr	r3, [pc, #312]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	f003 020c 	and.w	r2, r3, #12
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	429a      	cmp	r2, r3
 800d516:	d1eb      	bne.n	800d4f0 <HAL_RCC_ClockConfig+0x114>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d023      	beq.n	800d56c <HAL_RCC_ClockConfig+0x190>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 0304 	and.w	r3, r3, #4
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d005      	beq.n	800d53c <HAL_RCC_ClockConfig+0x160>
 800d530:	4b43      	ldr	r3, [pc, #268]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	4a42      	ldr	r2, [pc, #264]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d53a:	6093      	str	r3, [r2, #8]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 0308 	and.w	r3, r3, #8
 800d544:	2b00      	cmp	r3, #0
 800d546:	d007      	beq.n	800d558 <HAL_RCC_ClockConfig+0x17c>
 800d548:	4b3d      	ldr	r3, [pc, #244]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d550:	4a3b      	ldr	r2, [pc, #236]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d556:	6093      	str	r3, [r2, #8]
 800d558:	4b39      	ldr	r3, [pc, #228]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	4936      	ldr	r1, [pc, #216]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d566:	4313      	orrs	r3, r2
 800d568:	608b      	str	r3, [r1, #8]
 800d56a:	e008      	b.n	800d57e <HAL_RCC_ClockConfig+0x1a2>
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	2b80      	cmp	r3, #128	; 0x80
 800d570:	d105      	bne.n	800d57e <HAL_RCC_ClockConfig+0x1a2>
 800d572:	4b33      	ldr	r3, [pc, #204]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	4a32      	ldr	r2, [pc, #200]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d57c:	6093      	str	r3, [r2, #8]
 800d57e:	4b2f      	ldr	r3, [pc, #188]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 030f 	and.w	r3, r3, #15
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d21d      	bcs.n	800d5c8 <HAL_RCC_ClockConfig+0x1ec>
 800d58c:	4b2b      	ldr	r3, [pc, #172]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f023 020f 	bic.w	r2, r3, #15
 800d594:	4929      	ldr	r1, [pc, #164]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	4313      	orrs	r3, r2
 800d59a:	600b      	str	r3, [r1, #0]
 800d59c:	f7fc feb6 	bl	800a30c <HAL_GetTick>
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	e00a      	b.n	800d5ba <HAL_RCC_ClockConfig+0x1de>
 800d5a4:	f7fc feb2 	bl	800a30c <HAL_GetTick>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d901      	bls.n	800d5ba <HAL_RCC_ClockConfig+0x1de>
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e03b      	b.n	800d632 <HAL_RCC_ClockConfig+0x256>
 800d5ba:	4b20      	ldr	r3, [pc, #128]	; (800d63c <HAL_RCC_ClockConfig+0x260>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 030f 	and.w	r3, r3, #15
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d1ed      	bne.n	800d5a4 <HAL_RCC_ClockConfig+0x1c8>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d008      	beq.n	800d5e6 <HAL_RCC_ClockConfig+0x20a>
 800d5d4:	4b1a      	ldr	r3, [pc, #104]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	4917      	ldr	r1, [pc, #92]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	608b      	str	r3, [r1, #8]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f003 0308 	and.w	r3, r3, #8
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d009      	beq.n	800d606 <HAL_RCC_ClockConfig+0x22a>
 800d5f2:	4b13      	ldr	r3, [pc, #76]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	490f      	ldr	r1, [pc, #60]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d602:	4313      	orrs	r3, r2
 800d604:	608b      	str	r3, [r1, #8]
 800d606:	f000 f825 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 800d60a:	4602      	mov	r2, r0
 800d60c:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <HAL_RCC_ClockConfig+0x264>)
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	091b      	lsrs	r3, r3, #4
 800d612:	f003 030f 	and.w	r3, r3, #15
 800d616:	490c      	ldr	r1, [pc, #48]	; (800d648 <HAL_RCC_ClockConfig+0x26c>)
 800d618:	5ccb      	ldrb	r3, [r1, r3]
 800d61a:	f003 031f 	and.w	r3, r3, #31
 800d61e:	fa22 f303 	lsr.w	r3, r2, r3
 800d622:	4a0a      	ldr	r2, [pc, #40]	; (800d64c <HAL_RCC_ClockConfig+0x270>)
 800d624:	6013      	str	r3, [r2, #0]
 800d626:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <HAL_RCC_ClockConfig+0x274>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fc fe22 	bl	800a274 <HAL_InitTick>
 800d630:	4603      	mov	r3, r0
 800d632:	4618      	mov	r0, r3
 800d634:	3718      	adds	r7, #24
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	40022000 	.word	0x40022000
 800d640:	40021000 	.word	0x40021000
 800d644:	04c4b400 	.word	0x04c4b400
 800d648:	080182f8 	.word	0x080182f8
 800d64c:	20000070 	.word	0x20000070
 800d650:	20000074 	.word	0x20000074

0800d654 <HAL_RCC_GetSysClockFreq>:
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4b2c      	ldr	r3, [pc, #176]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	f003 030c 	and.w	r3, r3, #12
 800d662:	2b04      	cmp	r3, #4
 800d664:	d102      	bne.n	800d66c <HAL_RCC_GetSysClockFreq+0x18>
 800d666:	4b2a      	ldr	r3, [pc, #168]	; (800d710 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	e047      	b.n	800d6fc <HAL_RCC_GetSysClockFreq+0xa8>
 800d66c:	4b27      	ldr	r3, [pc, #156]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	f003 030c 	and.w	r3, r3, #12
 800d674:	2b08      	cmp	r3, #8
 800d676:	d102      	bne.n	800d67e <HAL_RCC_GetSysClockFreq+0x2a>
 800d678:	4b26      	ldr	r3, [pc, #152]	; (800d714 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d67a:	613b      	str	r3, [r7, #16]
 800d67c:	e03e      	b.n	800d6fc <HAL_RCC_GetSysClockFreq+0xa8>
 800d67e:	4b23      	ldr	r3, [pc, #140]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	f003 030c 	and.w	r3, r3, #12
 800d686:	2b0c      	cmp	r3, #12
 800d688:	d136      	bne.n	800d6f8 <HAL_RCC_GetSysClockFreq+0xa4>
 800d68a:	4b20      	ldr	r3, [pc, #128]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f003 0303 	and.w	r3, r3, #3
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	4b1d      	ldr	r3, [pc, #116]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	091b      	lsrs	r3, r3, #4
 800d69a:	f003 030f 	and.w	r3, r3, #15
 800d69e:	3301      	adds	r3, #1
 800d6a0:	60bb      	str	r3, [r7, #8]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d10c      	bne.n	800d6c2 <HAL_RCC_GetSysClockFreq+0x6e>
 800d6a8:	4a1a      	ldr	r2, [pc, #104]	; (800d714 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6b0:	4a16      	ldr	r2, [pc, #88]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d6b2:	68d2      	ldr	r2, [r2, #12]
 800d6b4:	0a12      	lsrs	r2, r2, #8
 800d6b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d6ba:	fb02 f303 	mul.w	r3, r2, r3
 800d6be:	617b      	str	r3, [r7, #20]
 800d6c0:	e00c      	b.n	800d6dc <HAL_RCC_GetSysClockFreq+0x88>
 800d6c2:	4a13      	ldr	r2, [pc, #76]	; (800d710 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ca:	4a10      	ldr	r2, [pc, #64]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d6cc:	68d2      	ldr	r2, [r2, #12]
 800d6ce:	0a12      	lsrs	r2, r2, #8
 800d6d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d6d4:	fb02 f303 	mul.w	r3, r2, r3
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	bf00      	nop
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	0e5b      	lsrs	r3, r3, #25
 800d6e2:	f003 0303 	and.w	r3, r3, #3
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	607b      	str	r3, [r7, #4]
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f4:	613b      	str	r3, [r7, #16]
 800d6f6:	e001      	b.n	800d6fc <HAL_RCC_GetSysClockFreq+0xa8>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	613b      	str	r3, [r7, #16]
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	4618      	mov	r0, r3
 800d700:	371c      	adds	r7, #28
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	40021000 	.word	0x40021000
 800d710:	00f42400 	.word	0x00f42400
 800d714:	007a1200 	.word	0x007a1200

0800d718 <HAL_RCC_GetHCLKFreq>:
 800d718:	b480      	push	{r7}
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	4b03      	ldr	r3, [pc, #12]	; (800d72c <HAL_RCC_GetHCLKFreq+0x14>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000070 	.word	0x20000070

0800d730 <HAL_RCC_GetPCLK1Freq>:
 800d730:	b580      	push	{r7, lr}
 800d732:	af00      	add	r7, sp, #0
 800d734:	f7ff fff0 	bl	800d718 <HAL_RCC_GetHCLKFreq>
 800d738:	4602      	mov	r2, r0
 800d73a:	4b06      	ldr	r3, [pc, #24]	; (800d754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	0a1b      	lsrs	r3, r3, #8
 800d740:	f003 0307 	and.w	r3, r3, #7
 800d744:	4904      	ldr	r1, [pc, #16]	; (800d758 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d746:	5ccb      	ldrb	r3, [r1, r3]
 800d748:	f003 031f 	and.w	r3, r3, #31
 800d74c:	fa22 f303 	lsr.w	r3, r2, r3
 800d750:	4618      	mov	r0, r3
 800d752:	bd80      	pop	{r7, pc}
 800d754:	40021000 	.word	0x40021000
 800d758:	08018308 	.word	0x08018308

0800d75c <HAL_RCC_GetPCLK2Freq>:
 800d75c:	b580      	push	{r7, lr}
 800d75e:	af00      	add	r7, sp, #0
 800d760:	f7ff ffda 	bl	800d718 <HAL_RCC_GetHCLKFreq>
 800d764:	4602      	mov	r2, r0
 800d766:	4b06      	ldr	r3, [pc, #24]	; (800d780 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	0adb      	lsrs	r3, r3, #11
 800d76c:	f003 0307 	and.w	r3, r3, #7
 800d770:	4904      	ldr	r1, [pc, #16]	; (800d784 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d772:	5ccb      	ldrb	r3, [r1, r3]
 800d774:	f003 031f 	and.w	r3, r3, #31
 800d778:	fa22 f303 	lsr.w	r3, r2, r3
 800d77c:	4618      	mov	r0, r3
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	40021000 	.word	0x40021000
 800d784:	08018308 	.word	0x08018308

0800d788 <RCC_GetSysClockFreqFromPLLSource>:
 800d788:	b480      	push	{r7}
 800d78a:	b087      	sub	sp, #28
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4b1e      	ldr	r3, [pc, #120]	; (800d808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	f003 0303 	and.w	r3, r3, #3
 800d796:	613b      	str	r3, [r7, #16]
 800d798:	4b1b      	ldr	r3, [pc, #108]	; (800d808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	091b      	lsrs	r3, r3, #4
 800d79e:	f003 030f 	and.w	r3, r3, #15
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	d10c      	bne.n	800d7c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
 800d7ac:	4a17      	ldr	r2, [pc, #92]	; (800d80c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7b4:	4a14      	ldr	r2, [pc, #80]	; (800d808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d7b6:	68d2      	ldr	r2, [r2, #12]
 800d7b8:	0a12      	lsrs	r2, r2, #8
 800d7ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7be:	fb02 f303 	mul.w	r3, r2, r3
 800d7c2:	617b      	str	r3, [r7, #20]
 800d7c4:	e00c      	b.n	800d7e0 <RCC_GetSysClockFreqFromPLLSource+0x58>
 800d7c6:	4a12      	ldr	r2, [pc, #72]	; (800d810 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ce:	4a0e      	ldr	r2, [pc, #56]	; (800d808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d7d0:	68d2      	ldr	r2, [r2, #12]
 800d7d2:	0a12      	lsrs	r2, r2, #8
 800d7d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7d8:	fb02 f303 	mul.w	r3, r2, r3
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	bf00      	nop
 800d7e0:	4b09      	ldr	r3, [pc, #36]	; (800d808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	0e5b      	lsrs	r3, r3, #25
 800d7e6:	f003 0303 	and.w	r3, r3, #3
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	60bb      	str	r3, [r7, #8]
 800d7f0:	697a      	ldr	r2, [r7, #20]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f8:	607b      	str	r3, [r7, #4]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	371c      	adds	r7, #28
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	40021000 	.word	0x40021000
 800d80c:	007a1200 	.word	0x007a1200
 800d810:	00f42400 	.word	0x00f42400

0800d814 <HAL_RCCEx_PeriphCLKConfig>:
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	2300      	movs	r3, #0
 800d81e:	74fb      	strb	r3, [r7, #19]
 800d820:	2300      	movs	r3, #0
 800d822:	74bb      	strb	r3, [r7, #18]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 8098 	beq.w	800d962 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d832:	2300      	movs	r3, #0
 800d834:	747b      	strb	r3, [r7, #17]
 800d836:	4b43      	ldr	r3, [pc, #268]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d83a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10d      	bne.n	800d85e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800d842:	4b40      	ldr	r3, [pc, #256]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d846:	4a3f      	ldr	r2, [pc, #252]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d84c:	6593      	str	r3, [r2, #88]	; 0x58
 800d84e:	4b3d      	ldr	r3, [pc, #244]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d856:	60bb      	str	r3, [r7, #8]
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2301      	movs	r3, #1
 800d85c:	747b      	strb	r3, [r7, #17]
 800d85e:	4b3a      	ldr	r3, [pc, #232]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a39      	ldr	r2, [pc, #228]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d868:	6013      	str	r3, [r2, #0]
 800d86a:	f7fc fd4f 	bl	800a30c <HAL_GetTick>
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	e009      	b.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d872:	f7fc fd4b 	bl	800a30c <HAL_GetTick>
 800d876:	4602      	mov	r2, r0
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d902      	bls.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d880:	2303      	movs	r3, #3
 800d882:	74fb      	strb	r3, [r7, #19]
 800d884:	e005      	b.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800d886:	4b30      	ldr	r3, [pc, #192]	; (800d948 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0ef      	beq.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800d892:	7cfb      	ldrb	r3, [r7, #19]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d159      	bne.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x138>
 800d898:	4b2a      	ldr	r3, [pc, #168]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d89e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01e      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d019      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d8b4:	4b23      	ldr	r3, [pc, #140]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8be:	617b      	str	r3, [r7, #20]
 800d8c0:	4b20      	ldr	r3, [pc, #128]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c6:	4a1f      	ldr	r2, [pc, #124]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8d0:	4b1c      	ldr	r3, [pc, #112]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8d6:	4a1b      	ldr	r2, [pc, #108]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8e0:	4a18      	ldr	r2, [pc, #96]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d016      	beq.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d8f2:	f7fc fd0b 	bl	800a30c <HAL_GetTick>
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	e00b      	b.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d8fa:	f7fc fd07 	bl	800a30c <HAL_GetTick>
 800d8fe:	4602      	mov	r2, r0
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	f241 3288 	movw	r2, #5000	; 0x1388
 800d908:	4293      	cmp	r3, r2
 800d90a:	d902      	bls.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d90c:	2303      	movs	r3, #3
 800d90e:	74fb      	strb	r3, [r7, #19]
 800d910:	e006      	b.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d912:	4b0c      	ldr	r3, [pc, #48]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d918:	f003 0302 	and.w	r3, r3, #2
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0ec      	beq.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800d920:	7cfb      	ldrb	r3, [r7, #19]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10b      	bne.n	800d93e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800d926:	4b07      	ldr	r3, [pc, #28]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d92c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d934:	4903      	ldr	r1, [pc, #12]	; (800d944 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d936:	4313      	orrs	r3, r2
 800d938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d93c:	e008      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d93e:	7cfb      	ldrb	r3, [r7, #19]
 800d940:	74bb      	strb	r3, [r7, #18]
 800d942:	e005      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d944:	40021000 	.word	0x40021000
 800d948:	40007000 	.word	0x40007000
 800d94c:	7cfb      	ldrb	r3, [r7, #19]
 800d94e:	74bb      	strb	r3, [r7, #18]
 800d950:	7c7b      	ldrb	r3, [r7, #17]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d105      	bne.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d956:	4ba7      	ldr	r3, [pc, #668]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d95a:	4aa6      	ldr	r2, [pc, #664]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d95c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d960:	6593      	str	r3, [r2, #88]	; 0x58
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800d96e:	4ba1      	ldr	r3, [pc, #644]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d974:	f023 0203 	bic.w	r2, r3, #3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	499d      	ldr	r1, [pc, #628]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d97e:	4313      	orrs	r3, r2
 800d980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0302 	and.w	r3, r3, #2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00a      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800d990:	4b98      	ldr	r3, [pc, #608]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d996:	f023 020c 	bic.w	r2, r3, #12
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	4995      	ldr	r1, [pc, #596]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f003 0304 	and.w	r3, r3, #4
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00a      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800d9b2:	4b90      	ldr	r3, [pc, #576]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	498c      	ldr	r1, [pc, #560]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 0308 	and.w	r3, r3, #8
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00a      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800d9d4:	4b87      	ldr	r3, [pc, #540]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	4984      	ldr	r1, [pc, #528]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f003 0310 	and.w	r3, r3, #16
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00a      	beq.n	800da0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800d9f6:	4b7f      	ldr	r3, [pc, #508]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	695b      	ldr	r3, [r3, #20]
 800da04:	497b      	ldr	r1, [pc, #492]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da06:	4313      	orrs	r3, r2
 800da08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f003 0320 	and.w	r3, r3, #32
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00a      	beq.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800da18:	4b76      	ldr	r3, [pc, #472]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	4973      	ldr	r1, [pc, #460]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da28:	4313      	orrs	r3, r2
 800da2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00a      	beq.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800da3a:	4b6e      	ldr	r3, [pc, #440]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	69db      	ldr	r3, [r3, #28]
 800da48:	496a      	ldr	r1, [pc, #424]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da4a:	4313      	orrs	r3, r2
 800da4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00a      	beq.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800da5c:	4b65      	ldr	r3, [pc, #404]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	4962      	ldr	r1, [pc, #392]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da6c:	4313      	orrs	r3, r2
 800da6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00a      	beq.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800da7e:	4b5d      	ldr	r3, [pc, #372]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	4959      	ldr	r1, [pc, #356]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da8e:	4313      	orrs	r3, r2
 800da90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00a      	beq.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800daa0:	4b54      	ldr	r3, [pc, #336]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800daa6:	f023 0203 	bic.w	r2, r3, #3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daae:	4951      	ldr	r1, [pc, #324]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dab0:	4313      	orrs	r3, r2
 800dab2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00a      	beq.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800dac2:	4b4c      	ldr	r3, [pc, #304]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad0:	4948      	ldr	r1, [pc, #288]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d015      	beq.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800dae4:	4b43      	ldr	r3, [pc, #268]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf2:	4940      	ldr	r1, [pc, #256]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daf4:	4313      	orrs	r3, r2
 800daf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db02:	d105      	bne.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800db04:	4b3b      	ldr	r3, [pc, #236]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	4a3a      	ldr	r2, [pc, #232]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db0e:	60d3      	str	r3, [r2, #12]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d015      	beq.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800db1c:	4b35      	ldr	r3, [pc, #212]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2a:	4932      	ldr	r1, [pc, #200]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db2c:	4313      	orrs	r3, r2
 800db2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db3a:	d105      	bne.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800db3c:	4b2d      	ldr	r3, [pc, #180]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	4a2c      	ldr	r2, [pc, #176]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db46:	60d3      	str	r3, [r2, #12]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d015      	beq.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800db54:	4b27      	ldr	r3, [pc, #156]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db62:	4924      	ldr	r1, [pc, #144]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db64:	4313      	orrs	r3, r2
 800db66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800db72:	d105      	bne.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800db74:	4b1f      	ldr	r3, [pc, #124]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	4a1e      	ldr	r2, [pc, #120]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db7e:	60d3      	str	r3, [r2, #12]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d015      	beq.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800db8c:	4b19      	ldr	r3, [pc, #100]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db9a:	4916      	ldr	r1, [pc, #88]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db9c:	4313      	orrs	r3, r2
 800db9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dbaa:	d105      	bne.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800dbac:	4b11      	ldr	r3, [pc, #68]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4a10      	ldr	r2, [pc, #64]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbb6:	60d3      	str	r3, [r2, #12]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d019      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dbc4:	4b0b      	ldr	r3, [pc, #44]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	4908      	ldr	r1, [pc, #32]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dbe2:	d109      	bne.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dbe4:	4b03      	ldr	r3, [pc, #12]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	4a02      	ldr	r2, [pc, #8]	; (800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbee:	60d3      	str	r3, [r2, #12]
 800dbf0:	e002      	b.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dbf2:	bf00      	nop
 800dbf4:	40021000 	.word	0x40021000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d015      	beq.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800dc04:	4b29      	ldr	r3, [pc, #164]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc12:	4926      	ldr	r1, [pc, #152]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc14:	4313      	orrs	r3, r2
 800dc16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc22:	d105      	bne.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800dc24:	4b21      	ldr	r3, [pc, #132]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	4a20      	ldr	r2, [pc, #128]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc2e:	60d3      	str	r3, [r2, #12]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d015      	beq.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800dc3c:	4b1b      	ldr	r3, [pc, #108]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc42:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc4a:	4918      	ldr	r1, [pc, #96]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc5a:	d105      	bne.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800dc5c:	4b13      	ldr	r3, [pc, #76]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	4a12      	ldr	r2, [pc, #72]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc66:	60d3      	str	r3, [r2, #12]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d015      	beq.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800dc74:	4b0d      	ldr	r3, [pc, #52]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc82:	490a      	ldr	r1, [pc, #40]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc84:	4313      	orrs	r3, r2
 800dc86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc92:	d105      	bne.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800dc94:	4b05      	ldr	r3, [pc, #20]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	4a04      	ldr	r2, [pc, #16]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dc9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc9e:	60d3      	str	r3, [r2, #12]
 800dca0:	7cbb      	ldrb	r3, [r7, #18]
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	40021000 	.word	0x40021000

0800dcb0 <HAL_SPI_Init>:
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d101      	bne.n	800dcc2 <HAL_SPI_Init+0x12>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e09d      	b.n	800ddfe <HAL_SPI_Init+0x14e>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d108      	bne.n	800dcdc <HAL_SPI_Init+0x2c>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcd2:	d009      	beq.n	800dce8 <HAL_SPI_Init+0x38>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	61da      	str	r2, [r3, #28]
 800dcda:	e005      	b.n	800dce8 <HAL_SPI_Init+0x38>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	611a      	str	r2, [r3, #16]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	615a      	str	r2, [r3, #20]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	629a      	str	r2, [r3, #40]	; 0x28
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d106      	bne.n	800dd08 <HAL_SPI_Init+0x58>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7fb fae6 	bl	80092d4 <HAL_SPI_MspInit>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd28:	d902      	bls.n	800dd30 <HAL_SPI_Init+0x80>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	e002      	b.n	800dd36 <HAL_SPI_Init+0x86>
 800dd30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd3e:	d007      	beq.n	800dd50 <HAL_SPI_Init+0xa0>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd48:	d002      	beq.n	800dd50 <HAL_SPI_Init+0xa0>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	629a      	str	r2, [r3, #40]	; 0x28
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dd60:	431a      	orrs	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	f003 0302 	and.w	r3, r3, #2
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	431a      	orrs	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd7e:	431a      	orrs	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	69db      	ldr	r3, [r3, #28]
 800dd84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd88:	431a      	orrs	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd92:	ea42 0103 	orr.w	r1, r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	430a      	orrs	r2, r1
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	0c1b      	lsrs	r3, r3, #16
 800ddac:	f003 0204 	and.w	r2, r3, #4
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	f003 0310 	and.w	r3, r3, #16
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddbe:	f003 0308 	and.w	r3, r3, #8
 800ddc2:	431a      	orrs	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ddcc:	ea42 0103 	orr.w	r1, r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	430a      	orrs	r2, r1
 800dddc:	605a      	str	r2, [r3, #4]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	69da      	ldr	r2, [r3, #28]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ddec:	61da      	str	r2, [r3, #28]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	661a      	str	r2, [r3, #96]	; 0x60
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <HAL_SPI_Transmit>:
 800de06:	b580      	push	{r7, lr}
 800de08:	b088      	sub	sp, #32
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	60f8      	str	r0, [r7, #12]
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	603b      	str	r3, [r7, #0]
 800de12:	4613      	mov	r3, r2
 800de14:	80fb      	strh	r3, [r7, #6]
 800de16:	2300      	movs	r3, #0
 800de18:	77fb      	strb	r3, [r7, #31]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de20:	2b01      	cmp	r3, #1
 800de22:	d101      	bne.n	800de28 <HAL_SPI_Transmit+0x22>
 800de24:	2302      	movs	r3, #2
 800de26:	e15f      	b.n	800e0e8 <HAL_SPI_Transmit+0x2e2>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800de30:	f7fc fa6c 	bl	800a30c <HAL_GetTick>
 800de34:	61b8      	str	r0, [r7, #24]
 800de36:	88fb      	ldrh	r3, [r7, #6]
 800de38:	82fb      	strh	r3, [r7, #22]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b01      	cmp	r3, #1
 800de44:	d002      	beq.n	800de4c <HAL_SPI_Transmit+0x46>
 800de46:	2302      	movs	r3, #2
 800de48:	77fb      	strb	r3, [r7, #31]
 800de4a:	e148      	b.n	800e0de <HAL_SPI_Transmit+0x2d8>
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <HAL_SPI_Transmit+0x52>
 800de52:	88fb      	ldrh	r3, [r7, #6]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d102      	bne.n	800de5e <HAL_SPI_Transmit+0x58>
 800de58:	2301      	movs	r3, #1
 800de5a:	77fb      	strb	r3, [r7, #31]
 800de5c:	e13f      	b.n	800e0de <HAL_SPI_Transmit+0x2d8>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2203      	movs	r2, #3
 800de62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	661a      	str	r2, [r3, #96]	; 0x60
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	639a      	str	r2, [r3, #56]	; 0x38
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	88fa      	ldrh	r2, [r7, #6]
 800de76:	879a      	strh	r2, [r3, #60]	; 0x3c
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	88fa      	ldrh	r2, [r7, #6]
 800de7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	641a      	str	r2, [r3, #64]	; 0x40
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2200      	movs	r2, #0
 800de90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2200      	movs	r2, #0
 800de98:	651a      	str	r2, [r3, #80]	; 0x50
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	64da      	str	r2, [r3, #76]	; 0x4c
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dea8:	d10f      	bne.n	800deca <HAL_SPI_Transmit+0xc4>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded4:	2b40      	cmp	r3, #64	; 0x40
 800ded6:	d007      	beq.n	800dee8 <HAL_SPI_Transmit+0xe2>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800def0:	d94f      	bls.n	800df92 <HAL_SPI_Transmit+0x18c>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d002      	beq.n	800df00 <HAL_SPI_Transmit+0xfa>
 800defa:	8afb      	ldrh	r3, [r7, #22]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d142      	bne.n	800df86 <HAL_SPI_Transmit+0x180>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df04:	881a      	ldrh	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	60da      	str	r2, [r3, #12]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df10:	1c9a      	adds	r2, r3, #2
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	639a      	str	r2, [r3, #56]	; 0x38
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	3b01      	subs	r3, #1
 800df1e:	b29a      	uxth	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df24:	e02f      	b.n	800df86 <HAL_SPI_Transmit+0x180>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	f003 0302 	and.w	r3, r3, #2
 800df30:	2b02      	cmp	r3, #2
 800df32:	d112      	bne.n	800df5a <HAL_SPI_Transmit+0x154>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	881a      	ldrh	r2, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	60da      	str	r2, [r3, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df44:	1c9a      	adds	r2, r3, #2
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	639a      	str	r2, [r3, #56]	; 0x38
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df4e:	b29b      	uxth	r3, r3
 800df50:	3b01      	subs	r3, #1
 800df52:	b29a      	uxth	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df58:	e015      	b.n	800df86 <HAL_SPI_Transmit+0x180>
 800df5a:	f7fc f9d7 	bl	800a30c <HAL_GetTick>
 800df5e:	4602      	mov	r2, r0
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	429a      	cmp	r2, r3
 800df68:	d803      	bhi.n	800df72 <HAL_SPI_Transmit+0x16c>
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df70:	d102      	bne.n	800df78 <HAL_SPI_Transmit+0x172>
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d106      	bne.n	800df86 <HAL_SPI_Transmit+0x180>
 800df78:	2303      	movs	r3, #3
 800df7a:	77fb      	strb	r3, [r7, #31]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2201      	movs	r2, #1
 800df80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800df84:	e0ab      	b.n	800e0de <HAL_SPI_Transmit+0x2d8>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1ca      	bne.n	800df26 <HAL_SPI_Transmit+0x120>
 800df90:	e080      	b.n	800e094 <HAL_SPI_Transmit+0x28e>
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d002      	beq.n	800dfa0 <HAL_SPI_Transmit+0x19a>
 800df9a:	8afb      	ldrh	r3, [r7, #22]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d174      	bne.n	800e08a <HAL_SPI_Transmit+0x284>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d912      	bls.n	800dfd0 <HAL_SPI_Transmit+0x1ca>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	881a      	ldrh	r2, [r3, #0]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	60da      	str	r2, [r3, #12]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfba:	1c9a      	adds	r2, r3, #2
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	639a      	str	r2, [r3, #56]	; 0x38
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	3b02      	subs	r3, #2
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfce:	e05c      	b.n	800e08a <HAL_SPI_Transmit+0x284>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	330c      	adds	r3, #12
 800dfda:	7812      	ldrb	r2, [r2, #0]
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	639a      	str	r2, [r3, #56]	; 0x38
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	3b01      	subs	r3, #1
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dff6:	e048      	b.n	800e08a <HAL_SPI_Transmit+0x284>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	f003 0302 	and.w	r3, r3, #2
 800e002:	2b02      	cmp	r3, #2
 800e004:	d12b      	bne.n	800e05e <HAL_SPI_Transmit+0x258>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d912      	bls.n	800e036 <HAL_SPI_Transmit+0x230>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e014:	881a      	ldrh	r2, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	60da      	str	r2, [r3, #12]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e020:	1c9a      	adds	r2, r3, #2
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	639a      	str	r2, [r3, #56]	; 0x38
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	3b02      	subs	r3, #2
 800e02e:	b29a      	uxth	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e034:	e029      	b.n	800e08a <HAL_SPI_Transmit+0x284>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	330c      	adds	r3, #12
 800e040:	7812      	ldrb	r2, [r2, #0]
 800e042:	701a      	strb	r2, [r3, #0]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	639a      	str	r2, [r3, #56]	; 0x38
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e052:	b29b      	uxth	r3, r3
 800e054:	3b01      	subs	r3, #1
 800e056:	b29a      	uxth	r2, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e05c:	e015      	b.n	800e08a <HAL_SPI_Transmit+0x284>
 800e05e:	f7fc f955 	bl	800a30c <HAL_GetTick>
 800e062:	4602      	mov	r2, r0
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d803      	bhi.n	800e076 <HAL_SPI_Transmit+0x270>
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e074:	d102      	bne.n	800e07c <HAL_SPI_Transmit+0x276>
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d106      	bne.n	800e08a <HAL_SPI_Transmit+0x284>
 800e07c:	2303      	movs	r3, #3
 800e07e:	77fb      	strb	r3, [r7, #31]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e088:	e029      	b.n	800e0de <HAL_SPI_Transmit+0x2d8>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e08e:	b29b      	uxth	r3, r3
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1b1      	bne.n	800dff8 <HAL_SPI_Transmit+0x1f2>
 800e094:	69ba      	ldr	r2, [r7, #24]
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f000 fc7d 	bl	800e998 <SPI_EndRxTxTransaction>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <HAL_SPI_Transmit+0x2a4>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2220      	movs	r2, #32
 800e0a8:	661a      	str	r2, [r3, #96]	; 0x60
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10a      	bne.n	800e0c8 <HAL_SPI_Transmit+0x2c2>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	613b      	str	r3, [r7, #16]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	613b      	str	r3, [r7, #16]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	613b      	str	r3, [r7, #16]
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <HAL_SPI_Transmit+0x2d0>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	77fb      	strb	r3, [r7, #31]
 800e0d4:	e003      	b.n	800e0de <HAL_SPI_Transmit+0x2d8>
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e0e6:	7ffb      	ldrb	r3, [r7, #31]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3720      	adds	r7, #32
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <HAL_SPI_TransmitReceive>:
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b08a      	sub	sp, #40	; 0x28
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	807b      	strh	r3, [r7, #2]
 800e0fe:	2301      	movs	r3, #1
 800e100:	627b      	str	r3, [r7, #36]	; 0x24
 800e102:	2300      	movs	r3, #0
 800e104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d101      	bne.n	800e116 <HAL_SPI_TransmitReceive+0x26>
 800e112:	2302      	movs	r3, #2
 800e114:	e20a      	b.n	800e52c <HAL_SPI_TransmitReceive+0x43c>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e11e:	f7fc f8f5 	bl	800a30c <HAL_GetTick>
 800e122:	61f8      	str	r0, [r7, #28]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e12a:	76fb      	strb	r3, [r7, #27]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	887b      	ldrh	r3, [r7, #2]
 800e134:	827b      	strh	r3, [r7, #18]
 800e136:	887b      	ldrh	r3, [r7, #2]
 800e138:	823b      	strh	r3, [r7, #16]
 800e13a:	7efb      	ldrb	r3, [r7, #27]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d00e      	beq.n	800e15e <HAL_SPI_TransmitReceive+0x6e>
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e146:	d106      	bne.n	800e156 <HAL_SPI_TransmitReceive+0x66>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d102      	bne.n	800e156 <HAL_SPI_TransmitReceive+0x66>
 800e150:	7efb      	ldrb	r3, [r7, #27]
 800e152:	2b04      	cmp	r3, #4
 800e154:	d003      	beq.n	800e15e <HAL_SPI_TransmitReceive+0x6e>
 800e156:	2302      	movs	r3, #2
 800e158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e15c:	e1e0      	b.n	800e520 <HAL_SPI_TransmitReceive+0x430>
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d005      	beq.n	800e170 <HAL_SPI_TransmitReceive+0x80>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <HAL_SPI_TransmitReceive+0x80>
 800e16a:	887b      	ldrh	r3, [r7, #2]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d103      	bne.n	800e178 <HAL_SPI_TransmitReceive+0x88>
 800e170:	2301      	movs	r3, #1
 800e172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e176:	e1d3      	b.n	800e520 <HAL_SPI_TransmitReceive+0x430>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b04      	cmp	r3, #4
 800e182:	d003      	beq.n	800e18c <HAL_SPI_TransmitReceive+0x9c>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2205      	movs	r2, #5
 800e188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	661a      	str	r2, [r3, #96]	; 0x60
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	641a      	str	r2, [r3, #64]	; 0x40
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	887a      	ldrh	r2, [r7, #2]
 800e19c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	887a      	ldrh	r2, [r7, #2]
 800e1a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	639a      	str	r2, [r3, #56]	; 0x38
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	887a      	ldrh	r2, [r7, #2]
 800e1b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	887a      	ldrh	r2, [r7, #2]
 800e1b8:	879a      	strh	r2, [r3, #60]	; 0x3c
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	64da      	str	r2, [r3, #76]	; 0x4c
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	651a      	str	r2, [r3, #80]	; 0x50
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1ce:	d802      	bhi.n	800e1d6 <HAL_SPI_TransmitReceive+0xe6>
 800e1d0:	8a3b      	ldrh	r3, [r7, #16]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d908      	bls.n	800e1e8 <HAL_SPI_TransmitReceive+0xf8>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1e4:	605a      	str	r2, [r3, #4]
 800e1e6:	e007      	b.n	800e1f8 <HAL_SPI_TransmitReceive+0x108>
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1f6:	605a      	str	r2, [r3, #4]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e202:	2b40      	cmp	r3, #64	; 0x40
 800e204:	d007      	beq.n	800e216 <HAL_SPI_TransmitReceive+0x126>
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e214:	601a      	str	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e21e:	f240 8081 	bls.w	800e324 <HAL_SPI_TransmitReceive+0x234>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <HAL_SPI_TransmitReceive+0x140>
 800e22a:	8a7b      	ldrh	r3, [r7, #18]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d16d      	bne.n	800e30c <HAL_SPI_TransmitReceive+0x21c>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e234:	881a      	ldrh	r2, [r3, #0]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	60da      	str	r2, [r3, #12]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e240:	1c9a      	adds	r2, r3, #2
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	639a      	str	r2, [r3, #56]	; 0x38
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	3b01      	subs	r3, #1
 800e24e:	b29a      	uxth	r2, r3
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e254:	e05a      	b.n	800e30c <HAL_SPI_TransmitReceive+0x21c>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	f003 0302 	and.w	r3, r3, #2
 800e260:	2b02      	cmp	r3, #2
 800e262:	d11b      	bne.n	800e29c <HAL_SPI_TransmitReceive+0x1ac>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e268:	b29b      	uxth	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d016      	beq.n	800e29c <HAL_SPI_TransmitReceive+0x1ac>
 800e26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e270:	2b01      	cmp	r3, #1
 800e272:	d113      	bne.n	800e29c <HAL_SPI_TransmitReceive+0x1ac>
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e278:	881a      	ldrh	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	60da      	str	r2, [r3, #12]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	1c9a      	adds	r2, r3, #2
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	639a      	str	r2, [r3, #56]	; 0x38
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e28e:	b29b      	uxth	r3, r3
 800e290:	3b01      	subs	r3, #1
 800e292:	b29a      	uxth	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e298:	2300      	movs	r3, #0
 800e29a:	627b      	str	r3, [r7, #36]	; 0x24
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	f003 0301 	and.w	r3, r3, #1
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d11c      	bne.n	800e2e4 <HAL_SPI_TransmitReceive+0x1f4>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d016      	beq.n	800e2e4 <HAL_SPI_TransmitReceive+0x1f4>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	68da      	ldr	r2, [r3, #12]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c0:	b292      	uxth	r2, r2
 800e2c2:	801a      	strh	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c8:	1c9a      	adds	r2, r3, #2
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	641a      	str	r2, [r3, #64]	; 0x40
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2e4:	f7fc f812 	bl	800a30c <HAL_GetTick>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d80b      	bhi.n	800e30c <HAL_SPI_TransmitReceive+0x21c>
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fa:	d007      	beq.n	800e30c <HAL_SPI_TransmitReceive+0x21c>
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e30a:	e109      	b.n	800e520 <HAL_SPI_TransmitReceive+0x430>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d19f      	bne.n	800e256 <HAL_SPI_TransmitReceive+0x166>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d199      	bne.n	800e256 <HAL_SPI_TransmitReceive+0x166>
 800e322:	e0e3      	b.n	800e4ec <HAL_SPI_TransmitReceive+0x3fc>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <HAL_SPI_TransmitReceive+0x244>
 800e32c:	8a7b      	ldrh	r3, [r7, #18]
 800e32e:	2b01      	cmp	r3, #1
 800e330:	f040 80cf 	bne.w	800e4d2 <HAL_SPI_TransmitReceive+0x3e2>
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e338:	b29b      	uxth	r3, r3
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d912      	bls.n	800e364 <HAL_SPI_TransmitReceive+0x274>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e342:	881a      	ldrh	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	60da      	str	r2, [r3, #12]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34e:	1c9a      	adds	r2, r3, #2
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	639a      	str	r2, [r3, #56]	; 0x38
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e358:	b29b      	uxth	r3, r3
 800e35a:	3b02      	subs	r3, #2
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e362:	e0b6      	b.n	800e4d2 <HAL_SPI_TransmitReceive+0x3e2>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	330c      	adds	r3, #12
 800e36e:	7812      	ldrb	r2, [r2, #0]
 800e370:	701a      	strb	r2, [r3, #0]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e380:	b29b      	uxth	r3, r3
 800e382:	3b01      	subs	r3, #1
 800e384:	b29a      	uxth	r2, r3
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e38a:	e0a2      	b.n	800e4d2 <HAL_SPI_TransmitReceive+0x3e2>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	f003 0302 	and.w	r3, r3, #2
 800e396:	2b02      	cmp	r3, #2
 800e398:	d134      	bne.n	800e404 <HAL_SPI_TransmitReceive+0x314>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d02f      	beq.n	800e404 <HAL_SPI_TransmitReceive+0x314>
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d12c      	bne.n	800e404 <HAL_SPI_TransmitReceive+0x314>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d912      	bls.n	800e3da <HAL_SPI_TransmitReceive+0x2ea>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b8:	881a      	ldrh	r2, [r3, #0]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	60da      	str	r2, [r3, #12]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c4:	1c9a      	adds	r2, r3, #2
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	3b02      	subs	r3, #2
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3d8:	e012      	b.n	800e400 <HAL_SPI_TransmitReceive+0x310>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	330c      	adds	r3, #12
 800e3e4:	7812      	ldrb	r2, [r2, #0]
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	639a      	str	r2, [r3, #56]	; 0x38
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e400:	2300      	movs	r3, #0
 800e402:	627b      	str	r3, [r7, #36]	; 0x24
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d148      	bne.n	800e4a4 <HAL_SPI_TransmitReceive+0x3b4>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e418:	b29b      	uxth	r3, r3
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d042      	beq.n	800e4a4 <HAL_SPI_TransmitReceive+0x3b4>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e424:	b29b      	uxth	r3, r3
 800e426:	2b01      	cmp	r3, #1
 800e428:	d923      	bls.n	800e472 <HAL_SPI_TransmitReceive+0x382>
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e434:	b292      	uxth	r2, r2
 800e436:	801a      	strh	r2, [r3, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e43c:	1c9a      	adds	r2, r3, #2
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	641a      	str	r2, [r3, #64]	; 0x40
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b02      	subs	r3, #2
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d81f      	bhi.n	800e4a0 <HAL_SPI_TransmitReceive+0x3b0>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	685a      	ldr	r2, [r3, #4]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e46e:	605a      	str	r2, [r3, #4]
 800e470:	e016      	b.n	800e4a0 <HAL_SPI_TransmitReceive+0x3b0>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f103 020c 	add.w	r2, r3, #12
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e47e:	7812      	ldrb	r2, [r2, #0]
 800e480:	b2d2      	uxtb	r2, r2
 800e482:	701a      	strb	r2, [r3, #0]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	641a      	str	r2, [r3, #64]	; 0x40
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e494:	b29b      	uxth	r3, r3
 800e496:	3b01      	subs	r3, #1
 800e498:	b29a      	uxth	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e4a4:	f7fb ff32 	bl	800a30c <HAL_GetTick>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d803      	bhi.n	800e4bc <HAL_SPI_TransmitReceive+0x3cc>
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ba:	d102      	bne.n	800e4c2 <HAL_SPI_TransmitReceive+0x3d2>
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d107      	bne.n	800e4d2 <HAL_SPI_TransmitReceive+0x3e2>
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e4d0:	e026      	b.n	800e520 <HAL_SPI_TransmitReceive+0x430>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f47f af57 	bne.w	800e38c <HAL_SPI_TransmitReceive+0x29c>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f47f af50 	bne.w	800e38c <HAL_SPI_TransmitReceive+0x29c>
 800e4ec:	69fa      	ldr	r2, [r7, #28]
 800e4ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f000 fa51 	bl	800e998 <SPI_EndRxTxTransaction>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d005      	beq.n	800e508 <HAL_SPI_TransmitReceive+0x418>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2220      	movs	r2, #32
 800e506:	661a      	str	r2, [r3, #96]	; 0x60
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d003      	beq.n	800e518 <HAL_SPI_TransmitReceive+0x428>
 800e510:	2301      	movs	r3, #1
 800e512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e516:	e003      	b.n	800e520 <HAL_SPI_TransmitReceive+0x430>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e52c:	4618      	mov	r0, r3
 800e52e:	3728      	adds	r7, #40	; 0x28
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <HAL_SPI_IRQHandler>:
 800e534:	b580      	push	{r7, lr}
 800e536:	b088      	sub	sp, #32
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	61fb      	str	r3, [r7, #28]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	61bb      	str	r3, [r7, #24]
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10e      	bne.n	800e574 <HAL_SPI_IRQHandler+0x40>
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d009      	beq.n	800e574 <HAL_SPI_IRQHandler+0x40>
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e566:	2b00      	cmp	r3, #0
 800e568:	d004      	beq.n	800e574 <HAL_SPI_IRQHandler+0x40>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	4798      	blx	r3
 800e572:	e0ce      	b.n	800e712 <HAL_SPI_IRQHandler+0x1de>
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	f003 0302 	and.w	r3, r3, #2
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d009      	beq.n	800e592 <HAL_SPI_IRQHandler+0x5e>
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <HAL_SPI_IRQHandler+0x5e>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	4798      	blx	r3
 800e590:	e0bf      	b.n	800e712 <HAL_SPI_IRQHandler+0x1de>
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	f003 0320 	and.w	r3, r3, #32
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <HAL_SPI_IRQHandler+0x7e>
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d105      	bne.n	800e5b2 <HAL_SPI_IRQHandler+0x7e>
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80b0 	beq.w	800e712 <HAL_SPI_IRQHandler+0x1de>
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	f003 0320 	and.w	r3, r3, #32
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 80aa 	beq.w	800e712 <HAL_SPI_IRQHandler+0x1de>
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d023      	beq.n	800e610 <HAL_SPI_IRQHandler+0xdc>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	2b03      	cmp	r3, #3
 800e5d2:	d011      	beq.n	800e5f8 <HAL_SPI_IRQHandler+0xc4>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5d8:	f043 0204 	orr.w	r2, r3, #4
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	661a      	str	r2, [r3, #96]	; 0x60
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	617b      	str	r3, [r7, #20]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	617b      	str	r3, [r7, #20]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	e00b      	b.n	800e610 <HAL_SPI_IRQHandler+0xdc>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	613b      	str	r3, [r7, #16]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	613b      	str	r3, [r7, #16]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	613b      	str	r3, [r7, #16]
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	e080      	b.n	800e712 <HAL_SPI_IRQHandler+0x1de>
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	f003 0320 	and.w	r3, r3, #32
 800e616:	2b00      	cmp	r3, #0
 800e618:	d014      	beq.n	800e644 <HAL_SPI_IRQHandler+0x110>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e61e:	f043 0201 	orr.w	r2, r3, #1
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	661a      	str	r2, [r3, #96]	; 0x60
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	60fb      	str	r3, [r7, #12]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00c      	beq.n	800e668 <HAL_SPI_IRQHandler+0x134>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e652:	f043 0208 	orr.w	r2, r3, #8
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	661a      	str	r2, [r3, #96]	; 0x60
 800e65a:	2300      	movs	r3, #0
 800e65c:	60bb      	str	r3, [r7, #8]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	60bb      	str	r3, [r7, #8]
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d04f      	beq.n	800e710 <HAL_SPI_IRQHandler+0x1dc>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e67e:	605a      	str	r2, [r3, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d104      	bne.n	800e69c <HAL_SPI_IRQHandler+0x168>
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d034      	beq.n	800e706 <HAL_SPI_IRQHandler+0x1d2>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	685a      	ldr	r2, [r3, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f022 0203 	bic.w	r2, r2, #3
 800e6aa:	605a      	str	r2, [r3, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d011      	beq.n	800e6d8 <HAL_SPI_IRQHandler+0x1a4>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b8:	4a17      	ldr	r2, [pc, #92]	; (800e718 <HAL_SPI_IRQHandler+0x1e4>)
 800e6ba:	639a      	str	r2, [r3, #56]	; 0x38
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fc f862 	bl	800a78a <HAL_DMA_Abort_IT>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d005      	beq.n	800e6d8 <HAL_SPI_IRQHandler+0x1a4>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	661a      	str	r2, [r3, #96]	; 0x60
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d016      	beq.n	800e70e <HAL_SPI_IRQHandler+0x1da>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6e4:	4a0c      	ldr	r2, [pc, #48]	; (800e718 <HAL_SPI_IRQHandler+0x1e4>)
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fc f84c 	bl	800a78a <HAL_DMA_Abort_IT>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00a      	beq.n	800e70e <HAL_SPI_IRQHandler+0x1da>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	661a      	str	r2, [r3, #96]	; 0x60
 800e704:	e003      	b.n	800e70e <HAL_SPI_IRQHandler+0x1da>
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f808 	bl	800e71c <HAL_SPI_ErrorCallback>
 800e70c:	e000      	b.n	800e710 <HAL_SPI_IRQHandler+0x1dc>
 800e70e:	bf00      	nop
 800e710:	bf00      	nop
 800e712:	3720      	adds	r7, #32
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	0800e731 	.word	0x0800e731

0800e71c <HAL_SPI_ErrorCallback>:
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <SPI_DMAAbortOnError>:
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73c:	60fb      	str	r3, [r7, #12]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7ff ffe5 	bl	800e71c <HAL_SPI_ErrorCallback>
 800e752:	bf00      	nop
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
	...

0800e75c <SPI_WaitFlagStateUntilTimeout>:
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b088      	sub	sp, #32
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	4613      	mov	r3, r2
 800e76a:	71fb      	strb	r3, [r7, #7]
 800e76c:	f7fb fdce 	bl	800a30c <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	1a9b      	subs	r3, r3, r2
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4413      	add	r3, r2
 800e77a:	61fb      	str	r3, [r7, #28]
 800e77c:	f7fb fdc6 	bl	800a30c <HAL_GetTick>
 800e780:	61b8      	str	r0, [r7, #24]
 800e782:	4b39      	ldr	r3, [pc, #228]	; (800e868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	015b      	lsls	r3, r3, #5
 800e788:	0d1b      	lsrs	r3, r3, #20
 800e78a:	69fa      	ldr	r2, [r7, #28]
 800e78c:	fb02 f303 	mul.w	r3, r2, r3
 800e790:	617b      	str	r3, [r7, #20]
 800e792:	e054      	b.n	800e83e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79a:	d050      	beq.n	800e83e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800e79c:	f7fb fdb6 	bl	800a30c <HAL_GetTick>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d902      	bls.n	800e7b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d13d      	bne.n	800e82e <SPI_WaitFlagStateUntilTimeout+0xd2>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7c0:	605a      	str	r2, [r3, #4]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7ca:	d111      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7d4:	d004      	beq.n	800e7e0 <SPI_WaitFlagStateUntilTimeout+0x84>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7de:	d107      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7f8:	d10f      	bne.n	800e81a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e808:	601a      	str	r2, [r3, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e82a:	2303      	movs	r3, #3
 800e82c:	e017      	b.n	800e85e <SPI_WaitFlagStateUntilTimeout+0x102>
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	617b      	str	r3, [r7, #20]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	689a      	ldr	r2, [r3, #8]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	4013      	ands	r3, r2
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	bf0c      	ite	eq
 800e84e:	2301      	moveq	r3, #1
 800e850:	2300      	movne	r3, #0
 800e852:	b2db      	uxtb	r3, r3
 800e854:	461a      	mov	r2, r3
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d19b      	bne.n	800e794 <SPI_WaitFlagStateUntilTimeout+0x38>
 800e85c:	2300      	movs	r3, #0
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	20000070 	.word	0x20000070

0800e86c <SPI_WaitFifoStateUntilTimeout>:
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	; 0x28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]
 800e87e:	f7fb fd45 	bl	800a30c <HAL_GetTick>
 800e882:	4602      	mov	r2, r0
 800e884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e886:	1a9b      	subs	r3, r3, r2
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	4413      	add	r3, r2
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
 800e88e:	f7fb fd3d 	bl	800a30c <HAL_GetTick>
 800e892:	6238      	str	r0, [r7, #32]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	330c      	adds	r3, #12
 800e89a:	61fb      	str	r3, [r7, #28]
 800e89c:	4b3d      	ldr	r3, [pc, #244]	; (800e994 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4413      	add	r3, r2
 800e8a6:	00da      	lsls	r2, r3, #3
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	0d1b      	lsrs	r3, r3, #20
 800e8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ae:	fb02 f303 	mul.w	r3, r2, r3
 800e8b2:	61bb      	str	r3, [r7, #24]
 800e8b4:	e060      	b.n	800e978 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e8bc:	d107      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0x62>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d104      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0x62>
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	75fb      	strb	r3, [r7, #23]
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d4:	d050      	beq.n	800e978 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800e8d6:	f7fb fd19 	bl	800a30c <HAL_GetTick>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d902      	bls.n	800e8ec <SPI_WaitFifoStateUntilTimeout+0x80>
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d13d      	bne.n	800e968 <SPI_WaitFifoStateUntilTimeout+0xfc>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e8fa:	605a      	str	r2, [r3, #4]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e904:	d111      	bne.n	800e92a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e90e:	d004      	beq.n	800e91a <SPI_WaitFifoStateUntilTimeout+0xae>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e918:	d107      	bne.n	800e92a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e932:	d10f      	bne.n	800e954 <SPI_WaitFifoStateUntilTimeout+0xe8>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e964:	2303      	movs	r3, #3
 800e966:	e010      	b.n	800e98a <SPI_WaitFifoStateUntilTimeout+0x11e>
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <SPI_WaitFifoStateUntilTimeout+0x106>
 800e96e:	2300      	movs	r3, #0
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	3b01      	subs	r3, #1
 800e976:	61bb      	str	r3, [r7, #24]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689a      	ldr	r2, [r3, #8]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	4013      	ands	r3, r2
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	429a      	cmp	r2, r3
 800e986:	d196      	bne.n	800e8b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
 800e988:	2300      	movs	r3, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	3728      	adds	r7, #40	; 0x28
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20000070 	.word	0x20000070

0800e998 <SPI_EndRxTxTransaction>:
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af02      	add	r7, sp, #8
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f7ff ff5b 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d007      	beq.n	800e9cc <SPI_EndRxTxTransaction+0x34>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9c0:	f043 0220 	orr.w	r2, r3, #32
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	661a      	str	r2, [r3, #96]	; 0x60
 800e9c8:	2303      	movs	r3, #3
 800e9ca:	e027      	b.n	800ea1c <SPI_EndRxTxTransaction+0x84>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2180      	movs	r1, #128	; 0x80
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f7ff fec0 	bl	800e75c <SPI_WaitFlagStateUntilTimeout>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d007      	beq.n	800e9f2 <SPI_EndRxTxTransaction+0x5a>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9e6:	f043 0220 	orr.w	r2, r3, #32
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	661a      	str	r2, [r3, #96]	; 0x60
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	e014      	b.n	800ea1c <SPI_EndRxTxTransaction+0x84>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff ff34 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d007      	beq.n	800ea1a <SPI_EndRxTxTransaction+0x82>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea0e:	f043 0220 	orr.w	r2, r3, #32
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	661a      	str	r2, [r3, #96]	; 0x60
 800ea16:	2303      	movs	r3, #3
 800ea18:	e000      	b.n	800ea1c <SPI_EndRxTxTransaction+0x84>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <HAL_TIM_Encoder_Init>:
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <HAL_TIM_Encoder_Init+0x14>
 800ea34:	2301      	movs	r3, #1
 800ea36:	e097      	b.n	800eb68 <HAL_TIM_Encoder_Init+0x144>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d106      	bne.n	800ea52 <HAL_TIM_Encoder_Init+0x2e>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7fa fe7b 	bl	8009748 <HAL_TIM_Encoder_MspInit>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2202      	movs	r2, #2
 800ea56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	6812      	ldr	r2, [r2, #0]
 800ea64:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800ea68:	f023 0307 	bic.w	r3, r3, #7
 800ea6c:	6093      	str	r3, [r2, #8]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	3304      	adds	r3, #4
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f000 f879 	bl	800eb70 <TIM_Base_SetConfig>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	617b      	str	r3, [r7, #20]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	613b      	str	r3, [r7, #16]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	60fb      	str	r3, [r7, #12]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	617b      	str	r3, [r7, #20]
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaa6:	f023 0303 	bic.w	r3, r3, #3
 800eaaa:	613b      	str	r3, [r7, #16]
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	689a      	ldr	r2, [r3, #8]
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	699b      	ldr	r3, [r3, #24]
 800eab4:	021b      	lsls	r3, r3, #8
 800eab6:	4313      	orrs	r3, r2
 800eab8:	693a      	ldr	r2, [r7, #16]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	613b      	str	r3, [r7, #16]
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800eac4:	f023 030c 	bic.w	r3, r3, #12
 800eac8:	613b      	str	r3, [r7, #16]
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ead0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ead4:	613b      	str	r3, [r7, #16]
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	68da      	ldr	r2, [r3, #12]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	021b      	lsls	r3, r3, #8
 800eae0:	4313      	orrs	r3, r2
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	4313      	orrs	r3, r2
 800eae6:	613b      	str	r3, [r7, #16]
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	011a      	lsls	r2, r3, #4
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	031b      	lsls	r3, r3, #12
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	693a      	ldr	r2, [r7, #16]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	613b      	str	r3, [r7, #16]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800eb0a:	60fb      	str	r3, [r7, #12]
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	695b      	ldr	r3, [r3, #20]
 800eb14:	011b      	lsls	r3, r3, #4
 800eb16:	4313      	orrs	r3, r2
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	60fb      	str	r3, [r7, #12]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	609a      	str	r2, [r3, #8]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	693a      	ldr	r2, [r7, #16]
 800eb2c:	619a      	str	r2, [r3, #24]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	621a      	str	r2, [r3, #32]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800eb66:	2300      	movs	r3, #0
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <TIM_Base_SetConfig>:
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	60fb      	str	r3, [r7, #12]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a4c      	ldr	r2, [pc, #304]	; (800ecb4 <TIM_Base_SetConfig+0x144>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d017      	beq.n	800ebb8 <TIM_Base_SetConfig+0x48>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb8e:	d013      	beq.n	800ebb8 <TIM_Base_SetConfig+0x48>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a49      	ldr	r2, [pc, #292]	; (800ecb8 <TIM_Base_SetConfig+0x148>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d00f      	beq.n	800ebb8 <TIM_Base_SetConfig+0x48>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a48      	ldr	r2, [pc, #288]	; (800ecbc <TIM_Base_SetConfig+0x14c>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d00b      	beq.n	800ebb8 <TIM_Base_SetConfig+0x48>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a47      	ldr	r2, [pc, #284]	; (800ecc0 <TIM_Base_SetConfig+0x150>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d007      	beq.n	800ebb8 <TIM_Base_SetConfig+0x48>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a46      	ldr	r2, [pc, #280]	; (800ecc4 <TIM_Base_SetConfig+0x154>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d003      	beq.n	800ebb8 <TIM_Base_SetConfig+0x48>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4a45      	ldr	r2, [pc, #276]	; (800ecc8 <TIM_Base_SetConfig+0x158>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d108      	bne.n	800ebca <TIM_Base_SetConfig+0x5a>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	60fb      	str	r3, [r7, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a39      	ldr	r2, [pc, #228]	; (800ecb4 <TIM_Base_SetConfig+0x144>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d023      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebd8:	d01f      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a36      	ldr	r2, [pc, #216]	; (800ecb8 <TIM_Base_SetConfig+0x148>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d01b      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a35      	ldr	r2, [pc, #212]	; (800ecbc <TIM_Base_SetConfig+0x14c>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d017      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a34      	ldr	r2, [pc, #208]	; (800ecc0 <TIM_Base_SetConfig+0x150>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d013      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a33      	ldr	r2, [pc, #204]	; (800ecc4 <TIM_Base_SetConfig+0x154>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d00f      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a33      	ldr	r2, [pc, #204]	; (800eccc <TIM_Base_SetConfig+0x15c>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d00b      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a32      	ldr	r2, [pc, #200]	; (800ecd0 <TIM_Base_SetConfig+0x160>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d007      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4a31      	ldr	r2, [pc, #196]	; (800ecd4 <TIM_Base_SetConfig+0x164>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d003      	beq.n	800ec1a <TIM_Base_SetConfig+0xaa>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a2c      	ldr	r2, [pc, #176]	; (800ecc8 <TIM_Base_SetConfig+0x158>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d108      	bne.n	800ec2c <TIM_Base_SetConfig+0xbc>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec20:	60fb      	str	r3, [r7, #12]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	695b      	ldr	r3, [r3, #20]
 800ec36:	4313      	orrs	r3, r2
 800ec38:	60fb      	str	r3, [r7, #12]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	689a      	ldr	r2, [r3, #8]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	629a      	str	r2, [r3, #40]	; 0x28
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a18      	ldr	r2, [pc, #96]	; (800ecb4 <TIM_Base_SetConfig+0x144>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d013      	beq.n	800ec80 <TIM_Base_SetConfig+0x110>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a1a      	ldr	r2, [pc, #104]	; (800ecc4 <TIM_Base_SetConfig+0x154>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d00f      	beq.n	800ec80 <TIM_Base_SetConfig+0x110>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a1a      	ldr	r2, [pc, #104]	; (800eccc <TIM_Base_SetConfig+0x15c>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d00b      	beq.n	800ec80 <TIM_Base_SetConfig+0x110>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a19      	ldr	r2, [pc, #100]	; (800ecd0 <TIM_Base_SetConfig+0x160>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d007      	beq.n	800ec80 <TIM_Base_SetConfig+0x110>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a18      	ldr	r2, [pc, #96]	; (800ecd4 <TIM_Base_SetConfig+0x164>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d003      	beq.n	800ec80 <TIM_Base_SetConfig+0x110>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <TIM_Base_SetConfig+0x158>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d103      	bne.n	800ec88 <TIM_Base_SetConfig+0x118>
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	691a      	ldr	r2, [r3, #16]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	631a      	str	r2, [r3, #48]	; 0x30
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	615a      	str	r2, [r3, #20]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d105      	bne.n	800eca6 <TIM_Base_SetConfig+0x136>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	f023 0201 	bic.w	r2, r3, #1
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	611a      	str	r2, [r3, #16]
 800eca6:	bf00      	nop
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	40012c00 	.word	0x40012c00
 800ecb8:	40000400 	.word	0x40000400
 800ecbc:	40000800 	.word	0x40000800
 800ecc0:	40000c00 	.word	0x40000c00
 800ecc4:	40013400 	.word	0x40013400
 800ecc8:	40015000 	.word	0x40015000
 800eccc:	40014000 	.word	0x40014000
 800ecd0:	40014400 	.word	0x40014400
 800ecd4:	40014800 	.word	0x40014800

0800ecd8 <HAL_TIMEx_MasterConfigSynchronization>:
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d101      	bne.n	800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ecec:	2302      	movs	r3, #2
 800ecee:	e074      	b.n	800edda <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	60bb      	str	r3, [r7, #8]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a34      	ldr	r2, [pc, #208]	; (800ede8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d009      	beq.n	800ed2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	4a33      	ldr	r2, [pc, #204]	; (800edec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d004      	beq.n	800ed2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a31      	ldr	r2, [pc, #196]	; (800edf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d108      	bne.n	800ed40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ed46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed4a:	60fb      	str	r3, [r7, #12]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	60fb      	str	r3, [r7, #12]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	605a      	str	r2, [r3, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4a21      	ldr	r2, [pc, #132]	; (800ede8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d022      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed70:	d01d      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4a1f      	ldr	r2, [pc, #124]	; (800edf4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d018      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a1d      	ldr	r2, [pc, #116]	; (800edf8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d013      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a1c      	ldr	r2, [pc, #112]	; (800edfc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d00e      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a15      	ldr	r2, [pc, #84]	; (800edec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d009      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a18      	ldr	r2, [pc, #96]	; (800ee00 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d004      	beq.n	800edae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a11      	ldr	r2, [pc, #68]	; (800edf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d10c      	bne.n	800edc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edb4:	60bb      	str	r3, [r7, #8]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	68ba      	ldr	r2, [r7, #8]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	60bb      	str	r3, [r7, #8]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68ba      	ldr	r2, [r7, #8]
 800edc6:	609a      	str	r2, [r3, #8]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800edd8:	2300      	movs	r3, #0
 800edda:	4618      	mov	r0, r3
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	40012c00 	.word	0x40012c00
 800edec:	40013400 	.word	0x40013400
 800edf0:	40015000 	.word	0x40015000
 800edf4:	40000400 	.word	0x40000400
 800edf8:	40000800 	.word	0x40000800
 800edfc:	40000c00 	.word	0x40000c00
 800ee00:	40014000 	.word	0x40014000

0800ee04 <HAL_UART_Init>:
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d101      	bne.n	800ee16 <HAL_UART_Init+0x12>
 800ee12:	2301      	movs	r3, #1
 800ee14:	e042      	b.n	800ee9c <HAL_UART_Init+0x98>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d106      	bne.n	800ee2e <HAL_UART_Init+0x2a>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7fb f8f1 	bl	800a010 <HAL_UART_MspInit>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2224      	movs	r2, #36	; 0x24
 800ee32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f022 0201 	bic.w	r2, r2, #1
 800ee44:	601a      	str	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <HAL_UART_Init+0x50>
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 fe68 	bl	800fb24 <UART_AdvFeatureConfig>
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 fb69 	bl	800f52c <UART_SetConfig>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d101      	bne.n	800ee64 <HAL_UART_Init+0x60>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e01b      	b.n	800ee9c <HAL_UART_Init+0x98>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee72:	605a      	str	r2, [r3, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	689a      	ldr	r2, [r3, #8]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee82:	609a      	str	r2, [r3, #8]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f042 0201 	orr.w	r2, r2, #1
 800ee92:	601a      	str	r2, [r3, #0]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fee7 	bl	800fc68 <UART_CheckIdleState>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <HAL_UART_IRQHandler>:
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b0ba      	sub	sp, #232	; 0xe8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	69db      	ldr	r3, [r3, #28]
 800eeb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eeca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eece:	f640 030f 	movw	r3, #2063	; 0x80f
 800eed2:	4013      	ands	r3, r2
 800eed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d11b      	bne.n	800ef18 <HAL_UART_IRQHandler+0x74>
 800eee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eee4:	f003 0320 	and.w	r3, r3, #32
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d015      	beq.n	800ef18 <HAL_UART_IRQHandler+0x74>
 800eeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eef0:	f003 0320 	and.w	r3, r3, #32
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d105      	bne.n	800ef04 <HAL_UART_IRQHandler+0x60>
 800eef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eefc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d009      	beq.n	800ef18 <HAL_UART_IRQHandler+0x74>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 82e3 	beq.w	800f4d4 <HAL_UART_IRQHandler+0x630>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	4798      	blx	r3
 800ef16:	e2dd      	b.n	800f4d4 <HAL_UART_IRQHandler+0x630>
 800ef18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f000 8123 	beq.w	800f168 <HAL_UART_IRQHandler+0x2c4>
 800ef22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef26:	4b8d      	ldr	r3, [pc, #564]	; (800f15c <HAL_UART_IRQHandler+0x2b8>)
 800ef28:	4013      	ands	r3, r2
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d106      	bne.n	800ef3c <HAL_UART_IRQHandler+0x98>
 800ef2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ef32:	4b8b      	ldr	r3, [pc, #556]	; (800f160 <HAL_UART_IRQHandler+0x2bc>)
 800ef34:	4013      	ands	r3, r2
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f000 8116 	beq.w	800f168 <HAL_UART_IRQHandler+0x2c4>
 800ef3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d011      	beq.n	800ef6c <HAL_UART_IRQHandler+0xc8>
 800ef48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00b      	beq.n	800ef6c <HAL_UART_IRQHandler+0xc8>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	621a      	str	r2, [r3, #32]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef62:	f043 0201 	orr.w	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ef6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef70:	f003 0302 	and.w	r3, r3, #2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d011      	beq.n	800ef9c <HAL_UART_IRQHandler+0xf8>
 800ef78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <HAL_UART_IRQHandler+0xf8>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2202      	movs	r2, #2
 800ef8a:	621a      	str	r2, [r3, #32]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef92:	f043 0204 	orr.w	r2, r3, #4
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ef9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efa0:	f003 0304 	and.w	r3, r3, #4
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d011      	beq.n	800efcc <HAL_UART_IRQHandler+0x128>
 800efa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00b      	beq.n	800efcc <HAL_UART_IRQHandler+0x128>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2204      	movs	r2, #4
 800efba:	621a      	str	r2, [r3, #32]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc2:	f043 0202 	orr.w	r2, r3, #2
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800efcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efd0:	f003 0308 	and.w	r3, r3, #8
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d017      	beq.n	800f008 <HAL_UART_IRQHandler+0x164>
 800efd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efdc:	f003 0320 	and.w	r3, r3, #32
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d105      	bne.n	800eff0 <HAL_UART_IRQHandler+0x14c>
 800efe4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800efe8:	4b5c      	ldr	r3, [pc, #368]	; (800f15c <HAL_UART_IRQHandler+0x2b8>)
 800efea:	4013      	ands	r3, r2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00b      	beq.n	800f008 <HAL_UART_IRQHandler+0x164>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2208      	movs	r2, #8
 800eff6:	621a      	str	r2, [r3, #32]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800effe:	f043 0208 	orr.w	r2, r3, #8
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f00c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f010:	2b00      	cmp	r3, #0
 800f012:	d012      	beq.n	800f03a <HAL_UART_IRQHandler+0x196>
 800f014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00c      	beq.n	800f03a <HAL_UART_IRQHandler+0x196>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f028:	621a      	str	r2, [r3, #32]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f030:	f043 0220 	orr.w	r2, r3, #32
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f040:	2b00      	cmp	r3, #0
 800f042:	f000 8249 	beq.w	800f4d8 <HAL_UART_IRQHandler+0x634>
 800f046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f04a:	f003 0320 	and.w	r3, r3, #32
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d013      	beq.n	800f07a <HAL_UART_IRQHandler+0x1d6>
 800f052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d105      	bne.n	800f06a <HAL_UART_IRQHandler+0x1c6>
 800f05e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <HAL_UART_IRQHandler+0x1d6>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <HAL_UART_IRQHandler+0x1d6>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	4798      	blx	r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f08e:	2b40      	cmp	r3, #64	; 0x40
 800f090:	d005      	beq.n	800f09e <HAL_UART_IRQHandler+0x1fa>
 800f092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f096:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d054      	beq.n	800f148 <HAL_UART_IRQHandler+0x2a4>
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fef9 	bl	800fe96 <UART_EndRxTransfer>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ae:	2b40      	cmp	r3, #64	; 0x40
 800f0b0:	d146      	bne.n	800f140 <HAL_UART_IRQHandler+0x29c>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	3308      	adds	r3, #8
 800f0b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f0bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f0c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	3308      	adds	r3, #8
 800f0da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f0de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f0e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f0e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f0ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f0ee:	e841 2300 	strex	r3, r2, [r1]
 800f0f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f0f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1d9      	bne.n	800f0b2 <HAL_UART_IRQHandler+0x20e>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f104:	2b00      	cmp	r3, #0
 800f106:	d017      	beq.n	800f138 <HAL_UART_IRQHandler+0x294>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f10e:	4a15      	ldr	r2, [pc, #84]	; (800f164 <HAL_UART_IRQHandler+0x2c0>)
 800f110:	639a      	str	r2, [r3, #56]	; 0x38
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fb fb36 	bl	800a78a <HAL_DMA_Abort_IT>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d019      	beq.n	800f158 <HAL_UART_IRQHandler+0x2b4>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f132:	4610      	mov	r0, r2
 800f134:	4798      	blx	r3
 800f136:	e00f      	b.n	800f158 <HAL_UART_IRQHandler+0x2b4>
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f9e1 	bl	800f500 <HAL_UART_ErrorCallback>
 800f13e:	e00b      	b.n	800f158 <HAL_UART_IRQHandler+0x2b4>
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f9dd 	bl	800f500 <HAL_UART_ErrorCallback>
 800f146:	e007      	b.n	800f158 <HAL_UART_IRQHandler+0x2b4>
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 f9d9 	bl	800f500 <HAL_UART_ErrorCallback>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f156:	e1bf      	b.n	800f4d8 <HAL_UART_IRQHandler+0x634>
 800f158:	bf00      	nop
 800f15a:	e1bd      	b.n	800f4d8 <HAL_UART_IRQHandler+0x634>
 800f15c:	10000001 	.word	0x10000001
 800f160:	04000120 	.word	0x04000120
 800f164:	0800ff63 	.word	0x0800ff63
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	f040 8153 	bne.w	800f418 <HAL_UART_IRQHandler+0x574>
 800f172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f176:	f003 0310 	and.w	r3, r3, #16
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f000 814c 	beq.w	800f418 <HAL_UART_IRQHandler+0x574>
 800f180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f184:	f003 0310 	and.w	r3, r3, #16
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 8145 	beq.w	800f418 <HAL_UART_IRQHandler+0x574>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2210      	movs	r2, #16
 800f194:	621a      	str	r2, [r3, #32]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a0:	2b40      	cmp	r3, #64	; 0x40
 800f1a2:	f040 80bb 	bne.w	800f31c <HAL_UART_IRQHandler+0x478>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f1b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f000 818f 	beq.w	800f4dc <HAL_UART_IRQHandler+0x638>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	f080 8187 	bcs.w	800f4dc <HAL_UART_IRQHandler+0x638>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f1d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f003 0320 	and.w	r3, r3, #32
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f040 8087 	bne.w	800f2fa <HAL_UART_IRQHandler+0x456>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f1f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f1f8:	e853 3f00 	ldrex	r3, [r3]
 800f1fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	461a      	mov	r2, r3
 800f212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f21a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f21e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f226:	e841 2300 	strex	r3, r2, [r1]
 800f22a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f22e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1da      	bne.n	800f1ec <HAL_UART_IRQHandler+0x348>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	3308      	adds	r3, #8
 800f23c:	677b      	str	r3, [r7, #116]	; 0x74
 800f23e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f240:	e853 3f00 	ldrex	r3, [r3]
 800f244:	673b      	str	r3, [r7, #112]	; 0x70
 800f246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f248:	f023 0301 	bic.w	r3, r3, #1
 800f24c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	3308      	adds	r3, #8
 800f256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f25a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f25e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f260:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f266:	e841 2300 	strex	r3, r2, [r1]
 800f26a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f26c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d1e1      	bne.n	800f236 <HAL_UART_IRQHandler+0x392>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	3308      	adds	r3, #8
 800f278:	663b      	str	r3, [r7, #96]	; 0x60
 800f27a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f27c:	e853 3f00 	ldrex	r3, [r3]
 800f280:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	3308      	adds	r3, #8
 800f292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f296:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f298:	66bb      	str	r3, [r7, #104]	; 0x68
 800f29a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f29c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f29e:	e841 2300 	strex	r3, r2, [r1]
 800f2a2:	667b      	str	r3, [r7, #100]	; 0x64
 800f2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1e3      	bne.n	800f272 <HAL_UART_IRQHandler+0x3ce>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2220      	movs	r2, #32
 800f2ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2c0:	e853 3f00 	ldrex	r3, [r3]
 800f2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2c8:	f023 0310 	bic.w	r3, r3, #16
 800f2cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2da:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2dc:	657a      	str	r2, [r7, #84]	; 0x54
 800f2de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	653b      	str	r3, [r7, #80]	; 0x50
 800f2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e4      	bne.n	800f2b8 <HAL_UART_IRQHandler+0x414>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fb f9ef 	bl	800a6d8 <HAL_DMA_Abort>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	671a      	str	r2, [r3, #112]	; 0x70
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	b29b      	uxth	r3, r3
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f8fd 	bl	800f514 <HAL_UARTEx_RxEventCallback>
 800f31a:	e0df      	b.n	800f4dc <HAL_UART_IRQHandler+0x638>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f328:	b29b      	uxth	r3, r3
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f336:	b29b      	uxth	r3, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f000 80d1 	beq.w	800f4e0 <HAL_UART_IRQHandler+0x63c>
 800f33e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 80cc 	beq.w	800f4e0 <HAL_UART_IRQHandler+0x63c>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f350:	e853 3f00 	ldrex	r3, [r3]
 800f354:	637b      	str	r3, [r7, #52]	; 0x34
 800f356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f35c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	461a      	mov	r2, r3
 800f366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f36a:	647b      	str	r3, [r7, #68]	; 0x44
 800f36c:	643a      	str	r2, [r7, #64]	; 0x40
 800f36e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f372:	e841 2300 	strex	r3, r2, [r1]
 800f376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1e4      	bne.n	800f348 <HAL_UART_IRQHandler+0x4a4>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	3308      	adds	r3, #8
 800f384:	627b      	str	r3, [r7, #36]	; 0x24
 800f386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f388:	e853 3f00 	ldrex	r3, [r3]
 800f38c:	623b      	str	r3, [r7, #32]
 800f38e:	6a3b      	ldr	r3, [r7, #32]
 800f390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f394:	f023 0301 	bic.w	r3, r3, #1
 800f398:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f3a6:	633a      	str	r2, [r7, #48]	; 0x30
 800f3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ae:	e841 2300 	strex	r3, r2, [r1]
 800f3b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1e1      	bne.n	800f37e <HAL_UART_IRQHandler+0x4da>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2220      	movs	r2, #32
 800f3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	675a      	str	r2, [r3, #116]	; 0x74
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	613b      	str	r3, [r7, #16]
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	e853 3f00 	ldrex	r3, [r3]
 800f3da:	60fb      	str	r3, [r7, #12]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f023 0310 	bic.w	r3, r3, #16
 800f3e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f3f0:	61fb      	str	r3, [r7, #28]
 800f3f2:	61ba      	str	r2, [r7, #24]
 800f3f4:	69b9      	ldr	r1, [r7, #24]
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	e841 2300 	strex	r3, r2, [r1]
 800f3fc:	617b      	str	r3, [r7, #20]
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1e4      	bne.n	800f3ce <HAL_UART_IRQHandler+0x52a>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2202      	movs	r2, #2
 800f408:	671a      	str	r2, [r3, #112]	; 0x70
 800f40a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f87f 	bl	800f514 <HAL_UARTEx_RxEventCallback>
 800f416:	e063      	b.n	800f4e0 <HAL_UART_IRQHandler+0x63c>
 800f418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00e      	beq.n	800f442 <HAL_UART_IRQHandler+0x59e>
 800f424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d008      	beq.n	800f442 <HAL_UART_IRQHandler+0x59e>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f438:	621a      	str	r2, [r3, #32]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 fdd2 	bl	800ffe4 <HAL_UARTEx_WakeupCallback>
 800f440:	e051      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d014      	beq.n	800f478 <HAL_UART_IRQHandler+0x5d4>
 800f44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f456:	2b00      	cmp	r3, #0
 800f458:	d105      	bne.n	800f466 <HAL_UART_IRQHandler+0x5c2>
 800f45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f45e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f462:	2b00      	cmp	r3, #0
 800f464:	d008      	beq.n	800f478 <HAL_UART_IRQHandler+0x5d4>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d03a      	beq.n	800f4e4 <HAL_UART_IRQHandler+0x640>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	4798      	blx	r3
 800f476:	e035      	b.n	800f4e4 <HAL_UART_IRQHandler+0x640>
 800f478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f480:	2b00      	cmp	r3, #0
 800f482:	d009      	beq.n	800f498 <HAL_UART_IRQHandler+0x5f4>
 800f484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <HAL_UART_IRQHandler+0x5f4>
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fd7c 	bl	800ff8e <UART_EndTransmit_IT>
 800f496:	e026      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d009      	beq.n	800f4b8 <HAL_UART_IRQHandler+0x614>
 800f4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <HAL_UART_IRQHandler+0x614>
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fdab 	bl	801000c <HAL_UARTEx_TxFifoEmptyCallback>
 800f4b6:	e016      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d010      	beq.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	da0c      	bge.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fd93 	bl	800fff8 <HAL_UARTEx_RxFifoFullCallback>
 800f4d2:	e008      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4d4:	bf00      	nop
 800f4d6:	e006      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4d8:	bf00      	nop
 800f4da:	e004      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4dc:	bf00      	nop
 800f4de:	e002      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4e0:	bf00      	nop
 800f4e2:	e000      	b.n	800f4e6 <HAL_UART_IRQHandler+0x642>
 800f4e4:	bf00      	nop
 800f4e6:	37e8      	adds	r7, #232	; 0xe8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <HAL_UART_TxCpltCallback>:
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <HAL_UART_ErrorCallback>:
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	bf00      	nop
 800f50a:	370c      	adds	r7, #12
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <HAL_UARTEx_RxEventCallback>:
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	807b      	strh	r3, [r7, #2]
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <UART_SetConfig>:
 800f52c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f530:	b08c      	sub	sp, #48	; 0x30
 800f532:	af00      	add	r7, sp, #0
 800f534:	6178      	str	r0, [r7, #20]
 800f536:	2300      	movs	r3, #0
 800f538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	689a      	ldr	r2, [r3, #8]
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	431a      	orrs	r2, r3
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	431a      	orrs	r2, r3
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	69db      	ldr	r3, [r3, #28]
 800f550:	4313      	orrs	r3, r2
 800f552:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	4baa      	ldr	r3, [pc, #680]	; (800f804 <UART_SetConfig+0x2d8>)
 800f55c:	4013      	ands	r3, r2
 800f55e:	697a      	ldr	r2, [r7, #20]
 800f560:	6812      	ldr	r2, [r2, #0]
 800f562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f564:	430b      	orrs	r3, r1
 800f566:	6013      	str	r3, [r2, #0]
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	68da      	ldr	r2, [r3, #12]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	430a      	orrs	r2, r1
 800f57c:	605a      	str	r2, [r3, #4]
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a9f      	ldr	r2, [pc, #636]	; (800f808 <UART_SetConfig+0x2dc>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d004      	beq.n	800f598 <UART_SetConfig+0x6c>
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	6a1b      	ldr	r3, [r3, #32]
 800f592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f594:	4313      	orrs	r3, r2
 800f596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f5a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	6812      	ldr	r2, [r2, #0]
 800f5aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5ac:	430b      	orrs	r3, r1
 800f5ae:	6093      	str	r3, [r2, #8]
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b6:	f023 010f 	bic.w	r1, r3, #15
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	430a      	orrs	r2, r1
 800f5c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a90      	ldr	r2, [pc, #576]	; (800f80c <UART_SetConfig+0x2e0>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d125      	bne.n	800f61c <UART_SetConfig+0xf0>
 800f5d0:	4b8f      	ldr	r3, [pc, #572]	; (800f810 <UART_SetConfig+0x2e4>)
 800f5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5d6:	f003 0303 	and.w	r3, r3, #3
 800f5da:	2b03      	cmp	r3, #3
 800f5dc:	d81a      	bhi.n	800f614 <UART_SetConfig+0xe8>
 800f5de:	a201      	add	r2, pc, #4	; (adr r2, 800f5e4 <UART_SetConfig+0xb8>)
 800f5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e4:	0800f5f5 	.word	0x0800f5f5
 800f5e8:	0800f605 	.word	0x0800f605
 800f5ec:	0800f5fd 	.word	0x0800f5fd
 800f5f0:	0800f60d 	.word	0x0800f60d
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5fa:	e116      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f602:	e112      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f604:	2304      	movs	r3, #4
 800f606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f60a:	e10e      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f60c:	2308      	movs	r3, #8
 800f60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f612:	e10a      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f614:	2310      	movs	r3, #16
 800f616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f61a:	e106      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a7c      	ldr	r2, [pc, #496]	; (800f814 <UART_SetConfig+0x2e8>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d138      	bne.n	800f698 <UART_SetConfig+0x16c>
 800f626:	4b7a      	ldr	r3, [pc, #488]	; (800f810 <UART_SetConfig+0x2e4>)
 800f628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f62c:	f003 030c 	and.w	r3, r3, #12
 800f630:	2b0c      	cmp	r3, #12
 800f632:	d82d      	bhi.n	800f690 <UART_SetConfig+0x164>
 800f634:	a201      	add	r2, pc, #4	; (adr r2, 800f63c <UART_SetConfig+0x110>)
 800f636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63a:	bf00      	nop
 800f63c:	0800f671 	.word	0x0800f671
 800f640:	0800f691 	.word	0x0800f691
 800f644:	0800f691 	.word	0x0800f691
 800f648:	0800f691 	.word	0x0800f691
 800f64c:	0800f681 	.word	0x0800f681
 800f650:	0800f691 	.word	0x0800f691
 800f654:	0800f691 	.word	0x0800f691
 800f658:	0800f691 	.word	0x0800f691
 800f65c:	0800f679 	.word	0x0800f679
 800f660:	0800f691 	.word	0x0800f691
 800f664:	0800f691 	.word	0x0800f691
 800f668:	0800f691 	.word	0x0800f691
 800f66c:	0800f689 	.word	0x0800f689
 800f670:	2300      	movs	r3, #0
 800f672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f676:	e0d8      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f678:	2302      	movs	r3, #2
 800f67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f67e:	e0d4      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f680:	2304      	movs	r3, #4
 800f682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f686:	e0d0      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f688:	2308      	movs	r3, #8
 800f68a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f68e:	e0cc      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f690:	2310      	movs	r3, #16
 800f692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f696:	e0c8      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a5e      	ldr	r2, [pc, #376]	; (800f818 <UART_SetConfig+0x2ec>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d125      	bne.n	800f6ee <UART_SetConfig+0x1c2>
 800f6a2:	4b5b      	ldr	r3, [pc, #364]	; (800f810 <UART_SetConfig+0x2e4>)
 800f6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f6ac:	2b30      	cmp	r3, #48	; 0x30
 800f6ae:	d016      	beq.n	800f6de <UART_SetConfig+0x1b2>
 800f6b0:	2b30      	cmp	r3, #48	; 0x30
 800f6b2:	d818      	bhi.n	800f6e6 <UART_SetConfig+0x1ba>
 800f6b4:	2b20      	cmp	r3, #32
 800f6b6:	d00a      	beq.n	800f6ce <UART_SetConfig+0x1a2>
 800f6b8:	2b20      	cmp	r3, #32
 800f6ba:	d814      	bhi.n	800f6e6 <UART_SetConfig+0x1ba>
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d002      	beq.n	800f6c6 <UART_SetConfig+0x19a>
 800f6c0:	2b10      	cmp	r3, #16
 800f6c2:	d008      	beq.n	800f6d6 <UART_SetConfig+0x1aa>
 800f6c4:	e00f      	b.n	800f6e6 <UART_SetConfig+0x1ba>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6cc:	e0ad      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f6ce:	2302      	movs	r3, #2
 800f6d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6d4:	e0a9      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f6d6:	2304      	movs	r3, #4
 800f6d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6dc:	e0a5      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f6de:	2308      	movs	r3, #8
 800f6e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6e4:	e0a1      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f6e6:	2310      	movs	r3, #16
 800f6e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6ec:	e09d      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a4a      	ldr	r2, [pc, #296]	; (800f81c <UART_SetConfig+0x2f0>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d125      	bne.n	800f744 <UART_SetConfig+0x218>
 800f6f8:	4b45      	ldr	r3, [pc, #276]	; (800f810 <UART_SetConfig+0x2e4>)
 800f6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f702:	2bc0      	cmp	r3, #192	; 0xc0
 800f704:	d016      	beq.n	800f734 <UART_SetConfig+0x208>
 800f706:	2bc0      	cmp	r3, #192	; 0xc0
 800f708:	d818      	bhi.n	800f73c <UART_SetConfig+0x210>
 800f70a:	2b80      	cmp	r3, #128	; 0x80
 800f70c:	d00a      	beq.n	800f724 <UART_SetConfig+0x1f8>
 800f70e:	2b80      	cmp	r3, #128	; 0x80
 800f710:	d814      	bhi.n	800f73c <UART_SetConfig+0x210>
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <UART_SetConfig+0x1f0>
 800f716:	2b40      	cmp	r3, #64	; 0x40
 800f718:	d008      	beq.n	800f72c <UART_SetConfig+0x200>
 800f71a:	e00f      	b.n	800f73c <UART_SetConfig+0x210>
 800f71c:	2300      	movs	r3, #0
 800f71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f722:	e082      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f724:	2302      	movs	r3, #2
 800f726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f72a:	e07e      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f72c:	2304      	movs	r3, #4
 800f72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f732:	e07a      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f734:	2308      	movs	r3, #8
 800f736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f73a:	e076      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f73c:	2310      	movs	r3, #16
 800f73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f742:	e072      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a35      	ldr	r2, [pc, #212]	; (800f820 <UART_SetConfig+0x2f4>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d12a      	bne.n	800f7a4 <UART_SetConfig+0x278>
 800f74e:	4b30      	ldr	r3, [pc, #192]	; (800f810 <UART_SetConfig+0x2e4>)
 800f750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f75c:	d01a      	beq.n	800f794 <UART_SetConfig+0x268>
 800f75e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f762:	d81b      	bhi.n	800f79c <UART_SetConfig+0x270>
 800f764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f768:	d00c      	beq.n	800f784 <UART_SetConfig+0x258>
 800f76a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f76e:	d815      	bhi.n	800f79c <UART_SetConfig+0x270>
 800f770:	2b00      	cmp	r3, #0
 800f772:	d003      	beq.n	800f77c <UART_SetConfig+0x250>
 800f774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f778:	d008      	beq.n	800f78c <UART_SetConfig+0x260>
 800f77a:	e00f      	b.n	800f79c <UART_SetConfig+0x270>
 800f77c:	2300      	movs	r3, #0
 800f77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f782:	e052      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f784:	2302      	movs	r3, #2
 800f786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f78a:	e04e      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f78c:	2304      	movs	r3, #4
 800f78e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f792:	e04a      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f794:	2308      	movs	r3, #8
 800f796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f79a:	e046      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f79c:	2310      	movs	r3, #16
 800f79e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7a2:	e042      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a17      	ldr	r2, [pc, #92]	; (800f808 <UART_SetConfig+0x2dc>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d13a      	bne.n	800f824 <UART_SetConfig+0x2f8>
 800f7ae:	4b18      	ldr	r3, [pc, #96]	; (800f810 <UART_SetConfig+0x2e4>)
 800f7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f7b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7bc:	d01a      	beq.n	800f7f4 <UART_SetConfig+0x2c8>
 800f7be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7c2:	d81b      	bhi.n	800f7fc <UART_SetConfig+0x2d0>
 800f7c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7c8:	d00c      	beq.n	800f7e4 <UART_SetConfig+0x2b8>
 800f7ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7ce:	d815      	bhi.n	800f7fc <UART_SetConfig+0x2d0>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d003      	beq.n	800f7dc <UART_SetConfig+0x2b0>
 800f7d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7d8:	d008      	beq.n	800f7ec <UART_SetConfig+0x2c0>
 800f7da:	e00f      	b.n	800f7fc <UART_SetConfig+0x2d0>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7e2:	e022      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7ea:	e01e      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f7ec:	2304      	movs	r3, #4
 800f7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7f2:	e01a      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f7f4:	2308      	movs	r3, #8
 800f7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7fa:	e016      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f7fc:	2310      	movs	r3, #16
 800f7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f802:	e012      	b.n	800f82a <UART_SetConfig+0x2fe>
 800f804:	cfff69f3 	.word	0xcfff69f3
 800f808:	40008000 	.word	0x40008000
 800f80c:	40013800 	.word	0x40013800
 800f810:	40021000 	.word	0x40021000
 800f814:	40004400 	.word	0x40004400
 800f818:	40004800 	.word	0x40004800
 800f81c:	40004c00 	.word	0x40004c00
 800f820:	40005000 	.word	0x40005000
 800f824:	2310      	movs	r3, #16
 800f826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4aae      	ldr	r2, [pc, #696]	; (800fae8 <UART_SetConfig+0x5bc>)
 800f830:	4293      	cmp	r3, r2
 800f832:	f040 8097 	bne.w	800f964 <UART_SetConfig+0x438>
 800f836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f83a:	2b08      	cmp	r3, #8
 800f83c:	d823      	bhi.n	800f886 <UART_SetConfig+0x35a>
 800f83e:	a201      	add	r2, pc, #4	; (adr r2, 800f844 <UART_SetConfig+0x318>)
 800f840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f844:	0800f869 	.word	0x0800f869
 800f848:	0800f887 	.word	0x0800f887
 800f84c:	0800f871 	.word	0x0800f871
 800f850:	0800f887 	.word	0x0800f887
 800f854:	0800f877 	.word	0x0800f877
 800f858:	0800f887 	.word	0x0800f887
 800f85c:	0800f887 	.word	0x0800f887
 800f860:	0800f887 	.word	0x0800f887
 800f864:	0800f87f 	.word	0x0800f87f
 800f868:	f7fd ff62 	bl	800d730 <HAL_RCC_GetPCLK1Freq>
 800f86c:	6278      	str	r0, [r7, #36]	; 0x24
 800f86e:	e010      	b.n	800f892 <UART_SetConfig+0x366>
 800f870:	4b9e      	ldr	r3, [pc, #632]	; (800faec <UART_SetConfig+0x5c0>)
 800f872:	627b      	str	r3, [r7, #36]	; 0x24
 800f874:	e00d      	b.n	800f892 <UART_SetConfig+0x366>
 800f876:	f7fd feed 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 800f87a:	6278      	str	r0, [r7, #36]	; 0x24
 800f87c:	e009      	b.n	800f892 <UART_SetConfig+0x366>
 800f87e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f882:	627b      	str	r3, [r7, #36]	; 0x24
 800f884:	e005      	b.n	800f892 <UART_SetConfig+0x366>
 800f886:	2300      	movs	r3, #0
 800f888:	627b      	str	r3, [r7, #36]	; 0x24
 800f88a:	2301      	movs	r3, #1
 800f88c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f890:	bf00      	nop
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	2b00      	cmp	r3, #0
 800f896:	f000 8130 	beq.w	800fafa <UART_SetConfig+0x5ce>
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89e:	4a94      	ldr	r2, [pc, #592]	; (800faf0 <UART_SetConfig+0x5c4>)
 800f8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8ac:	61bb      	str	r3, [r7, #24]
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	685a      	ldr	r2, [r3, #4]
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	4413      	add	r3, r2
 800f8b8:	69ba      	ldr	r2, [r7, #24]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d305      	bcc.n	800f8ca <UART_SetConfig+0x39e>
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	031b      	lsls	r3, r3, #12
 800f8c4:	69ba      	ldr	r2, [r7, #24]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d903      	bls.n	800f8d2 <UART_SetConfig+0x3a6>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f8d0:	e113      	b.n	800fafa <UART_SetConfig+0x5ce>
 800f8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	60bb      	str	r3, [r7, #8]
 800f8d8:	60fa      	str	r2, [r7, #12]
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	4a84      	ldr	r2, [pc, #528]	; (800faf0 <UART_SetConfig+0x5c4>)
 800f8e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	603b      	str	r3, [r7, #0]
 800f8ea:	607a      	str	r2, [r7, #4]
 800f8ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f8f4:	f7f1 f9f0 	bl	8000cd8 <__aeabi_uldivmod>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	4610      	mov	r0, r2
 800f8fe:	4619      	mov	r1, r3
 800f900:	f04f 0200 	mov.w	r2, #0
 800f904:	f04f 0300 	mov.w	r3, #0
 800f908:	020b      	lsls	r3, r1, #8
 800f90a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f90e:	0202      	lsls	r2, r0, #8
 800f910:	6979      	ldr	r1, [r7, #20]
 800f912:	6849      	ldr	r1, [r1, #4]
 800f914:	0849      	lsrs	r1, r1, #1
 800f916:	2000      	movs	r0, #0
 800f918:	460c      	mov	r4, r1
 800f91a:	4605      	mov	r5, r0
 800f91c:	eb12 0804 	adds.w	r8, r2, r4
 800f920:	eb43 0905 	adc.w	r9, r3, r5
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	469a      	mov	sl, r3
 800f92c:	4693      	mov	fp, r2
 800f92e:	4652      	mov	r2, sl
 800f930:	465b      	mov	r3, fp
 800f932:	4640      	mov	r0, r8
 800f934:	4649      	mov	r1, r9
 800f936:	f7f1 f9cf 	bl	8000cd8 <__aeabi_uldivmod>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	4613      	mov	r3, r2
 800f940:	623b      	str	r3, [r7, #32]
 800f942:	6a3b      	ldr	r3, [r7, #32]
 800f944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f948:	d308      	bcc.n	800f95c <UART_SetConfig+0x430>
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f950:	d204      	bcs.n	800f95c <UART_SetConfig+0x430>
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6a3a      	ldr	r2, [r7, #32]
 800f958:	60da      	str	r2, [r3, #12]
 800f95a:	e0ce      	b.n	800fafa <UART_SetConfig+0x5ce>
 800f95c:	2301      	movs	r3, #1
 800f95e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f962:	e0ca      	b.n	800fafa <UART_SetConfig+0x5ce>
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	69db      	ldr	r3, [r3, #28]
 800f968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f96c:	d166      	bne.n	800fa3c <UART_SetConfig+0x510>
 800f96e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f972:	2b08      	cmp	r3, #8
 800f974:	d827      	bhi.n	800f9c6 <UART_SetConfig+0x49a>
 800f976:	a201      	add	r2, pc, #4	; (adr r2, 800f97c <UART_SetConfig+0x450>)
 800f978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f97c:	0800f9a1 	.word	0x0800f9a1
 800f980:	0800f9a9 	.word	0x0800f9a9
 800f984:	0800f9b1 	.word	0x0800f9b1
 800f988:	0800f9c7 	.word	0x0800f9c7
 800f98c:	0800f9b7 	.word	0x0800f9b7
 800f990:	0800f9c7 	.word	0x0800f9c7
 800f994:	0800f9c7 	.word	0x0800f9c7
 800f998:	0800f9c7 	.word	0x0800f9c7
 800f99c:	0800f9bf 	.word	0x0800f9bf
 800f9a0:	f7fd fec6 	bl	800d730 <HAL_RCC_GetPCLK1Freq>
 800f9a4:	6278      	str	r0, [r7, #36]	; 0x24
 800f9a6:	e014      	b.n	800f9d2 <UART_SetConfig+0x4a6>
 800f9a8:	f7fd fed8 	bl	800d75c <HAL_RCC_GetPCLK2Freq>
 800f9ac:	6278      	str	r0, [r7, #36]	; 0x24
 800f9ae:	e010      	b.n	800f9d2 <UART_SetConfig+0x4a6>
 800f9b0:	4b4e      	ldr	r3, [pc, #312]	; (800faec <UART_SetConfig+0x5c0>)
 800f9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800f9b4:	e00d      	b.n	800f9d2 <UART_SetConfig+0x4a6>
 800f9b6:	f7fd fe4d 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 800f9ba:	6278      	str	r0, [r7, #36]	; 0x24
 800f9bc:	e009      	b.n	800f9d2 <UART_SetConfig+0x4a6>
 800f9be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f9c4:	e005      	b.n	800f9d2 <UART_SetConfig+0x4a6>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f9d0:	bf00      	nop
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 8090 	beq.w	800fafa <UART_SetConfig+0x5ce>
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9de:	4a44      	ldr	r2, [pc, #272]	; (800faf0 <UART_SetConfig+0x5c4>)
 800f9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ec:	005a      	lsls	r2, r3, #1
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	085b      	lsrs	r3, r3, #1
 800f9f4:	441a      	add	r2, r3
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9fe:	623b      	str	r3, [r7, #32]
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	2b0f      	cmp	r3, #15
 800fa04:	d916      	bls.n	800fa34 <UART_SetConfig+0x508>
 800fa06:	6a3b      	ldr	r3, [r7, #32]
 800fa08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa0c:	d212      	bcs.n	800fa34 <UART_SetConfig+0x508>
 800fa0e:	6a3b      	ldr	r3, [r7, #32]
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	f023 030f 	bic.w	r3, r3, #15
 800fa16:	83fb      	strh	r3, [r7, #30]
 800fa18:	6a3b      	ldr	r3, [r7, #32]
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	8bfb      	ldrh	r3, [r7, #30]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	83fb      	strh	r3, [r7, #30]
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	8bfa      	ldrh	r2, [r7, #30]
 800fa30:	60da      	str	r2, [r3, #12]
 800fa32:	e062      	b.n	800fafa <UART_SetConfig+0x5ce>
 800fa34:	2301      	movs	r3, #1
 800fa36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fa3a:	e05e      	b.n	800fafa <UART_SetConfig+0x5ce>
 800fa3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa40:	2b08      	cmp	r3, #8
 800fa42:	d828      	bhi.n	800fa96 <UART_SetConfig+0x56a>
 800fa44:	a201      	add	r2, pc, #4	; (adr r2, 800fa4c <UART_SetConfig+0x520>)
 800fa46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa4a:	bf00      	nop
 800fa4c:	0800fa71 	.word	0x0800fa71
 800fa50:	0800fa79 	.word	0x0800fa79
 800fa54:	0800fa81 	.word	0x0800fa81
 800fa58:	0800fa97 	.word	0x0800fa97
 800fa5c:	0800fa87 	.word	0x0800fa87
 800fa60:	0800fa97 	.word	0x0800fa97
 800fa64:	0800fa97 	.word	0x0800fa97
 800fa68:	0800fa97 	.word	0x0800fa97
 800fa6c:	0800fa8f 	.word	0x0800fa8f
 800fa70:	f7fd fe5e 	bl	800d730 <HAL_RCC_GetPCLK1Freq>
 800fa74:	6278      	str	r0, [r7, #36]	; 0x24
 800fa76:	e014      	b.n	800faa2 <UART_SetConfig+0x576>
 800fa78:	f7fd fe70 	bl	800d75c <HAL_RCC_GetPCLK2Freq>
 800fa7c:	6278      	str	r0, [r7, #36]	; 0x24
 800fa7e:	e010      	b.n	800faa2 <UART_SetConfig+0x576>
 800fa80:	4b1a      	ldr	r3, [pc, #104]	; (800faec <UART_SetConfig+0x5c0>)
 800fa82:	627b      	str	r3, [r7, #36]	; 0x24
 800fa84:	e00d      	b.n	800faa2 <UART_SetConfig+0x576>
 800fa86:	f7fd fde5 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 800fa8a:	6278      	str	r0, [r7, #36]	; 0x24
 800fa8c:	e009      	b.n	800faa2 <UART_SetConfig+0x576>
 800fa8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa92:	627b      	str	r3, [r7, #36]	; 0x24
 800fa94:	e005      	b.n	800faa2 <UART_SetConfig+0x576>
 800fa96:	2300      	movs	r3, #0
 800fa98:	627b      	str	r3, [r7, #36]	; 0x24
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800faa0:	bf00      	nop
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d028      	beq.n	800fafa <UART_SetConfig+0x5ce>
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faac:	4a10      	ldr	r2, [pc, #64]	; (800faf0 <UART_SetConfig+0x5c4>)
 800faae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fab2:	461a      	mov	r2, r3
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	fbb3 f2f2 	udiv	r2, r3, r2
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	085b      	lsrs	r3, r3, #1
 800fac0:	441a      	add	r2, r3
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800faca:	623b      	str	r3, [r7, #32]
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	2b0f      	cmp	r3, #15
 800fad0:	d910      	bls.n	800faf4 <UART_SetConfig+0x5c8>
 800fad2:	6a3b      	ldr	r3, [r7, #32]
 800fad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fad8:	d20c      	bcs.n	800faf4 <UART_SetConfig+0x5c8>
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	b29a      	uxth	r2, r3
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	60da      	str	r2, [r3, #12]
 800fae4:	e009      	b.n	800fafa <UART_SetConfig+0x5ce>
 800fae6:	bf00      	nop
 800fae8:	40008000 	.word	0x40008000
 800faec:	00f42400 	.word	0x00f42400
 800faf0:	08018320 	.word	0x08018320
 800faf4:	2301      	movs	r3, #1
 800faf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2201      	movs	r2, #1
 800fb06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	675a      	str	r2, [r3, #116]	; 0x74
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2200      	movs	r2, #0
 800fb14:	679a      	str	r2, [r3, #120]	; 0x78
 800fb16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3730      	adds	r7, #48	; 0x30
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fb24 <UART_AdvFeatureConfig>:
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb30:	f003 0308 	and.w	r3, r3, #8
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00a      	beq.n	800fb4e <UART_AdvFeatureConfig+0x2a>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	430a      	orrs	r2, r1
 800fb4c:	605a      	str	r2, [r3, #4]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00a      	beq.n	800fb70 <UART_AdvFeatureConfig+0x4c>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	430a      	orrs	r2, r1
 800fb6e:	605a      	str	r2, [r3, #4]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb74:	f003 0302 	and.w	r3, r3, #2
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00a      	beq.n	800fb92 <UART_AdvFeatureConfig+0x6e>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	430a      	orrs	r2, r1
 800fb90:	605a      	str	r2, [r3, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb96:	f003 0304 	and.w	r3, r3, #4
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00a      	beq.n	800fbb4 <UART_AdvFeatureConfig+0x90>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	430a      	orrs	r2, r1
 800fbb2:	605a      	str	r2, [r3, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb8:	f003 0310 	and.w	r3, r3, #16
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00a      	beq.n	800fbd6 <UART_AdvFeatureConfig+0xb2>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	689b      	ldr	r3, [r3, #8]
 800fbc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	430a      	orrs	r2, r1
 800fbd4:	609a      	str	r2, [r3, #8]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbda:	f003 0320 	and.w	r3, r3, #32
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00a      	beq.n	800fbf8 <UART_AdvFeatureConfig+0xd4>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	430a      	orrs	r2, r1
 800fbf6:	609a      	str	r2, [r3, #8]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d01a      	beq.n	800fc3a <UART_AdvFeatureConfig+0x116>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	430a      	orrs	r2, r1
 800fc18:	605a      	str	r2, [r3, #4]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc22:	d10a      	bne.n	800fc3a <UART_AdvFeatureConfig+0x116>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	430a      	orrs	r2, r1
 800fc38:	605a      	str	r2, [r3, #4]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00a      	beq.n	800fc5c <UART_AdvFeatureConfig+0x138>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	430a      	orrs	r2, r1
 800fc5a:	605a      	str	r2, [r3, #4]
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <UART_CheckIdleState>:
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b098      	sub	sp, #96	; 0x60
 800fc6c:	af02      	add	r7, sp, #8
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800fc78:	f7fa fb48 	bl	800a30c <HAL_GetTick>
 800fc7c:	6578      	str	r0, [r7, #84]	; 0x54
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f003 0308 	and.w	r3, r3, #8
 800fc88:	2b08      	cmp	r3, #8
 800fc8a:	d12f      	bne.n	800fcec <UART_CheckIdleState+0x84>
 800fc8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc94:	2200      	movs	r2, #0
 800fc96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 f88e 	bl	800fdbc <UART_WaitOnFlagUntilTimeout>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d022      	beq.n	800fcec <UART_CheckIdleState+0x84>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	e853 3f00 	ldrex	r3, [r3]
 800fcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800fcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcba:	653b      	str	r3, [r7, #80]	; 0x50
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc4:	647b      	str	r3, [r7, #68]	; 0x44
 800fcc6:	643a      	str	r2, [r7, #64]	; 0x40
 800fcc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fcca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fccc:	e841 2300 	strex	r3, r2, [r1]
 800fcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fcd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d1e6      	bne.n	800fca6 <UART_CheckIdleState+0x3e>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2220      	movs	r2, #32
 800fcdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fce8:	2303      	movs	r3, #3
 800fcea:	e063      	b.n	800fdb4 <UART_CheckIdleState+0x14c>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f003 0304 	and.w	r3, r3, #4
 800fcf6:	2b04      	cmp	r3, #4
 800fcf8:	d149      	bne.n	800fd8e <UART_CheckIdleState+0x126>
 800fcfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd02:	2200      	movs	r2, #0
 800fd04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 f857 	bl	800fdbc <UART_WaitOnFlagUntilTimeout>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d03c      	beq.n	800fd8e <UART_CheckIdleState+0x126>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	627b      	str	r3, [r7, #36]	; 0x24
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	e853 3f00 	ldrex	r3, [r3]
 800fd20:	623b      	str	r3, [r7, #32]
 800fd22:	6a3b      	ldr	r3, [r7, #32]
 800fd24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd32:	633b      	str	r3, [r7, #48]	; 0x30
 800fd34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd3a:	e841 2300 	strex	r3, r2, [r1]
 800fd3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1e6      	bne.n	800fd14 <UART_CheckIdleState+0xac>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	3308      	adds	r3, #8
 800fd4c:	613b      	str	r3, [r7, #16]
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	e853 3f00 	ldrex	r3, [r3]
 800fd54:	60fb      	str	r3, [r7, #12]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f023 0301 	bic.w	r3, r3, #1
 800fd5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	3308      	adds	r3, #8
 800fd64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd66:	61fa      	str	r2, [r7, #28]
 800fd68:	61bb      	str	r3, [r7, #24]
 800fd6a:	69b9      	ldr	r1, [r7, #24]
 800fd6c:	69fa      	ldr	r2, [r7, #28]
 800fd6e:	e841 2300 	strex	r3, r2, [r1]
 800fd72:	617b      	str	r3, [r7, #20]
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d1e5      	bne.n	800fd46 <UART_CheckIdleState+0xde>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2220      	movs	r2, #32
 800fd7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fd8a:	2303      	movs	r3, #3
 800fd8c:	e012      	b.n	800fdb4 <UART_CheckIdleState+0x14c>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2220      	movs	r2, #32
 800fd92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2220      	movs	r2, #32
 800fd9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2200      	movs	r2, #0
 800fda2:	66da      	str	r2, [r3, #108]	; 0x6c
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	671a      	str	r2, [r3, #112]	; 0x70
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3758      	adds	r7, #88	; 0x58
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <UART_WaitOnFlagUntilTimeout>:
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	603b      	str	r3, [r7, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	71fb      	strb	r3, [r7, #7]
 800fdcc:	e04f      	b.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdd4:	d04b      	beq.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdd6:	f7fa fa99 	bl	800a30c <HAL_GetTick>
 800fdda:	4602      	mov	r2, r0
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	1ad3      	subs	r3, r2, r3
 800fde0:	69ba      	ldr	r2, [r7, #24]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d302      	bcc.n	800fdec <UART_WaitOnFlagUntilTimeout+0x30>
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <UART_WaitOnFlagUntilTimeout+0x34>
 800fdec:	2303      	movs	r3, #3
 800fdee:	e04e      	b.n	800fe8e <UART_WaitOnFlagUntilTimeout+0xd2>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f003 0304 	and.w	r3, r3, #4
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d037      	beq.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2b80      	cmp	r3, #128	; 0x80
 800fe02:	d034      	beq.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	2b40      	cmp	r3, #64	; 0x40
 800fe08:	d031      	beq.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	69db      	ldr	r3, [r3, #28]
 800fe10:	f003 0308 	and.w	r3, r3, #8
 800fe14:	2b08      	cmp	r3, #8
 800fe16:	d110      	bne.n	800fe3a <UART_WaitOnFlagUntilTimeout+0x7e>
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2208      	movs	r2, #8
 800fe1e:	621a      	str	r2, [r3, #32]
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 f838 	bl	800fe96 <UART_EndRxTransfer>
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2208      	movs	r2, #8
 800fe2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fe36:	2301      	movs	r3, #1
 800fe38:	e029      	b.n	800fe8e <UART_WaitOnFlagUntilTimeout+0xd2>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	69db      	ldr	r3, [r3, #28]
 800fe40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe48:	d111      	bne.n	800fe6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe52:	621a      	str	r2, [r3, #32]
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f000 f81e 	bl	800fe96 <UART_EndRxTransfer>
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2220      	movs	r2, #32
 800fe5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	e00f      	b.n	800fe8e <UART_WaitOnFlagUntilTimeout+0xd2>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	69da      	ldr	r2, [r3, #28]
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	4013      	ands	r3, r2
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	bf0c      	ite	eq
 800fe7e:	2301      	moveq	r3, #1
 800fe80:	2300      	movne	r3, #0
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	461a      	mov	r2, r3
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d0a0      	beq.n	800fdce <UART_WaitOnFlagUntilTimeout+0x12>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <UART_EndRxTransfer>:
 800fe96:	b480      	push	{r7}
 800fe98:	b095      	sub	sp, #84	; 0x54
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	637b      	str	r3, [r7, #52]	; 0x34
 800fea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea6:	e853 3f00 	ldrex	r3, [r3]
 800feaa:	633b      	str	r3, [r7, #48]	; 0x30
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800feb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	461a      	mov	r2, r3
 800feba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800febc:	643b      	str	r3, [r7, #64]	; 0x40
 800febe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fec4:	e841 2300 	strex	r3, r2, [r1]
 800fec8:	63bb      	str	r3, [r7, #56]	; 0x38
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1e6      	bne.n	800fe9e <UART_EndRxTransfer+0x8>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	3308      	adds	r3, #8
 800fed6:	623b      	str	r3, [r7, #32]
 800fed8:	6a3b      	ldr	r3, [r7, #32]
 800feda:	e853 3f00 	ldrex	r3, [r3]
 800fede:	61fb      	str	r3, [r7, #28]
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fee6:	f023 0301 	bic.w	r3, r3, #1
 800feea:	64bb      	str	r3, [r7, #72]	; 0x48
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	3308      	adds	r3, #8
 800fef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fef4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fef6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fefa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fefc:	e841 2300 	strex	r3, r2, [r1]
 800ff00:	627b      	str	r3, [r7, #36]	; 0x24
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d1e3      	bne.n	800fed0 <UART_EndRxTransfer+0x3a>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d118      	bne.n	800ff42 <UART_EndRxTransfer+0xac>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	60fb      	str	r3, [r7, #12]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	e853 3f00 	ldrex	r3, [r3]
 800ff1c:	60bb      	str	r3, [r7, #8]
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	f023 0310 	bic.w	r3, r3, #16
 800ff24:	647b      	str	r3, [r7, #68]	; 0x44
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff2e:	61bb      	str	r3, [r7, #24]
 800ff30:	617a      	str	r2, [r7, #20]
 800ff32:	6979      	ldr	r1, [r7, #20]
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	e841 2300 	strex	r3, r2, [r1]
 800ff3a:	613b      	str	r3, [r7, #16]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1e6      	bne.n	800ff10 <UART_EndRxTransfer+0x7a>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2220      	movs	r2, #32
 800ff46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	66da      	str	r2, [r3, #108]	; 0x6c
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	675a      	str	r2, [r3, #116]	; 0x74
 800ff56:	bf00      	nop
 800ff58:	3754      	adds	r7, #84	; 0x54
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <UART_DMAAbortOnError>:
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b084      	sub	sp, #16
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6e:	60fb      	str	r3, [r7, #12]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7ff fabd 	bl	800f500 <HAL_UART_ErrorCallback>
 800ff86:	bf00      	nop
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <UART_EndTransmit_IT>:
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b088      	sub	sp, #32
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	60fb      	str	r3, [r7, #12]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	e853 3f00 	ldrex	r3, [r3]
 800ffa2:	60bb      	str	r3, [r7, #8]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffaa:	61fb      	str	r3, [r7, #28]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	61bb      	str	r3, [r7, #24]
 800ffb6:	617a      	str	r2, [r7, #20]
 800ffb8:	6979      	ldr	r1, [r7, #20]
 800ffba:	69ba      	ldr	r2, [r7, #24]
 800ffbc:	e841 2300 	strex	r3, r2, [r1]
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1e6      	bne.n	800ff96 <UART_EndTransmit_IT+0x8>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2220      	movs	r2, #32
 800ffcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	679a      	str	r2, [r3, #120]	; 0x78
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff fa88 	bl	800f4ec <HAL_UART_TxCpltCallback>
 800ffdc:	bf00      	nop
 800ffde:	3720      	adds	r7, #32
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <HAL_UARTEx_WakeupCallback>:
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	bf00      	nop
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr

0800fff8 <HAL_UARTEx_RxFifoFullCallback>:
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <HAL_UARTEx_TxFifoEmptyCallback>:
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <HAL_UARTEx_DisableFifoMode>:
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801002e:	2b01      	cmp	r3, #1
 8010030:	d101      	bne.n	8010036 <HAL_UARTEx_DisableFifoMode+0x16>
 8010032:	2302      	movs	r3, #2
 8010034:	e027      	b.n	8010086 <HAL_UARTEx_DisableFifoMode+0x66>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2224      	movs	r2, #36	; 0x24
 8010042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	60fb      	str	r3, [r7, #12]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f022 0201 	bic.w	r2, r2, #1
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	665a      	str	r2, [r3, #100]	; 0x64
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	601a      	str	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2220      	movs	r2, #32
 8010078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8010084:	2300      	movs	r3, #0
 8010086:	4618      	mov	r0, r3
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <HAL_UARTEx_SetTxFifoThreshold>:
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d101      	bne.n	80100aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80100a6:	2302      	movs	r3, #2
 80100a8:	e02d      	b.n	8010106 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2201      	movs	r2, #1
 80100ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2224      	movs	r2, #36	; 0x24
 80100b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	60fb      	str	r3, [r7, #12]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f022 0201 	bic.w	r2, r2, #1
 80100d0:	601a      	str	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	683a      	ldr	r2, [r7, #0]
 80100e2:	430a      	orrs	r2, r1
 80100e4:	609a      	str	r2, [r3, #8]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f850 	bl	801018c <UARTEx_SetNbDataToProcess>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	601a      	str	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2220      	movs	r2, #32
 80100f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8010104:	2300      	movs	r3, #0
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <HAL_UARTEx_SetRxFifoThreshold>:
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	6039      	str	r1, [r7, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801011e:	2b01      	cmp	r3, #1
 8010120:	d101      	bne.n	8010126 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010122:	2302      	movs	r3, #2
 8010124:	e02d      	b.n	8010182 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2201      	movs	r2, #1
 801012a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2224      	movs	r2, #36	; 0x24
 8010132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60fb      	str	r3, [r7, #12]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f022 0201 	bic.w	r2, r2, #1
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	683a      	ldr	r2, [r7, #0]
 801015e:	430a      	orrs	r2, r1
 8010160:	609a      	str	r2, [r3, #8]
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 f812 	bl	801018c <UARTEx_SetNbDataToProcess>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2220      	movs	r2, #32
 8010174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8010180:	2300      	movs	r3, #0
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
	...

0801018c <UARTEx_SetNbDataToProcess>:
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010198:	2b00      	cmp	r3, #0
 801019a:	d108      	bne.n	80101ae <UARTEx_SetNbDataToProcess+0x22>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2201      	movs	r2, #1
 80101a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80101ac:	e031      	b.n	8010212 <UARTEx_SetNbDataToProcess+0x86>
 80101ae:	2308      	movs	r3, #8
 80101b0:	73fb      	strb	r3, [r7, #15]
 80101b2:	2308      	movs	r3, #8
 80101b4:	73bb      	strb	r3, [r7, #14]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	0e5b      	lsrs	r3, r3, #25
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	f003 0307 	and.w	r3, r3, #7
 80101c4:	737b      	strb	r3, [r7, #13]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	0f5b      	lsrs	r3, r3, #29
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f003 0307 	and.w	r3, r3, #7
 80101d4:	733b      	strb	r3, [r7, #12]
 80101d6:	7bbb      	ldrb	r3, [r7, #14]
 80101d8:	7b3a      	ldrb	r2, [r7, #12]
 80101da:	4911      	ldr	r1, [pc, #68]	; (8010220 <UARTEx_SetNbDataToProcess+0x94>)
 80101dc:	5c8a      	ldrb	r2, [r1, r2]
 80101de:	fb02 f303 	mul.w	r3, r2, r3
 80101e2:	7b3a      	ldrb	r2, [r7, #12]
 80101e4:	490f      	ldr	r1, [pc, #60]	; (8010224 <UARTEx_SetNbDataToProcess+0x98>)
 80101e6:	5c8a      	ldrb	r2, [r1, r2]
 80101e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
 80101f6:	7b7a      	ldrb	r2, [r7, #13]
 80101f8:	4909      	ldr	r1, [pc, #36]	; (8010220 <UARTEx_SetNbDataToProcess+0x94>)
 80101fa:	5c8a      	ldrb	r2, [r1, r2]
 80101fc:	fb02 f303 	mul.w	r3, r2, r3
 8010200:	7b7a      	ldrb	r2, [r7, #13]
 8010202:	4908      	ldr	r1, [pc, #32]	; (8010224 <UARTEx_SetNbDataToProcess+0x98>)
 8010204:	5c8a      	ldrb	r2, [r1, r2]
 8010206:	fb93 f3f2 	sdiv	r3, r3, r2
 801020a:	b29a      	uxth	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010212:	bf00      	nop
 8010214:	3714      	adds	r7, #20
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop
 8010220:	08018338 	.word	0x08018338
 8010224:	08018340 	.word	0x08018340

08010228 <_ZN17AbstractAllocatorD1Ev>:
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	4a04      	ldr	r2, [pc, #16]	; (8010244 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr
 8010244:	080182cc 	.word	0x080182cc

08010248 <_ZN17AbstractAllocatorD0Ev>:
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff ffe9 	bl	8010228 <_ZN17AbstractAllocatorD1Ev>
 8010256:	2108      	movs	r1, #8
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f002 fe7a 	bl	8012f52 <_ZdlPvj>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f002 fec5 	bl	8013004 <malloc>
 801027a:	4603      	mov	r3, r0
 801027c:	617b      	str	r3, [r7, #20]
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d105      	bne.n	8010290 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	3310      	adds	r3, #16
 801028a:	4618      	mov	r0, r3
 801028c:	f7f7 fd86 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	4618      	mov	r0, r3
 8010294:	3718      	adds	r7, #24
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <_ZN15SystemAllocator4freeEP14CanardInstancePv>:
 801029a:	b580      	push	{r7, lr}
 801029c:	b084      	sub	sp, #16
 801029e:	af00      	add	r7, sp, #0
 80102a0:	60f8      	str	r0, [r7, #12]
 80102a2:	60b9      	str	r1, [r7, #8]
 80102a4:	607a      	str	r2, [r7, #4]
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f002 feb4 	bl	8013014 <free>
 80102ac:	bf00      	nop
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <_ZN15SystemAllocatorD1Ev>:
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	4a05      	ldr	r2, [pc, #20]	; (80102d4 <_ZN15SystemAllocatorD1Ev+0x20>)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	601a      	str	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff ffaf 	bl	8010228 <_ZN17AbstractAllocatorD1Ev>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	08018350 	.word	0x08018350

080102d8 <_ZN15SystemAllocatorD0Ev>:
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7ff ffe7 	bl	80102b4 <_ZN15SystemAllocatorD1Ev>
 80102e6:	2108      	movs	r1, #8
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f002 fe32 	bl	8012f52 <_ZdlPvj>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
 80102f8:	b590      	push	{r4, r7, lr}
 80102fa:	b08b      	sub	sp, #44	; 0x2c
 80102fc:	af04      	add	r7, sp, #16
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	e9c7 2300 	strd	r2, r3, [r7]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	3308      	adds	r3, #8
 8010308:	4618      	mov	r0, r3
 801030a:	f000 f876 	bl	80103fa <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 801030e:	4603      	mov	r3, r0
 8010310:	f103 040c 	add.w	r4, r3, #12
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	3308      	adds	r3, #8
 8010318:	4618      	mov	r0, r3
 801031a:	f000 f86e 	bl	80103fa <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 801031e:	4603      	mov	r3, r0
 8010320:	f103 0120 	add.w	r1, r3, #32
 8010324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010326:	9302      	str	r3, [sp, #8]
 8010328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032a:	9301      	str	r3, [sp, #4]
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010334:	4620      	mov	r0, r4
 8010336:	f002 fb65 	bl	8012a04 <canardTxPush>
 801033a:	6178      	str	r0, [r7, #20]
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	f113 0f03 	cmn.w	r3, #3
 8010342:	d106      	bne.n	8010352 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	3310      	adds	r3, #16
 801034a:	4618      	mov	r0, r3
 801034c:	f7f7 fd26 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
 8010350:	e008      	b.n	8010364 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	2b00      	cmp	r3, #0
 8010356:	da05      	bge.n	8010364 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	3310      	adds	r3, #16
 801035e:	4618      	mov	r0, r3
 8010360:	f7f7 fd1c 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
 8010364:	371c      	adds	r7, #28
 8010366:	46bd      	mov	sp, r7
 8010368:	bd90      	pop	{r4, r7, pc}
	...

0801036c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
 801036c:	b590      	push	{r4, r7, lr}
 801036e:	b089      	sub	sp, #36	; 0x24
 8010370:	af04      	add	r7, sp, #16
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	607a      	str	r2, [r7, #4]
 8010376:	461a      	mov	r2, r3
 8010378:	460b      	mov	r3, r1
 801037a:	817b      	strh	r3, [r7, #10]
 801037c:	4613      	mov	r3, r2
 801037e:	727b      	strb	r3, [r7, #9]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	3308      	adds	r3, #8
 8010384:	4618      	mov	r0, r3
 8010386:	f000 f838 	bl	80103fa <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 801038a:	4603      	mov	r3, r0
 801038c:	f103 0020 	add.w	r0, r3, #32
 8010390:	897c      	ldrh	r4, [r7, #10]
 8010392:	7a79      	ldrb	r1, [r7, #9]
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	9302      	str	r3, [sp, #8]
 8010398:	4a0d      	ldr	r2, [pc, #52]	; (80103d0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 801039a:	f04f 0300 	mov.w	r3, #0
 801039e:	e9cd 2300 	strd	r2, r3, [sp]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	4622      	mov	r2, r4
 80103a6:	f002 fc7d 	bl	8012ca4 <canardRxSubscribe>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	bf14      	ite	ne
 80103b0:	2301      	movne	r3, #1
 80103b2:	2300      	moveq	r3, #0
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d005      	beq.n	80103c6 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	3310      	adds	r3, #16
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7f7 fceb 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
 80103c6:	bf00      	nop
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd90      	pop	{r4, r7, pc}
 80103ce:	bf00      	nop
 80103d0:	001e8480 	.word	0x001e8480

080103d4 <_ZN15CyphalInterface4loopEv>:
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3308      	adds	r3, #8
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 f80a 	bl	80103fa <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 80103e6:	4603      	mov	r3, r0
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	3208      	adds	r2, #8
 80103ec:	6812      	ldr	r2, [r2, #0]
 80103ee:	4618      	mov	r0, r3
 80103f0:	4790      	blx	r2
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 f805 	bl	8010412 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8010408:	4603      	mov	r3, r0
 801040a:	4618      	mov	r0, r3
 801040c:	3708      	adds	r7, #8
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
 8010412:	b580      	push	{r7, lr}
 8010414:	b082      	sub	sp, #8
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	f000 f805 	bl	801042c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8010422:	4603      	mov	r3, r0
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f806 	bl	8010448 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 801043c:	4603      	mov	r3, r0
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4618      	mov	r0, r3
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	4618      	mov	r0, r3
 8010454:	f000 f805 	bl	8010462 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010458:	4603      	mov	r3, r0
 801045a:	4618      	mov	r0, r3
 801045c:	3708      	adds	r7, #8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
 8010462:	b580      	push	{r7, lr}
 8010464:	b082      	sub	sp, #8
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 f805 	bl	801047a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010470:	4603      	mov	r3, r0
 8010472:	4618      	mov	r0, r3
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
 801047a:	b580      	push	{r7, lr}
 801047c:	b082      	sub	sp, #8
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4618      	mov	r0, r3
 8010486:	f000 f805 	bl	8010494 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 801048a:	4603      	mov	r3, r0
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4618      	mov	r0, r3
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <_Z16fdcan_dlc_to_lenm>:
 80104aa:	b480      	push	{r7}
 80104ac:	b085      	sub	sp, #20
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	0c1b      	lsrs	r3, r3, #16
 80104b6:	73fb      	strb	r3, [r7, #15]
 80104b8:	7bfb      	ldrb	r3, [r7, #15]
 80104ba:	2b08      	cmp	r3, #8
 80104bc:	d801      	bhi.n	80104c2 <_Z16fdcan_dlc_to_lenm+0x18>
 80104be:	7bfb      	ldrb	r3, [r7, #15]
 80104c0:	e009      	b.n	80104d6 <_Z16fdcan_dlc_to_lenm+0x2c>
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	2b0c      	cmp	r3, #12
 80104c6:	d803      	bhi.n	80104d0 <_Z16fdcan_dlc_to_lenm+0x26>
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
 80104ca:	3b06      	subs	r3, #6
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	e002      	b.n	80104d6 <_Z16fdcan_dlc_to_lenm+0x2c>
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
 80104d2:	3b0b      	subs	r3, #11
 80104d4:	011b      	lsls	r3, r3, #4
 80104d6:	4618      	mov	r0, r3
 80104d8:	3714      	adds	r7, #20
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr
	...

080104e4 <_ZL12delay_cyclest>:
 80104e4:	f1a0 0308 	sub.w	r3, r0, #8
 80104e8:	4a07      	ldr	r2, [pc, #28]	; (8010508 <_ZL12delay_cyclest+0x24>)
 80104ea:	fb82 1203 	smull	r1, r2, r2, r3
 80104ee:	17db      	asrs	r3, r3, #31
 80104f0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80104f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80104f8:	d004      	beq.n	8010504 <_ZL12delay_cyclest+0x20>
 80104fa:	bf00      	nop
 80104fc:	3b01      	subs	r3, #1
 80104fe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8010502:	d1fa      	bne.n	80104fa <_ZL12delay_cyclest+0x16>
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	66666667 	.word	0x66666667

0801050c <_ZN5G4CAN10len_to_dlcEj>:
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
 8010516:	4a05      	ldr	r2, [pc, #20]	; (801052c <_ZN5G4CAN10len_to_dlcEj+0x20>)
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801051e:	4618      	mov	r0, r3
 8010520:	370c      	adds	r7, #12
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop
 801052c:	08018360 	.word	0x08018360

08010530 <_ZN5G4CAN10dlc_to_lenEm>:
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
 801053a:	6838      	ldr	r0, [r7, #0]
 801053c:	f7ff ffb5 	bl	80104aa <_Z16fdcan_dlc_to_lenm>
 8010540:	4603      	mov	r3, r0
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <_ZN5G4CAN8can_loopEv>:
 801054a:	b580      	push	{r7, lr}
 801054c:	b086      	sub	sp, #24
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	e017      	b.n	8010584 <_ZN5G4CAN8can_loopEv+0x3a>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	330c      	adds	r3, #12
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f107 0208 	add.w	r2, r7, #8
 8010560:	4611      	mov	r1, r2
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	4798      	blx	r3
 8010566:	4603      	mov	r3, r0
 8010568:	75fb      	strb	r3, [r7, #23]
 801056a:	7dfb      	ldrb	r3, [r7, #23]
 801056c:	f083 0301 	eor.w	r3, r3, #1
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d115      	bne.n	80105a2 <_ZN5G4CAN8can_loopEv+0x58>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f107 0208 	add.w	r2, r7, #8
 801057c:	4611      	mov	r1, r2
 801057e:	4618      	mov	r0, r3
 8010580:	f000 f904 	bl	801078c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010588:	2140      	movs	r1, #64	; 0x40
 801058a:	4618      	mov	r0, r3
 801058c:	f7fa fdf2 	bl	800b174 <HAL_FDCAN_GetRxFifoFillLevel>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	bf14      	ite	ne
 8010596:	2301      	movne	r3, #1
 8010598:	2300      	moveq	r3, #0
 801059a:	b2db      	uxtb	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1d9      	bne.n	8010554 <_ZN5G4CAN8can_loopEv+0xa>
 80105a0:	e000      	b.n	80105a4 <_ZN5G4CAN8can_loopEv+0x5a>
 80105a2:	bf00      	nop
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f000 f944 	bl	8010834 <_ZN19AbstractCANProvider17process_canard_txEv>
 80105ac:	bf00      	nop
 80105ae:	3718      	adds	r7, #24
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <_ZN5G4CAN10read_frameEP11CanardFrame>:
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b08e      	sub	sp, #56	; 0x38
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
 80105be:	f04f 33ff 	mov.w	r3, #4294967295
 80105c2:	637b      	str	r3, [r7, #52]	; 0x34
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c8:	2140      	movs	r1, #64	; 0x40
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fa fdd2 	bl	800b174 <HAL_FDCAN_GetRxFifoFillLevel>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	bf14      	ite	ne
 80105d6:	2301      	movne	r3, #1
 80105d8:	2300      	moveq	r3, #0
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d002      	beq.n	80105e6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
 80105e0:	2340      	movs	r3, #64	; 0x40
 80105e2:	637b      	str	r3, [r7, #52]	; 0x34
 80105e4:	e00f      	b.n	8010606 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ea:	2141      	movs	r1, #65	; 0x41
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fa fdc1 	bl	800b174 <HAL_FDCAN_GetRxFifoFillLevel>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	bf14      	ite	ne
 80105f8:	2301      	movne	r3, #1
 80105fa:	2300      	moveq	r3, #0
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 8010602:	2341      	movs	r3, #65	; 0x41
 8010604:	637b      	str	r3, [r7, #52]	; 0x34
 8010606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060c:	d101      	bne.n	8010612 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
 801060e:	2300      	movs	r3, #0
 8010610:	e02e      	b.n	8010670 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
 8010612:	f107 030c 	add.w	r3, r7, #12
 8010616:	2228      	movs	r2, #40	; 0x28
 8010618:	2100      	movs	r1, #0
 801061a:	4618      	mov	r0, r3
 801061c:	f003 fd85 	bl	801412a <memset>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010624:	f107 020c 	add.w	r2, r7, #12
 8010628:	4b13      	ldr	r3, [pc, #76]	; (8010678 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 801062a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801062c:	f7fa fcc8 	bl	800afc0 <HAL_FDCAN_GetRxMessage>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	bf14      	ite	ne
 8010636:	2301      	movne	r3, #1
 8010638:	2300      	moveq	r3, #0
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	d005      	beq.n	801064c <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010644:	3310      	adds	r3, #16
 8010646:	4618      	mov	r0, r3
 8010648:	f7f7 fba8 	bl	8007d9c <_ZNKSt8functionIFvvEEclEv>
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3304      	adds	r3, #4
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	69ba      	ldr	r2, [r7, #24]
 801065c:	4611      	mov	r1, r2
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	4798      	blx	r3
 8010662:	4602      	mov	r2, r0
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	605a      	str	r2, [r3, #4]
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	4a03      	ldr	r2, [pc, #12]	; (8010678 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 801066c:	609a      	str	r2, [r3, #8]
 801066e:	2301      	movs	r3, #1
 8010670:	4618      	mov	r0, r3
 8010672:	3738      	adds	r7, #56	; 0x38
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	20000950 	.word	0x20000950

0801067c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:
 801067c:	b580      	push	{r7, lr}
 801067e:	b08c      	sub	sp, #48	; 0x30
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	60bb      	str	r3, [r7, #8]
 801068c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	2300      	movs	r3, #0
 8010694:	613b      	str	r3, [r7, #16]
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069a:	4a2a      	ldr	r2, [pc, #168]	; (8010744 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 801069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106a0:	617b      	str	r3, [r7, #20]
 80106a2:	2300      	movs	r3, #0
 80106a4:	61bb      	str	r3, [r7, #24]
 80106a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80106aa:	61fb      	str	r3, [r7, #28]
 80106ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80106b0:	623b      	str	r3, [r7, #32]
 80106b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80106b6:	627b      	str	r3, [r7, #36]	; 0x24
 80106b8:	2300      	movs	r3, #0
 80106ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80106bc:	2300      	movs	r3, #0
 80106be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106c0:	e006      	b.n	80106d0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
 80106c2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80106c6:	f7ff ff0d 	bl	80104e4 <_ZL12delay_cyclest>
 80106ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106cc:	3301      	adds	r3, #1
 80106ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fa fd6b 	bl	800b1b0 <HAL_FDCAN_GetTxFifoFreeLevel>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b03      	cmp	r3, #3
 80106de:	d004      	beq.n	80106ea <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	dc01      	bgt.n	80106ea <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 80106e6:	2301      	movs	r3, #1
 80106e8:	e000      	b.n	80106ec <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 80106ea:	2300      	movs	r3, #0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e8      	bne.n	80106c2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fa fd5b 	bl	800b1b0 <HAL_FDCAN_GetTxFifoFreeLevel>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b03      	cmp	r3, #3
 80106fe:	bf14      	ite	ne
 8010700:	2301      	movne	r3, #1
 8010702:	2300      	moveq	r3, #0
 8010704:	b2db      	uxtb	r3, r3
 8010706:	2b00      	cmp	r3, #0
 8010708:	d002      	beq.n	8010710 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
 801070a:	f04f 33ff 	mov.w	r3, #4294967295
 801070e:	e014      	b.n	801073a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010718:	f107 0308 	add.w	r3, r7, #8
 801071c:	4619      	mov	r1, r3
 801071e:	f7fa fc0b 	bl	800af38 <HAL_FDCAN_AddMessageToTxFifoQ>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	bf14      	ite	ne
 8010728:	2301      	movne	r3, #1
 801072a:	2300      	moveq	r3, #0
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
 8010732:	f04f 33ff 	mov.w	r3, #4294967295
 8010736:	e000      	b.n	801073a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	4618      	mov	r0, r3
 801073c:	3730      	adds	r7, #48	; 0x30
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	08018360 	.word	0x08018360

08010748 <_ZN5G4CAND1Ev>:
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	4a05      	ldr	r2, [pc, #20]	; (8010768 <_ZN5G4CAND1Ev+0x20>)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	f000 f8b1 	bl	80108c0 <_ZN19AbstractCANProviderD1Ev>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	3708      	adds	r7, #8
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	0801846c 	.word	0x0801846c

0801076c <_ZN5G4CAND0Ev>:
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f7ff ffe7 	bl	8010748 <_ZN5G4CAND1Ev>
 801077a:	2144      	movs	r1, #68	; 0x44
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f002 fbe8 	bl	8012f52 <_ZdlPvj>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b091      	sub	sp, #68	; 0x44
 8010790:	af04      	add	r7, sp, #16
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
 8010796:	f107 0310 	add.w	r3, r7, #16
 801079a:	2200      	movs	r2, #0
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	605a      	str	r2, [r3, #4]
 80107a0:	609a      	str	r2, [r3, #8]
 80107a2:	60da      	str	r2, [r3, #12]
 80107a4:	611a      	str	r2, [r3, #16]
 80107a6:	615a      	str	r2, [r3, #20]
 80107a8:	2300      	movs	r3, #0
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f103 0420 	add.w	r4, r3, #32
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f7 fb06 	bl	8007dc8 <_ZNKSt8functionIFyvEEclEv>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	f107 010c 	add.w	r1, r7, #12
 80107c4:	9103      	str	r1, [sp, #12]
 80107c6:	f107 0110 	add.w	r1, r7, #16
 80107ca:	9102      	str	r1, [sp, #8]
 80107cc:	2100      	movs	r1, #0
 80107ce:	9101      	str	r1, [sp, #4]
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	9100      	str	r1, [sp, #0]
 80107d4:	4620      	mov	r0, r4
 80107d6:	f002 f9d5 	bl	8012b84 <canardRxAccept>
 80107da:	4603      	mov	r3, r0
 80107dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80107e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d10e      	bne.n	8010806 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6a1b      	ldr	r3, [r3, #32]
 80107ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80107ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d010      	beq.n	8010816 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 80107f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f107 0210 	add.w	r2, r7, #16
 80107fe:	4611      	mov	r1, r2
 8010800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010802:	4798      	blx	r3
 8010804:	e007      	b.n	8010816 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 8010806:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00e      	beq.n	801082c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 801080e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010812:	2b01      	cmp	r3, #1
 8010814:	dc0a      	bgt.n	801082c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	2b00      	cmp	r3, #0
 801081a:	d008      	beq.n	801082e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	3220      	adds	r2, #32
 8010824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010826:	4610      	mov	r0, r2
 8010828:	4798      	blx	r3
 801082a:	e000      	b.n	801082e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 801082c:	bf00      	nop
 801082e:	3734      	adds	r7, #52	; 0x34
 8010830:	46bd      	mov	sp, r7
 8010832:	bd90      	pop	{r4, r7, pc}

08010834 <_ZN19AbstractCANProvider17process_canard_txEv>:
 8010834:	b5b0      	push	{r4, r5, r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	e036      	b.n	80108ac <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	330c      	adds	r3, #12
 8010842:	4618      	mov	r0, r3
 8010844:	f002 f968 	bl	8012b18 <canardTxPeek>
 8010848:	60f8      	str	r0, [r7, #12]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010850:	4313      	orrs	r3, r2
 8010852:	d00c      	beq.n	801086e <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801085e:	4618      	mov	r0, r3
 8010860:	f7f7 fab2 	bl	8007dc8 <_ZNKSt8functionIFyvEEclEv>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	42a2      	cmp	r2, r4
 801086a:	41ab      	sbcs	r3, r5
 801086c:	d201      	bcs.n	8010872 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 801086e:	2301      	movs	r3, #1
 8010870:	e000      	b.n	8010874 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 8010872:	2300      	movs	r3, #0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00a      	beq.n	801088e <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	3310      	adds	r3, #16
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	68f9      	ldr	r1, [r7, #12]
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	4798      	blx	r3
 8010886:	60b8      	str	r0, [r7, #8]
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	2b00      	cmp	r3, #0
 801088c:	db13      	blt.n	80108b6 <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f103 0520 	add.w	r5, r3, #32
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	330c      	adds	r3, #12
 801089c:	68f9      	ldr	r1, [r7, #12]
 801089e:	4618      	mov	r0, r3
 80108a0:	f002 f94f 	bl	8012b42 <canardTxPop>
 80108a4:	4603      	mov	r3, r0
 80108a6:	4619      	mov	r1, r3
 80108a8:	4628      	mov	r0, r5
 80108aa:	47a0      	blx	r4
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	695b      	ldr	r3, [r3, #20]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1c4      	bne.n	801083e <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
 80108b4:	e000      	b.n	80108b8 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
 80108b6:	bf00      	nop
 80108b8:	bf00      	nop
 80108ba:	3710      	adds	r7, #16
 80108bc:	46bd      	mov	sp, r7
 80108be:	bdb0      	pop	{r4, r5, r7, pc}

080108c0 <_ZN19AbstractCANProviderD1Ev>:
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	4a04      	ldr	r2, [pc, #16]	; (80108dc <_ZN19AbstractCANProviderD1Ev+0x1c>)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	08018490 	.word	0x08018490

080108e0 <_Z41__static_initialization_and_destruction_0ii>:
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d107      	bne.n	8010900 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d102      	bne.n	8010900 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80108fa:	4803      	ldr	r0, [pc, #12]	; (8010908 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80108fc:	f000 f806 	bl	801090c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
 8010900:	bf00      	nop
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	20000990 	.word	0x20000990

0801090c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
 801090c:	b590      	push	{r4, r7, lr}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	f7f8 f9b4 	bl	8008c84 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 801091c:	60f8      	str	r0, [r7, #12]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00c      	beq.n	8010940 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7f8 f879 	bl	8008a1e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 801092c:	4604      	mov	r4, r0
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f7f8 f906 	bl	8008b40 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8010934:	4603      	mov	r3, r0
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4619      	mov	r1, r3
 801093a:	4620      	mov	r0, r4
 801093c:	f7f8 f9af 	bl	8008c9e <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	3714      	adds	r7, #20
 801094c:	46bd      	mov	sp, r7
 801094e:	bd90      	pop	{r4, r7, pc}

08010950 <_GLOBAL__sub_I_queue>:
 8010950:	b580      	push	{r7, lr}
 8010952:	af00      	add	r7, sp, #0
 8010954:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010958:	2001      	movs	r0, #1
 801095a:	f7ff ffc1 	bl	80108e0 <_Z41__static_initialization_and_destruction_0ii>
 801095e:	bd80      	pop	{r7, pc}

08010960 <_GLOBAL__sub_D_queue>:
 8010960:	b580      	push	{r7, lr}
 8010962:	af00      	add	r7, sp, #0
 8010964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010968:	2000      	movs	r0, #0
 801096a:	f7ff ffb9 	bl	80108e0 <_Z41__static_initialization_and_destruction_0ii>
 801096e:	bd80      	pop	{r7, pc}

08010970 <cavlFindExtremum>:
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	70fb      	strb	r3, [r7, #3]
 801097c:	2300      	movs	r3, #0
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	60bb      	str	r3, [r7, #8]
 8010984:	e007      	b.n	8010996 <cavlFindExtremum+0x26>
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	78fb      	ldrb	r3, [r7, #3]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4413      	add	r3, r2
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	60bb      	str	r3, [r7, #8]
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1f4      	bne.n	8010986 <cavlFindExtremum+0x16>
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	4618      	mov	r0, r3
 80109a0:	3714      	adds	r7, #20
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
	...

080109ac <cavlPrivateRotate>:
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	460b      	mov	r3, r1
 80109b6:	70fb      	strb	r3, [r7, #3]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d014      	beq.n	80109e8 <cavlPrivateRotate+0x3c>
 80109be:	78fb      	ldrb	r3, [r7, #3]
 80109c0:	f083 0301 	eor.w	r3, r3, #1
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	009b      	lsls	r3, r3, #2
 80109ca:	4413      	add	r3, r2
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00a      	beq.n	80109e8 <cavlPrivateRotate+0x3c>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80109d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109dc:	db04      	blt.n	80109e8 <cavlPrivateRotate+0x3c>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	dd05      	ble.n	80109f4 <cavlPrivateRotate+0x48>
 80109e8:	4b2a      	ldr	r3, [pc, #168]	; (8010a94 <cavlPrivateRotate+0xe8>)
 80109ea:	4a2b      	ldr	r2, [pc, #172]	; (8010a98 <cavlPrivateRotate+0xec>)
 80109ec:	2162      	movs	r1, #98	; 0x62
 80109ee:	482b      	ldr	r0, [pc, #172]	; (8010a9c <cavlPrivateRotate+0xf0>)
 80109f0:	f002 fad8 	bl	8012fa4 <__assert_func>
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	f083 0301 	eor.w	r3, r3, #1
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	60fb      	str	r3, [r7, #12]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00e      	beq.n	8010a2c <cavlPrivateRotate+0x80>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	6879      	ldr	r1, [r7, #4]
 8010a1a:	4299      	cmp	r1, r3
 8010a1c:	bf0c      	ite	eq
 8010a1e:	2301      	moveq	r3, #1
 8010a20:	2300      	movne	r3, #0
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	4413      	add	r3, r2
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	605a      	str	r2, [r3, #4]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	78fb      	ldrb	r3, [r7, #3]
 8010a3c:	78fa      	ldrb	r2, [r7, #3]
 8010a3e:	f082 0201 	eor.w	r2, r2, #1
 8010a42:	b2d2      	uxtb	r2, r2
 8010a44:	4610      	mov	r0, r2
 8010a46:	68fa      	ldr	r2, [r7, #12]
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4413      	add	r3, r2
 8010a4c:	685a      	ldr	r2, [r3, #4]
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	0083      	lsls	r3, r0, #2
 8010a52:	440b      	add	r3, r1
 8010a54:	605a      	str	r2, [r3, #4]
 8010a56:	78fb      	ldrb	r3, [r7, #3]
 8010a58:	f083 0301 	eor.w	r3, r3, #1
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	4413      	add	r3, r2
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d009      	beq.n	8010a7e <cavlPrivateRotate+0xd2>
 8010a6a:	78fb      	ldrb	r3, [r7, #3]
 8010a6c:	f083 0301 	eor.w	r3, r3, #1
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	4413      	add	r3, r2
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	78fb      	ldrb	r3, [r7, #3]
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4413      	add	r3, r2
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	605a      	str	r2, [r3, #4]
 8010a8a:	bf00      	nop
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	080177d8 	.word	0x080177d8
 8010a98:	08018818 	.word	0x08018818
 8010a9c:	08017820 	.word	0x08017820

08010aa0 <cavlPrivateAdjustBalance>:
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	70fb      	strb	r3, [r7, #3]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00a      	beq.n	8010ac8 <cavlPrivateAdjustBalance+0x28>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010abc:	db04      	blt.n	8010ac8 <cavlPrivateAdjustBalance+0x28>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	dd05      	ble.n	8010ad4 <cavlPrivateAdjustBalance+0x34>
 8010ac8:	4b61      	ldr	r3, [pc, #388]	; (8010c50 <cavlPrivateAdjustBalance+0x1b0>)
 8010aca:	4a62      	ldr	r2, [pc, #392]	; (8010c54 <cavlPrivateAdjustBalance+0x1b4>)
 8010acc:	2177      	movs	r1, #119	; 0x77
 8010ace:	4862      	ldr	r0, [pc, #392]	; (8010c58 <cavlPrivateAdjustBalance+0x1b8>)
 8010ad0:	f002 fa68 	bl	8012fa4 <__assert_func>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	617b      	str	r3, [r7, #20]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	78fa      	ldrb	r2, [r7, #3]
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	d001      	beq.n	8010aea <cavlPrivateAdjustBalance+0x4a>
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	e000      	b.n	8010aec <cavlPrivateAdjustBalance+0x4c>
 8010aea:	22ff      	movs	r2, #255	; 0xff
 8010aec:	4413      	add	r3, r2
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	74fb      	strb	r3, [r7, #19]
 8010af2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010afa:	db04      	blt.n	8010b06 <cavlPrivateAdjustBalance+0x66>
 8010afc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	f340 809c 	ble.w	8010c3e <cavlPrivateAdjustBalance+0x19e>
 8010b06:	7cfb      	ldrb	r3, [r7, #19]
 8010b08:	09db      	lsrs	r3, r3, #7
 8010b0a:	74bb      	strb	r3, [r7, #18]
 8010b0c:	7cbb      	ldrb	r3, [r7, #18]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <cavlPrivateAdjustBalance+0x76>
 8010b12:	2301      	movs	r3, #1
 8010b14:	e001      	b.n	8010b1a <cavlPrivateAdjustBalance+0x7a>
 8010b16:	f04f 33ff 	mov.w	r3, #4294967295
 8010b1a:	747b      	strb	r3, [r7, #17]
 8010b1c:	7cbb      	ldrb	r3, [r7, #18]
 8010b1e:	f083 0301 	eor.w	r3, r3, #1
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	4413      	add	r3, r2
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	60fb      	str	r3, [r7, #12]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d105      	bne.n	8010b40 <cavlPrivateAdjustBalance+0xa0>
 8010b34:	4b49      	ldr	r3, [pc, #292]	; (8010c5c <cavlPrivateAdjustBalance+0x1bc>)
 8010b36:	4a47      	ldr	r2, [pc, #284]	; (8010c54 <cavlPrivateAdjustBalance+0x1b4>)
 8010b38:	217f      	movs	r1, #127	; 0x7f
 8010b3a:	4847      	ldr	r0, [pc, #284]	; (8010c58 <cavlPrivateAdjustBalance+0x1b8>)
 8010b3c:	f002 fa32 	bl	8012fa4 <__assert_func>
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010b46:	461a      	mov	r2, r3
 8010b48:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8010b4c:	fb02 f303 	mul.w	r3, r2, r3
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	dc1c      	bgt.n	8010b8e <cavlPrivateAdjustBalance+0xee>
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	617b      	str	r3, [r7, #20]
 8010b58:	7cbb      	ldrb	r3, [r7, #18]
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f7ff ff25 	bl	80109ac <cavlPrivateRotate>
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d109      	bne.n	8010b80 <cavlPrivateAdjustBalance+0xe0>
 8010b6c:	7c7b      	ldrb	r3, [r7, #17]
 8010b6e:	425b      	negs	r3, r3
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	b25a      	sxtb	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	731a      	strb	r2, [r3, #12]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	7c7a      	ldrb	r2, [r7, #17]
 8010b7c:	731a      	strb	r2, [r3, #12]
 8010b7e:	e061      	b.n	8010c44 <cavlPrivateAdjustBalance+0x1a4>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	731a      	strb	r2, [r3, #12]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	731a      	strb	r2, [r3, #12]
 8010b8c:	e05a      	b.n	8010c44 <cavlPrivateAdjustBalance+0x1a4>
 8010b8e:	7cbb      	ldrb	r3, [r7, #18]
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4413      	add	r3, r2
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	60bb      	str	r3, [r7, #8]
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d105      	bne.n	8010bac <cavlPrivateAdjustBalance+0x10c>
 8010ba0:	4b2f      	ldr	r3, [pc, #188]	; (8010c60 <cavlPrivateAdjustBalance+0x1c0>)
 8010ba2:	4a2c      	ldr	r2, [pc, #176]	; (8010c54 <cavlPrivateAdjustBalance+0x1b4>)
 8010ba4:	2192      	movs	r1, #146	; 0x92
 8010ba6:	482c      	ldr	r0, [pc, #176]	; (8010c58 <cavlPrivateAdjustBalance+0x1b8>)
 8010ba8:	f002 f9fc 	bl	8012fa4 <__assert_func>
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	617b      	str	r3, [r7, #20]
 8010bb0:	7cbb      	ldrb	r3, [r7, #18]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	bf14      	ite	ne
 8010bb6:	2301      	movne	r3, #1
 8010bb8:	2300      	moveq	r3, #0
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	f083 0301 	eor.w	r3, r3, #1
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	f003 0301 	and.w	r3, r3, #1
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	4619      	mov	r1, r3
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f7ff feee 	bl	80109ac <cavlPrivateRotate>
 8010bd0:	7cbb      	ldrb	r3, [r7, #18]
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff fee9 	bl	80109ac <cavlPrivateRotate>
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010be0:	461a      	mov	r2, r3
 8010be2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8010be6:	fb02 f303 	mul.w	r3, r2, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	da09      	bge.n	8010c02 <cavlPrivateAdjustBalance+0x162>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	7c7a      	ldrb	r2, [r7, #17]
 8010bf2:	731a      	strb	r2, [r3, #12]
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	731a      	strb	r2, [r3, #12]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	731a      	strb	r2, [r3, #12]
 8010c00:	e020      	b.n	8010c44 <cavlPrivateAdjustBalance+0x1a4>
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010c08:	461a      	mov	r2, r3
 8010c0a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8010c0e:	fb02 f303 	mul.w	r3, r2, r3
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	dd0c      	ble.n	8010c30 <cavlPrivateAdjustBalance+0x190>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	731a      	strb	r2, [r3, #12]
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	731a      	strb	r2, [r3, #12]
 8010c22:	7c7b      	ldrb	r3, [r7, #17]
 8010c24:	425b      	negs	r3, r3
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	b25a      	sxtb	r2, r3
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	731a      	strb	r2, [r3, #12]
 8010c2e:	e009      	b.n	8010c44 <cavlPrivateAdjustBalance+0x1a4>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	731a      	strb	r2, [r3, #12]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	731a      	strb	r2, [r3, #12]
 8010c3c:	e002      	b.n	8010c44 <cavlPrivateAdjustBalance+0x1a4>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	7cfa      	ldrb	r2, [r7, #19]
 8010c42:	731a      	strb	r2, [r3, #12]
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	4618      	mov	r0, r3
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	0801784c 	.word	0x0801784c
 8010c54:	080187fc 	.word	0x080187fc
 8010c58:	08017820 	.word	0x08017820
 8010c5c:	0801787c 	.word	0x0801787c
 8010c60:	08017888 	.word	0x08017888

08010c64 <cavlPrivateRetraceOnGrowth>:
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d004      	beq.n	8010c7c <cavlPrivateRetraceOnGrowth+0x18>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d005      	beq.n	8010c88 <cavlPrivateRetraceOnGrowth+0x24>
 8010c7c:	4b23      	ldr	r3, [pc, #140]	; (8010d0c <cavlPrivateRetraceOnGrowth+0xa8>)
 8010c7e:	4a24      	ldr	r2, [pc, #144]	; (8010d10 <cavlPrivateRetraceOnGrowth+0xac>)
 8010c80:	21b5      	movs	r1, #181	; 0xb5
 8010c82:	4824      	ldr	r0, [pc, #144]	; (8010d14 <cavlPrivateRetraceOnGrowth+0xb0>)
 8010c84:	f002 f98e 	bl	8012fa4 <__assert_func>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	617b      	str	r3, [r7, #20]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	613b      	str	r3, [r7, #16]
 8010c92:	e023      	b.n	8010cdc <cavlPrivateRetraceOnGrowth+0x78>
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	689b      	ldr	r3, [r3, #8]
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	bf0c      	ite	eq
 8010c9e:	2301      	moveq	r3, #1
 8010ca0:	2300      	movne	r3, #0
 8010ca2:	73fb      	strb	r3, [r7, #15]
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	4413      	add	r3, r2
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	697a      	ldr	r2, [r7, #20]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d005      	beq.n	8010cc0 <cavlPrivateRetraceOnGrowth+0x5c>
 8010cb4:	4b18      	ldr	r3, [pc, #96]	; (8010d18 <cavlPrivateRetraceOnGrowth+0xb4>)
 8010cb6:	4a16      	ldr	r2, [pc, #88]	; (8010d10 <cavlPrivateRetraceOnGrowth+0xac>)
 8010cb8:	21bb      	movs	r1, #187	; 0xbb
 8010cba:	4816      	ldr	r0, [pc, #88]	; (8010d14 <cavlPrivateRetraceOnGrowth+0xb0>)
 8010cbc:	f002 f972 	bl	8012fa4 <__assert_func>
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	6938      	ldr	r0, [r7, #16]
 8010cc6:	f7ff feeb 	bl	8010aa0 <cavlPrivateAdjustBalance>
 8010cca:	6178      	str	r0, [r7, #20]
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	613b      	str	r3, [r7, #16]
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d003      	beq.n	8010ce4 <cavlPrivateRetraceOnGrowth+0x80>
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1d8      	bne.n	8010c94 <cavlPrivateRetraceOnGrowth+0x30>
 8010ce2:	e000      	b.n	8010ce6 <cavlPrivateRetraceOnGrowth+0x82>
 8010ce4:	bf00      	nop
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d105      	bne.n	8010cf8 <cavlPrivateRetraceOnGrowth+0x94>
 8010cec:	4b0b      	ldr	r3, [pc, #44]	; (8010d1c <cavlPrivateRetraceOnGrowth+0xb8>)
 8010cee:	4a08      	ldr	r2, [pc, #32]	; (8010d10 <cavlPrivateRetraceOnGrowth+0xac>)
 8010cf0:	21c3      	movs	r1, #195	; 0xc3
 8010cf2:	4808      	ldr	r0, [pc, #32]	; (8010d14 <cavlPrivateRetraceOnGrowth+0xb0>)
 8010cf4:	f002 f956 	bl	8012fa4 <__assert_func>
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d101      	bne.n	8010d02 <cavlPrivateRetraceOnGrowth+0x9e>
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	e000      	b.n	8010d04 <cavlPrivateRetraceOnGrowth+0xa0>
 8010d02:	2300      	movs	r3, #0
 8010d04:	4618      	mov	r0, r3
 8010d06:	3718      	adds	r7, #24
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	08017894 	.word	0x08017894
 8010d10:	080187e0 	.word	0x080187e0
 8010d14:	08017820 	.word	0x08017820
 8010d18:	080178b8 	.word	0x080178b8
 8010d1c:	080178c8 	.word	0x080178c8

08010d20 <cavlSearch>:
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b08a      	sub	sp, #40	; 0x28
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]
 8010d2c:	603b      	str	r3, [r7, #0]
 8010d2e:	2300      	movs	r3, #0
 8010d30:	627b      	str	r3, [r7, #36]	; 0x24
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d065      	beq.n	8010e04 <cavlSearch+0xe4>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d062      	beq.n	8010e04 <cavlSearch+0xe4>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	623b      	str	r3, [r7, #32]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	61fb      	str	r3, [r7, #28]
 8010d48:	e02f      	b.n	8010daa <cavlSearch+0x8a>
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4611      	mov	r1, r2
 8010d52:	68b8      	ldr	r0, [r7, #8]
 8010d54:	4798      	blx	r3
 8010d56:	4603      	mov	r3, r0
 8010d58:	76fb      	strb	r3, [r7, #27]
 8010d5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d103      	bne.n	8010d6a <cavlSearch+0x4a>
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	627b      	str	r3, [r7, #36]	; 0x24
 8010d68:	e023      	b.n	8010db2 <cavlSearch+0x92>
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	623b      	str	r3, [r7, #32]
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	bfcc      	ite	gt
 8010d7c:	2301      	movgt	r3, #1
 8010d7e:	2300      	movle	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4413      	add	r3, r2
 8010d86:	3304      	adds	r3, #4
 8010d88:	61fb      	str	r3, [r7, #28]
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00b      	beq.n	8010daa <cavlSearch+0x8a>
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	6a3a      	ldr	r2, [r7, #32]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d005      	beq.n	8010daa <cavlSearch+0x8a>
 8010d9e:	4b1c      	ldr	r3, [pc, #112]	; (8010e10 <cavlSearch+0xf0>)
 8010da0:	4a1c      	ldr	r2, [pc, #112]	; (8010e14 <cavlSearch+0xf4>)
 8010da2:	21db      	movs	r1, #219	; 0xdb
 8010da4:	481c      	ldr	r0, [pc, #112]	; (8010e18 <cavlSearch+0xf8>)
 8010da6:	f002 f8fd 	bl	8012fa4 <__assert_func>
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1cb      	bne.n	8010d4a <cavlSearch+0x2a>
 8010db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d125      	bne.n	8010e04 <cavlSearch+0xe4>
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d004      	beq.n	8010dc8 <cavlSearch+0xa8>
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	68b8      	ldr	r0, [r7, #8]
 8010dc2:	4798      	blx	r3
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	e000      	b.n	8010dca <cavlSearch+0xaa>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	627b      	str	r3, [r7, #36]	; 0x24
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d018      	beq.n	8010e04 <cavlSearch+0xe4>
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	2200      	movs	r2, #0
 8010ddc:	605a      	str	r2, [r3, #4]
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de0:	2200      	movs	r2, #0
 8010de2:	609a      	str	r2, [r3, #8]
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	6a3a      	ldr	r2, [r7, #32]
 8010de8:	601a      	str	r2, [r3, #0]
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	2200      	movs	r2, #0
 8010dee:	731a      	strb	r2, [r3, #12]
 8010df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010df2:	f7ff ff37 	bl	8010c64 <cavlPrivateRetraceOnGrowth>
 8010df6:	6178      	str	r0, [r7, #20]
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d002      	beq.n	8010e04 <cavlSearch+0xe4>
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	697a      	ldr	r2, [r7, #20]
 8010e02:	601a      	str	r2, [r3, #0]
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	4618      	mov	r0, r3
 8010e08:	3728      	adds	r7, #40	; 0x28
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	080178d4 	.word	0x080178d4
 8010e14:	080187d4 	.word	0x080187d4
 8010e18:	08017820 	.word	0x08017820

08010e1c <cavlRemove>:
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b088      	sub	sp, #32
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f000 8116 	beq.w	801105a <cavlRemove+0x23e>
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f000 8112 	beq.w	801105a <cavlRemove+0x23e>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d105      	bne.n	8010e4a <cavlRemove+0x2e>
 8010e3e:	4b89      	ldr	r3, [pc, #548]	; (8011064 <cavlRemove+0x248>)
 8010e40:	4a89      	ldr	r2, [pc, #548]	; (8011068 <cavlRemove+0x24c>)
 8010e42:	21f6      	movs	r1, #246	; 0xf6
 8010e44:	4889      	ldr	r0, [pc, #548]	; (801106c <cavlRemove+0x250>)
 8010e46:	f002 f8ad 	bl	8012fa4 <__assert_func>
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d10a      	bne.n	8010e68 <cavlRemove+0x4c>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d005      	beq.n	8010e68 <cavlRemove+0x4c>
 8010e5c:	4b84      	ldr	r3, [pc, #528]	; (8011070 <cavlRemove+0x254>)
 8010e5e:	4a82      	ldr	r2, [pc, #520]	; (8011068 <cavlRemove+0x24c>)
 8010e60:	21f7      	movs	r1, #247	; 0xf7
 8010e62:	4882      	ldr	r0, [pc, #520]	; (801106c <cavlRemove+0x250>)
 8010e64:	f002 f89e 	bl	8012fa4 <__assert_func>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	61fb      	str	r3, [r7, #28]
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	76fb      	strb	r3, [r7, #27]
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d073      	beq.n	8010f60 <cavlRemove+0x144>
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	689b      	ldr	r3, [r3, #8]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d06f      	beq.n	8010f60 <cavlRemove+0x144>
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	2100      	movs	r1, #0
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff fd72 	bl	8010970 <cavlFindExtremum>
 8010e8c:	6178      	str	r0, [r7, #20]
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <cavlRemove+0x88>
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d103      	bne.n	8010ea4 <cavlRemove+0x88>
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d105      	bne.n	8010eb0 <cavlRemove+0x94>
 8010ea4:	4b73      	ldr	r3, [pc, #460]	; (8011074 <cavlRemove+0x258>)
 8010ea6:	4a70      	ldr	r2, [pc, #448]	; (8011068 <cavlRemove+0x24c>)
 8010ea8:	21ff      	movs	r1, #255	; 0xff
 8010eaa:	4870      	ldr	r0, [pc, #448]	; (801106c <cavlRemove+0x250>)
 8010eac:	f002 f87a 	bl	8012fa4 <__assert_func>
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	731a      	strb	r2, [r3, #12]
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	685a      	ldr	r2, [r3, #4]
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	605a      	str	r2, [r3, #4]
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	601a      	str	r2, [r3, #0]
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d025      	beq.n	8010f20 <cavlRemove+0x104>
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	61fb      	str	r3, [r7, #28]
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d006      	beq.n	8010ef2 <cavlRemove+0xd6>
 8010ee4:	4b64      	ldr	r3, [pc, #400]	; (8011078 <cavlRemove+0x25c>)
 8010ee6:	4a60      	ldr	r2, [pc, #384]	; (8011068 <cavlRemove+0x24c>)
 8010ee8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010eec:	485f      	ldr	r0, [pc, #380]	; (801106c <cavlRemove+0x250>)
 8010eee:	f002 f859 	bl	8012fa4 <__assert_func>
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	689a      	ldr	r2, [r3, #8]
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	605a      	str	r2, [r3, #4]
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d003      	beq.n	8010f0a <cavlRemove+0xee>
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	689a      	ldr	r2, [r3, #8]
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	609a      	str	r2, [r3, #8]
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	689b      	ldr	r3, [r3, #8]
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	601a      	str	r2, [r3, #0]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	76fb      	strb	r3, [r7, #27]
 8010f1e:	e003      	b.n	8010f28 <cavlRemove+0x10c>
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	2301      	movs	r3, #1
 8010f26:	76fb      	strb	r3, [r7, #27]
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d00f      	beq.n	8010f58 <cavlRemove+0x13c>
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	689b      	ldr	r3, [r3, #8]
 8010f42:	6839      	ldr	r1, [r7, #0]
 8010f44:	4299      	cmp	r1, r3
 8010f46:	bf0c      	ite	eq
 8010f48:	2301      	moveq	r3, #1
 8010f4a:	2300      	movne	r3, #0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	4413      	add	r3, r2
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	605a      	str	r2, [r3, #4]
 8010f56:	e046      	b.n	8010fe6 <cavlRemove+0x1ca>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	601a      	str	r2, [r3, #0]
 8010f5e:	e042      	b.n	8010fe6 <cavlRemove+0x1ca>
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	61fb      	str	r3, [r7, #28]
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	689b      	ldr	r3, [r3, #8]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	bf14      	ite	ne
 8010f6e:	2301      	movne	r3, #1
 8010f70:	2300      	moveq	r3, #0
 8010f72:	74fb      	strb	r3, [r7, #19]
 8010f74:	7cfb      	ldrb	r3, [r7, #19]
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4413      	add	r3, r2
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d006      	beq.n	8010f90 <cavlRemove+0x174>
 8010f82:	7cfb      	ldrb	r3, [r7, #19]
 8010f84:	683a      	ldr	r2, [r7, #0]
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	4413      	add	r3, r2
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	69fa      	ldr	r2, [r7, #28]
 8010f8e:	601a      	str	r2, [r3, #0]
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d020      	beq.n	8010fd8 <cavlRemove+0x1bc>
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	bf0c      	ite	eq
 8010fa0:	2301      	moveq	r3, #1
 8010fa2:	2300      	movne	r3, #0
 8010fa4:	76fb      	strb	r3, [r7, #27]
 8010fa6:	7cfb      	ldrb	r3, [r7, #19]
 8010fa8:	7ef8      	ldrb	r0, [r7, #27]
 8010faa:	683a      	ldr	r2, [r7, #0]
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	4413      	add	r3, r2
 8010fb0:	685a      	ldr	r2, [r3, #4]
 8010fb2:	69f9      	ldr	r1, [r7, #28]
 8010fb4:	0083      	lsls	r3, r0, #2
 8010fb6:	440b      	add	r3, r1
 8010fb8:	605a      	str	r2, [r3, #4]
 8010fba:	7efb      	ldrb	r3, [r7, #27]
 8010fbc:	69fa      	ldr	r2, [r7, #28]
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4413      	add	r3, r2
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00e      	beq.n	8010fe6 <cavlRemove+0x1ca>
 8010fc8:	7efb      	ldrb	r3, [r7, #27]
 8010fca:	69fa      	ldr	r2, [r7, #28]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	69fa      	ldr	r2, [r7, #28]
 8010fd4:	601a      	str	r2, [r3, #0]
 8010fd6:	e006      	b.n	8010fe6 <cavlRemove+0x1ca>
 8010fd8:	7cfb      	ldrb	r3, [r7, #19]
 8010fda:	683a      	ldr	r2, [r7, #0]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	685a      	ldr	r2, [r3, #4]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	601a      	str	r2, [r3, #0]
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d036      	beq.n	801105a <cavlRemove+0x23e>
 8010fec:	2300      	movs	r3, #0
 8010fee:	60fb      	str	r3, [r7, #12]
 8010ff0:	7efb      	ldrb	r3, [r7, #27]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	bf14      	ite	ne
 8010ff6:	2301      	movne	r3, #1
 8010ff8:	2300      	moveq	r3, #0
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	f083 0301 	eor.w	r3, r3, #1
 8011000:	b2db      	uxtb	r3, r3
 8011002:	f003 0301 	and.w	r3, r3, #1
 8011006:	b2db      	uxtb	r3, r3
 8011008:	4619      	mov	r1, r3
 801100a:	69f8      	ldr	r0, [r7, #28]
 801100c:	f7ff fd48 	bl	8010aa0 <cavlPrivateAdjustBalance>
 8011010:	60f8      	str	r0, [r7, #12]
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	61fb      	str	r3, [r7, #28]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d10b      	bne.n	801103a <cavlRemove+0x21e>
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d008      	beq.n	801103a <cavlRemove+0x21e>
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	429a      	cmp	r2, r3
 8011030:	bf0c      	ite	eq
 8011032:	2301      	moveq	r3, #1
 8011034:	2300      	movne	r3, #0
 8011036:	76fb      	strb	r3, [r7, #27]
 8011038:	e7da      	b.n	8010ff0 <cavlRemove+0x1d4>
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10c      	bne.n	801105a <cavlRemove+0x23e>
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <cavlRemove+0x238>
 8011046:	4b0d      	ldr	r3, [pc, #52]	; (801107c <cavlRemove+0x260>)
 8011048:	4a07      	ldr	r2, [pc, #28]	; (8011068 <cavlRemove+0x24c>)
 801104a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801104e:	4807      	ldr	r0, [pc, #28]	; (801106c <cavlRemove+0x250>)
 8011050:	f001 ffa8 	bl	8012fa4 <__assert_func>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	601a      	str	r2, [r3, #0]
 801105a:	bf00      	nop
 801105c:	3720      	adds	r7, #32
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	080178f8 	.word	0x080178f8
 8011068:	0801885c 	.word	0x0801885c
 801106c:	08017820 	.word	0x08017820
 8011070:	08017908 	.word	0x08017908
 8011074:	08017930 	.word	0x08017930
 8011078:	08017968 	.word	0x08017968
 801107c:	080178c8 	.word	0x080178c8

08011080 <avlTrivialFactory>:
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	4618      	mov	r0, r3
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
	...

08011098 <crcAddByte>:
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	4603      	mov	r3, r0
 80110a0:	460a      	mov	r2, r1
 80110a2:	80fb      	strh	r3, [r7, #6]
 80110a4:	4613      	mov	r3, r2
 80110a6:	717b      	strb	r3, [r7, #5]
 80110a8:	88fb      	ldrh	r3, [r7, #6]
 80110aa:	021b      	lsls	r3, r3, #8
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	88fb      	ldrh	r3, [r7, #6]
 80110b0:	0a1b      	lsrs	r3, r3, #8
 80110b2:	b299      	uxth	r1, r3
 80110b4:	797b      	ldrb	r3, [r7, #5]
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	404b      	eors	r3, r1
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	4905      	ldr	r1, [pc, #20]	; (80110d4 <crcAddByte+0x3c>)
 80110c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80110c4:	4053      	eors	r3, r2
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	4618      	mov	r0, r3
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr
 80110d4:	080184ac 	.word	0x080184ac

080110d8 <crcAdd>:
 80110d8:	b580      	push	{r7, lr}
 80110da:	b088      	sub	sp, #32
 80110dc:	af00      	add	r7, sp, #0
 80110de:	4603      	mov	r3, r0
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	607a      	str	r2, [r7, #4]
 80110e4:	81fb      	strh	r3, [r7, #14]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d108      	bne.n	80110fe <crcAdd+0x26>
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d005      	beq.n	80110fe <crcAdd+0x26>
 80110f2:	4b12      	ldr	r3, [pc, #72]	; (801113c <crcAdd+0x64>)
 80110f4:	4a12      	ldr	r2, [pc, #72]	; (8011140 <crcAdd+0x68>)
 80110f6:	2185      	movs	r1, #133	; 0x85
 80110f8:	4812      	ldr	r0, [pc, #72]	; (8011144 <crcAdd+0x6c>)
 80110fa:	f001 ff53 	bl	8012fa4 <__assert_func>
 80110fe:	89fb      	ldrh	r3, [r7, #14]
 8011100:	83fb      	strh	r3, [r7, #30]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	61bb      	str	r3, [r7, #24]
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
 801110a:	e00e      	b.n	801112a <crcAdd+0x52>
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	781a      	ldrb	r2, [r3, #0]
 8011110:	8bfb      	ldrh	r3, [r7, #30]
 8011112:	4611      	mov	r1, r2
 8011114:	4618      	mov	r0, r3
 8011116:	f7ff ffbf 	bl	8011098 <crcAddByte>
 801111a:	4603      	mov	r3, r0
 801111c:	83fb      	strh	r3, [r7, #30]
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	3301      	adds	r3, #1
 8011122:	61bb      	str	r3, [r7, #24]
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	3301      	adds	r3, #1
 8011128:	617b      	str	r3, [r7, #20]
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	429a      	cmp	r2, r3
 8011130:	d3ec      	bcc.n	801110c <crcAdd+0x34>
 8011132:	8bfb      	ldrh	r3, [r7, #30]
 8011134:	4618      	mov	r0, r3
 8011136:	3720      	adds	r7, #32
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	08017978 	.word	0x08017978
 8011140:	08018728 	.word	0x08018728
 8011144:	080179a0 	.word	0x080179a0

08011148 <txMakeMessageSessionSpecifier>:
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	4603      	mov	r3, r0
 8011150:	460a      	mov	r2, r1
 8011152:	80fb      	strh	r3, [r7, #6]
 8011154:	4613      	mov	r3, r2
 8011156:	717b      	strb	r3, [r7, #5]
 8011158:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801115c:	2b00      	cmp	r3, #0
 801115e:	da05      	bge.n	801116c <txMakeMessageSessionSpecifier+0x24>
 8011160:	4b0e      	ldr	r3, [pc, #56]	; (801119c <txMakeMessageSessionSpecifier+0x54>)
 8011162:	4a0f      	ldr	r2, [pc, #60]	; (80111a0 <txMakeMessageSessionSpecifier+0x58>)
 8011164:	21ac      	movs	r1, #172	; 0xac
 8011166:	480f      	ldr	r0, [pc, #60]	; (80111a4 <txMakeMessageSessionSpecifier+0x5c>)
 8011168:	f001 ff1c 	bl	8012fa4 <__assert_func>
 801116c:	88fb      	ldrh	r3, [r7, #6]
 801116e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011172:	d305      	bcc.n	8011180 <txMakeMessageSessionSpecifier+0x38>
 8011174:	4b0c      	ldr	r3, [pc, #48]	; (80111a8 <txMakeMessageSessionSpecifier+0x60>)
 8011176:	4a0a      	ldr	r2, [pc, #40]	; (80111a0 <txMakeMessageSessionSpecifier+0x58>)
 8011178:	21ad      	movs	r1, #173	; 0xad
 801117a:	480a      	ldr	r0, [pc, #40]	; (80111a4 <txMakeMessageSessionSpecifier+0x5c>)
 801117c:	f001 ff12 	bl	8012fa4 <__assert_func>
 8011180:	88fb      	ldrh	r3, [r7, #6]
 8011182:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8011186:	b29b      	uxth	r3, r3
 8011188:	60fb      	str	r3, [r7, #12]
 801118a:	797a      	ldrb	r2, [r7, #5]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	021b      	lsls	r3, r3, #8
 8011190:	4313      	orrs	r3, r2
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	080179d0 	.word	0x080179d0
 80111a0:	08018730 	.word	0x08018730
 80111a4:	080179a0 	.word	0x080179a0
 80111a8:	080179e4 	.word	0x080179e4

080111ac <txMakeServiceSessionSpecifier>:
 80111ac:	b590      	push	{r4, r7, lr}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4604      	mov	r4, r0
 80111b4:	4608      	mov	r0, r1
 80111b6:	4611      	mov	r1, r2
 80111b8:	461a      	mov	r2, r3
 80111ba:	4623      	mov	r3, r4
 80111bc:	80fb      	strh	r3, [r7, #6]
 80111be:	4603      	mov	r3, r0
 80111c0:	717b      	strb	r3, [r7, #5]
 80111c2:	460b      	mov	r3, r1
 80111c4:	713b      	strb	r3, [r7, #4]
 80111c6:	4613      	mov	r3, r2
 80111c8:	70fb      	strb	r3, [r7, #3]
 80111ca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	da05      	bge.n	80111de <txMakeServiceSessionSpecifier+0x32>
 80111d2:	4b17      	ldr	r3, [pc, #92]	; (8011230 <txMakeServiceSessionSpecifier+0x84>)
 80111d4:	4a17      	ldr	r2, [pc, #92]	; (8011234 <txMakeServiceSessionSpecifier+0x88>)
 80111d6:	21b7      	movs	r1, #183	; 0xb7
 80111d8:	4817      	ldr	r0, [pc, #92]	; (8011238 <txMakeServiceSessionSpecifier+0x8c>)
 80111da:	f001 fee3 	bl	8012fa4 <__assert_func>
 80111de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	da05      	bge.n	80111f2 <txMakeServiceSessionSpecifier+0x46>
 80111e6:	4b15      	ldr	r3, [pc, #84]	; (801123c <txMakeServiceSessionSpecifier+0x90>)
 80111e8:	4a12      	ldr	r2, [pc, #72]	; (8011234 <txMakeServiceSessionSpecifier+0x88>)
 80111ea:	21b8      	movs	r1, #184	; 0xb8
 80111ec:	4812      	ldr	r0, [pc, #72]	; (8011238 <txMakeServiceSessionSpecifier+0x8c>)
 80111ee:	f001 fed9 	bl	8012fa4 <__assert_func>
 80111f2:	88fb      	ldrh	r3, [r7, #6]
 80111f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111f8:	d305      	bcc.n	8011206 <txMakeServiceSessionSpecifier+0x5a>
 80111fa:	4b11      	ldr	r3, [pc, #68]	; (8011240 <txMakeServiceSessionSpecifier+0x94>)
 80111fc:	4a0d      	ldr	r2, [pc, #52]	; (8011234 <txMakeServiceSessionSpecifier+0x88>)
 80111fe:	21b9      	movs	r1, #185	; 0xb9
 8011200:	480d      	ldr	r0, [pc, #52]	; (8011238 <txMakeServiceSessionSpecifier+0x8c>)
 8011202:	f001 fecf 	bl	8012fa4 <__assert_func>
 8011206:	793a      	ldrb	r2, [r7, #4]
 8011208:	78fb      	ldrb	r3, [r7, #3]
 801120a:	01db      	lsls	r3, r3, #7
 801120c:	431a      	orrs	r2, r3
 801120e:	88fb      	ldrh	r3, [r7, #6]
 8011210:	039b      	lsls	r3, r3, #14
 8011212:	4313      	orrs	r3, r2
 8011214:	797a      	ldrb	r2, [r7, #5]
 8011216:	2a00      	cmp	r2, #0
 8011218:	d002      	beq.n	8011220 <txMakeServiceSessionSpecifier+0x74>
 801121a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801121e:	e000      	b.n	8011222 <txMakeServiceSessionSpecifier+0x76>
 8011220:	2200      	movs	r2, #0
 8011222:	4313      	orrs	r3, r2
 8011224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011228:	4618      	mov	r0, r3
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	bd90      	pop	{r4, r7, pc}
 8011230:	080179d0 	.word	0x080179d0
 8011234:	08018750 	.word	0x08018750
 8011238:	080179a0 	.word	0x080179a0
 801123c:	080179f8 	.word	0x080179f8
 8011240:	08017a0c 	.word	0x08017a0c

08011244 <adjustPresentationLayerMTU>:
 8011244:	b480      	push	{r7}
 8011246:	b085      	sub	sp, #20
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	2340      	movs	r3, #64	; 0x40
 801124e:	60bb      	str	r3, [r7, #8]
 8011250:	2300      	movs	r3, #0
 8011252:	60fb      	str	r3, [r7, #12]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b07      	cmp	r3, #7
 8011258:	d802      	bhi.n	8011260 <adjustPresentationLayerMTU+0x1c>
 801125a:	2308      	movs	r3, #8
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	e014      	b.n	801128a <adjustPresentationLayerMTU+0x46>
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	429a      	cmp	r2, r3
 8011266:	d808      	bhi.n	801127a <adjustPresentationLayerMTU+0x36>
 8011268:	4a0c      	ldr	r2, [pc, #48]	; (801129c <adjustPresentationLayerMTU+0x58>)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4413      	add	r3, r2
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	461a      	mov	r2, r3
 8011272:	4b0b      	ldr	r3, [pc, #44]	; (80112a0 <adjustPresentationLayerMTU+0x5c>)
 8011274:	5c9b      	ldrb	r3, [r3, r2]
 8011276:	60fb      	str	r3, [r7, #12]
 8011278:	e007      	b.n	801128a <adjustPresentationLayerMTU+0x46>
 801127a:	4a08      	ldr	r2, [pc, #32]	; (801129c <adjustPresentationLayerMTU+0x58>)
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	4413      	add	r3, r2
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	4b06      	ldr	r3, [pc, #24]	; (80112a0 <adjustPresentationLayerMTU+0x5c>)
 8011286:	5c9b      	ldrb	r3, [r3, r2]
 8011288:	60fb      	str	r3, [r7, #12]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	3b01      	subs	r3, #1
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	080186bc 	.word	0x080186bc
 80112a0:	080186ac 	.word	0x080186ac

080112a4 <txMakeCANID>:
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b08a      	sub	sp, #40	; 0x28
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
 80112b0:	70fb      	strb	r3, [r7, #3]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d105      	bne.n	80112c4 <txMakeCANID+0x20>
 80112b8:	4b60      	ldr	r3, [pc, #384]	; (801143c <txMakeCANID+0x198>)
 80112ba:	4a61      	ldr	r2, [pc, #388]	; (8011440 <txMakeCANID+0x19c>)
 80112bc:	21d9      	movs	r1, #217	; 0xd9
 80112be:	4861      	ldr	r0, [pc, #388]	; (8011444 <txMakeCANID+0x1a0>)
 80112c0:	f001 fe70 	bl	8012fa4 <__assert_func>
 80112c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d105      	bne.n	80112d6 <txMakeCANID+0x32>
 80112ca:	4b5f      	ldr	r3, [pc, #380]	; (8011448 <txMakeCANID+0x1a4>)
 80112cc:	4a5c      	ldr	r2, [pc, #368]	; (8011440 <txMakeCANID+0x19c>)
 80112ce:	21da      	movs	r1, #218	; 0xda
 80112d0:	485c      	ldr	r0, [pc, #368]	; (8011444 <txMakeCANID+0x1a0>)
 80112d2:	f001 fe67 	bl	8012fa4 <__assert_func>
 80112d6:	f06f 0301 	mvn.w	r3, #1
 80112da:	627b      	str	r3, [r7, #36]	; 0x24
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	785b      	ldrb	r3, [r3, #1]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d157      	bne.n	8011394 <txMakeCANID+0xf0>
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	791b      	ldrb	r3, [r3, #4]
 80112e8:	2bff      	cmp	r3, #255	; 0xff
 80112ea:	d153      	bne.n	8011394 <txMakeCANID+0xf0>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	885b      	ldrh	r3, [r3, #2]
 80112f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112f4:	d24e      	bcs.n	8011394 <txMakeCANID+0xf0>
 80112f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	db11      	blt.n	8011322 <txMakeCANID+0x7e>
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	885b      	ldrh	r3, [r3, #2]
 8011302:	78fa      	ldrb	r2, [r7, #3]
 8011304:	4611      	mov	r1, r2
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff ff1e 	bl	8011148 <txMakeMessageSessionSpecifier>
 801130c:	4603      	mov	r3, r0
 801130e:	627b      	str	r3, [r7, #36]	; 0x24
 8011310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011312:	2b00      	cmp	r3, #0
 8011314:	da75      	bge.n	8011402 <txMakeCANID+0x15e>
 8011316:	4b4d      	ldr	r3, [pc, #308]	; (801144c <txMakeCANID+0x1a8>)
 8011318:	4a49      	ldr	r2, [pc, #292]	; (8011440 <txMakeCANID+0x19c>)
 801131a:	21e2      	movs	r1, #226	; 0xe2
 801131c:	4849      	ldr	r0, [pc, #292]	; (8011444 <txMakeCANID+0x1a0>)
 801131e:	f001 fe41 	bl	8012fa4 <__assert_func>
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011326:	429a      	cmp	r2, r3
 8011328:	d830      	bhi.n	801138c <txMakeCANID+0xe8>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d108      	bne.n	8011342 <txMakeCANID+0x9e>
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d005      	beq.n	8011342 <txMakeCANID+0x9e>
 8011336:	4b46      	ldr	r3, [pc, #280]	; (8011450 <txMakeCANID+0x1ac>)
 8011338:	4a41      	ldr	r2, [pc, #260]	; (8011440 <txMakeCANID+0x19c>)
 801133a:	21e6      	movs	r1, #230	; 0xe6
 801133c:	4841      	ldr	r0, [pc, #260]	; (8011444 <txMakeCANID+0x1a0>)
 801133e:	f001 fe31 	bl	8012fa4 <__assert_func>
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	68b9      	ldr	r1, [r7, #8]
 8011346:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801134a:	f7ff fec5 	bl	80110d8 <crcAdd>
 801134e:	4603      	mov	r3, r0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	885b      	ldrh	r3, [r3, #2]
 801135e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8011362:	4611      	mov	r1, r2
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff feef 	bl	8011148 <txMakeMessageSessionSpecifier>
 801136a:	4603      	mov	r3, r0
 801136c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011370:	61fb      	str	r3, [r7, #28]
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011378:	d305      	bcc.n	8011386 <txMakeCANID+0xe2>
 801137a:	4b36      	ldr	r3, [pc, #216]	; (8011454 <txMakeCANID+0x1b0>)
 801137c:	4a30      	ldr	r2, [pc, #192]	; (8011440 <txMakeCANID+0x19c>)
 801137e:	21e9      	movs	r1, #233	; 0xe9
 8011380:	4830      	ldr	r0, [pc, #192]	; (8011444 <txMakeCANID+0x1a0>)
 8011382:	f001 fe0f 	bl	8012fa4 <__assert_func>
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	627b      	str	r3, [r7, #36]	; 0x24
 801138a:	e03a      	b.n	8011402 <txMakeCANID+0x15e>
 801138c:	f06f 0301 	mvn.w	r3, #1
 8011390:	627b      	str	r3, [r7, #36]	; 0x24
 8011392:	e036      	b.n	8011402 <txMakeCANID+0x15e>
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	785b      	ldrb	r3, [r3, #1]
 8011398:	2b02      	cmp	r3, #2
 801139a:	d003      	beq.n	80113a4 <txMakeCANID+0x100>
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	785b      	ldrb	r3, [r3, #1]
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	d12a      	bne.n	80113fa <txMakeCANID+0x156>
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	791b      	ldrb	r3, [r3, #4]
 80113a8:	b25b      	sxtb	r3, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	db25      	blt.n	80113fa <txMakeCANID+0x156>
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	885b      	ldrh	r3, [r3, #2]
 80113b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113b6:	d220      	bcs.n	80113fa <txMakeCANID+0x156>
 80113b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	db18      	blt.n	80113f2 <txMakeCANID+0x14e>
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	8858      	ldrh	r0, [r3, #2]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	785b      	ldrb	r3, [r3, #1]
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	bf0c      	ite	eq
 80113cc:	2301      	moveq	r3, #1
 80113ce:	2300      	movne	r3, #0
 80113d0:	b2d9      	uxtb	r1, r3
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	791b      	ldrb	r3, [r3, #4]
 80113d6:	78fa      	ldrb	r2, [r7, #3]
 80113d8:	f7ff fee8 	bl	80111ac <txMakeServiceSessionSpecifier>
 80113dc:	4603      	mov	r3, r0
 80113de:	627b      	str	r3, [r7, #36]	; 0x24
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da0f      	bge.n	8011406 <txMakeCANID+0x162>
 80113e6:	4b19      	ldr	r3, [pc, #100]	; (801144c <txMakeCANID+0x1a8>)
 80113e8:	4a15      	ldr	r2, [pc, #84]	; (8011440 <txMakeCANID+0x19c>)
 80113ea:	21fa      	movs	r1, #250	; 0xfa
 80113ec:	4815      	ldr	r0, [pc, #84]	; (8011444 <txMakeCANID+0x1a0>)
 80113ee:	f001 fdd9 	bl	8012fa4 <__assert_func>
 80113f2:	f06f 0301 	mvn.w	r3, #1
 80113f6:	627b      	str	r3, [r7, #36]	; 0x24
 80113f8:	e005      	b.n	8011406 <txMakeCANID+0x162>
 80113fa:	f06f 0301 	mvn.w	r3, #1
 80113fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011400:	e002      	b.n	8011408 <txMakeCANID+0x164>
 8011402:	bf00      	nop
 8011404:	e000      	b.n	8011408 <txMakeCANID+0x164>
 8011406:	bf00      	nop
 8011408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140a:	2b00      	cmp	r3, #0
 801140c:	db10      	blt.n	8011430 <txMakeCANID+0x18c>
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	61bb      	str	r3, [r7, #24]
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	2b07      	cmp	r3, #7
 8011418:	d807      	bhi.n	801142a <txMakeCANID+0x186>
 801141a:	69bb      	ldr	r3, [r7, #24]
 801141c:	069a      	lsls	r2, r3, #26
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	4313      	orrs	r3, r2
 8011422:	617b      	str	r3, [r7, #20]
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	627b      	str	r3, [r7, #36]	; 0x24
 8011428:	e002      	b.n	8011430 <txMakeCANID+0x18c>
 801142a:	f06f 0301 	mvn.w	r3, #1
 801142e:	627b      	str	r3, [r7, #36]	; 0x24
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	4618      	mov	r0, r3
 8011434:	3728      	adds	r7, #40	; 0x28
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	08017a20 	.word	0x08017a20
 8011440:	0801871c 	.word	0x0801871c
 8011444:	080179a0 	.word	0x080179a0
 8011448:	08017a34 	.word	0x08017a34
 801144c:	08017a50 	.word	0x08017a50
 8011450:	08017a5c 	.word	0x08017a5c
 8011454:	08017a90 	.word	0x08017a90

08011458 <txMakeTailByte>:
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	4604      	mov	r4, r0
 8011460:	4608      	mov	r0, r1
 8011462:	4611      	mov	r1, r2
 8011464:	461a      	mov	r2, r3
 8011466:	4623      	mov	r3, r4
 8011468:	71fb      	strb	r3, [r7, #7]
 801146a:	4603      	mov	r3, r0
 801146c:	71bb      	strb	r3, [r7, #6]
 801146e:	460b      	mov	r3, r1
 8011470:	717b      	strb	r3, [r7, #5]
 8011472:	4613      	mov	r3, r2
 8011474:	713b      	strb	r3, [r7, #4]
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d009      	beq.n	8011490 <txMakeTailByte+0x38>
 801147c:	797b      	ldrb	r3, [r7, #5]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d006      	beq.n	8011490 <txMakeTailByte+0x38>
 8011482:	4b13      	ldr	r3, [pc, #76]	; (80114d0 <txMakeTailByte+0x78>)
 8011484:	4a13      	ldr	r2, [pc, #76]	; (80114d4 <txMakeTailByte+0x7c>)
 8011486:	f240 111b 	movw	r1, #283	; 0x11b
 801148a:	4813      	ldr	r0, [pc, #76]	; (80114d8 <txMakeTailByte+0x80>)
 801148c:	f001 fd8a 	bl	8012fa4 <__assert_func>
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d001      	beq.n	801149a <txMakeTailByte+0x42>
 8011496:	2280      	movs	r2, #128	; 0x80
 8011498:	e000      	b.n	801149c <txMakeTailByte+0x44>
 801149a:	2200      	movs	r2, #0
 801149c:	79bb      	ldrb	r3, [r7, #6]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <txMakeTailByte+0x4e>
 80114a2:	2340      	movs	r3, #64	; 0x40
 80114a4:	e000      	b.n	80114a8 <txMakeTailByte+0x50>
 80114a6:	2300      	movs	r3, #0
 80114a8:	4313      	orrs	r3, r2
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	797a      	ldrb	r2, [r7, #5]
 80114ae:	2a00      	cmp	r2, #0
 80114b0:	d001      	beq.n	80114b6 <txMakeTailByte+0x5e>
 80114b2:	2220      	movs	r2, #32
 80114b4:	e000      	b.n	80114b8 <txMakeTailByte+0x60>
 80114b6:	2200      	movs	r2, #0
 80114b8:	4313      	orrs	r3, r2
 80114ba:	b2da      	uxtb	r2, r3
 80114bc:	793b      	ldrb	r3, [r7, #4]
 80114be:	f003 031f 	and.w	r3, r3, #31
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	4313      	orrs	r3, r2
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	4618      	mov	r0, r3
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd90      	pop	{r4, r7, pc}
 80114d0:	08017aac 	.word	0x08017aac
 80114d4:	080187c4 	.word	0x080187c4
 80114d8:	080179a0 	.word	0x080179a0

080114dc <txRoundFramePayloadSizeUp>:
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b40      	cmp	r3, #64	; 0x40
 80114e8:	d906      	bls.n	80114f8 <txRoundFramePayloadSizeUp+0x1c>
 80114ea:	4b0f      	ldr	r3, [pc, #60]	; (8011528 <txRoundFramePayloadSizeUp+0x4c>)
 80114ec:	4a0f      	ldr	r2, [pc, #60]	; (801152c <txRoundFramePayloadSizeUp+0x50>)
 80114ee:	f44f 7192 	mov.w	r1, #292	; 0x124
 80114f2:	480f      	ldr	r0, [pc, #60]	; (8011530 <txRoundFramePayloadSizeUp+0x54>)
 80114f4:	f001 fd56 	bl	8012fa4 <__assert_func>
 80114f8:	4a0e      	ldr	r2, [pc, #56]	; (8011534 <txRoundFramePayloadSizeUp+0x58>)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4413      	add	r3, r2
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	60fb      	str	r3, [r7, #12]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2b0f      	cmp	r3, #15
 8011506:	d906      	bls.n	8011516 <txRoundFramePayloadSizeUp+0x3a>
 8011508:	4b0b      	ldr	r3, [pc, #44]	; (8011538 <txRoundFramePayloadSizeUp+0x5c>)
 801150a:	4a08      	ldr	r2, [pc, #32]	; (801152c <txRoundFramePayloadSizeUp+0x50>)
 801150c:	f240 1127 	movw	r1, #295	; 0x127
 8011510:	4807      	ldr	r0, [pc, #28]	; (8011530 <txRoundFramePayloadSizeUp+0x54>)
 8011512:	f001 fd47 	bl	8012fa4 <__assert_func>
 8011516:	4a09      	ldr	r2, [pc, #36]	; (801153c <txRoundFramePayloadSizeUp+0x60>)
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	4413      	add	r3, r2
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	4618      	mov	r0, r3
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	08017ad4 	.word	0x08017ad4
 801152c:	08018794 	.word	0x08018794
 8011530:	080179a0 	.word	0x080179a0
 8011534:	080186bc 	.word	0x080186bc
 8011538:	08017b1c 	.word	0x08017b1c
 801153c:	080186ac 	.word	0x080186ac

08011540 <txAllocateQueueItem>:
 8011540:	b580      	push	{r7, lr}
 8011542:	b086      	sub	sp, #24
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	e9c7 2300 	strd	r2, r3, [r7]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d106      	bne.n	8011562 <txAllocateQueueItem+0x22>
 8011554:	4b1f      	ldr	r3, [pc, #124]	; (80115d4 <txAllocateQueueItem+0x94>)
 8011556:	4a20      	ldr	r2, [pc, #128]	; (80115d8 <txAllocateQueueItem+0x98>)
 8011558:	f240 1131 	movw	r1, #305	; 0x131
 801155c:	481f      	ldr	r0, [pc, #124]	; (80115dc <txAllocateQueueItem+0x9c>)
 801155e:	f001 fd21 	bl	8012fa4 <__assert_func>
 8011562:	6a3b      	ldr	r3, [r7, #32]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d106      	bne.n	8011576 <txAllocateQueueItem+0x36>
 8011568:	4b1d      	ldr	r3, [pc, #116]	; (80115e0 <txAllocateQueueItem+0xa0>)
 801156a:	4a1b      	ldr	r2, [pc, #108]	; (80115d8 <txAllocateQueueItem+0x98>)
 801156c:	f44f 7199 	mov.w	r1, #306	; 0x132
 8011570:	481a      	ldr	r0, [pc, #104]	; (80115dc <txAllocateQueueItem+0x9c>)
 8011572:	f001 fd17 	bl	8012fa4 <__assert_func>
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	6a3a      	ldr	r2, [r7, #32]
 801157c:	3230      	adds	r2, #48	; 0x30
 801157e:	4611      	mov	r1, r2
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	4798      	blx	r3
 8011584:	6178      	str	r0, [r7, #20]
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d01e      	beq.n	80115ca <txAllocateQueueItem+0x8a>
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2200      	movs	r2, #0
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	2200      	movs	r2, #0
 8011596:	605a      	str	r2, [r3, #4]
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	2200      	movs	r2, #0
 801159c:	609a      	str	r2, [r3, #8]
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	2200      	movs	r2, #0
 80115a2:	731a      	strb	r2, [r3, #12]
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	2200      	movs	r2, #0
 80115a8:	611a      	str	r2, [r3, #16]
 80115aa:	6979      	ldr	r1, [r7, #20]
 80115ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	6a3a      	ldr	r2, [r7, #32]
 80115b8:	625a      	str	r2, [r3, #36]	; 0x24
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	629a      	str	r2, [r3, #40]	; 0x28
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	68ba      	ldr	r2, [r7, #8]
 80115c8:	621a      	str	r2, [r3, #32]
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	4618      	mov	r0, r3
 80115ce:	3718      	adds	r7, #24
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	08017b64 	.word	0x08017b64
 80115d8:	080187b0 	.word	0x080187b0
 80115dc:	080179a0 	.word	0x080179a0
 80115e0:	08017b78 	.word	0x08017b78

080115e4 <txAVLPredicate>:
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	60fb      	str	r3, [r7, #12]
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	60bb      	str	r3, [r7, #8]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <txAVLPredicate+0x1e>
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <txAVLPredicate+0x2c>
 8011602:	4b0a      	ldr	r3, [pc, #40]	; (801162c <txAVLPredicate+0x48>)
 8011604:	4a0a      	ldr	r2, [pc, #40]	; (8011630 <txAVLPredicate+0x4c>)
 8011606:	f240 114d 	movw	r1, #333	; 0x14d
 801160a:	480a      	ldr	r0, [pc, #40]	; (8011634 <txAVLPredicate+0x50>)
 801160c:	f001 fcca 	bl	8012fa4 <__assert_func>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6a1a      	ldr	r2, [r3, #32]
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	6a1b      	ldr	r3, [r3, #32]
 8011618:	429a      	cmp	r2, r3
 801161a:	d301      	bcc.n	8011620 <txAVLPredicate+0x3c>
 801161c:	2301      	movs	r3, #1
 801161e:	e001      	b.n	8011624 <txAVLPredicate+0x40>
 8011620:	f04f 33ff 	mov.w	r3, #4294967295
 8011624:	4618      	mov	r0, r3
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	08017b8c 	.word	0x08017b8c
 8011630:	08018784 	.word	0x08018784
 8011634:	080179a0 	.word	0x080179a0

08011638 <txPushSingleFrame>:
 8011638:	b590      	push	{r4, r7, lr}
 801163a:	b08d      	sub	sp, #52	; 0x34
 801163c:	af02      	add	r7, sp, #8
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	e9c7 2300 	strd	r2, r3, [r7]
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d106      	bne.n	801165a <txPushSingleFrame+0x22>
 801164c:	4b5c      	ldr	r3, [pc, #368]	; (80117c0 <txPushSingleFrame+0x188>)
 801164e:	4a5d      	ldr	r2, [pc, #372]	; (80117c4 <txPushSingleFrame+0x18c>)
 8011650:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8011654:	485c      	ldr	r0, [pc, #368]	; (80117c8 <txPushSingleFrame+0x190>)
 8011656:	f001 fca5 	bl	8012fa4 <__assert_func>
 801165a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801165c:	2b00      	cmp	r3, #0
 801165e:	d109      	bne.n	8011674 <txPushSingleFrame+0x3c>
 8011660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <txPushSingleFrame+0x3c>
 8011666:	4b59      	ldr	r3, [pc, #356]	; (80117cc <txPushSingleFrame+0x194>)
 8011668:	4a56      	ldr	r2, [pc, #344]	; (80117c4 <txPushSingleFrame+0x18c>)
 801166a:	f240 115b 	movw	r1, #347	; 0x15b
 801166e:	4856      	ldr	r0, [pc, #344]	; (80117c8 <txPushSingleFrame+0x190>)
 8011670:	f001 fc98 	bl	8012fa4 <__assert_func>
 8011674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011676:	3301      	adds	r3, #1
 8011678:	4618      	mov	r0, r3
 801167a:	f7ff ff2f 	bl	80114dc <txRoundFramePayloadSizeUp>
 801167e:	6238      	str	r0, [r7, #32]
 8011680:	6a3a      	ldr	r2, [r7, #32]
 8011682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011684:	429a      	cmp	r2, r3
 8011686:	d806      	bhi.n	8011696 <txPushSingleFrame+0x5e>
 8011688:	4b51      	ldr	r3, [pc, #324]	; (80117d0 <txPushSingleFrame+0x198>)
 801168a:	4a4e      	ldr	r2, [pc, #312]	; (80117c4 <txPushSingleFrame+0x18c>)
 801168c:	f240 115d 	movw	r1, #349	; 0x15d
 8011690:	484d      	ldr	r0, [pc, #308]	; (80117c8 <txPushSingleFrame+0x190>)
 8011692:	f001 fc87 	bl	8012fa4 <__assert_func>
 8011696:	6a3a      	ldr	r2, [r7, #32]
 8011698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	3b01      	subs	r3, #1
 801169e:	61fb      	str	r3, [r7, #28]
 80116a0:	69fa      	ldr	r2, [r7, #28]
 80116a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116a4:	4413      	add	r3, r2
 80116a6:	3301      	adds	r3, #1
 80116a8:	6a3a      	ldr	r2, [r7, #32]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d006      	beq.n	80116bc <txPushSingleFrame+0x84>
 80116ae:	4b49      	ldr	r3, [pc, #292]	; (80117d4 <txPushSingleFrame+0x19c>)
 80116b0:	4a44      	ldr	r2, [pc, #272]	; (80117c4 <txPushSingleFrame+0x18c>)
 80116b2:	f240 115f 	movw	r1, #351	; 0x15f
 80116b6:	4844      	ldr	r0, [pc, #272]	; (80117c8 <txPushSingleFrame+0x190>)
 80116b8:	f001 fc74 	bl	8012fa4 <__assert_func>
 80116bc:	2300      	movs	r3, #0
 80116be:	627b      	str	r3, [r7, #36]	; 0x24
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	689a      	ldr	r2, [r3, #8]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d209      	bcs.n	80116e0 <txPushSingleFrame+0xa8>
 80116cc:	6a3b      	ldr	r3, [r7, #32]
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116d6:	68b8      	ldr	r0, [r7, #8]
 80116d8:	f7ff ff32 	bl	8011540 <txAllocateQueueItem>
 80116dc:	4603      	mov	r3, r0
 80116de:	e000      	b.n	80116e2 <txPushSingleFrame+0xaa>
 80116e0:	2300      	movs	r3, #0
 80116e2:	61bb      	str	r3, [r7, #24]
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d054      	beq.n	8011794 <txPushSingleFrame+0x15c>
 80116ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d010      	beq.n	8011712 <txPushSingleFrame+0xda>
 80116f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d106      	bne.n	8011704 <txPushSingleFrame+0xcc>
 80116f6:	4b38      	ldr	r3, [pc, #224]	; (80117d8 <txPushSingleFrame+0x1a0>)
 80116f8:	4a32      	ldr	r2, [pc, #200]	; (80117c4 <txPushSingleFrame+0x18c>)
 80116fa:	f240 1167 	movw	r1, #359	; 0x167
 80116fe:	4832      	ldr	r0, [pc, #200]	; (80117c8 <txPushSingleFrame+0x190>)
 8011700:	f001 fc50 	bl	8012fa4 <__assert_func>
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	3330      	adds	r3, #48	; 0x30
 8011708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801170a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801170c:	4618      	mov	r0, r3
 801170e:	f002 fdf2 	bl	80142f6 <memcpy>
 8011712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011714:	3330      	adds	r3, #48	; 0x30
 8011716:	69ba      	ldr	r2, [r7, #24]
 8011718:	4413      	add	r3, r2
 801171a:	69fa      	ldr	r2, [r7, #28]
 801171c:	2100      	movs	r1, #0
 801171e:	4618      	mov	r0, r3
 8011720:	f002 fd03 	bl	801412a <memset>
 8011724:	6a3b      	ldr	r3, [r7, #32]
 8011726:	1e5c      	subs	r4, r3, #1
 8011728:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801172c:	2201      	movs	r2, #1
 801172e:	2101      	movs	r1, #1
 8011730:	2001      	movs	r0, #1
 8011732:	f7ff fe91 	bl	8011458 <txMakeTailByte>
 8011736:	4603      	mov	r3, r0
 8011738:	461a      	mov	r2, r3
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	4423      	add	r3, r4
 801173e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f103 000c 	add.w	r0, r3, #12
 8011748:	69b9      	ldr	r1, [r7, #24]
 801174a:	4b24      	ldr	r3, [pc, #144]	; (80117dc <txPushSingleFrame+0x1a4>)
 801174c:	4a24      	ldr	r2, [pc, #144]	; (80117e0 <txPushSingleFrame+0x1a8>)
 801174e:	f7ff fae7 	bl	8010d20 <cavlSearch>
 8011752:	6178      	str	r0, [r7, #20]
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	697a      	ldr	r2, [r7, #20]
 8011758:	429a      	cmp	r2, r3
 801175a:	d006      	beq.n	801176a <txPushSingleFrame+0x132>
 801175c:	4b21      	ldr	r3, [pc, #132]	; (80117e4 <txPushSingleFrame+0x1ac>)
 801175e:	4a19      	ldr	r2, [pc, #100]	; (80117c4 <txPushSingleFrame+0x18c>)
 8011760:	f240 1173 	movw	r1, #371	; 0x173
 8011764:	4818      	ldr	r0, [pc, #96]	; (80117c8 <txPushSingleFrame+0x190>)
 8011766:	f001 fc1d 	bl	8012fa4 <__assert_func>
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	1c5a      	adds	r2, r3, #1
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	609a      	str	r2, [r3, #8]
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	689a      	ldr	r2, [r3, #8]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	429a      	cmp	r2, r3
 801177e:	d906      	bls.n	801178e <txPushSingleFrame+0x156>
 8011780:	4b19      	ldr	r3, [pc, #100]	; (80117e8 <txPushSingleFrame+0x1b0>)
 8011782:	4a10      	ldr	r2, [pc, #64]	; (80117c4 <txPushSingleFrame+0x18c>)
 8011784:	f240 1175 	movw	r1, #373	; 0x175
 8011788:	480f      	ldr	r0, [pc, #60]	; (80117c8 <txPushSingleFrame+0x190>)
 801178a:	f001 fc0b 	bl	8012fa4 <__assert_func>
 801178e:	2301      	movs	r3, #1
 8011790:	627b      	str	r3, [r7, #36]	; 0x24
 8011792:	e002      	b.n	801179a <txPushSingleFrame+0x162>
 8011794:	f06f 0302 	mvn.w	r3, #2
 8011798:	627b      	str	r3, [r7, #36]	; 0x24
 801179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179c:	2b00      	cmp	r3, #0
 801179e:	db09      	blt.n	80117b4 <txPushSingleFrame+0x17c>
 80117a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d006      	beq.n	80117b4 <txPushSingleFrame+0x17c>
 80117a6:	4b11      	ldr	r3, [pc, #68]	; (80117ec <txPushSingleFrame+0x1b4>)
 80117a8:	4a06      	ldr	r2, [pc, #24]	; (80117c4 <txPushSingleFrame+0x18c>)
 80117aa:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80117ae:	4806      	ldr	r0, [pc, #24]	; (80117c8 <txPushSingleFrame+0x190>)
 80117b0:	f001 fbf8 	bl	8012fa4 <__assert_func>
 80117b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b6:	4618      	mov	r0, r3
 80117b8:	372c      	adds	r7, #44	; 0x2c
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd90      	pop	{r4, r7, pc}
 80117be:	bf00      	nop
 80117c0:	08017b64 	.word	0x08017b64
 80117c4:	08018770 	.word	0x08018770
 80117c8:	080179a0 	.word	0x080179a0
 80117cc:	08017bc0 	.word	0x08017bc0
 80117d0:	08017bf0 	.word	0x08017bf0
 80117d4:	08017c14 	.word	0x08017c14
 80117d8:	08017c50 	.word	0x08017c50
 80117dc:	08011081 	.word	0x08011081
 80117e0:	080115e5 	.word	0x080115e5
 80117e4:	08017c68 	.word	0x08017c68
 80117e8:	08017c80 	.word	0x08017c80
 80117ec:	08017c9c 	.word	0x08017c9c

080117f0 <txGenerateMultiFrameChain>:
 80117f0:	b590      	push	{r4, r7, lr}
 80117f2:	b093      	sub	sp, #76	; 0x4c
 80117f4:	af02      	add	r7, sp, #8
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d106      	bne.n	8011810 <txGenerateMultiFrameChain+0x20>
 8011802:	4b93      	ldr	r3, [pc, #588]	; (8011a50 <txGenerateMultiFrameChain+0x260>)
 8011804:	4a93      	ldr	r2, [pc, #588]	; (8011a54 <txGenerateMultiFrameChain+0x264>)
 8011806:	f240 1189 	movw	r1, #393	; 0x189
 801180a:	4893      	ldr	r0, [pc, #588]	; (8011a58 <txGenerateMultiFrameChain+0x268>)
 801180c:	f001 fbca 	bl	8012fa4 <__assert_func>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d106      	bne.n	8011824 <txGenerateMultiFrameChain+0x34>
 8011816:	4b91      	ldr	r3, [pc, #580]	; (8011a5c <txGenerateMultiFrameChain+0x26c>)
 8011818:	4a8e      	ldr	r2, [pc, #568]	; (8011a54 <txGenerateMultiFrameChain+0x264>)
 801181a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801181e:	488e      	ldr	r0, [pc, #568]	; (8011a58 <txGenerateMultiFrameChain+0x268>)
 8011820:	f001 fbc0 	bl	8012fa4 <__assert_func>
 8011824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	429a      	cmp	r2, r3
 801182a:	d806      	bhi.n	801183a <txGenerateMultiFrameChain+0x4a>
 801182c:	4b8c      	ldr	r3, [pc, #560]	; (8011a60 <txGenerateMultiFrameChain+0x270>)
 801182e:	4a89      	ldr	r2, [pc, #548]	; (8011a54 <txGenerateMultiFrameChain+0x264>)
 8011830:	f240 118b 	movw	r1, #395	; 0x18b
 8011834:	4888      	ldr	r0, [pc, #544]	; (8011a58 <txGenerateMultiFrameChain+0x268>)
 8011836:	f001 fbb5 	bl	8012fa4 <__assert_func>
 801183a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801183c:	2b00      	cmp	r3, #0
 801183e:	d106      	bne.n	801184e <txGenerateMultiFrameChain+0x5e>
 8011840:	4b88      	ldr	r3, [pc, #544]	; (8011a64 <txGenerateMultiFrameChain+0x274>)
 8011842:	4a84      	ldr	r2, [pc, #528]	; (8011a54 <txGenerateMultiFrameChain+0x264>)
 8011844:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8011848:	4883      	ldr	r0, [pc, #524]	; (8011a58 <txGenerateMultiFrameChain+0x268>)
 801184a:	f001 fbab 	bl	8012fa4 <__assert_func>
 801184e:	2300      	movs	r3, #0
 8011850:	613b      	str	r3, [r7, #16]
 8011852:	2300      	movs	r3, #0
 8011854:	617b      	str	r3, [r7, #20]
 8011856:	2300      	movs	r3, #0
 8011858:	61bb      	str	r3, [r7, #24]
 801185a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801185c:	3302      	adds	r3, #2
 801185e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011860:	2300      	movs	r3, #0
 8011862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011866:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011868:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801186c:	f7ff fc34 	bl	80110d8 <crcAdd>
 8011870:	4603      	mov	r3, r0
 8011872:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011874:	2301      	movs	r3, #1
 8011876:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 801187a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801187c:	637b      	str	r3, [r7, #52]	; 0x34
 801187e:	e0d4      	b.n	8011a2a <txGenerateMultiFrameChain+0x23a>
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	3301      	adds	r3, #1
 8011884:	61bb      	str	r3, [r7, #24]
 8011886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	429a      	cmp	r2, r3
 8011890:	d908      	bls.n	80118a4 <txGenerateMultiFrameChain+0xb4>
 8011892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	3301      	adds	r3, #1
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff fe1e 	bl	80114dc <txRoundFramePayloadSizeUp>
 80118a0:	4603      	mov	r3, r0
 80118a2:	e001      	b.n	80118a8 <txGenerateMultiFrameChain+0xb8>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3301      	adds	r3, #1
 80118a8:	627b      	str	r3, [r7, #36]	; 0x24
 80118aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80118b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118b4:	68b8      	ldr	r0, [r7, #8]
 80118b6:	f7ff fe43 	bl	8011540 <txAllocateQueueItem>
 80118ba:	6238      	str	r0, [r7, #32]
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d102      	bne.n	80118c8 <txGenerateMultiFrameChain+0xd8>
 80118c2:	6a3b      	ldr	r3, [r7, #32]
 80118c4:	613b      	str	r3, [r7, #16]
 80118c6:	e002      	b.n	80118ce <txGenerateMultiFrameChain+0xde>
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	6a3a      	ldr	r2, [r7, #32]
 80118cc:	611a      	str	r2, [r3, #16]
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	617b      	str	r3, [r7, #20]
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f000 80ae 	beq.w	8011a36 <txGenerateMultiFrameChain+0x246>
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	3b01      	subs	r3, #1
 80118de:	61fb      	str	r3, [r7, #28]
 80118e0:	2300      	movs	r3, #0
 80118e2:	633b      	str	r3, [r7, #48]	; 0x30
 80118e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d21c      	bcs.n	8011926 <txGenerateMultiFrameChain+0x136>
 80118ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d901      	bls.n	8011900 <txGenerateMultiFrameChain+0x110>
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	3330      	adds	r3, #48	; 0x30
 8011904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011906:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011908:	4618      	mov	r0, r3
 801190a:	f002 fcf4 	bl	80142f6 <memcpy>
 801190e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011912:	4413      	add	r3, r2
 8011914:	633b      	str	r3, [r7, #48]	; 0x30
 8011916:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191a:	4413      	add	r3, r2
 801191c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801191e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011922:	4413      	add	r3, r2
 8011924:	637b      	str	r3, [r7, #52]	; 0x34
 8011926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801192a:	429a      	cmp	r2, r3
 801192c:	d343      	bcc.n	80119b6 <txGenerateMultiFrameChain+0x1c6>
 801192e:	e00f      	b.n	8011950 <txGenerateMultiFrameChain+0x160>
 8011930:	697a      	ldr	r2, [r7, #20]
 8011932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011934:	4413      	add	r3, r2
 8011936:	3330      	adds	r3, #48	; 0x30
 8011938:	2200      	movs	r2, #0
 801193a:	701a      	strb	r2, [r3, #0]
 801193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193e:	3301      	adds	r3, #1
 8011940:	633b      	str	r3, [r7, #48]	; 0x30
 8011942:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011944:	2100      	movs	r1, #0
 8011946:	4618      	mov	r0, r3
 8011948:	f7ff fba6 	bl	8011098 <crcAddByte>
 801194c:	4603      	mov	r3, r0
 801194e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011952:	3302      	adds	r3, #2
 8011954:	69fa      	ldr	r2, [r7, #28]
 8011956:	429a      	cmp	r2, r3
 8011958:	d8ea      	bhi.n	8011930 <txGenerateMultiFrameChain+0x140>
 801195a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	429a      	cmp	r2, r3
 8011960:	d213      	bcs.n	801198a <txGenerateMultiFrameChain+0x19a>
 8011962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011966:	429a      	cmp	r2, r3
 8011968:	d10f      	bne.n	801198a <txGenerateMultiFrameChain+0x19a>
 801196a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801196c:	0a1b      	lsrs	r3, r3, #8
 801196e:	b29b      	uxth	r3, r3
 8011970:	697a      	ldr	r2, [r7, #20]
 8011972:	b2d9      	uxtb	r1, r3
 8011974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011976:	4413      	add	r3, r2
 8011978:	3330      	adds	r3, #48	; 0x30
 801197a:	460a      	mov	r2, r1
 801197c:	701a      	strb	r2, [r3, #0]
 801197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011980:	3301      	adds	r3, #1
 8011982:	633b      	str	r3, [r7, #48]	; 0x30
 8011984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011986:	3301      	adds	r3, #1
 8011988:	63fb      	str	r3, [r7, #60]	; 0x3c
 801198a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	429a      	cmp	r2, r3
 8011990:	d211      	bcs.n	80119b6 <txGenerateMultiFrameChain+0x1c6>
 8011992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011996:	429a      	cmp	r2, r3
 8011998:	d90d      	bls.n	80119b6 <txGenerateMultiFrameChain+0x1c6>
 801199a:	697a      	ldr	r2, [r7, #20]
 801199c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801199e:	b2d9      	uxtb	r1, r3
 80119a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a2:	4413      	add	r3, r2
 80119a4:	3330      	adds	r3, #48	; 0x30
 80119a6:	460a      	mov	r2, r1
 80119a8:	701a      	strb	r2, [r3, #0]
 80119aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ac:	3301      	adds	r3, #1
 80119ae:	633b      	str	r3, [r7, #48]	; 0x30
 80119b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b2:	3301      	adds	r3, #1
 80119b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	1c5a      	adds	r2, r3, #1
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119be:	429a      	cmp	r2, r3
 80119c0:	d006      	beq.n	80119d0 <txGenerateMultiFrameChain+0x1e0>
 80119c2:	4b29      	ldr	r3, [pc, #164]	; (8011a68 <txGenerateMultiFrameChain+0x278>)
 80119c4:	4a23      	ldr	r2, [pc, #140]	; (8011a54 <txGenerateMultiFrameChain+0x264>)
 80119c6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80119ca:	4823      	ldr	r0, [pc, #140]	; (8011a58 <txGenerateMultiFrameChain+0x268>)
 80119cc:	f001 faea 	bl	8012fa4 <__assert_func>
 80119d0:	693a      	ldr	r2, [r7, #16]
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	bf0c      	ite	eq
 80119d8:	2301      	moveq	r3, #1
 80119da:	2300      	movne	r3, #0
 80119dc:	b2d8      	uxtb	r0, r3
 80119de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80119e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e2:	429a      	cmp	r2, r3
 80119e4:	bf2c      	ite	cs
 80119e6:	2301      	movcs	r3, #1
 80119e8:	2300      	movcc	r3, #0
 80119ea:	b2d9      	uxtb	r1, r3
 80119ec:	697c      	ldr	r4, [r7, #20]
 80119ee:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80119f2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80119f6:	f7ff fd2f 	bl	8011458 <txMakeTailByte>
 80119fa:	4603      	mov	r3, r0
 80119fc:	461a      	mov	r2, r3
 80119fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a00:	4423      	add	r3, r4
 8011a02:	3330      	adds	r3, #48	; 0x30
 8011a04:	701a      	strb	r2, [r3, #0]
 8011a06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	bf14      	ite	ne
 8011a0e:	2301      	movne	r3, #1
 8011a10:	2300      	moveq	r3, #0
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	f083 0301 	eor.w	r3, r3, #1
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8011a1e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011a22:	f003 0301 	and.w	r3, r3, #1
 8011a26:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8011a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	f4ff af26 	bcc.w	8011880 <txGenerateMultiFrameChain+0x90>
 8011a34:	e000      	b.n	8011a38 <txGenerateMultiFrameChain+0x248>
 8011a36:	bf00      	nop
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	461c      	mov	r4, r3
 8011a3c:	f107 0310 	add.w	r3, r7, #16
 8011a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	3744      	adds	r7, #68	; 0x44
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd90      	pop	{r4, r7, pc}
 8011a50:	08017b64 	.word	0x08017b64
 8011a54:	08018840 	.word	0x08018840
 8011a58:	080179a0 	.word	0x080179a0
 8011a5c:	08017cb4 	.word	0x08017cb4
 8011a60:	08017cd0 	.word	0x08017cd0
 8011a64:	08017c50 	.word	0x08017c50
 8011a68:	08017cf8 	.word	0x08017cf8

08011a6c <txPushMultiFrame>:
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b094      	sub	sp, #80	; 0x50
 8011a70:	af06      	add	r7, sp, #24
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d002      	beq.n	8011a84 <txPushMultiFrame+0x18>
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d106      	bne.n	8011a92 <txPushMultiFrame+0x26>
 8011a84:	4b65      	ldr	r3, [pc, #404]	; (8011c1c <txPushMultiFrame+0x1b0>)
 8011a86:	4a66      	ldr	r2, [pc, #408]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011a88:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8011a8c:	4865      	ldr	r0, [pc, #404]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011a8e:	f001 fa89 	bl	8012fa4 <__assert_func>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d106      	bne.n	8011aa6 <txPushMultiFrame+0x3a>
 8011a98:	4b63      	ldr	r3, [pc, #396]	; (8011c28 <txPushMultiFrame+0x1bc>)
 8011a9a:	4a61      	ldr	r2, [pc, #388]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011a9c:	f240 11ed 	movw	r1, #493	; 0x1ed
 8011aa0:	4860      	ldr	r0, [pc, #384]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011aa2:	f001 fa7f 	bl	8012fa4 <__assert_func>
 8011aa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d806      	bhi.n	8011abc <txPushMultiFrame+0x50>
 8011aae:	4b5f      	ldr	r3, [pc, #380]	; (8011c2c <txPushMultiFrame+0x1c0>)
 8011ab0:	4a5b      	ldr	r2, [pc, #364]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011ab2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8011ab6:	485b      	ldr	r0, [pc, #364]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011ab8:	f001 fa74 	bl	8012fa4 <__assert_func>
 8011abc:	2300      	movs	r3, #0
 8011abe:	637b      	str	r3, [r7, #52]	; 0x34
 8011ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac2:	3302      	adds	r3, #2
 8011ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4413      	add	r3, r2
 8011acc:	1e5a      	subs	r2, r3, #1
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8011ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d806      	bhi.n	8011aea <txPushMultiFrame+0x7e>
 8011adc:	4b54      	ldr	r3, [pc, #336]	; (8011c30 <txPushMultiFrame+0x1c4>)
 8011ade:	4a50      	ldr	r2, [pc, #320]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011ae0:	f240 11f3 	movw	r1, #499	; 0x1f3
 8011ae4:	484f      	ldr	r0, [pc, #316]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011ae6:	f001 fa5d 	bl	8012fa4 <__assert_func>
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	689a      	ldr	r2, [r3, #8]
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	441a      	add	r2, r3
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d87b      	bhi.n	8011bf2 <txPushMultiFrame+0x186>
 8011afa:	f107 0010 	add.w	r0, r7, #16
 8011afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b00:	9305      	str	r3, [sp, #20]
 8011b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b04:	9304      	str	r3, [sp, #16]
 8011b06:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011b0a:	9303      	str	r3, [sp, #12]
 8011b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b0e:	9302      	str	r3, [sp, #8]
 8011b10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011b14:	e9cd 2300 	strd	r2, r3, [sp]
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	68b9      	ldr	r1, [r7, #8]
 8011b1c:	f7ff fe68 	bl	80117f0 <txGenerateMultiFrameChain>
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d051      	beq.n	8011bca <txPushMultiFrame+0x15e>
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	633b      	str	r3, [r7, #48]	; 0x30
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	f103 000c 	add.w	r0, r3, #12
 8011b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b32:	4b40      	ldr	r3, [pc, #256]	; (8011c34 <txPushMultiFrame+0x1c8>)
 8011b34:	4a40      	ldr	r2, [pc, #256]	; (8011c38 <txPushMultiFrame+0x1cc>)
 8011b36:	f7ff f8f3 	bl	8010d20 <cavlSearch>
 8011b3a:	61f8      	str	r0, [r7, #28]
 8011b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3e:	69fa      	ldr	r2, [r7, #28]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d006      	beq.n	8011b52 <txPushMultiFrame+0xe6>
 8011b44:	4b3d      	ldr	r3, [pc, #244]	; (8011c3c <txPushMultiFrame+0x1d0>)
 8011b46:	4a36      	ldr	r2, [pc, #216]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011b48:	f240 2105 	movw	r1, #517	; 0x205
 8011b4c:	4835      	ldr	r0, [pc, #212]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011b4e:	f001 fa29 	bl	8012fa4 <__assert_func>
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <txPushMultiFrame+0xfc>
 8011b5a:	4b39      	ldr	r3, [pc, #228]	; (8011c40 <txPushMultiFrame+0x1d4>)
 8011b5c:	4a30      	ldr	r2, [pc, #192]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011b5e:	f240 2106 	movw	r1, #518	; 0x206
 8011b62:	4830      	ldr	r0, [pc, #192]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011b64:	f001 fa1e 	bl	8012fa4 <__assert_func>
 8011b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6a:	691b      	ldr	r3, [r3, #16]
 8011b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1da      	bne.n	8011b2a <txPushMultiFrame+0xbe>
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d006      	beq.n	8011b8a <txPushMultiFrame+0x11e>
 8011b7c:	4b31      	ldr	r3, [pc, #196]	; (8011c44 <txPushMultiFrame+0x1d8>)
 8011b7e:	4a28      	ldr	r2, [pc, #160]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011b80:	f240 2109 	movw	r1, #521	; 0x209
 8011b84:	4827      	ldr	r0, [pc, #156]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011b86:	f001 fa0d 	bl	8012fa4 <__assert_func>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	689a      	ldr	r2, [r3, #8]
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	441a      	add	r2, r3
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	609a      	str	r2, [r3, #8]
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	689a      	ldr	r2, [r3, #8]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d906      	bls.n	8011bb0 <txPushMultiFrame+0x144>
 8011ba2:	4b29      	ldr	r3, [pc, #164]	; (8011c48 <txPushMultiFrame+0x1dc>)
 8011ba4:	4a1e      	ldr	r2, [pc, #120]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011ba6:	f240 210b 	movw	r1, #523	; 0x20b
 8011baa:	481e      	ldr	r0, [pc, #120]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011bac:	f001 f9fa 	bl	8012fa4 <__assert_func>
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	da06      	bge.n	8011bc4 <txPushMultiFrame+0x158>
 8011bb6:	4b25      	ldr	r3, [pc, #148]	; (8011c4c <txPushMultiFrame+0x1e0>)
 8011bb8:	4a19      	ldr	r2, [pc, #100]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011bba:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8011bbe:	4819      	ldr	r0, [pc, #100]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011bc0:	f001 f9f0 	bl	8012fa4 <__assert_func>
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8011bc8:	e016      	b.n	8011bf8 <txPushMultiFrame+0x18c>
 8011bca:	f06f 0302 	mvn.w	r3, #2
 8011bce:	637b      	str	r3, [r7, #52]	; 0x34
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bd4:	e009      	b.n	8011bea <txPushMultiFrame+0x17e>
 8011bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd8:	691b      	ldr	r3, [r3, #16]
 8011bda:	623b      	str	r3, [r7, #32]
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011be2:	68b8      	ldr	r0, [r7, #8]
 8011be4:	4798      	blx	r3
 8011be6:	6a3b      	ldr	r3, [r7, #32]
 8011be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d1f2      	bne.n	8011bd6 <txPushMultiFrame+0x16a>
 8011bf0:	e002      	b.n	8011bf8 <txPushMultiFrame+0x18c>
 8011bf2:	f06f 0302 	mvn.w	r3, #2
 8011bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8011bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	db09      	blt.n	8011c12 <txPushMultiFrame+0x1a6>
 8011bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	dc06      	bgt.n	8011c12 <txPushMultiFrame+0x1a6>
 8011c04:	4b12      	ldr	r3, [pc, #72]	; (8011c50 <txPushMultiFrame+0x1e4>)
 8011c06:	4a06      	ldr	r2, [pc, #24]	; (8011c20 <txPushMultiFrame+0x1b4>)
 8011c08:	f240 211f 	movw	r1, #543	; 0x21f
 8011c0c:	4805      	ldr	r0, [pc, #20]	; (8011c24 <txPushMultiFrame+0x1b8>)
 8011c0e:	f001 f9c9 	bl	8012fa4 <__assert_func>
 8011c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c14:	4618      	mov	r0, r3
 8011c16:	3738      	adds	r7, #56	; 0x38
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	08017d34 	.word	0x08017d34
 8011c20:	0801882c 	.word	0x0801882c
 8011c24:	080179a0 	.word	0x080179a0
 8011c28:	08017cb4 	.word	0x08017cb4
 8011c2c:	08017cd0 	.word	0x08017cd0
 8011c30:	08017d64 	.word	0x08017d64
 8011c34:	08011081 	.word	0x08011081
 8011c38:	080115e5 	.word	0x080115e5
 8011c3c:	08017d74 	.word	0x08017d74
 8011c40:	08017d88 	.word	0x08017d88
 8011c44:	08017da4 	.word	0x08017da4
 8011c48:	08017c80 	.word	0x08017c80
 8011c4c:	08017dbc 	.word	0x08017dbc
 8011c50:	08017de0 	.word	0x08017de0

08011c54 <rxTryParseFrame>:
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b088      	sub	sp, #32
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011c5e:	607a      	str	r2, [r7, #4]
 8011c60:	603b      	str	r3, [r7, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d106      	bne.n	8011c76 <rxTryParseFrame+0x22>
 8011c68:	4b96      	ldr	r3, [pc, #600]	; (8011ec4 <rxTryParseFrame+0x270>)
 8011c6a:	4a97      	ldr	r2, [pc, #604]	; (8011ec8 <rxTryParseFrame+0x274>)
 8011c6c:	f240 214e 	movw	r1, #590	; 0x24e
 8011c70:	4896      	ldr	r0, [pc, #600]	; (8011ecc <rxTryParseFrame+0x278>)
 8011c72:	f001 f997 	bl	8012fa4 <__assert_func>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c7e:	d306      	bcc.n	8011c8e <rxTryParseFrame+0x3a>
 8011c80:	4b93      	ldr	r3, [pc, #588]	; (8011ed0 <rxTryParseFrame+0x27c>)
 8011c82:	4a91      	ldr	r2, [pc, #580]	; (8011ec8 <rxTryParseFrame+0x274>)
 8011c84:	f240 214f 	movw	r1, #591	; 0x24f
 8011c88:	4890      	ldr	r0, [pc, #576]	; (8011ecc <rxTryParseFrame+0x278>)
 8011c8a:	f001 f98b 	bl	8012fa4 <__assert_func>
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d106      	bne.n	8011ca2 <rxTryParseFrame+0x4e>
 8011c94:	4b8f      	ldr	r3, [pc, #572]	; (8011ed4 <rxTryParseFrame+0x280>)
 8011c96:	4a8c      	ldr	r2, [pc, #560]	; (8011ec8 <rxTryParseFrame+0x274>)
 8011c98:	f44f 7114 	mov.w	r1, #592	; 0x250
 8011c9c:	488b      	ldr	r0, [pc, #556]	; (8011ecc <rxTryParseFrame+0x278>)
 8011c9e:	f001 f981 	bl	8012fa4 <__assert_func>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	77fb      	strb	r3, [r7, #31]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	f000 8105 	beq.w	8011eba <rxTryParseFrame+0x266>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d106      	bne.n	8011cc6 <rxTryParseFrame+0x72>
 8011cb8:	4b87      	ldr	r3, [pc, #540]	; (8011ed8 <rxTryParseFrame+0x284>)
 8011cba:	4a83      	ldr	r2, [pc, #524]	; (8011ec8 <rxTryParseFrame+0x274>)
 8011cbc:	f44f 7115 	mov.w	r1, #596	; 0x254
 8011cc0:	4882      	ldr	r0, [pc, #520]	; (8011ecc <rxTryParseFrame+0x278>)
 8011cc2:	f001 f96f 	bl	8012fa4 <__assert_func>
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011ccc:	e9c1 2300 	strd	r2, r3, [r1]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	61bb      	str	r3, [r7, #24]
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	0e9b      	lsrs	r3, r3, #26
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	f003 0307 	and.w	r3, r3, #7
 8011ce0:	b2da      	uxtb	r2, r3
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	721a      	strb	r2, [r3, #8]
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cee:	b2da      	uxtb	r2, r3
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	731a      	strb	r2, [r3, #12]
 8011cf4:	69bb      	ldr	r3, [r7, #24]
 8011cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d128      	bne.n	8011d50 <rxTryParseFrame+0xfc>
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2200      	movs	r2, #0
 8011d02:	725a      	strb	r2, [r3, #9]
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	0a1b      	lsrs	r3, r3, #8
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	815a      	strh	r2, [r3, #10]
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d002      	beq.n	8011d24 <rxTryParseFrame+0xd0>
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	22ff      	movs	r2, #255	; 0xff
 8011d22:	731a      	strb	r2, [r3, #12]
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	22ff      	movs	r2, #255	; 0xff
 8011d28:	735a      	strb	r2, [r3, #13]
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d106      	bne.n	8011d42 <rxTryParseFrame+0xee>
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d101      	bne.n	8011d42 <rxTryParseFrame+0xee>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	e000      	b.n	8011d44 <rxTryParseFrame+0xf0>
 8011d42:	2300      	movs	r3, #0
 8011d44:	77fb      	strb	r3, [r7, #31]
 8011d46:	7ffb      	ldrb	r3, [r7, #31]
 8011d48:	f003 0301 	and.w	r3, r3, #1
 8011d4c:	77fb      	strb	r3, [r7, #31]
 8011d4e:	e02c      	b.n	8011daa <rxTryParseFrame+0x156>
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <rxTryParseFrame+0x10a>
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	e000      	b.n	8011d60 <rxTryParseFrame+0x10c>
 8011d5e:	2201      	movs	r2, #1
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	725a      	strb	r2, [r3, #9]
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	0b9b      	lsrs	r3, r3, #14
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d6e:	b29a      	uxth	r2, r3
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	815a      	strh	r2, [r3, #10]
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	09db      	lsrs	r3, r3, #7
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d7e:	b2da      	uxtb	r2, r3
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	735a      	strb	r2, [r3, #13]
 8011d84:	69bb      	ldr	r3, [r7, #24]
 8011d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d107      	bne.n	8011d9e <rxTryParseFrame+0x14a>
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	7b1a      	ldrb	r2, [r3, #12]
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	7b5b      	ldrb	r3, [r3, #13]
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d001      	beq.n	8011d9e <rxTryParseFrame+0x14a>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e000      	b.n	8011da0 <rxTryParseFrame+0x14c>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	77fb      	strb	r3, [r7, #31]
 8011da2:	7ffb      	ldrb	r3, [r7, #31]
 8011da4:	f003 0301 	and.w	r3, r3, #1
 8011da8:	77fb      	strb	r3, [r7, #31]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	1e5a      	subs	r2, r3, #1
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	615a      	str	r2, [r3, #20]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	689a      	ldr	r2, [r3, #8]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	619a      	str	r2, [r3, #24]
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	699a      	ldr	r2, [r3, #24]
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	695b      	ldr	r3, [r3, #20]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	75fb      	strb	r3, [r7, #23]
 8011dca:	7dfb      	ldrb	r3, [r7, #23]
 8011dcc:	f003 031f 	and.w	r3, r3, #31
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	739a      	strb	r2, [r3, #14]
 8011dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	09db      	lsrs	r3, r3, #7
 8011dde:	b2da      	uxtb	r2, r3
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	73da      	strb	r2, [r3, #15]
 8011de4:	7dfb      	ldrb	r3, [r7, #23]
 8011de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	bf14      	ite	ne
 8011dee:	2301      	movne	r3, #1
 8011df0:	2300      	moveq	r3, #0
 8011df2:	b2da      	uxtb	r2, r3
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	741a      	strb	r2, [r3, #16]
 8011df8:	7dfb      	ldrb	r3, [r7, #23]
 8011dfa:	f003 0320 	and.w	r3, r3, #32
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	bf14      	ite	ne
 8011e02:	2301      	movne	r3, #1
 8011e04:	2300      	moveq	r3, #0
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	745a      	strb	r2, [r3, #17]
 8011e0c:	7ffb      	ldrb	r3, [r7, #31]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d00c      	beq.n	8011e2c <rxTryParseFrame+0x1d8>
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	7bdb      	ldrb	r3, [r3, #15]
 8011e16:	f083 0301 	eor.w	r3, r3, #1
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d103      	bne.n	8011e28 <rxTryParseFrame+0x1d4>
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	7c5b      	ldrb	r3, [r3, #17]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d001      	beq.n	8011e2c <rxTryParseFrame+0x1d8>
 8011e28:	2301      	movs	r3, #1
 8011e2a:	e000      	b.n	8011e2e <rxTryParseFrame+0x1da>
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	77fb      	strb	r3, [r7, #31]
 8011e30:	7ffb      	ldrb	r3, [r7, #31]
 8011e32:	f003 0301 	and.w	r3, r3, #1
 8011e36:	77fb      	strb	r3, [r7, #31]
 8011e38:	7ffb      	ldrb	r3, [r7, #31]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00d      	beq.n	8011e5a <rxTryParseFrame+0x206>
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	7bdb      	ldrb	r3, [r3, #15]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d003      	beq.n	8011e4e <rxTryParseFrame+0x1fa>
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	7c1b      	ldrb	r3, [r3, #16]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d103      	bne.n	8011e56 <rxTryParseFrame+0x202>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	7b1b      	ldrb	r3, [r3, #12]
 8011e52:	2bff      	cmp	r3, #255	; 0xff
 8011e54:	d001      	beq.n	8011e5a <rxTryParseFrame+0x206>
 8011e56:	2301      	movs	r3, #1
 8011e58:	e000      	b.n	8011e5c <rxTryParseFrame+0x208>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	77fb      	strb	r3, [r7, #31]
 8011e5e:	7ffb      	ldrb	r3, [r7, #31]
 8011e60:	f003 0301 	and.w	r3, r3, #1
 8011e64:	77fb      	strb	r3, [r7, #31]
 8011e66:	7ffb      	ldrb	r3, [r7, #31]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d009      	beq.n	8011e80 <rxTryParseFrame+0x22c>
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	695b      	ldr	r3, [r3, #20]
 8011e70:	2b06      	cmp	r3, #6
 8011e72:	d803      	bhi.n	8011e7c <rxTryParseFrame+0x228>
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	7c1b      	ldrb	r3, [r3, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d001      	beq.n	8011e80 <rxTryParseFrame+0x22c>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e000      	b.n	8011e82 <rxTryParseFrame+0x22e>
 8011e80:	2300      	movs	r3, #0
 8011e82:	77fb      	strb	r3, [r7, #31]
 8011e84:	7ffb      	ldrb	r3, [r7, #31]
 8011e86:	f003 0301 	and.w	r3, r3, #1
 8011e8a:	77fb      	strb	r3, [r7, #31]
 8011e8c:	7ffb      	ldrb	r3, [r7, #31]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00d      	beq.n	8011eae <rxTryParseFrame+0x25a>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	695b      	ldr	r3, [r3, #20]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d107      	bne.n	8011eaa <rxTryParseFrame+0x256>
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	7bdb      	ldrb	r3, [r3, #15]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d005      	beq.n	8011eae <rxTryParseFrame+0x25a>
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	7c1b      	ldrb	r3, [r3, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d001      	beq.n	8011eae <rxTryParseFrame+0x25a>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e000      	b.n	8011eb0 <rxTryParseFrame+0x25c>
 8011eae:	2300      	movs	r3, #0
 8011eb0:	77fb      	strb	r3, [r7, #31]
 8011eb2:	7ffb      	ldrb	r3, [r7, #31]
 8011eb4:	f003 0301 	and.w	r3, r3, #1
 8011eb8:	77fb      	strb	r3, [r7, #31]
 8011eba:	7ffb      	ldrb	r3, [r7, #31]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3720      	adds	r7, #32
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	08017df8 	.word	0x08017df8
 8011ec8:	0801887c 	.word	0x0801887c
 8011ecc:	080179a0 	.word	0x080179a0
 8011ed0:	08017e10 	.word	0x08017e10
 8011ed4:	08017e40 	.word	0x08017e40
 8011ed8:	08017e54 	.word	0x08017e54

08011edc <rxInitTransferMetadataFromFrame>:
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d106      	bne.n	8011efa <rxInitTransferMetadataFromFrame+0x1e>
 8011eec:	4b19      	ldr	r3, [pc, #100]	; (8011f54 <rxInitTransferMetadataFromFrame+0x78>)
 8011eee:	4a1a      	ldr	r2, [pc, #104]	; (8011f58 <rxInitTransferMetadataFromFrame+0x7c>)
 8011ef0:	f240 218f 	movw	r1, #655	; 0x28f
 8011ef4:	4819      	ldr	r0, [pc, #100]	; (8011f5c <rxInitTransferMetadataFromFrame+0x80>)
 8011ef6:	f001 f855 	bl	8012fa4 <__assert_func>
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	699b      	ldr	r3, [r3, #24]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <rxInitTransferMetadataFromFrame+0x34>
 8011f02:	4b17      	ldr	r3, [pc, #92]	; (8011f60 <rxInitTransferMetadataFromFrame+0x84>)
 8011f04:	4a14      	ldr	r2, [pc, #80]	; (8011f58 <rxInitTransferMetadataFromFrame+0x7c>)
 8011f06:	f44f 7124 	mov.w	r1, #656	; 0x290
 8011f0a:	4814      	ldr	r0, [pc, #80]	; (8011f5c <rxInitTransferMetadataFromFrame+0x80>)
 8011f0c:	f001 f84a 	bl	8012fa4 <__assert_func>
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <rxInitTransferMetadataFromFrame+0x48>
 8011f16:	4b13      	ldr	r3, [pc, #76]	; (8011f64 <rxInitTransferMetadataFromFrame+0x88>)
 8011f18:	4a0f      	ldr	r2, [pc, #60]	; (8011f58 <rxInitTransferMetadataFromFrame+0x7c>)
 8011f1a:	f240 2191 	movw	r1, #657	; 0x291
 8011f1e:	480f      	ldr	r0, [pc, #60]	; (8011f5c <rxInitTransferMetadataFromFrame+0x80>)
 8011f20:	f001 f840 	bl	8012fa4 <__assert_func>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	7a1a      	ldrb	r2, [r3, #8]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	701a      	strb	r2, [r3, #0]
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	7a5a      	ldrb	r2, [r3, #9]
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	705a      	strb	r2, [r3, #1]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	895a      	ldrh	r2, [r3, #10]
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	805a      	strh	r2, [r3, #2]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	7b1a      	ldrb	r2, [r3, #12]
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	711a      	strb	r2, [r3, #4]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	7b9a      	ldrb	r2, [r3, #14]
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	715a      	strb	r2, [r3, #5]
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	08017df8 	.word	0x08017df8
 8011f58:	08018910 	.word	0x08018910
 8011f5c:	080179a0 	.word	0x080179a0
 8011f60:	08017e54 	.word	0x08017e54
 8011f64:	08017e74 	.word	0x08017e74

08011f68 <rxComputeTransferIDDifference>:
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	4603      	mov	r3, r0
 8011f70:	460a      	mov	r2, r1
 8011f72:	71fb      	strb	r3, [r7, #7]
 8011f74:	4613      	mov	r3, r2
 8011f76:	71bb      	strb	r3, [r7, #6]
 8011f78:	79fb      	ldrb	r3, [r7, #7]
 8011f7a:	2b1f      	cmp	r3, #31
 8011f7c:	d906      	bls.n	8011f8c <rxComputeTransferIDDifference+0x24>
 8011f7e:	4b15      	ldr	r3, [pc, #84]	; (8011fd4 <rxComputeTransferIDDifference+0x6c>)
 8011f80:	4a15      	ldr	r2, [pc, #84]	; (8011fd8 <rxComputeTransferIDDifference+0x70>)
 8011f82:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8011f86:	4815      	ldr	r0, [pc, #84]	; (8011fdc <rxComputeTransferIDDifference+0x74>)
 8011f88:	f001 f80c 	bl	8012fa4 <__assert_func>
 8011f8c:	79bb      	ldrb	r3, [r7, #6]
 8011f8e:	2b1f      	cmp	r3, #31
 8011f90:	d906      	bls.n	8011fa0 <rxComputeTransferIDDifference+0x38>
 8011f92:	4b13      	ldr	r3, [pc, #76]	; (8011fe0 <rxComputeTransferIDDifference+0x78>)
 8011f94:	4a10      	ldr	r2, [pc, #64]	; (8011fd8 <rxComputeTransferIDDifference+0x70>)
 8011f96:	f240 219d 	movw	r1, #669	; 0x29d
 8011f9a:	4810      	ldr	r0, [pc, #64]	; (8011fdc <rxComputeTransferIDDifference+0x74>)
 8011f9c:	f001 f802 	bl	8012fa4 <__assert_func>
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	79bb      	ldrb	r3, [r7, #6]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	1ad3      	subs	r3, r2, r3
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	81fb      	strh	r3, [r7, #14]
 8011fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	da07      	bge.n	8011fc6 <rxComputeTransferIDDifference+0x5e>
 8011fb6:	2320      	movs	r3, #32
 8011fb8:	737b      	strb	r3, [r7, #13]
 8011fba:	7b7b      	ldrb	r3, [r7, #13]
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	89fb      	ldrh	r3, [r7, #14]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	81fb      	strh	r3, [r7, #14]
 8011fc6:	89fb      	ldrh	r3, [r7, #14]
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	08017e90 	.word	0x08017e90
 8011fd8:	080188ac 	.word	0x080188ac
 8011fdc:	080179a0 	.word	0x080179a0
 8011fe0:	08017ea8 	.word	0x08017ea8

08011fe4 <rxSessionWritePayload>:
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
 8011ff0:	603b      	str	r3, [r7, #0]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d106      	bne.n	8012006 <rxSessionWritePayload+0x22>
 8011ff8:	4b67      	ldr	r3, [pc, #412]	; (8012198 <rxSessionWritePayload+0x1b4>)
 8011ffa:	4a68      	ldr	r2, [pc, #416]	; (801219c <rxSessionWritePayload+0x1b8>)
 8011ffc:	f240 21ad 	movw	r1, #685	; 0x2ad
 8012000:	4867      	ldr	r0, [pc, #412]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012002:	f000 ffcf 	bl	8012fa4 <__assert_func>
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d106      	bne.n	801201a <rxSessionWritePayload+0x36>
 801200c:	4b65      	ldr	r3, [pc, #404]	; (80121a4 <rxSessionWritePayload+0x1c0>)
 801200e:	4a63      	ldr	r2, [pc, #396]	; (801219c <rxSessionWritePayload+0x1b8>)
 8012010:	f240 21ae 	movw	r1, #686	; 0x2ae
 8012014:	4862      	ldr	r0, [pc, #392]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012016:	f000 ffc5 	bl	8012fa4 <__assert_func>
 801201a:	6a3b      	ldr	r3, [r7, #32]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d109      	bne.n	8012034 <rxSessionWritePayload+0x50>
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d006      	beq.n	8012034 <rxSessionWritePayload+0x50>
 8012026:	4b60      	ldr	r3, [pc, #384]	; (80121a8 <rxSessionWritePayload+0x1c4>)
 8012028:	4a5c      	ldr	r2, [pc, #368]	; (801219c <rxSessionWritePayload+0x1b8>)
 801202a:	f240 21af 	movw	r1, #687	; 0x2af
 801202e:	485c      	ldr	r0, [pc, #368]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012030:	f000 ffb8 	bl	8012fa4 <__assert_func>
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	687a      	ldr	r2, [r7, #4]
 801203a:	429a      	cmp	r2, r3
 801203c:	d206      	bcs.n	801204c <rxSessionWritePayload+0x68>
 801203e:	4b5b      	ldr	r3, [pc, #364]	; (80121ac <rxSessionWritePayload+0x1c8>)
 8012040:	4a56      	ldr	r2, [pc, #344]	; (801219c <rxSessionWritePayload+0x1b8>)
 8012042:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8012046:	4856      	ldr	r0, [pc, #344]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012048:	f000 ffac 	bl	8012fa4 <__assert_func>
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	68da      	ldr	r2, [r3, #12]
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	429a      	cmp	r2, r3
 8012056:	d906      	bls.n	8012066 <rxSessionWritePayload+0x82>
 8012058:	4b55      	ldr	r3, [pc, #340]	; (80121b0 <rxSessionWritePayload+0x1cc>)
 801205a:	4a50      	ldr	r2, [pc, #320]	; (801219c <rxSessionWritePayload+0x1b8>)
 801205c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8012060:	484f      	ldr	r0, [pc, #316]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012062:	f000 ff9f 	bl	8012fa4 <__assert_func>
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	689a      	ldr	r2, [r3, #8]
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	441a      	add	r2, r3
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	609a      	str	r2, [r3, #8]
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	691b      	ldr	r3, [r3, #16]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d115      	bne.n	80120a6 <rxSessionWritePayload+0xc2>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d012      	beq.n	80120a6 <rxSessionWritePayload+0xc2>
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	68db      	ldr	r3, [r3, #12]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d006      	beq.n	8012096 <rxSessionWritePayload+0xb2>
 8012088:	4b4a      	ldr	r3, [pc, #296]	; (80121b4 <rxSessionWritePayload+0x1d0>)
 801208a:	4a44      	ldr	r2, [pc, #272]	; (801219c <rxSessionWritePayload+0x1b8>)
 801208c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8012090:	4843      	ldr	r0, [pc, #268]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012092:	f000 ff87 	bl	8012fa4 <__assert_func>
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	6879      	ldr	r1, [r7, #4]
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	4798      	blx	r3
 80120a0:	4602      	mov	r2, r0
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	611a      	str	r2, [r3, #16]
 80120a6:	2300      	movs	r3, #0
 80120a8:	75fb      	strb	r3, [r7, #23]
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d04e      	beq.n	8012150 <rxSessionWritePayload+0x16c>
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	613b      	str	r3, [r7, #16]
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	68da      	ldr	r2, [r3, #12]
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	4413      	add	r3, r2
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d229      	bcs.n	8012118 <rxSessionWritePayload+0x134>
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	687a      	ldr	r2, [r7, #4]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d206      	bcs.n	80120dc <rxSessionWritePayload+0xf8>
 80120ce:	4b37      	ldr	r3, [pc, #220]	; (80121ac <rxSessionWritePayload+0x1c8>)
 80120d0:	4a32      	ldr	r2, [pc, #200]	; (801219c <rxSessionWritePayload+0x1b8>)
 80120d2:	f240 21c3 	movw	r1, #707	; 0x2c3
 80120d6:	4832      	ldr	r0, [pc, #200]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 80120d8:	f000 ff64 	bl	8012fa4 <__assert_func>
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	1ad3      	subs	r3, r2, r3
 80120e4:	613b      	str	r3, [r7, #16]
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	68da      	ldr	r2, [r3, #12]
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	4413      	add	r3, r2
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d006      	beq.n	8012102 <rxSessionWritePayload+0x11e>
 80120f4:	4b30      	ldr	r3, [pc, #192]	; (80121b8 <rxSessionWritePayload+0x1d4>)
 80120f6:	4a29      	ldr	r2, [pc, #164]	; (801219c <rxSessionWritePayload+0x1b8>)
 80120f8:	f240 21c5 	movw	r1, #709	; 0x2c5
 80120fc:	4828      	ldr	r0, [pc, #160]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 80120fe:	f000 ff51 	bl	8012fa4 <__assert_func>
 8012102:	693a      	ldr	r2, [r7, #16]
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	429a      	cmp	r2, r3
 8012108:	d306      	bcc.n	8012118 <rxSessionWritePayload+0x134>
 801210a:	4b2c      	ldr	r3, [pc, #176]	; (80121bc <rxSessionWritePayload+0x1d8>)
 801210c:	4a23      	ldr	r2, [pc, #140]	; (801219c <rxSessionWritePayload+0x1b8>)
 801210e:	f240 21c6 	movw	r1, #710	; 0x2c6
 8012112:	4823      	ldr	r0, [pc, #140]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012114:	f000 ff46 	bl	8012fa4 <__assert_func>
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	691a      	ldr	r2, [r3, #16]
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	4413      	add	r3, r2
 8012122:	693a      	ldr	r2, [r7, #16]
 8012124:	6a39      	ldr	r1, [r7, #32]
 8012126:	4618      	mov	r0, r3
 8012128:	f002 f8e5 	bl	80142f6 <memcpy>
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	68da      	ldr	r2, [r3, #12]
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	441a      	add	r2, r3
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	60da      	str	r2, [r3, #12]
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	429a      	cmp	r2, r3
 8012140:	d219      	bcs.n	8012176 <rxSessionWritePayload+0x192>
 8012142:	4b1a      	ldr	r3, [pc, #104]	; (80121ac <rxSessionWritePayload+0x1c8>)
 8012144:	4a15      	ldr	r2, [pc, #84]	; (801219c <rxSessionWritePayload+0x1b8>)
 8012146:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801214a:	4815      	ldr	r0, [pc, #84]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 801214c:	f000 ff2a 	bl	8012fa4 <__assert_func>
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d006      	beq.n	8012166 <rxSessionWritePayload+0x182>
 8012158:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <rxSessionWritePayload+0x1d0>)
 801215a:	4a10      	ldr	r2, [pc, #64]	; (801219c <rxSessionWritePayload+0x1b8>)
 801215c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8012160:	480f      	ldr	r0, [pc, #60]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012162:	f000 ff1f 	bl	8012fa4 <__assert_func>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d002      	beq.n	8012172 <rxSessionWritePayload+0x18e>
 801216c:	f06f 0302 	mvn.w	r3, #2
 8012170:	e000      	b.n	8012174 <rxSessionWritePayload+0x190>
 8012172:	2300      	movs	r3, #0
 8012174:	75fb      	strb	r3, [r7, #23]
 8012176:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801217a:	2b00      	cmp	r3, #0
 801217c:	dd06      	ble.n	801218c <rxSessionWritePayload+0x1a8>
 801217e:	4b10      	ldr	r3, [pc, #64]	; (80121c0 <rxSessionWritePayload+0x1dc>)
 8012180:	4a06      	ldr	r2, [pc, #24]	; (801219c <rxSessionWritePayload+0x1b8>)
 8012182:	f240 21d7 	movw	r1, #727	; 0x2d7
 8012186:	4806      	ldr	r0, [pc, #24]	; (80121a0 <rxSessionWritePayload+0x1bc>)
 8012188:	f000 ff0c 	bl	8012fa4 <__assert_func>
 801218c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012190:	4618      	mov	r0, r3
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	08017b64 	.word	0x08017b64
 801219c:	080188f8 	.word	0x080188f8
 80121a0:	080179a0 	.word	0x080179a0
 80121a4:	08017ec0 	.word	0x08017ec0
 80121a8:	08017a5c 	.word	0x08017a5c
 80121ac:	08017ed4 	.word	0x08017ed4
 80121b0:	08017ef0 	.word	0x08017ef0
 80121b4:	08017f20 	.word	0x08017f20
 80121b8:	08017f38 	.word	0x08017f38
 80121bc:	08017f68 	.word	0x08017f68
 80121c0:	08017f88 	.word	0x08017f88

080121c4 <rxSessionRestart>:
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d106      	bne.n	80121e2 <rxSessionRestart+0x1e>
 80121d4:	4b1a      	ldr	r3, [pc, #104]	; (8012240 <rxSessionRestart+0x7c>)
 80121d6:	4a1b      	ldr	r2, [pc, #108]	; (8012244 <rxSessionRestart+0x80>)
 80121d8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80121dc:	481a      	ldr	r0, [pc, #104]	; (8012248 <rxSessionRestart+0x84>)
 80121de:	f000 fee1 	bl	8012fa4 <__assert_func>
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d106      	bne.n	80121f6 <rxSessionRestart+0x32>
 80121e8:	4b18      	ldr	r3, [pc, #96]	; (801224c <rxSessionRestart+0x88>)
 80121ea:	4a16      	ldr	r2, [pc, #88]	; (8012244 <rxSessionRestart+0x80>)
 80121ec:	f240 21de 	movw	r1, #734	; 0x2de
 80121f0:	4815      	ldr	r0, [pc, #84]	; (8012248 <rxSessionRestart+0x84>)
 80121f2:	f000 fed7 	bl	8012fa4 <__assert_func>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	683a      	ldr	r2, [r7, #0]
 80121fc:	6912      	ldr	r2, [r2, #16]
 80121fe:	4611      	mov	r1, r2
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	4798      	blx	r3
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	2200      	movs	r2, #0
 8012208:	609a      	str	r2, [r3, #8]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	2200      	movs	r2, #0
 801220e:	60da      	str	r2, [r3, #12]
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2200      	movs	r2, #0
 8012214:	611a      	str	r2, [r3, #16]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801221c:	829a      	strh	r2, [r3, #20]
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	7d9b      	ldrb	r3, [r3, #22]
 8012222:	3301      	adds	r3, #1
 8012224:	b2db      	uxtb	r3, r3
 8012226:	f003 031f 	and.w	r3, r3, #31
 801222a:	b2da      	uxtb	r2, r3
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	759a      	strb	r2, [r3, #22]
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	2201      	movs	r2, #1
 8012234:	761a      	strb	r2, [r3, #24]
 8012236:	bf00      	nop
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	08017b64 	.word	0x08017b64
 8012244:	080188cc 	.word	0x080188cc
 8012248:	080179a0 	.word	0x080179a0
 801224c:	08017ec0 	.word	0x08017ec0

08012250 <rxSessionAcceptFrame>:
 8012250:	b580      	push	{r7, lr}
 8012252:	b088      	sub	sp, #32
 8012254:	af02      	add	r7, sp, #8
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
 801225c:	603b      	str	r3, [r7, #0]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d106      	bne.n	8012272 <rxSessionAcceptFrame+0x22>
 8012264:	4b81      	ldr	r3, [pc, #516]	; (801246c <rxSessionAcceptFrame+0x21c>)
 8012266:	4a82      	ldr	r2, [pc, #520]	; (8012470 <rxSessionAcceptFrame+0x220>)
 8012268:	f240 21ef 	movw	r1, #751	; 0x2ef
 801226c:	4881      	ldr	r0, [pc, #516]	; (8012474 <rxSessionAcceptFrame+0x224>)
 801226e:	f000 fe99 	bl	8012fa4 <__assert_func>
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d106      	bne.n	8012286 <rxSessionAcceptFrame+0x36>
 8012278:	4b7f      	ldr	r3, [pc, #508]	; (8012478 <rxSessionAcceptFrame+0x228>)
 801227a:	4a7d      	ldr	r2, [pc, #500]	; (8012470 <rxSessionAcceptFrame+0x220>)
 801227c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8012280:	487c      	ldr	r0, [pc, #496]	; (8012474 <rxSessionAcceptFrame+0x224>)
 8012282:	f000 fe8f 	bl	8012fa4 <__assert_func>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d106      	bne.n	801229a <rxSessionAcceptFrame+0x4a>
 801228c:	4b7b      	ldr	r3, [pc, #492]	; (801247c <rxSessionAcceptFrame+0x22c>)
 801228e:	4a78      	ldr	r2, [pc, #480]	; (8012470 <rxSessionAcceptFrame+0x220>)
 8012290:	f240 21f1 	movw	r1, #753	; 0x2f1
 8012294:	4877      	ldr	r0, [pc, #476]	; (8012474 <rxSessionAcceptFrame+0x224>)
 8012296:	f000 fe85 	bl	8012fa4 <__assert_func>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	699b      	ldr	r3, [r3, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <rxSessionAcceptFrame+0x60>
 80122a2:	4b77      	ldr	r3, [pc, #476]	; (8012480 <rxSessionAcceptFrame+0x230>)
 80122a4:	4a72      	ldr	r2, [pc, #456]	; (8012470 <rxSessionAcceptFrame+0x220>)
 80122a6:	f240 21f2 	movw	r1, #754	; 0x2f2
 80122aa:	4872      	ldr	r0, [pc, #456]	; (8012474 <rxSessionAcceptFrame+0x224>)
 80122ac:	f000 fe7a 	bl	8012fa4 <__assert_func>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	7b9b      	ldrb	r3, [r3, #14]
 80122b4:	2b1f      	cmp	r3, #31
 80122b6:	d906      	bls.n	80122c6 <rxSessionAcceptFrame+0x76>
 80122b8:	4b72      	ldr	r3, [pc, #456]	; (8012484 <rxSessionAcceptFrame+0x234>)
 80122ba:	4a6d      	ldr	r2, [pc, #436]	; (8012470 <rxSessionAcceptFrame+0x220>)
 80122bc:	f240 21f3 	movw	r1, #755	; 0x2f3
 80122c0:	486c      	ldr	r0, [pc, #432]	; (8012474 <rxSessionAcceptFrame+0x224>)
 80122c2:	f000 fe6f 	bl	8012fa4 <__assert_func>
 80122c6:	6a3b      	ldr	r3, [r7, #32]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d106      	bne.n	80122da <rxSessionAcceptFrame+0x8a>
 80122cc:	4b6e      	ldr	r3, [pc, #440]	; (8012488 <rxSessionAcceptFrame+0x238>)
 80122ce:	4a68      	ldr	r2, [pc, #416]	; (8012470 <rxSessionAcceptFrame+0x220>)
 80122d0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80122d4:	4867      	ldr	r0, [pc, #412]	; (8012474 <rxSessionAcceptFrame+0x224>)
 80122d6:	f000 fe65 	bl	8012fa4 <__assert_func>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	7bdb      	ldrb	r3, [r3, #15]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d005      	beq.n	80122ee <rxSessionAcceptFrame+0x9e>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e8:	68b9      	ldr	r1, [r7, #8]
 80122ea:	e9c1 2300 	strd	r2, r3, [r1]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	7bdb      	ldrb	r3, [r3, #15]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d005      	beq.n	8012302 <rxSessionAcceptFrame+0xb2>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	7c1b      	ldrb	r3, [r3, #16]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <rxSessionAcceptFrame+0xb2>
 80122fe:	2301      	movs	r3, #1
 8012300:	e000      	b.n	8012304 <rxSessionAcceptFrame+0xb4>
 8012302:	2300      	movs	r3, #0
 8012304:	75bb      	strb	r3, [r7, #22]
 8012306:	7dbb      	ldrb	r3, [r7, #22]
 8012308:	f003 0301 	and.w	r3, r3, #1
 801230c:	75bb      	strb	r3, [r7, #22]
 801230e:	7dbb      	ldrb	r3, [r7, #22]
 8012310:	f083 0301 	eor.w	r3, r3, #1
 8012314:	b2db      	uxtb	r3, r3
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00c      	beq.n	8012334 <rxSessionAcceptFrame+0xe4>
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	8a98      	ldrh	r0, [r3, #20]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6959      	ldr	r1, [r3, #20]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	699b      	ldr	r3, [r3, #24]
 8012326:	461a      	mov	r2, r3
 8012328:	f7fe fed6 	bl	80110d8 <crcAdd>
 801232c:	4603      	mov	r3, r0
 801232e:	461a      	mov	r2, r3
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	829a      	strh	r2, [r3, #20]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	695a      	ldr	r2, [r3, #20]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	699b      	ldr	r3, [r3, #24]
 801233c:	9300      	str	r3, [sp, #0]
 801233e:	4613      	mov	r3, r2
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	68b9      	ldr	r1, [r7, #8]
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	f7ff fe4d 	bl	8011fe4 <rxSessionWritePayload>
 801234a:	4603      	mov	r3, r0
 801234c:	75fb      	strb	r3, [r7, #23]
 801234e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012352:	2b00      	cmp	r3, #0
 8012354:	da10      	bge.n	8012378 <rxSessionAcceptFrame+0x128>
 8012356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801235a:	f113 0f03 	cmn.w	r3, #3
 801235e:	d006      	beq.n	801236e <rxSessionAcceptFrame+0x11e>
 8012360:	4b4a      	ldr	r3, [pc, #296]	; (801248c <rxSessionAcceptFrame+0x23c>)
 8012362:	4a43      	ldr	r2, [pc, #268]	; (8012470 <rxSessionAcceptFrame+0x220>)
 8012364:	f240 3106 	movw	r1, #774	; 0x306
 8012368:	4842      	ldr	r0, [pc, #264]	; (8012474 <rxSessionAcceptFrame+0x224>)
 801236a:	f000 fe1b 	bl	8012fa4 <__assert_func>
 801236e:	68b9      	ldr	r1, [r7, #8]
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f7ff ff27 	bl	80121c4 <rxSessionRestart>
 8012376:	e072      	b.n	801245e <rxSessionAcceptFrame+0x20e>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	7c1b      	ldrb	r3, [r3, #16]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d05f      	beq.n	8012440 <rxSessionAcceptFrame+0x1f0>
 8012380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d006      	beq.n	8012396 <rxSessionAcceptFrame+0x146>
 8012388:	4b41      	ldr	r3, [pc, #260]	; (8012490 <rxSessionAcceptFrame+0x240>)
 801238a:	4a39      	ldr	r2, [pc, #228]	; (8012470 <rxSessionAcceptFrame+0x220>)
 801238c:	f240 310b 	movw	r1, #779	; 0x30b
 8012390:	4838      	ldr	r0, [pc, #224]	; (8012474 <rxSessionAcceptFrame+0x224>)
 8012392:	f000 fe07 	bl	8012fa4 <__assert_func>
 8012396:	7dbb      	ldrb	r3, [r7, #22]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d103      	bne.n	80123a4 <rxSessionAcceptFrame+0x154>
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	8a9b      	ldrh	r3, [r3, #20]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d148      	bne.n	8012436 <rxSessionAcceptFrame+0x1e6>
 80123a4:	2301      	movs	r3, #1
 80123a6:	75fb      	strb	r3, [r7, #23]
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	4619      	mov	r1, r3
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f7ff fd95 	bl	8011edc <rxInitTransferMetadataFromFrame>
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	6a39      	ldr	r1, [r7, #32]
 80123ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	68da      	ldr	r2, [r3, #12]
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	611a      	str	r2, [r3, #16]
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	691a      	ldr	r2, [r3, #16]
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	615a      	str	r2, [r3, #20]
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	689a      	ldr	r2, [r3, #8]
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d206      	bcs.n	80123e8 <rxSessionAcceptFrame+0x198>
 80123da:	4b2e      	ldr	r3, [pc, #184]	; (8012494 <rxSessionAcceptFrame+0x244>)
 80123dc:	4a24      	ldr	r2, [pc, #144]	; (8012470 <rxSessionAcceptFrame+0x220>)
 80123de:	f240 3115 	movw	r1, #789	; 0x315
 80123e2:	4824      	ldr	r0, [pc, #144]	; (8012474 <rxSessionAcceptFrame+0x224>)
 80123e4:	f000 fdde 	bl	8012fa4 <__assert_func>
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	689a      	ldr	r2, [r3, #8]
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	613b      	str	r3, [r7, #16]
 80123f4:	7dbb      	ldrb	r3, [r7, #22]
 80123f6:	f083 0301 	eor.w	r3, r3, #1
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d017      	beq.n	8012430 <rxSessionAcceptFrame+0x1e0>
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d814      	bhi.n	8012430 <rxSessionAcceptFrame+0x1e0>
 8012406:	6a3b      	ldr	r3, [r7, #32]
 8012408:	691a      	ldr	r2, [r3, #16]
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	f1c3 0302 	rsb	r3, r3, #2
 8012410:	429a      	cmp	r2, r3
 8012412:	d206      	bcs.n	8012422 <rxSessionAcceptFrame+0x1d2>
 8012414:	4b20      	ldr	r3, [pc, #128]	; (8012498 <rxSessionAcceptFrame+0x248>)
 8012416:	4a16      	ldr	r2, [pc, #88]	; (8012470 <rxSessionAcceptFrame+0x220>)
 8012418:	f240 3119 	movw	r1, #793	; 0x319
 801241c:	4815      	ldr	r0, [pc, #84]	; (8012474 <rxSessionAcceptFrame+0x224>)
 801241e:	f000 fdc1 	bl	8012fa4 <__assert_func>
 8012422:	6a3b      	ldr	r3, [r7, #32]
 8012424:	691a      	ldr	r2, [r3, #16]
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	4413      	add	r3, r2
 801242a:	1e9a      	subs	r2, r3, #2
 801242c:	6a3b      	ldr	r3, [r7, #32]
 801242e:	611a      	str	r2, [r3, #16]
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	2200      	movs	r2, #0
 8012434:	611a      	str	r2, [r3, #16]
 8012436:	68b9      	ldr	r1, [r7, #8]
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f7ff fec3 	bl	80121c4 <rxSessionRestart>
 801243e:	e00e      	b.n	801245e <rxSessionAcceptFrame+0x20e>
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	7e1b      	ldrb	r3, [r3, #24]
 8012444:	2b00      	cmp	r3, #0
 8012446:	bf14      	ite	ne
 8012448:	2301      	movne	r3, #1
 801244a:	2300      	moveq	r3, #0
 801244c:	b2db      	uxtb	r3, r3
 801244e:	f083 0301 	eor.w	r3, r3, #1
 8012452:	b2db      	uxtb	r3, r3
 8012454:	f003 0301 	and.w	r3, r3, #1
 8012458:	b2da      	uxtb	r2, r3
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	761a      	strb	r2, [r3, #24]
 801245e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012462:	4618      	mov	r0, r3
 8012464:	3718      	adds	r7, #24
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	08017b64 	.word	0x08017b64
 8012470:	080188e0 	.word	0x080188e0
 8012474:	080179a0 	.word	0x080179a0
 8012478:	08017ec0 	.word	0x08017ec0
 801247c:	08017df8 	.word	0x08017df8
 8012480:	08017e54 	.word	0x08017e54
 8012484:	08017f94 	.word	0x08017f94
 8012488:	08017e74 	.word	0x08017e74
 801248c:	08017fbc 	.word	0x08017fbc
 8012490:	08017fc8 	.word	0x08017fc8
 8012494:	08017fd4 	.word	0x08017fd4
 8012498:	08018004 	.word	0x08018004

0801249c <rxSessionUpdate>:
 801249c:	b5b0      	push	{r4, r5, r7, lr}
 801249e:	b088      	sub	sp, #32
 80124a0:	af02      	add	r7, sp, #8
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	607a      	str	r2, [r7, #4]
 80124a8:	70fb      	strb	r3, [r7, #3]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d106      	bne.n	80124be <rxSessionUpdate+0x22>
 80124b0:	4b6d      	ldr	r3, [pc, #436]	; (8012668 <rxSessionUpdate+0x1cc>)
 80124b2:	4a6e      	ldr	r2, [pc, #440]	; (801266c <rxSessionUpdate+0x1d0>)
 80124b4:	f240 3137 	movw	r1, #823	; 0x337
 80124b8:	486d      	ldr	r0, [pc, #436]	; (8012670 <rxSessionUpdate+0x1d4>)
 80124ba:	f000 fd73 	bl	8012fa4 <__assert_func>
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d106      	bne.n	80124d2 <rxSessionUpdate+0x36>
 80124c4:	4b6b      	ldr	r3, [pc, #428]	; (8012674 <rxSessionUpdate+0x1d8>)
 80124c6:	4a69      	ldr	r2, [pc, #420]	; (801266c <rxSessionUpdate+0x1d0>)
 80124c8:	f44f 714e 	mov.w	r1, #824	; 0x338
 80124cc:	4868      	ldr	r0, [pc, #416]	; (8012670 <rxSessionUpdate+0x1d4>)
 80124ce:	f000 fd69 	bl	8012fa4 <__assert_func>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <rxSessionUpdate+0x4a>
 80124d8:	4b67      	ldr	r3, [pc, #412]	; (8012678 <rxSessionUpdate+0x1dc>)
 80124da:	4a64      	ldr	r2, [pc, #400]	; (801266c <rxSessionUpdate+0x1d0>)
 80124dc:	f240 3139 	movw	r1, #825	; 0x339
 80124e0:	4863      	ldr	r0, [pc, #396]	; (8012670 <rxSessionUpdate+0x1d4>)
 80124e2:	f000 fd5f 	bl	8012fa4 <__assert_func>
 80124e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <rxSessionUpdate+0x5e>
 80124ec:	4b63      	ldr	r3, [pc, #396]	; (801267c <rxSessionUpdate+0x1e0>)
 80124ee:	4a5f      	ldr	r2, [pc, #380]	; (801266c <rxSessionUpdate+0x1d0>)
 80124f0:	f240 313a 	movw	r1, #826	; 0x33a
 80124f4:	485e      	ldr	r0, [pc, #376]	; (8012670 <rxSessionUpdate+0x1d4>)
 80124f6:	f000 fd55 	bl	8012fa4 <__assert_func>
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	7d9b      	ldrb	r3, [r3, #22]
 80124fe:	2b1f      	cmp	r3, #31
 8012500:	d906      	bls.n	8012510 <rxSessionUpdate+0x74>
 8012502:	4b5f      	ldr	r3, [pc, #380]	; (8012680 <rxSessionUpdate+0x1e4>)
 8012504:	4a59      	ldr	r2, [pc, #356]	; (801266c <rxSessionUpdate+0x1d0>)
 8012506:	f240 313b 	movw	r1, #827	; 0x33b
 801250a:	4859      	ldr	r0, [pc, #356]	; (8012670 <rxSessionUpdate+0x1d4>)
 801250c:	f000 fd4a 	bl	8012fa4 <__assert_func>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	7b9b      	ldrb	r3, [r3, #14]
 8012514:	2b1f      	cmp	r3, #31
 8012516:	d906      	bls.n	8012526 <rxSessionUpdate+0x8a>
 8012518:	4b5a      	ldr	r3, [pc, #360]	; (8012684 <rxSessionUpdate+0x1e8>)
 801251a:	4a54      	ldr	r2, [pc, #336]	; (801266c <rxSessionUpdate+0x1d0>)
 801251c:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8012520:	4853      	ldr	r0, [pc, #332]	; (8012670 <rxSessionUpdate+0x1d4>)
 8012522:	f000 fd3f 	bl	8012fa4 <__assert_func>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252c:	68b9      	ldr	r1, [r7, #8]
 801252e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012532:	4290      	cmp	r0, r2
 8012534:	eb71 0303 	sbcs.w	r3, r1, r3
 8012538:	d20f      	bcs.n	801255a <rxSessionUpdate+0xbe>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012546:	1a84      	subs	r4, r0, r2
 8012548:	eb61 0503 	sbc.w	r5, r1, r3
 801254c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012550:	42a2      	cmp	r2, r4
 8012552:	41ab      	sbcs	r3, r5
 8012554:	d201      	bcs.n	801255a <rxSessionUpdate+0xbe>
 8012556:	2301      	movs	r3, #1
 8012558:	e000      	b.n	801255c <rxSessionUpdate+0xc0>
 801255a:	2300      	movs	r3, #0
 801255c:	75bb      	strb	r3, [r7, #22]
 801255e:	7dbb      	ldrb	r3, [r7, #22]
 8012560:	f003 0301 	and.w	r3, r3, #1
 8012564:	75bb      	strb	r3, [r7, #22]
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	7d9a      	ldrb	r2, [r3, #22]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	7b9b      	ldrb	r3, [r3, #14]
 801256e:	4619      	mov	r1, r3
 8012570:	4610      	mov	r0, r2
 8012572:	f7ff fcf9 	bl	8011f68 <rxComputeTransferIDDifference>
 8012576:	4603      	mov	r3, r0
 8012578:	2b01      	cmp	r3, #1
 801257a:	bf8c      	ite	hi
 801257c:	2301      	movhi	r3, #1
 801257e:	2300      	movls	r3, #0
 8012580:	757b      	strb	r3, [r7, #21]
 8012582:	7dbb      	ldrb	r3, [r7, #22]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d10b      	bne.n	80125a0 <rxSessionUpdate+0x104>
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	7ddb      	ldrb	r3, [r3, #23]
 801258c:	78fa      	ldrb	r2, [r7, #3]
 801258e:	429a      	cmp	r2, r3
 8012590:	d108      	bne.n	80125a4 <rxSessionUpdate+0x108>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	7bdb      	ldrb	r3, [r3, #15]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d004      	beq.n	80125a4 <rxSessionUpdate+0x108>
 801259a:	7d7b      	ldrb	r3, [r7, #21]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d001      	beq.n	80125a4 <rxSessionUpdate+0x108>
 80125a0:	2301      	movs	r3, #1
 80125a2:	e000      	b.n	80125a6 <rxSessionUpdate+0x10a>
 80125a4:	2300      	movs	r3, #0
 80125a6:	753b      	strb	r3, [r7, #20]
 80125a8:	7d3b      	ldrb	r3, [r7, #20]
 80125aa:	f003 0301 	and.w	r3, r3, #1
 80125ae:	753b      	strb	r3, [r7, #20]
 80125b0:	7d3b      	ldrb	r3, [r7, #20]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d013      	beq.n	80125de <rxSessionUpdate+0x142>
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	2200      	movs	r2, #0
 80125ba:	609a      	str	r2, [r3, #8]
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2200      	movs	r2, #0
 80125c0:	60da      	str	r2, [r3, #12]
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125c8:	829a      	strh	r2, [r3, #20]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	7b9a      	ldrb	r2, [r3, #14]
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	759a      	strb	r2, [r3, #22]
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	2201      	movs	r2, #1
 80125d6:	761a      	strb	r2, [r3, #24]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	78fa      	ldrb	r2, [r7, #3]
 80125dc:	75da      	strb	r2, [r3, #23]
 80125de:	2300      	movs	r3, #0
 80125e0:	75fb      	strb	r3, [r7, #23]
 80125e2:	7d3b      	ldrb	r3, [r7, #20]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <rxSessionUpdate+0x164>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	7bdb      	ldrb	r3, [r3, #15]
 80125ec:	f083 0301 	eor.w	r3, r3, #1
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d004      	beq.n	8012600 <rxSessionUpdate+0x164>
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f7ff fde3 	bl	80121c4 <rxSessionRestart>
 80125fe:	e02c      	b.n	801265a <rxSessionUpdate+0x1be>
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	7ddb      	ldrb	r3, [r3, #23]
 8012604:	78fa      	ldrb	r2, [r7, #3]
 8012606:	429a      	cmp	r2, r3
 8012608:	bf0c      	ite	eq
 801260a:	2301      	moveq	r3, #1
 801260c:	2300      	movne	r3, #0
 801260e:	74fb      	strb	r3, [r7, #19]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7c5a      	ldrb	r2, [r3, #17]
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	7e1b      	ldrb	r3, [r3, #24]
 8012618:	429a      	cmp	r2, r3
 801261a:	bf0c      	ite	eq
 801261c:	2301      	moveq	r3, #1
 801261e:	2300      	movne	r3, #0
 8012620:	74bb      	strb	r3, [r7, #18]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	7b9a      	ldrb	r2, [r3, #14]
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	7d9b      	ldrb	r3, [r3, #22]
 801262a:	429a      	cmp	r2, r3
 801262c:	bf0c      	ite	eq
 801262e:	2301      	moveq	r3, #1
 8012630:	2300      	movne	r3, #0
 8012632:	747b      	strb	r3, [r7, #17]
 8012634:	7cfb      	ldrb	r3, [r7, #19]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00f      	beq.n	801265a <rxSessionUpdate+0x1be>
 801263a:	7cbb      	ldrb	r3, [r7, #18]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d00c      	beq.n	801265a <rxSessionUpdate+0x1be>
 8012640:	7c7b      	ldrb	r3, [r7, #17]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d009      	beq.n	801265a <rxSessionUpdate+0x1be>
 8012646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012648:	9300      	str	r3, [sp, #0]
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	68b9      	ldr	r1, [r7, #8]
 8012650:	68f8      	ldr	r0, [r7, #12]
 8012652:	f7ff fdfd 	bl	8012250 <rxSessionAcceptFrame>
 8012656:	4603      	mov	r3, r0
 8012658:	75fb      	strb	r3, [r7, #23]
 801265a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801265e:	4618      	mov	r0, r3
 8012660:	3718      	adds	r7, #24
 8012662:	46bd      	mov	sp, r7
 8012664:	bdb0      	pop	{r4, r5, r7, pc}
 8012666:	bf00      	nop
 8012668:	08017b64 	.word	0x08017b64
 801266c:	0801889c 	.word	0x0801889c
 8012670:	080179a0 	.word	0x080179a0
 8012674:	08017ec0 	.word	0x08017ec0
 8012678:	08017df8 	.word	0x08017df8
 801267c:	08017e74 	.word	0x08017e74
 8012680:	0801803c 	.word	0x0801803c
 8012684:	08017f94 	.word	0x08017f94

08012688 <rxAcceptFrame>:
 8012688:	b5b0      	push	{r4, r5, r7, lr}
 801268a:	b08c      	sub	sp, #48	; 0x30
 801268c:	af04      	add	r7, sp, #16
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	607a      	str	r2, [r7, #4]
 8012694:	70fb      	strb	r3, [r7, #3]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d106      	bne.n	80126aa <rxAcceptFrame+0x22>
 801269c:	4b85      	ldr	r3, [pc, #532]	; (80128b4 <rxAcceptFrame+0x22c>)
 801269e:	4a86      	ldr	r2, [pc, #536]	; (80128b8 <rxAcceptFrame+0x230>)
 80126a0:	f44f 715a 	mov.w	r1, #872	; 0x368
 80126a4:	4885      	ldr	r0, [pc, #532]	; (80128bc <rxAcceptFrame+0x234>)
 80126a6:	f000 fc7d 	bl	8012fa4 <__assert_func>
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d106      	bne.n	80126be <rxAcceptFrame+0x36>
 80126b0:	4b83      	ldr	r3, [pc, #524]	; (80128c0 <rxAcceptFrame+0x238>)
 80126b2:	4a81      	ldr	r2, [pc, #516]	; (80128b8 <rxAcceptFrame+0x230>)
 80126b4:	f240 3169 	movw	r1, #873	; 0x369
 80126b8:	4880      	ldr	r0, [pc, #512]	; (80128bc <rxAcceptFrame+0x234>)
 80126ba:	f000 fc73 	bl	8012fa4 <__assert_func>
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	8b9a      	ldrh	r2, [r3, #28]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	895b      	ldrh	r3, [r3, #10]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d006      	beq.n	80126d8 <rxAcceptFrame+0x50>
 80126ca:	4b7e      	ldr	r3, [pc, #504]	; (80128c4 <rxAcceptFrame+0x23c>)
 80126cc:	4a7a      	ldr	r2, [pc, #488]	; (80128b8 <rxAcceptFrame+0x230>)
 80126ce:	f240 316a 	movw	r1, #874	; 0x36a
 80126d2:	487a      	ldr	r0, [pc, #488]	; (80128bc <rxAcceptFrame+0x234>)
 80126d4:	f000 fc66 	bl	8012fa4 <__assert_func>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <rxAcceptFrame+0x64>
 80126de:	4b7a      	ldr	r3, [pc, #488]	; (80128c8 <rxAcceptFrame+0x240>)
 80126e0:	4a75      	ldr	r2, [pc, #468]	; (80128b8 <rxAcceptFrame+0x230>)
 80126e2:	f240 316b 	movw	r1, #875	; 0x36b
 80126e6:	4875      	ldr	r0, [pc, #468]	; (80128bc <rxAcceptFrame+0x234>)
 80126e8:	f000 fc5c 	bl	8012fa4 <__assert_func>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d106      	bne.n	8012702 <rxAcceptFrame+0x7a>
 80126f4:	4b75      	ldr	r3, [pc, #468]	; (80128cc <rxAcceptFrame+0x244>)
 80126f6:	4a70      	ldr	r2, [pc, #448]	; (80128b8 <rxAcceptFrame+0x230>)
 80126f8:	f44f 715b 	mov.w	r1, #876	; 0x36c
 80126fc:	486f      	ldr	r0, [pc, #444]	; (80128bc <rxAcceptFrame+0x234>)
 80126fe:	f000 fc51 	bl	8012fa4 <__assert_func>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	7b9b      	ldrb	r3, [r3, #14]
 8012706:	2b1f      	cmp	r3, #31
 8012708:	d906      	bls.n	8012718 <rxAcceptFrame+0x90>
 801270a:	4b71      	ldr	r3, [pc, #452]	; (80128d0 <rxAcceptFrame+0x248>)
 801270c:	4a6a      	ldr	r2, [pc, #424]	; (80128b8 <rxAcceptFrame+0x230>)
 801270e:	f240 316d 	movw	r1, #877	; 0x36d
 8012712:	486a      	ldr	r0, [pc, #424]	; (80128bc <rxAcceptFrame+0x234>)
 8012714:	f000 fc46 	bl	8012fa4 <__assert_func>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	7b5b      	ldrb	r3, [r3, #13]
 801271c:	2bff      	cmp	r3, #255	; 0xff
 801271e:	d00c      	beq.n	801273a <rxAcceptFrame+0xb2>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	791a      	ldrb	r2, [r3, #4]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	7b5b      	ldrb	r3, [r3, #13]
 8012728:	429a      	cmp	r2, r3
 801272a:	d006      	beq.n	801273a <rxAcceptFrame+0xb2>
 801272c:	4b69      	ldr	r3, [pc, #420]	; (80128d4 <rxAcceptFrame+0x24c>)
 801272e:	4a62      	ldr	r2, [pc, #392]	; (80128b8 <rxAcceptFrame+0x230>)
 8012730:	f240 316e 	movw	r1, #878	; 0x36e
 8012734:	4861      	ldr	r0, [pc, #388]	; (80128bc <rxAcceptFrame+0x234>)
 8012736:	f000 fc35 	bl	8012fa4 <__assert_func>
 801273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273c:	2b00      	cmp	r3, #0
 801273e:	d106      	bne.n	801274e <rxAcceptFrame+0xc6>
 8012740:	4b65      	ldr	r3, [pc, #404]	; (80128d8 <rxAcceptFrame+0x250>)
 8012742:	4a5d      	ldr	r2, [pc, #372]	; (80128b8 <rxAcceptFrame+0x230>)
 8012744:	f240 316f 	movw	r1, #879	; 0x36f
 8012748:	485c      	ldr	r0, [pc, #368]	; (80128bc <rxAcceptFrame+0x234>)
 801274a:	f000 fc2b 	bl	8012fa4 <__assert_func>
 801274e:	2300      	movs	r3, #0
 8012750:	77fb      	strb	r3, [r7, #31]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	7b1b      	ldrb	r3, [r3, #12]
 8012756:	b25b      	sxtb	r3, r3
 8012758:	2b00      	cmp	r3, #0
 801275a:	db6c      	blt.n	8012836 <rxAcceptFrame+0x1ae>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	7b1b      	ldrb	r3, [r3, #12]
 8012760:	68ba      	ldr	r2, [r7, #8]
 8012762:	3308      	adds	r3, #8
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d134      	bne.n	80127d8 <rxAcceptFrame+0x150>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	7bdb      	ldrb	r3, [r3, #15]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d030      	beq.n	80127d8 <rxAcceptFrame+0x150>
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	2120      	movs	r1, #32
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	4798      	blx	r3
 8012780:	6138      	str	r0, [r7, #16]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	7b1b      	ldrb	r3, [r3, #12]
 8012786:	68ba      	ldr	r2, [r7, #8]
 8012788:	3308      	adds	r3, #8
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	4413      	add	r3, r2
 801278e:	693a      	ldr	r2, [r7, #16]
 8012790:	605a      	str	r2, [r3, #4]
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d01d      	beq.n	80127d4 <rxAcceptFrame+0x14c>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	6939      	ldr	r1, [r7, #16]
 80127a0:	e9c1 2300 	strd	r2, r3, [r1]
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	2200      	movs	r2, #0
 80127a8:	609a      	str	r2, [r3, #8]
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	2200      	movs	r2, #0
 80127ae:	60da      	str	r2, [r3, #12]
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	2200      	movs	r2, #0
 80127b4:	611a      	str	r2, [r3, #16]
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127bc:	829a      	strh	r2, [r3, #20]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	7b9a      	ldrb	r2, [r3, #14]
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	759a      	strb	r2, [r3, #22]
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	78fa      	ldrb	r2, [r7, #3]
 80127ca:	75da      	strb	r2, [r3, #23]
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2201      	movs	r2, #1
 80127d0:	761a      	strb	r2, [r3, #24]
 80127d2:	e001      	b.n	80127d8 <rxAcceptFrame+0x150>
 80127d4:	23fd      	movs	r3, #253	; 0xfd
 80127d6:	77fb      	strb	r3, [r7, #31]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	7b1b      	ldrb	r3, [r3, #12]
 80127dc:	68ba      	ldr	r2, [r7, #8]
 80127de:	3308      	adds	r3, #8
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	4413      	add	r3, r2
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d05e      	beq.n	80128a8 <rxAcceptFrame+0x220>
 80127ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d006      	beq.n	8012800 <rxAcceptFrame+0x178>
 80127f2:	4b3a      	ldr	r3, [pc, #232]	; (80128dc <rxAcceptFrame+0x254>)
 80127f4:	4a30      	ldr	r2, [pc, #192]	; (80128b8 <rxAcceptFrame+0x230>)
 80127f6:	f240 318e 	movw	r1, #910	; 0x38e
 80127fa:	4830      	ldr	r0, [pc, #192]	; (80128bc <rxAcceptFrame+0x234>)
 80127fc:	f000 fbd2 	bl	8012fa4 <__assert_func>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	7b1b      	ldrb	r3, [r3, #12]
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	3308      	adds	r3, #8
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4413      	add	r3, r2
 801280c:	685c      	ldr	r4, [r3, #4]
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012814:	68b9      	ldr	r1, [r7, #8]
 8012816:	6989      	ldr	r1, [r1, #24]
 8012818:	78fd      	ldrb	r5, [r7, #3]
 801281a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801281c:	9003      	str	r0, [sp, #12]
 801281e:	9102      	str	r1, [sp, #8]
 8012820:	e9cd 2300 	strd	r2, r3, [sp]
 8012824:	462b      	mov	r3, r5
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	4621      	mov	r1, r4
 801282a:	68f8      	ldr	r0, [r7, #12]
 801282c:	f7ff fe36 	bl	801249c <rxSessionUpdate>
 8012830:	4603      	mov	r3, r0
 8012832:	77fb      	strb	r3, [r7, #31]
 8012834:	e038      	b.n	80128a8 <rxAcceptFrame+0x220>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	7b1b      	ldrb	r3, [r3, #12]
 801283a:	2bff      	cmp	r3, #255	; 0xff
 801283c:	d006      	beq.n	801284c <rxAcceptFrame+0x1c4>
 801283e:	4b28      	ldr	r3, [pc, #160]	; (80128e0 <rxAcceptFrame+0x258>)
 8012840:	4a1d      	ldr	r2, [pc, #116]	; (80128b8 <rxAcceptFrame+0x230>)
 8012842:	f240 319a 	movw	r1, #922	; 0x39a
 8012846:	481d      	ldr	r0, [pc, #116]	; (80128bc <rxAcceptFrame+0x234>)
 8012848:	f000 fbac 	bl	8012fa4 <__assert_func>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	695a      	ldr	r2, [r3, #20]
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	699b      	ldr	r3, [r3, #24]
 8012854:	4293      	cmp	r3, r2
 8012856:	bf28      	it	cs
 8012858:	4613      	movcs	r3, r2
 801285a:	61bb      	str	r3, [r7, #24]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	689b      	ldr	r3, [r3, #8]
 8012860:	69b9      	ldr	r1, [r7, #24]
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	4798      	blx	r3
 8012866:	6178      	str	r0, [r7, #20]
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d01a      	beq.n	80128a4 <rxAcceptFrame+0x21c>
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff fb32 	bl	8011edc <rxInitTransferMetadataFromFrame>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012880:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8012884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012886:	69ba      	ldr	r2, [r7, #24]
 8012888:	611a      	str	r2, [r3, #16]
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	697a      	ldr	r2, [r7, #20]
 801288e:	615a      	str	r2, [r3, #20]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	699b      	ldr	r3, [r3, #24]
 8012894:	69ba      	ldr	r2, [r7, #24]
 8012896:	4619      	mov	r1, r3
 8012898:	6978      	ldr	r0, [r7, #20]
 801289a:	f001 fd2c 	bl	80142f6 <memcpy>
 801289e:	2301      	movs	r3, #1
 80128a0:	77fb      	strb	r3, [r7, #31]
 80128a2:	e001      	b.n	80128a8 <rxAcceptFrame+0x220>
 80128a4:	23fd      	movs	r3, #253	; 0xfd
 80128a6:	77fb      	strb	r3, [r7, #31]
 80128a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128ac:	4618      	mov	r0, r3
 80128ae:	3720      	adds	r7, #32
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bdb0      	pop	{r4, r5, r7, pc}
 80128b4:	08017b64 	.word	0x08017b64
 80128b8:	0801888c 	.word	0x0801888c
 80128bc:	080179a0 	.word	0x080179a0
 80128c0:	08018064 	.word	0x08018064
 80128c4:	08018080 	.word	0x08018080
 80128c8:	08017df8 	.word	0x08017df8
 80128cc:	08017e54 	.word	0x08017e54
 80128d0:	08017f94 	.word	0x08017f94
 80128d4:	080180a8 	.word	0x080180a8
 80128d8:	08017e74 	.word	0x08017e74
 80128dc:	08018100 	.word	0x08018100
 80128e0:	0801810c 	.word	0x0801810c

080128e4 <rxSubscriptionPredicateOnPortID>:
 80128e4:	b480      	push	{r7}
 80128e6:	b085      	sub	sp, #20
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	881b      	ldrh	r3, [r3, #0]
 80128f2:	81fb      	strh	r3, [r7, #14]
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	8b9b      	ldrh	r3, [r3, #28]
 80128f8:	81bb      	strh	r3, [r7, #12]
 80128fa:	89fa      	ldrh	r2, [r7, #14]
 80128fc:	89bb      	ldrh	r3, [r7, #12]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d00a      	beq.n	8012918 <rxSubscriptionPredicateOnPortID+0x34>
 8012902:	89fa      	ldrh	r2, [r7, #14]
 8012904:	89bb      	ldrh	r3, [r7, #12]
 8012906:	429a      	cmp	r2, r3
 8012908:	bf8c      	ite	hi
 801290a:	2301      	movhi	r3, #1
 801290c:	2300      	movls	r3, #0
 801290e:	b2db      	uxtb	r3, r3
 8012910:	461a      	mov	r2, r3
 8012912:	4b05      	ldr	r3, [pc, #20]	; (8012928 <rxSubscriptionPredicateOnPortID+0x44>)
 8012914:	569b      	ldrsb	r3, [r3, r2]
 8012916:	e000      	b.n	801291a <rxSubscriptionPredicateOnPortID+0x36>
 8012918:	2300      	movs	r3, #0
 801291a:	4618      	mov	r0, r3
 801291c:	3714      	adds	r7, #20
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	08018878 	.word	0x08018878

0801292c <rxSubscriptionPredicateOnStruct>:
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	331c      	adds	r3, #28
 801293a:	6839      	ldr	r1, [r7, #0]
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff ffd1 	bl	80128e4 <rxSubscriptionPredicateOnPortID>
 8012942:	4603      	mov	r3, r0
 8012944:	4618      	mov	r0, r3
 8012946:	3708      	adds	r7, #8
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <canardInit>:
 801294c:	b5b0      	push	{r4, r5, r7, lr}
 801294e:	b08c      	sub	sp, #48	; 0x30
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <canardInit+0x20>
 801295e:	4b16      	ldr	r3, [pc, #88]	; (80129b8 <canardInit+0x6c>)
 8012960:	4a16      	ldr	r2, [pc, #88]	; (80129bc <canardInit+0x70>)
 8012962:	f240 31d6 	movw	r1, #982	; 0x3d6
 8012966:	4816      	ldr	r0, [pc, #88]	; (80129c0 <canardInit+0x74>)
 8012968:	f000 fb1c 	bl	8012fa4 <__assert_func>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <canardInit+0x34>
 8012972:	4b14      	ldr	r3, [pc, #80]	; (80129c4 <canardInit+0x78>)
 8012974:	4a11      	ldr	r2, [pc, #68]	; (80129bc <canardInit+0x70>)
 8012976:	f240 31d7 	movw	r1, #983	; 0x3d7
 801297a:	4811      	ldr	r0, [pc, #68]	; (80129c0 <canardInit+0x74>)
 801297c:	f000 fb12 	bl	8012fa4 <__assert_func>
 8012980:	2300      	movs	r3, #0
 8012982:	617b      	str	r3, [r7, #20]
 8012984:	23ff      	movs	r3, #255	; 0xff
 8012986:	763b      	strb	r3, [r7, #24]
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	61fb      	str	r3, [r7, #28]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	623b      	str	r3, [r7, #32]
 8012990:	2300      	movs	r3, #0
 8012992:	627b      	str	r3, [r7, #36]	; 0x24
 8012994:	2300      	movs	r3, #0
 8012996:	62bb      	str	r3, [r7, #40]	; 0x28
 8012998:	2300      	movs	r3, #0
 801299a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	461d      	mov	r5, r3
 80129a0:	f107 0414 	add.w	r4, r7, #20
 80129a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80129a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80129ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80129b0:	68f8      	ldr	r0, [r7, #12]
 80129b2:	3730      	adds	r7, #48	; 0x30
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bdb0      	pop	{r4, r5, r7, pc}
 80129b8:	0801812c 	.word	0x0801812c
 80129bc:	08018700 	.word	0x08018700
 80129c0:	080179a0 	.word	0x080179a0
 80129c4:	0801814c 	.word	0x0801814c

080129c8 <canardTxInit>:
 80129c8:	b4b0      	push	{r4, r5, r7}
 80129ca:	b08b      	sub	sp, #44	; 0x2c
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	617b      	str	r3, [r7, #20]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	61bb      	str	r3, [r7, #24]
 80129dc:	2300      	movs	r3, #0
 80129de:	61fb      	str	r3, [r7, #28]
 80129e0:	2300      	movs	r3, #0
 80129e2:	623b      	str	r3, [r7, #32]
 80129e4:	2300      	movs	r3, #0
 80129e6:	627b      	str	r3, [r7, #36]	; 0x24
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	461d      	mov	r5, r3
 80129ec:	f107 0414 	add.w	r4, r7, #20
 80129f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80129f4:	6823      	ldr	r3, [r4, #0]
 80129f6:	602b      	str	r3, [r5, #0]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	372c      	adds	r7, #44	; 0x2c
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bcb0      	pop	{r4, r5, r7}
 8012a00:	4770      	bx	lr
	...

08012a04 <canardTxPush>:
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b08e      	sub	sp, #56	; 0x38
 8012a08:	af06      	add	r7, sp, #24
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	60b9      	str	r1, [r7, #8]
 8012a0e:	e9c7 2300 	strd	r2, r3, [r7]
 8012a12:	f06f 0301 	mvn.w	r3, #1
 8012a16:	61fb      	str	r3, [r7, #28]
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d062      	beq.n	8012ae4 <canardTxPush+0xe0>
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d05f      	beq.n	8012ae4 <canardTxPush+0xe0>
 8012a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d05c      	beq.n	8012ae4 <canardTxPush+0xe0>
 8012a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d102      	bne.n	8012a36 <canardTxPush+0x32>
 8012a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d156      	bne.n	8012ae4 <canardTxPush+0xe0>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe fc02 	bl	8011244 <adjustPresentationLayerMTU>
 8012a40:	61b8      	str	r0, [r7, #24]
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	791a      	ldrb	r2, [r3, #4]
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a52:	f7fe fc27 	bl	80112a4 <txMakeCANID>
 8012a56:	6178      	str	r0, [r7, #20]
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	db40      	blt.n	8012ae0 <canardTxPush+0xdc>
 8012a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d81c      	bhi.n	8012aa0 <canardTxPush+0x9c>
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a6a:	7952      	ldrb	r2, [r2, #5]
 8012a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a6e:	9103      	str	r1, [sp, #12]
 8012a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a72:	9102      	str	r1, [sp, #8]
 8012a74:	9201      	str	r2, [sp, #4]
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a7c:	68b9      	ldr	r1, [r7, #8]
 8012a7e:	68f8      	ldr	r0, [r7, #12]
 8012a80:	f7fe fdda 	bl	8011638 <txPushSingleFrame>
 8012a84:	61f8      	str	r0, [r7, #28]
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	db2b      	blt.n	8012ae4 <canardTxPush+0xe0>
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d028      	beq.n	8012ae4 <canardTxPush+0xe0>
 8012a92:	4b1c      	ldr	r3, [pc, #112]	; (8012b04 <canardTxPush+0x100>)
 8012a94:	4a1c      	ldr	r2, [pc, #112]	; (8012b08 <canardTxPush+0x104>)
 8012a96:	f240 4105 	movw	r1, #1029	; 0x405
 8012a9a:	481c      	ldr	r0, [pc, #112]	; (8012b0c <canardTxPush+0x108>)
 8012a9c:	f000 fa82 	bl	8012fa4 <__assert_func>
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012aa4:	7952      	ldrb	r2, [r2, #5]
 8012aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012aa8:	9105      	str	r1, [sp, #20]
 8012aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012aac:	9104      	str	r1, [sp, #16]
 8012aae:	9203      	str	r2, [sp, #12]
 8012ab0:	9302      	str	r3, [sp, #8]
 8012ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	68b9      	ldr	r1, [r7, #8]
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f7fe ffd4 	bl	8011a6c <txPushMultiFrame>
 8012ac4:	61f8      	str	r0, [r7, #28]
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	db0b      	blt.n	8012ae4 <canardTxPush+0xe0>
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	dc08      	bgt.n	8012ae4 <canardTxPush+0xe0>
 8012ad2:	4b0f      	ldr	r3, [pc, #60]	; (8012b10 <canardTxPush+0x10c>)
 8012ad4:	4a0c      	ldr	r2, [pc, #48]	; (8012b08 <canardTxPush+0x104>)
 8012ad6:	f240 4111 	movw	r1, #1041	; 0x411
 8012ada:	480c      	ldr	r0, [pc, #48]	; (8012b0c <canardTxPush+0x108>)
 8012adc:	f000 fa62 	bl	8012fa4 <__assert_func>
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	61fb      	str	r3, [r7, #28]
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d106      	bne.n	8012af8 <canardTxPush+0xf4>
 8012aea:	4b0a      	ldr	r3, [pc, #40]	; (8012b14 <canardTxPush+0x110>)
 8012aec:	4a06      	ldr	r2, [pc, #24]	; (8012b08 <canardTxPush+0x104>)
 8012aee:	f240 4119 	movw	r1, #1049	; 0x419
 8012af2:	4806      	ldr	r0, [pc, #24]	; (8012b0c <canardTxPush+0x108>)
 8012af4:	f000 fa56 	bl	8012fa4 <__assert_func>
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	4618      	mov	r0, r3
 8012afc:	3720      	adds	r7, #32
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	08017c9c 	.word	0x08017c9c
 8012b08:	0801870c 	.word	0x0801870c
 8012b0c:	080179a0 	.word	0x080179a0
 8012b10:	08017de0 	.word	0x08017de0
 8012b14:	08018168 	.word	0x08018168

08012b18 <canardTxPeek>:
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	2300      	movs	r3, #0
 8012b22:	60fb      	str	r3, [r7, #12]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d006      	beq.n	8012b38 <canardTxPeek+0x20>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	2100      	movs	r1, #0
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fd ff1d 	bl	8010970 <cavlFindExtremum>
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <canardTxPop>:
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b084      	sub	sp, #16
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
 8012b4a:	6039      	str	r1, [r7, #0]
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	60fb      	str	r3, [r7, #12]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d010      	beq.n	8012b78 <canardTxPop+0x36>
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00d      	beq.n	8012b78 <canardTxPop+0x36>
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	60fb      	str	r3, [r7, #12]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	330c      	adds	r3, #12
 8012b64:	683a      	ldr	r2, [r7, #0]
 8012b66:	4611      	mov	r1, r2
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7fe f957 	bl	8010e1c <cavlRemove>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	1e5a      	subs	r2, r3, #1
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	609a      	str	r2, [r3, #8]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
	...

08012b84 <canardRxAccept>:
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b090      	sub	sp, #64	; 0x40
 8012b88:	af02      	add	r7, sp, #8
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	e9c7 2300 	strd	r2, r3, [r7]
 8012b90:	23fe      	movs	r3, #254	; 0xfe
 8012b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d068      	beq.n	8012c6e <canardRxAccept+0xea>
 8012b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d065      	beq.n	8012c6e <canardRxAccept+0xea>
 8012ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d062      	beq.n	8012c6e <canardRxAccept+0xea>
 8012ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012bb0:	d25d      	bcs.n	8012c6e <canardRxAccept+0xea>
 8012bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bb4:	689b      	ldr	r3, [r3, #8]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d103      	bne.n	8012bc2 <canardRxAccept+0x3e>
 8012bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d155      	bne.n	8012c6e <canardRxAccept+0xea>
 8012bc2:	f107 0310 	add.w	r3, r7, #16
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	2100      	movs	r1, #0
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f001 faad 	bl	801412a <memset>
 8012bd0:	f107 0310 	add.w	r3, r7, #16
 8012bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012bda:	f7ff f83b 	bl	8011c54 <rxTryParseFrame>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d041      	beq.n	8012c68 <canardRxAccept+0xe4>
 8012be4:	7f7b      	ldrb	r3, [r7, #29]
 8012be6:	2bff      	cmp	r3, #255	; 0xff
 8012be8:	d004      	beq.n	8012bf4 <canardRxAccept+0x70>
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	791a      	ldrb	r2, [r3, #4]
 8012bee:	7f7b      	ldrb	r3, [r7, #29]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d135      	bne.n	8012c60 <canardRxAccept+0xdc>
 8012bf4:	7e7b      	ldrb	r3, [r7, #25]
 8012bf6:	3304      	adds	r3, #4
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	68fa      	ldr	r2, [r7, #12]
 8012bfc:	18d0      	adds	r0, r2, r3
 8012bfe:	f107 0310 	add.w	r3, r7, #16
 8012c02:	f103 010a 	add.w	r1, r3, #10
 8012c06:	2300      	movs	r3, #0
 8012c08:	4a21      	ldr	r2, [pc, #132]	; (8012c90 <canardRxAccept+0x10c>)
 8012c0a:	f7fe f889 	bl	8010d20 <cavlSearch>
 8012c0e:	6338      	str	r0, [r7, #48]	; 0x30
 8012c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d002      	beq.n	8012c1c <canardRxAccept+0x98>
 8012c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d01a      	beq.n	8012c58 <canardRxAccept+0xd4>
 8012c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c24:	8b9a      	ldrh	r2, [r3, #28]
 8012c26:	8b7b      	ldrh	r3, [r7, #26]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d006      	beq.n	8012c3a <canardRxAccept+0xb6>
 8012c2c:	4b19      	ldr	r3, [pc, #100]	; (8012c94 <canardRxAccept+0x110>)
 8012c2e:	4a1a      	ldr	r2, [pc, #104]	; (8012c98 <canardRxAccept+0x114>)
 8012c30:	f240 415a 	movw	r1, #1114	; 0x45a
 8012c34:	4819      	ldr	r0, [pc, #100]	; (8012c9c <canardRxAccept+0x118>)
 8012c36:	f000 f9b5 	bl	8012fa4 <__assert_func>
 8012c3a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8012c3e:	f107 0210 	add.w	r2, r7, #16
 8012c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c44:	9300      	str	r3, [sp, #0]
 8012c46:	460b      	mov	r3, r1
 8012c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff fd1c 	bl	8012688 <rxAcceptFrame>
 8012c50:	4603      	mov	r3, r0
 8012c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c56:	e00a      	b.n	8012c6e <canardRxAccept+0xea>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c5e:	e006      	b.n	8012c6e <canardRxAccept+0xea>
 8012c60:	2300      	movs	r3, #0
 8012c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c66:	e002      	b.n	8012c6e <canardRxAccept+0xea>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	dd06      	ble.n	8012c84 <canardRxAccept+0x100>
 8012c76:	4b0a      	ldr	r3, [pc, #40]	; (8012ca0 <canardRxAccept+0x11c>)
 8012c78:	4a07      	ldr	r2, [pc, #28]	; (8012c98 <canardRxAccept+0x114>)
 8012c7a:	f240 416c 	movw	r1, #1132	; 0x46c
 8012c7e:	4807      	ldr	r0, [pc, #28]	; (8012c9c <canardRxAccept+0x118>)
 8012c80:	f000 f990 	bl	8012fa4 <__assert_func>
 8012c84:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3738      	adds	r7, #56	; 0x38
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	080128e5 	.word	0x080128e5
 8012c94:	08018174 	.word	0x08018174
 8012c98:	08018868 	.word	0x08018868
 8012c9c:	080179a0 	.word	0x080179a0
 8012ca0:	08018194 	.word	0x08018194

08012ca4 <canardRxSubscribe>:
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b088      	sub	sp, #32
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	607b      	str	r3, [r7, #4]
 8012cae:	460b      	mov	r3, r1
 8012cb0:	72fb      	strb	r3, [r7, #11]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	813b      	strh	r3, [r7, #8]
 8012cb6:	23fe      	movs	r3, #254	; 0xfe
 8012cb8:	77fb      	strb	r3, [r7, #31]
 8012cba:	7afb      	ldrb	r3, [r7, #11]
 8012cbc:	617b      	str	r3, [r7, #20]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d04a      	beq.n	8012d5a <canardRxSubscribe+0xb6>
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d047      	beq.n	8012d5a <canardRxSubscribe+0xb6>
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	2b02      	cmp	r3, #2
 8012cce:	d844      	bhi.n	8012d5a <canardRxSubscribe+0xb6>
 8012cd0:	893a      	ldrh	r2, [r7, #8]
 8012cd2:	7afb      	ldrb	r3, [r7, #11]
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f000 f850 	bl	8012d7c <canardRxUnsubscribe>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	77fb      	strb	r3, [r7, #31]
 8012ce0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	db38      	blt.n	8012d5a <canardRxSubscribe+0xb6>
 8012ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012cee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	619a      	str	r2, [r3, #24]
 8012cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfa:	893a      	ldrh	r2, [r7, #8]
 8012cfc:	839a      	strh	r2, [r3, #28]
 8012cfe:	2300      	movs	r3, #0
 8012d00:	61bb      	str	r3, [r7, #24]
 8012d02:	e009      	b.n	8012d18 <canardRxSubscribe+0x74>
 8012d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d06:	69bb      	ldr	r3, [r7, #24]
 8012d08:	3308      	adds	r3, #8
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	4413      	add	r3, r2
 8012d0e:	2200      	movs	r2, #0
 8012d10:	605a      	str	r2, [r3, #4]
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	3301      	adds	r3, #1
 8012d16:	61bb      	str	r3, [r7, #24]
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8012d1c:	d9f2      	bls.n	8012d04 <canardRxSubscribe+0x60>
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	3304      	adds	r3, #4
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	68fa      	ldr	r2, [r7, #12]
 8012d26:	18d0      	adds	r0, r2, r3
 8012d28:	4b0f      	ldr	r3, [pc, #60]	; (8012d68 <canardRxSubscribe+0xc4>)
 8012d2a:	4a10      	ldr	r2, [pc, #64]	; (8012d6c <canardRxSubscribe+0xc8>)
 8012d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d2e:	f7fd fff7 	bl	8010d20 <cavlSearch>
 8012d32:	6138      	str	r0, [r7, #16]
 8012d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d36:	693a      	ldr	r2, [r7, #16]
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d006      	beq.n	8012d4a <canardRxSubscribe+0xa6>
 8012d3c:	4b0c      	ldr	r3, [pc, #48]	; (8012d70 <canardRxSubscribe+0xcc>)
 8012d3e:	4a0d      	ldr	r2, [pc, #52]	; (8012d74 <canardRxSubscribe+0xd0>)
 8012d40:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8012d44:	480c      	ldr	r0, [pc, #48]	; (8012d78 <canardRxSubscribe+0xd4>)
 8012d46:	f000 f92d 	bl	8012fa4 <__assert_func>
 8012d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	bfd4      	ite	le
 8012d52:	2301      	movle	r3, #1
 8012d54:	2300      	movgt	r3, #0
 8012d56:	b2db      	uxtb	r3, r3
 8012d58:	77fb      	strb	r3, [r7, #31]
 8012d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3720      	adds	r7, #32
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	08011081 	.word	0x08011081
 8012d6c:	0801292d 	.word	0x0801292d
 8012d70:	080181a0 	.word	0x080181a0
 8012d74:	08018930 	.word	0x08018930
 8012d78:	080179a0 	.word	0x080179a0

08012d7c <canardRxUnsubscribe>:
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b088      	sub	sp, #32
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	460b      	mov	r3, r1
 8012d86:	70fb      	strb	r3, [r7, #3]
 8012d88:	4613      	mov	r3, r2
 8012d8a:	803b      	strh	r3, [r7, #0]
 8012d8c:	23fe      	movs	r3, #254	; 0xfe
 8012d8e:	77fb      	strb	r3, [r7, #31]
 8012d90:	78fb      	ldrb	r3, [r7, #3]
 8012d92:	617b      	str	r3, [r7, #20]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d05f      	beq.n	8012e5a <canardRxUnsubscribe+0xde>
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2b02      	cmp	r3, #2
 8012d9e:	d85c      	bhi.n	8012e5a <canardRxUnsubscribe+0xde>
 8012da0:	883b      	ldrh	r3, [r7, #0]
 8012da2:	81fb      	strh	r3, [r7, #14]
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	3304      	adds	r3, #4
 8012da8:	009b      	lsls	r3, r3, #2
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	18d0      	adds	r0, r2, r3
 8012dae:	f107 010e 	add.w	r1, r7, #14
 8012db2:	2300      	movs	r3, #0
 8012db4:	4a2c      	ldr	r2, [pc, #176]	; (8012e68 <canardRxUnsubscribe+0xec>)
 8012db6:	f7fd ffb3 	bl	8010d20 <cavlSearch>
 8012dba:	6138      	str	r0, [r7, #16]
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d049      	beq.n	8012e56 <canardRxUnsubscribe+0xda>
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	3304      	adds	r3, #4
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	4413      	add	r3, r2
 8012dcc:	693a      	ldr	r2, [r7, #16]
 8012dce:	4611      	mov	r1, r2
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fe f823 	bl	8010e1c <cavlRemove>
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	8b9b      	ldrh	r3, [r3, #28]
 8012dda:	883a      	ldrh	r2, [r7, #0]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d006      	beq.n	8012dee <canardRxUnsubscribe+0x72>
 8012de0:	4b22      	ldr	r3, [pc, #136]	; (8012e6c <canardRxUnsubscribe+0xf0>)
 8012de2:	4a23      	ldr	r2, [pc, #140]	; (8012e70 <canardRxUnsubscribe+0xf4>)
 8012de4:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8012de8:	4822      	ldr	r0, [pc, #136]	; (8012e74 <canardRxUnsubscribe+0xf8>)
 8012dea:	f000 f8db 	bl	8012fa4 <__assert_func>
 8012dee:	2301      	movs	r3, #1
 8012df0:	77fb      	strb	r3, [r7, #31]
 8012df2:	2300      	movs	r3, #0
 8012df4:	61bb      	str	r3, [r7, #24]
 8012df6:	e02a      	b.n	8012e4e <canardRxUnsubscribe+0xd2>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	68da      	ldr	r2, [r3, #12]
 8012dfc:	6939      	ldr	r1, [r7, #16]
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	3308      	adds	r3, #8
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	440b      	add	r3, r1
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d007      	beq.n	8012e1c <canardRxUnsubscribe+0xa0>
 8012e0c:	6939      	ldr	r1, [r7, #16]
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	3308      	adds	r3, #8
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	440b      	add	r3, r1
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	691b      	ldr	r3, [r3, #16]
 8012e1a:	e000      	b.n	8012e1e <canardRxUnsubscribe+0xa2>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	4790      	blx	r2
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	68da      	ldr	r2, [r3, #12]
 8012e28:	6939      	ldr	r1, [r7, #16]
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	3308      	adds	r3, #8
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	440b      	add	r3, r1
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	4619      	mov	r1, r3
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	4790      	blx	r2
 8012e3a:	693a      	ldr	r2, [r7, #16]
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	3308      	adds	r3, #8
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4413      	add	r3, r2
 8012e44:	2200      	movs	r2, #0
 8012e46:	605a      	str	r2, [r3, #4]
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	61bb      	str	r3, [r7, #24]
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	2b7f      	cmp	r3, #127	; 0x7f
 8012e52:	d9d1      	bls.n	8012df8 <canardRxUnsubscribe+0x7c>
 8012e54:	e001      	b.n	8012e5a <canardRxUnsubscribe+0xde>
 8012e56:	2300      	movs	r3, #0
 8012e58:	77fb      	strb	r3, [r7, #31]
 8012e5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3720      	adds	r7, #32
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	080128e5 	.word	0x080128e5
 8012e6c:	080181c0 	.word	0x080181c0
 8012e70:	08018944 	.word	0x08018944
 8012e74:	080179a0 	.word	0x080179a0

08012e78 <canardMakeFilterForSubject>:
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	460b      	mov	r3, r1
 8012e82:	807b      	strh	r3, [r7, #2]
 8012e84:	f107 0308 	add.w	r3, r7, #8
 8012e88:	2200      	movs	r2, #0
 8012e8a:	601a      	str	r2, [r3, #0]
 8012e8c:	605a      	str	r2, [r3, #4]
 8012e8e:	887b      	ldrh	r3, [r7, #2]
 8012e90:	021b      	lsls	r3, r3, #8
 8012e92:	60bb      	str	r3, [r7, #8]
 8012e94:	4b07      	ldr	r3, [pc, #28]	; (8012eb4 <canardMakeFilterForSubject+0x3c>)
 8012e96:	60fb      	str	r3, [r7, #12]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	f107 0308 	add.w	r3, r7, #8
 8012ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012ea4:	e882 0003 	stmia.w	r2, {r0, r1}
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	3714      	adds	r7, #20
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr
 8012eb4:	021fff80 	.word	0x021fff80

08012eb8 <canardMakeFilterForServices>:
 8012eb8:	b480      	push	{r7}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	70fb      	strb	r3, [r7, #3]
 8012ec4:	f107 0308 	add.w	r3, r7, #8
 8012ec8:	2200      	movs	r2, #0
 8012eca:	601a      	str	r2, [r3, #0]
 8012ecc:	605a      	str	r2, [r3, #4]
 8012ece:	78fb      	ldrb	r3, [r7, #3]
 8012ed0:	01db      	lsls	r3, r3, #7
 8012ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012ed6:	60bb      	str	r3, [r7, #8]
 8012ed8:	4b07      	ldr	r3, [pc, #28]	; (8012ef8 <canardMakeFilterForServices+0x40>)
 8012eda:	60fb      	str	r3, [r7, #12]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	f107 0308 	add.w	r3, r7, #8
 8012ee4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012ee8:	e882 0003 	stmia.w	r2, {r0, r1}
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	3714      	adds	r7, #20
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	02803f80 	.word	0x02803f80

08012efc <canardConsolidateFilters>:
 8012efc:	b480      	push	{r7}
 8012efe:	b087      	sub	sp, #28
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	607a      	str	r2, [r7, #4]
 8012f08:	f107 0310 	add.w	r3, r7, #16
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	601a      	str	r2, [r3, #0]
 8012f10:	605a      	str	r2, [r3, #4]
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	685a      	ldr	r2, [r3, #4]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	401a      	ands	r2, r3
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	6819      	ldr	r1, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	404b      	eors	r3, r1
 8012f26:	43db      	mvns	r3, r3
 8012f28:	4013      	ands	r3, r2
 8012f2a:	617b      	str	r3, [r7, #20]
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	4013      	ands	r3, r2
 8012f34:	613b      	str	r3, [r7, #16]
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	461a      	mov	r2, r3
 8012f3a:	f107 0310 	add.w	r3, r7, #16
 8012f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f42:	e882 0003 	stmia.w	r2, {r0, r1}
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	371c      	adds	r7, #28
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr

08012f52 <_ZdlPvj>:
 8012f52:	f000 b814 	b.w	8012f7e <_ZdlPv>

08012f56 <_Znwj>:
 8012f56:	2801      	cmp	r0, #1
 8012f58:	bf38      	it	cc
 8012f5a:	2001      	movcc	r0, #1
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	4604      	mov	r4, r0
 8012f60:	4620      	mov	r0, r4
 8012f62:	f000 f84f 	bl	8013004 <malloc>
 8012f66:	b100      	cbz	r0, 8012f6a <_Znwj+0x14>
 8012f68:	bd10      	pop	{r4, pc}
 8012f6a:	f000 f80b 	bl	8012f84 <_ZSt15get_new_handlerv>
 8012f6e:	b908      	cbnz	r0, 8012f74 <_Znwj+0x1e>
 8012f70:	f000 f810 	bl	8012f94 <abort>
 8012f74:	4780      	blx	r0
 8012f76:	e7f3      	b.n	8012f60 <_Znwj+0xa>

08012f78 <_ZSt25__throw_bad_function_callv>:
 8012f78:	b508      	push	{r3, lr}
 8012f7a:	f000 f80b 	bl	8012f94 <abort>

08012f7e <_ZdlPv>:
 8012f7e:	f000 b849 	b.w	8013014 <free>
	...

08012f84 <_ZSt15get_new_handlerv>:
 8012f84:	4b02      	ldr	r3, [pc, #8]	; (8012f90 <_ZSt15get_new_handlerv+0xc>)
 8012f86:	6818      	ldr	r0, [r3, #0]
 8012f88:	f3bf 8f5b 	dmb	ish
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	20000994 	.word	0x20000994

08012f94 <abort>:
 8012f94:	b508      	push	{r3, lr}
 8012f96:	2006      	movs	r0, #6
 8012f98:	f001 f90a 	bl	80141b0 <raise>
 8012f9c:	2001      	movs	r0, #1
 8012f9e:	f7f6 fab9 	bl	8009514 <_exit>
	...

08012fa4 <__assert_func>:
 8012fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fa6:	4614      	mov	r4, r2
 8012fa8:	461a      	mov	r2, r3
 8012faa:	4b09      	ldr	r3, [pc, #36]	; (8012fd0 <__assert_func+0x2c>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4605      	mov	r5, r0
 8012fb0:	68d8      	ldr	r0, [r3, #12]
 8012fb2:	b14c      	cbz	r4, 8012fc8 <__assert_func+0x24>
 8012fb4:	4b07      	ldr	r3, [pc, #28]	; (8012fd4 <__assert_func+0x30>)
 8012fb6:	9100      	str	r1, [sp, #0]
 8012fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fbc:	4906      	ldr	r1, [pc, #24]	; (8012fd8 <__assert_func+0x34>)
 8012fbe:	462b      	mov	r3, r5
 8012fc0:	f000 fff6 	bl	8013fb0 <fiprintf>
 8012fc4:	f7ff ffe6 	bl	8012f94 <abort>
 8012fc8:	4b04      	ldr	r3, [pc, #16]	; (8012fdc <__assert_func+0x38>)
 8012fca:	461c      	mov	r4, r3
 8012fcc:	e7f3      	b.n	8012fb6 <__assert_func+0x12>
 8012fce:	bf00      	nop
 8012fd0:	200000d4 	.word	0x200000d4
 8012fd4:	08018958 	.word	0x08018958
 8012fd8:	08018965 	.word	0x08018965
 8012fdc:	08018993 	.word	0x08018993

08012fe0 <exit>:
 8012fe0:	b508      	push	{r3, lr}
 8012fe2:	4b06      	ldr	r3, [pc, #24]	; (8012ffc <exit+0x1c>)
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	b113      	cbz	r3, 8012fee <exit+0xe>
 8012fe8:	2100      	movs	r1, #0
 8012fea:	f3af 8000 	nop.w
 8012fee:	4b04      	ldr	r3, [pc, #16]	; (8013000 <exit+0x20>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <exit+0x16>
 8012ff4:	4798      	blx	r3
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f7f6 fa8c 	bl	8009514 <_exit>
 8012ffc:	00000000 	.word	0x00000000
 8013000:	20000ad8 	.word	0x20000ad8

08013004 <malloc>:
 8013004:	4b02      	ldr	r3, [pc, #8]	; (8013010 <malloc+0xc>)
 8013006:	4601      	mov	r1, r0
 8013008:	6818      	ldr	r0, [r3, #0]
 801300a:	f000 b82b 	b.w	8013064 <_malloc_r>
 801300e:	bf00      	nop
 8013010:	200000d4 	.word	0x200000d4

08013014 <free>:
 8013014:	4b02      	ldr	r3, [pc, #8]	; (8013020 <free+0xc>)
 8013016:	4601      	mov	r1, r0
 8013018:	6818      	ldr	r0, [r3, #0]
 801301a:	f001 bffb 	b.w	8015014 <_free_r>
 801301e:	bf00      	nop
 8013020:	200000d4 	.word	0x200000d4

08013024 <sbrk_aligned>:
 8013024:	b570      	push	{r4, r5, r6, lr}
 8013026:	4e0e      	ldr	r6, [pc, #56]	; (8013060 <sbrk_aligned+0x3c>)
 8013028:	460c      	mov	r4, r1
 801302a:	6831      	ldr	r1, [r6, #0]
 801302c:	4605      	mov	r5, r0
 801302e:	b911      	cbnz	r1, 8013036 <sbrk_aligned+0x12>
 8013030:	f001 f912 	bl	8014258 <_sbrk_r>
 8013034:	6030      	str	r0, [r6, #0]
 8013036:	4621      	mov	r1, r4
 8013038:	4628      	mov	r0, r5
 801303a:	f001 f90d 	bl	8014258 <_sbrk_r>
 801303e:	1c43      	adds	r3, r0, #1
 8013040:	d00a      	beq.n	8013058 <sbrk_aligned+0x34>
 8013042:	1cc4      	adds	r4, r0, #3
 8013044:	f024 0403 	bic.w	r4, r4, #3
 8013048:	42a0      	cmp	r0, r4
 801304a:	d007      	beq.n	801305c <sbrk_aligned+0x38>
 801304c:	1a21      	subs	r1, r4, r0
 801304e:	4628      	mov	r0, r5
 8013050:	f001 f902 	bl	8014258 <_sbrk_r>
 8013054:	3001      	adds	r0, #1
 8013056:	d101      	bne.n	801305c <sbrk_aligned+0x38>
 8013058:	f04f 34ff 	mov.w	r4, #4294967295
 801305c:	4620      	mov	r0, r4
 801305e:	bd70      	pop	{r4, r5, r6, pc}
 8013060:	2000099c 	.word	0x2000099c

08013064 <_malloc_r>:
 8013064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013068:	1ccd      	adds	r5, r1, #3
 801306a:	f025 0503 	bic.w	r5, r5, #3
 801306e:	3508      	adds	r5, #8
 8013070:	2d0c      	cmp	r5, #12
 8013072:	bf38      	it	cc
 8013074:	250c      	movcc	r5, #12
 8013076:	2d00      	cmp	r5, #0
 8013078:	4607      	mov	r7, r0
 801307a:	db01      	blt.n	8013080 <_malloc_r+0x1c>
 801307c:	42a9      	cmp	r1, r5
 801307e:	d905      	bls.n	801308c <_malloc_r+0x28>
 8013080:	230c      	movs	r3, #12
 8013082:	603b      	str	r3, [r7, #0]
 8013084:	2600      	movs	r6, #0
 8013086:	4630      	mov	r0, r6
 8013088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801308c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013160 <_malloc_r+0xfc>
 8013090:	f000 f868 	bl	8013164 <__malloc_lock>
 8013094:	f8d8 3000 	ldr.w	r3, [r8]
 8013098:	461c      	mov	r4, r3
 801309a:	bb5c      	cbnz	r4, 80130f4 <_malloc_r+0x90>
 801309c:	4629      	mov	r1, r5
 801309e:	4638      	mov	r0, r7
 80130a0:	f7ff ffc0 	bl	8013024 <sbrk_aligned>
 80130a4:	1c43      	adds	r3, r0, #1
 80130a6:	4604      	mov	r4, r0
 80130a8:	d155      	bne.n	8013156 <_malloc_r+0xf2>
 80130aa:	f8d8 4000 	ldr.w	r4, [r8]
 80130ae:	4626      	mov	r6, r4
 80130b0:	2e00      	cmp	r6, #0
 80130b2:	d145      	bne.n	8013140 <_malloc_r+0xdc>
 80130b4:	2c00      	cmp	r4, #0
 80130b6:	d048      	beq.n	801314a <_malloc_r+0xe6>
 80130b8:	6823      	ldr	r3, [r4, #0]
 80130ba:	4631      	mov	r1, r6
 80130bc:	4638      	mov	r0, r7
 80130be:	eb04 0903 	add.w	r9, r4, r3
 80130c2:	f001 f8c9 	bl	8014258 <_sbrk_r>
 80130c6:	4581      	cmp	r9, r0
 80130c8:	d13f      	bne.n	801314a <_malloc_r+0xe6>
 80130ca:	6821      	ldr	r1, [r4, #0]
 80130cc:	1a6d      	subs	r5, r5, r1
 80130ce:	4629      	mov	r1, r5
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7ff ffa7 	bl	8013024 <sbrk_aligned>
 80130d6:	3001      	adds	r0, #1
 80130d8:	d037      	beq.n	801314a <_malloc_r+0xe6>
 80130da:	6823      	ldr	r3, [r4, #0]
 80130dc:	442b      	add	r3, r5
 80130de:	6023      	str	r3, [r4, #0]
 80130e0:	f8d8 3000 	ldr.w	r3, [r8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d038      	beq.n	801315a <_malloc_r+0xf6>
 80130e8:	685a      	ldr	r2, [r3, #4]
 80130ea:	42a2      	cmp	r2, r4
 80130ec:	d12b      	bne.n	8013146 <_malloc_r+0xe2>
 80130ee:	2200      	movs	r2, #0
 80130f0:	605a      	str	r2, [r3, #4]
 80130f2:	e00f      	b.n	8013114 <_malloc_r+0xb0>
 80130f4:	6822      	ldr	r2, [r4, #0]
 80130f6:	1b52      	subs	r2, r2, r5
 80130f8:	d41f      	bmi.n	801313a <_malloc_r+0xd6>
 80130fa:	2a0b      	cmp	r2, #11
 80130fc:	d917      	bls.n	801312e <_malloc_r+0xca>
 80130fe:	1961      	adds	r1, r4, r5
 8013100:	42a3      	cmp	r3, r4
 8013102:	6025      	str	r5, [r4, #0]
 8013104:	bf18      	it	ne
 8013106:	6059      	strne	r1, [r3, #4]
 8013108:	6863      	ldr	r3, [r4, #4]
 801310a:	bf08      	it	eq
 801310c:	f8c8 1000 	streq.w	r1, [r8]
 8013110:	5162      	str	r2, [r4, r5]
 8013112:	604b      	str	r3, [r1, #4]
 8013114:	4638      	mov	r0, r7
 8013116:	f104 060b 	add.w	r6, r4, #11
 801311a:	f000 f829 	bl	8013170 <__malloc_unlock>
 801311e:	f026 0607 	bic.w	r6, r6, #7
 8013122:	1d23      	adds	r3, r4, #4
 8013124:	1af2      	subs	r2, r6, r3
 8013126:	d0ae      	beq.n	8013086 <_malloc_r+0x22>
 8013128:	1b9b      	subs	r3, r3, r6
 801312a:	50a3      	str	r3, [r4, r2]
 801312c:	e7ab      	b.n	8013086 <_malloc_r+0x22>
 801312e:	42a3      	cmp	r3, r4
 8013130:	6862      	ldr	r2, [r4, #4]
 8013132:	d1dd      	bne.n	80130f0 <_malloc_r+0x8c>
 8013134:	f8c8 2000 	str.w	r2, [r8]
 8013138:	e7ec      	b.n	8013114 <_malloc_r+0xb0>
 801313a:	4623      	mov	r3, r4
 801313c:	6864      	ldr	r4, [r4, #4]
 801313e:	e7ac      	b.n	801309a <_malloc_r+0x36>
 8013140:	4634      	mov	r4, r6
 8013142:	6876      	ldr	r6, [r6, #4]
 8013144:	e7b4      	b.n	80130b0 <_malloc_r+0x4c>
 8013146:	4613      	mov	r3, r2
 8013148:	e7cc      	b.n	80130e4 <_malloc_r+0x80>
 801314a:	230c      	movs	r3, #12
 801314c:	603b      	str	r3, [r7, #0]
 801314e:	4638      	mov	r0, r7
 8013150:	f000 f80e 	bl	8013170 <__malloc_unlock>
 8013154:	e797      	b.n	8013086 <_malloc_r+0x22>
 8013156:	6025      	str	r5, [r4, #0]
 8013158:	e7dc      	b.n	8013114 <_malloc_r+0xb0>
 801315a:	605b      	str	r3, [r3, #4]
 801315c:	deff      	udf	#255	; 0xff
 801315e:	bf00      	nop
 8013160:	20000998 	.word	0x20000998

08013164 <__malloc_lock>:
 8013164:	4801      	ldr	r0, [pc, #4]	; (801316c <__malloc_lock+0x8>)
 8013166:	f001 b8c4 	b.w	80142f2 <__retarget_lock_acquire_recursive>
 801316a:	bf00      	nop
 801316c:	20000ae0 	.word	0x20000ae0

08013170 <__malloc_unlock>:
 8013170:	4801      	ldr	r0, [pc, #4]	; (8013178 <__malloc_unlock+0x8>)
 8013172:	f001 b8bf 	b.w	80142f4 <__retarget_lock_release_recursive>
 8013176:	bf00      	nop
 8013178:	20000ae0 	.word	0x20000ae0

0801317c <__cvt>:
 801317c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013180:	ec55 4b10 	vmov	r4, r5, d0
 8013184:	2d00      	cmp	r5, #0
 8013186:	460e      	mov	r6, r1
 8013188:	4619      	mov	r1, r3
 801318a:	462b      	mov	r3, r5
 801318c:	bfbb      	ittet	lt
 801318e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013192:	461d      	movlt	r5, r3
 8013194:	2300      	movge	r3, #0
 8013196:	232d      	movlt	r3, #45	; 0x2d
 8013198:	700b      	strb	r3, [r1, #0]
 801319a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801319c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80131a0:	4691      	mov	r9, r2
 80131a2:	f023 0820 	bic.w	r8, r3, #32
 80131a6:	bfbc      	itt	lt
 80131a8:	4622      	movlt	r2, r4
 80131aa:	4614      	movlt	r4, r2
 80131ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80131b0:	d005      	beq.n	80131be <__cvt+0x42>
 80131b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80131b6:	d100      	bne.n	80131ba <__cvt+0x3e>
 80131b8:	3601      	adds	r6, #1
 80131ba:	2102      	movs	r1, #2
 80131bc:	e000      	b.n	80131c0 <__cvt+0x44>
 80131be:	2103      	movs	r1, #3
 80131c0:	ab03      	add	r3, sp, #12
 80131c2:	9301      	str	r3, [sp, #4]
 80131c4:	ab02      	add	r3, sp, #8
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	ec45 4b10 	vmov	d0, r4, r5
 80131cc:	4653      	mov	r3, sl
 80131ce:	4632      	mov	r2, r6
 80131d0:	f001 f92e 	bl	8014430 <_dtoa_r>
 80131d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80131d8:	4607      	mov	r7, r0
 80131da:	d102      	bne.n	80131e2 <__cvt+0x66>
 80131dc:	f019 0f01 	tst.w	r9, #1
 80131e0:	d022      	beq.n	8013228 <__cvt+0xac>
 80131e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80131e6:	eb07 0906 	add.w	r9, r7, r6
 80131ea:	d110      	bne.n	801320e <__cvt+0x92>
 80131ec:	783b      	ldrb	r3, [r7, #0]
 80131ee:	2b30      	cmp	r3, #48	; 0x30
 80131f0:	d10a      	bne.n	8013208 <__cvt+0x8c>
 80131f2:	2200      	movs	r2, #0
 80131f4:	2300      	movs	r3, #0
 80131f6:	4620      	mov	r0, r4
 80131f8:	4629      	mov	r1, r5
 80131fa:	f7ed fc8d 	bl	8000b18 <__aeabi_dcmpeq>
 80131fe:	b918      	cbnz	r0, 8013208 <__cvt+0x8c>
 8013200:	f1c6 0601 	rsb	r6, r6, #1
 8013204:	f8ca 6000 	str.w	r6, [sl]
 8013208:	f8da 3000 	ldr.w	r3, [sl]
 801320c:	4499      	add	r9, r3
 801320e:	2200      	movs	r2, #0
 8013210:	2300      	movs	r3, #0
 8013212:	4620      	mov	r0, r4
 8013214:	4629      	mov	r1, r5
 8013216:	f7ed fc7f 	bl	8000b18 <__aeabi_dcmpeq>
 801321a:	b108      	cbz	r0, 8013220 <__cvt+0xa4>
 801321c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013220:	2230      	movs	r2, #48	; 0x30
 8013222:	9b03      	ldr	r3, [sp, #12]
 8013224:	454b      	cmp	r3, r9
 8013226:	d307      	bcc.n	8013238 <__cvt+0xbc>
 8013228:	9b03      	ldr	r3, [sp, #12]
 801322a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801322c:	1bdb      	subs	r3, r3, r7
 801322e:	4638      	mov	r0, r7
 8013230:	6013      	str	r3, [r2, #0]
 8013232:	b004      	add	sp, #16
 8013234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013238:	1c59      	adds	r1, r3, #1
 801323a:	9103      	str	r1, [sp, #12]
 801323c:	701a      	strb	r2, [r3, #0]
 801323e:	e7f0      	b.n	8013222 <__cvt+0xa6>

08013240 <__exponent>:
 8013240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013242:	4603      	mov	r3, r0
 8013244:	2900      	cmp	r1, #0
 8013246:	bfb8      	it	lt
 8013248:	4249      	neglt	r1, r1
 801324a:	f803 2b02 	strb.w	r2, [r3], #2
 801324e:	bfb4      	ite	lt
 8013250:	222d      	movlt	r2, #45	; 0x2d
 8013252:	222b      	movge	r2, #43	; 0x2b
 8013254:	2909      	cmp	r1, #9
 8013256:	7042      	strb	r2, [r0, #1]
 8013258:	dd2a      	ble.n	80132b0 <__exponent+0x70>
 801325a:	f10d 0207 	add.w	r2, sp, #7
 801325e:	4617      	mov	r7, r2
 8013260:	260a      	movs	r6, #10
 8013262:	4694      	mov	ip, r2
 8013264:	fb91 f5f6 	sdiv	r5, r1, r6
 8013268:	fb06 1415 	mls	r4, r6, r5, r1
 801326c:	3430      	adds	r4, #48	; 0x30
 801326e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013272:	460c      	mov	r4, r1
 8013274:	2c63      	cmp	r4, #99	; 0x63
 8013276:	f102 32ff 	add.w	r2, r2, #4294967295
 801327a:	4629      	mov	r1, r5
 801327c:	dcf1      	bgt.n	8013262 <__exponent+0x22>
 801327e:	3130      	adds	r1, #48	; 0x30
 8013280:	f1ac 0402 	sub.w	r4, ip, #2
 8013284:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013288:	1c41      	adds	r1, r0, #1
 801328a:	4622      	mov	r2, r4
 801328c:	42ba      	cmp	r2, r7
 801328e:	d30a      	bcc.n	80132a6 <__exponent+0x66>
 8013290:	f10d 0209 	add.w	r2, sp, #9
 8013294:	eba2 020c 	sub.w	r2, r2, ip
 8013298:	42bc      	cmp	r4, r7
 801329a:	bf88      	it	hi
 801329c:	2200      	movhi	r2, #0
 801329e:	4413      	add	r3, r2
 80132a0:	1a18      	subs	r0, r3, r0
 80132a2:	b003      	add	sp, #12
 80132a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80132aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80132ae:	e7ed      	b.n	801328c <__exponent+0x4c>
 80132b0:	2330      	movs	r3, #48	; 0x30
 80132b2:	3130      	adds	r1, #48	; 0x30
 80132b4:	7083      	strb	r3, [r0, #2]
 80132b6:	70c1      	strb	r1, [r0, #3]
 80132b8:	1d03      	adds	r3, r0, #4
 80132ba:	e7f1      	b.n	80132a0 <__exponent+0x60>

080132bc <_printf_float>:
 80132bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c0:	ed2d 8b02 	vpush	{d8}
 80132c4:	b08d      	sub	sp, #52	; 0x34
 80132c6:	460c      	mov	r4, r1
 80132c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80132cc:	4616      	mov	r6, r2
 80132ce:	461f      	mov	r7, r3
 80132d0:	4605      	mov	r5, r0
 80132d2:	f000 ff75 	bl	80141c0 <_localeconv_r>
 80132d6:	f8d0 a000 	ldr.w	sl, [r0]
 80132da:	4650      	mov	r0, sl
 80132dc:	f7ec fff0 	bl	80002c0 <strlen>
 80132e0:	2300      	movs	r3, #0
 80132e2:	930a      	str	r3, [sp, #40]	; 0x28
 80132e4:	6823      	ldr	r3, [r4, #0]
 80132e6:	9305      	str	r3, [sp, #20]
 80132e8:	f8d8 3000 	ldr.w	r3, [r8]
 80132ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80132f0:	3307      	adds	r3, #7
 80132f2:	f023 0307 	bic.w	r3, r3, #7
 80132f6:	f103 0208 	add.w	r2, r3, #8
 80132fa:	f8c8 2000 	str.w	r2, [r8]
 80132fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013306:	9307      	str	r3, [sp, #28]
 8013308:	f8cd 8018 	str.w	r8, [sp, #24]
 801330c:	ee08 0a10 	vmov	s16, r0
 8013310:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013318:	4b9e      	ldr	r3, [pc, #632]	; (8013594 <_printf_float+0x2d8>)
 801331a:	f04f 32ff 	mov.w	r2, #4294967295
 801331e:	f7ed fc2d 	bl	8000b7c <__aeabi_dcmpun>
 8013322:	bb88      	cbnz	r0, 8013388 <_printf_float+0xcc>
 8013324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013328:	4b9a      	ldr	r3, [pc, #616]	; (8013594 <_printf_float+0x2d8>)
 801332a:	f04f 32ff 	mov.w	r2, #4294967295
 801332e:	f7ed fc07 	bl	8000b40 <__aeabi_dcmple>
 8013332:	bb48      	cbnz	r0, 8013388 <_printf_float+0xcc>
 8013334:	2200      	movs	r2, #0
 8013336:	2300      	movs	r3, #0
 8013338:	4640      	mov	r0, r8
 801333a:	4649      	mov	r1, r9
 801333c:	f7ed fbf6 	bl	8000b2c <__aeabi_dcmplt>
 8013340:	b110      	cbz	r0, 8013348 <_printf_float+0x8c>
 8013342:	232d      	movs	r3, #45	; 0x2d
 8013344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013348:	4a93      	ldr	r2, [pc, #588]	; (8013598 <_printf_float+0x2dc>)
 801334a:	4b94      	ldr	r3, [pc, #592]	; (801359c <_printf_float+0x2e0>)
 801334c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013350:	bf94      	ite	ls
 8013352:	4690      	movls	r8, r2
 8013354:	4698      	movhi	r8, r3
 8013356:	2303      	movs	r3, #3
 8013358:	6123      	str	r3, [r4, #16]
 801335a:	9b05      	ldr	r3, [sp, #20]
 801335c:	f023 0304 	bic.w	r3, r3, #4
 8013360:	6023      	str	r3, [r4, #0]
 8013362:	f04f 0900 	mov.w	r9, #0
 8013366:	9700      	str	r7, [sp, #0]
 8013368:	4633      	mov	r3, r6
 801336a:	aa0b      	add	r2, sp, #44	; 0x2c
 801336c:	4621      	mov	r1, r4
 801336e:	4628      	mov	r0, r5
 8013370:	f000 f9da 	bl	8013728 <_printf_common>
 8013374:	3001      	adds	r0, #1
 8013376:	f040 8090 	bne.w	801349a <_printf_float+0x1de>
 801337a:	f04f 30ff 	mov.w	r0, #4294967295
 801337e:	b00d      	add	sp, #52	; 0x34
 8013380:	ecbd 8b02 	vpop	{d8}
 8013384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013388:	4642      	mov	r2, r8
 801338a:	464b      	mov	r3, r9
 801338c:	4640      	mov	r0, r8
 801338e:	4649      	mov	r1, r9
 8013390:	f7ed fbf4 	bl	8000b7c <__aeabi_dcmpun>
 8013394:	b140      	cbz	r0, 80133a8 <_printf_float+0xec>
 8013396:	464b      	mov	r3, r9
 8013398:	2b00      	cmp	r3, #0
 801339a:	bfbc      	itt	lt
 801339c:	232d      	movlt	r3, #45	; 0x2d
 801339e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80133a2:	4a7f      	ldr	r2, [pc, #508]	; (80135a0 <_printf_float+0x2e4>)
 80133a4:	4b7f      	ldr	r3, [pc, #508]	; (80135a4 <_printf_float+0x2e8>)
 80133a6:	e7d1      	b.n	801334c <_printf_float+0x90>
 80133a8:	6863      	ldr	r3, [r4, #4]
 80133aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80133ae:	9206      	str	r2, [sp, #24]
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	d13f      	bne.n	8013434 <_printf_float+0x178>
 80133b4:	2306      	movs	r3, #6
 80133b6:	6063      	str	r3, [r4, #4]
 80133b8:	9b05      	ldr	r3, [sp, #20]
 80133ba:	6861      	ldr	r1, [r4, #4]
 80133bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80133c0:	2300      	movs	r3, #0
 80133c2:	9303      	str	r3, [sp, #12]
 80133c4:	ab0a      	add	r3, sp, #40	; 0x28
 80133c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80133ca:	ab09      	add	r3, sp, #36	; 0x24
 80133cc:	ec49 8b10 	vmov	d0, r8, r9
 80133d0:	9300      	str	r3, [sp, #0]
 80133d2:	6022      	str	r2, [r4, #0]
 80133d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133d8:	4628      	mov	r0, r5
 80133da:	f7ff fecf 	bl	801317c <__cvt>
 80133de:	9b06      	ldr	r3, [sp, #24]
 80133e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133e2:	2b47      	cmp	r3, #71	; 0x47
 80133e4:	4680      	mov	r8, r0
 80133e6:	d108      	bne.n	80133fa <_printf_float+0x13e>
 80133e8:	1cc8      	adds	r0, r1, #3
 80133ea:	db02      	blt.n	80133f2 <_printf_float+0x136>
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	4299      	cmp	r1, r3
 80133f0:	dd41      	ble.n	8013476 <_printf_float+0x1ba>
 80133f2:	f1ab 0302 	sub.w	r3, fp, #2
 80133f6:	fa5f fb83 	uxtb.w	fp, r3
 80133fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80133fe:	d820      	bhi.n	8013442 <_printf_float+0x186>
 8013400:	3901      	subs	r1, #1
 8013402:	465a      	mov	r2, fp
 8013404:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013408:	9109      	str	r1, [sp, #36]	; 0x24
 801340a:	f7ff ff19 	bl	8013240 <__exponent>
 801340e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013410:	1813      	adds	r3, r2, r0
 8013412:	2a01      	cmp	r2, #1
 8013414:	4681      	mov	r9, r0
 8013416:	6123      	str	r3, [r4, #16]
 8013418:	dc02      	bgt.n	8013420 <_printf_float+0x164>
 801341a:	6822      	ldr	r2, [r4, #0]
 801341c:	07d2      	lsls	r2, r2, #31
 801341e:	d501      	bpl.n	8013424 <_printf_float+0x168>
 8013420:	3301      	adds	r3, #1
 8013422:	6123      	str	r3, [r4, #16]
 8013424:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013428:	2b00      	cmp	r3, #0
 801342a:	d09c      	beq.n	8013366 <_printf_float+0xaa>
 801342c:	232d      	movs	r3, #45	; 0x2d
 801342e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013432:	e798      	b.n	8013366 <_printf_float+0xaa>
 8013434:	9a06      	ldr	r2, [sp, #24]
 8013436:	2a47      	cmp	r2, #71	; 0x47
 8013438:	d1be      	bne.n	80133b8 <_printf_float+0xfc>
 801343a:	2b00      	cmp	r3, #0
 801343c:	d1bc      	bne.n	80133b8 <_printf_float+0xfc>
 801343e:	2301      	movs	r3, #1
 8013440:	e7b9      	b.n	80133b6 <_printf_float+0xfa>
 8013442:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013446:	d118      	bne.n	801347a <_printf_float+0x1be>
 8013448:	2900      	cmp	r1, #0
 801344a:	6863      	ldr	r3, [r4, #4]
 801344c:	dd0b      	ble.n	8013466 <_printf_float+0x1aa>
 801344e:	6121      	str	r1, [r4, #16]
 8013450:	b913      	cbnz	r3, 8013458 <_printf_float+0x19c>
 8013452:	6822      	ldr	r2, [r4, #0]
 8013454:	07d0      	lsls	r0, r2, #31
 8013456:	d502      	bpl.n	801345e <_printf_float+0x1a2>
 8013458:	3301      	adds	r3, #1
 801345a:	440b      	add	r3, r1
 801345c:	6123      	str	r3, [r4, #16]
 801345e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013460:	f04f 0900 	mov.w	r9, #0
 8013464:	e7de      	b.n	8013424 <_printf_float+0x168>
 8013466:	b913      	cbnz	r3, 801346e <_printf_float+0x1b2>
 8013468:	6822      	ldr	r2, [r4, #0]
 801346a:	07d2      	lsls	r2, r2, #31
 801346c:	d501      	bpl.n	8013472 <_printf_float+0x1b6>
 801346e:	3302      	adds	r3, #2
 8013470:	e7f4      	b.n	801345c <_printf_float+0x1a0>
 8013472:	2301      	movs	r3, #1
 8013474:	e7f2      	b.n	801345c <_printf_float+0x1a0>
 8013476:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801347a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801347c:	4299      	cmp	r1, r3
 801347e:	db05      	blt.n	801348c <_printf_float+0x1d0>
 8013480:	6823      	ldr	r3, [r4, #0]
 8013482:	6121      	str	r1, [r4, #16]
 8013484:	07d8      	lsls	r0, r3, #31
 8013486:	d5ea      	bpl.n	801345e <_printf_float+0x1a2>
 8013488:	1c4b      	adds	r3, r1, #1
 801348a:	e7e7      	b.n	801345c <_printf_float+0x1a0>
 801348c:	2900      	cmp	r1, #0
 801348e:	bfd4      	ite	le
 8013490:	f1c1 0202 	rsble	r2, r1, #2
 8013494:	2201      	movgt	r2, #1
 8013496:	4413      	add	r3, r2
 8013498:	e7e0      	b.n	801345c <_printf_float+0x1a0>
 801349a:	6823      	ldr	r3, [r4, #0]
 801349c:	055a      	lsls	r2, r3, #21
 801349e:	d407      	bmi.n	80134b0 <_printf_float+0x1f4>
 80134a0:	6923      	ldr	r3, [r4, #16]
 80134a2:	4642      	mov	r2, r8
 80134a4:	4631      	mov	r1, r6
 80134a6:	4628      	mov	r0, r5
 80134a8:	47b8      	blx	r7
 80134aa:	3001      	adds	r0, #1
 80134ac:	d12c      	bne.n	8013508 <_printf_float+0x24c>
 80134ae:	e764      	b.n	801337a <_printf_float+0xbe>
 80134b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80134b4:	f240 80e0 	bls.w	8013678 <_printf_float+0x3bc>
 80134b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134bc:	2200      	movs	r2, #0
 80134be:	2300      	movs	r3, #0
 80134c0:	f7ed fb2a 	bl	8000b18 <__aeabi_dcmpeq>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d034      	beq.n	8013532 <_printf_float+0x276>
 80134c8:	4a37      	ldr	r2, [pc, #220]	; (80135a8 <_printf_float+0x2ec>)
 80134ca:	2301      	movs	r3, #1
 80134cc:	4631      	mov	r1, r6
 80134ce:	4628      	mov	r0, r5
 80134d0:	47b8      	blx	r7
 80134d2:	3001      	adds	r0, #1
 80134d4:	f43f af51 	beq.w	801337a <_printf_float+0xbe>
 80134d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134dc:	429a      	cmp	r2, r3
 80134de:	db02      	blt.n	80134e6 <_printf_float+0x22a>
 80134e0:	6823      	ldr	r3, [r4, #0]
 80134e2:	07d8      	lsls	r0, r3, #31
 80134e4:	d510      	bpl.n	8013508 <_printf_float+0x24c>
 80134e6:	ee18 3a10 	vmov	r3, s16
 80134ea:	4652      	mov	r2, sl
 80134ec:	4631      	mov	r1, r6
 80134ee:	4628      	mov	r0, r5
 80134f0:	47b8      	blx	r7
 80134f2:	3001      	adds	r0, #1
 80134f4:	f43f af41 	beq.w	801337a <_printf_float+0xbe>
 80134f8:	f04f 0800 	mov.w	r8, #0
 80134fc:	f104 091a 	add.w	r9, r4, #26
 8013500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013502:	3b01      	subs	r3, #1
 8013504:	4543      	cmp	r3, r8
 8013506:	dc09      	bgt.n	801351c <_printf_float+0x260>
 8013508:	6823      	ldr	r3, [r4, #0]
 801350a:	079b      	lsls	r3, r3, #30
 801350c:	f100 8107 	bmi.w	801371e <_printf_float+0x462>
 8013510:	68e0      	ldr	r0, [r4, #12]
 8013512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013514:	4298      	cmp	r0, r3
 8013516:	bfb8      	it	lt
 8013518:	4618      	movlt	r0, r3
 801351a:	e730      	b.n	801337e <_printf_float+0xc2>
 801351c:	2301      	movs	r3, #1
 801351e:	464a      	mov	r2, r9
 8013520:	4631      	mov	r1, r6
 8013522:	4628      	mov	r0, r5
 8013524:	47b8      	blx	r7
 8013526:	3001      	adds	r0, #1
 8013528:	f43f af27 	beq.w	801337a <_printf_float+0xbe>
 801352c:	f108 0801 	add.w	r8, r8, #1
 8013530:	e7e6      	b.n	8013500 <_printf_float+0x244>
 8013532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013534:	2b00      	cmp	r3, #0
 8013536:	dc39      	bgt.n	80135ac <_printf_float+0x2f0>
 8013538:	4a1b      	ldr	r2, [pc, #108]	; (80135a8 <_printf_float+0x2ec>)
 801353a:	2301      	movs	r3, #1
 801353c:	4631      	mov	r1, r6
 801353e:	4628      	mov	r0, r5
 8013540:	47b8      	blx	r7
 8013542:	3001      	adds	r0, #1
 8013544:	f43f af19 	beq.w	801337a <_printf_float+0xbe>
 8013548:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801354c:	4313      	orrs	r3, r2
 801354e:	d102      	bne.n	8013556 <_printf_float+0x29a>
 8013550:	6823      	ldr	r3, [r4, #0]
 8013552:	07d9      	lsls	r1, r3, #31
 8013554:	d5d8      	bpl.n	8013508 <_printf_float+0x24c>
 8013556:	ee18 3a10 	vmov	r3, s16
 801355a:	4652      	mov	r2, sl
 801355c:	4631      	mov	r1, r6
 801355e:	4628      	mov	r0, r5
 8013560:	47b8      	blx	r7
 8013562:	3001      	adds	r0, #1
 8013564:	f43f af09 	beq.w	801337a <_printf_float+0xbe>
 8013568:	f04f 0900 	mov.w	r9, #0
 801356c:	f104 0a1a 	add.w	sl, r4, #26
 8013570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013572:	425b      	negs	r3, r3
 8013574:	454b      	cmp	r3, r9
 8013576:	dc01      	bgt.n	801357c <_printf_float+0x2c0>
 8013578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801357a:	e792      	b.n	80134a2 <_printf_float+0x1e6>
 801357c:	2301      	movs	r3, #1
 801357e:	4652      	mov	r2, sl
 8013580:	4631      	mov	r1, r6
 8013582:	4628      	mov	r0, r5
 8013584:	47b8      	blx	r7
 8013586:	3001      	adds	r0, #1
 8013588:	f43f aef7 	beq.w	801337a <_printf_float+0xbe>
 801358c:	f109 0901 	add.w	r9, r9, #1
 8013590:	e7ee      	b.n	8013570 <_printf_float+0x2b4>
 8013592:	bf00      	nop
 8013594:	7fefffff 	.word	0x7fefffff
 8013598:	08018994 	.word	0x08018994
 801359c:	08018998 	.word	0x08018998
 80135a0:	0801899c 	.word	0x0801899c
 80135a4:	080189a0 	.word	0x080189a0
 80135a8:	080189a4 	.word	0x080189a4
 80135ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135b0:	429a      	cmp	r2, r3
 80135b2:	bfa8      	it	ge
 80135b4:	461a      	movge	r2, r3
 80135b6:	2a00      	cmp	r2, #0
 80135b8:	4691      	mov	r9, r2
 80135ba:	dc37      	bgt.n	801362c <_printf_float+0x370>
 80135bc:	f04f 0b00 	mov.w	fp, #0
 80135c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135c4:	f104 021a 	add.w	r2, r4, #26
 80135c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135ca:	9305      	str	r3, [sp, #20]
 80135cc:	eba3 0309 	sub.w	r3, r3, r9
 80135d0:	455b      	cmp	r3, fp
 80135d2:	dc33      	bgt.n	801363c <_printf_float+0x380>
 80135d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135d8:	429a      	cmp	r2, r3
 80135da:	db3b      	blt.n	8013654 <_printf_float+0x398>
 80135dc:	6823      	ldr	r3, [r4, #0]
 80135de:	07da      	lsls	r2, r3, #31
 80135e0:	d438      	bmi.n	8013654 <_printf_float+0x398>
 80135e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80135e6:	eba2 0903 	sub.w	r9, r2, r3
 80135ea:	9b05      	ldr	r3, [sp, #20]
 80135ec:	1ad2      	subs	r2, r2, r3
 80135ee:	4591      	cmp	r9, r2
 80135f0:	bfa8      	it	ge
 80135f2:	4691      	movge	r9, r2
 80135f4:	f1b9 0f00 	cmp.w	r9, #0
 80135f8:	dc35      	bgt.n	8013666 <_printf_float+0x3aa>
 80135fa:	f04f 0800 	mov.w	r8, #0
 80135fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013602:	f104 0a1a 	add.w	sl, r4, #26
 8013606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801360a:	1a9b      	subs	r3, r3, r2
 801360c:	eba3 0309 	sub.w	r3, r3, r9
 8013610:	4543      	cmp	r3, r8
 8013612:	f77f af79 	ble.w	8013508 <_printf_float+0x24c>
 8013616:	2301      	movs	r3, #1
 8013618:	4652      	mov	r2, sl
 801361a:	4631      	mov	r1, r6
 801361c:	4628      	mov	r0, r5
 801361e:	47b8      	blx	r7
 8013620:	3001      	adds	r0, #1
 8013622:	f43f aeaa 	beq.w	801337a <_printf_float+0xbe>
 8013626:	f108 0801 	add.w	r8, r8, #1
 801362a:	e7ec      	b.n	8013606 <_printf_float+0x34a>
 801362c:	4613      	mov	r3, r2
 801362e:	4631      	mov	r1, r6
 8013630:	4642      	mov	r2, r8
 8013632:	4628      	mov	r0, r5
 8013634:	47b8      	blx	r7
 8013636:	3001      	adds	r0, #1
 8013638:	d1c0      	bne.n	80135bc <_printf_float+0x300>
 801363a:	e69e      	b.n	801337a <_printf_float+0xbe>
 801363c:	2301      	movs	r3, #1
 801363e:	4631      	mov	r1, r6
 8013640:	4628      	mov	r0, r5
 8013642:	9205      	str	r2, [sp, #20]
 8013644:	47b8      	blx	r7
 8013646:	3001      	adds	r0, #1
 8013648:	f43f ae97 	beq.w	801337a <_printf_float+0xbe>
 801364c:	9a05      	ldr	r2, [sp, #20]
 801364e:	f10b 0b01 	add.w	fp, fp, #1
 8013652:	e7b9      	b.n	80135c8 <_printf_float+0x30c>
 8013654:	ee18 3a10 	vmov	r3, s16
 8013658:	4652      	mov	r2, sl
 801365a:	4631      	mov	r1, r6
 801365c:	4628      	mov	r0, r5
 801365e:	47b8      	blx	r7
 8013660:	3001      	adds	r0, #1
 8013662:	d1be      	bne.n	80135e2 <_printf_float+0x326>
 8013664:	e689      	b.n	801337a <_printf_float+0xbe>
 8013666:	9a05      	ldr	r2, [sp, #20]
 8013668:	464b      	mov	r3, r9
 801366a:	4442      	add	r2, r8
 801366c:	4631      	mov	r1, r6
 801366e:	4628      	mov	r0, r5
 8013670:	47b8      	blx	r7
 8013672:	3001      	adds	r0, #1
 8013674:	d1c1      	bne.n	80135fa <_printf_float+0x33e>
 8013676:	e680      	b.n	801337a <_printf_float+0xbe>
 8013678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801367a:	2a01      	cmp	r2, #1
 801367c:	dc01      	bgt.n	8013682 <_printf_float+0x3c6>
 801367e:	07db      	lsls	r3, r3, #31
 8013680:	d53a      	bpl.n	80136f8 <_printf_float+0x43c>
 8013682:	2301      	movs	r3, #1
 8013684:	4642      	mov	r2, r8
 8013686:	4631      	mov	r1, r6
 8013688:	4628      	mov	r0, r5
 801368a:	47b8      	blx	r7
 801368c:	3001      	adds	r0, #1
 801368e:	f43f ae74 	beq.w	801337a <_printf_float+0xbe>
 8013692:	ee18 3a10 	vmov	r3, s16
 8013696:	4652      	mov	r2, sl
 8013698:	4631      	mov	r1, r6
 801369a:	4628      	mov	r0, r5
 801369c:	47b8      	blx	r7
 801369e:	3001      	adds	r0, #1
 80136a0:	f43f ae6b 	beq.w	801337a <_printf_float+0xbe>
 80136a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136a8:	2200      	movs	r2, #0
 80136aa:	2300      	movs	r3, #0
 80136ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80136b0:	f7ed fa32 	bl	8000b18 <__aeabi_dcmpeq>
 80136b4:	b9d8      	cbnz	r0, 80136ee <_printf_float+0x432>
 80136b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80136ba:	f108 0201 	add.w	r2, r8, #1
 80136be:	4631      	mov	r1, r6
 80136c0:	4628      	mov	r0, r5
 80136c2:	47b8      	blx	r7
 80136c4:	3001      	adds	r0, #1
 80136c6:	d10e      	bne.n	80136e6 <_printf_float+0x42a>
 80136c8:	e657      	b.n	801337a <_printf_float+0xbe>
 80136ca:	2301      	movs	r3, #1
 80136cc:	4652      	mov	r2, sl
 80136ce:	4631      	mov	r1, r6
 80136d0:	4628      	mov	r0, r5
 80136d2:	47b8      	blx	r7
 80136d4:	3001      	adds	r0, #1
 80136d6:	f43f ae50 	beq.w	801337a <_printf_float+0xbe>
 80136da:	f108 0801 	add.w	r8, r8, #1
 80136de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e0:	3b01      	subs	r3, #1
 80136e2:	4543      	cmp	r3, r8
 80136e4:	dcf1      	bgt.n	80136ca <_printf_float+0x40e>
 80136e6:	464b      	mov	r3, r9
 80136e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80136ec:	e6da      	b.n	80134a4 <_printf_float+0x1e8>
 80136ee:	f04f 0800 	mov.w	r8, #0
 80136f2:	f104 0a1a 	add.w	sl, r4, #26
 80136f6:	e7f2      	b.n	80136de <_printf_float+0x422>
 80136f8:	2301      	movs	r3, #1
 80136fa:	4642      	mov	r2, r8
 80136fc:	e7df      	b.n	80136be <_printf_float+0x402>
 80136fe:	2301      	movs	r3, #1
 8013700:	464a      	mov	r2, r9
 8013702:	4631      	mov	r1, r6
 8013704:	4628      	mov	r0, r5
 8013706:	47b8      	blx	r7
 8013708:	3001      	adds	r0, #1
 801370a:	f43f ae36 	beq.w	801337a <_printf_float+0xbe>
 801370e:	f108 0801 	add.w	r8, r8, #1
 8013712:	68e3      	ldr	r3, [r4, #12]
 8013714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013716:	1a5b      	subs	r3, r3, r1
 8013718:	4543      	cmp	r3, r8
 801371a:	dcf0      	bgt.n	80136fe <_printf_float+0x442>
 801371c:	e6f8      	b.n	8013510 <_printf_float+0x254>
 801371e:	f04f 0800 	mov.w	r8, #0
 8013722:	f104 0919 	add.w	r9, r4, #25
 8013726:	e7f4      	b.n	8013712 <_printf_float+0x456>

08013728 <_printf_common>:
 8013728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801372c:	4616      	mov	r6, r2
 801372e:	4699      	mov	r9, r3
 8013730:	688a      	ldr	r2, [r1, #8]
 8013732:	690b      	ldr	r3, [r1, #16]
 8013734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013738:	4293      	cmp	r3, r2
 801373a:	bfb8      	it	lt
 801373c:	4613      	movlt	r3, r2
 801373e:	6033      	str	r3, [r6, #0]
 8013740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013744:	4607      	mov	r7, r0
 8013746:	460c      	mov	r4, r1
 8013748:	b10a      	cbz	r2, 801374e <_printf_common+0x26>
 801374a:	3301      	adds	r3, #1
 801374c:	6033      	str	r3, [r6, #0]
 801374e:	6823      	ldr	r3, [r4, #0]
 8013750:	0699      	lsls	r1, r3, #26
 8013752:	bf42      	ittt	mi
 8013754:	6833      	ldrmi	r3, [r6, #0]
 8013756:	3302      	addmi	r3, #2
 8013758:	6033      	strmi	r3, [r6, #0]
 801375a:	6825      	ldr	r5, [r4, #0]
 801375c:	f015 0506 	ands.w	r5, r5, #6
 8013760:	d106      	bne.n	8013770 <_printf_common+0x48>
 8013762:	f104 0a19 	add.w	sl, r4, #25
 8013766:	68e3      	ldr	r3, [r4, #12]
 8013768:	6832      	ldr	r2, [r6, #0]
 801376a:	1a9b      	subs	r3, r3, r2
 801376c:	42ab      	cmp	r3, r5
 801376e:	dc26      	bgt.n	80137be <_printf_common+0x96>
 8013770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013774:	1e13      	subs	r3, r2, #0
 8013776:	6822      	ldr	r2, [r4, #0]
 8013778:	bf18      	it	ne
 801377a:	2301      	movne	r3, #1
 801377c:	0692      	lsls	r2, r2, #26
 801377e:	d42b      	bmi.n	80137d8 <_printf_common+0xb0>
 8013780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013784:	4649      	mov	r1, r9
 8013786:	4638      	mov	r0, r7
 8013788:	47c0      	blx	r8
 801378a:	3001      	adds	r0, #1
 801378c:	d01e      	beq.n	80137cc <_printf_common+0xa4>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	6922      	ldr	r2, [r4, #16]
 8013792:	f003 0306 	and.w	r3, r3, #6
 8013796:	2b04      	cmp	r3, #4
 8013798:	bf02      	ittt	eq
 801379a:	68e5      	ldreq	r5, [r4, #12]
 801379c:	6833      	ldreq	r3, [r6, #0]
 801379e:	1aed      	subeq	r5, r5, r3
 80137a0:	68a3      	ldr	r3, [r4, #8]
 80137a2:	bf0c      	ite	eq
 80137a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137a8:	2500      	movne	r5, #0
 80137aa:	4293      	cmp	r3, r2
 80137ac:	bfc4      	itt	gt
 80137ae:	1a9b      	subgt	r3, r3, r2
 80137b0:	18ed      	addgt	r5, r5, r3
 80137b2:	2600      	movs	r6, #0
 80137b4:	341a      	adds	r4, #26
 80137b6:	42b5      	cmp	r5, r6
 80137b8:	d11a      	bne.n	80137f0 <_printf_common+0xc8>
 80137ba:	2000      	movs	r0, #0
 80137bc:	e008      	b.n	80137d0 <_printf_common+0xa8>
 80137be:	2301      	movs	r3, #1
 80137c0:	4652      	mov	r2, sl
 80137c2:	4649      	mov	r1, r9
 80137c4:	4638      	mov	r0, r7
 80137c6:	47c0      	blx	r8
 80137c8:	3001      	adds	r0, #1
 80137ca:	d103      	bne.n	80137d4 <_printf_common+0xac>
 80137cc:	f04f 30ff 	mov.w	r0, #4294967295
 80137d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137d4:	3501      	adds	r5, #1
 80137d6:	e7c6      	b.n	8013766 <_printf_common+0x3e>
 80137d8:	18e1      	adds	r1, r4, r3
 80137da:	1c5a      	adds	r2, r3, #1
 80137dc:	2030      	movs	r0, #48	; 0x30
 80137de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137e2:	4422      	add	r2, r4
 80137e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137ec:	3302      	adds	r3, #2
 80137ee:	e7c7      	b.n	8013780 <_printf_common+0x58>
 80137f0:	2301      	movs	r3, #1
 80137f2:	4622      	mov	r2, r4
 80137f4:	4649      	mov	r1, r9
 80137f6:	4638      	mov	r0, r7
 80137f8:	47c0      	blx	r8
 80137fa:	3001      	adds	r0, #1
 80137fc:	d0e6      	beq.n	80137cc <_printf_common+0xa4>
 80137fe:	3601      	adds	r6, #1
 8013800:	e7d9      	b.n	80137b6 <_printf_common+0x8e>
	...

08013804 <_printf_i>:
 8013804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013808:	7e0f      	ldrb	r7, [r1, #24]
 801380a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801380c:	2f78      	cmp	r7, #120	; 0x78
 801380e:	4691      	mov	r9, r2
 8013810:	4680      	mov	r8, r0
 8013812:	460c      	mov	r4, r1
 8013814:	469a      	mov	sl, r3
 8013816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801381a:	d807      	bhi.n	801382c <_printf_i+0x28>
 801381c:	2f62      	cmp	r7, #98	; 0x62
 801381e:	d80a      	bhi.n	8013836 <_printf_i+0x32>
 8013820:	2f00      	cmp	r7, #0
 8013822:	f000 80d4 	beq.w	80139ce <_printf_i+0x1ca>
 8013826:	2f58      	cmp	r7, #88	; 0x58
 8013828:	f000 80c0 	beq.w	80139ac <_printf_i+0x1a8>
 801382c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013834:	e03a      	b.n	80138ac <_printf_i+0xa8>
 8013836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801383a:	2b15      	cmp	r3, #21
 801383c:	d8f6      	bhi.n	801382c <_printf_i+0x28>
 801383e:	a101      	add	r1, pc, #4	; (adr r1, 8013844 <_printf_i+0x40>)
 8013840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013844:	0801389d 	.word	0x0801389d
 8013848:	080138b1 	.word	0x080138b1
 801384c:	0801382d 	.word	0x0801382d
 8013850:	0801382d 	.word	0x0801382d
 8013854:	0801382d 	.word	0x0801382d
 8013858:	0801382d 	.word	0x0801382d
 801385c:	080138b1 	.word	0x080138b1
 8013860:	0801382d 	.word	0x0801382d
 8013864:	0801382d 	.word	0x0801382d
 8013868:	0801382d 	.word	0x0801382d
 801386c:	0801382d 	.word	0x0801382d
 8013870:	080139b5 	.word	0x080139b5
 8013874:	080138dd 	.word	0x080138dd
 8013878:	0801396f 	.word	0x0801396f
 801387c:	0801382d 	.word	0x0801382d
 8013880:	0801382d 	.word	0x0801382d
 8013884:	080139d7 	.word	0x080139d7
 8013888:	0801382d 	.word	0x0801382d
 801388c:	080138dd 	.word	0x080138dd
 8013890:	0801382d 	.word	0x0801382d
 8013894:	0801382d 	.word	0x0801382d
 8013898:	08013977 	.word	0x08013977
 801389c:	682b      	ldr	r3, [r5, #0]
 801389e:	1d1a      	adds	r2, r3, #4
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	602a      	str	r2, [r5, #0]
 80138a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138ac:	2301      	movs	r3, #1
 80138ae:	e09f      	b.n	80139f0 <_printf_i+0x1ec>
 80138b0:	6820      	ldr	r0, [r4, #0]
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	0607      	lsls	r7, r0, #24
 80138b6:	f103 0104 	add.w	r1, r3, #4
 80138ba:	6029      	str	r1, [r5, #0]
 80138bc:	d501      	bpl.n	80138c2 <_printf_i+0xbe>
 80138be:	681e      	ldr	r6, [r3, #0]
 80138c0:	e003      	b.n	80138ca <_printf_i+0xc6>
 80138c2:	0646      	lsls	r6, r0, #25
 80138c4:	d5fb      	bpl.n	80138be <_printf_i+0xba>
 80138c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80138ca:	2e00      	cmp	r6, #0
 80138cc:	da03      	bge.n	80138d6 <_printf_i+0xd2>
 80138ce:	232d      	movs	r3, #45	; 0x2d
 80138d0:	4276      	negs	r6, r6
 80138d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138d6:	485a      	ldr	r0, [pc, #360]	; (8013a40 <_printf_i+0x23c>)
 80138d8:	230a      	movs	r3, #10
 80138da:	e012      	b.n	8013902 <_printf_i+0xfe>
 80138dc:	682b      	ldr	r3, [r5, #0]
 80138de:	6820      	ldr	r0, [r4, #0]
 80138e0:	1d19      	adds	r1, r3, #4
 80138e2:	6029      	str	r1, [r5, #0]
 80138e4:	0605      	lsls	r5, r0, #24
 80138e6:	d501      	bpl.n	80138ec <_printf_i+0xe8>
 80138e8:	681e      	ldr	r6, [r3, #0]
 80138ea:	e002      	b.n	80138f2 <_printf_i+0xee>
 80138ec:	0641      	lsls	r1, r0, #25
 80138ee:	d5fb      	bpl.n	80138e8 <_printf_i+0xe4>
 80138f0:	881e      	ldrh	r6, [r3, #0]
 80138f2:	4853      	ldr	r0, [pc, #332]	; (8013a40 <_printf_i+0x23c>)
 80138f4:	2f6f      	cmp	r7, #111	; 0x6f
 80138f6:	bf0c      	ite	eq
 80138f8:	2308      	moveq	r3, #8
 80138fa:	230a      	movne	r3, #10
 80138fc:	2100      	movs	r1, #0
 80138fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013902:	6865      	ldr	r5, [r4, #4]
 8013904:	60a5      	str	r5, [r4, #8]
 8013906:	2d00      	cmp	r5, #0
 8013908:	bfa2      	ittt	ge
 801390a:	6821      	ldrge	r1, [r4, #0]
 801390c:	f021 0104 	bicge.w	r1, r1, #4
 8013910:	6021      	strge	r1, [r4, #0]
 8013912:	b90e      	cbnz	r6, 8013918 <_printf_i+0x114>
 8013914:	2d00      	cmp	r5, #0
 8013916:	d04b      	beq.n	80139b0 <_printf_i+0x1ac>
 8013918:	4615      	mov	r5, r2
 801391a:	fbb6 f1f3 	udiv	r1, r6, r3
 801391e:	fb03 6711 	mls	r7, r3, r1, r6
 8013922:	5dc7      	ldrb	r7, [r0, r7]
 8013924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013928:	4637      	mov	r7, r6
 801392a:	42bb      	cmp	r3, r7
 801392c:	460e      	mov	r6, r1
 801392e:	d9f4      	bls.n	801391a <_printf_i+0x116>
 8013930:	2b08      	cmp	r3, #8
 8013932:	d10b      	bne.n	801394c <_printf_i+0x148>
 8013934:	6823      	ldr	r3, [r4, #0]
 8013936:	07de      	lsls	r6, r3, #31
 8013938:	d508      	bpl.n	801394c <_printf_i+0x148>
 801393a:	6923      	ldr	r3, [r4, #16]
 801393c:	6861      	ldr	r1, [r4, #4]
 801393e:	4299      	cmp	r1, r3
 8013940:	bfde      	ittt	le
 8013942:	2330      	movle	r3, #48	; 0x30
 8013944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013948:	f105 35ff 	addle.w	r5, r5, #4294967295
 801394c:	1b52      	subs	r2, r2, r5
 801394e:	6122      	str	r2, [r4, #16]
 8013950:	f8cd a000 	str.w	sl, [sp]
 8013954:	464b      	mov	r3, r9
 8013956:	aa03      	add	r2, sp, #12
 8013958:	4621      	mov	r1, r4
 801395a:	4640      	mov	r0, r8
 801395c:	f7ff fee4 	bl	8013728 <_printf_common>
 8013960:	3001      	adds	r0, #1
 8013962:	d14a      	bne.n	80139fa <_printf_i+0x1f6>
 8013964:	f04f 30ff 	mov.w	r0, #4294967295
 8013968:	b004      	add	sp, #16
 801396a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801396e:	6823      	ldr	r3, [r4, #0]
 8013970:	f043 0320 	orr.w	r3, r3, #32
 8013974:	6023      	str	r3, [r4, #0]
 8013976:	4833      	ldr	r0, [pc, #204]	; (8013a44 <_printf_i+0x240>)
 8013978:	2778      	movs	r7, #120	; 0x78
 801397a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801397e:	6823      	ldr	r3, [r4, #0]
 8013980:	6829      	ldr	r1, [r5, #0]
 8013982:	061f      	lsls	r7, r3, #24
 8013984:	f851 6b04 	ldr.w	r6, [r1], #4
 8013988:	d402      	bmi.n	8013990 <_printf_i+0x18c>
 801398a:	065f      	lsls	r7, r3, #25
 801398c:	bf48      	it	mi
 801398e:	b2b6      	uxthmi	r6, r6
 8013990:	07df      	lsls	r7, r3, #31
 8013992:	bf48      	it	mi
 8013994:	f043 0320 	orrmi.w	r3, r3, #32
 8013998:	6029      	str	r1, [r5, #0]
 801399a:	bf48      	it	mi
 801399c:	6023      	strmi	r3, [r4, #0]
 801399e:	b91e      	cbnz	r6, 80139a8 <_printf_i+0x1a4>
 80139a0:	6823      	ldr	r3, [r4, #0]
 80139a2:	f023 0320 	bic.w	r3, r3, #32
 80139a6:	6023      	str	r3, [r4, #0]
 80139a8:	2310      	movs	r3, #16
 80139aa:	e7a7      	b.n	80138fc <_printf_i+0xf8>
 80139ac:	4824      	ldr	r0, [pc, #144]	; (8013a40 <_printf_i+0x23c>)
 80139ae:	e7e4      	b.n	801397a <_printf_i+0x176>
 80139b0:	4615      	mov	r5, r2
 80139b2:	e7bd      	b.n	8013930 <_printf_i+0x12c>
 80139b4:	682b      	ldr	r3, [r5, #0]
 80139b6:	6826      	ldr	r6, [r4, #0]
 80139b8:	6961      	ldr	r1, [r4, #20]
 80139ba:	1d18      	adds	r0, r3, #4
 80139bc:	6028      	str	r0, [r5, #0]
 80139be:	0635      	lsls	r5, r6, #24
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	d501      	bpl.n	80139c8 <_printf_i+0x1c4>
 80139c4:	6019      	str	r1, [r3, #0]
 80139c6:	e002      	b.n	80139ce <_printf_i+0x1ca>
 80139c8:	0670      	lsls	r0, r6, #25
 80139ca:	d5fb      	bpl.n	80139c4 <_printf_i+0x1c0>
 80139cc:	8019      	strh	r1, [r3, #0]
 80139ce:	2300      	movs	r3, #0
 80139d0:	6123      	str	r3, [r4, #16]
 80139d2:	4615      	mov	r5, r2
 80139d4:	e7bc      	b.n	8013950 <_printf_i+0x14c>
 80139d6:	682b      	ldr	r3, [r5, #0]
 80139d8:	1d1a      	adds	r2, r3, #4
 80139da:	602a      	str	r2, [r5, #0]
 80139dc:	681d      	ldr	r5, [r3, #0]
 80139de:	6862      	ldr	r2, [r4, #4]
 80139e0:	2100      	movs	r1, #0
 80139e2:	4628      	mov	r0, r5
 80139e4:	f7ec fc1c 	bl	8000220 <memchr>
 80139e8:	b108      	cbz	r0, 80139ee <_printf_i+0x1ea>
 80139ea:	1b40      	subs	r0, r0, r5
 80139ec:	6060      	str	r0, [r4, #4]
 80139ee:	6863      	ldr	r3, [r4, #4]
 80139f0:	6123      	str	r3, [r4, #16]
 80139f2:	2300      	movs	r3, #0
 80139f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139f8:	e7aa      	b.n	8013950 <_printf_i+0x14c>
 80139fa:	6923      	ldr	r3, [r4, #16]
 80139fc:	462a      	mov	r2, r5
 80139fe:	4649      	mov	r1, r9
 8013a00:	4640      	mov	r0, r8
 8013a02:	47d0      	blx	sl
 8013a04:	3001      	adds	r0, #1
 8013a06:	d0ad      	beq.n	8013964 <_printf_i+0x160>
 8013a08:	6823      	ldr	r3, [r4, #0]
 8013a0a:	079b      	lsls	r3, r3, #30
 8013a0c:	d413      	bmi.n	8013a36 <_printf_i+0x232>
 8013a0e:	68e0      	ldr	r0, [r4, #12]
 8013a10:	9b03      	ldr	r3, [sp, #12]
 8013a12:	4298      	cmp	r0, r3
 8013a14:	bfb8      	it	lt
 8013a16:	4618      	movlt	r0, r3
 8013a18:	e7a6      	b.n	8013968 <_printf_i+0x164>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	4632      	mov	r2, r6
 8013a1e:	4649      	mov	r1, r9
 8013a20:	4640      	mov	r0, r8
 8013a22:	47d0      	blx	sl
 8013a24:	3001      	adds	r0, #1
 8013a26:	d09d      	beq.n	8013964 <_printf_i+0x160>
 8013a28:	3501      	adds	r5, #1
 8013a2a:	68e3      	ldr	r3, [r4, #12]
 8013a2c:	9903      	ldr	r1, [sp, #12]
 8013a2e:	1a5b      	subs	r3, r3, r1
 8013a30:	42ab      	cmp	r3, r5
 8013a32:	dcf2      	bgt.n	8013a1a <_printf_i+0x216>
 8013a34:	e7eb      	b.n	8013a0e <_printf_i+0x20a>
 8013a36:	2500      	movs	r5, #0
 8013a38:	f104 0619 	add.w	r6, r4, #25
 8013a3c:	e7f5      	b.n	8013a2a <_printf_i+0x226>
 8013a3e:	bf00      	nop
 8013a40:	080189a6 	.word	0x080189a6
 8013a44:	080189b7 	.word	0x080189b7

08013a48 <_scanf_float>:
 8013a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a4c:	b087      	sub	sp, #28
 8013a4e:	4617      	mov	r7, r2
 8013a50:	9303      	str	r3, [sp, #12]
 8013a52:	688b      	ldr	r3, [r1, #8]
 8013a54:	1e5a      	subs	r2, r3, #1
 8013a56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013a5a:	bf83      	ittte	hi
 8013a5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013a60:	195b      	addhi	r3, r3, r5
 8013a62:	9302      	strhi	r3, [sp, #8]
 8013a64:	2300      	movls	r3, #0
 8013a66:	bf86      	itte	hi
 8013a68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013a6c:	608b      	strhi	r3, [r1, #8]
 8013a6e:	9302      	strls	r3, [sp, #8]
 8013a70:	680b      	ldr	r3, [r1, #0]
 8013a72:	468b      	mov	fp, r1
 8013a74:	2500      	movs	r5, #0
 8013a76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013a7a:	f84b 3b1c 	str.w	r3, [fp], #28
 8013a7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013a82:	4680      	mov	r8, r0
 8013a84:	460c      	mov	r4, r1
 8013a86:	465e      	mov	r6, fp
 8013a88:	46aa      	mov	sl, r5
 8013a8a:	46a9      	mov	r9, r5
 8013a8c:	9501      	str	r5, [sp, #4]
 8013a8e:	68a2      	ldr	r2, [r4, #8]
 8013a90:	b152      	cbz	r2, 8013aa8 <_scanf_float+0x60>
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	2b4e      	cmp	r3, #78	; 0x4e
 8013a98:	d864      	bhi.n	8013b64 <_scanf_float+0x11c>
 8013a9a:	2b40      	cmp	r3, #64	; 0x40
 8013a9c:	d83c      	bhi.n	8013b18 <_scanf_float+0xd0>
 8013a9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013aa2:	b2c8      	uxtb	r0, r1
 8013aa4:	280e      	cmp	r0, #14
 8013aa6:	d93a      	bls.n	8013b1e <_scanf_float+0xd6>
 8013aa8:	f1b9 0f00 	cmp.w	r9, #0
 8013aac:	d003      	beq.n	8013ab6 <_scanf_float+0x6e>
 8013aae:	6823      	ldr	r3, [r4, #0]
 8013ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013ab4:	6023      	str	r3, [r4, #0]
 8013ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013aba:	f1ba 0f01 	cmp.w	sl, #1
 8013abe:	f200 8113 	bhi.w	8013ce8 <_scanf_float+0x2a0>
 8013ac2:	455e      	cmp	r6, fp
 8013ac4:	f200 8105 	bhi.w	8013cd2 <_scanf_float+0x28a>
 8013ac8:	2501      	movs	r5, #1
 8013aca:	4628      	mov	r0, r5
 8013acc:	b007      	add	sp, #28
 8013ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013ad6:	2a0d      	cmp	r2, #13
 8013ad8:	d8e6      	bhi.n	8013aa8 <_scanf_float+0x60>
 8013ada:	a101      	add	r1, pc, #4	; (adr r1, 8013ae0 <_scanf_float+0x98>)
 8013adc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013ae0:	08013c1f 	.word	0x08013c1f
 8013ae4:	08013aa9 	.word	0x08013aa9
 8013ae8:	08013aa9 	.word	0x08013aa9
 8013aec:	08013aa9 	.word	0x08013aa9
 8013af0:	08013c7f 	.word	0x08013c7f
 8013af4:	08013c57 	.word	0x08013c57
 8013af8:	08013aa9 	.word	0x08013aa9
 8013afc:	08013aa9 	.word	0x08013aa9
 8013b00:	08013c2d 	.word	0x08013c2d
 8013b04:	08013aa9 	.word	0x08013aa9
 8013b08:	08013aa9 	.word	0x08013aa9
 8013b0c:	08013aa9 	.word	0x08013aa9
 8013b10:	08013aa9 	.word	0x08013aa9
 8013b14:	08013be5 	.word	0x08013be5
 8013b18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013b1c:	e7db      	b.n	8013ad6 <_scanf_float+0x8e>
 8013b1e:	290e      	cmp	r1, #14
 8013b20:	d8c2      	bhi.n	8013aa8 <_scanf_float+0x60>
 8013b22:	a001      	add	r0, pc, #4	; (adr r0, 8013b28 <_scanf_float+0xe0>)
 8013b24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013b28:	08013bd7 	.word	0x08013bd7
 8013b2c:	08013aa9 	.word	0x08013aa9
 8013b30:	08013bd7 	.word	0x08013bd7
 8013b34:	08013c6b 	.word	0x08013c6b
 8013b38:	08013aa9 	.word	0x08013aa9
 8013b3c:	08013b85 	.word	0x08013b85
 8013b40:	08013bc1 	.word	0x08013bc1
 8013b44:	08013bc1 	.word	0x08013bc1
 8013b48:	08013bc1 	.word	0x08013bc1
 8013b4c:	08013bc1 	.word	0x08013bc1
 8013b50:	08013bc1 	.word	0x08013bc1
 8013b54:	08013bc1 	.word	0x08013bc1
 8013b58:	08013bc1 	.word	0x08013bc1
 8013b5c:	08013bc1 	.word	0x08013bc1
 8013b60:	08013bc1 	.word	0x08013bc1
 8013b64:	2b6e      	cmp	r3, #110	; 0x6e
 8013b66:	d809      	bhi.n	8013b7c <_scanf_float+0x134>
 8013b68:	2b60      	cmp	r3, #96	; 0x60
 8013b6a:	d8b2      	bhi.n	8013ad2 <_scanf_float+0x8a>
 8013b6c:	2b54      	cmp	r3, #84	; 0x54
 8013b6e:	d077      	beq.n	8013c60 <_scanf_float+0x218>
 8013b70:	2b59      	cmp	r3, #89	; 0x59
 8013b72:	d199      	bne.n	8013aa8 <_scanf_float+0x60>
 8013b74:	2d07      	cmp	r5, #7
 8013b76:	d197      	bne.n	8013aa8 <_scanf_float+0x60>
 8013b78:	2508      	movs	r5, #8
 8013b7a:	e029      	b.n	8013bd0 <_scanf_float+0x188>
 8013b7c:	2b74      	cmp	r3, #116	; 0x74
 8013b7e:	d06f      	beq.n	8013c60 <_scanf_float+0x218>
 8013b80:	2b79      	cmp	r3, #121	; 0x79
 8013b82:	e7f6      	b.n	8013b72 <_scanf_float+0x12a>
 8013b84:	6821      	ldr	r1, [r4, #0]
 8013b86:	05c8      	lsls	r0, r1, #23
 8013b88:	d51a      	bpl.n	8013bc0 <_scanf_float+0x178>
 8013b8a:	9b02      	ldr	r3, [sp, #8]
 8013b8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013b90:	6021      	str	r1, [r4, #0]
 8013b92:	f109 0901 	add.w	r9, r9, #1
 8013b96:	b11b      	cbz	r3, 8013ba0 <_scanf_float+0x158>
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	3201      	adds	r2, #1
 8013b9c:	9302      	str	r3, [sp, #8]
 8013b9e:	60a2      	str	r2, [r4, #8]
 8013ba0:	68a3      	ldr	r3, [r4, #8]
 8013ba2:	3b01      	subs	r3, #1
 8013ba4:	60a3      	str	r3, [r4, #8]
 8013ba6:	6923      	ldr	r3, [r4, #16]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	6123      	str	r3, [r4, #16]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	3b01      	subs	r3, #1
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	607b      	str	r3, [r7, #4]
 8013bb4:	f340 8084 	ble.w	8013cc0 <_scanf_float+0x278>
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	3301      	adds	r3, #1
 8013bbc:	603b      	str	r3, [r7, #0]
 8013bbe:	e766      	b.n	8013a8e <_scanf_float+0x46>
 8013bc0:	eb1a 0f05 	cmn.w	sl, r5
 8013bc4:	f47f af70 	bne.w	8013aa8 <_scanf_float+0x60>
 8013bc8:	6822      	ldr	r2, [r4, #0]
 8013bca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013bce:	6022      	str	r2, [r4, #0]
 8013bd0:	f806 3b01 	strb.w	r3, [r6], #1
 8013bd4:	e7e4      	b.n	8013ba0 <_scanf_float+0x158>
 8013bd6:	6822      	ldr	r2, [r4, #0]
 8013bd8:	0610      	lsls	r0, r2, #24
 8013bda:	f57f af65 	bpl.w	8013aa8 <_scanf_float+0x60>
 8013bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013be2:	e7f4      	b.n	8013bce <_scanf_float+0x186>
 8013be4:	f1ba 0f00 	cmp.w	sl, #0
 8013be8:	d10e      	bne.n	8013c08 <_scanf_float+0x1c0>
 8013bea:	f1b9 0f00 	cmp.w	r9, #0
 8013bee:	d10e      	bne.n	8013c0e <_scanf_float+0x1c6>
 8013bf0:	6822      	ldr	r2, [r4, #0]
 8013bf2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013bf6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013bfa:	d108      	bne.n	8013c0e <_scanf_float+0x1c6>
 8013bfc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013c00:	6022      	str	r2, [r4, #0]
 8013c02:	f04f 0a01 	mov.w	sl, #1
 8013c06:	e7e3      	b.n	8013bd0 <_scanf_float+0x188>
 8013c08:	f1ba 0f02 	cmp.w	sl, #2
 8013c0c:	d055      	beq.n	8013cba <_scanf_float+0x272>
 8013c0e:	2d01      	cmp	r5, #1
 8013c10:	d002      	beq.n	8013c18 <_scanf_float+0x1d0>
 8013c12:	2d04      	cmp	r5, #4
 8013c14:	f47f af48 	bne.w	8013aa8 <_scanf_float+0x60>
 8013c18:	3501      	adds	r5, #1
 8013c1a:	b2ed      	uxtb	r5, r5
 8013c1c:	e7d8      	b.n	8013bd0 <_scanf_float+0x188>
 8013c1e:	f1ba 0f01 	cmp.w	sl, #1
 8013c22:	f47f af41 	bne.w	8013aa8 <_scanf_float+0x60>
 8013c26:	f04f 0a02 	mov.w	sl, #2
 8013c2a:	e7d1      	b.n	8013bd0 <_scanf_float+0x188>
 8013c2c:	b97d      	cbnz	r5, 8013c4e <_scanf_float+0x206>
 8013c2e:	f1b9 0f00 	cmp.w	r9, #0
 8013c32:	f47f af3c 	bne.w	8013aae <_scanf_float+0x66>
 8013c36:	6822      	ldr	r2, [r4, #0]
 8013c38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013c3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013c40:	f47f af39 	bne.w	8013ab6 <_scanf_float+0x6e>
 8013c44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013c48:	6022      	str	r2, [r4, #0]
 8013c4a:	2501      	movs	r5, #1
 8013c4c:	e7c0      	b.n	8013bd0 <_scanf_float+0x188>
 8013c4e:	2d03      	cmp	r5, #3
 8013c50:	d0e2      	beq.n	8013c18 <_scanf_float+0x1d0>
 8013c52:	2d05      	cmp	r5, #5
 8013c54:	e7de      	b.n	8013c14 <_scanf_float+0x1cc>
 8013c56:	2d02      	cmp	r5, #2
 8013c58:	f47f af26 	bne.w	8013aa8 <_scanf_float+0x60>
 8013c5c:	2503      	movs	r5, #3
 8013c5e:	e7b7      	b.n	8013bd0 <_scanf_float+0x188>
 8013c60:	2d06      	cmp	r5, #6
 8013c62:	f47f af21 	bne.w	8013aa8 <_scanf_float+0x60>
 8013c66:	2507      	movs	r5, #7
 8013c68:	e7b2      	b.n	8013bd0 <_scanf_float+0x188>
 8013c6a:	6822      	ldr	r2, [r4, #0]
 8013c6c:	0591      	lsls	r1, r2, #22
 8013c6e:	f57f af1b 	bpl.w	8013aa8 <_scanf_float+0x60>
 8013c72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013c76:	6022      	str	r2, [r4, #0]
 8013c78:	f8cd 9004 	str.w	r9, [sp, #4]
 8013c7c:	e7a8      	b.n	8013bd0 <_scanf_float+0x188>
 8013c7e:	6822      	ldr	r2, [r4, #0]
 8013c80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013c84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013c88:	d006      	beq.n	8013c98 <_scanf_float+0x250>
 8013c8a:	0550      	lsls	r0, r2, #21
 8013c8c:	f57f af0c 	bpl.w	8013aa8 <_scanf_float+0x60>
 8013c90:	f1b9 0f00 	cmp.w	r9, #0
 8013c94:	f43f af0f 	beq.w	8013ab6 <_scanf_float+0x6e>
 8013c98:	0591      	lsls	r1, r2, #22
 8013c9a:	bf58      	it	pl
 8013c9c:	9901      	ldrpl	r1, [sp, #4]
 8013c9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013ca2:	bf58      	it	pl
 8013ca4:	eba9 0101 	subpl.w	r1, r9, r1
 8013ca8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013cac:	bf58      	it	pl
 8013cae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013cb2:	6022      	str	r2, [r4, #0]
 8013cb4:	f04f 0900 	mov.w	r9, #0
 8013cb8:	e78a      	b.n	8013bd0 <_scanf_float+0x188>
 8013cba:	f04f 0a03 	mov.w	sl, #3
 8013cbe:	e787      	b.n	8013bd0 <_scanf_float+0x188>
 8013cc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013cc4:	4639      	mov	r1, r7
 8013cc6:	4640      	mov	r0, r8
 8013cc8:	4798      	blx	r3
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	f43f aedf 	beq.w	8013a8e <_scanf_float+0x46>
 8013cd0:	e6ea      	b.n	8013aa8 <_scanf_float+0x60>
 8013cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013cda:	463a      	mov	r2, r7
 8013cdc:	4640      	mov	r0, r8
 8013cde:	4798      	blx	r3
 8013ce0:	6923      	ldr	r3, [r4, #16]
 8013ce2:	3b01      	subs	r3, #1
 8013ce4:	6123      	str	r3, [r4, #16]
 8013ce6:	e6ec      	b.n	8013ac2 <_scanf_float+0x7a>
 8013ce8:	1e6b      	subs	r3, r5, #1
 8013cea:	2b06      	cmp	r3, #6
 8013cec:	d825      	bhi.n	8013d3a <_scanf_float+0x2f2>
 8013cee:	2d02      	cmp	r5, #2
 8013cf0:	d836      	bhi.n	8013d60 <_scanf_float+0x318>
 8013cf2:	455e      	cmp	r6, fp
 8013cf4:	f67f aee8 	bls.w	8013ac8 <_scanf_float+0x80>
 8013cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013d00:	463a      	mov	r2, r7
 8013d02:	4640      	mov	r0, r8
 8013d04:	4798      	blx	r3
 8013d06:	6923      	ldr	r3, [r4, #16]
 8013d08:	3b01      	subs	r3, #1
 8013d0a:	6123      	str	r3, [r4, #16]
 8013d0c:	e7f1      	b.n	8013cf2 <_scanf_float+0x2aa>
 8013d0e:	9802      	ldr	r0, [sp, #8]
 8013d10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013d18:	9002      	str	r0, [sp, #8]
 8013d1a:	463a      	mov	r2, r7
 8013d1c:	4640      	mov	r0, r8
 8013d1e:	4798      	blx	r3
 8013d20:	6923      	ldr	r3, [r4, #16]
 8013d22:	3b01      	subs	r3, #1
 8013d24:	6123      	str	r3, [r4, #16]
 8013d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d2a:	fa5f fa8a 	uxtb.w	sl, sl
 8013d2e:	f1ba 0f02 	cmp.w	sl, #2
 8013d32:	d1ec      	bne.n	8013d0e <_scanf_float+0x2c6>
 8013d34:	3d03      	subs	r5, #3
 8013d36:	b2ed      	uxtb	r5, r5
 8013d38:	1b76      	subs	r6, r6, r5
 8013d3a:	6823      	ldr	r3, [r4, #0]
 8013d3c:	05da      	lsls	r2, r3, #23
 8013d3e:	d52f      	bpl.n	8013da0 <_scanf_float+0x358>
 8013d40:	055b      	lsls	r3, r3, #21
 8013d42:	d510      	bpl.n	8013d66 <_scanf_float+0x31e>
 8013d44:	455e      	cmp	r6, fp
 8013d46:	f67f aebf 	bls.w	8013ac8 <_scanf_float+0x80>
 8013d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013d52:	463a      	mov	r2, r7
 8013d54:	4640      	mov	r0, r8
 8013d56:	4798      	blx	r3
 8013d58:	6923      	ldr	r3, [r4, #16]
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	6123      	str	r3, [r4, #16]
 8013d5e:	e7f1      	b.n	8013d44 <_scanf_float+0x2fc>
 8013d60:	46aa      	mov	sl, r5
 8013d62:	9602      	str	r6, [sp, #8]
 8013d64:	e7df      	b.n	8013d26 <_scanf_float+0x2de>
 8013d66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	2965      	cmp	r1, #101	; 0x65
 8013d6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013d72:	f106 35ff 	add.w	r5, r6, #4294967295
 8013d76:	6123      	str	r3, [r4, #16]
 8013d78:	d00c      	beq.n	8013d94 <_scanf_float+0x34c>
 8013d7a:	2945      	cmp	r1, #69	; 0x45
 8013d7c:	d00a      	beq.n	8013d94 <_scanf_float+0x34c>
 8013d7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d82:	463a      	mov	r2, r7
 8013d84:	4640      	mov	r0, r8
 8013d86:	4798      	blx	r3
 8013d88:	6923      	ldr	r3, [r4, #16]
 8013d8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013d8e:	3b01      	subs	r3, #1
 8013d90:	1eb5      	subs	r5, r6, #2
 8013d92:	6123      	str	r3, [r4, #16]
 8013d94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d98:	463a      	mov	r2, r7
 8013d9a:	4640      	mov	r0, r8
 8013d9c:	4798      	blx	r3
 8013d9e:	462e      	mov	r6, r5
 8013da0:	6825      	ldr	r5, [r4, #0]
 8013da2:	f015 0510 	ands.w	r5, r5, #16
 8013da6:	d158      	bne.n	8013e5a <_scanf_float+0x412>
 8013da8:	7035      	strb	r5, [r6, #0]
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013db4:	d11c      	bne.n	8013df0 <_scanf_float+0x3a8>
 8013db6:	9b01      	ldr	r3, [sp, #4]
 8013db8:	454b      	cmp	r3, r9
 8013dba:	eba3 0209 	sub.w	r2, r3, r9
 8013dbe:	d124      	bne.n	8013e0a <_scanf_float+0x3c2>
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	4659      	mov	r1, fp
 8013dc4:	4640      	mov	r0, r8
 8013dc6:	f002 fc2b 	bl	8016620 <_strtod_r>
 8013dca:	9b03      	ldr	r3, [sp, #12]
 8013dcc:	6821      	ldr	r1, [r4, #0]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	f011 0f02 	tst.w	r1, #2
 8013dd4:	ec57 6b10 	vmov	r6, r7, d0
 8013dd8:	f103 0204 	add.w	r2, r3, #4
 8013ddc:	d020      	beq.n	8013e20 <_scanf_float+0x3d8>
 8013dde:	9903      	ldr	r1, [sp, #12]
 8013de0:	600a      	str	r2, [r1, #0]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	e9c3 6700 	strd	r6, r7, [r3]
 8013de8:	68e3      	ldr	r3, [r4, #12]
 8013dea:	3301      	adds	r3, #1
 8013dec:	60e3      	str	r3, [r4, #12]
 8013dee:	e66c      	b.n	8013aca <_scanf_float+0x82>
 8013df0:	9b04      	ldr	r3, [sp, #16]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d0e4      	beq.n	8013dc0 <_scanf_float+0x378>
 8013df6:	9905      	ldr	r1, [sp, #20]
 8013df8:	230a      	movs	r3, #10
 8013dfa:	462a      	mov	r2, r5
 8013dfc:	3101      	adds	r1, #1
 8013dfe:	4640      	mov	r0, r8
 8013e00:	f002 fc96 	bl	8016730 <_strtol_r>
 8013e04:	9b04      	ldr	r3, [sp, #16]
 8013e06:	9e05      	ldr	r6, [sp, #20]
 8013e08:	1ac2      	subs	r2, r0, r3
 8013e0a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013e0e:	429e      	cmp	r6, r3
 8013e10:	bf28      	it	cs
 8013e12:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013e16:	4912      	ldr	r1, [pc, #72]	; (8013e60 <_scanf_float+0x418>)
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f000 f8f9 	bl	8014010 <siprintf>
 8013e1e:	e7cf      	b.n	8013dc0 <_scanf_float+0x378>
 8013e20:	f011 0f04 	tst.w	r1, #4
 8013e24:	9903      	ldr	r1, [sp, #12]
 8013e26:	600a      	str	r2, [r1, #0]
 8013e28:	d1db      	bne.n	8013de2 <_scanf_float+0x39a>
 8013e2a:	f8d3 8000 	ldr.w	r8, [r3]
 8013e2e:	ee10 2a10 	vmov	r2, s0
 8013e32:	ee10 0a10 	vmov	r0, s0
 8013e36:	463b      	mov	r3, r7
 8013e38:	4639      	mov	r1, r7
 8013e3a:	f7ec fe9f 	bl	8000b7c <__aeabi_dcmpun>
 8013e3e:	b128      	cbz	r0, 8013e4c <_scanf_float+0x404>
 8013e40:	4808      	ldr	r0, [pc, #32]	; (8013e64 <_scanf_float+0x41c>)
 8013e42:	f000 fa67 	bl	8014314 <nanf>
 8013e46:	ed88 0a00 	vstr	s0, [r8]
 8013e4a:	e7cd      	b.n	8013de8 <_scanf_float+0x3a0>
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	4639      	mov	r1, r7
 8013e50:	f7ec fef2 	bl	8000c38 <__aeabi_d2f>
 8013e54:	f8c8 0000 	str.w	r0, [r8]
 8013e58:	e7c6      	b.n	8013de8 <_scanf_float+0x3a0>
 8013e5a:	2500      	movs	r5, #0
 8013e5c:	e635      	b.n	8013aca <_scanf_float+0x82>
 8013e5e:	bf00      	nop
 8013e60:	080189c8 	.word	0x080189c8
 8013e64:	08018993 	.word	0x08018993

08013e68 <std>:
 8013e68:	2300      	movs	r3, #0
 8013e6a:	b510      	push	{r4, lr}
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8013e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e76:	6083      	str	r3, [r0, #8]
 8013e78:	8181      	strh	r1, [r0, #12]
 8013e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8013e7c:	81c2      	strh	r2, [r0, #14]
 8013e7e:	6183      	str	r3, [r0, #24]
 8013e80:	4619      	mov	r1, r3
 8013e82:	2208      	movs	r2, #8
 8013e84:	305c      	adds	r0, #92	; 0x5c
 8013e86:	f000 f950 	bl	801412a <memset>
 8013e8a:	4b0d      	ldr	r3, [pc, #52]	; (8013ec0 <std+0x58>)
 8013e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8013e8e:	4b0d      	ldr	r3, [pc, #52]	; (8013ec4 <std+0x5c>)
 8013e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e92:	4b0d      	ldr	r3, [pc, #52]	; (8013ec8 <std+0x60>)
 8013e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e96:	4b0d      	ldr	r3, [pc, #52]	; (8013ecc <std+0x64>)
 8013e98:	6323      	str	r3, [r4, #48]	; 0x30
 8013e9a:	4b0d      	ldr	r3, [pc, #52]	; (8013ed0 <std+0x68>)
 8013e9c:	6224      	str	r4, [r4, #32]
 8013e9e:	429c      	cmp	r4, r3
 8013ea0:	d006      	beq.n	8013eb0 <std+0x48>
 8013ea2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013ea6:	4294      	cmp	r4, r2
 8013ea8:	d002      	beq.n	8013eb0 <std+0x48>
 8013eaa:	33d0      	adds	r3, #208	; 0xd0
 8013eac:	429c      	cmp	r4, r3
 8013eae:	d105      	bne.n	8013ebc <std+0x54>
 8013eb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eb8:	f000 ba1a 	b.w	80142f0 <__retarget_lock_init_recursive>
 8013ebc:	bd10      	pop	{r4, pc}
 8013ebe:	bf00      	nop
 8013ec0:	08014051 	.word	0x08014051
 8013ec4:	08014073 	.word	0x08014073
 8013ec8:	080140ab 	.word	0x080140ab
 8013ecc:	080140cf 	.word	0x080140cf
 8013ed0:	200009a0 	.word	0x200009a0

08013ed4 <stdio_exit_handler>:
 8013ed4:	4a02      	ldr	r2, [pc, #8]	; (8013ee0 <stdio_exit_handler+0xc>)
 8013ed6:	4903      	ldr	r1, [pc, #12]	; (8013ee4 <stdio_exit_handler+0x10>)
 8013ed8:	4803      	ldr	r0, [pc, #12]	; (8013ee8 <stdio_exit_handler+0x14>)
 8013eda:	f000 b87b 	b.w	8013fd4 <_fwalk_sglue>
 8013ede:	bf00      	nop
 8013ee0:	2000007c 	.word	0x2000007c
 8013ee4:	08016d79 	.word	0x08016d79
 8013ee8:	20000088 	.word	0x20000088

08013eec <cleanup_stdio>:
 8013eec:	6841      	ldr	r1, [r0, #4]
 8013eee:	4b0c      	ldr	r3, [pc, #48]	; (8013f20 <cleanup_stdio+0x34>)
 8013ef0:	4299      	cmp	r1, r3
 8013ef2:	b510      	push	{r4, lr}
 8013ef4:	4604      	mov	r4, r0
 8013ef6:	d001      	beq.n	8013efc <cleanup_stdio+0x10>
 8013ef8:	f002 ff3e 	bl	8016d78 <_fflush_r>
 8013efc:	68a1      	ldr	r1, [r4, #8]
 8013efe:	4b09      	ldr	r3, [pc, #36]	; (8013f24 <cleanup_stdio+0x38>)
 8013f00:	4299      	cmp	r1, r3
 8013f02:	d002      	beq.n	8013f0a <cleanup_stdio+0x1e>
 8013f04:	4620      	mov	r0, r4
 8013f06:	f002 ff37 	bl	8016d78 <_fflush_r>
 8013f0a:	68e1      	ldr	r1, [r4, #12]
 8013f0c:	4b06      	ldr	r3, [pc, #24]	; (8013f28 <cleanup_stdio+0x3c>)
 8013f0e:	4299      	cmp	r1, r3
 8013f10:	d004      	beq.n	8013f1c <cleanup_stdio+0x30>
 8013f12:	4620      	mov	r0, r4
 8013f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f18:	f002 bf2e 	b.w	8016d78 <_fflush_r>
 8013f1c:	bd10      	pop	{r4, pc}
 8013f1e:	bf00      	nop
 8013f20:	200009a0 	.word	0x200009a0
 8013f24:	20000a08 	.word	0x20000a08
 8013f28:	20000a70 	.word	0x20000a70

08013f2c <global_stdio_init.part.0>:
 8013f2c:	b510      	push	{r4, lr}
 8013f2e:	4b0b      	ldr	r3, [pc, #44]	; (8013f5c <global_stdio_init.part.0+0x30>)
 8013f30:	4c0b      	ldr	r4, [pc, #44]	; (8013f60 <global_stdio_init.part.0+0x34>)
 8013f32:	4a0c      	ldr	r2, [pc, #48]	; (8013f64 <global_stdio_init.part.0+0x38>)
 8013f34:	601a      	str	r2, [r3, #0]
 8013f36:	4620      	mov	r0, r4
 8013f38:	2200      	movs	r2, #0
 8013f3a:	2104      	movs	r1, #4
 8013f3c:	f7ff ff94 	bl	8013e68 <std>
 8013f40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013f44:	2201      	movs	r2, #1
 8013f46:	2109      	movs	r1, #9
 8013f48:	f7ff ff8e 	bl	8013e68 <std>
 8013f4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013f50:	2202      	movs	r2, #2
 8013f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f56:	2112      	movs	r1, #18
 8013f58:	f7ff bf86 	b.w	8013e68 <std>
 8013f5c:	20000ad8 	.word	0x20000ad8
 8013f60:	200009a0 	.word	0x200009a0
 8013f64:	08013ed5 	.word	0x08013ed5

08013f68 <__sfp_lock_acquire>:
 8013f68:	4801      	ldr	r0, [pc, #4]	; (8013f70 <__sfp_lock_acquire+0x8>)
 8013f6a:	f000 b9c2 	b.w	80142f2 <__retarget_lock_acquire_recursive>
 8013f6e:	bf00      	nop
 8013f70:	20000ae1 	.word	0x20000ae1

08013f74 <__sfp_lock_release>:
 8013f74:	4801      	ldr	r0, [pc, #4]	; (8013f7c <__sfp_lock_release+0x8>)
 8013f76:	f000 b9bd 	b.w	80142f4 <__retarget_lock_release_recursive>
 8013f7a:	bf00      	nop
 8013f7c:	20000ae1 	.word	0x20000ae1

08013f80 <__sinit>:
 8013f80:	b510      	push	{r4, lr}
 8013f82:	4604      	mov	r4, r0
 8013f84:	f7ff fff0 	bl	8013f68 <__sfp_lock_acquire>
 8013f88:	6a23      	ldr	r3, [r4, #32]
 8013f8a:	b11b      	cbz	r3, 8013f94 <__sinit+0x14>
 8013f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f90:	f7ff bff0 	b.w	8013f74 <__sfp_lock_release>
 8013f94:	4b04      	ldr	r3, [pc, #16]	; (8013fa8 <__sinit+0x28>)
 8013f96:	6223      	str	r3, [r4, #32]
 8013f98:	4b04      	ldr	r3, [pc, #16]	; (8013fac <__sinit+0x2c>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d1f5      	bne.n	8013f8c <__sinit+0xc>
 8013fa0:	f7ff ffc4 	bl	8013f2c <global_stdio_init.part.0>
 8013fa4:	e7f2      	b.n	8013f8c <__sinit+0xc>
 8013fa6:	bf00      	nop
 8013fa8:	08013eed 	.word	0x08013eed
 8013fac:	20000ad8 	.word	0x20000ad8

08013fb0 <fiprintf>:
 8013fb0:	b40e      	push	{r1, r2, r3}
 8013fb2:	b503      	push	{r0, r1, lr}
 8013fb4:	4601      	mov	r1, r0
 8013fb6:	ab03      	add	r3, sp, #12
 8013fb8:	4805      	ldr	r0, [pc, #20]	; (8013fd0 <fiprintf+0x20>)
 8013fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fbe:	6800      	ldr	r0, [r0, #0]
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	f002 fd39 	bl	8016a38 <_vfiprintf_r>
 8013fc6:	b002      	add	sp, #8
 8013fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fcc:	b003      	add	sp, #12
 8013fce:	4770      	bx	lr
 8013fd0:	200000d4 	.word	0x200000d4

08013fd4 <_fwalk_sglue>:
 8013fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fd8:	4607      	mov	r7, r0
 8013fda:	4688      	mov	r8, r1
 8013fdc:	4614      	mov	r4, r2
 8013fde:	2600      	movs	r6, #0
 8013fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8013fe8:	d505      	bpl.n	8013ff6 <_fwalk_sglue+0x22>
 8013fea:	6824      	ldr	r4, [r4, #0]
 8013fec:	2c00      	cmp	r4, #0
 8013fee:	d1f7      	bne.n	8013fe0 <_fwalk_sglue+0xc>
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ff6:	89ab      	ldrh	r3, [r5, #12]
 8013ff8:	2b01      	cmp	r3, #1
 8013ffa:	d907      	bls.n	801400c <_fwalk_sglue+0x38>
 8013ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014000:	3301      	adds	r3, #1
 8014002:	d003      	beq.n	801400c <_fwalk_sglue+0x38>
 8014004:	4629      	mov	r1, r5
 8014006:	4638      	mov	r0, r7
 8014008:	47c0      	blx	r8
 801400a:	4306      	orrs	r6, r0
 801400c:	3568      	adds	r5, #104	; 0x68
 801400e:	e7e9      	b.n	8013fe4 <_fwalk_sglue+0x10>

08014010 <siprintf>:
 8014010:	b40e      	push	{r1, r2, r3}
 8014012:	b500      	push	{lr}
 8014014:	b09c      	sub	sp, #112	; 0x70
 8014016:	ab1d      	add	r3, sp, #116	; 0x74
 8014018:	9002      	str	r0, [sp, #8]
 801401a:	9006      	str	r0, [sp, #24]
 801401c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014020:	4809      	ldr	r0, [pc, #36]	; (8014048 <siprintf+0x38>)
 8014022:	9107      	str	r1, [sp, #28]
 8014024:	9104      	str	r1, [sp, #16]
 8014026:	4909      	ldr	r1, [pc, #36]	; (801404c <siprintf+0x3c>)
 8014028:	f853 2b04 	ldr.w	r2, [r3], #4
 801402c:	9105      	str	r1, [sp, #20]
 801402e:	6800      	ldr	r0, [r0, #0]
 8014030:	9301      	str	r3, [sp, #4]
 8014032:	a902      	add	r1, sp, #8
 8014034:	f002 fbd8 	bl	80167e8 <_svfiprintf_r>
 8014038:	9b02      	ldr	r3, [sp, #8]
 801403a:	2200      	movs	r2, #0
 801403c:	701a      	strb	r2, [r3, #0]
 801403e:	b01c      	add	sp, #112	; 0x70
 8014040:	f85d eb04 	ldr.w	lr, [sp], #4
 8014044:	b003      	add	sp, #12
 8014046:	4770      	bx	lr
 8014048:	200000d4 	.word	0x200000d4
 801404c:	ffff0208 	.word	0xffff0208

08014050 <__sread>:
 8014050:	b510      	push	{r4, lr}
 8014052:	460c      	mov	r4, r1
 8014054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014058:	f000 f8d8 	bl	801420c <_read_r>
 801405c:	2800      	cmp	r0, #0
 801405e:	bfab      	itete	ge
 8014060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014062:	89a3      	ldrhlt	r3, [r4, #12]
 8014064:	181b      	addge	r3, r3, r0
 8014066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801406a:	bfac      	ite	ge
 801406c:	6563      	strge	r3, [r4, #84]	; 0x54
 801406e:	81a3      	strhlt	r3, [r4, #12]
 8014070:	bd10      	pop	{r4, pc}

08014072 <__swrite>:
 8014072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014076:	461f      	mov	r7, r3
 8014078:	898b      	ldrh	r3, [r1, #12]
 801407a:	05db      	lsls	r3, r3, #23
 801407c:	4605      	mov	r5, r0
 801407e:	460c      	mov	r4, r1
 8014080:	4616      	mov	r6, r2
 8014082:	d505      	bpl.n	8014090 <__swrite+0x1e>
 8014084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014088:	2302      	movs	r3, #2
 801408a:	2200      	movs	r2, #0
 801408c:	f000 f8ac 	bl	80141e8 <_lseek_r>
 8014090:	89a3      	ldrh	r3, [r4, #12]
 8014092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801409a:	81a3      	strh	r3, [r4, #12]
 801409c:	4632      	mov	r2, r6
 801409e:	463b      	mov	r3, r7
 80140a0:	4628      	mov	r0, r5
 80140a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140a6:	f000 b8e7 	b.w	8014278 <_write_r>

080140aa <__sseek>:
 80140aa:	b510      	push	{r4, lr}
 80140ac:	460c      	mov	r4, r1
 80140ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140b2:	f000 f899 	bl	80141e8 <_lseek_r>
 80140b6:	1c43      	adds	r3, r0, #1
 80140b8:	89a3      	ldrh	r3, [r4, #12]
 80140ba:	bf15      	itete	ne
 80140bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80140be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140c6:	81a3      	strheq	r3, [r4, #12]
 80140c8:	bf18      	it	ne
 80140ca:	81a3      	strhne	r3, [r4, #12]
 80140cc:	bd10      	pop	{r4, pc}

080140ce <__sclose>:
 80140ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140d2:	f000 b879 	b.w	80141c8 <_close_r>

080140d6 <memcmp>:
 80140d6:	b510      	push	{r4, lr}
 80140d8:	3901      	subs	r1, #1
 80140da:	4402      	add	r2, r0
 80140dc:	4290      	cmp	r0, r2
 80140de:	d101      	bne.n	80140e4 <memcmp+0xe>
 80140e0:	2000      	movs	r0, #0
 80140e2:	e005      	b.n	80140f0 <memcmp+0x1a>
 80140e4:	7803      	ldrb	r3, [r0, #0]
 80140e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80140ea:	42a3      	cmp	r3, r4
 80140ec:	d001      	beq.n	80140f2 <memcmp+0x1c>
 80140ee:	1b18      	subs	r0, r3, r4
 80140f0:	bd10      	pop	{r4, pc}
 80140f2:	3001      	adds	r0, #1
 80140f4:	e7f2      	b.n	80140dc <memcmp+0x6>

080140f6 <memmove>:
 80140f6:	4288      	cmp	r0, r1
 80140f8:	b510      	push	{r4, lr}
 80140fa:	eb01 0402 	add.w	r4, r1, r2
 80140fe:	d902      	bls.n	8014106 <memmove+0x10>
 8014100:	4284      	cmp	r4, r0
 8014102:	4623      	mov	r3, r4
 8014104:	d807      	bhi.n	8014116 <memmove+0x20>
 8014106:	1e43      	subs	r3, r0, #1
 8014108:	42a1      	cmp	r1, r4
 801410a:	d008      	beq.n	801411e <memmove+0x28>
 801410c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014110:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014114:	e7f8      	b.n	8014108 <memmove+0x12>
 8014116:	4402      	add	r2, r0
 8014118:	4601      	mov	r1, r0
 801411a:	428a      	cmp	r2, r1
 801411c:	d100      	bne.n	8014120 <memmove+0x2a>
 801411e:	bd10      	pop	{r4, pc}
 8014120:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014124:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014128:	e7f7      	b.n	801411a <memmove+0x24>

0801412a <memset>:
 801412a:	4402      	add	r2, r0
 801412c:	4603      	mov	r3, r0
 801412e:	4293      	cmp	r3, r2
 8014130:	d100      	bne.n	8014134 <memset+0xa>
 8014132:	4770      	bx	lr
 8014134:	f803 1b01 	strb.w	r1, [r3], #1
 8014138:	e7f9      	b.n	801412e <memset+0x4>

0801413a <strncpy>:
 801413a:	b510      	push	{r4, lr}
 801413c:	3901      	subs	r1, #1
 801413e:	4603      	mov	r3, r0
 8014140:	b132      	cbz	r2, 8014150 <strncpy+0x16>
 8014142:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014146:	f803 4b01 	strb.w	r4, [r3], #1
 801414a:	3a01      	subs	r2, #1
 801414c:	2c00      	cmp	r4, #0
 801414e:	d1f7      	bne.n	8014140 <strncpy+0x6>
 8014150:	441a      	add	r2, r3
 8014152:	2100      	movs	r1, #0
 8014154:	4293      	cmp	r3, r2
 8014156:	d100      	bne.n	801415a <strncpy+0x20>
 8014158:	bd10      	pop	{r4, pc}
 801415a:	f803 1b01 	strb.w	r1, [r3], #1
 801415e:	e7f9      	b.n	8014154 <strncpy+0x1a>

08014160 <_raise_r>:
 8014160:	291f      	cmp	r1, #31
 8014162:	b538      	push	{r3, r4, r5, lr}
 8014164:	4604      	mov	r4, r0
 8014166:	460d      	mov	r5, r1
 8014168:	d904      	bls.n	8014174 <_raise_r+0x14>
 801416a:	2316      	movs	r3, #22
 801416c:	6003      	str	r3, [r0, #0]
 801416e:	f04f 30ff 	mov.w	r0, #4294967295
 8014172:	bd38      	pop	{r3, r4, r5, pc}
 8014174:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014176:	b112      	cbz	r2, 801417e <_raise_r+0x1e>
 8014178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801417c:	b94b      	cbnz	r3, 8014192 <_raise_r+0x32>
 801417e:	4620      	mov	r0, r4
 8014180:	f000 f868 	bl	8014254 <_getpid_r>
 8014184:	462a      	mov	r2, r5
 8014186:	4601      	mov	r1, r0
 8014188:	4620      	mov	r0, r4
 801418a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801418e:	f000 b84f 	b.w	8014230 <_kill_r>
 8014192:	2b01      	cmp	r3, #1
 8014194:	d00a      	beq.n	80141ac <_raise_r+0x4c>
 8014196:	1c59      	adds	r1, r3, #1
 8014198:	d103      	bne.n	80141a2 <_raise_r+0x42>
 801419a:	2316      	movs	r3, #22
 801419c:	6003      	str	r3, [r0, #0]
 801419e:	2001      	movs	r0, #1
 80141a0:	e7e7      	b.n	8014172 <_raise_r+0x12>
 80141a2:	2400      	movs	r4, #0
 80141a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80141a8:	4628      	mov	r0, r5
 80141aa:	4798      	blx	r3
 80141ac:	2000      	movs	r0, #0
 80141ae:	e7e0      	b.n	8014172 <_raise_r+0x12>

080141b0 <raise>:
 80141b0:	4b02      	ldr	r3, [pc, #8]	; (80141bc <raise+0xc>)
 80141b2:	4601      	mov	r1, r0
 80141b4:	6818      	ldr	r0, [r3, #0]
 80141b6:	f7ff bfd3 	b.w	8014160 <_raise_r>
 80141ba:	bf00      	nop
 80141bc:	200000d4 	.word	0x200000d4

080141c0 <_localeconv_r>:
 80141c0:	4800      	ldr	r0, [pc, #0]	; (80141c4 <_localeconv_r+0x4>)
 80141c2:	4770      	bx	lr
 80141c4:	200001c8 	.word	0x200001c8

080141c8 <_close_r>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	4d06      	ldr	r5, [pc, #24]	; (80141e4 <_close_r+0x1c>)
 80141cc:	2300      	movs	r3, #0
 80141ce:	4604      	mov	r4, r0
 80141d0:	4608      	mov	r0, r1
 80141d2:	602b      	str	r3, [r5, #0]
 80141d4:	f7f5 f9e1 	bl	800959a <_close>
 80141d8:	1c43      	adds	r3, r0, #1
 80141da:	d102      	bne.n	80141e2 <_close_r+0x1a>
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	b103      	cbz	r3, 80141e2 <_close_r+0x1a>
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	bd38      	pop	{r3, r4, r5, pc}
 80141e4:	20000adc 	.word	0x20000adc

080141e8 <_lseek_r>:
 80141e8:	b538      	push	{r3, r4, r5, lr}
 80141ea:	4d07      	ldr	r5, [pc, #28]	; (8014208 <_lseek_r+0x20>)
 80141ec:	4604      	mov	r4, r0
 80141ee:	4608      	mov	r0, r1
 80141f0:	4611      	mov	r1, r2
 80141f2:	2200      	movs	r2, #0
 80141f4:	602a      	str	r2, [r5, #0]
 80141f6:	461a      	mov	r2, r3
 80141f8:	f7f5 f9f6 	bl	80095e8 <_lseek>
 80141fc:	1c43      	adds	r3, r0, #1
 80141fe:	d102      	bne.n	8014206 <_lseek_r+0x1e>
 8014200:	682b      	ldr	r3, [r5, #0]
 8014202:	b103      	cbz	r3, 8014206 <_lseek_r+0x1e>
 8014204:	6023      	str	r3, [r4, #0]
 8014206:	bd38      	pop	{r3, r4, r5, pc}
 8014208:	20000adc 	.word	0x20000adc

0801420c <_read_r>:
 801420c:	b538      	push	{r3, r4, r5, lr}
 801420e:	4d07      	ldr	r5, [pc, #28]	; (801422c <_read_r+0x20>)
 8014210:	4604      	mov	r4, r0
 8014212:	4608      	mov	r0, r1
 8014214:	4611      	mov	r1, r2
 8014216:	2200      	movs	r2, #0
 8014218:	602a      	str	r2, [r5, #0]
 801421a:	461a      	mov	r2, r3
 801421c:	f7f5 f984 	bl	8009528 <_read>
 8014220:	1c43      	adds	r3, r0, #1
 8014222:	d102      	bne.n	801422a <_read_r+0x1e>
 8014224:	682b      	ldr	r3, [r5, #0]
 8014226:	b103      	cbz	r3, 801422a <_read_r+0x1e>
 8014228:	6023      	str	r3, [r4, #0]
 801422a:	bd38      	pop	{r3, r4, r5, pc}
 801422c:	20000adc 	.word	0x20000adc

08014230 <_kill_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4d07      	ldr	r5, [pc, #28]	; (8014250 <_kill_r+0x20>)
 8014234:	2300      	movs	r3, #0
 8014236:	4604      	mov	r4, r0
 8014238:	4608      	mov	r0, r1
 801423a:	4611      	mov	r1, r2
 801423c:	602b      	str	r3, [r5, #0]
 801423e:	f7f5 f959 	bl	80094f4 <_kill>
 8014242:	1c43      	adds	r3, r0, #1
 8014244:	d102      	bne.n	801424c <_kill_r+0x1c>
 8014246:	682b      	ldr	r3, [r5, #0]
 8014248:	b103      	cbz	r3, 801424c <_kill_r+0x1c>
 801424a:	6023      	str	r3, [r4, #0]
 801424c:	bd38      	pop	{r3, r4, r5, pc}
 801424e:	bf00      	nop
 8014250:	20000adc 	.word	0x20000adc

08014254 <_getpid_r>:
 8014254:	f7f5 b946 	b.w	80094e4 <_getpid>

08014258 <_sbrk_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4d06      	ldr	r5, [pc, #24]	; (8014274 <_sbrk_r+0x1c>)
 801425c:	2300      	movs	r3, #0
 801425e:	4604      	mov	r4, r0
 8014260:	4608      	mov	r0, r1
 8014262:	602b      	str	r3, [r5, #0]
 8014264:	f7f5 f9ce 	bl	8009604 <_sbrk>
 8014268:	1c43      	adds	r3, r0, #1
 801426a:	d102      	bne.n	8014272 <_sbrk_r+0x1a>
 801426c:	682b      	ldr	r3, [r5, #0]
 801426e:	b103      	cbz	r3, 8014272 <_sbrk_r+0x1a>
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	bd38      	pop	{r3, r4, r5, pc}
 8014274:	20000adc 	.word	0x20000adc

08014278 <_write_r>:
 8014278:	b538      	push	{r3, r4, r5, lr}
 801427a:	4d07      	ldr	r5, [pc, #28]	; (8014298 <_write_r+0x20>)
 801427c:	4604      	mov	r4, r0
 801427e:	4608      	mov	r0, r1
 8014280:	4611      	mov	r1, r2
 8014282:	2200      	movs	r2, #0
 8014284:	602a      	str	r2, [r5, #0]
 8014286:	461a      	mov	r2, r3
 8014288:	f7f5 f96b 	bl	8009562 <_write>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_write_r+0x1e>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	b103      	cbz	r3, 8014296 <_write_r+0x1e>
 8014294:	6023      	str	r3, [r4, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	20000adc 	.word	0x20000adc

0801429c <__errno>:
 801429c:	4b01      	ldr	r3, [pc, #4]	; (80142a4 <__errno+0x8>)
 801429e:	6818      	ldr	r0, [r3, #0]
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	200000d4 	.word	0x200000d4

080142a8 <__libc_init_array>:
 80142a8:	b570      	push	{r4, r5, r6, lr}
 80142aa:	4d0d      	ldr	r5, [pc, #52]	; (80142e0 <__libc_init_array+0x38>)
 80142ac:	4c0d      	ldr	r4, [pc, #52]	; (80142e4 <__libc_init_array+0x3c>)
 80142ae:	1b64      	subs	r4, r4, r5
 80142b0:	10a4      	asrs	r4, r4, #2
 80142b2:	2600      	movs	r6, #0
 80142b4:	42a6      	cmp	r6, r4
 80142b6:	d109      	bne.n	80142cc <__libc_init_array+0x24>
 80142b8:	4d0b      	ldr	r5, [pc, #44]	; (80142e8 <__libc_init_array+0x40>)
 80142ba:	4c0c      	ldr	r4, [pc, #48]	; (80142ec <__libc_init_array+0x44>)
 80142bc:	f003 fa7c 	bl	80177b8 <_init>
 80142c0:	1b64      	subs	r4, r4, r5
 80142c2:	10a4      	asrs	r4, r4, #2
 80142c4:	2600      	movs	r6, #0
 80142c6:	42a6      	cmp	r6, r4
 80142c8:	d105      	bne.n	80142d6 <__libc_init_array+0x2e>
 80142ca:	bd70      	pop	{r4, r5, r6, pc}
 80142cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80142d0:	4798      	blx	r3
 80142d2:	3601      	adds	r6, #1
 80142d4:	e7ee      	b.n	80142b4 <__libc_init_array+0xc>
 80142d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80142da:	4798      	blx	r3
 80142dc:	3601      	adds	r6, #1
 80142de:	e7f2      	b.n	80142c6 <__libc_init_array+0x1e>
 80142e0:	08018d8c 	.word	0x08018d8c
 80142e4:	08018d8c 	.word	0x08018d8c
 80142e8:	08018d8c 	.word	0x08018d8c
 80142ec:	08018d9c 	.word	0x08018d9c

080142f0 <__retarget_lock_init_recursive>:
 80142f0:	4770      	bx	lr

080142f2 <__retarget_lock_acquire_recursive>:
 80142f2:	4770      	bx	lr

080142f4 <__retarget_lock_release_recursive>:
 80142f4:	4770      	bx	lr

080142f6 <memcpy>:
 80142f6:	440a      	add	r2, r1
 80142f8:	4291      	cmp	r1, r2
 80142fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80142fe:	d100      	bne.n	8014302 <memcpy+0xc>
 8014300:	4770      	bx	lr
 8014302:	b510      	push	{r4, lr}
 8014304:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014308:	f803 4f01 	strb.w	r4, [r3, #1]!
 801430c:	4291      	cmp	r1, r2
 801430e:	d1f9      	bne.n	8014304 <memcpy+0xe>
 8014310:	bd10      	pop	{r4, pc}
	...

08014314 <nanf>:
 8014314:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801431c <nanf+0x8>
 8014318:	4770      	bx	lr
 801431a:	bf00      	nop
 801431c:	7fc00000 	.word	0x7fc00000

08014320 <quorem>:
 8014320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014324:	6903      	ldr	r3, [r0, #16]
 8014326:	690c      	ldr	r4, [r1, #16]
 8014328:	42a3      	cmp	r3, r4
 801432a:	4607      	mov	r7, r0
 801432c:	db7e      	blt.n	801442c <quorem+0x10c>
 801432e:	3c01      	subs	r4, #1
 8014330:	f101 0814 	add.w	r8, r1, #20
 8014334:	f100 0514 	add.w	r5, r0, #20
 8014338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801433c:	9301      	str	r3, [sp, #4]
 801433e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014346:	3301      	adds	r3, #1
 8014348:	429a      	cmp	r2, r3
 801434a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801434e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014352:	fbb2 f6f3 	udiv	r6, r2, r3
 8014356:	d331      	bcc.n	80143bc <quorem+0x9c>
 8014358:	f04f 0e00 	mov.w	lr, #0
 801435c:	4640      	mov	r0, r8
 801435e:	46ac      	mov	ip, r5
 8014360:	46f2      	mov	sl, lr
 8014362:	f850 2b04 	ldr.w	r2, [r0], #4
 8014366:	b293      	uxth	r3, r2
 8014368:	fb06 e303 	mla	r3, r6, r3, lr
 801436c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014370:	0c1a      	lsrs	r2, r3, #16
 8014372:	b29b      	uxth	r3, r3
 8014374:	ebaa 0303 	sub.w	r3, sl, r3
 8014378:	f8dc a000 	ldr.w	sl, [ip]
 801437c:	fa13 f38a 	uxtah	r3, r3, sl
 8014380:	fb06 220e 	mla	r2, r6, lr, r2
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	9b00      	ldr	r3, [sp, #0]
 8014388:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801438c:	b292      	uxth	r2, r2
 801438e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014396:	f8bd 3000 	ldrh.w	r3, [sp]
 801439a:	4581      	cmp	r9, r0
 801439c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143a0:	f84c 3b04 	str.w	r3, [ip], #4
 80143a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80143a8:	d2db      	bcs.n	8014362 <quorem+0x42>
 80143aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80143ae:	b92b      	cbnz	r3, 80143bc <quorem+0x9c>
 80143b0:	9b01      	ldr	r3, [sp, #4]
 80143b2:	3b04      	subs	r3, #4
 80143b4:	429d      	cmp	r5, r3
 80143b6:	461a      	mov	r2, r3
 80143b8:	d32c      	bcc.n	8014414 <quorem+0xf4>
 80143ba:	613c      	str	r4, [r7, #16]
 80143bc:	4638      	mov	r0, r7
 80143be:	f001 f93b 	bl	8015638 <__mcmp>
 80143c2:	2800      	cmp	r0, #0
 80143c4:	db22      	blt.n	801440c <quorem+0xec>
 80143c6:	3601      	adds	r6, #1
 80143c8:	4629      	mov	r1, r5
 80143ca:	2000      	movs	r0, #0
 80143cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80143d0:	f8d1 c000 	ldr.w	ip, [r1]
 80143d4:	b293      	uxth	r3, r2
 80143d6:	1ac3      	subs	r3, r0, r3
 80143d8:	0c12      	lsrs	r2, r2, #16
 80143da:	fa13 f38c 	uxtah	r3, r3, ip
 80143de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80143e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143ec:	45c1      	cmp	r9, r8
 80143ee:	f841 3b04 	str.w	r3, [r1], #4
 80143f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80143f6:	d2e9      	bcs.n	80143cc <quorem+0xac>
 80143f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80143fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014400:	b922      	cbnz	r2, 801440c <quorem+0xec>
 8014402:	3b04      	subs	r3, #4
 8014404:	429d      	cmp	r5, r3
 8014406:	461a      	mov	r2, r3
 8014408:	d30a      	bcc.n	8014420 <quorem+0x100>
 801440a:	613c      	str	r4, [r7, #16]
 801440c:	4630      	mov	r0, r6
 801440e:	b003      	add	sp, #12
 8014410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014414:	6812      	ldr	r2, [r2, #0]
 8014416:	3b04      	subs	r3, #4
 8014418:	2a00      	cmp	r2, #0
 801441a:	d1ce      	bne.n	80143ba <quorem+0x9a>
 801441c:	3c01      	subs	r4, #1
 801441e:	e7c9      	b.n	80143b4 <quorem+0x94>
 8014420:	6812      	ldr	r2, [r2, #0]
 8014422:	3b04      	subs	r3, #4
 8014424:	2a00      	cmp	r2, #0
 8014426:	d1f0      	bne.n	801440a <quorem+0xea>
 8014428:	3c01      	subs	r4, #1
 801442a:	e7eb      	b.n	8014404 <quorem+0xe4>
 801442c:	2000      	movs	r0, #0
 801442e:	e7ee      	b.n	801440e <quorem+0xee>

08014430 <_dtoa_r>:
 8014430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014434:	ed2d 8b04 	vpush	{d8-d9}
 8014438:	69c5      	ldr	r5, [r0, #28]
 801443a:	b093      	sub	sp, #76	; 0x4c
 801443c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014440:	ec57 6b10 	vmov	r6, r7, d0
 8014444:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014448:	9107      	str	r1, [sp, #28]
 801444a:	4604      	mov	r4, r0
 801444c:	920a      	str	r2, [sp, #40]	; 0x28
 801444e:	930d      	str	r3, [sp, #52]	; 0x34
 8014450:	b975      	cbnz	r5, 8014470 <_dtoa_r+0x40>
 8014452:	2010      	movs	r0, #16
 8014454:	f7fe fdd6 	bl	8013004 <malloc>
 8014458:	4602      	mov	r2, r0
 801445a:	61e0      	str	r0, [r4, #28]
 801445c:	b920      	cbnz	r0, 8014468 <_dtoa_r+0x38>
 801445e:	4bae      	ldr	r3, [pc, #696]	; (8014718 <_dtoa_r+0x2e8>)
 8014460:	21ef      	movs	r1, #239	; 0xef
 8014462:	48ae      	ldr	r0, [pc, #696]	; (801471c <_dtoa_r+0x2ec>)
 8014464:	f7fe fd9e 	bl	8012fa4 <__assert_func>
 8014468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801446c:	6005      	str	r5, [r0, #0]
 801446e:	60c5      	str	r5, [r0, #12]
 8014470:	69e3      	ldr	r3, [r4, #28]
 8014472:	6819      	ldr	r1, [r3, #0]
 8014474:	b151      	cbz	r1, 801448c <_dtoa_r+0x5c>
 8014476:	685a      	ldr	r2, [r3, #4]
 8014478:	604a      	str	r2, [r1, #4]
 801447a:	2301      	movs	r3, #1
 801447c:	4093      	lsls	r3, r2
 801447e:	608b      	str	r3, [r1, #8]
 8014480:	4620      	mov	r0, r4
 8014482:	f000 fe53 	bl	801512c <_Bfree>
 8014486:	69e3      	ldr	r3, [r4, #28]
 8014488:	2200      	movs	r2, #0
 801448a:	601a      	str	r2, [r3, #0]
 801448c:	1e3b      	subs	r3, r7, #0
 801448e:	bfbb      	ittet	lt
 8014490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014494:	9303      	strlt	r3, [sp, #12]
 8014496:	2300      	movge	r3, #0
 8014498:	2201      	movlt	r2, #1
 801449a:	bfac      	ite	ge
 801449c:	f8c8 3000 	strge.w	r3, [r8]
 80144a0:	f8c8 2000 	strlt.w	r2, [r8]
 80144a4:	4b9e      	ldr	r3, [pc, #632]	; (8014720 <_dtoa_r+0x2f0>)
 80144a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80144aa:	ea33 0308 	bics.w	r3, r3, r8
 80144ae:	d11b      	bne.n	80144e8 <_dtoa_r+0xb8>
 80144b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80144b6:	6013      	str	r3, [r2, #0]
 80144b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80144bc:	4333      	orrs	r3, r6
 80144be:	f000 8593 	beq.w	8014fe8 <_dtoa_r+0xbb8>
 80144c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144c4:	b963      	cbnz	r3, 80144e0 <_dtoa_r+0xb0>
 80144c6:	4b97      	ldr	r3, [pc, #604]	; (8014724 <_dtoa_r+0x2f4>)
 80144c8:	e027      	b.n	801451a <_dtoa_r+0xea>
 80144ca:	4b97      	ldr	r3, [pc, #604]	; (8014728 <_dtoa_r+0x2f8>)
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	3308      	adds	r3, #8
 80144d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144d2:	6013      	str	r3, [r2, #0]
 80144d4:	9800      	ldr	r0, [sp, #0]
 80144d6:	b013      	add	sp, #76	; 0x4c
 80144d8:	ecbd 8b04 	vpop	{d8-d9}
 80144dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e0:	4b90      	ldr	r3, [pc, #576]	; (8014724 <_dtoa_r+0x2f4>)
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	3303      	adds	r3, #3
 80144e6:	e7f3      	b.n	80144d0 <_dtoa_r+0xa0>
 80144e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144ec:	2200      	movs	r2, #0
 80144ee:	ec51 0b17 	vmov	r0, r1, d7
 80144f2:	eeb0 8a47 	vmov.f32	s16, s14
 80144f6:	eef0 8a67 	vmov.f32	s17, s15
 80144fa:	2300      	movs	r3, #0
 80144fc:	f7ec fb0c 	bl	8000b18 <__aeabi_dcmpeq>
 8014500:	4681      	mov	r9, r0
 8014502:	b160      	cbz	r0, 801451e <_dtoa_r+0xee>
 8014504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014506:	2301      	movs	r3, #1
 8014508:	6013      	str	r3, [r2, #0]
 801450a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801450c:	2b00      	cmp	r3, #0
 801450e:	f000 8568 	beq.w	8014fe2 <_dtoa_r+0xbb2>
 8014512:	4b86      	ldr	r3, [pc, #536]	; (801472c <_dtoa_r+0x2fc>)
 8014514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014516:	6013      	str	r3, [r2, #0]
 8014518:	3b01      	subs	r3, #1
 801451a:	9300      	str	r3, [sp, #0]
 801451c:	e7da      	b.n	80144d4 <_dtoa_r+0xa4>
 801451e:	aa10      	add	r2, sp, #64	; 0x40
 8014520:	a911      	add	r1, sp, #68	; 0x44
 8014522:	4620      	mov	r0, r4
 8014524:	eeb0 0a48 	vmov.f32	s0, s16
 8014528:	eef0 0a68 	vmov.f32	s1, s17
 801452c:	f001 f99a 	bl	8015864 <__d2b>
 8014530:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014534:	4682      	mov	sl, r0
 8014536:	2d00      	cmp	r5, #0
 8014538:	d07f      	beq.n	801463a <_dtoa_r+0x20a>
 801453a:	ee18 3a90 	vmov	r3, s17
 801453e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014542:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014546:	ec51 0b18 	vmov	r0, r1, d8
 801454a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801454e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014552:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014556:	4619      	mov	r1, r3
 8014558:	2200      	movs	r2, #0
 801455a:	4b75      	ldr	r3, [pc, #468]	; (8014730 <_dtoa_r+0x300>)
 801455c:	f7eb febc 	bl	80002d8 <__aeabi_dsub>
 8014560:	a367      	add	r3, pc, #412	; (adr r3, 8014700 <_dtoa_r+0x2d0>)
 8014562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014566:	f7ec f86f 	bl	8000648 <__aeabi_dmul>
 801456a:	a367      	add	r3, pc, #412	; (adr r3, 8014708 <_dtoa_r+0x2d8>)
 801456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014570:	f7eb feb4 	bl	80002dc <__adddf3>
 8014574:	4606      	mov	r6, r0
 8014576:	4628      	mov	r0, r5
 8014578:	460f      	mov	r7, r1
 801457a:	f7eb fffb 	bl	8000574 <__aeabi_i2d>
 801457e:	a364      	add	r3, pc, #400	; (adr r3, 8014710 <_dtoa_r+0x2e0>)
 8014580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014584:	f7ec f860 	bl	8000648 <__aeabi_dmul>
 8014588:	4602      	mov	r2, r0
 801458a:	460b      	mov	r3, r1
 801458c:	4630      	mov	r0, r6
 801458e:	4639      	mov	r1, r7
 8014590:	f7eb fea4 	bl	80002dc <__adddf3>
 8014594:	4606      	mov	r6, r0
 8014596:	460f      	mov	r7, r1
 8014598:	f7ec fb06 	bl	8000ba8 <__aeabi_d2iz>
 801459c:	2200      	movs	r2, #0
 801459e:	4683      	mov	fp, r0
 80145a0:	2300      	movs	r3, #0
 80145a2:	4630      	mov	r0, r6
 80145a4:	4639      	mov	r1, r7
 80145a6:	f7ec fac1 	bl	8000b2c <__aeabi_dcmplt>
 80145aa:	b148      	cbz	r0, 80145c0 <_dtoa_r+0x190>
 80145ac:	4658      	mov	r0, fp
 80145ae:	f7eb ffe1 	bl	8000574 <__aeabi_i2d>
 80145b2:	4632      	mov	r2, r6
 80145b4:	463b      	mov	r3, r7
 80145b6:	f7ec faaf 	bl	8000b18 <__aeabi_dcmpeq>
 80145ba:	b908      	cbnz	r0, 80145c0 <_dtoa_r+0x190>
 80145bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145c0:	f1bb 0f16 	cmp.w	fp, #22
 80145c4:	d857      	bhi.n	8014676 <_dtoa_r+0x246>
 80145c6:	4b5b      	ldr	r3, [pc, #364]	; (8014734 <_dtoa_r+0x304>)
 80145c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80145cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d0:	ec51 0b18 	vmov	r0, r1, d8
 80145d4:	f7ec faaa 	bl	8000b2c <__aeabi_dcmplt>
 80145d8:	2800      	cmp	r0, #0
 80145da:	d04e      	beq.n	801467a <_dtoa_r+0x24a>
 80145dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145e0:	2300      	movs	r3, #0
 80145e2:	930c      	str	r3, [sp, #48]	; 0x30
 80145e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145e6:	1b5b      	subs	r3, r3, r5
 80145e8:	1e5a      	subs	r2, r3, #1
 80145ea:	bf45      	ittet	mi
 80145ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80145f0:	9305      	strmi	r3, [sp, #20]
 80145f2:	2300      	movpl	r3, #0
 80145f4:	2300      	movmi	r3, #0
 80145f6:	9206      	str	r2, [sp, #24]
 80145f8:	bf54      	ite	pl
 80145fa:	9305      	strpl	r3, [sp, #20]
 80145fc:	9306      	strmi	r3, [sp, #24]
 80145fe:	f1bb 0f00 	cmp.w	fp, #0
 8014602:	db3c      	blt.n	801467e <_dtoa_r+0x24e>
 8014604:	9b06      	ldr	r3, [sp, #24]
 8014606:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801460a:	445b      	add	r3, fp
 801460c:	9306      	str	r3, [sp, #24]
 801460e:	2300      	movs	r3, #0
 8014610:	9308      	str	r3, [sp, #32]
 8014612:	9b07      	ldr	r3, [sp, #28]
 8014614:	2b09      	cmp	r3, #9
 8014616:	d868      	bhi.n	80146ea <_dtoa_r+0x2ba>
 8014618:	2b05      	cmp	r3, #5
 801461a:	bfc4      	itt	gt
 801461c:	3b04      	subgt	r3, #4
 801461e:	9307      	strgt	r3, [sp, #28]
 8014620:	9b07      	ldr	r3, [sp, #28]
 8014622:	f1a3 0302 	sub.w	r3, r3, #2
 8014626:	bfcc      	ite	gt
 8014628:	2500      	movgt	r5, #0
 801462a:	2501      	movle	r5, #1
 801462c:	2b03      	cmp	r3, #3
 801462e:	f200 8085 	bhi.w	801473c <_dtoa_r+0x30c>
 8014632:	e8df f003 	tbb	[pc, r3]
 8014636:	3b2e      	.short	0x3b2e
 8014638:	5839      	.short	0x5839
 801463a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801463e:	441d      	add	r5, r3
 8014640:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014644:	2b20      	cmp	r3, #32
 8014646:	bfc1      	itttt	gt
 8014648:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801464c:	fa08 f803 	lslgt.w	r8, r8, r3
 8014650:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8014654:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014658:	bfd6      	itet	le
 801465a:	f1c3 0320 	rsble	r3, r3, #32
 801465e:	ea48 0003 	orrgt.w	r0, r8, r3
 8014662:	fa06 f003 	lslle.w	r0, r6, r3
 8014666:	f7eb ff75 	bl	8000554 <__aeabi_ui2d>
 801466a:	2201      	movs	r2, #1
 801466c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014670:	3d01      	subs	r5, #1
 8014672:	920e      	str	r2, [sp, #56]	; 0x38
 8014674:	e76f      	b.n	8014556 <_dtoa_r+0x126>
 8014676:	2301      	movs	r3, #1
 8014678:	e7b3      	b.n	80145e2 <_dtoa_r+0x1b2>
 801467a:	900c      	str	r0, [sp, #48]	; 0x30
 801467c:	e7b2      	b.n	80145e4 <_dtoa_r+0x1b4>
 801467e:	9b05      	ldr	r3, [sp, #20]
 8014680:	eba3 030b 	sub.w	r3, r3, fp
 8014684:	9305      	str	r3, [sp, #20]
 8014686:	f1cb 0300 	rsb	r3, fp, #0
 801468a:	9308      	str	r3, [sp, #32]
 801468c:	2300      	movs	r3, #0
 801468e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014690:	e7bf      	b.n	8014612 <_dtoa_r+0x1e2>
 8014692:	2300      	movs	r3, #0
 8014694:	9309      	str	r3, [sp, #36]	; 0x24
 8014696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014698:	2b00      	cmp	r3, #0
 801469a:	dc52      	bgt.n	8014742 <_dtoa_r+0x312>
 801469c:	2301      	movs	r3, #1
 801469e:	9301      	str	r3, [sp, #4]
 80146a0:	9304      	str	r3, [sp, #16]
 80146a2:	461a      	mov	r2, r3
 80146a4:	920a      	str	r2, [sp, #40]	; 0x28
 80146a6:	e00b      	b.n	80146c0 <_dtoa_r+0x290>
 80146a8:	2301      	movs	r3, #1
 80146aa:	e7f3      	b.n	8014694 <_dtoa_r+0x264>
 80146ac:	2300      	movs	r3, #0
 80146ae:	9309      	str	r3, [sp, #36]	; 0x24
 80146b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146b2:	445b      	add	r3, fp
 80146b4:	9301      	str	r3, [sp, #4]
 80146b6:	3301      	adds	r3, #1
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	9304      	str	r3, [sp, #16]
 80146bc:	bfb8      	it	lt
 80146be:	2301      	movlt	r3, #1
 80146c0:	69e0      	ldr	r0, [r4, #28]
 80146c2:	2100      	movs	r1, #0
 80146c4:	2204      	movs	r2, #4
 80146c6:	f102 0614 	add.w	r6, r2, #20
 80146ca:	429e      	cmp	r6, r3
 80146cc:	d93d      	bls.n	801474a <_dtoa_r+0x31a>
 80146ce:	6041      	str	r1, [r0, #4]
 80146d0:	4620      	mov	r0, r4
 80146d2:	f000 fceb 	bl	80150ac <_Balloc>
 80146d6:	9000      	str	r0, [sp, #0]
 80146d8:	2800      	cmp	r0, #0
 80146da:	d139      	bne.n	8014750 <_dtoa_r+0x320>
 80146dc:	4b16      	ldr	r3, [pc, #88]	; (8014738 <_dtoa_r+0x308>)
 80146de:	4602      	mov	r2, r0
 80146e0:	f240 11af 	movw	r1, #431	; 0x1af
 80146e4:	e6bd      	b.n	8014462 <_dtoa_r+0x32>
 80146e6:	2301      	movs	r3, #1
 80146e8:	e7e1      	b.n	80146ae <_dtoa_r+0x27e>
 80146ea:	2501      	movs	r5, #1
 80146ec:	2300      	movs	r3, #0
 80146ee:	9307      	str	r3, [sp, #28]
 80146f0:	9509      	str	r5, [sp, #36]	; 0x24
 80146f2:	f04f 33ff 	mov.w	r3, #4294967295
 80146f6:	9301      	str	r3, [sp, #4]
 80146f8:	9304      	str	r3, [sp, #16]
 80146fa:	2200      	movs	r2, #0
 80146fc:	2312      	movs	r3, #18
 80146fe:	e7d1      	b.n	80146a4 <_dtoa_r+0x274>
 8014700:	636f4361 	.word	0x636f4361
 8014704:	3fd287a7 	.word	0x3fd287a7
 8014708:	8b60c8b3 	.word	0x8b60c8b3
 801470c:	3fc68a28 	.word	0x3fc68a28
 8014710:	509f79fb 	.word	0x509f79fb
 8014714:	3fd34413 	.word	0x3fd34413
 8014718:	080189da 	.word	0x080189da
 801471c:	080189f1 	.word	0x080189f1
 8014720:	7ff00000 	.word	0x7ff00000
 8014724:	080189d6 	.word	0x080189d6
 8014728:	080189cd 	.word	0x080189cd
 801472c:	080189a5 	.word	0x080189a5
 8014730:	3ff80000 	.word	0x3ff80000
 8014734:	08018ae0 	.word	0x08018ae0
 8014738:	08018a49 	.word	0x08018a49
 801473c:	2301      	movs	r3, #1
 801473e:	9309      	str	r3, [sp, #36]	; 0x24
 8014740:	e7d7      	b.n	80146f2 <_dtoa_r+0x2c2>
 8014742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014744:	9301      	str	r3, [sp, #4]
 8014746:	9304      	str	r3, [sp, #16]
 8014748:	e7ba      	b.n	80146c0 <_dtoa_r+0x290>
 801474a:	3101      	adds	r1, #1
 801474c:	0052      	lsls	r2, r2, #1
 801474e:	e7ba      	b.n	80146c6 <_dtoa_r+0x296>
 8014750:	69e3      	ldr	r3, [r4, #28]
 8014752:	9a00      	ldr	r2, [sp, #0]
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	9b04      	ldr	r3, [sp, #16]
 8014758:	2b0e      	cmp	r3, #14
 801475a:	f200 80a8 	bhi.w	80148ae <_dtoa_r+0x47e>
 801475e:	2d00      	cmp	r5, #0
 8014760:	f000 80a5 	beq.w	80148ae <_dtoa_r+0x47e>
 8014764:	f1bb 0f00 	cmp.w	fp, #0
 8014768:	dd38      	ble.n	80147dc <_dtoa_r+0x3ac>
 801476a:	4bc0      	ldr	r3, [pc, #768]	; (8014a6c <_dtoa_r+0x63c>)
 801476c:	f00b 020f 	and.w	r2, fp, #15
 8014770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014774:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014778:	e9d3 6700 	ldrd	r6, r7, [r3]
 801477c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014780:	d019      	beq.n	80147b6 <_dtoa_r+0x386>
 8014782:	4bbb      	ldr	r3, [pc, #748]	; (8014a70 <_dtoa_r+0x640>)
 8014784:	ec51 0b18 	vmov	r0, r1, d8
 8014788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801478c:	f7ec f886 	bl	800089c <__aeabi_ddiv>
 8014790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014794:	f008 080f 	and.w	r8, r8, #15
 8014798:	2503      	movs	r5, #3
 801479a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014a70 <_dtoa_r+0x640>
 801479e:	f1b8 0f00 	cmp.w	r8, #0
 80147a2:	d10a      	bne.n	80147ba <_dtoa_r+0x38a>
 80147a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147a8:	4632      	mov	r2, r6
 80147aa:	463b      	mov	r3, r7
 80147ac:	f7ec f876 	bl	800089c <__aeabi_ddiv>
 80147b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147b4:	e02b      	b.n	801480e <_dtoa_r+0x3de>
 80147b6:	2502      	movs	r5, #2
 80147b8:	e7ef      	b.n	801479a <_dtoa_r+0x36a>
 80147ba:	f018 0f01 	tst.w	r8, #1
 80147be:	d008      	beq.n	80147d2 <_dtoa_r+0x3a2>
 80147c0:	4630      	mov	r0, r6
 80147c2:	4639      	mov	r1, r7
 80147c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80147c8:	f7eb ff3e 	bl	8000648 <__aeabi_dmul>
 80147cc:	3501      	adds	r5, #1
 80147ce:	4606      	mov	r6, r0
 80147d0:	460f      	mov	r7, r1
 80147d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80147d6:	f109 0908 	add.w	r9, r9, #8
 80147da:	e7e0      	b.n	801479e <_dtoa_r+0x36e>
 80147dc:	f000 809f 	beq.w	801491e <_dtoa_r+0x4ee>
 80147e0:	f1cb 0600 	rsb	r6, fp, #0
 80147e4:	4ba1      	ldr	r3, [pc, #644]	; (8014a6c <_dtoa_r+0x63c>)
 80147e6:	4fa2      	ldr	r7, [pc, #648]	; (8014a70 <_dtoa_r+0x640>)
 80147e8:	f006 020f 	and.w	r2, r6, #15
 80147ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f4:	ec51 0b18 	vmov	r0, r1, d8
 80147f8:	f7eb ff26 	bl	8000648 <__aeabi_dmul>
 80147fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014800:	1136      	asrs	r6, r6, #4
 8014802:	2300      	movs	r3, #0
 8014804:	2502      	movs	r5, #2
 8014806:	2e00      	cmp	r6, #0
 8014808:	d17e      	bne.n	8014908 <_dtoa_r+0x4d8>
 801480a:	2b00      	cmp	r3, #0
 801480c:	d1d0      	bne.n	80147b0 <_dtoa_r+0x380>
 801480e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014810:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014814:	2b00      	cmp	r3, #0
 8014816:	f000 8084 	beq.w	8014922 <_dtoa_r+0x4f2>
 801481a:	4b96      	ldr	r3, [pc, #600]	; (8014a74 <_dtoa_r+0x644>)
 801481c:	2200      	movs	r2, #0
 801481e:	4640      	mov	r0, r8
 8014820:	4649      	mov	r1, r9
 8014822:	f7ec f983 	bl	8000b2c <__aeabi_dcmplt>
 8014826:	2800      	cmp	r0, #0
 8014828:	d07b      	beq.n	8014922 <_dtoa_r+0x4f2>
 801482a:	9b04      	ldr	r3, [sp, #16]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d078      	beq.n	8014922 <_dtoa_r+0x4f2>
 8014830:	9b01      	ldr	r3, [sp, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd39      	ble.n	80148aa <_dtoa_r+0x47a>
 8014836:	4b90      	ldr	r3, [pc, #576]	; (8014a78 <_dtoa_r+0x648>)
 8014838:	2200      	movs	r2, #0
 801483a:	4640      	mov	r0, r8
 801483c:	4649      	mov	r1, r9
 801483e:	f7eb ff03 	bl	8000648 <__aeabi_dmul>
 8014842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014846:	9e01      	ldr	r6, [sp, #4]
 8014848:	f10b 37ff 	add.w	r7, fp, #4294967295
 801484c:	3501      	adds	r5, #1
 801484e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014852:	4628      	mov	r0, r5
 8014854:	f7eb fe8e 	bl	8000574 <__aeabi_i2d>
 8014858:	4642      	mov	r2, r8
 801485a:	464b      	mov	r3, r9
 801485c:	f7eb fef4 	bl	8000648 <__aeabi_dmul>
 8014860:	4b86      	ldr	r3, [pc, #536]	; (8014a7c <_dtoa_r+0x64c>)
 8014862:	2200      	movs	r2, #0
 8014864:	f7eb fd3a 	bl	80002dc <__adddf3>
 8014868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801486c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014870:	9303      	str	r3, [sp, #12]
 8014872:	2e00      	cmp	r6, #0
 8014874:	d158      	bne.n	8014928 <_dtoa_r+0x4f8>
 8014876:	4b82      	ldr	r3, [pc, #520]	; (8014a80 <_dtoa_r+0x650>)
 8014878:	2200      	movs	r2, #0
 801487a:	4640      	mov	r0, r8
 801487c:	4649      	mov	r1, r9
 801487e:	f7eb fd2b 	bl	80002d8 <__aeabi_dsub>
 8014882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014886:	4680      	mov	r8, r0
 8014888:	4689      	mov	r9, r1
 801488a:	f7ec f96d 	bl	8000b68 <__aeabi_dcmpgt>
 801488e:	2800      	cmp	r0, #0
 8014890:	f040 8296 	bne.w	8014dc0 <_dtoa_r+0x990>
 8014894:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014898:	4640      	mov	r0, r8
 801489a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801489e:	4649      	mov	r1, r9
 80148a0:	f7ec f944 	bl	8000b2c <__aeabi_dcmplt>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f040 8289 	bne.w	8014dbc <_dtoa_r+0x98c>
 80148aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80148ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f2c0 814e 	blt.w	8014b52 <_dtoa_r+0x722>
 80148b6:	f1bb 0f0e 	cmp.w	fp, #14
 80148ba:	f300 814a 	bgt.w	8014b52 <_dtoa_r+0x722>
 80148be:	4b6b      	ldr	r3, [pc, #428]	; (8014a6c <_dtoa_r+0x63c>)
 80148c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80148c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	f280 80dc 	bge.w	8014a88 <_dtoa_r+0x658>
 80148d0:	9b04      	ldr	r3, [sp, #16]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f300 80d8 	bgt.w	8014a88 <_dtoa_r+0x658>
 80148d8:	f040 826f 	bne.w	8014dba <_dtoa_r+0x98a>
 80148dc:	4b68      	ldr	r3, [pc, #416]	; (8014a80 <_dtoa_r+0x650>)
 80148de:	2200      	movs	r2, #0
 80148e0:	4640      	mov	r0, r8
 80148e2:	4649      	mov	r1, r9
 80148e4:	f7eb feb0 	bl	8000648 <__aeabi_dmul>
 80148e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148ec:	f7ec f932 	bl	8000b54 <__aeabi_dcmpge>
 80148f0:	9e04      	ldr	r6, [sp, #16]
 80148f2:	4637      	mov	r7, r6
 80148f4:	2800      	cmp	r0, #0
 80148f6:	f040 8245 	bne.w	8014d84 <_dtoa_r+0x954>
 80148fa:	9d00      	ldr	r5, [sp, #0]
 80148fc:	2331      	movs	r3, #49	; 0x31
 80148fe:	f805 3b01 	strb.w	r3, [r5], #1
 8014902:	f10b 0b01 	add.w	fp, fp, #1
 8014906:	e241      	b.n	8014d8c <_dtoa_r+0x95c>
 8014908:	07f2      	lsls	r2, r6, #31
 801490a:	d505      	bpl.n	8014918 <_dtoa_r+0x4e8>
 801490c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014910:	f7eb fe9a 	bl	8000648 <__aeabi_dmul>
 8014914:	3501      	adds	r5, #1
 8014916:	2301      	movs	r3, #1
 8014918:	1076      	asrs	r6, r6, #1
 801491a:	3708      	adds	r7, #8
 801491c:	e773      	b.n	8014806 <_dtoa_r+0x3d6>
 801491e:	2502      	movs	r5, #2
 8014920:	e775      	b.n	801480e <_dtoa_r+0x3de>
 8014922:	9e04      	ldr	r6, [sp, #16]
 8014924:	465f      	mov	r7, fp
 8014926:	e792      	b.n	801484e <_dtoa_r+0x41e>
 8014928:	9900      	ldr	r1, [sp, #0]
 801492a:	4b50      	ldr	r3, [pc, #320]	; (8014a6c <_dtoa_r+0x63c>)
 801492c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014930:	4431      	add	r1, r6
 8014932:	9102      	str	r1, [sp, #8]
 8014934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014936:	eeb0 9a47 	vmov.f32	s18, s14
 801493a:	eef0 9a67 	vmov.f32	s19, s15
 801493e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014946:	2900      	cmp	r1, #0
 8014948:	d044      	beq.n	80149d4 <_dtoa_r+0x5a4>
 801494a:	494e      	ldr	r1, [pc, #312]	; (8014a84 <_dtoa_r+0x654>)
 801494c:	2000      	movs	r0, #0
 801494e:	f7eb ffa5 	bl	800089c <__aeabi_ddiv>
 8014952:	ec53 2b19 	vmov	r2, r3, d9
 8014956:	f7eb fcbf 	bl	80002d8 <__aeabi_dsub>
 801495a:	9d00      	ldr	r5, [sp, #0]
 801495c:	ec41 0b19 	vmov	d9, r0, r1
 8014960:	4649      	mov	r1, r9
 8014962:	4640      	mov	r0, r8
 8014964:	f7ec f920 	bl	8000ba8 <__aeabi_d2iz>
 8014968:	4606      	mov	r6, r0
 801496a:	f7eb fe03 	bl	8000574 <__aeabi_i2d>
 801496e:	4602      	mov	r2, r0
 8014970:	460b      	mov	r3, r1
 8014972:	4640      	mov	r0, r8
 8014974:	4649      	mov	r1, r9
 8014976:	f7eb fcaf 	bl	80002d8 <__aeabi_dsub>
 801497a:	3630      	adds	r6, #48	; 0x30
 801497c:	f805 6b01 	strb.w	r6, [r5], #1
 8014980:	ec53 2b19 	vmov	r2, r3, d9
 8014984:	4680      	mov	r8, r0
 8014986:	4689      	mov	r9, r1
 8014988:	f7ec f8d0 	bl	8000b2c <__aeabi_dcmplt>
 801498c:	2800      	cmp	r0, #0
 801498e:	d164      	bne.n	8014a5a <_dtoa_r+0x62a>
 8014990:	4642      	mov	r2, r8
 8014992:	464b      	mov	r3, r9
 8014994:	4937      	ldr	r1, [pc, #220]	; (8014a74 <_dtoa_r+0x644>)
 8014996:	2000      	movs	r0, #0
 8014998:	f7eb fc9e 	bl	80002d8 <__aeabi_dsub>
 801499c:	ec53 2b19 	vmov	r2, r3, d9
 80149a0:	f7ec f8c4 	bl	8000b2c <__aeabi_dcmplt>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	f040 80b6 	bne.w	8014b16 <_dtoa_r+0x6e6>
 80149aa:	9b02      	ldr	r3, [sp, #8]
 80149ac:	429d      	cmp	r5, r3
 80149ae:	f43f af7c 	beq.w	80148aa <_dtoa_r+0x47a>
 80149b2:	4b31      	ldr	r3, [pc, #196]	; (8014a78 <_dtoa_r+0x648>)
 80149b4:	ec51 0b19 	vmov	r0, r1, d9
 80149b8:	2200      	movs	r2, #0
 80149ba:	f7eb fe45 	bl	8000648 <__aeabi_dmul>
 80149be:	4b2e      	ldr	r3, [pc, #184]	; (8014a78 <_dtoa_r+0x648>)
 80149c0:	ec41 0b19 	vmov	d9, r0, r1
 80149c4:	2200      	movs	r2, #0
 80149c6:	4640      	mov	r0, r8
 80149c8:	4649      	mov	r1, r9
 80149ca:	f7eb fe3d 	bl	8000648 <__aeabi_dmul>
 80149ce:	4680      	mov	r8, r0
 80149d0:	4689      	mov	r9, r1
 80149d2:	e7c5      	b.n	8014960 <_dtoa_r+0x530>
 80149d4:	ec51 0b17 	vmov	r0, r1, d7
 80149d8:	f7eb fe36 	bl	8000648 <__aeabi_dmul>
 80149dc:	9b02      	ldr	r3, [sp, #8]
 80149de:	9d00      	ldr	r5, [sp, #0]
 80149e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80149e2:	ec41 0b19 	vmov	d9, r0, r1
 80149e6:	4649      	mov	r1, r9
 80149e8:	4640      	mov	r0, r8
 80149ea:	f7ec f8dd 	bl	8000ba8 <__aeabi_d2iz>
 80149ee:	4606      	mov	r6, r0
 80149f0:	f7eb fdc0 	bl	8000574 <__aeabi_i2d>
 80149f4:	3630      	adds	r6, #48	; 0x30
 80149f6:	4602      	mov	r2, r0
 80149f8:	460b      	mov	r3, r1
 80149fa:	4640      	mov	r0, r8
 80149fc:	4649      	mov	r1, r9
 80149fe:	f7eb fc6b 	bl	80002d8 <__aeabi_dsub>
 8014a02:	f805 6b01 	strb.w	r6, [r5], #1
 8014a06:	9b02      	ldr	r3, [sp, #8]
 8014a08:	429d      	cmp	r5, r3
 8014a0a:	4680      	mov	r8, r0
 8014a0c:	4689      	mov	r9, r1
 8014a0e:	f04f 0200 	mov.w	r2, #0
 8014a12:	d124      	bne.n	8014a5e <_dtoa_r+0x62e>
 8014a14:	4b1b      	ldr	r3, [pc, #108]	; (8014a84 <_dtoa_r+0x654>)
 8014a16:	ec51 0b19 	vmov	r0, r1, d9
 8014a1a:	f7eb fc5f 	bl	80002dc <__adddf3>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	460b      	mov	r3, r1
 8014a22:	4640      	mov	r0, r8
 8014a24:	4649      	mov	r1, r9
 8014a26:	f7ec f89f 	bl	8000b68 <__aeabi_dcmpgt>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d173      	bne.n	8014b16 <_dtoa_r+0x6e6>
 8014a2e:	ec53 2b19 	vmov	r2, r3, d9
 8014a32:	4914      	ldr	r1, [pc, #80]	; (8014a84 <_dtoa_r+0x654>)
 8014a34:	2000      	movs	r0, #0
 8014a36:	f7eb fc4f 	bl	80002d8 <__aeabi_dsub>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	4640      	mov	r0, r8
 8014a40:	4649      	mov	r1, r9
 8014a42:	f7ec f873 	bl	8000b2c <__aeabi_dcmplt>
 8014a46:	2800      	cmp	r0, #0
 8014a48:	f43f af2f 	beq.w	80148aa <_dtoa_r+0x47a>
 8014a4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014a4e:	1e6b      	subs	r3, r5, #1
 8014a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014a56:	2b30      	cmp	r3, #48	; 0x30
 8014a58:	d0f8      	beq.n	8014a4c <_dtoa_r+0x61c>
 8014a5a:	46bb      	mov	fp, r7
 8014a5c:	e04a      	b.n	8014af4 <_dtoa_r+0x6c4>
 8014a5e:	4b06      	ldr	r3, [pc, #24]	; (8014a78 <_dtoa_r+0x648>)
 8014a60:	f7eb fdf2 	bl	8000648 <__aeabi_dmul>
 8014a64:	4680      	mov	r8, r0
 8014a66:	4689      	mov	r9, r1
 8014a68:	e7bd      	b.n	80149e6 <_dtoa_r+0x5b6>
 8014a6a:	bf00      	nop
 8014a6c:	08018ae0 	.word	0x08018ae0
 8014a70:	08018ab8 	.word	0x08018ab8
 8014a74:	3ff00000 	.word	0x3ff00000
 8014a78:	40240000 	.word	0x40240000
 8014a7c:	401c0000 	.word	0x401c0000
 8014a80:	40140000 	.word	0x40140000
 8014a84:	3fe00000 	.word	0x3fe00000
 8014a88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014a8c:	9d00      	ldr	r5, [sp, #0]
 8014a8e:	4642      	mov	r2, r8
 8014a90:	464b      	mov	r3, r9
 8014a92:	4630      	mov	r0, r6
 8014a94:	4639      	mov	r1, r7
 8014a96:	f7eb ff01 	bl	800089c <__aeabi_ddiv>
 8014a9a:	f7ec f885 	bl	8000ba8 <__aeabi_d2iz>
 8014a9e:	9001      	str	r0, [sp, #4]
 8014aa0:	f7eb fd68 	bl	8000574 <__aeabi_i2d>
 8014aa4:	4642      	mov	r2, r8
 8014aa6:	464b      	mov	r3, r9
 8014aa8:	f7eb fdce 	bl	8000648 <__aeabi_dmul>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	4639      	mov	r1, r7
 8014ab4:	f7eb fc10 	bl	80002d8 <__aeabi_dsub>
 8014ab8:	9e01      	ldr	r6, [sp, #4]
 8014aba:	9f04      	ldr	r7, [sp, #16]
 8014abc:	3630      	adds	r6, #48	; 0x30
 8014abe:	f805 6b01 	strb.w	r6, [r5], #1
 8014ac2:	9e00      	ldr	r6, [sp, #0]
 8014ac4:	1bae      	subs	r6, r5, r6
 8014ac6:	42b7      	cmp	r7, r6
 8014ac8:	4602      	mov	r2, r0
 8014aca:	460b      	mov	r3, r1
 8014acc:	d134      	bne.n	8014b38 <_dtoa_r+0x708>
 8014ace:	f7eb fc05 	bl	80002dc <__adddf3>
 8014ad2:	4642      	mov	r2, r8
 8014ad4:	464b      	mov	r3, r9
 8014ad6:	4606      	mov	r6, r0
 8014ad8:	460f      	mov	r7, r1
 8014ada:	f7ec f845 	bl	8000b68 <__aeabi_dcmpgt>
 8014ade:	b9c8      	cbnz	r0, 8014b14 <_dtoa_r+0x6e4>
 8014ae0:	4642      	mov	r2, r8
 8014ae2:	464b      	mov	r3, r9
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	4639      	mov	r1, r7
 8014ae8:	f7ec f816 	bl	8000b18 <__aeabi_dcmpeq>
 8014aec:	b110      	cbz	r0, 8014af4 <_dtoa_r+0x6c4>
 8014aee:	9b01      	ldr	r3, [sp, #4]
 8014af0:	07db      	lsls	r3, r3, #31
 8014af2:	d40f      	bmi.n	8014b14 <_dtoa_r+0x6e4>
 8014af4:	4651      	mov	r1, sl
 8014af6:	4620      	mov	r0, r4
 8014af8:	f000 fb18 	bl	801512c <_Bfree>
 8014afc:	2300      	movs	r3, #0
 8014afe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b00:	702b      	strb	r3, [r5, #0]
 8014b02:	f10b 0301 	add.w	r3, fp, #1
 8014b06:	6013      	str	r3, [r2, #0]
 8014b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	f43f ace2 	beq.w	80144d4 <_dtoa_r+0xa4>
 8014b10:	601d      	str	r5, [r3, #0]
 8014b12:	e4df      	b.n	80144d4 <_dtoa_r+0xa4>
 8014b14:	465f      	mov	r7, fp
 8014b16:	462b      	mov	r3, r5
 8014b18:	461d      	mov	r5, r3
 8014b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b1e:	2a39      	cmp	r2, #57	; 0x39
 8014b20:	d106      	bne.n	8014b30 <_dtoa_r+0x700>
 8014b22:	9a00      	ldr	r2, [sp, #0]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d1f7      	bne.n	8014b18 <_dtoa_r+0x6e8>
 8014b28:	9900      	ldr	r1, [sp, #0]
 8014b2a:	2230      	movs	r2, #48	; 0x30
 8014b2c:	3701      	adds	r7, #1
 8014b2e:	700a      	strb	r2, [r1, #0]
 8014b30:	781a      	ldrb	r2, [r3, #0]
 8014b32:	3201      	adds	r2, #1
 8014b34:	701a      	strb	r2, [r3, #0]
 8014b36:	e790      	b.n	8014a5a <_dtoa_r+0x62a>
 8014b38:	4ba3      	ldr	r3, [pc, #652]	; (8014dc8 <_dtoa_r+0x998>)
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f7eb fd84 	bl	8000648 <__aeabi_dmul>
 8014b40:	2200      	movs	r2, #0
 8014b42:	2300      	movs	r3, #0
 8014b44:	4606      	mov	r6, r0
 8014b46:	460f      	mov	r7, r1
 8014b48:	f7eb ffe6 	bl	8000b18 <__aeabi_dcmpeq>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	d09e      	beq.n	8014a8e <_dtoa_r+0x65e>
 8014b50:	e7d0      	b.n	8014af4 <_dtoa_r+0x6c4>
 8014b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b54:	2a00      	cmp	r2, #0
 8014b56:	f000 80ca 	beq.w	8014cee <_dtoa_r+0x8be>
 8014b5a:	9a07      	ldr	r2, [sp, #28]
 8014b5c:	2a01      	cmp	r2, #1
 8014b5e:	f300 80ad 	bgt.w	8014cbc <_dtoa_r+0x88c>
 8014b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	f000 80a5 	beq.w	8014cb4 <_dtoa_r+0x884>
 8014b6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014b6e:	9e08      	ldr	r6, [sp, #32]
 8014b70:	9d05      	ldr	r5, [sp, #20]
 8014b72:	9a05      	ldr	r2, [sp, #20]
 8014b74:	441a      	add	r2, r3
 8014b76:	9205      	str	r2, [sp, #20]
 8014b78:	9a06      	ldr	r2, [sp, #24]
 8014b7a:	2101      	movs	r1, #1
 8014b7c:	441a      	add	r2, r3
 8014b7e:	4620      	mov	r0, r4
 8014b80:	9206      	str	r2, [sp, #24]
 8014b82:	f000 fbd3 	bl	801532c <__i2b>
 8014b86:	4607      	mov	r7, r0
 8014b88:	b165      	cbz	r5, 8014ba4 <_dtoa_r+0x774>
 8014b8a:	9b06      	ldr	r3, [sp, #24]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	dd09      	ble.n	8014ba4 <_dtoa_r+0x774>
 8014b90:	42ab      	cmp	r3, r5
 8014b92:	9a05      	ldr	r2, [sp, #20]
 8014b94:	bfa8      	it	ge
 8014b96:	462b      	movge	r3, r5
 8014b98:	1ad2      	subs	r2, r2, r3
 8014b9a:	9205      	str	r2, [sp, #20]
 8014b9c:	9a06      	ldr	r2, [sp, #24]
 8014b9e:	1aed      	subs	r5, r5, r3
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	9306      	str	r3, [sp, #24]
 8014ba4:	9b08      	ldr	r3, [sp, #32]
 8014ba6:	b1f3      	cbz	r3, 8014be6 <_dtoa_r+0x7b6>
 8014ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f000 80a3 	beq.w	8014cf6 <_dtoa_r+0x8c6>
 8014bb0:	2e00      	cmp	r6, #0
 8014bb2:	dd10      	ble.n	8014bd6 <_dtoa_r+0x7a6>
 8014bb4:	4639      	mov	r1, r7
 8014bb6:	4632      	mov	r2, r6
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f000 fc77 	bl	80154ac <__pow5mult>
 8014bbe:	4652      	mov	r2, sl
 8014bc0:	4601      	mov	r1, r0
 8014bc2:	4607      	mov	r7, r0
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f000 fbc7 	bl	8015358 <__multiply>
 8014bca:	4651      	mov	r1, sl
 8014bcc:	4680      	mov	r8, r0
 8014bce:	4620      	mov	r0, r4
 8014bd0:	f000 faac 	bl	801512c <_Bfree>
 8014bd4:	46c2      	mov	sl, r8
 8014bd6:	9b08      	ldr	r3, [sp, #32]
 8014bd8:	1b9a      	subs	r2, r3, r6
 8014bda:	d004      	beq.n	8014be6 <_dtoa_r+0x7b6>
 8014bdc:	4651      	mov	r1, sl
 8014bde:	4620      	mov	r0, r4
 8014be0:	f000 fc64 	bl	80154ac <__pow5mult>
 8014be4:	4682      	mov	sl, r0
 8014be6:	2101      	movs	r1, #1
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 fb9f 	bl	801532c <__i2b>
 8014bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	f340 8081 	ble.w	8014cfa <_dtoa_r+0x8ca>
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	4601      	mov	r1, r0
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f000 fc55 	bl	80154ac <__pow5mult>
 8014c02:	9b07      	ldr	r3, [sp, #28]
 8014c04:	2b01      	cmp	r3, #1
 8014c06:	4606      	mov	r6, r0
 8014c08:	dd7a      	ble.n	8014d00 <_dtoa_r+0x8d0>
 8014c0a:	f04f 0800 	mov.w	r8, #0
 8014c0e:	6933      	ldr	r3, [r6, #16]
 8014c10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014c14:	6918      	ldr	r0, [r3, #16]
 8014c16:	f000 fb3b 	bl	8015290 <__hi0bits>
 8014c1a:	f1c0 0020 	rsb	r0, r0, #32
 8014c1e:	9b06      	ldr	r3, [sp, #24]
 8014c20:	4418      	add	r0, r3
 8014c22:	f010 001f 	ands.w	r0, r0, #31
 8014c26:	f000 8094 	beq.w	8014d52 <_dtoa_r+0x922>
 8014c2a:	f1c0 0320 	rsb	r3, r0, #32
 8014c2e:	2b04      	cmp	r3, #4
 8014c30:	f340 8085 	ble.w	8014d3e <_dtoa_r+0x90e>
 8014c34:	9b05      	ldr	r3, [sp, #20]
 8014c36:	f1c0 001c 	rsb	r0, r0, #28
 8014c3a:	4403      	add	r3, r0
 8014c3c:	9305      	str	r3, [sp, #20]
 8014c3e:	9b06      	ldr	r3, [sp, #24]
 8014c40:	4403      	add	r3, r0
 8014c42:	4405      	add	r5, r0
 8014c44:	9306      	str	r3, [sp, #24]
 8014c46:	9b05      	ldr	r3, [sp, #20]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	dd05      	ble.n	8014c58 <_dtoa_r+0x828>
 8014c4c:	4651      	mov	r1, sl
 8014c4e:	461a      	mov	r2, r3
 8014c50:	4620      	mov	r0, r4
 8014c52:	f000 fc85 	bl	8015560 <__lshift>
 8014c56:	4682      	mov	sl, r0
 8014c58:	9b06      	ldr	r3, [sp, #24]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	dd05      	ble.n	8014c6a <_dtoa_r+0x83a>
 8014c5e:	4631      	mov	r1, r6
 8014c60:	461a      	mov	r2, r3
 8014c62:	4620      	mov	r0, r4
 8014c64:	f000 fc7c 	bl	8015560 <__lshift>
 8014c68:	4606      	mov	r6, r0
 8014c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d072      	beq.n	8014d56 <_dtoa_r+0x926>
 8014c70:	4631      	mov	r1, r6
 8014c72:	4650      	mov	r0, sl
 8014c74:	f000 fce0 	bl	8015638 <__mcmp>
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	da6c      	bge.n	8014d56 <_dtoa_r+0x926>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	4651      	mov	r1, sl
 8014c80:	220a      	movs	r2, #10
 8014c82:	4620      	mov	r0, r4
 8014c84:	f000 fa74 	bl	8015170 <__multadd>
 8014c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c8e:	4682      	mov	sl, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 81b0 	beq.w	8014ff6 <_dtoa_r+0xbc6>
 8014c96:	2300      	movs	r3, #0
 8014c98:	4639      	mov	r1, r7
 8014c9a:	220a      	movs	r2, #10
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f000 fa67 	bl	8015170 <__multadd>
 8014ca2:	9b01      	ldr	r3, [sp, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	4607      	mov	r7, r0
 8014ca8:	f300 8096 	bgt.w	8014dd8 <_dtoa_r+0x9a8>
 8014cac:	9b07      	ldr	r3, [sp, #28]
 8014cae:	2b02      	cmp	r3, #2
 8014cb0:	dc59      	bgt.n	8014d66 <_dtoa_r+0x936>
 8014cb2:	e091      	b.n	8014dd8 <_dtoa_r+0x9a8>
 8014cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014cba:	e758      	b.n	8014b6e <_dtoa_r+0x73e>
 8014cbc:	9b04      	ldr	r3, [sp, #16]
 8014cbe:	1e5e      	subs	r6, r3, #1
 8014cc0:	9b08      	ldr	r3, [sp, #32]
 8014cc2:	42b3      	cmp	r3, r6
 8014cc4:	bfbf      	itttt	lt
 8014cc6:	9b08      	ldrlt	r3, [sp, #32]
 8014cc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014cca:	9608      	strlt	r6, [sp, #32]
 8014ccc:	1af3      	sublt	r3, r6, r3
 8014cce:	bfb4      	ite	lt
 8014cd0:	18d2      	addlt	r2, r2, r3
 8014cd2:	1b9e      	subge	r6, r3, r6
 8014cd4:	9b04      	ldr	r3, [sp, #16]
 8014cd6:	bfbc      	itt	lt
 8014cd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014cda:	2600      	movlt	r6, #0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	bfb7      	itett	lt
 8014ce0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014ce4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014ce8:	1a9d      	sublt	r5, r3, r2
 8014cea:	2300      	movlt	r3, #0
 8014cec:	e741      	b.n	8014b72 <_dtoa_r+0x742>
 8014cee:	9e08      	ldr	r6, [sp, #32]
 8014cf0:	9d05      	ldr	r5, [sp, #20]
 8014cf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014cf4:	e748      	b.n	8014b88 <_dtoa_r+0x758>
 8014cf6:	9a08      	ldr	r2, [sp, #32]
 8014cf8:	e770      	b.n	8014bdc <_dtoa_r+0x7ac>
 8014cfa:	9b07      	ldr	r3, [sp, #28]
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	dc19      	bgt.n	8014d34 <_dtoa_r+0x904>
 8014d00:	9b02      	ldr	r3, [sp, #8]
 8014d02:	b9bb      	cbnz	r3, 8014d34 <_dtoa_r+0x904>
 8014d04:	9b03      	ldr	r3, [sp, #12]
 8014d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d0a:	b99b      	cbnz	r3, 8014d34 <_dtoa_r+0x904>
 8014d0c:	9b03      	ldr	r3, [sp, #12]
 8014d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d12:	0d1b      	lsrs	r3, r3, #20
 8014d14:	051b      	lsls	r3, r3, #20
 8014d16:	b183      	cbz	r3, 8014d3a <_dtoa_r+0x90a>
 8014d18:	9b05      	ldr	r3, [sp, #20]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	9305      	str	r3, [sp, #20]
 8014d1e:	9b06      	ldr	r3, [sp, #24]
 8014d20:	3301      	adds	r3, #1
 8014d22:	9306      	str	r3, [sp, #24]
 8014d24:	f04f 0801 	mov.w	r8, #1
 8014d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	f47f af6f 	bne.w	8014c0e <_dtoa_r+0x7de>
 8014d30:	2001      	movs	r0, #1
 8014d32:	e774      	b.n	8014c1e <_dtoa_r+0x7ee>
 8014d34:	f04f 0800 	mov.w	r8, #0
 8014d38:	e7f6      	b.n	8014d28 <_dtoa_r+0x8f8>
 8014d3a:	4698      	mov	r8, r3
 8014d3c:	e7f4      	b.n	8014d28 <_dtoa_r+0x8f8>
 8014d3e:	d082      	beq.n	8014c46 <_dtoa_r+0x816>
 8014d40:	9a05      	ldr	r2, [sp, #20]
 8014d42:	331c      	adds	r3, #28
 8014d44:	441a      	add	r2, r3
 8014d46:	9205      	str	r2, [sp, #20]
 8014d48:	9a06      	ldr	r2, [sp, #24]
 8014d4a:	441a      	add	r2, r3
 8014d4c:	441d      	add	r5, r3
 8014d4e:	9206      	str	r2, [sp, #24]
 8014d50:	e779      	b.n	8014c46 <_dtoa_r+0x816>
 8014d52:	4603      	mov	r3, r0
 8014d54:	e7f4      	b.n	8014d40 <_dtoa_r+0x910>
 8014d56:	9b04      	ldr	r3, [sp, #16]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	dc37      	bgt.n	8014dcc <_dtoa_r+0x99c>
 8014d5c:	9b07      	ldr	r3, [sp, #28]
 8014d5e:	2b02      	cmp	r3, #2
 8014d60:	dd34      	ble.n	8014dcc <_dtoa_r+0x99c>
 8014d62:	9b04      	ldr	r3, [sp, #16]
 8014d64:	9301      	str	r3, [sp, #4]
 8014d66:	9b01      	ldr	r3, [sp, #4]
 8014d68:	b963      	cbnz	r3, 8014d84 <_dtoa_r+0x954>
 8014d6a:	4631      	mov	r1, r6
 8014d6c:	2205      	movs	r2, #5
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f000 f9fe 	bl	8015170 <__multadd>
 8014d74:	4601      	mov	r1, r0
 8014d76:	4606      	mov	r6, r0
 8014d78:	4650      	mov	r0, sl
 8014d7a:	f000 fc5d 	bl	8015638 <__mcmp>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	f73f adbb 	bgt.w	80148fa <_dtoa_r+0x4ca>
 8014d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d86:	9d00      	ldr	r5, [sp, #0]
 8014d88:	ea6f 0b03 	mvn.w	fp, r3
 8014d8c:	f04f 0800 	mov.w	r8, #0
 8014d90:	4631      	mov	r1, r6
 8014d92:	4620      	mov	r0, r4
 8014d94:	f000 f9ca 	bl	801512c <_Bfree>
 8014d98:	2f00      	cmp	r7, #0
 8014d9a:	f43f aeab 	beq.w	8014af4 <_dtoa_r+0x6c4>
 8014d9e:	f1b8 0f00 	cmp.w	r8, #0
 8014da2:	d005      	beq.n	8014db0 <_dtoa_r+0x980>
 8014da4:	45b8      	cmp	r8, r7
 8014da6:	d003      	beq.n	8014db0 <_dtoa_r+0x980>
 8014da8:	4641      	mov	r1, r8
 8014daa:	4620      	mov	r0, r4
 8014dac:	f000 f9be 	bl	801512c <_Bfree>
 8014db0:	4639      	mov	r1, r7
 8014db2:	4620      	mov	r0, r4
 8014db4:	f000 f9ba 	bl	801512c <_Bfree>
 8014db8:	e69c      	b.n	8014af4 <_dtoa_r+0x6c4>
 8014dba:	2600      	movs	r6, #0
 8014dbc:	4637      	mov	r7, r6
 8014dbe:	e7e1      	b.n	8014d84 <_dtoa_r+0x954>
 8014dc0:	46bb      	mov	fp, r7
 8014dc2:	4637      	mov	r7, r6
 8014dc4:	e599      	b.n	80148fa <_dtoa_r+0x4ca>
 8014dc6:	bf00      	nop
 8014dc8:	40240000 	.word	0x40240000
 8014dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f000 80c8 	beq.w	8014f64 <_dtoa_r+0xb34>
 8014dd4:	9b04      	ldr	r3, [sp, #16]
 8014dd6:	9301      	str	r3, [sp, #4]
 8014dd8:	2d00      	cmp	r5, #0
 8014dda:	dd05      	ble.n	8014de8 <_dtoa_r+0x9b8>
 8014ddc:	4639      	mov	r1, r7
 8014dde:	462a      	mov	r2, r5
 8014de0:	4620      	mov	r0, r4
 8014de2:	f000 fbbd 	bl	8015560 <__lshift>
 8014de6:	4607      	mov	r7, r0
 8014de8:	f1b8 0f00 	cmp.w	r8, #0
 8014dec:	d05b      	beq.n	8014ea6 <_dtoa_r+0xa76>
 8014dee:	6879      	ldr	r1, [r7, #4]
 8014df0:	4620      	mov	r0, r4
 8014df2:	f000 f95b 	bl	80150ac <_Balloc>
 8014df6:	4605      	mov	r5, r0
 8014df8:	b928      	cbnz	r0, 8014e06 <_dtoa_r+0x9d6>
 8014dfa:	4b83      	ldr	r3, [pc, #524]	; (8015008 <_dtoa_r+0xbd8>)
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014e02:	f7ff bb2e 	b.w	8014462 <_dtoa_r+0x32>
 8014e06:	693a      	ldr	r2, [r7, #16]
 8014e08:	3202      	adds	r2, #2
 8014e0a:	0092      	lsls	r2, r2, #2
 8014e0c:	f107 010c 	add.w	r1, r7, #12
 8014e10:	300c      	adds	r0, #12
 8014e12:	f7ff fa70 	bl	80142f6 <memcpy>
 8014e16:	2201      	movs	r2, #1
 8014e18:	4629      	mov	r1, r5
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f000 fba0 	bl	8015560 <__lshift>
 8014e20:	9b00      	ldr	r3, [sp, #0]
 8014e22:	3301      	adds	r3, #1
 8014e24:	9304      	str	r3, [sp, #16]
 8014e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	9308      	str	r3, [sp, #32]
 8014e2e:	9b02      	ldr	r3, [sp, #8]
 8014e30:	f003 0301 	and.w	r3, r3, #1
 8014e34:	46b8      	mov	r8, r7
 8014e36:	9306      	str	r3, [sp, #24]
 8014e38:	4607      	mov	r7, r0
 8014e3a:	9b04      	ldr	r3, [sp, #16]
 8014e3c:	4631      	mov	r1, r6
 8014e3e:	3b01      	subs	r3, #1
 8014e40:	4650      	mov	r0, sl
 8014e42:	9301      	str	r3, [sp, #4]
 8014e44:	f7ff fa6c 	bl	8014320 <quorem>
 8014e48:	4641      	mov	r1, r8
 8014e4a:	9002      	str	r0, [sp, #8]
 8014e4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014e50:	4650      	mov	r0, sl
 8014e52:	f000 fbf1 	bl	8015638 <__mcmp>
 8014e56:	463a      	mov	r2, r7
 8014e58:	9005      	str	r0, [sp, #20]
 8014e5a:	4631      	mov	r1, r6
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f000 fc07 	bl	8015670 <__mdiff>
 8014e62:	68c2      	ldr	r2, [r0, #12]
 8014e64:	4605      	mov	r5, r0
 8014e66:	bb02      	cbnz	r2, 8014eaa <_dtoa_r+0xa7a>
 8014e68:	4601      	mov	r1, r0
 8014e6a:	4650      	mov	r0, sl
 8014e6c:	f000 fbe4 	bl	8015638 <__mcmp>
 8014e70:	4602      	mov	r2, r0
 8014e72:	4629      	mov	r1, r5
 8014e74:	4620      	mov	r0, r4
 8014e76:	9209      	str	r2, [sp, #36]	; 0x24
 8014e78:	f000 f958 	bl	801512c <_Bfree>
 8014e7c:	9b07      	ldr	r3, [sp, #28]
 8014e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e80:	9d04      	ldr	r5, [sp, #16]
 8014e82:	ea43 0102 	orr.w	r1, r3, r2
 8014e86:	9b06      	ldr	r3, [sp, #24]
 8014e88:	4319      	orrs	r1, r3
 8014e8a:	d110      	bne.n	8014eae <_dtoa_r+0xa7e>
 8014e8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014e90:	d029      	beq.n	8014ee6 <_dtoa_r+0xab6>
 8014e92:	9b05      	ldr	r3, [sp, #20]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	dd02      	ble.n	8014e9e <_dtoa_r+0xa6e>
 8014e98:	9b02      	ldr	r3, [sp, #8]
 8014e9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014e9e:	9b01      	ldr	r3, [sp, #4]
 8014ea0:	f883 9000 	strb.w	r9, [r3]
 8014ea4:	e774      	b.n	8014d90 <_dtoa_r+0x960>
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	e7ba      	b.n	8014e20 <_dtoa_r+0x9f0>
 8014eaa:	2201      	movs	r2, #1
 8014eac:	e7e1      	b.n	8014e72 <_dtoa_r+0xa42>
 8014eae:	9b05      	ldr	r3, [sp, #20]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	db04      	blt.n	8014ebe <_dtoa_r+0xa8e>
 8014eb4:	9907      	ldr	r1, [sp, #28]
 8014eb6:	430b      	orrs	r3, r1
 8014eb8:	9906      	ldr	r1, [sp, #24]
 8014eba:	430b      	orrs	r3, r1
 8014ebc:	d120      	bne.n	8014f00 <_dtoa_r+0xad0>
 8014ebe:	2a00      	cmp	r2, #0
 8014ec0:	dded      	ble.n	8014e9e <_dtoa_r+0xa6e>
 8014ec2:	4651      	mov	r1, sl
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f000 fb4a 	bl	8015560 <__lshift>
 8014ecc:	4631      	mov	r1, r6
 8014ece:	4682      	mov	sl, r0
 8014ed0:	f000 fbb2 	bl	8015638 <__mcmp>
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	dc03      	bgt.n	8014ee0 <_dtoa_r+0xab0>
 8014ed8:	d1e1      	bne.n	8014e9e <_dtoa_r+0xa6e>
 8014eda:	f019 0f01 	tst.w	r9, #1
 8014ede:	d0de      	beq.n	8014e9e <_dtoa_r+0xa6e>
 8014ee0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014ee4:	d1d8      	bne.n	8014e98 <_dtoa_r+0xa68>
 8014ee6:	9a01      	ldr	r2, [sp, #4]
 8014ee8:	2339      	movs	r3, #57	; 0x39
 8014eea:	7013      	strb	r3, [r2, #0]
 8014eec:	462b      	mov	r3, r5
 8014eee:	461d      	mov	r5, r3
 8014ef0:	3b01      	subs	r3, #1
 8014ef2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014ef6:	2a39      	cmp	r2, #57	; 0x39
 8014ef8:	d06c      	beq.n	8014fd4 <_dtoa_r+0xba4>
 8014efa:	3201      	adds	r2, #1
 8014efc:	701a      	strb	r2, [r3, #0]
 8014efe:	e747      	b.n	8014d90 <_dtoa_r+0x960>
 8014f00:	2a00      	cmp	r2, #0
 8014f02:	dd07      	ble.n	8014f14 <_dtoa_r+0xae4>
 8014f04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014f08:	d0ed      	beq.n	8014ee6 <_dtoa_r+0xab6>
 8014f0a:	9a01      	ldr	r2, [sp, #4]
 8014f0c:	f109 0301 	add.w	r3, r9, #1
 8014f10:	7013      	strb	r3, [r2, #0]
 8014f12:	e73d      	b.n	8014d90 <_dtoa_r+0x960>
 8014f14:	9b04      	ldr	r3, [sp, #16]
 8014f16:	9a08      	ldr	r2, [sp, #32]
 8014f18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d043      	beq.n	8014fa8 <_dtoa_r+0xb78>
 8014f20:	4651      	mov	r1, sl
 8014f22:	2300      	movs	r3, #0
 8014f24:	220a      	movs	r2, #10
 8014f26:	4620      	mov	r0, r4
 8014f28:	f000 f922 	bl	8015170 <__multadd>
 8014f2c:	45b8      	cmp	r8, r7
 8014f2e:	4682      	mov	sl, r0
 8014f30:	f04f 0300 	mov.w	r3, #0
 8014f34:	f04f 020a 	mov.w	r2, #10
 8014f38:	4641      	mov	r1, r8
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	d107      	bne.n	8014f4e <_dtoa_r+0xb1e>
 8014f3e:	f000 f917 	bl	8015170 <__multadd>
 8014f42:	4680      	mov	r8, r0
 8014f44:	4607      	mov	r7, r0
 8014f46:	9b04      	ldr	r3, [sp, #16]
 8014f48:	3301      	adds	r3, #1
 8014f4a:	9304      	str	r3, [sp, #16]
 8014f4c:	e775      	b.n	8014e3a <_dtoa_r+0xa0a>
 8014f4e:	f000 f90f 	bl	8015170 <__multadd>
 8014f52:	4639      	mov	r1, r7
 8014f54:	4680      	mov	r8, r0
 8014f56:	2300      	movs	r3, #0
 8014f58:	220a      	movs	r2, #10
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f000 f908 	bl	8015170 <__multadd>
 8014f60:	4607      	mov	r7, r0
 8014f62:	e7f0      	b.n	8014f46 <_dtoa_r+0xb16>
 8014f64:	9b04      	ldr	r3, [sp, #16]
 8014f66:	9301      	str	r3, [sp, #4]
 8014f68:	9d00      	ldr	r5, [sp, #0]
 8014f6a:	4631      	mov	r1, r6
 8014f6c:	4650      	mov	r0, sl
 8014f6e:	f7ff f9d7 	bl	8014320 <quorem>
 8014f72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014f76:	9b00      	ldr	r3, [sp, #0]
 8014f78:	f805 9b01 	strb.w	r9, [r5], #1
 8014f7c:	1aea      	subs	r2, r5, r3
 8014f7e:	9b01      	ldr	r3, [sp, #4]
 8014f80:	4293      	cmp	r3, r2
 8014f82:	dd07      	ble.n	8014f94 <_dtoa_r+0xb64>
 8014f84:	4651      	mov	r1, sl
 8014f86:	2300      	movs	r3, #0
 8014f88:	220a      	movs	r2, #10
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f000 f8f0 	bl	8015170 <__multadd>
 8014f90:	4682      	mov	sl, r0
 8014f92:	e7ea      	b.n	8014f6a <_dtoa_r+0xb3a>
 8014f94:	9b01      	ldr	r3, [sp, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	bfc8      	it	gt
 8014f9a:	461d      	movgt	r5, r3
 8014f9c:	9b00      	ldr	r3, [sp, #0]
 8014f9e:	bfd8      	it	le
 8014fa0:	2501      	movle	r5, #1
 8014fa2:	441d      	add	r5, r3
 8014fa4:	f04f 0800 	mov.w	r8, #0
 8014fa8:	4651      	mov	r1, sl
 8014faa:	2201      	movs	r2, #1
 8014fac:	4620      	mov	r0, r4
 8014fae:	f000 fad7 	bl	8015560 <__lshift>
 8014fb2:	4631      	mov	r1, r6
 8014fb4:	4682      	mov	sl, r0
 8014fb6:	f000 fb3f 	bl	8015638 <__mcmp>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	dc96      	bgt.n	8014eec <_dtoa_r+0xabc>
 8014fbe:	d102      	bne.n	8014fc6 <_dtoa_r+0xb96>
 8014fc0:	f019 0f01 	tst.w	r9, #1
 8014fc4:	d192      	bne.n	8014eec <_dtoa_r+0xabc>
 8014fc6:	462b      	mov	r3, r5
 8014fc8:	461d      	mov	r5, r3
 8014fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fce:	2a30      	cmp	r2, #48	; 0x30
 8014fd0:	d0fa      	beq.n	8014fc8 <_dtoa_r+0xb98>
 8014fd2:	e6dd      	b.n	8014d90 <_dtoa_r+0x960>
 8014fd4:	9a00      	ldr	r2, [sp, #0]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d189      	bne.n	8014eee <_dtoa_r+0xabe>
 8014fda:	f10b 0b01 	add.w	fp, fp, #1
 8014fde:	2331      	movs	r3, #49	; 0x31
 8014fe0:	e796      	b.n	8014f10 <_dtoa_r+0xae0>
 8014fe2:	4b0a      	ldr	r3, [pc, #40]	; (801500c <_dtoa_r+0xbdc>)
 8014fe4:	f7ff ba99 	b.w	801451a <_dtoa_r+0xea>
 8014fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f47f aa6d 	bne.w	80144ca <_dtoa_r+0x9a>
 8014ff0:	4b07      	ldr	r3, [pc, #28]	; (8015010 <_dtoa_r+0xbe0>)
 8014ff2:	f7ff ba92 	b.w	801451a <_dtoa_r+0xea>
 8014ff6:	9b01      	ldr	r3, [sp, #4]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	dcb5      	bgt.n	8014f68 <_dtoa_r+0xb38>
 8014ffc:	9b07      	ldr	r3, [sp, #28]
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	f73f aeb1 	bgt.w	8014d66 <_dtoa_r+0x936>
 8015004:	e7b0      	b.n	8014f68 <_dtoa_r+0xb38>
 8015006:	bf00      	nop
 8015008:	08018a49 	.word	0x08018a49
 801500c:	080189a4 	.word	0x080189a4
 8015010:	080189cd 	.word	0x080189cd

08015014 <_free_r>:
 8015014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015016:	2900      	cmp	r1, #0
 8015018:	d044      	beq.n	80150a4 <_free_r+0x90>
 801501a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801501e:	9001      	str	r0, [sp, #4]
 8015020:	2b00      	cmp	r3, #0
 8015022:	f1a1 0404 	sub.w	r4, r1, #4
 8015026:	bfb8      	it	lt
 8015028:	18e4      	addlt	r4, r4, r3
 801502a:	f7fe f89b 	bl	8013164 <__malloc_lock>
 801502e:	4a1e      	ldr	r2, [pc, #120]	; (80150a8 <_free_r+0x94>)
 8015030:	9801      	ldr	r0, [sp, #4]
 8015032:	6813      	ldr	r3, [r2, #0]
 8015034:	b933      	cbnz	r3, 8015044 <_free_r+0x30>
 8015036:	6063      	str	r3, [r4, #4]
 8015038:	6014      	str	r4, [r2, #0]
 801503a:	b003      	add	sp, #12
 801503c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015040:	f7fe b896 	b.w	8013170 <__malloc_unlock>
 8015044:	42a3      	cmp	r3, r4
 8015046:	d908      	bls.n	801505a <_free_r+0x46>
 8015048:	6825      	ldr	r5, [r4, #0]
 801504a:	1961      	adds	r1, r4, r5
 801504c:	428b      	cmp	r3, r1
 801504e:	bf01      	itttt	eq
 8015050:	6819      	ldreq	r1, [r3, #0]
 8015052:	685b      	ldreq	r3, [r3, #4]
 8015054:	1949      	addeq	r1, r1, r5
 8015056:	6021      	streq	r1, [r4, #0]
 8015058:	e7ed      	b.n	8015036 <_free_r+0x22>
 801505a:	461a      	mov	r2, r3
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	b10b      	cbz	r3, 8015064 <_free_r+0x50>
 8015060:	42a3      	cmp	r3, r4
 8015062:	d9fa      	bls.n	801505a <_free_r+0x46>
 8015064:	6811      	ldr	r1, [r2, #0]
 8015066:	1855      	adds	r5, r2, r1
 8015068:	42a5      	cmp	r5, r4
 801506a:	d10b      	bne.n	8015084 <_free_r+0x70>
 801506c:	6824      	ldr	r4, [r4, #0]
 801506e:	4421      	add	r1, r4
 8015070:	1854      	adds	r4, r2, r1
 8015072:	42a3      	cmp	r3, r4
 8015074:	6011      	str	r1, [r2, #0]
 8015076:	d1e0      	bne.n	801503a <_free_r+0x26>
 8015078:	681c      	ldr	r4, [r3, #0]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	6053      	str	r3, [r2, #4]
 801507e:	440c      	add	r4, r1
 8015080:	6014      	str	r4, [r2, #0]
 8015082:	e7da      	b.n	801503a <_free_r+0x26>
 8015084:	d902      	bls.n	801508c <_free_r+0x78>
 8015086:	230c      	movs	r3, #12
 8015088:	6003      	str	r3, [r0, #0]
 801508a:	e7d6      	b.n	801503a <_free_r+0x26>
 801508c:	6825      	ldr	r5, [r4, #0]
 801508e:	1961      	adds	r1, r4, r5
 8015090:	428b      	cmp	r3, r1
 8015092:	bf04      	itt	eq
 8015094:	6819      	ldreq	r1, [r3, #0]
 8015096:	685b      	ldreq	r3, [r3, #4]
 8015098:	6063      	str	r3, [r4, #4]
 801509a:	bf04      	itt	eq
 801509c:	1949      	addeq	r1, r1, r5
 801509e:	6021      	streq	r1, [r4, #0]
 80150a0:	6054      	str	r4, [r2, #4]
 80150a2:	e7ca      	b.n	801503a <_free_r+0x26>
 80150a4:	b003      	add	sp, #12
 80150a6:	bd30      	pop	{r4, r5, pc}
 80150a8:	20000998 	.word	0x20000998

080150ac <_Balloc>:
 80150ac:	b570      	push	{r4, r5, r6, lr}
 80150ae:	69c6      	ldr	r6, [r0, #28]
 80150b0:	4604      	mov	r4, r0
 80150b2:	460d      	mov	r5, r1
 80150b4:	b976      	cbnz	r6, 80150d4 <_Balloc+0x28>
 80150b6:	2010      	movs	r0, #16
 80150b8:	f7fd ffa4 	bl	8013004 <malloc>
 80150bc:	4602      	mov	r2, r0
 80150be:	61e0      	str	r0, [r4, #28]
 80150c0:	b920      	cbnz	r0, 80150cc <_Balloc+0x20>
 80150c2:	4b18      	ldr	r3, [pc, #96]	; (8015124 <_Balloc+0x78>)
 80150c4:	4818      	ldr	r0, [pc, #96]	; (8015128 <_Balloc+0x7c>)
 80150c6:	216b      	movs	r1, #107	; 0x6b
 80150c8:	f7fd ff6c 	bl	8012fa4 <__assert_func>
 80150cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150d0:	6006      	str	r6, [r0, #0]
 80150d2:	60c6      	str	r6, [r0, #12]
 80150d4:	69e6      	ldr	r6, [r4, #28]
 80150d6:	68f3      	ldr	r3, [r6, #12]
 80150d8:	b183      	cbz	r3, 80150fc <_Balloc+0x50>
 80150da:	69e3      	ldr	r3, [r4, #28]
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80150e2:	b9b8      	cbnz	r0, 8015114 <_Balloc+0x68>
 80150e4:	2101      	movs	r1, #1
 80150e6:	fa01 f605 	lsl.w	r6, r1, r5
 80150ea:	1d72      	adds	r2, r6, #5
 80150ec:	0092      	lsls	r2, r2, #2
 80150ee:	4620      	mov	r0, r4
 80150f0:	f001 ff1a 	bl	8016f28 <_calloc_r>
 80150f4:	b160      	cbz	r0, 8015110 <_Balloc+0x64>
 80150f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80150fa:	e00e      	b.n	801511a <_Balloc+0x6e>
 80150fc:	2221      	movs	r2, #33	; 0x21
 80150fe:	2104      	movs	r1, #4
 8015100:	4620      	mov	r0, r4
 8015102:	f001 ff11 	bl	8016f28 <_calloc_r>
 8015106:	69e3      	ldr	r3, [r4, #28]
 8015108:	60f0      	str	r0, [r6, #12]
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1e4      	bne.n	80150da <_Balloc+0x2e>
 8015110:	2000      	movs	r0, #0
 8015112:	bd70      	pop	{r4, r5, r6, pc}
 8015114:	6802      	ldr	r2, [r0, #0]
 8015116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801511a:	2300      	movs	r3, #0
 801511c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015120:	e7f7      	b.n	8015112 <_Balloc+0x66>
 8015122:	bf00      	nop
 8015124:	080189da 	.word	0x080189da
 8015128:	08018a5a 	.word	0x08018a5a

0801512c <_Bfree>:
 801512c:	b570      	push	{r4, r5, r6, lr}
 801512e:	69c6      	ldr	r6, [r0, #28]
 8015130:	4605      	mov	r5, r0
 8015132:	460c      	mov	r4, r1
 8015134:	b976      	cbnz	r6, 8015154 <_Bfree+0x28>
 8015136:	2010      	movs	r0, #16
 8015138:	f7fd ff64 	bl	8013004 <malloc>
 801513c:	4602      	mov	r2, r0
 801513e:	61e8      	str	r0, [r5, #28]
 8015140:	b920      	cbnz	r0, 801514c <_Bfree+0x20>
 8015142:	4b09      	ldr	r3, [pc, #36]	; (8015168 <_Bfree+0x3c>)
 8015144:	4809      	ldr	r0, [pc, #36]	; (801516c <_Bfree+0x40>)
 8015146:	218f      	movs	r1, #143	; 0x8f
 8015148:	f7fd ff2c 	bl	8012fa4 <__assert_func>
 801514c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015150:	6006      	str	r6, [r0, #0]
 8015152:	60c6      	str	r6, [r0, #12]
 8015154:	b13c      	cbz	r4, 8015166 <_Bfree+0x3a>
 8015156:	69eb      	ldr	r3, [r5, #28]
 8015158:	6862      	ldr	r2, [r4, #4]
 801515a:	68db      	ldr	r3, [r3, #12]
 801515c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015160:	6021      	str	r1, [r4, #0]
 8015162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015166:	bd70      	pop	{r4, r5, r6, pc}
 8015168:	080189da 	.word	0x080189da
 801516c:	08018a5a 	.word	0x08018a5a

08015170 <__multadd>:
 8015170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015174:	690d      	ldr	r5, [r1, #16]
 8015176:	4607      	mov	r7, r0
 8015178:	460c      	mov	r4, r1
 801517a:	461e      	mov	r6, r3
 801517c:	f101 0c14 	add.w	ip, r1, #20
 8015180:	2000      	movs	r0, #0
 8015182:	f8dc 3000 	ldr.w	r3, [ip]
 8015186:	b299      	uxth	r1, r3
 8015188:	fb02 6101 	mla	r1, r2, r1, r6
 801518c:	0c1e      	lsrs	r6, r3, #16
 801518e:	0c0b      	lsrs	r3, r1, #16
 8015190:	fb02 3306 	mla	r3, r2, r6, r3
 8015194:	b289      	uxth	r1, r1
 8015196:	3001      	adds	r0, #1
 8015198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801519c:	4285      	cmp	r5, r0
 801519e:	f84c 1b04 	str.w	r1, [ip], #4
 80151a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80151a6:	dcec      	bgt.n	8015182 <__multadd+0x12>
 80151a8:	b30e      	cbz	r6, 80151ee <__multadd+0x7e>
 80151aa:	68a3      	ldr	r3, [r4, #8]
 80151ac:	42ab      	cmp	r3, r5
 80151ae:	dc19      	bgt.n	80151e4 <__multadd+0x74>
 80151b0:	6861      	ldr	r1, [r4, #4]
 80151b2:	4638      	mov	r0, r7
 80151b4:	3101      	adds	r1, #1
 80151b6:	f7ff ff79 	bl	80150ac <_Balloc>
 80151ba:	4680      	mov	r8, r0
 80151bc:	b928      	cbnz	r0, 80151ca <__multadd+0x5a>
 80151be:	4602      	mov	r2, r0
 80151c0:	4b0c      	ldr	r3, [pc, #48]	; (80151f4 <__multadd+0x84>)
 80151c2:	480d      	ldr	r0, [pc, #52]	; (80151f8 <__multadd+0x88>)
 80151c4:	21ba      	movs	r1, #186	; 0xba
 80151c6:	f7fd feed 	bl	8012fa4 <__assert_func>
 80151ca:	6922      	ldr	r2, [r4, #16]
 80151cc:	3202      	adds	r2, #2
 80151ce:	f104 010c 	add.w	r1, r4, #12
 80151d2:	0092      	lsls	r2, r2, #2
 80151d4:	300c      	adds	r0, #12
 80151d6:	f7ff f88e 	bl	80142f6 <memcpy>
 80151da:	4621      	mov	r1, r4
 80151dc:	4638      	mov	r0, r7
 80151de:	f7ff ffa5 	bl	801512c <_Bfree>
 80151e2:	4644      	mov	r4, r8
 80151e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80151e8:	3501      	adds	r5, #1
 80151ea:	615e      	str	r6, [r3, #20]
 80151ec:	6125      	str	r5, [r4, #16]
 80151ee:	4620      	mov	r0, r4
 80151f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f4:	08018a49 	.word	0x08018a49
 80151f8:	08018a5a 	.word	0x08018a5a

080151fc <__s2b>:
 80151fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015200:	460c      	mov	r4, r1
 8015202:	4615      	mov	r5, r2
 8015204:	461f      	mov	r7, r3
 8015206:	2209      	movs	r2, #9
 8015208:	3308      	adds	r3, #8
 801520a:	4606      	mov	r6, r0
 801520c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015210:	2100      	movs	r1, #0
 8015212:	2201      	movs	r2, #1
 8015214:	429a      	cmp	r2, r3
 8015216:	db09      	blt.n	801522c <__s2b+0x30>
 8015218:	4630      	mov	r0, r6
 801521a:	f7ff ff47 	bl	80150ac <_Balloc>
 801521e:	b940      	cbnz	r0, 8015232 <__s2b+0x36>
 8015220:	4602      	mov	r2, r0
 8015222:	4b19      	ldr	r3, [pc, #100]	; (8015288 <__s2b+0x8c>)
 8015224:	4819      	ldr	r0, [pc, #100]	; (801528c <__s2b+0x90>)
 8015226:	21d3      	movs	r1, #211	; 0xd3
 8015228:	f7fd febc 	bl	8012fa4 <__assert_func>
 801522c:	0052      	lsls	r2, r2, #1
 801522e:	3101      	adds	r1, #1
 8015230:	e7f0      	b.n	8015214 <__s2b+0x18>
 8015232:	9b08      	ldr	r3, [sp, #32]
 8015234:	6143      	str	r3, [r0, #20]
 8015236:	2d09      	cmp	r5, #9
 8015238:	f04f 0301 	mov.w	r3, #1
 801523c:	6103      	str	r3, [r0, #16]
 801523e:	dd16      	ble.n	801526e <__s2b+0x72>
 8015240:	f104 0909 	add.w	r9, r4, #9
 8015244:	46c8      	mov	r8, r9
 8015246:	442c      	add	r4, r5
 8015248:	f818 3b01 	ldrb.w	r3, [r8], #1
 801524c:	4601      	mov	r1, r0
 801524e:	3b30      	subs	r3, #48	; 0x30
 8015250:	220a      	movs	r2, #10
 8015252:	4630      	mov	r0, r6
 8015254:	f7ff ff8c 	bl	8015170 <__multadd>
 8015258:	45a0      	cmp	r8, r4
 801525a:	d1f5      	bne.n	8015248 <__s2b+0x4c>
 801525c:	f1a5 0408 	sub.w	r4, r5, #8
 8015260:	444c      	add	r4, r9
 8015262:	1b2d      	subs	r5, r5, r4
 8015264:	1963      	adds	r3, r4, r5
 8015266:	42bb      	cmp	r3, r7
 8015268:	db04      	blt.n	8015274 <__s2b+0x78>
 801526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801526e:	340a      	adds	r4, #10
 8015270:	2509      	movs	r5, #9
 8015272:	e7f6      	b.n	8015262 <__s2b+0x66>
 8015274:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015278:	4601      	mov	r1, r0
 801527a:	3b30      	subs	r3, #48	; 0x30
 801527c:	220a      	movs	r2, #10
 801527e:	4630      	mov	r0, r6
 8015280:	f7ff ff76 	bl	8015170 <__multadd>
 8015284:	e7ee      	b.n	8015264 <__s2b+0x68>
 8015286:	bf00      	nop
 8015288:	08018a49 	.word	0x08018a49
 801528c:	08018a5a 	.word	0x08018a5a

08015290 <__hi0bits>:
 8015290:	0c03      	lsrs	r3, r0, #16
 8015292:	041b      	lsls	r3, r3, #16
 8015294:	b9d3      	cbnz	r3, 80152cc <__hi0bits+0x3c>
 8015296:	0400      	lsls	r0, r0, #16
 8015298:	2310      	movs	r3, #16
 801529a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801529e:	bf04      	itt	eq
 80152a0:	0200      	lsleq	r0, r0, #8
 80152a2:	3308      	addeq	r3, #8
 80152a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80152a8:	bf04      	itt	eq
 80152aa:	0100      	lsleq	r0, r0, #4
 80152ac:	3304      	addeq	r3, #4
 80152ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80152b2:	bf04      	itt	eq
 80152b4:	0080      	lsleq	r0, r0, #2
 80152b6:	3302      	addeq	r3, #2
 80152b8:	2800      	cmp	r0, #0
 80152ba:	db05      	blt.n	80152c8 <__hi0bits+0x38>
 80152bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80152c0:	f103 0301 	add.w	r3, r3, #1
 80152c4:	bf08      	it	eq
 80152c6:	2320      	moveq	r3, #32
 80152c8:	4618      	mov	r0, r3
 80152ca:	4770      	bx	lr
 80152cc:	2300      	movs	r3, #0
 80152ce:	e7e4      	b.n	801529a <__hi0bits+0xa>

080152d0 <__lo0bits>:
 80152d0:	6803      	ldr	r3, [r0, #0]
 80152d2:	f013 0207 	ands.w	r2, r3, #7
 80152d6:	d00c      	beq.n	80152f2 <__lo0bits+0x22>
 80152d8:	07d9      	lsls	r1, r3, #31
 80152da:	d422      	bmi.n	8015322 <__lo0bits+0x52>
 80152dc:	079a      	lsls	r2, r3, #30
 80152de:	bf49      	itett	mi
 80152e0:	085b      	lsrmi	r3, r3, #1
 80152e2:	089b      	lsrpl	r3, r3, #2
 80152e4:	6003      	strmi	r3, [r0, #0]
 80152e6:	2201      	movmi	r2, #1
 80152e8:	bf5c      	itt	pl
 80152ea:	6003      	strpl	r3, [r0, #0]
 80152ec:	2202      	movpl	r2, #2
 80152ee:	4610      	mov	r0, r2
 80152f0:	4770      	bx	lr
 80152f2:	b299      	uxth	r1, r3
 80152f4:	b909      	cbnz	r1, 80152fa <__lo0bits+0x2a>
 80152f6:	0c1b      	lsrs	r3, r3, #16
 80152f8:	2210      	movs	r2, #16
 80152fa:	b2d9      	uxtb	r1, r3
 80152fc:	b909      	cbnz	r1, 8015302 <__lo0bits+0x32>
 80152fe:	3208      	adds	r2, #8
 8015300:	0a1b      	lsrs	r3, r3, #8
 8015302:	0719      	lsls	r1, r3, #28
 8015304:	bf04      	itt	eq
 8015306:	091b      	lsreq	r3, r3, #4
 8015308:	3204      	addeq	r2, #4
 801530a:	0799      	lsls	r1, r3, #30
 801530c:	bf04      	itt	eq
 801530e:	089b      	lsreq	r3, r3, #2
 8015310:	3202      	addeq	r2, #2
 8015312:	07d9      	lsls	r1, r3, #31
 8015314:	d403      	bmi.n	801531e <__lo0bits+0x4e>
 8015316:	085b      	lsrs	r3, r3, #1
 8015318:	f102 0201 	add.w	r2, r2, #1
 801531c:	d003      	beq.n	8015326 <__lo0bits+0x56>
 801531e:	6003      	str	r3, [r0, #0]
 8015320:	e7e5      	b.n	80152ee <__lo0bits+0x1e>
 8015322:	2200      	movs	r2, #0
 8015324:	e7e3      	b.n	80152ee <__lo0bits+0x1e>
 8015326:	2220      	movs	r2, #32
 8015328:	e7e1      	b.n	80152ee <__lo0bits+0x1e>
	...

0801532c <__i2b>:
 801532c:	b510      	push	{r4, lr}
 801532e:	460c      	mov	r4, r1
 8015330:	2101      	movs	r1, #1
 8015332:	f7ff febb 	bl	80150ac <_Balloc>
 8015336:	4602      	mov	r2, r0
 8015338:	b928      	cbnz	r0, 8015346 <__i2b+0x1a>
 801533a:	4b05      	ldr	r3, [pc, #20]	; (8015350 <__i2b+0x24>)
 801533c:	4805      	ldr	r0, [pc, #20]	; (8015354 <__i2b+0x28>)
 801533e:	f240 1145 	movw	r1, #325	; 0x145
 8015342:	f7fd fe2f 	bl	8012fa4 <__assert_func>
 8015346:	2301      	movs	r3, #1
 8015348:	6144      	str	r4, [r0, #20]
 801534a:	6103      	str	r3, [r0, #16]
 801534c:	bd10      	pop	{r4, pc}
 801534e:	bf00      	nop
 8015350:	08018a49 	.word	0x08018a49
 8015354:	08018a5a 	.word	0x08018a5a

08015358 <__multiply>:
 8015358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535c:	4691      	mov	r9, r2
 801535e:	690a      	ldr	r2, [r1, #16]
 8015360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015364:	429a      	cmp	r2, r3
 8015366:	bfb8      	it	lt
 8015368:	460b      	movlt	r3, r1
 801536a:	460c      	mov	r4, r1
 801536c:	bfbc      	itt	lt
 801536e:	464c      	movlt	r4, r9
 8015370:	4699      	movlt	r9, r3
 8015372:	6927      	ldr	r7, [r4, #16]
 8015374:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015378:	68a3      	ldr	r3, [r4, #8]
 801537a:	6861      	ldr	r1, [r4, #4]
 801537c:	eb07 060a 	add.w	r6, r7, sl
 8015380:	42b3      	cmp	r3, r6
 8015382:	b085      	sub	sp, #20
 8015384:	bfb8      	it	lt
 8015386:	3101      	addlt	r1, #1
 8015388:	f7ff fe90 	bl	80150ac <_Balloc>
 801538c:	b930      	cbnz	r0, 801539c <__multiply+0x44>
 801538e:	4602      	mov	r2, r0
 8015390:	4b44      	ldr	r3, [pc, #272]	; (80154a4 <__multiply+0x14c>)
 8015392:	4845      	ldr	r0, [pc, #276]	; (80154a8 <__multiply+0x150>)
 8015394:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015398:	f7fd fe04 	bl	8012fa4 <__assert_func>
 801539c:	f100 0514 	add.w	r5, r0, #20
 80153a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80153a4:	462b      	mov	r3, r5
 80153a6:	2200      	movs	r2, #0
 80153a8:	4543      	cmp	r3, r8
 80153aa:	d321      	bcc.n	80153f0 <__multiply+0x98>
 80153ac:	f104 0314 	add.w	r3, r4, #20
 80153b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80153b4:	f109 0314 	add.w	r3, r9, #20
 80153b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80153bc:	9202      	str	r2, [sp, #8]
 80153be:	1b3a      	subs	r2, r7, r4
 80153c0:	3a15      	subs	r2, #21
 80153c2:	f022 0203 	bic.w	r2, r2, #3
 80153c6:	3204      	adds	r2, #4
 80153c8:	f104 0115 	add.w	r1, r4, #21
 80153cc:	428f      	cmp	r7, r1
 80153ce:	bf38      	it	cc
 80153d0:	2204      	movcc	r2, #4
 80153d2:	9201      	str	r2, [sp, #4]
 80153d4:	9a02      	ldr	r2, [sp, #8]
 80153d6:	9303      	str	r3, [sp, #12]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d80c      	bhi.n	80153f6 <__multiply+0x9e>
 80153dc:	2e00      	cmp	r6, #0
 80153de:	dd03      	ble.n	80153e8 <__multiply+0x90>
 80153e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d05b      	beq.n	80154a0 <__multiply+0x148>
 80153e8:	6106      	str	r6, [r0, #16]
 80153ea:	b005      	add	sp, #20
 80153ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f0:	f843 2b04 	str.w	r2, [r3], #4
 80153f4:	e7d8      	b.n	80153a8 <__multiply+0x50>
 80153f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80153fa:	f1ba 0f00 	cmp.w	sl, #0
 80153fe:	d024      	beq.n	801544a <__multiply+0xf2>
 8015400:	f104 0e14 	add.w	lr, r4, #20
 8015404:	46a9      	mov	r9, r5
 8015406:	f04f 0c00 	mov.w	ip, #0
 801540a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801540e:	f8d9 1000 	ldr.w	r1, [r9]
 8015412:	fa1f fb82 	uxth.w	fp, r2
 8015416:	b289      	uxth	r1, r1
 8015418:	fb0a 110b 	mla	r1, sl, fp, r1
 801541c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015420:	f8d9 2000 	ldr.w	r2, [r9]
 8015424:	4461      	add	r1, ip
 8015426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801542a:	fb0a c20b 	mla	r2, sl, fp, ip
 801542e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015432:	b289      	uxth	r1, r1
 8015434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015438:	4577      	cmp	r7, lr
 801543a:	f849 1b04 	str.w	r1, [r9], #4
 801543e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015442:	d8e2      	bhi.n	801540a <__multiply+0xb2>
 8015444:	9a01      	ldr	r2, [sp, #4]
 8015446:	f845 c002 	str.w	ip, [r5, r2]
 801544a:	9a03      	ldr	r2, [sp, #12]
 801544c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015450:	3304      	adds	r3, #4
 8015452:	f1b9 0f00 	cmp.w	r9, #0
 8015456:	d021      	beq.n	801549c <__multiply+0x144>
 8015458:	6829      	ldr	r1, [r5, #0]
 801545a:	f104 0c14 	add.w	ip, r4, #20
 801545e:	46ae      	mov	lr, r5
 8015460:	f04f 0a00 	mov.w	sl, #0
 8015464:	f8bc b000 	ldrh.w	fp, [ip]
 8015468:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801546c:	fb09 220b 	mla	r2, r9, fp, r2
 8015470:	4452      	add	r2, sl
 8015472:	b289      	uxth	r1, r1
 8015474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015478:	f84e 1b04 	str.w	r1, [lr], #4
 801547c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015484:	f8be 1000 	ldrh.w	r1, [lr]
 8015488:	fb09 110a 	mla	r1, r9, sl, r1
 801548c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015490:	4567      	cmp	r7, ip
 8015492:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015496:	d8e5      	bhi.n	8015464 <__multiply+0x10c>
 8015498:	9a01      	ldr	r2, [sp, #4]
 801549a:	50a9      	str	r1, [r5, r2]
 801549c:	3504      	adds	r5, #4
 801549e:	e799      	b.n	80153d4 <__multiply+0x7c>
 80154a0:	3e01      	subs	r6, #1
 80154a2:	e79b      	b.n	80153dc <__multiply+0x84>
 80154a4:	08018a49 	.word	0x08018a49
 80154a8:	08018a5a 	.word	0x08018a5a

080154ac <__pow5mult>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	4615      	mov	r5, r2
 80154b2:	f012 0203 	ands.w	r2, r2, #3
 80154b6:	4606      	mov	r6, r0
 80154b8:	460f      	mov	r7, r1
 80154ba:	d007      	beq.n	80154cc <__pow5mult+0x20>
 80154bc:	4c25      	ldr	r4, [pc, #148]	; (8015554 <__pow5mult+0xa8>)
 80154be:	3a01      	subs	r2, #1
 80154c0:	2300      	movs	r3, #0
 80154c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154c6:	f7ff fe53 	bl	8015170 <__multadd>
 80154ca:	4607      	mov	r7, r0
 80154cc:	10ad      	asrs	r5, r5, #2
 80154ce:	d03d      	beq.n	801554c <__pow5mult+0xa0>
 80154d0:	69f4      	ldr	r4, [r6, #28]
 80154d2:	b97c      	cbnz	r4, 80154f4 <__pow5mult+0x48>
 80154d4:	2010      	movs	r0, #16
 80154d6:	f7fd fd95 	bl	8013004 <malloc>
 80154da:	4602      	mov	r2, r0
 80154dc:	61f0      	str	r0, [r6, #28]
 80154de:	b928      	cbnz	r0, 80154ec <__pow5mult+0x40>
 80154e0:	4b1d      	ldr	r3, [pc, #116]	; (8015558 <__pow5mult+0xac>)
 80154e2:	481e      	ldr	r0, [pc, #120]	; (801555c <__pow5mult+0xb0>)
 80154e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80154e8:	f7fd fd5c 	bl	8012fa4 <__assert_func>
 80154ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80154f0:	6004      	str	r4, [r0, #0]
 80154f2:	60c4      	str	r4, [r0, #12]
 80154f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80154f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80154fc:	b94c      	cbnz	r4, 8015512 <__pow5mult+0x66>
 80154fe:	f240 2171 	movw	r1, #625	; 0x271
 8015502:	4630      	mov	r0, r6
 8015504:	f7ff ff12 	bl	801532c <__i2b>
 8015508:	2300      	movs	r3, #0
 801550a:	f8c8 0008 	str.w	r0, [r8, #8]
 801550e:	4604      	mov	r4, r0
 8015510:	6003      	str	r3, [r0, #0]
 8015512:	f04f 0900 	mov.w	r9, #0
 8015516:	07eb      	lsls	r3, r5, #31
 8015518:	d50a      	bpl.n	8015530 <__pow5mult+0x84>
 801551a:	4639      	mov	r1, r7
 801551c:	4622      	mov	r2, r4
 801551e:	4630      	mov	r0, r6
 8015520:	f7ff ff1a 	bl	8015358 <__multiply>
 8015524:	4639      	mov	r1, r7
 8015526:	4680      	mov	r8, r0
 8015528:	4630      	mov	r0, r6
 801552a:	f7ff fdff 	bl	801512c <_Bfree>
 801552e:	4647      	mov	r7, r8
 8015530:	106d      	asrs	r5, r5, #1
 8015532:	d00b      	beq.n	801554c <__pow5mult+0xa0>
 8015534:	6820      	ldr	r0, [r4, #0]
 8015536:	b938      	cbnz	r0, 8015548 <__pow5mult+0x9c>
 8015538:	4622      	mov	r2, r4
 801553a:	4621      	mov	r1, r4
 801553c:	4630      	mov	r0, r6
 801553e:	f7ff ff0b 	bl	8015358 <__multiply>
 8015542:	6020      	str	r0, [r4, #0]
 8015544:	f8c0 9000 	str.w	r9, [r0]
 8015548:	4604      	mov	r4, r0
 801554a:	e7e4      	b.n	8015516 <__pow5mult+0x6a>
 801554c:	4638      	mov	r0, r7
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015552:	bf00      	nop
 8015554:	08018ba8 	.word	0x08018ba8
 8015558:	080189da 	.word	0x080189da
 801555c:	08018a5a 	.word	0x08018a5a

08015560 <__lshift>:
 8015560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015564:	460c      	mov	r4, r1
 8015566:	6849      	ldr	r1, [r1, #4]
 8015568:	6923      	ldr	r3, [r4, #16]
 801556a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801556e:	68a3      	ldr	r3, [r4, #8]
 8015570:	4607      	mov	r7, r0
 8015572:	4691      	mov	r9, r2
 8015574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015578:	f108 0601 	add.w	r6, r8, #1
 801557c:	42b3      	cmp	r3, r6
 801557e:	db0b      	blt.n	8015598 <__lshift+0x38>
 8015580:	4638      	mov	r0, r7
 8015582:	f7ff fd93 	bl	80150ac <_Balloc>
 8015586:	4605      	mov	r5, r0
 8015588:	b948      	cbnz	r0, 801559e <__lshift+0x3e>
 801558a:	4602      	mov	r2, r0
 801558c:	4b28      	ldr	r3, [pc, #160]	; (8015630 <__lshift+0xd0>)
 801558e:	4829      	ldr	r0, [pc, #164]	; (8015634 <__lshift+0xd4>)
 8015590:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015594:	f7fd fd06 	bl	8012fa4 <__assert_func>
 8015598:	3101      	adds	r1, #1
 801559a:	005b      	lsls	r3, r3, #1
 801559c:	e7ee      	b.n	801557c <__lshift+0x1c>
 801559e:	2300      	movs	r3, #0
 80155a0:	f100 0114 	add.w	r1, r0, #20
 80155a4:	f100 0210 	add.w	r2, r0, #16
 80155a8:	4618      	mov	r0, r3
 80155aa:	4553      	cmp	r3, sl
 80155ac:	db33      	blt.n	8015616 <__lshift+0xb6>
 80155ae:	6920      	ldr	r0, [r4, #16]
 80155b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80155b4:	f104 0314 	add.w	r3, r4, #20
 80155b8:	f019 091f 	ands.w	r9, r9, #31
 80155bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80155c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80155c4:	d02b      	beq.n	801561e <__lshift+0xbe>
 80155c6:	f1c9 0e20 	rsb	lr, r9, #32
 80155ca:	468a      	mov	sl, r1
 80155cc:	2200      	movs	r2, #0
 80155ce:	6818      	ldr	r0, [r3, #0]
 80155d0:	fa00 f009 	lsl.w	r0, r0, r9
 80155d4:	4310      	orrs	r0, r2
 80155d6:	f84a 0b04 	str.w	r0, [sl], #4
 80155da:	f853 2b04 	ldr.w	r2, [r3], #4
 80155de:	459c      	cmp	ip, r3
 80155e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80155e4:	d8f3      	bhi.n	80155ce <__lshift+0x6e>
 80155e6:	ebac 0304 	sub.w	r3, ip, r4
 80155ea:	3b15      	subs	r3, #21
 80155ec:	f023 0303 	bic.w	r3, r3, #3
 80155f0:	3304      	adds	r3, #4
 80155f2:	f104 0015 	add.w	r0, r4, #21
 80155f6:	4584      	cmp	ip, r0
 80155f8:	bf38      	it	cc
 80155fa:	2304      	movcc	r3, #4
 80155fc:	50ca      	str	r2, [r1, r3]
 80155fe:	b10a      	cbz	r2, 8015604 <__lshift+0xa4>
 8015600:	f108 0602 	add.w	r6, r8, #2
 8015604:	3e01      	subs	r6, #1
 8015606:	4638      	mov	r0, r7
 8015608:	612e      	str	r6, [r5, #16]
 801560a:	4621      	mov	r1, r4
 801560c:	f7ff fd8e 	bl	801512c <_Bfree>
 8015610:	4628      	mov	r0, r5
 8015612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015616:	f842 0f04 	str.w	r0, [r2, #4]!
 801561a:	3301      	adds	r3, #1
 801561c:	e7c5      	b.n	80155aa <__lshift+0x4a>
 801561e:	3904      	subs	r1, #4
 8015620:	f853 2b04 	ldr.w	r2, [r3], #4
 8015624:	f841 2f04 	str.w	r2, [r1, #4]!
 8015628:	459c      	cmp	ip, r3
 801562a:	d8f9      	bhi.n	8015620 <__lshift+0xc0>
 801562c:	e7ea      	b.n	8015604 <__lshift+0xa4>
 801562e:	bf00      	nop
 8015630:	08018a49 	.word	0x08018a49
 8015634:	08018a5a 	.word	0x08018a5a

08015638 <__mcmp>:
 8015638:	b530      	push	{r4, r5, lr}
 801563a:	6902      	ldr	r2, [r0, #16]
 801563c:	690c      	ldr	r4, [r1, #16]
 801563e:	1b12      	subs	r2, r2, r4
 8015640:	d10e      	bne.n	8015660 <__mcmp+0x28>
 8015642:	f100 0314 	add.w	r3, r0, #20
 8015646:	3114      	adds	r1, #20
 8015648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801564c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015658:	42a5      	cmp	r5, r4
 801565a:	d003      	beq.n	8015664 <__mcmp+0x2c>
 801565c:	d305      	bcc.n	801566a <__mcmp+0x32>
 801565e:	2201      	movs	r2, #1
 8015660:	4610      	mov	r0, r2
 8015662:	bd30      	pop	{r4, r5, pc}
 8015664:	4283      	cmp	r3, r0
 8015666:	d3f3      	bcc.n	8015650 <__mcmp+0x18>
 8015668:	e7fa      	b.n	8015660 <__mcmp+0x28>
 801566a:	f04f 32ff 	mov.w	r2, #4294967295
 801566e:	e7f7      	b.n	8015660 <__mcmp+0x28>

08015670 <__mdiff>:
 8015670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	460c      	mov	r4, r1
 8015676:	4606      	mov	r6, r0
 8015678:	4611      	mov	r1, r2
 801567a:	4620      	mov	r0, r4
 801567c:	4690      	mov	r8, r2
 801567e:	f7ff ffdb 	bl	8015638 <__mcmp>
 8015682:	1e05      	subs	r5, r0, #0
 8015684:	d110      	bne.n	80156a8 <__mdiff+0x38>
 8015686:	4629      	mov	r1, r5
 8015688:	4630      	mov	r0, r6
 801568a:	f7ff fd0f 	bl	80150ac <_Balloc>
 801568e:	b930      	cbnz	r0, 801569e <__mdiff+0x2e>
 8015690:	4b3a      	ldr	r3, [pc, #232]	; (801577c <__mdiff+0x10c>)
 8015692:	4602      	mov	r2, r0
 8015694:	f240 2137 	movw	r1, #567	; 0x237
 8015698:	4839      	ldr	r0, [pc, #228]	; (8015780 <__mdiff+0x110>)
 801569a:	f7fd fc83 	bl	8012fa4 <__assert_func>
 801569e:	2301      	movs	r3, #1
 80156a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80156a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a8:	bfa4      	itt	ge
 80156aa:	4643      	movge	r3, r8
 80156ac:	46a0      	movge	r8, r4
 80156ae:	4630      	mov	r0, r6
 80156b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80156b4:	bfa6      	itte	ge
 80156b6:	461c      	movge	r4, r3
 80156b8:	2500      	movge	r5, #0
 80156ba:	2501      	movlt	r5, #1
 80156bc:	f7ff fcf6 	bl	80150ac <_Balloc>
 80156c0:	b920      	cbnz	r0, 80156cc <__mdiff+0x5c>
 80156c2:	4b2e      	ldr	r3, [pc, #184]	; (801577c <__mdiff+0x10c>)
 80156c4:	4602      	mov	r2, r0
 80156c6:	f240 2145 	movw	r1, #581	; 0x245
 80156ca:	e7e5      	b.n	8015698 <__mdiff+0x28>
 80156cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80156d0:	6926      	ldr	r6, [r4, #16]
 80156d2:	60c5      	str	r5, [r0, #12]
 80156d4:	f104 0914 	add.w	r9, r4, #20
 80156d8:	f108 0514 	add.w	r5, r8, #20
 80156dc:	f100 0e14 	add.w	lr, r0, #20
 80156e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80156e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80156e8:	f108 0210 	add.w	r2, r8, #16
 80156ec:	46f2      	mov	sl, lr
 80156ee:	2100      	movs	r1, #0
 80156f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80156f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80156f8:	fa11 f88b 	uxtah	r8, r1, fp
 80156fc:	b299      	uxth	r1, r3
 80156fe:	0c1b      	lsrs	r3, r3, #16
 8015700:	eba8 0801 	sub.w	r8, r8, r1
 8015704:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015708:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801570c:	fa1f f888 	uxth.w	r8, r8
 8015710:	1419      	asrs	r1, r3, #16
 8015712:	454e      	cmp	r6, r9
 8015714:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015718:	f84a 3b04 	str.w	r3, [sl], #4
 801571c:	d8e8      	bhi.n	80156f0 <__mdiff+0x80>
 801571e:	1b33      	subs	r3, r6, r4
 8015720:	3b15      	subs	r3, #21
 8015722:	f023 0303 	bic.w	r3, r3, #3
 8015726:	3304      	adds	r3, #4
 8015728:	3415      	adds	r4, #21
 801572a:	42a6      	cmp	r6, r4
 801572c:	bf38      	it	cc
 801572e:	2304      	movcc	r3, #4
 8015730:	441d      	add	r5, r3
 8015732:	4473      	add	r3, lr
 8015734:	469e      	mov	lr, r3
 8015736:	462e      	mov	r6, r5
 8015738:	4566      	cmp	r6, ip
 801573a:	d30e      	bcc.n	801575a <__mdiff+0xea>
 801573c:	f10c 0203 	add.w	r2, ip, #3
 8015740:	1b52      	subs	r2, r2, r5
 8015742:	f022 0203 	bic.w	r2, r2, #3
 8015746:	3d03      	subs	r5, #3
 8015748:	45ac      	cmp	ip, r5
 801574a:	bf38      	it	cc
 801574c:	2200      	movcc	r2, #0
 801574e:	4413      	add	r3, r2
 8015750:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015754:	b17a      	cbz	r2, 8015776 <__mdiff+0x106>
 8015756:	6107      	str	r7, [r0, #16]
 8015758:	e7a4      	b.n	80156a4 <__mdiff+0x34>
 801575a:	f856 8b04 	ldr.w	r8, [r6], #4
 801575e:	fa11 f288 	uxtah	r2, r1, r8
 8015762:	1414      	asrs	r4, r2, #16
 8015764:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015768:	b292      	uxth	r2, r2
 801576a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801576e:	f84e 2b04 	str.w	r2, [lr], #4
 8015772:	1421      	asrs	r1, r4, #16
 8015774:	e7e0      	b.n	8015738 <__mdiff+0xc8>
 8015776:	3f01      	subs	r7, #1
 8015778:	e7ea      	b.n	8015750 <__mdiff+0xe0>
 801577a:	bf00      	nop
 801577c:	08018a49 	.word	0x08018a49
 8015780:	08018a5a 	.word	0x08018a5a

08015784 <__ulp>:
 8015784:	b082      	sub	sp, #8
 8015786:	ed8d 0b00 	vstr	d0, [sp]
 801578a:	9a01      	ldr	r2, [sp, #4]
 801578c:	4b0f      	ldr	r3, [pc, #60]	; (80157cc <__ulp+0x48>)
 801578e:	4013      	ands	r3, r2
 8015790:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015794:	2b00      	cmp	r3, #0
 8015796:	dc08      	bgt.n	80157aa <__ulp+0x26>
 8015798:	425b      	negs	r3, r3
 801579a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801579e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80157a2:	da04      	bge.n	80157ae <__ulp+0x2a>
 80157a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80157a8:	4113      	asrs	r3, r2
 80157aa:	2200      	movs	r2, #0
 80157ac:	e008      	b.n	80157c0 <__ulp+0x3c>
 80157ae:	f1a2 0314 	sub.w	r3, r2, #20
 80157b2:	2b1e      	cmp	r3, #30
 80157b4:	bfda      	itte	le
 80157b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80157ba:	40da      	lsrle	r2, r3
 80157bc:	2201      	movgt	r2, #1
 80157be:	2300      	movs	r3, #0
 80157c0:	4619      	mov	r1, r3
 80157c2:	4610      	mov	r0, r2
 80157c4:	ec41 0b10 	vmov	d0, r0, r1
 80157c8:	b002      	add	sp, #8
 80157ca:	4770      	bx	lr
 80157cc:	7ff00000 	.word	0x7ff00000

080157d0 <__b2d>:
 80157d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157d4:	6906      	ldr	r6, [r0, #16]
 80157d6:	f100 0814 	add.w	r8, r0, #20
 80157da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80157de:	1f37      	subs	r7, r6, #4
 80157e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80157e4:	4610      	mov	r0, r2
 80157e6:	f7ff fd53 	bl	8015290 <__hi0bits>
 80157ea:	f1c0 0320 	rsb	r3, r0, #32
 80157ee:	280a      	cmp	r0, #10
 80157f0:	600b      	str	r3, [r1, #0]
 80157f2:	491b      	ldr	r1, [pc, #108]	; (8015860 <__b2d+0x90>)
 80157f4:	dc15      	bgt.n	8015822 <__b2d+0x52>
 80157f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80157fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80157fe:	45b8      	cmp	r8, r7
 8015800:	ea43 0501 	orr.w	r5, r3, r1
 8015804:	bf34      	ite	cc
 8015806:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801580a:	2300      	movcs	r3, #0
 801580c:	3015      	adds	r0, #21
 801580e:	fa02 f000 	lsl.w	r0, r2, r0
 8015812:	fa23 f30c 	lsr.w	r3, r3, ip
 8015816:	4303      	orrs	r3, r0
 8015818:	461c      	mov	r4, r3
 801581a:	ec45 4b10 	vmov	d0, r4, r5
 801581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015822:	45b8      	cmp	r8, r7
 8015824:	bf3a      	itte	cc
 8015826:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801582a:	f1a6 0708 	subcc.w	r7, r6, #8
 801582e:	2300      	movcs	r3, #0
 8015830:	380b      	subs	r0, #11
 8015832:	d012      	beq.n	801585a <__b2d+0x8a>
 8015834:	f1c0 0120 	rsb	r1, r0, #32
 8015838:	fa23 f401 	lsr.w	r4, r3, r1
 801583c:	4082      	lsls	r2, r0
 801583e:	4322      	orrs	r2, r4
 8015840:	4547      	cmp	r7, r8
 8015842:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8015846:	bf8c      	ite	hi
 8015848:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801584c:	2200      	movls	r2, #0
 801584e:	4083      	lsls	r3, r0
 8015850:	40ca      	lsrs	r2, r1
 8015852:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015856:	4313      	orrs	r3, r2
 8015858:	e7de      	b.n	8015818 <__b2d+0x48>
 801585a:	ea42 0501 	orr.w	r5, r2, r1
 801585e:	e7db      	b.n	8015818 <__b2d+0x48>
 8015860:	3ff00000 	.word	0x3ff00000

08015864 <__d2b>:
 8015864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015868:	460f      	mov	r7, r1
 801586a:	2101      	movs	r1, #1
 801586c:	ec59 8b10 	vmov	r8, r9, d0
 8015870:	4616      	mov	r6, r2
 8015872:	f7ff fc1b 	bl	80150ac <_Balloc>
 8015876:	4604      	mov	r4, r0
 8015878:	b930      	cbnz	r0, 8015888 <__d2b+0x24>
 801587a:	4602      	mov	r2, r0
 801587c:	4b24      	ldr	r3, [pc, #144]	; (8015910 <__d2b+0xac>)
 801587e:	4825      	ldr	r0, [pc, #148]	; (8015914 <__d2b+0xb0>)
 8015880:	f240 310f 	movw	r1, #783	; 0x30f
 8015884:	f7fd fb8e 	bl	8012fa4 <__assert_func>
 8015888:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801588c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015890:	bb2d      	cbnz	r5, 80158de <__d2b+0x7a>
 8015892:	9301      	str	r3, [sp, #4]
 8015894:	f1b8 0300 	subs.w	r3, r8, #0
 8015898:	d026      	beq.n	80158e8 <__d2b+0x84>
 801589a:	4668      	mov	r0, sp
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	f7ff fd17 	bl	80152d0 <__lo0bits>
 80158a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80158a6:	b1e8      	cbz	r0, 80158e4 <__d2b+0x80>
 80158a8:	f1c0 0320 	rsb	r3, r0, #32
 80158ac:	fa02 f303 	lsl.w	r3, r2, r3
 80158b0:	430b      	orrs	r3, r1
 80158b2:	40c2      	lsrs	r2, r0
 80158b4:	6163      	str	r3, [r4, #20]
 80158b6:	9201      	str	r2, [sp, #4]
 80158b8:	9b01      	ldr	r3, [sp, #4]
 80158ba:	61a3      	str	r3, [r4, #24]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	bf14      	ite	ne
 80158c0:	2202      	movne	r2, #2
 80158c2:	2201      	moveq	r2, #1
 80158c4:	6122      	str	r2, [r4, #16]
 80158c6:	b1bd      	cbz	r5, 80158f8 <__d2b+0x94>
 80158c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80158cc:	4405      	add	r5, r0
 80158ce:	603d      	str	r5, [r7, #0]
 80158d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80158d4:	6030      	str	r0, [r6, #0]
 80158d6:	4620      	mov	r0, r4
 80158d8:	b003      	add	sp, #12
 80158da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80158e2:	e7d6      	b.n	8015892 <__d2b+0x2e>
 80158e4:	6161      	str	r1, [r4, #20]
 80158e6:	e7e7      	b.n	80158b8 <__d2b+0x54>
 80158e8:	a801      	add	r0, sp, #4
 80158ea:	f7ff fcf1 	bl	80152d0 <__lo0bits>
 80158ee:	9b01      	ldr	r3, [sp, #4]
 80158f0:	6163      	str	r3, [r4, #20]
 80158f2:	3020      	adds	r0, #32
 80158f4:	2201      	movs	r2, #1
 80158f6:	e7e5      	b.n	80158c4 <__d2b+0x60>
 80158f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80158fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015900:	6038      	str	r0, [r7, #0]
 8015902:	6918      	ldr	r0, [r3, #16]
 8015904:	f7ff fcc4 	bl	8015290 <__hi0bits>
 8015908:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801590c:	e7e2      	b.n	80158d4 <__d2b+0x70>
 801590e:	bf00      	nop
 8015910:	08018a49 	.word	0x08018a49
 8015914:	08018a5a 	.word	0x08018a5a

08015918 <__ratio>:
 8015918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591c:	4688      	mov	r8, r1
 801591e:	4669      	mov	r1, sp
 8015920:	4681      	mov	r9, r0
 8015922:	f7ff ff55 	bl	80157d0 <__b2d>
 8015926:	a901      	add	r1, sp, #4
 8015928:	4640      	mov	r0, r8
 801592a:	ec55 4b10 	vmov	r4, r5, d0
 801592e:	f7ff ff4f 	bl	80157d0 <__b2d>
 8015932:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015936:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801593a:	eba3 0c02 	sub.w	ip, r3, r2
 801593e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015942:	1a9b      	subs	r3, r3, r2
 8015944:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015948:	ec51 0b10 	vmov	r0, r1, d0
 801594c:	2b00      	cmp	r3, #0
 801594e:	bfd6      	itet	le
 8015950:	460a      	movle	r2, r1
 8015952:	462a      	movgt	r2, r5
 8015954:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015958:	468b      	mov	fp, r1
 801595a:	462f      	mov	r7, r5
 801595c:	bfd4      	ite	le
 801595e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015962:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015966:	4620      	mov	r0, r4
 8015968:	ee10 2a10 	vmov	r2, s0
 801596c:	465b      	mov	r3, fp
 801596e:	4639      	mov	r1, r7
 8015970:	f7ea ff94 	bl	800089c <__aeabi_ddiv>
 8015974:	ec41 0b10 	vmov	d0, r0, r1
 8015978:	b003      	add	sp, #12
 801597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801597e <__copybits>:
 801597e:	3901      	subs	r1, #1
 8015980:	b570      	push	{r4, r5, r6, lr}
 8015982:	1149      	asrs	r1, r1, #5
 8015984:	6914      	ldr	r4, [r2, #16]
 8015986:	3101      	adds	r1, #1
 8015988:	f102 0314 	add.w	r3, r2, #20
 801598c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015990:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015994:	1f05      	subs	r5, r0, #4
 8015996:	42a3      	cmp	r3, r4
 8015998:	d30c      	bcc.n	80159b4 <__copybits+0x36>
 801599a:	1aa3      	subs	r3, r4, r2
 801599c:	3b11      	subs	r3, #17
 801599e:	f023 0303 	bic.w	r3, r3, #3
 80159a2:	3211      	adds	r2, #17
 80159a4:	42a2      	cmp	r2, r4
 80159a6:	bf88      	it	hi
 80159a8:	2300      	movhi	r3, #0
 80159aa:	4418      	add	r0, r3
 80159ac:	2300      	movs	r3, #0
 80159ae:	4288      	cmp	r0, r1
 80159b0:	d305      	bcc.n	80159be <__copybits+0x40>
 80159b2:	bd70      	pop	{r4, r5, r6, pc}
 80159b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80159b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80159bc:	e7eb      	b.n	8015996 <__copybits+0x18>
 80159be:	f840 3b04 	str.w	r3, [r0], #4
 80159c2:	e7f4      	b.n	80159ae <__copybits+0x30>

080159c4 <__any_on>:
 80159c4:	f100 0214 	add.w	r2, r0, #20
 80159c8:	6900      	ldr	r0, [r0, #16]
 80159ca:	114b      	asrs	r3, r1, #5
 80159cc:	4298      	cmp	r0, r3
 80159ce:	b510      	push	{r4, lr}
 80159d0:	db11      	blt.n	80159f6 <__any_on+0x32>
 80159d2:	dd0a      	ble.n	80159ea <__any_on+0x26>
 80159d4:	f011 011f 	ands.w	r1, r1, #31
 80159d8:	d007      	beq.n	80159ea <__any_on+0x26>
 80159da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80159de:	fa24 f001 	lsr.w	r0, r4, r1
 80159e2:	fa00 f101 	lsl.w	r1, r0, r1
 80159e6:	428c      	cmp	r4, r1
 80159e8:	d10b      	bne.n	8015a02 <__any_on+0x3e>
 80159ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80159ee:	4293      	cmp	r3, r2
 80159f0:	d803      	bhi.n	80159fa <__any_on+0x36>
 80159f2:	2000      	movs	r0, #0
 80159f4:	bd10      	pop	{r4, pc}
 80159f6:	4603      	mov	r3, r0
 80159f8:	e7f7      	b.n	80159ea <__any_on+0x26>
 80159fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80159fe:	2900      	cmp	r1, #0
 8015a00:	d0f5      	beq.n	80159ee <__any_on+0x2a>
 8015a02:	2001      	movs	r0, #1
 8015a04:	e7f6      	b.n	80159f4 <__any_on+0x30>

08015a06 <sulp>:
 8015a06:	b570      	push	{r4, r5, r6, lr}
 8015a08:	4604      	mov	r4, r0
 8015a0a:	460d      	mov	r5, r1
 8015a0c:	ec45 4b10 	vmov	d0, r4, r5
 8015a10:	4616      	mov	r6, r2
 8015a12:	f7ff feb7 	bl	8015784 <__ulp>
 8015a16:	ec51 0b10 	vmov	r0, r1, d0
 8015a1a:	b17e      	cbz	r6, 8015a3c <sulp+0x36>
 8015a1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015a20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	dd09      	ble.n	8015a3c <sulp+0x36>
 8015a28:	051b      	lsls	r3, r3, #20
 8015a2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015a2e:	2400      	movs	r4, #0
 8015a30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015a34:	4622      	mov	r2, r4
 8015a36:	462b      	mov	r3, r5
 8015a38:	f7ea fe06 	bl	8000648 <__aeabi_dmul>
 8015a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a40 <_strtod_l>:
 8015a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a44:	ed2d 8b02 	vpush	{d8}
 8015a48:	b09b      	sub	sp, #108	; 0x6c
 8015a4a:	4604      	mov	r4, r0
 8015a4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8015a4e:	2200      	movs	r2, #0
 8015a50:	9216      	str	r2, [sp, #88]	; 0x58
 8015a52:	460d      	mov	r5, r1
 8015a54:	f04f 0800 	mov.w	r8, #0
 8015a58:	f04f 0900 	mov.w	r9, #0
 8015a5c:	460a      	mov	r2, r1
 8015a5e:	9215      	str	r2, [sp, #84]	; 0x54
 8015a60:	7811      	ldrb	r1, [r2, #0]
 8015a62:	292b      	cmp	r1, #43	; 0x2b
 8015a64:	d04c      	beq.n	8015b00 <_strtod_l+0xc0>
 8015a66:	d83a      	bhi.n	8015ade <_strtod_l+0x9e>
 8015a68:	290d      	cmp	r1, #13
 8015a6a:	d834      	bhi.n	8015ad6 <_strtod_l+0x96>
 8015a6c:	2908      	cmp	r1, #8
 8015a6e:	d834      	bhi.n	8015ada <_strtod_l+0x9a>
 8015a70:	2900      	cmp	r1, #0
 8015a72:	d03d      	beq.n	8015af0 <_strtod_l+0xb0>
 8015a74:	2200      	movs	r2, #0
 8015a76:	920a      	str	r2, [sp, #40]	; 0x28
 8015a78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015a7a:	7832      	ldrb	r2, [r6, #0]
 8015a7c:	2a30      	cmp	r2, #48	; 0x30
 8015a7e:	f040 80b4 	bne.w	8015bea <_strtod_l+0x1aa>
 8015a82:	7872      	ldrb	r2, [r6, #1]
 8015a84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015a88:	2a58      	cmp	r2, #88	; 0x58
 8015a8a:	d170      	bne.n	8015b6e <_strtod_l+0x12e>
 8015a8c:	9302      	str	r3, [sp, #8]
 8015a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a90:	9301      	str	r3, [sp, #4]
 8015a92:	ab16      	add	r3, sp, #88	; 0x58
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	4a8e      	ldr	r2, [pc, #568]	; (8015cd0 <_strtod_l+0x290>)
 8015a98:	ab17      	add	r3, sp, #92	; 0x5c
 8015a9a:	a915      	add	r1, sp, #84	; 0x54
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f001 fac1 	bl	8017024 <__gethex>
 8015aa2:	f010 070f 	ands.w	r7, r0, #15
 8015aa6:	4605      	mov	r5, r0
 8015aa8:	d005      	beq.n	8015ab6 <_strtod_l+0x76>
 8015aaa:	2f06      	cmp	r7, #6
 8015aac:	d12a      	bne.n	8015b04 <_strtod_l+0xc4>
 8015aae:	3601      	adds	r6, #1
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	9615      	str	r6, [sp, #84]	; 0x54
 8015ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8015ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	f040 857f 	bne.w	80165bc <_strtod_l+0xb7c>
 8015abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ac0:	b1db      	cbz	r3, 8015afa <_strtod_l+0xba>
 8015ac2:	4642      	mov	r2, r8
 8015ac4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015ac8:	ec43 2b10 	vmov	d0, r2, r3
 8015acc:	b01b      	add	sp, #108	; 0x6c
 8015ace:	ecbd 8b02 	vpop	{d8}
 8015ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad6:	2920      	cmp	r1, #32
 8015ad8:	d1cc      	bne.n	8015a74 <_strtod_l+0x34>
 8015ada:	3201      	adds	r2, #1
 8015adc:	e7bf      	b.n	8015a5e <_strtod_l+0x1e>
 8015ade:	292d      	cmp	r1, #45	; 0x2d
 8015ae0:	d1c8      	bne.n	8015a74 <_strtod_l+0x34>
 8015ae2:	2101      	movs	r1, #1
 8015ae4:	910a      	str	r1, [sp, #40]	; 0x28
 8015ae6:	1c51      	adds	r1, r2, #1
 8015ae8:	9115      	str	r1, [sp, #84]	; 0x54
 8015aea:	7852      	ldrb	r2, [r2, #1]
 8015aec:	2a00      	cmp	r2, #0
 8015aee:	d1c3      	bne.n	8015a78 <_strtod_l+0x38>
 8015af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015af2:	9515      	str	r5, [sp, #84]	; 0x54
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f040 855f 	bne.w	80165b8 <_strtod_l+0xb78>
 8015afa:	4642      	mov	r2, r8
 8015afc:	464b      	mov	r3, r9
 8015afe:	e7e3      	b.n	8015ac8 <_strtod_l+0x88>
 8015b00:	2100      	movs	r1, #0
 8015b02:	e7ef      	b.n	8015ae4 <_strtod_l+0xa4>
 8015b04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b06:	b13a      	cbz	r2, 8015b18 <_strtod_l+0xd8>
 8015b08:	2135      	movs	r1, #53	; 0x35
 8015b0a:	a818      	add	r0, sp, #96	; 0x60
 8015b0c:	f7ff ff37 	bl	801597e <__copybits>
 8015b10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015b12:	4620      	mov	r0, r4
 8015b14:	f7ff fb0a 	bl	801512c <_Bfree>
 8015b18:	3f01      	subs	r7, #1
 8015b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015b1c:	2f04      	cmp	r7, #4
 8015b1e:	d806      	bhi.n	8015b2e <_strtod_l+0xee>
 8015b20:	e8df f007 	tbb	[pc, r7]
 8015b24:	201d0314 	.word	0x201d0314
 8015b28:	14          	.byte	0x14
 8015b29:	00          	.byte	0x00
 8015b2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015b2e:	05e9      	lsls	r1, r5, #23
 8015b30:	bf48      	it	mi
 8015b32:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015b36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b3a:	0d1b      	lsrs	r3, r3, #20
 8015b3c:	051b      	lsls	r3, r3, #20
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d1b9      	bne.n	8015ab6 <_strtod_l+0x76>
 8015b42:	f7fe fbab 	bl	801429c <__errno>
 8015b46:	2322      	movs	r3, #34	; 0x22
 8015b48:	6003      	str	r3, [r0, #0]
 8015b4a:	e7b4      	b.n	8015ab6 <_strtod_l+0x76>
 8015b4c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015b50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015b54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015b58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015b5c:	e7e7      	b.n	8015b2e <_strtod_l+0xee>
 8015b5e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015cd8 <_strtod_l+0x298>
 8015b62:	e7e4      	b.n	8015b2e <_strtod_l+0xee>
 8015b64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015b68:	f04f 38ff 	mov.w	r8, #4294967295
 8015b6c:	e7df      	b.n	8015b2e <_strtod_l+0xee>
 8015b6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b70:	1c5a      	adds	r2, r3, #1
 8015b72:	9215      	str	r2, [sp, #84]	; 0x54
 8015b74:	785b      	ldrb	r3, [r3, #1]
 8015b76:	2b30      	cmp	r3, #48	; 0x30
 8015b78:	d0f9      	beq.n	8015b6e <_strtod_l+0x12e>
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d09b      	beq.n	8015ab6 <_strtod_l+0x76>
 8015b7e:	2301      	movs	r3, #1
 8015b80:	f04f 0a00 	mov.w	sl, #0
 8015b84:	9304      	str	r3, [sp, #16]
 8015b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015b8e:	46d3      	mov	fp, sl
 8015b90:	220a      	movs	r2, #10
 8015b92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015b94:	7806      	ldrb	r6, [r0, #0]
 8015b96:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015b9a:	b2d9      	uxtb	r1, r3
 8015b9c:	2909      	cmp	r1, #9
 8015b9e:	d926      	bls.n	8015bee <_strtod_l+0x1ae>
 8015ba0:	494c      	ldr	r1, [pc, #304]	; (8015cd4 <_strtod_l+0x294>)
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	f001 f9a6 	bl	8016ef4 <strncmp>
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	d030      	beq.n	8015c0e <_strtod_l+0x1ce>
 8015bac:	2000      	movs	r0, #0
 8015bae:	4632      	mov	r2, r6
 8015bb0:	9005      	str	r0, [sp, #20]
 8015bb2:	465e      	mov	r6, fp
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2a65      	cmp	r2, #101	; 0x65
 8015bb8:	d001      	beq.n	8015bbe <_strtod_l+0x17e>
 8015bba:	2a45      	cmp	r2, #69	; 0x45
 8015bbc:	d113      	bne.n	8015be6 <_strtod_l+0x1a6>
 8015bbe:	b91e      	cbnz	r6, 8015bc8 <_strtod_l+0x188>
 8015bc0:	9a04      	ldr	r2, [sp, #16]
 8015bc2:	4302      	orrs	r2, r0
 8015bc4:	d094      	beq.n	8015af0 <_strtod_l+0xb0>
 8015bc6:	2600      	movs	r6, #0
 8015bc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015bca:	1c6a      	adds	r2, r5, #1
 8015bcc:	9215      	str	r2, [sp, #84]	; 0x54
 8015bce:	786a      	ldrb	r2, [r5, #1]
 8015bd0:	2a2b      	cmp	r2, #43	; 0x2b
 8015bd2:	d074      	beq.n	8015cbe <_strtod_l+0x27e>
 8015bd4:	2a2d      	cmp	r2, #45	; 0x2d
 8015bd6:	d078      	beq.n	8015cca <_strtod_l+0x28a>
 8015bd8:	f04f 0c00 	mov.w	ip, #0
 8015bdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015be0:	2909      	cmp	r1, #9
 8015be2:	d97f      	bls.n	8015ce4 <_strtod_l+0x2a4>
 8015be4:	9515      	str	r5, [sp, #84]	; 0x54
 8015be6:	2700      	movs	r7, #0
 8015be8:	e09e      	b.n	8015d28 <_strtod_l+0x2e8>
 8015bea:	2300      	movs	r3, #0
 8015bec:	e7c8      	b.n	8015b80 <_strtod_l+0x140>
 8015bee:	f1bb 0f08 	cmp.w	fp, #8
 8015bf2:	bfd8      	it	le
 8015bf4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015bf6:	f100 0001 	add.w	r0, r0, #1
 8015bfa:	bfda      	itte	le
 8015bfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8015c00:	9309      	strle	r3, [sp, #36]	; 0x24
 8015c02:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015c06:	f10b 0b01 	add.w	fp, fp, #1
 8015c0a:	9015      	str	r0, [sp, #84]	; 0x54
 8015c0c:	e7c1      	b.n	8015b92 <_strtod_l+0x152>
 8015c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c10:	1c5a      	adds	r2, r3, #1
 8015c12:	9215      	str	r2, [sp, #84]	; 0x54
 8015c14:	785a      	ldrb	r2, [r3, #1]
 8015c16:	f1bb 0f00 	cmp.w	fp, #0
 8015c1a:	d037      	beq.n	8015c8c <_strtod_l+0x24c>
 8015c1c:	9005      	str	r0, [sp, #20]
 8015c1e:	465e      	mov	r6, fp
 8015c20:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015c24:	2b09      	cmp	r3, #9
 8015c26:	d912      	bls.n	8015c4e <_strtod_l+0x20e>
 8015c28:	2301      	movs	r3, #1
 8015c2a:	e7c4      	b.n	8015bb6 <_strtod_l+0x176>
 8015c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c2e:	1c5a      	adds	r2, r3, #1
 8015c30:	9215      	str	r2, [sp, #84]	; 0x54
 8015c32:	785a      	ldrb	r2, [r3, #1]
 8015c34:	3001      	adds	r0, #1
 8015c36:	2a30      	cmp	r2, #48	; 0x30
 8015c38:	d0f8      	beq.n	8015c2c <_strtod_l+0x1ec>
 8015c3a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015c3e:	2b08      	cmp	r3, #8
 8015c40:	f200 84c1 	bhi.w	80165c6 <_strtod_l+0xb86>
 8015c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c46:	9005      	str	r0, [sp, #20]
 8015c48:	2000      	movs	r0, #0
 8015c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c4c:	4606      	mov	r6, r0
 8015c4e:	3a30      	subs	r2, #48	; 0x30
 8015c50:	f100 0301 	add.w	r3, r0, #1
 8015c54:	d014      	beq.n	8015c80 <_strtod_l+0x240>
 8015c56:	9905      	ldr	r1, [sp, #20]
 8015c58:	4419      	add	r1, r3
 8015c5a:	9105      	str	r1, [sp, #20]
 8015c5c:	4633      	mov	r3, r6
 8015c5e:	eb00 0c06 	add.w	ip, r0, r6
 8015c62:	210a      	movs	r1, #10
 8015c64:	4563      	cmp	r3, ip
 8015c66:	d113      	bne.n	8015c90 <_strtod_l+0x250>
 8015c68:	1833      	adds	r3, r6, r0
 8015c6a:	2b08      	cmp	r3, #8
 8015c6c:	f106 0601 	add.w	r6, r6, #1
 8015c70:	4406      	add	r6, r0
 8015c72:	dc1a      	bgt.n	8015caa <_strtod_l+0x26a>
 8015c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c76:	230a      	movs	r3, #10
 8015c78:	fb03 2301 	mla	r3, r3, r1, r2
 8015c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7e:	2300      	movs	r3, #0
 8015c80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015c82:	1c51      	adds	r1, r2, #1
 8015c84:	9115      	str	r1, [sp, #84]	; 0x54
 8015c86:	7852      	ldrb	r2, [r2, #1]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	e7c9      	b.n	8015c20 <_strtod_l+0x1e0>
 8015c8c:	4658      	mov	r0, fp
 8015c8e:	e7d2      	b.n	8015c36 <_strtod_l+0x1f6>
 8015c90:	2b08      	cmp	r3, #8
 8015c92:	f103 0301 	add.w	r3, r3, #1
 8015c96:	dc03      	bgt.n	8015ca0 <_strtod_l+0x260>
 8015c98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015c9a:	434f      	muls	r7, r1
 8015c9c:	9709      	str	r7, [sp, #36]	; 0x24
 8015c9e:	e7e1      	b.n	8015c64 <_strtod_l+0x224>
 8015ca0:	2b10      	cmp	r3, #16
 8015ca2:	bfd8      	it	le
 8015ca4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015ca8:	e7dc      	b.n	8015c64 <_strtod_l+0x224>
 8015caa:	2e10      	cmp	r6, #16
 8015cac:	bfdc      	itt	le
 8015cae:	230a      	movle	r3, #10
 8015cb0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015cb4:	e7e3      	b.n	8015c7e <_strtod_l+0x23e>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	9305      	str	r3, [sp, #20]
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e780      	b.n	8015bc0 <_strtod_l+0x180>
 8015cbe:	f04f 0c00 	mov.w	ip, #0
 8015cc2:	1caa      	adds	r2, r5, #2
 8015cc4:	9215      	str	r2, [sp, #84]	; 0x54
 8015cc6:	78aa      	ldrb	r2, [r5, #2]
 8015cc8:	e788      	b.n	8015bdc <_strtod_l+0x19c>
 8015cca:	f04f 0c01 	mov.w	ip, #1
 8015cce:	e7f8      	b.n	8015cc2 <_strtod_l+0x282>
 8015cd0:	08018bb8 	.word	0x08018bb8
 8015cd4:	08018bb4 	.word	0x08018bb4
 8015cd8:	7ff00000 	.word	0x7ff00000
 8015cdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015cde:	1c51      	adds	r1, r2, #1
 8015ce0:	9115      	str	r1, [sp, #84]	; 0x54
 8015ce2:	7852      	ldrb	r2, [r2, #1]
 8015ce4:	2a30      	cmp	r2, #48	; 0x30
 8015ce6:	d0f9      	beq.n	8015cdc <_strtod_l+0x29c>
 8015ce8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015cec:	2908      	cmp	r1, #8
 8015cee:	f63f af7a 	bhi.w	8015be6 <_strtod_l+0x1a6>
 8015cf2:	3a30      	subs	r2, #48	; 0x30
 8015cf4:	9208      	str	r2, [sp, #32]
 8015cf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015cf8:	920c      	str	r2, [sp, #48]	; 0x30
 8015cfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015cfc:	1c57      	adds	r7, r2, #1
 8015cfe:	9715      	str	r7, [sp, #84]	; 0x54
 8015d00:	7852      	ldrb	r2, [r2, #1]
 8015d02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015d06:	f1be 0f09 	cmp.w	lr, #9
 8015d0a:	d938      	bls.n	8015d7e <_strtod_l+0x33e>
 8015d0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015d0e:	1a7f      	subs	r7, r7, r1
 8015d10:	2f08      	cmp	r7, #8
 8015d12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015d16:	dc03      	bgt.n	8015d20 <_strtod_l+0x2e0>
 8015d18:	9908      	ldr	r1, [sp, #32]
 8015d1a:	428f      	cmp	r7, r1
 8015d1c:	bfa8      	it	ge
 8015d1e:	460f      	movge	r7, r1
 8015d20:	f1bc 0f00 	cmp.w	ip, #0
 8015d24:	d000      	beq.n	8015d28 <_strtod_l+0x2e8>
 8015d26:	427f      	negs	r7, r7
 8015d28:	2e00      	cmp	r6, #0
 8015d2a:	d14f      	bne.n	8015dcc <_strtod_l+0x38c>
 8015d2c:	9904      	ldr	r1, [sp, #16]
 8015d2e:	4301      	orrs	r1, r0
 8015d30:	f47f aec1 	bne.w	8015ab6 <_strtod_l+0x76>
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	f47f aedb 	bne.w	8015af0 <_strtod_l+0xb0>
 8015d3a:	2a69      	cmp	r2, #105	; 0x69
 8015d3c:	d029      	beq.n	8015d92 <_strtod_l+0x352>
 8015d3e:	dc26      	bgt.n	8015d8e <_strtod_l+0x34e>
 8015d40:	2a49      	cmp	r2, #73	; 0x49
 8015d42:	d026      	beq.n	8015d92 <_strtod_l+0x352>
 8015d44:	2a4e      	cmp	r2, #78	; 0x4e
 8015d46:	f47f aed3 	bne.w	8015af0 <_strtod_l+0xb0>
 8015d4a:	499b      	ldr	r1, [pc, #620]	; (8015fb8 <_strtod_l+0x578>)
 8015d4c:	a815      	add	r0, sp, #84	; 0x54
 8015d4e:	f001 fba9 	bl	80174a4 <__match>
 8015d52:	2800      	cmp	r0, #0
 8015d54:	f43f aecc 	beq.w	8015af0 <_strtod_l+0xb0>
 8015d58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	2b28      	cmp	r3, #40	; 0x28
 8015d5e:	d12f      	bne.n	8015dc0 <_strtod_l+0x380>
 8015d60:	4996      	ldr	r1, [pc, #600]	; (8015fbc <_strtod_l+0x57c>)
 8015d62:	aa18      	add	r2, sp, #96	; 0x60
 8015d64:	a815      	add	r0, sp, #84	; 0x54
 8015d66:	f001 fbb1 	bl	80174cc <__hexnan>
 8015d6a:	2805      	cmp	r0, #5
 8015d6c:	d128      	bne.n	8015dc0 <_strtod_l+0x380>
 8015d6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015d74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015d78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015d7c:	e69b      	b.n	8015ab6 <_strtod_l+0x76>
 8015d7e:	9f08      	ldr	r7, [sp, #32]
 8015d80:	210a      	movs	r1, #10
 8015d82:	fb01 2107 	mla	r1, r1, r7, r2
 8015d86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015d8a:	9208      	str	r2, [sp, #32]
 8015d8c:	e7b5      	b.n	8015cfa <_strtod_l+0x2ba>
 8015d8e:	2a6e      	cmp	r2, #110	; 0x6e
 8015d90:	e7d9      	b.n	8015d46 <_strtod_l+0x306>
 8015d92:	498b      	ldr	r1, [pc, #556]	; (8015fc0 <_strtod_l+0x580>)
 8015d94:	a815      	add	r0, sp, #84	; 0x54
 8015d96:	f001 fb85 	bl	80174a4 <__match>
 8015d9a:	2800      	cmp	r0, #0
 8015d9c:	f43f aea8 	beq.w	8015af0 <_strtod_l+0xb0>
 8015da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015da2:	4988      	ldr	r1, [pc, #544]	; (8015fc4 <_strtod_l+0x584>)
 8015da4:	3b01      	subs	r3, #1
 8015da6:	a815      	add	r0, sp, #84	; 0x54
 8015da8:	9315      	str	r3, [sp, #84]	; 0x54
 8015daa:	f001 fb7b 	bl	80174a4 <__match>
 8015dae:	b910      	cbnz	r0, 8015db6 <_strtod_l+0x376>
 8015db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015db2:	3301      	adds	r3, #1
 8015db4:	9315      	str	r3, [sp, #84]	; 0x54
 8015db6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015fd4 <_strtod_l+0x594>
 8015dba:	f04f 0800 	mov.w	r8, #0
 8015dbe:	e67a      	b.n	8015ab6 <_strtod_l+0x76>
 8015dc0:	4881      	ldr	r0, [pc, #516]	; (8015fc8 <_strtod_l+0x588>)
 8015dc2:	f001 f8a9 	bl	8016f18 <nan>
 8015dc6:	ec59 8b10 	vmov	r8, r9, d0
 8015dca:	e674      	b.n	8015ab6 <_strtod_l+0x76>
 8015dcc:	9b05      	ldr	r3, [sp, #20]
 8015dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dd0:	1afb      	subs	r3, r7, r3
 8015dd2:	f1bb 0f00 	cmp.w	fp, #0
 8015dd6:	bf08      	it	eq
 8015dd8:	46b3      	moveq	fp, r6
 8015dda:	2e10      	cmp	r6, #16
 8015ddc:	9308      	str	r3, [sp, #32]
 8015dde:	4635      	mov	r5, r6
 8015de0:	bfa8      	it	ge
 8015de2:	2510      	movge	r5, #16
 8015de4:	f7ea fbb6 	bl	8000554 <__aeabi_ui2d>
 8015de8:	2e09      	cmp	r6, #9
 8015dea:	4680      	mov	r8, r0
 8015dec:	4689      	mov	r9, r1
 8015dee:	dd13      	ble.n	8015e18 <_strtod_l+0x3d8>
 8015df0:	4b76      	ldr	r3, [pc, #472]	; (8015fcc <_strtod_l+0x58c>)
 8015df2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015df6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015dfa:	f7ea fc25 	bl	8000648 <__aeabi_dmul>
 8015dfe:	4680      	mov	r8, r0
 8015e00:	4650      	mov	r0, sl
 8015e02:	4689      	mov	r9, r1
 8015e04:	f7ea fba6 	bl	8000554 <__aeabi_ui2d>
 8015e08:	4602      	mov	r2, r0
 8015e0a:	460b      	mov	r3, r1
 8015e0c:	4640      	mov	r0, r8
 8015e0e:	4649      	mov	r1, r9
 8015e10:	f7ea fa64 	bl	80002dc <__adddf3>
 8015e14:	4680      	mov	r8, r0
 8015e16:	4689      	mov	r9, r1
 8015e18:	2e0f      	cmp	r6, #15
 8015e1a:	dc38      	bgt.n	8015e8e <_strtod_l+0x44e>
 8015e1c:	9b08      	ldr	r3, [sp, #32]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	f43f ae49 	beq.w	8015ab6 <_strtod_l+0x76>
 8015e24:	dd24      	ble.n	8015e70 <_strtod_l+0x430>
 8015e26:	2b16      	cmp	r3, #22
 8015e28:	dc0b      	bgt.n	8015e42 <_strtod_l+0x402>
 8015e2a:	4968      	ldr	r1, [pc, #416]	; (8015fcc <_strtod_l+0x58c>)
 8015e2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e34:	4642      	mov	r2, r8
 8015e36:	464b      	mov	r3, r9
 8015e38:	f7ea fc06 	bl	8000648 <__aeabi_dmul>
 8015e3c:	4680      	mov	r8, r0
 8015e3e:	4689      	mov	r9, r1
 8015e40:	e639      	b.n	8015ab6 <_strtod_l+0x76>
 8015e42:	9a08      	ldr	r2, [sp, #32]
 8015e44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015e48:	4293      	cmp	r3, r2
 8015e4a:	db20      	blt.n	8015e8e <_strtod_l+0x44e>
 8015e4c:	4c5f      	ldr	r4, [pc, #380]	; (8015fcc <_strtod_l+0x58c>)
 8015e4e:	f1c6 060f 	rsb	r6, r6, #15
 8015e52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015e56:	4642      	mov	r2, r8
 8015e58:	464b      	mov	r3, r9
 8015e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e5e:	f7ea fbf3 	bl	8000648 <__aeabi_dmul>
 8015e62:	9b08      	ldr	r3, [sp, #32]
 8015e64:	1b9e      	subs	r6, r3, r6
 8015e66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015e6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015e6e:	e7e3      	b.n	8015e38 <_strtod_l+0x3f8>
 8015e70:	9b08      	ldr	r3, [sp, #32]
 8015e72:	3316      	adds	r3, #22
 8015e74:	db0b      	blt.n	8015e8e <_strtod_l+0x44e>
 8015e76:	9b05      	ldr	r3, [sp, #20]
 8015e78:	1bdf      	subs	r7, r3, r7
 8015e7a:	4b54      	ldr	r3, [pc, #336]	; (8015fcc <_strtod_l+0x58c>)
 8015e7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015e84:	4640      	mov	r0, r8
 8015e86:	4649      	mov	r1, r9
 8015e88:	f7ea fd08 	bl	800089c <__aeabi_ddiv>
 8015e8c:	e7d6      	b.n	8015e3c <_strtod_l+0x3fc>
 8015e8e:	9b08      	ldr	r3, [sp, #32]
 8015e90:	1b75      	subs	r5, r6, r5
 8015e92:	441d      	add	r5, r3
 8015e94:	2d00      	cmp	r5, #0
 8015e96:	dd70      	ble.n	8015f7a <_strtod_l+0x53a>
 8015e98:	f015 030f 	ands.w	r3, r5, #15
 8015e9c:	d00a      	beq.n	8015eb4 <_strtod_l+0x474>
 8015e9e:	494b      	ldr	r1, [pc, #300]	; (8015fcc <_strtod_l+0x58c>)
 8015ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015ea4:	4642      	mov	r2, r8
 8015ea6:	464b      	mov	r3, r9
 8015ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015eac:	f7ea fbcc 	bl	8000648 <__aeabi_dmul>
 8015eb0:	4680      	mov	r8, r0
 8015eb2:	4689      	mov	r9, r1
 8015eb4:	f035 050f 	bics.w	r5, r5, #15
 8015eb8:	d04d      	beq.n	8015f56 <_strtod_l+0x516>
 8015eba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015ebe:	dd22      	ble.n	8015f06 <_strtod_l+0x4c6>
 8015ec0:	2500      	movs	r5, #0
 8015ec2:	46ab      	mov	fp, r5
 8015ec4:	9509      	str	r5, [sp, #36]	; 0x24
 8015ec6:	9505      	str	r5, [sp, #20]
 8015ec8:	2322      	movs	r3, #34	; 0x22
 8015eca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015fd4 <_strtod_l+0x594>
 8015ece:	6023      	str	r3, [r4, #0]
 8015ed0:	f04f 0800 	mov.w	r8, #0
 8015ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f43f aded 	beq.w	8015ab6 <_strtod_l+0x76>
 8015edc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015ede:	4620      	mov	r0, r4
 8015ee0:	f7ff f924 	bl	801512c <_Bfree>
 8015ee4:	9905      	ldr	r1, [sp, #20]
 8015ee6:	4620      	mov	r0, r4
 8015ee8:	f7ff f920 	bl	801512c <_Bfree>
 8015eec:	4659      	mov	r1, fp
 8015eee:	4620      	mov	r0, r4
 8015ef0:	f7ff f91c 	bl	801512c <_Bfree>
 8015ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f7ff f918 	bl	801512c <_Bfree>
 8015efc:	4629      	mov	r1, r5
 8015efe:	4620      	mov	r0, r4
 8015f00:	f7ff f914 	bl	801512c <_Bfree>
 8015f04:	e5d7      	b.n	8015ab6 <_strtod_l+0x76>
 8015f06:	4b32      	ldr	r3, [pc, #200]	; (8015fd0 <_strtod_l+0x590>)
 8015f08:	9304      	str	r3, [sp, #16]
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	112d      	asrs	r5, r5, #4
 8015f0e:	4640      	mov	r0, r8
 8015f10:	4649      	mov	r1, r9
 8015f12:	469a      	mov	sl, r3
 8015f14:	2d01      	cmp	r5, #1
 8015f16:	dc21      	bgt.n	8015f5c <_strtod_l+0x51c>
 8015f18:	b10b      	cbz	r3, 8015f1e <_strtod_l+0x4de>
 8015f1a:	4680      	mov	r8, r0
 8015f1c:	4689      	mov	r9, r1
 8015f1e:	492c      	ldr	r1, [pc, #176]	; (8015fd0 <_strtod_l+0x590>)
 8015f20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015f24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015f28:	4642      	mov	r2, r8
 8015f2a:	464b      	mov	r3, r9
 8015f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f30:	f7ea fb8a 	bl	8000648 <__aeabi_dmul>
 8015f34:	4b27      	ldr	r3, [pc, #156]	; (8015fd4 <_strtod_l+0x594>)
 8015f36:	460a      	mov	r2, r1
 8015f38:	400b      	ands	r3, r1
 8015f3a:	4927      	ldr	r1, [pc, #156]	; (8015fd8 <_strtod_l+0x598>)
 8015f3c:	428b      	cmp	r3, r1
 8015f3e:	4680      	mov	r8, r0
 8015f40:	d8be      	bhi.n	8015ec0 <_strtod_l+0x480>
 8015f42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015f46:	428b      	cmp	r3, r1
 8015f48:	bf86      	itte	hi
 8015f4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015fdc <_strtod_l+0x59c>
 8015f4e:	f04f 38ff 	movhi.w	r8, #4294967295
 8015f52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015f56:	2300      	movs	r3, #0
 8015f58:	9304      	str	r3, [sp, #16]
 8015f5a:	e07b      	b.n	8016054 <_strtod_l+0x614>
 8015f5c:	07ea      	lsls	r2, r5, #31
 8015f5e:	d505      	bpl.n	8015f6c <_strtod_l+0x52c>
 8015f60:	9b04      	ldr	r3, [sp, #16]
 8015f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f66:	f7ea fb6f 	bl	8000648 <__aeabi_dmul>
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	9a04      	ldr	r2, [sp, #16]
 8015f6e:	3208      	adds	r2, #8
 8015f70:	f10a 0a01 	add.w	sl, sl, #1
 8015f74:	106d      	asrs	r5, r5, #1
 8015f76:	9204      	str	r2, [sp, #16]
 8015f78:	e7cc      	b.n	8015f14 <_strtod_l+0x4d4>
 8015f7a:	d0ec      	beq.n	8015f56 <_strtod_l+0x516>
 8015f7c:	426d      	negs	r5, r5
 8015f7e:	f015 020f 	ands.w	r2, r5, #15
 8015f82:	d00a      	beq.n	8015f9a <_strtod_l+0x55a>
 8015f84:	4b11      	ldr	r3, [pc, #68]	; (8015fcc <_strtod_l+0x58c>)
 8015f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f8a:	4640      	mov	r0, r8
 8015f8c:	4649      	mov	r1, r9
 8015f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f92:	f7ea fc83 	bl	800089c <__aeabi_ddiv>
 8015f96:	4680      	mov	r8, r0
 8015f98:	4689      	mov	r9, r1
 8015f9a:	112d      	asrs	r5, r5, #4
 8015f9c:	d0db      	beq.n	8015f56 <_strtod_l+0x516>
 8015f9e:	2d1f      	cmp	r5, #31
 8015fa0:	dd1e      	ble.n	8015fe0 <_strtod_l+0x5a0>
 8015fa2:	2500      	movs	r5, #0
 8015fa4:	46ab      	mov	fp, r5
 8015fa6:	9509      	str	r5, [sp, #36]	; 0x24
 8015fa8:	9505      	str	r5, [sp, #20]
 8015faa:	2322      	movs	r3, #34	; 0x22
 8015fac:	f04f 0800 	mov.w	r8, #0
 8015fb0:	f04f 0900 	mov.w	r9, #0
 8015fb4:	6023      	str	r3, [r4, #0]
 8015fb6:	e78d      	b.n	8015ed4 <_strtod_l+0x494>
 8015fb8:	080189a1 	.word	0x080189a1
 8015fbc:	08018bcc 	.word	0x08018bcc
 8015fc0:	08018999 	.word	0x08018999
 8015fc4:	080189d0 	.word	0x080189d0
 8015fc8:	08018993 	.word	0x08018993
 8015fcc:	08018ae0 	.word	0x08018ae0
 8015fd0:	08018ab8 	.word	0x08018ab8
 8015fd4:	7ff00000 	.word	0x7ff00000
 8015fd8:	7ca00000 	.word	0x7ca00000
 8015fdc:	7fefffff 	.word	0x7fefffff
 8015fe0:	f015 0310 	ands.w	r3, r5, #16
 8015fe4:	bf18      	it	ne
 8015fe6:	236a      	movne	r3, #106	; 0x6a
 8015fe8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801638c <_strtod_l+0x94c>
 8015fec:	9304      	str	r3, [sp, #16]
 8015fee:	4640      	mov	r0, r8
 8015ff0:	4649      	mov	r1, r9
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	07ea      	lsls	r2, r5, #31
 8015ff6:	d504      	bpl.n	8016002 <_strtod_l+0x5c2>
 8015ff8:	e9da 2300 	ldrd	r2, r3, [sl]
 8015ffc:	f7ea fb24 	bl	8000648 <__aeabi_dmul>
 8016000:	2301      	movs	r3, #1
 8016002:	106d      	asrs	r5, r5, #1
 8016004:	f10a 0a08 	add.w	sl, sl, #8
 8016008:	d1f4      	bne.n	8015ff4 <_strtod_l+0x5b4>
 801600a:	b10b      	cbz	r3, 8016010 <_strtod_l+0x5d0>
 801600c:	4680      	mov	r8, r0
 801600e:	4689      	mov	r9, r1
 8016010:	9b04      	ldr	r3, [sp, #16]
 8016012:	b1bb      	cbz	r3, 8016044 <_strtod_l+0x604>
 8016014:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016018:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801601c:	2b00      	cmp	r3, #0
 801601e:	4649      	mov	r1, r9
 8016020:	dd10      	ble.n	8016044 <_strtod_l+0x604>
 8016022:	2b1f      	cmp	r3, #31
 8016024:	f340 811e 	ble.w	8016264 <_strtod_l+0x824>
 8016028:	2b34      	cmp	r3, #52	; 0x34
 801602a:	bfde      	ittt	le
 801602c:	f04f 33ff 	movle.w	r3, #4294967295
 8016030:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016034:	4093      	lslle	r3, r2
 8016036:	f04f 0800 	mov.w	r8, #0
 801603a:	bfcc      	ite	gt
 801603c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016040:	ea03 0901 	andle.w	r9, r3, r1
 8016044:	2200      	movs	r2, #0
 8016046:	2300      	movs	r3, #0
 8016048:	4640      	mov	r0, r8
 801604a:	4649      	mov	r1, r9
 801604c:	f7ea fd64 	bl	8000b18 <__aeabi_dcmpeq>
 8016050:	2800      	cmp	r0, #0
 8016052:	d1a6      	bne.n	8015fa2 <_strtod_l+0x562>
 8016054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801605a:	4633      	mov	r3, r6
 801605c:	465a      	mov	r2, fp
 801605e:	4620      	mov	r0, r4
 8016060:	f7ff f8cc 	bl	80151fc <__s2b>
 8016064:	9009      	str	r0, [sp, #36]	; 0x24
 8016066:	2800      	cmp	r0, #0
 8016068:	f43f af2a 	beq.w	8015ec0 <_strtod_l+0x480>
 801606c:	9a08      	ldr	r2, [sp, #32]
 801606e:	9b05      	ldr	r3, [sp, #20]
 8016070:	2a00      	cmp	r2, #0
 8016072:	eba3 0307 	sub.w	r3, r3, r7
 8016076:	bfa8      	it	ge
 8016078:	2300      	movge	r3, #0
 801607a:	930c      	str	r3, [sp, #48]	; 0x30
 801607c:	2500      	movs	r5, #0
 801607e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016082:	9312      	str	r3, [sp, #72]	; 0x48
 8016084:	46ab      	mov	fp, r5
 8016086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016088:	4620      	mov	r0, r4
 801608a:	6859      	ldr	r1, [r3, #4]
 801608c:	f7ff f80e 	bl	80150ac <_Balloc>
 8016090:	9005      	str	r0, [sp, #20]
 8016092:	2800      	cmp	r0, #0
 8016094:	f43f af18 	beq.w	8015ec8 <_strtod_l+0x488>
 8016098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801609a:	691a      	ldr	r2, [r3, #16]
 801609c:	3202      	adds	r2, #2
 801609e:	f103 010c 	add.w	r1, r3, #12
 80160a2:	0092      	lsls	r2, r2, #2
 80160a4:	300c      	adds	r0, #12
 80160a6:	f7fe f926 	bl	80142f6 <memcpy>
 80160aa:	ec49 8b10 	vmov	d0, r8, r9
 80160ae:	aa18      	add	r2, sp, #96	; 0x60
 80160b0:	a917      	add	r1, sp, #92	; 0x5c
 80160b2:	4620      	mov	r0, r4
 80160b4:	f7ff fbd6 	bl	8015864 <__d2b>
 80160b8:	ec49 8b18 	vmov	d8, r8, r9
 80160bc:	9016      	str	r0, [sp, #88]	; 0x58
 80160be:	2800      	cmp	r0, #0
 80160c0:	f43f af02 	beq.w	8015ec8 <_strtod_l+0x488>
 80160c4:	2101      	movs	r1, #1
 80160c6:	4620      	mov	r0, r4
 80160c8:	f7ff f930 	bl	801532c <__i2b>
 80160cc:	4683      	mov	fp, r0
 80160ce:	2800      	cmp	r0, #0
 80160d0:	f43f aefa 	beq.w	8015ec8 <_strtod_l+0x488>
 80160d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80160d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80160d8:	2e00      	cmp	r6, #0
 80160da:	bfab      	itete	ge
 80160dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80160de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80160e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80160e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80160e6:	bfac      	ite	ge
 80160e8:	eb06 0a03 	addge.w	sl, r6, r3
 80160ec:	1b9f      	sublt	r7, r3, r6
 80160ee:	9b04      	ldr	r3, [sp, #16]
 80160f0:	1af6      	subs	r6, r6, r3
 80160f2:	4416      	add	r6, r2
 80160f4:	4ba0      	ldr	r3, [pc, #640]	; (8016378 <_strtod_l+0x938>)
 80160f6:	3e01      	subs	r6, #1
 80160f8:	429e      	cmp	r6, r3
 80160fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80160fe:	f280 80c4 	bge.w	801628a <_strtod_l+0x84a>
 8016102:	1b9b      	subs	r3, r3, r6
 8016104:	2b1f      	cmp	r3, #31
 8016106:	eba2 0203 	sub.w	r2, r2, r3
 801610a:	f04f 0101 	mov.w	r1, #1
 801610e:	f300 80b0 	bgt.w	8016272 <_strtod_l+0x832>
 8016112:	fa01 f303 	lsl.w	r3, r1, r3
 8016116:	930e      	str	r3, [sp, #56]	; 0x38
 8016118:	2300      	movs	r3, #0
 801611a:	930d      	str	r3, [sp, #52]	; 0x34
 801611c:	eb0a 0602 	add.w	r6, sl, r2
 8016120:	9b04      	ldr	r3, [sp, #16]
 8016122:	45b2      	cmp	sl, r6
 8016124:	4417      	add	r7, r2
 8016126:	441f      	add	r7, r3
 8016128:	4653      	mov	r3, sl
 801612a:	bfa8      	it	ge
 801612c:	4633      	movge	r3, r6
 801612e:	42bb      	cmp	r3, r7
 8016130:	bfa8      	it	ge
 8016132:	463b      	movge	r3, r7
 8016134:	2b00      	cmp	r3, #0
 8016136:	bfc2      	ittt	gt
 8016138:	1af6      	subgt	r6, r6, r3
 801613a:	1aff      	subgt	r7, r7, r3
 801613c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016142:	2b00      	cmp	r3, #0
 8016144:	dd17      	ble.n	8016176 <_strtod_l+0x736>
 8016146:	4659      	mov	r1, fp
 8016148:	461a      	mov	r2, r3
 801614a:	4620      	mov	r0, r4
 801614c:	f7ff f9ae 	bl	80154ac <__pow5mult>
 8016150:	4683      	mov	fp, r0
 8016152:	2800      	cmp	r0, #0
 8016154:	f43f aeb8 	beq.w	8015ec8 <_strtod_l+0x488>
 8016158:	4601      	mov	r1, r0
 801615a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801615c:	4620      	mov	r0, r4
 801615e:	f7ff f8fb 	bl	8015358 <__multiply>
 8016162:	900b      	str	r0, [sp, #44]	; 0x2c
 8016164:	2800      	cmp	r0, #0
 8016166:	f43f aeaf 	beq.w	8015ec8 <_strtod_l+0x488>
 801616a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801616c:	4620      	mov	r0, r4
 801616e:	f7fe ffdd 	bl	801512c <_Bfree>
 8016172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016174:	9316      	str	r3, [sp, #88]	; 0x58
 8016176:	2e00      	cmp	r6, #0
 8016178:	f300 808c 	bgt.w	8016294 <_strtod_l+0x854>
 801617c:	9b08      	ldr	r3, [sp, #32]
 801617e:	2b00      	cmp	r3, #0
 8016180:	dd08      	ble.n	8016194 <_strtod_l+0x754>
 8016182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016184:	9905      	ldr	r1, [sp, #20]
 8016186:	4620      	mov	r0, r4
 8016188:	f7ff f990 	bl	80154ac <__pow5mult>
 801618c:	9005      	str	r0, [sp, #20]
 801618e:	2800      	cmp	r0, #0
 8016190:	f43f ae9a 	beq.w	8015ec8 <_strtod_l+0x488>
 8016194:	2f00      	cmp	r7, #0
 8016196:	dd08      	ble.n	80161aa <_strtod_l+0x76a>
 8016198:	9905      	ldr	r1, [sp, #20]
 801619a:	463a      	mov	r2, r7
 801619c:	4620      	mov	r0, r4
 801619e:	f7ff f9df 	bl	8015560 <__lshift>
 80161a2:	9005      	str	r0, [sp, #20]
 80161a4:	2800      	cmp	r0, #0
 80161a6:	f43f ae8f 	beq.w	8015ec8 <_strtod_l+0x488>
 80161aa:	f1ba 0f00 	cmp.w	sl, #0
 80161ae:	dd08      	ble.n	80161c2 <_strtod_l+0x782>
 80161b0:	4659      	mov	r1, fp
 80161b2:	4652      	mov	r2, sl
 80161b4:	4620      	mov	r0, r4
 80161b6:	f7ff f9d3 	bl	8015560 <__lshift>
 80161ba:	4683      	mov	fp, r0
 80161bc:	2800      	cmp	r0, #0
 80161be:	f43f ae83 	beq.w	8015ec8 <_strtod_l+0x488>
 80161c2:	9a05      	ldr	r2, [sp, #20]
 80161c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80161c6:	4620      	mov	r0, r4
 80161c8:	f7ff fa52 	bl	8015670 <__mdiff>
 80161cc:	4605      	mov	r5, r0
 80161ce:	2800      	cmp	r0, #0
 80161d0:	f43f ae7a 	beq.w	8015ec8 <_strtod_l+0x488>
 80161d4:	68c3      	ldr	r3, [r0, #12]
 80161d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80161d8:	2300      	movs	r3, #0
 80161da:	60c3      	str	r3, [r0, #12]
 80161dc:	4659      	mov	r1, fp
 80161de:	f7ff fa2b 	bl	8015638 <__mcmp>
 80161e2:	2800      	cmp	r0, #0
 80161e4:	da60      	bge.n	80162a8 <_strtod_l+0x868>
 80161e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161e8:	ea53 0308 	orrs.w	r3, r3, r8
 80161ec:	f040 8084 	bne.w	80162f8 <_strtod_l+0x8b8>
 80161f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d17f      	bne.n	80162f8 <_strtod_l+0x8b8>
 80161f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80161fc:	0d1b      	lsrs	r3, r3, #20
 80161fe:	051b      	lsls	r3, r3, #20
 8016200:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016204:	d978      	bls.n	80162f8 <_strtod_l+0x8b8>
 8016206:	696b      	ldr	r3, [r5, #20]
 8016208:	b913      	cbnz	r3, 8016210 <_strtod_l+0x7d0>
 801620a:	692b      	ldr	r3, [r5, #16]
 801620c:	2b01      	cmp	r3, #1
 801620e:	dd73      	ble.n	80162f8 <_strtod_l+0x8b8>
 8016210:	4629      	mov	r1, r5
 8016212:	2201      	movs	r2, #1
 8016214:	4620      	mov	r0, r4
 8016216:	f7ff f9a3 	bl	8015560 <__lshift>
 801621a:	4659      	mov	r1, fp
 801621c:	4605      	mov	r5, r0
 801621e:	f7ff fa0b 	bl	8015638 <__mcmp>
 8016222:	2800      	cmp	r0, #0
 8016224:	dd68      	ble.n	80162f8 <_strtod_l+0x8b8>
 8016226:	9904      	ldr	r1, [sp, #16]
 8016228:	4a54      	ldr	r2, [pc, #336]	; (801637c <_strtod_l+0x93c>)
 801622a:	464b      	mov	r3, r9
 801622c:	2900      	cmp	r1, #0
 801622e:	f000 8084 	beq.w	801633a <_strtod_l+0x8fa>
 8016232:	ea02 0109 	and.w	r1, r2, r9
 8016236:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801623a:	dc7e      	bgt.n	801633a <_strtod_l+0x8fa>
 801623c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016240:	f77f aeb3 	ble.w	8015faa <_strtod_l+0x56a>
 8016244:	4b4e      	ldr	r3, [pc, #312]	; (8016380 <_strtod_l+0x940>)
 8016246:	4640      	mov	r0, r8
 8016248:	4649      	mov	r1, r9
 801624a:	2200      	movs	r2, #0
 801624c:	f7ea f9fc 	bl	8000648 <__aeabi_dmul>
 8016250:	4b4a      	ldr	r3, [pc, #296]	; (801637c <_strtod_l+0x93c>)
 8016252:	400b      	ands	r3, r1
 8016254:	4680      	mov	r8, r0
 8016256:	4689      	mov	r9, r1
 8016258:	2b00      	cmp	r3, #0
 801625a:	f47f ae3f 	bne.w	8015edc <_strtod_l+0x49c>
 801625e:	2322      	movs	r3, #34	; 0x22
 8016260:	6023      	str	r3, [r4, #0]
 8016262:	e63b      	b.n	8015edc <_strtod_l+0x49c>
 8016264:	f04f 32ff 	mov.w	r2, #4294967295
 8016268:	fa02 f303 	lsl.w	r3, r2, r3
 801626c:	ea03 0808 	and.w	r8, r3, r8
 8016270:	e6e8      	b.n	8016044 <_strtod_l+0x604>
 8016272:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016276:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801627a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801627e:	36e2      	adds	r6, #226	; 0xe2
 8016280:	fa01 f306 	lsl.w	r3, r1, r6
 8016284:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016288:	e748      	b.n	801611c <_strtod_l+0x6dc>
 801628a:	2100      	movs	r1, #0
 801628c:	2301      	movs	r3, #1
 801628e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016292:	e743      	b.n	801611c <_strtod_l+0x6dc>
 8016294:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016296:	4632      	mov	r2, r6
 8016298:	4620      	mov	r0, r4
 801629a:	f7ff f961 	bl	8015560 <__lshift>
 801629e:	9016      	str	r0, [sp, #88]	; 0x58
 80162a0:	2800      	cmp	r0, #0
 80162a2:	f47f af6b 	bne.w	801617c <_strtod_l+0x73c>
 80162a6:	e60f      	b.n	8015ec8 <_strtod_l+0x488>
 80162a8:	46ca      	mov	sl, r9
 80162aa:	d171      	bne.n	8016390 <_strtod_l+0x950>
 80162ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162b2:	b352      	cbz	r2, 801630a <_strtod_l+0x8ca>
 80162b4:	4a33      	ldr	r2, [pc, #204]	; (8016384 <_strtod_l+0x944>)
 80162b6:	4293      	cmp	r3, r2
 80162b8:	d12a      	bne.n	8016310 <_strtod_l+0x8d0>
 80162ba:	9b04      	ldr	r3, [sp, #16]
 80162bc:	4641      	mov	r1, r8
 80162be:	b1fb      	cbz	r3, 8016300 <_strtod_l+0x8c0>
 80162c0:	4b2e      	ldr	r3, [pc, #184]	; (801637c <_strtod_l+0x93c>)
 80162c2:	ea09 0303 	and.w	r3, r9, r3
 80162c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80162ca:	f04f 32ff 	mov.w	r2, #4294967295
 80162ce:	d81a      	bhi.n	8016306 <_strtod_l+0x8c6>
 80162d0:	0d1b      	lsrs	r3, r3, #20
 80162d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80162d6:	fa02 f303 	lsl.w	r3, r2, r3
 80162da:	4299      	cmp	r1, r3
 80162dc:	d118      	bne.n	8016310 <_strtod_l+0x8d0>
 80162de:	4b2a      	ldr	r3, [pc, #168]	; (8016388 <_strtod_l+0x948>)
 80162e0:	459a      	cmp	sl, r3
 80162e2:	d102      	bne.n	80162ea <_strtod_l+0x8aa>
 80162e4:	3101      	adds	r1, #1
 80162e6:	f43f adef 	beq.w	8015ec8 <_strtod_l+0x488>
 80162ea:	4b24      	ldr	r3, [pc, #144]	; (801637c <_strtod_l+0x93c>)
 80162ec:	ea0a 0303 	and.w	r3, sl, r3
 80162f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80162f4:	f04f 0800 	mov.w	r8, #0
 80162f8:	9b04      	ldr	r3, [sp, #16]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d1a2      	bne.n	8016244 <_strtod_l+0x804>
 80162fe:	e5ed      	b.n	8015edc <_strtod_l+0x49c>
 8016300:	f04f 33ff 	mov.w	r3, #4294967295
 8016304:	e7e9      	b.n	80162da <_strtod_l+0x89a>
 8016306:	4613      	mov	r3, r2
 8016308:	e7e7      	b.n	80162da <_strtod_l+0x89a>
 801630a:	ea53 0308 	orrs.w	r3, r3, r8
 801630e:	d08a      	beq.n	8016226 <_strtod_l+0x7e6>
 8016310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016312:	b1e3      	cbz	r3, 801634e <_strtod_l+0x90e>
 8016314:	ea13 0f0a 	tst.w	r3, sl
 8016318:	d0ee      	beq.n	80162f8 <_strtod_l+0x8b8>
 801631a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801631c:	9a04      	ldr	r2, [sp, #16]
 801631e:	4640      	mov	r0, r8
 8016320:	4649      	mov	r1, r9
 8016322:	b1c3      	cbz	r3, 8016356 <_strtod_l+0x916>
 8016324:	f7ff fb6f 	bl	8015a06 <sulp>
 8016328:	4602      	mov	r2, r0
 801632a:	460b      	mov	r3, r1
 801632c:	ec51 0b18 	vmov	r0, r1, d8
 8016330:	f7e9 ffd4 	bl	80002dc <__adddf3>
 8016334:	4680      	mov	r8, r0
 8016336:	4689      	mov	r9, r1
 8016338:	e7de      	b.n	80162f8 <_strtod_l+0x8b8>
 801633a:	4013      	ands	r3, r2
 801633c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016340:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016344:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016348:	f04f 38ff 	mov.w	r8, #4294967295
 801634c:	e7d4      	b.n	80162f8 <_strtod_l+0x8b8>
 801634e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016350:	ea13 0f08 	tst.w	r3, r8
 8016354:	e7e0      	b.n	8016318 <_strtod_l+0x8d8>
 8016356:	f7ff fb56 	bl	8015a06 <sulp>
 801635a:	4602      	mov	r2, r0
 801635c:	460b      	mov	r3, r1
 801635e:	ec51 0b18 	vmov	r0, r1, d8
 8016362:	f7e9 ffb9 	bl	80002d8 <__aeabi_dsub>
 8016366:	2200      	movs	r2, #0
 8016368:	2300      	movs	r3, #0
 801636a:	4680      	mov	r8, r0
 801636c:	4689      	mov	r9, r1
 801636e:	f7ea fbd3 	bl	8000b18 <__aeabi_dcmpeq>
 8016372:	2800      	cmp	r0, #0
 8016374:	d0c0      	beq.n	80162f8 <_strtod_l+0x8b8>
 8016376:	e618      	b.n	8015faa <_strtod_l+0x56a>
 8016378:	fffffc02 	.word	0xfffffc02
 801637c:	7ff00000 	.word	0x7ff00000
 8016380:	39500000 	.word	0x39500000
 8016384:	000fffff 	.word	0x000fffff
 8016388:	7fefffff 	.word	0x7fefffff
 801638c:	08018be0 	.word	0x08018be0
 8016390:	4659      	mov	r1, fp
 8016392:	4628      	mov	r0, r5
 8016394:	f7ff fac0 	bl	8015918 <__ratio>
 8016398:	ec57 6b10 	vmov	r6, r7, d0
 801639c:	ee10 0a10 	vmov	r0, s0
 80163a0:	2200      	movs	r2, #0
 80163a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80163a6:	4639      	mov	r1, r7
 80163a8:	f7ea fbca 	bl	8000b40 <__aeabi_dcmple>
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d071      	beq.n	8016494 <_strtod_l+0xa54>
 80163b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d17c      	bne.n	80164b0 <_strtod_l+0xa70>
 80163b6:	f1b8 0f00 	cmp.w	r8, #0
 80163ba:	d15a      	bne.n	8016472 <_strtod_l+0xa32>
 80163bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d15d      	bne.n	8016480 <_strtod_l+0xa40>
 80163c4:	4b90      	ldr	r3, [pc, #576]	; (8016608 <_strtod_l+0xbc8>)
 80163c6:	2200      	movs	r2, #0
 80163c8:	4630      	mov	r0, r6
 80163ca:	4639      	mov	r1, r7
 80163cc:	f7ea fbae 	bl	8000b2c <__aeabi_dcmplt>
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d15c      	bne.n	801648e <_strtod_l+0xa4e>
 80163d4:	4630      	mov	r0, r6
 80163d6:	4639      	mov	r1, r7
 80163d8:	4b8c      	ldr	r3, [pc, #560]	; (801660c <_strtod_l+0xbcc>)
 80163da:	2200      	movs	r2, #0
 80163dc:	f7ea f934 	bl	8000648 <__aeabi_dmul>
 80163e0:	4606      	mov	r6, r0
 80163e2:	460f      	mov	r7, r1
 80163e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80163e8:	9606      	str	r6, [sp, #24]
 80163ea:	9307      	str	r3, [sp, #28]
 80163ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80163f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80163f4:	4b86      	ldr	r3, [pc, #536]	; (8016610 <_strtod_l+0xbd0>)
 80163f6:	ea0a 0303 	and.w	r3, sl, r3
 80163fa:	930d      	str	r3, [sp, #52]	; 0x34
 80163fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163fe:	4b85      	ldr	r3, [pc, #532]	; (8016614 <_strtod_l+0xbd4>)
 8016400:	429a      	cmp	r2, r3
 8016402:	f040 8090 	bne.w	8016526 <_strtod_l+0xae6>
 8016406:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801640a:	ec49 8b10 	vmov	d0, r8, r9
 801640e:	f7ff f9b9 	bl	8015784 <__ulp>
 8016412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016416:	ec51 0b10 	vmov	r0, r1, d0
 801641a:	f7ea f915 	bl	8000648 <__aeabi_dmul>
 801641e:	4642      	mov	r2, r8
 8016420:	464b      	mov	r3, r9
 8016422:	f7e9 ff5b 	bl	80002dc <__adddf3>
 8016426:	460b      	mov	r3, r1
 8016428:	4979      	ldr	r1, [pc, #484]	; (8016610 <_strtod_l+0xbd0>)
 801642a:	4a7b      	ldr	r2, [pc, #492]	; (8016618 <_strtod_l+0xbd8>)
 801642c:	4019      	ands	r1, r3
 801642e:	4291      	cmp	r1, r2
 8016430:	4680      	mov	r8, r0
 8016432:	d944      	bls.n	80164be <_strtod_l+0xa7e>
 8016434:	ee18 2a90 	vmov	r2, s17
 8016438:	4b78      	ldr	r3, [pc, #480]	; (801661c <_strtod_l+0xbdc>)
 801643a:	429a      	cmp	r2, r3
 801643c:	d104      	bne.n	8016448 <_strtod_l+0xa08>
 801643e:	ee18 3a10 	vmov	r3, s16
 8016442:	3301      	adds	r3, #1
 8016444:	f43f ad40 	beq.w	8015ec8 <_strtod_l+0x488>
 8016448:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801661c <_strtod_l+0xbdc>
 801644c:	f04f 38ff 	mov.w	r8, #4294967295
 8016450:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016452:	4620      	mov	r0, r4
 8016454:	f7fe fe6a 	bl	801512c <_Bfree>
 8016458:	9905      	ldr	r1, [sp, #20]
 801645a:	4620      	mov	r0, r4
 801645c:	f7fe fe66 	bl	801512c <_Bfree>
 8016460:	4659      	mov	r1, fp
 8016462:	4620      	mov	r0, r4
 8016464:	f7fe fe62 	bl	801512c <_Bfree>
 8016468:	4629      	mov	r1, r5
 801646a:	4620      	mov	r0, r4
 801646c:	f7fe fe5e 	bl	801512c <_Bfree>
 8016470:	e609      	b.n	8016086 <_strtod_l+0x646>
 8016472:	f1b8 0f01 	cmp.w	r8, #1
 8016476:	d103      	bne.n	8016480 <_strtod_l+0xa40>
 8016478:	f1b9 0f00 	cmp.w	r9, #0
 801647c:	f43f ad95 	beq.w	8015faa <_strtod_l+0x56a>
 8016480:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80165d8 <_strtod_l+0xb98>
 8016484:	4f60      	ldr	r7, [pc, #384]	; (8016608 <_strtod_l+0xbc8>)
 8016486:	ed8d 7b06 	vstr	d7, [sp, #24]
 801648a:	2600      	movs	r6, #0
 801648c:	e7ae      	b.n	80163ec <_strtod_l+0x9ac>
 801648e:	4f5f      	ldr	r7, [pc, #380]	; (801660c <_strtod_l+0xbcc>)
 8016490:	2600      	movs	r6, #0
 8016492:	e7a7      	b.n	80163e4 <_strtod_l+0x9a4>
 8016494:	4b5d      	ldr	r3, [pc, #372]	; (801660c <_strtod_l+0xbcc>)
 8016496:	4630      	mov	r0, r6
 8016498:	4639      	mov	r1, r7
 801649a:	2200      	movs	r2, #0
 801649c:	f7ea f8d4 	bl	8000648 <__aeabi_dmul>
 80164a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164a2:	4606      	mov	r6, r0
 80164a4:	460f      	mov	r7, r1
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d09c      	beq.n	80163e4 <_strtod_l+0x9a4>
 80164aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80164ae:	e79d      	b.n	80163ec <_strtod_l+0x9ac>
 80164b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80165e0 <_strtod_l+0xba0>
 80164b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80164b8:	ec57 6b17 	vmov	r6, r7, d7
 80164bc:	e796      	b.n	80163ec <_strtod_l+0x9ac>
 80164be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80164c2:	9b04      	ldr	r3, [sp, #16]
 80164c4:	46ca      	mov	sl, r9
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d1c2      	bne.n	8016450 <_strtod_l+0xa10>
 80164ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80164ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80164d0:	0d1b      	lsrs	r3, r3, #20
 80164d2:	051b      	lsls	r3, r3, #20
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d1bb      	bne.n	8016450 <_strtod_l+0xa10>
 80164d8:	4630      	mov	r0, r6
 80164da:	4639      	mov	r1, r7
 80164dc:	f7ea fc14 	bl	8000d08 <__aeabi_d2lz>
 80164e0:	f7ea f884 	bl	80005ec <__aeabi_l2d>
 80164e4:	4602      	mov	r2, r0
 80164e6:	460b      	mov	r3, r1
 80164e8:	4630      	mov	r0, r6
 80164ea:	4639      	mov	r1, r7
 80164ec:	f7e9 fef4 	bl	80002d8 <__aeabi_dsub>
 80164f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164f6:	ea43 0308 	orr.w	r3, r3, r8
 80164fa:	4313      	orrs	r3, r2
 80164fc:	4606      	mov	r6, r0
 80164fe:	460f      	mov	r7, r1
 8016500:	d054      	beq.n	80165ac <_strtod_l+0xb6c>
 8016502:	a339      	add	r3, pc, #228	; (adr r3, 80165e8 <_strtod_l+0xba8>)
 8016504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016508:	f7ea fb10 	bl	8000b2c <__aeabi_dcmplt>
 801650c:	2800      	cmp	r0, #0
 801650e:	f47f ace5 	bne.w	8015edc <_strtod_l+0x49c>
 8016512:	a337      	add	r3, pc, #220	; (adr r3, 80165f0 <_strtod_l+0xbb0>)
 8016514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016518:	4630      	mov	r0, r6
 801651a:	4639      	mov	r1, r7
 801651c:	f7ea fb24 	bl	8000b68 <__aeabi_dcmpgt>
 8016520:	2800      	cmp	r0, #0
 8016522:	d095      	beq.n	8016450 <_strtod_l+0xa10>
 8016524:	e4da      	b.n	8015edc <_strtod_l+0x49c>
 8016526:	9b04      	ldr	r3, [sp, #16]
 8016528:	b333      	cbz	r3, 8016578 <_strtod_l+0xb38>
 801652a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801652c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016530:	d822      	bhi.n	8016578 <_strtod_l+0xb38>
 8016532:	a331      	add	r3, pc, #196	; (adr r3, 80165f8 <_strtod_l+0xbb8>)
 8016534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016538:	4630      	mov	r0, r6
 801653a:	4639      	mov	r1, r7
 801653c:	f7ea fb00 	bl	8000b40 <__aeabi_dcmple>
 8016540:	b1a0      	cbz	r0, 801656c <_strtod_l+0xb2c>
 8016542:	4639      	mov	r1, r7
 8016544:	4630      	mov	r0, r6
 8016546:	f7ea fb57 	bl	8000bf8 <__aeabi_d2uiz>
 801654a:	2801      	cmp	r0, #1
 801654c:	bf38      	it	cc
 801654e:	2001      	movcc	r0, #1
 8016550:	f7ea f800 	bl	8000554 <__aeabi_ui2d>
 8016554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016556:	4606      	mov	r6, r0
 8016558:	460f      	mov	r7, r1
 801655a:	bb23      	cbnz	r3, 80165a6 <_strtod_l+0xb66>
 801655c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016560:	9010      	str	r0, [sp, #64]	; 0x40
 8016562:	9311      	str	r3, [sp, #68]	; 0x44
 8016564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016568:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801656c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801656e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016570:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016574:	1a9b      	subs	r3, r3, r2
 8016576:	930f      	str	r3, [sp, #60]	; 0x3c
 8016578:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801657c:	eeb0 0a48 	vmov.f32	s0, s16
 8016580:	eef0 0a68 	vmov.f32	s1, s17
 8016584:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016588:	f7ff f8fc 	bl	8015784 <__ulp>
 801658c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016590:	ec53 2b10 	vmov	r2, r3, d0
 8016594:	f7ea f858 	bl	8000648 <__aeabi_dmul>
 8016598:	ec53 2b18 	vmov	r2, r3, d8
 801659c:	f7e9 fe9e 	bl	80002dc <__adddf3>
 80165a0:	4680      	mov	r8, r0
 80165a2:	4689      	mov	r9, r1
 80165a4:	e78d      	b.n	80164c2 <_strtod_l+0xa82>
 80165a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80165aa:	e7db      	b.n	8016564 <_strtod_l+0xb24>
 80165ac:	a314      	add	r3, pc, #80	; (adr r3, 8016600 <_strtod_l+0xbc0>)
 80165ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b2:	f7ea fabb 	bl	8000b2c <__aeabi_dcmplt>
 80165b6:	e7b3      	b.n	8016520 <_strtod_l+0xae0>
 80165b8:	2300      	movs	r3, #0
 80165ba:	930a      	str	r3, [sp, #40]	; 0x28
 80165bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80165be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165c0:	6013      	str	r3, [r2, #0]
 80165c2:	f7ff ba7c 	b.w	8015abe <_strtod_l+0x7e>
 80165c6:	2a65      	cmp	r2, #101	; 0x65
 80165c8:	f43f ab75 	beq.w	8015cb6 <_strtod_l+0x276>
 80165cc:	2a45      	cmp	r2, #69	; 0x45
 80165ce:	f43f ab72 	beq.w	8015cb6 <_strtod_l+0x276>
 80165d2:	2301      	movs	r3, #1
 80165d4:	f7ff bbaa 	b.w	8015d2c <_strtod_l+0x2ec>
 80165d8:	00000000 	.word	0x00000000
 80165dc:	bff00000 	.word	0xbff00000
 80165e0:	00000000 	.word	0x00000000
 80165e4:	3ff00000 	.word	0x3ff00000
 80165e8:	94a03595 	.word	0x94a03595
 80165ec:	3fdfffff 	.word	0x3fdfffff
 80165f0:	35afe535 	.word	0x35afe535
 80165f4:	3fe00000 	.word	0x3fe00000
 80165f8:	ffc00000 	.word	0xffc00000
 80165fc:	41dfffff 	.word	0x41dfffff
 8016600:	94a03595 	.word	0x94a03595
 8016604:	3fcfffff 	.word	0x3fcfffff
 8016608:	3ff00000 	.word	0x3ff00000
 801660c:	3fe00000 	.word	0x3fe00000
 8016610:	7ff00000 	.word	0x7ff00000
 8016614:	7fe00000 	.word	0x7fe00000
 8016618:	7c9fffff 	.word	0x7c9fffff
 801661c:	7fefffff 	.word	0x7fefffff

08016620 <_strtod_r>:
 8016620:	4b01      	ldr	r3, [pc, #4]	; (8016628 <_strtod_r+0x8>)
 8016622:	f7ff ba0d 	b.w	8015a40 <_strtod_l>
 8016626:	bf00      	nop
 8016628:	200000d8 	.word	0x200000d8

0801662c <_strtol_l.constprop.0>:
 801662c:	2b01      	cmp	r3, #1
 801662e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016632:	d001      	beq.n	8016638 <_strtol_l.constprop.0+0xc>
 8016634:	2b24      	cmp	r3, #36	; 0x24
 8016636:	d906      	bls.n	8016646 <_strtol_l.constprop.0+0x1a>
 8016638:	f7fd fe30 	bl	801429c <__errno>
 801663c:	2316      	movs	r3, #22
 801663e:	6003      	str	r3, [r0, #0]
 8016640:	2000      	movs	r0, #0
 8016642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016646:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801672c <_strtol_l.constprop.0+0x100>
 801664a:	460d      	mov	r5, r1
 801664c:	462e      	mov	r6, r5
 801664e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016652:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016656:	f017 0708 	ands.w	r7, r7, #8
 801665a:	d1f7      	bne.n	801664c <_strtol_l.constprop.0+0x20>
 801665c:	2c2d      	cmp	r4, #45	; 0x2d
 801665e:	d132      	bne.n	80166c6 <_strtol_l.constprop.0+0x9a>
 8016660:	782c      	ldrb	r4, [r5, #0]
 8016662:	2701      	movs	r7, #1
 8016664:	1cb5      	adds	r5, r6, #2
 8016666:	2b00      	cmp	r3, #0
 8016668:	d05b      	beq.n	8016722 <_strtol_l.constprop.0+0xf6>
 801666a:	2b10      	cmp	r3, #16
 801666c:	d109      	bne.n	8016682 <_strtol_l.constprop.0+0x56>
 801666e:	2c30      	cmp	r4, #48	; 0x30
 8016670:	d107      	bne.n	8016682 <_strtol_l.constprop.0+0x56>
 8016672:	782c      	ldrb	r4, [r5, #0]
 8016674:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016678:	2c58      	cmp	r4, #88	; 0x58
 801667a:	d14d      	bne.n	8016718 <_strtol_l.constprop.0+0xec>
 801667c:	786c      	ldrb	r4, [r5, #1]
 801667e:	2310      	movs	r3, #16
 8016680:	3502      	adds	r5, #2
 8016682:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016686:	f108 38ff 	add.w	r8, r8, #4294967295
 801668a:	f04f 0e00 	mov.w	lr, #0
 801668e:	fbb8 f9f3 	udiv	r9, r8, r3
 8016692:	4676      	mov	r6, lr
 8016694:	fb03 8a19 	mls	sl, r3, r9, r8
 8016698:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801669c:	f1bc 0f09 	cmp.w	ip, #9
 80166a0:	d816      	bhi.n	80166d0 <_strtol_l.constprop.0+0xa4>
 80166a2:	4664      	mov	r4, ip
 80166a4:	42a3      	cmp	r3, r4
 80166a6:	dd24      	ble.n	80166f2 <_strtol_l.constprop.0+0xc6>
 80166a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80166ac:	d008      	beq.n	80166c0 <_strtol_l.constprop.0+0x94>
 80166ae:	45b1      	cmp	r9, r6
 80166b0:	d31c      	bcc.n	80166ec <_strtol_l.constprop.0+0xc0>
 80166b2:	d101      	bne.n	80166b8 <_strtol_l.constprop.0+0x8c>
 80166b4:	45a2      	cmp	sl, r4
 80166b6:	db19      	blt.n	80166ec <_strtol_l.constprop.0+0xc0>
 80166b8:	fb06 4603 	mla	r6, r6, r3, r4
 80166bc:	f04f 0e01 	mov.w	lr, #1
 80166c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166c4:	e7e8      	b.n	8016698 <_strtol_l.constprop.0+0x6c>
 80166c6:	2c2b      	cmp	r4, #43	; 0x2b
 80166c8:	bf04      	itt	eq
 80166ca:	782c      	ldrbeq	r4, [r5, #0]
 80166cc:	1cb5      	addeq	r5, r6, #2
 80166ce:	e7ca      	b.n	8016666 <_strtol_l.constprop.0+0x3a>
 80166d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80166d4:	f1bc 0f19 	cmp.w	ip, #25
 80166d8:	d801      	bhi.n	80166de <_strtol_l.constprop.0+0xb2>
 80166da:	3c37      	subs	r4, #55	; 0x37
 80166dc:	e7e2      	b.n	80166a4 <_strtol_l.constprop.0+0x78>
 80166de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80166e2:	f1bc 0f19 	cmp.w	ip, #25
 80166e6:	d804      	bhi.n	80166f2 <_strtol_l.constprop.0+0xc6>
 80166e8:	3c57      	subs	r4, #87	; 0x57
 80166ea:	e7db      	b.n	80166a4 <_strtol_l.constprop.0+0x78>
 80166ec:	f04f 3eff 	mov.w	lr, #4294967295
 80166f0:	e7e6      	b.n	80166c0 <_strtol_l.constprop.0+0x94>
 80166f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80166f6:	d105      	bne.n	8016704 <_strtol_l.constprop.0+0xd8>
 80166f8:	2322      	movs	r3, #34	; 0x22
 80166fa:	6003      	str	r3, [r0, #0]
 80166fc:	4646      	mov	r6, r8
 80166fe:	b942      	cbnz	r2, 8016712 <_strtol_l.constprop.0+0xe6>
 8016700:	4630      	mov	r0, r6
 8016702:	e79e      	b.n	8016642 <_strtol_l.constprop.0+0x16>
 8016704:	b107      	cbz	r7, 8016708 <_strtol_l.constprop.0+0xdc>
 8016706:	4276      	negs	r6, r6
 8016708:	2a00      	cmp	r2, #0
 801670a:	d0f9      	beq.n	8016700 <_strtol_l.constprop.0+0xd4>
 801670c:	f1be 0f00 	cmp.w	lr, #0
 8016710:	d000      	beq.n	8016714 <_strtol_l.constprop.0+0xe8>
 8016712:	1e69      	subs	r1, r5, #1
 8016714:	6011      	str	r1, [r2, #0]
 8016716:	e7f3      	b.n	8016700 <_strtol_l.constprop.0+0xd4>
 8016718:	2430      	movs	r4, #48	; 0x30
 801671a:	2b00      	cmp	r3, #0
 801671c:	d1b1      	bne.n	8016682 <_strtol_l.constprop.0+0x56>
 801671e:	2308      	movs	r3, #8
 8016720:	e7af      	b.n	8016682 <_strtol_l.constprop.0+0x56>
 8016722:	2c30      	cmp	r4, #48	; 0x30
 8016724:	d0a5      	beq.n	8016672 <_strtol_l.constprop.0+0x46>
 8016726:	230a      	movs	r3, #10
 8016728:	e7ab      	b.n	8016682 <_strtol_l.constprop.0+0x56>
 801672a:	bf00      	nop
 801672c:	08018c09 	.word	0x08018c09

08016730 <_strtol_r>:
 8016730:	f7ff bf7c 	b.w	801662c <_strtol_l.constprop.0>

08016734 <__ssputs_r>:
 8016734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016738:	688e      	ldr	r6, [r1, #8]
 801673a:	461f      	mov	r7, r3
 801673c:	42be      	cmp	r6, r7
 801673e:	680b      	ldr	r3, [r1, #0]
 8016740:	4682      	mov	sl, r0
 8016742:	460c      	mov	r4, r1
 8016744:	4690      	mov	r8, r2
 8016746:	d82c      	bhi.n	80167a2 <__ssputs_r+0x6e>
 8016748:	898a      	ldrh	r2, [r1, #12]
 801674a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801674e:	d026      	beq.n	801679e <__ssputs_r+0x6a>
 8016750:	6965      	ldr	r5, [r4, #20]
 8016752:	6909      	ldr	r1, [r1, #16]
 8016754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016758:	eba3 0901 	sub.w	r9, r3, r1
 801675c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016760:	1c7b      	adds	r3, r7, #1
 8016762:	444b      	add	r3, r9
 8016764:	106d      	asrs	r5, r5, #1
 8016766:	429d      	cmp	r5, r3
 8016768:	bf38      	it	cc
 801676a:	461d      	movcc	r5, r3
 801676c:	0553      	lsls	r3, r2, #21
 801676e:	d527      	bpl.n	80167c0 <__ssputs_r+0x8c>
 8016770:	4629      	mov	r1, r5
 8016772:	f7fc fc77 	bl	8013064 <_malloc_r>
 8016776:	4606      	mov	r6, r0
 8016778:	b360      	cbz	r0, 80167d4 <__ssputs_r+0xa0>
 801677a:	6921      	ldr	r1, [r4, #16]
 801677c:	464a      	mov	r2, r9
 801677e:	f7fd fdba 	bl	80142f6 <memcpy>
 8016782:	89a3      	ldrh	r3, [r4, #12]
 8016784:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801678c:	81a3      	strh	r3, [r4, #12]
 801678e:	6126      	str	r6, [r4, #16]
 8016790:	6165      	str	r5, [r4, #20]
 8016792:	444e      	add	r6, r9
 8016794:	eba5 0509 	sub.w	r5, r5, r9
 8016798:	6026      	str	r6, [r4, #0]
 801679a:	60a5      	str	r5, [r4, #8]
 801679c:	463e      	mov	r6, r7
 801679e:	42be      	cmp	r6, r7
 80167a0:	d900      	bls.n	80167a4 <__ssputs_r+0x70>
 80167a2:	463e      	mov	r6, r7
 80167a4:	6820      	ldr	r0, [r4, #0]
 80167a6:	4632      	mov	r2, r6
 80167a8:	4641      	mov	r1, r8
 80167aa:	f7fd fca4 	bl	80140f6 <memmove>
 80167ae:	68a3      	ldr	r3, [r4, #8]
 80167b0:	1b9b      	subs	r3, r3, r6
 80167b2:	60a3      	str	r3, [r4, #8]
 80167b4:	6823      	ldr	r3, [r4, #0]
 80167b6:	4433      	add	r3, r6
 80167b8:	6023      	str	r3, [r4, #0]
 80167ba:	2000      	movs	r0, #0
 80167bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167c0:	462a      	mov	r2, r5
 80167c2:	f000 ff30 	bl	8017626 <_realloc_r>
 80167c6:	4606      	mov	r6, r0
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d1e0      	bne.n	801678e <__ssputs_r+0x5a>
 80167cc:	6921      	ldr	r1, [r4, #16]
 80167ce:	4650      	mov	r0, sl
 80167d0:	f7fe fc20 	bl	8015014 <_free_r>
 80167d4:	230c      	movs	r3, #12
 80167d6:	f8ca 3000 	str.w	r3, [sl]
 80167da:	89a3      	ldrh	r3, [r4, #12]
 80167dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167e0:	81a3      	strh	r3, [r4, #12]
 80167e2:	f04f 30ff 	mov.w	r0, #4294967295
 80167e6:	e7e9      	b.n	80167bc <__ssputs_r+0x88>

080167e8 <_svfiprintf_r>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	4698      	mov	r8, r3
 80167ee:	898b      	ldrh	r3, [r1, #12]
 80167f0:	061b      	lsls	r3, r3, #24
 80167f2:	b09d      	sub	sp, #116	; 0x74
 80167f4:	4607      	mov	r7, r0
 80167f6:	460d      	mov	r5, r1
 80167f8:	4614      	mov	r4, r2
 80167fa:	d50e      	bpl.n	801681a <_svfiprintf_r+0x32>
 80167fc:	690b      	ldr	r3, [r1, #16]
 80167fe:	b963      	cbnz	r3, 801681a <_svfiprintf_r+0x32>
 8016800:	2140      	movs	r1, #64	; 0x40
 8016802:	f7fc fc2f 	bl	8013064 <_malloc_r>
 8016806:	6028      	str	r0, [r5, #0]
 8016808:	6128      	str	r0, [r5, #16]
 801680a:	b920      	cbnz	r0, 8016816 <_svfiprintf_r+0x2e>
 801680c:	230c      	movs	r3, #12
 801680e:	603b      	str	r3, [r7, #0]
 8016810:	f04f 30ff 	mov.w	r0, #4294967295
 8016814:	e0d0      	b.n	80169b8 <_svfiprintf_r+0x1d0>
 8016816:	2340      	movs	r3, #64	; 0x40
 8016818:	616b      	str	r3, [r5, #20]
 801681a:	2300      	movs	r3, #0
 801681c:	9309      	str	r3, [sp, #36]	; 0x24
 801681e:	2320      	movs	r3, #32
 8016820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016824:	f8cd 800c 	str.w	r8, [sp, #12]
 8016828:	2330      	movs	r3, #48	; 0x30
 801682a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80169d0 <_svfiprintf_r+0x1e8>
 801682e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016832:	f04f 0901 	mov.w	r9, #1
 8016836:	4623      	mov	r3, r4
 8016838:	469a      	mov	sl, r3
 801683a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801683e:	b10a      	cbz	r2, 8016844 <_svfiprintf_r+0x5c>
 8016840:	2a25      	cmp	r2, #37	; 0x25
 8016842:	d1f9      	bne.n	8016838 <_svfiprintf_r+0x50>
 8016844:	ebba 0b04 	subs.w	fp, sl, r4
 8016848:	d00b      	beq.n	8016862 <_svfiprintf_r+0x7a>
 801684a:	465b      	mov	r3, fp
 801684c:	4622      	mov	r2, r4
 801684e:	4629      	mov	r1, r5
 8016850:	4638      	mov	r0, r7
 8016852:	f7ff ff6f 	bl	8016734 <__ssputs_r>
 8016856:	3001      	adds	r0, #1
 8016858:	f000 80a9 	beq.w	80169ae <_svfiprintf_r+0x1c6>
 801685c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801685e:	445a      	add	r2, fp
 8016860:	9209      	str	r2, [sp, #36]	; 0x24
 8016862:	f89a 3000 	ldrb.w	r3, [sl]
 8016866:	2b00      	cmp	r3, #0
 8016868:	f000 80a1 	beq.w	80169ae <_svfiprintf_r+0x1c6>
 801686c:	2300      	movs	r3, #0
 801686e:	f04f 32ff 	mov.w	r2, #4294967295
 8016872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016876:	f10a 0a01 	add.w	sl, sl, #1
 801687a:	9304      	str	r3, [sp, #16]
 801687c:	9307      	str	r3, [sp, #28]
 801687e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016882:	931a      	str	r3, [sp, #104]	; 0x68
 8016884:	4654      	mov	r4, sl
 8016886:	2205      	movs	r2, #5
 8016888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801688c:	4850      	ldr	r0, [pc, #320]	; (80169d0 <_svfiprintf_r+0x1e8>)
 801688e:	f7e9 fcc7 	bl	8000220 <memchr>
 8016892:	9a04      	ldr	r2, [sp, #16]
 8016894:	b9d8      	cbnz	r0, 80168ce <_svfiprintf_r+0xe6>
 8016896:	06d0      	lsls	r0, r2, #27
 8016898:	bf44      	itt	mi
 801689a:	2320      	movmi	r3, #32
 801689c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168a0:	0711      	lsls	r1, r2, #28
 80168a2:	bf44      	itt	mi
 80168a4:	232b      	movmi	r3, #43	; 0x2b
 80168a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168aa:	f89a 3000 	ldrb.w	r3, [sl]
 80168ae:	2b2a      	cmp	r3, #42	; 0x2a
 80168b0:	d015      	beq.n	80168de <_svfiprintf_r+0xf6>
 80168b2:	9a07      	ldr	r2, [sp, #28]
 80168b4:	4654      	mov	r4, sl
 80168b6:	2000      	movs	r0, #0
 80168b8:	f04f 0c0a 	mov.w	ip, #10
 80168bc:	4621      	mov	r1, r4
 80168be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168c2:	3b30      	subs	r3, #48	; 0x30
 80168c4:	2b09      	cmp	r3, #9
 80168c6:	d94d      	bls.n	8016964 <_svfiprintf_r+0x17c>
 80168c8:	b1b0      	cbz	r0, 80168f8 <_svfiprintf_r+0x110>
 80168ca:	9207      	str	r2, [sp, #28]
 80168cc:	e014      	b.n	80168f8 <_svfiprintf_r+0x110>
 80168ce:	eba0 0308 	sub.w	r3, r0, r8
 80168d2:	fa09 f303 	lsl.w	r3, r9, r3
 80168d6:	4313      	orrs	r3, r2
 80168d8:	9304      	str	r3, [sp, #16]
 80168da:	46a2      	mov	sl, r4
 80168dc:	e7d2      	b.n	8016884 <_svfiprintf_r+0x9c>
 80168de:	9b03      	ldr	r3, [sp, #12]
 80168e0:	1d19      	adds	r1, r3, #4
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	9103      	str	r1, [sp, #12]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	bfbb      	ittet	lt
 80168ea:	425b      	neglt	r3, r3
 80168ec:	f042 0202 	orrlt.w	r2, r2, #2
 80168f0:	9307      	strge	r3, [sp, #28]
 80168f2:	9307      	strlt	r3, [sp, #28]
 80168f4:	bfb8      	it	lt
 80168f6:	9204      	strlt	r2, [sp, #16]
 80168f8:	7823      	ldrb	r3, [r4, #0]
 80168fa:	2b2e      	cmp	r3, #46	; 0x2e
 80168fc:	d10c      	bne.n	8016918 <_svfiprintf_r+0x130>
 80168fe:	7863      	ldrb	r3, [r4, #1]
 8016900:	2b2a      	cmp	r3, #42	; 0x2a
 8016902:	d134      	bne.n	801696e <_svfiprintf_r+0x186>
 8016904:	9b03      	ldr	r3, [sp, #12]
 8016906:	1d1a      	adds	r2, r3, #4
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	9203      	str	r2, [sp, #12]
 801690c:	2b00      	cmp	r3, #0
 801690e:	bfb8      	it	lt
 8016910:	f04f 33ff 	movlt.w	r3, #4294967295
 8016914:	3402      	adds	r4, #2
 8016916:	9305      	str	r3, [sp, #20]
 8016918:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80169e0 <_svfiprintf_r+0x1f8>
 801691c:	7821      	ldrb	r1, [r4, #0]
 801691e:	2203      	movs	r2, #3
 8016920:	4650      	mov	r0, sl
 8016922:	f7e9 fc7d 	bl	8000220 <memchr>
 8016926:	b138      	cbz	r0, 8016938 <_svfiprintf_r+0x150>
 8016928:	9b04      	ldr	r3, [sp, #16]
 801692a:	eba0 000a 	sub.w	r0, r0, sl
 801692e:	2240      	movs	r2, #64	; 0x40
 8016930:	4082      	lsls	r2, r0
 8016932:	4313      	orrs	r3, r2
 8016934:	3401      	adds	r4, #1
 8016936:	9304      	str	r3, [sp, #16]
 8016938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801693c:	4825      	ldr	r0, [pc, #148]	; (80169d4 <_svfiprintf_r+0x1ec>)
 801693e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016942:	2206      	movs	r2, #6
 8016944:	f7e9 fc6c 	bl	8000220 <memchr>
 8016948:	2800      	cmp	r0, #0
 801694a:	d038      	beq.n	80169be <_svfiprintf_r+0x1d6>
 801694c:	4b22      	ldr	r3, [pc, #136]	; (80169d8 <_svfiprintf_r+0x1f0>)
 801694e:	bb1b      	cbnz	r3, 8016998 <_svfiprintf_r+0x1b0>
 8016950:	9b03      	ldr	r3, [sp, #12]
 8016952:	3307      	adds	r3, #7
 8016954:	f023 0307 	bic.w	r3, r3, #7
 8016958:	3308      	adds	r3, #8
 801695a:	9303      	str	r3, [sp, #12]
 801695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801695e:	4433      	add	r3, r6
 8016960:	9309      	str	r3, [sp, #36]	; 0x24
 8016962:	e768      	b.n	8016836 <_svfiprintf_r+0x4e>
 8016964:	fb0c 3202 	mla	r2, ip, r2, r3
 8016968:	460c      	mov	r4, r1
 801696a:	2001      	movs	r0, #1
 801696c:	e7a6      	b.n	80168bc <_svfiprintf_r+0xd4>
 801696e:	2300      	movs	r3, #0
 8016970:	3401      	adds	r4, #1
 8016972:	9305      	str	r3, [sp, #20]
 8016974:	4619      	mov	r1, r3
 8016976:	f04f 0c0a 	mov.w	ip, #10
 801697a:	4620      	mov	r0, r4
 801697c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016980:	3a30      	subs	r2, #48	; 0x30
 8016982:	2a09      	cmp	r2, #9
 8016984:	d903      	bls.n	801698e <_svfiprintf_r+0x1a6>
 8016986:	2b00      	cmp	r3, #0
 8016988:	d0c6      	beq.n	8016918 <_svfiprintf_r+0x130>
 801698a:	9105      	str	r1, [sp, #20]
 801698c:	e7c4      	b.n	8016918 <_svfiprintf_r+0x130>
 801698e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016992:	4604      	mov	r4, r0
 8016994:	2301      	movs	r3, #1
 8016996:	e7f0      	b.n	801697a <_svfiprintf_r+0x192>
 8016998:	ab03      	add	r3, sp, #12
 801699a:	9300      	str	r3, [sp, #0]
 801699c:	462a      	mov	r2, r5
 801699e:	4b0f      	ldr	r3, [pc, #60]	; (80169dc <_svfiprintf_r+0x1f4>)
 80169a0:	a904      	add	r1, sp, #16
 80169a2:	4638      	mov	r0, r7
 80169a4:	f7fc fc8a 	bl	80132bc <_printf_float>
 80169a8:	1c42      	adds	r2, r0, #1
 80169aa:	4606      	mov	r6, r0
 80169ac:	d1d6      	bne.n	801695c <_svfiprintf_r+0x174>
 80169ae:	89ab      	ldrh	r3, [r5, #12]
 80169b0:	065b      	lsls	r3, r3, #25
 80169b2:	f53f af2d 	bmi.w	8016810 <_svfiprintf_r+0x28>
 80169b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169b8:	b01d      	add	sp, #116	; 0x74
 80169ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169be:	ab03      	add	r3, sp, #12
 80169c0:	9300      	str	r3, [sp, #0]
 80169c2:	462a      	mov	r2, r5
 80169c4:	4b05      	ldr	r3, [pc, #20]	; (80169dc <_svfiprintf_r+0x1f4>)
 80169c6:	a904      	add	r1, sp, #16
 80169c8:	4638      	mov	r0, r7
 80169ca:	f7fc ff1b 	bl	8013804 <_printf_i>
 80169ce:	e7eb      	b.n	80169a8 <_svfiprintf_r+0x1c0>
 80169d0:	08018d09 	.word	0x08018d09
 80169d4:	08018d13 	.word	0x08018d13
 80169d8:	080132bd 	.word	0x080132bd
 80169dc:	08016735 	.word	0x08016735
 80169e0:	08018d0f 	.word	0x08018d0f

080169e4 <__sfputc_r>:
 80169e4:	6893      	ldr	r3, [r2, #8]
 80169e6:	3b01      	subs	r3, #1
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	b410      	push	{r4}
 80169ec:	6093      	str	r3, [r2, #8]
 80169ee:	da08      	bge.n	8016a02 <__sfputc_r+0x1e>
 80169f0:	6994      	ldr	r4, [r2, #24]
 80169f2:	42a3      	cmp	r3, r4
 80169f4:	db01      	blt.n	80169fa <__sfputc_r+0x16>
 80169f6:	290a      	cmp	r1, #10
 80169f8:	d103      	bne.n	8016a02 <__sfputc_r+0x1e>
 80169fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169fe:	f000 b9e3 	b.w	8016dc8 <__swbuf_r>
 8016a02:	6813      	ldr	r3, [r2, #0]
 8016a04:	1c58      	adds	r0, r3, #1
 8016a06:	6010      	str	r0, [r2, #0]
 8016a08:	7019      	strb	r1, [r3, #0]
 8016a0a:	4608      	mov	r0, r1
 8016a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a10:	4770      	bx	lr

08016a12 <__sfputs_r>:
 8016a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a14:	4606      	mov	r6, r0
 8016a16:	460f      	mov	r7, r1
 8016a18:	4614      	mov	r4, r2
 8016a1a:	18d5      	adds	r5, r2, r3
 8016a1c:	42ac      	cmp	r4, r5
 8016a1e:	d101      	bne.n	8016a24 <__sfputs_r+0x12>
 8016a20:	2000      	movs	r0, #0
 8016a22:	e007      	b.n	8016a34 <__sfputs_r+0x22>
 8016a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a28:	463a      	mov	r2, r7
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	f7ff ffda 	bl	80169e4 <__sfputc_r>
 8016a30:	1c43      	adds	r3, r0, #1
 8016a32:	d1f3      	bne.n	8016a1c <__sfputs_r+0xa>
 8016a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a38 <_vfiprintf_r>:
 8016a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a3c:	460d      	mov	r5, r1
 8016a3e:	b09d      	sub	sp, #116	; 0x74
 8016a40:	4614      	mov	r4, r2
 8016a42:	4698      	mov	r8, r3
 8016a44:	4606      	mov	r6, r0
 8016a46:	b118      	cbz	r0, 8016a50 <_vfiprintf_r+0x18>
 8016a48:	6a03      	ldr	r3, [r0, #32]
 8016a4a:	b90b      	cbnz	r3, 8016a50 <_vfiprintf_r+0x18>
 8016a4c:	f7fd fa98 	bl	8013f80 <__sinit>
 8016a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a52:	07d9      	lsls	r1, r3, #31
 8016a54:	d405      	bmi.n	8016a62 <_vfiprintf_r+0x2a>
 8016a56:	89ab      	ldrh	r3, [r5, #12]
 8016a58:	059a      	lsls	r2, r3, #22
 8016a5a:	d402      	bmi.n	8016a62 <_vfiprintf_r+0x2a>
 8016a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a5e:	f7fd fc48 	bl	80142f2 <__retarget_lock_acquire_recursive>
 8016a62:	89ab      	ldrh	r3, [r5, #12]
 8016a64:	071b      	lsls	r3, r3, #28
 8016a66:	d501      	bpl.n	8016a6c <_vfiprintf_r+0x34>
 8016a68:	692b      	ldr	r3, [r5, #16]
 8016a6a:	b99b      	cbnz	r3, 8016a94 <_vfiprintf_r+0x5c>
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	4630      	mov	r0, r6
 8016a70:	f000 f9e8 	bl	8016e44 <__swsetup_r>
 8016a74:	b170      	cbz	r0, 8016a94 <_vfiprintf_r+0x5c>
 8016a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a78:	07dc      	lsls	r4, r3, #31
 8016a7a:	d504      	bpl.n	8016a86 <_vfiprintf_r+0x4e>
 8016a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a80:	b01d      	add	sp, #116	; 0x74
 8016a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a86:	89ab      	ldrh	r3, [r5, #12]
 8016a88:	0598      	lsls	r0, r3, #22
 8016a8a:	d4f7      	bmi.n	8016a7c <_vfiprintf_r+0x44>
 8016a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a8e:	f7fd fc31 	bl	80142f4 <__retarget_lock_release_recursive>
 8016a92:	e7f3      	b.n	8016a7c <_vfiprintf_r+0x44>
 8016a94:	2300      	movs	r3, #0
 8016a96:	9309      	str	r3, [sp, #36]	; 0x24
 8016a98:	2320      	movs	r3, #32
 8016a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016aa2:	2330      	movs	r3, #48	; 0x30
 8016aa4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016c58 <_vfiprintf_r+0x220>
 8016aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016aac:	f04f 0901 	mov.w	r9, #1
 8016ab0:	4623      	mov	r3, r4
 8016ab2:	469a      	mov	sl, r3
 8016ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ab8:	b10a      	cbz	r2, 8016abe <_vfiprintf_r+0x86>
 8016aba:	2a25      	cmp	r2, #37	; 0x25
 8016abc:	d1f9      	bne.n	8016ab2 <_vfiprintf_r+0x7a>
 8016abe:	ebba 0b04 	subs.w	fp, sl, r4
 8016ac2:	d00b      	beq.n	8016adc <_vfiprintf_r+0xa4>
 8016ac4:	465b      	mov	r3, fp
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	4629      	mov	r1, r5
 8016aca:	4630      	mov	r0, r6
 8016acc:	f7ff ffa1 	bl	8016a12 <__sfputs_r>
 8016ad0:	3001      	adds	r0, #1
 8016ad2:	f000 80a9 	beq.w	8016c28 <_vfiprintf_r+0x1f0>
 8016ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ad8:	445a      	add	r2, fp
 8016ada:	9209      	str	r2, [sp, #36]	; 0x24
 8016adc:	f89a 3000 	ldrb.w	r3, [sl]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	f000 80a1 	beq.w	8016c28 <_vfiprintf_r+0x1f0>
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8016aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016af0:	f10a 0a01 	add.w	sl, sl, #1
 8016af4:	9304      	str	r3, [sp, #16]
 8016af6:	9307      	str	r3, [sp, #28]
 8016af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016afc:	931a      	str	r3, [sp, #104]	; 0x68
 8016afe:	4654      	mov	r4, sl
 8016b00:	2205      	movs	r2, #5
 8016b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b06:	4854      	ldr	r0, [pc, #336]	; (8016c58 <_vfiprintf_r+0x220>)
 8016b08:	f7e9 fb8a 	bl	8000220 <memchr>
 8016b0c:	9a04      	ldr	r2, [sp, #16]
 8016b0e:	b9d8      	cbnz	r0, 8016b48 <_vfiprintf_r+0x110>
 8016b10:	06d1      	lsls	r1, r2, #27
 8016b12:	bf44      	itt	mi
 8016b14:	2320      	movmi	r3, #32
 8016b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b1a:	0713      	lsls	r3, r2, #28
 8016b1c:	bf44      	itt	mi
 8016b1e:	232b      	movmi	r3, #43	; 0x2b
 8016b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b24:	f89a 3000 	ldrb.w	r3, [sl]
 8016b28:	2b2a      	cmp	r3, #42	; 0x2a
 8016b2a:	d015      	beq.n	8016b58 <_vfiprintf_r+0x120>
 8016b2c:	9a07      	ldr	r2, [sp, #28]
 8016b2e:	4654      	mov	r4, sl
 8016b30:	2000      	movs	r0, #0
 8016b32:	f04f 0c0a 	mov.w	ip, #10
 8016b36:	4621      	mov	r1, r4
 8016b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b3c:	3b30      	subs	r3, #48	; 0x30
 8016b3e:	2b09      	cmp	r3, #9
 8016b40:	d94d      	bls.n	8016bde <_vfiprintf_r+0x1a6>
 8016b42:	b1b0      	cbz	r0, 8016b72 <_vfiprintf_r+0x13a>
 8016b44:	9207      	str	r2, [sp, #28]
 8016b46:	e014      	b.n	8016b72 <_vfiprintf_r+0x13a>
 8016b48:	eba0 0308 	sub.w	r3, r0, r8
 8016b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8016b50:	4313      	orrs	r3, r2
 8016b52:	9304      	str	r3, [sp, #16]
 8016b54:	46a2      	mov	sl, r4
 8016b56:	e7d2      	b.n	8016afe <_vfiprintf_r+0xc6>
 8016b58:	9b03      	ldr	r3, [sp, #12]
 8016b5a:	1d19      	adds	r1, r3, #4
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	9103      	str	r1, [sp, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	bfbb      	ittet	lt
 8016b64:	425b      	neglt	r3, r3
 8016b66:	f042 0202 	orrlt.w	r2, r2, #2
 8016b6a:	9307      	strge	r3, [sp, #28]
 8016b6c:	9307      	strlt	r3, [sp, #28]
 8016b6e:	bfb8      	it	lt
 8016b70:	9204      	strlt	r2, [sp, #16]
 8016b72:	7823      	ldrb	r3, [r4, #0]
 8016b74:	2b2e      	cmp	r3, #46	; 0x2e
 8016b76:	d10c      	bne.n	8016b92 <_vfiprintf_r+0x15a>
 8016b78:	7863      	ldrb	r3, [r4, #1]
 8016b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8016b7c:	d134      	bne.n	8016be8 <_vfiprintf_r+0x1b0>
 8016b7e:	9b03      	ldr	r3, [sp, #12]
 8016b80:	1d1a      	adds	r2, r3, #4
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	9203      	str	r2, [sp, #12]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	bfb8      	it	lt
 8016b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b8e:	3402      	adds	r4, #2
 8016b90:	9305      	str	r3, [sp, #20]
 8016b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016c68 <_vfiprintf_r+0x230>
 8016b96:	7821      	ldrb	r1, [r4, #0]
 8016b98:	2203      	movs	r2, #3
 8016b9a:	4650      	mov	r0, sl
 8016b9c:	f7e9 fb40 	bl	8000220 <memchr>
 8016ba0:	b138      	cbz	r0, 8016bb2 <_vfiprintf_r+0x17a>
 8016ba2:	9b04      	ldr	r3, [sp, #16]
 8016ba4:	eba0 000a 	sub.w	r0, r0, sl
 8016ba8:	2240      	movs	r2, #64	; 0x40
 8016baa:	4082      	lsls	r2, r0
 8016bac:	4313      	orrs	r3, r2
 8016bae:	3401      	adds	r4, #1
 8016bb0:	9304      	str	r3, [sp, #16]
 8016bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bb6:	4829      	ldr	r0, [pc, #164]	; (8016c5c <_vfiprintf_r+0x224>)
 8016bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016bbc:	2206      	movs	r2, #6
 8016bbe:	f7e9 fb2f 	bl	8000220 <memchr>
 8016bc2:	2800      	cmp	r0, #0
 8016bc4:	d03f      	beq.n	8016c46 <_vfiprintf_r+0x20e>
 8016bc6:	4b26      	ldr	r3, [pc, #152]	; (8016c60 <_vfiprintf_r+0x228>)
 8016bc8:	bb1b      	cbnz	r3, 8016c12 <_vfiprintf_r+0x1da>
 8016bca:	9b03      	ldr	r3, [sp, #12]
 8016bcc:	3307      	adds	r3, #7
 8016bce:	f023 0307 	bic.w	r3, r3, #7
 8016bd2:	3308      	adds	r3, #8
 8016bd4:	9303      	str	r3, [sp, #12]
 8016bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bd8:	443b      	add	r3, r7
 8016bda:	9309      	str	r3, [sp, #36]	; 0x24
 8016bdc:	e768      	b.n	8016ab0 <_vfiprintf_r+0x78>
 8016bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8016be2:	460c      	mov	r4, r1
 8016be4:	2001      	movs	r0, #1
 8016be6:	e7a6      	b.n	8016b36 <_vfiprintf_r+0xfe>
 8016be8:	2300      	movs	r3, #0
 8016bea:	3401      	adds	r4, #1
 8016bec:	9305      	str	r3, [sp, #20]
 8016bee:	4619      	mov	r1, r3
 8016bf0:	f04f 0c0a 	mov.w	ip, #10
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bfa:	3a30      	subs	r2, #48	; 0x30
 8016bfc:	2a09      	cmp	r2, #9
 8016bfe:	d903      	bls.n	8016c08 <_vfiprintf_r+0x1d0>
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d0c6      	beq.n	8016b92 <_vfiprintf_r+0x15a>
 8016c04:	9105      	str	r1, [sp, #20]
 8016c06:	e7c4      	b.n	8016b92 <_vfiprintf_r+0x15a>
 8016c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	2301      	movs	r3, #1
 8016c10:	e7f0      	b.n	8016bf4 <_vfiprintf_r+0x1bc>
 8016c12:	ab03      	add	r3, sp, #12
 8016c14:	9300      	str	r3, [sp, #0]
 8016c16:	462a      	mov	r2, r5
 8016c18:	4b12      	ldr	r3, [pc, #72]	; (8016c64 <_vfiprintf_r+0x22c>)
 8016c1a:	a904      	add	r1, sp, #16
 8016c1c:	4630      	mov	r0, r6
 8016c1e:	f7fc fb4d 	bl	80132bc <_printf_float>
 8016c22:	4607      	mov	r7, r0
 8016c24:	1c78      	adds	r0, r7, #1
 8016c26:	d1d6      	bne.n	8016bd6 <_vfiprintf_r+0x19e>
 8016c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c2a:	07d9      	lsls	r1, r3, #31
 8016c2c:	d405      	bmi.n	8016c3a <_vfiprintf_r+0x202>
 8016c2e:	89ab      	ldrh	r3, [r5, #12]
 8016c30:	059a      	lsls	r2, r3, #22
 8016c32:	d402      	bmi.n	8016c3a <_vfiprintf_r+0x202>
 8016c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c36:	f7fd fb5d 	bl	80142f4 <__retarget_lock_release_recursive>
 8016c3a:	89ab      	ldrh	r3, [r5, #12]
 8016c3c:	065b      	lsls	r3, r3, #25
 8016c3e:	f53f af1d 	bmi.w	8016a7c <_vfiprintf_r+0x44>
 8016c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c44:	e71c      	b.n	8016a80 <_vfiprintf_r+0x48>
 8016c46:	ab03      	add	r3, sp, #12
 8016c48:	9300      	str	r3, [sp, #0]
 8016c4a:	462a      	mov	r2, r5
 8016c4c:	4b05      	ldr	r3, [pc, #20]	; (8016c64 <_vfiprintf_r+0x22c>)
 8016c4e:	a904      	add	r1, sp, #16
 8016c50:	4630      	mov	r0, r6
 8016c52:	f7fc fdd7 	bl	8013804 <_printf_i>
 8016c56:	e7e4      	b.n	8016c22 <_vfiprintf_r+0x1ea>
 8016c58:	08018d09 	.word	0x08018d09
 8016c5c:	08018d13 	.word	0x08018d13
 8016c60:	080132bd 	.word	0x080132bd
 8016c64:	08016a13 	.word	0x08016a13
 8016c68:	08018d0f 	.word	0x08018d0f

08016c6c <__sflush_r>:
 8016c6c:	898a      	ldrh	r2, [r1, #12]
 8016c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c72:	4605      	mov	r5, r0
 8016c74:	0710      	lsls	r0, r2, #28
 8016c76:	460c      	mov	r4, r1
 8016c78:	d458      	bmi.n	8016d2c <__sflush_r+0xc0>
 8016c7a:	684b      	ldr	r3, [r1, #4]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	dc05      	bgt.n	8016c8c <__sflush_r+0x20>
 8016c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	dc02      	bgt.n	8016c8c <__sflush_r+0x20>
 8016c86:	2000      	movs	r0, #0
 8016c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c8e:	2e00      	cmp	r6, #0
 8016c90:	d0f9      	beq.n	8016c86 <__sflush_r+0x1a>
 8016c92:	2300      	movs	r3, #0
 8016c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016c98:	682f      	ldr	r7, [r5, #0]
 8016c9a:	6a21      	ldr	r1, [r4, #32]
 8016c9c:	602b      	str	r3, [r5, #0]
 8016c9e:	d032      	beq.n	8016d06 <__sflush_r+0x9a>
 8016ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016ca2:	89a3      	ldrh	r3, [r4, #12]
 8016ca4:	075a      	lsls	r2, r3, #29
 8016ca6:	d505      	bpl.n	8016cb4 <__sflush_r+0x48>
 8016ca8:	6863      	ldr	r3, [r4, #4]
 8016caa:	1ac0      	subs	r0, r0, r3
 8016cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016cae:	b10b      	cbz	r3, 8016cb4 <__sflush_r+0x48>
 8016cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016cb2:	1ac0      	subs	r0, r0, r3
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cba:	6a21      	ldr	r1, [r4, #32]
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	47b0      	blx	r6
 8016cc0:	1c43      	adds	r3, r0, #1
 8016cc2:	89a3      	ldrh	r3, [r4, #12]
 8016cc4:	d106      	bne.n	8016cd4 <__sflush_r+0x68>
 8016cc6:	6829      	ldr	r1, [r5, #0]
 8016cc8:	291d      	cmp	r1, #29
 8016cca:	d82b      	bhi.n	8016d24 <__sflush_r+0xb8>
 8016ccc:	4a29      	ldr	r2, [pc, #164]	; (8016d74 <__sflush_r+0x108>)
 8016cce:	410a      	asrs	r2, r1
 8016cd0:	07d6      	lsls	r6, r2, #31
 8016cd2:	d427      	bmi.n	8016d24 <__sflush_r+0xb8>
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	6062      	str	r2, [r4, #4]
 8016cd8:	04d9      	lsls	r1, r3, #19
 8016cda:	6922      	ldr	r2, [r4, #16]
 8016cdc:	6022      	str	r2, [r4, #0]
 8016cde:	d504      	bpl.n	8016cea <__sflush_r+0x7e>
 8016ce0:	1c42      	adds	r2, r0, #1
 8016ce2:	d101      	bne.n	8016ce8 <__sflush_r+0x7c>
 8016ce4:	682b      	ldr	r3, [r5, #0]
 8016ce6:	b903      	cbnz	r3, 8016cea <__sflush_r+0x7e>
 8016ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8016cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016cec:	602f      	str	r7, [r5, #0]
 8016cee:	2900      	cmp	r1, #0
 8016cf0:	d0c9      	beq.n	8016c86 <__sflush_r+0x1a>
 8016cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cf6:	4299      	cmp	r1, r3
 8016cf8:	d002      	beq.n	8016d00 <__sflush_r+0x94>
 8016cfa:	4628      	mov	r0, r5
 8016cfc:	f7fe f98a 	bl	8015014 <_free_r>
 8016d00:	2000      	movs	r0, #0
 8016d02:	6360      	str	r0, [r4, #52]	; 0x34
 8016d04:	e7c0      	b.n	8016c88 <__sflush_r+0x1c>
 8016d06:	2301      	movs	r3, #1
 8016d08:	4628      	mov	r0, r5
 8016d0a:	47b0      	blx	r6
 8016d0c:	1c41      	adds	r1, r0, #1
 8016d0e:	d1c8      	bne.n	8016ca2 <__sflush_r+0x36>
 8016d10:	682b      	ldr	r3, [r5, #0]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d0c5      	beq.n	8016ca2 <__sflush_r+0x36>
 8016d16:	2b1d      	cmp	r3, #29
 8016d18:	d001      	beq.n	8016d1e <__sflush_r+0xb2>
 8016d1a:	2b16      	cmp	r3, #22
 8016d1c:	d101      	bne.n	8016d22 <__sflush_r+0xb6>
 8016d1e:	602f      	str	r7, [r5, #0]
 8016d20:	e7b1      	b.n	8016c86 <__sflush_r+0x1a>
 8016d22:	89a3      	ldrh	r3, [r4, #12]
 8016d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d28:	81a3      	strh	r3, [r4, #12]
 8016d2a:	e7ad      	b.n	8016c88 <__sflush_r+0x1c>
 8016d2c:	690f      	ldr	r7, [r1, #16]
 8016d2e:	2f00      	cmp	r7, #0
 8016d30:	d0a9      	beq.n	8016c86 <__sflush_r+0x1a>
 8016d32:	0793      	lsls	r3, r2, #30
 8016d34:	680e      	ldr	r6, [r1, #0]
 8016d36:	bf08      	it	eq
 8016d38:	694b      	ldreq	r3, [r1, #20]
 8016d3a:	600f      	str	r7, [r1, #0]
 8016d3c:	bf18      	it	ne
 8016d3e:	2300      	movne	r3, #0
 8016d40:	eba6 0807 	sub.w	r8, r6, r7
 8016d44:	608b      	str	r3, [r1, #8]
 8016d46:	f1b8 0f00 	cmp.w	r8, #0
 8016d4a:	dd9c      	ble.n	8016c86 <__sflush_r+0x1a>
 8016d4c:	6a21      	ldr	r1, [r4, #32]
 8016d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016d50:	4643      	mov	r3, r8
 8016d52:	463a      	mov	r2, r7
 8016d54:	4628      	mov	r0, r5
 8016d56:	47b0      	blx	r6
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	dc06      	bgt.n	8016d6a <__sflush_r+0xfe>
 8016d5c:	89a3      	ldrh	r3, [r4, #12]
 8016d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d62:	81a3      	strh	r3, [r4, #12]
 8016d64:	f04f 30ff 	mov.w	r0, #4294967295
 8016d68:	e78e      	b.n	8016c88 <__sflush_r+0x1c>
 8016d6a:	4407      	add	r7, r0
 8016d6c:	eba8 0800 	sub.w	r8, r8, r0
 8016d70:	e7e9      	b.n	8016d46 <__sflush_r+0xda>
 8016d72:	bf00      	nop
 8016d74:	dfbffffe 	.word	0xdfbffffe

08016d78 <_fflush_r>:
 8016d78:	b538      	push	{r3, r4, r5, lr}
 8016d7a:	690b      	ldr	r3, [r1, #16]
 8016d7c:	4605      	mov	r5, r0
 8016d7e:	460c      	mov	r4, r1
 8016d80:	b913      	cbnz	r3, 8016d88 <_fflush_r+0x10>
 8016d82:	2500      	movs	r5, #0
 8016d84:	4628      	mov	r0, r5
 8016d86:	bd38      	pop	{r3, r4, r5, pc}
 8016d88:	b118      	cbz	r0, 8016d92 <_fflush_r+0x1a>
 8016d8a:	6a03      	ldr	r3, [r0, #32]
 8016d8c:	b90b      	cbnz	r3, 8016d92 <_fflush_r+0x1a>
 8016d8e:	f7fd f8f7 	bl	8013f80 <__sinit>
 8016d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d0f3      	beq.n	8016d82 <_fflush_r+0xa>
 8016d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016d9c:	07d0      	lsls	r0, r2, #31
 8016d9e:	d404      	bmi.n	8016daa <_fflush_r+0x32>
 8016da0:	0599      	lsls	r1, r3, #22
 8016da2:	d402      	bmi.n	8016daa <_fflush_r+0x32>
 8016da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016da6:	f7fd faa4 	bl	80142f2 <__retarget_lock_acquire_recursive>
 8016daa:	4628      	mov	r0, r5
 8016dac:	4621      	mov	r1, r4
 8016dae:	f7ff ff5d 	bl	8016c6c <__sflush_r>
 8016db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016db4:	07da      	lsls	r2, r3, #31
 8016db6:	4605      	mov	r5, r0
 8016db8:	d4e4      	bmi.n	8016d84 <_fflush_r+0xc>
 8016dba:	89a3      	ldrh	r3, [r4, #12]
 8016dbc:	059b      	lsls	r3, r3, #22
 8016dbe:	d4e1      	bmi.n	8016d84 <_fflush_r+0xc>
 8016dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dc2:	f7fd fa97 	bl	80142f4 <__retarget_lock_release_recursive>
 8016dc6:	e7dd      	b.n	8016d84 <_fflush_r+0xc>

08016dc8 <__swbuf_r>:
 8016dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dca:	460e      	mov	r6, r1
 8016dcc:	4614      	mov	r4, r2
 8016dce:	4605      	mov	r5, r0
 8016dd0:	b118      	cbz	r0, 8016dda <__swbuf_r+0x12>
 8016dd2:	6a03      	ldr	r3, [r0, #32]
 8016dd4:	b90b      	cbnz	r3, 8016dda <__swbuf_r+0x12>
 8016dd6:	f7fd f8d3 	bl	8013f80 <__sinit>
 8016dda:	69a3      	ldr	r3, [r4, #24]
 8016ddc:	60a3      	str	r3, [r4, #8]
 8016dde:	89a3      	ldrh	r3, [r4, #12]
 8016de0:	071a      	lsls	r2, r3, #28
 8016de2:	d525      	bpl.n	8016e30 <__swbuf_r+0x68>
 8016de4:	6923      	ldr	r3, [r4, #16]
 8016de6:	b31b      	cbz	r3, 8016e30 <__swbuf_r+0x68>
 8016de8:	6823      	ldr	r3, [r4, #0]
 8016dea:	6922      	ldr	r2, [r4, #16]
 8016dec:	1a98      	subs	r0, r3, r2
 8016dee:	6963      	ldr	r3, [r4, #20]
 8016df0:	b2f6      	uxtb	r6, r6
 8016df2:	4283      	cmp	r3, r0
 8016df4:	4637      	mov	r7, r6
 8016df6:	dc04      	bgt.n	8016e02 <__swbuf_r+0x3a>
 8016df8:	4621      	mov	r1, r4
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	f7ff ffbc 	bl	8016d78 <_fflush_r>
 8016e00:	b9e0      	cbnz	r0, 8016e3c <__swbuf_r+0x74>
 8016e02:	68a3      	ldr	r3, [r4, #8]
 8016e04:	3b01      	subs	r3, #1
 8016e06:	60a3      	str	r3, [r4, #8]
 8016e08:	6823      	ldr	r3, [r4, #0]
 8016e0a:	1c5a      	adds	r2, r3, #1
 8016e0c:	6022      	str	r2, [r4, #0]
 8016e0e:	701e      	strb	r6, [r3, #0]
 8016e10:	6962      	ldr	r2, [r4, #20]
 8016e12:	1c43      	adds	r3, r0, #1
 8016e14:	429a      	cmp	r2, r3
 8016e16:	d004      	beq.n	8016e22 <__swbuf_r+0x5a>
 8016e18:	89a3      	ldrh	r3, [r4, #12]
 8016e1a:	07db      	lsls	r3, r3, #31
 8016e1c:	d506      	bpl.n	8016e2c <__swbuf_r+0x64>
 8016e1e:	2e0a      	cmp	r6, #10
 8016e20:	d104      	bne.n	8016e2c <__swbuf_r+0x64>
 8016e22:	4621      	mov	r1, r4
 8016e24:	4628      	mov	r0, r5
 8016e26:	f7ff ffa7 	bl	8016d78 <_fflush_r>
 8016e2a:	b938      	cbnz	r0, 8016e3c <__swbuf_r+0x74>
 8016e2c:	4638      	mov	r0, r7
 8016e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e30:	4621      	mov	r1, r4
 8016e32:	4628      	mov	r0, r5
 8016e34:	f000 f806 	bl	8016e44 <__swsetup_r>
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	d0d5      	beq.n	8016de8 <__swbuf_r+0x20>
 8016e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8016e40:	e7f4      	b.n	8016e2c <__swbuf_r+0x64>
	...

08016e44 <__swsetup_r>:
 8016e44:	b538      	push	{r3, r4, r5, lr}
 8016e46:	4b2a      	ldr	r3, [pc, #168]	; (8016ef0 <__swsetup_r+0xac>)
 8016e48:	4605      	mov	r5, r0
 8016e4a:	6818      	ldr	r0, [r3, #0]
 8016e4c:	460c      	mov	r4, r1
 8016e4e:	b118      	cbz	r0, 8016e58 <__swsetup_r+0x14>
 8016e50:	6a03      	ldr	r3, [r0, #32]
 8016e52:	b90b      	cbnz	r3, 8016e58 <__swsetup_r+0x14>
 8016e54:	f7fd f894 	bl	8013f80 <__sinit>
 8016e58:	89a3      	ldrh	r3, [r4, #12]
 8016e5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e5e:	0718      	lsls	r0, r3, #28
 8016e60:	d422      	bmi.n	8016ea8 <__swsetup_r+0x64>
 8016e62:	06d9      	lsls	r1, r3, #27
 8016e64:	d407      	bmi.n	8016e76 <__swsetup_r+0x32>
 8016e66:	2309      	movs	r3, #9
 8016e68:	602b      	str	r3, [r5, #0]
 8016e6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e6e:	81a3      	strh	r3, [r4, #12]
 8016e70:	f04f 30ff 	mov.w	r0, #4294967295
 8016e74:	e034      	b.n	8016ee0 <__swsetup_r+0x9c>
 8016e76:	0758      	lsls	r0, r3, #29
 8016e78:	d512      	bpl.n	8016ea0 <__swsetup_r+0x5c>
 8016e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e7c:	b141      	cbz	r1, 8016e90 <__swsetup_r+0x4c>
 8016e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e82:	4299      	cmp	r1, r3
 8016e84:	d002      	beq.n	8016e8c <__swsetup_r+0x48>
 8016e86:	4628      	mov	r0, r5
 8016e88:	f7fe f8c4 	bl	8015014 <_free_r>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	6363      	str	r3, [r4, #52]	; 0x34
 8016e90:	89a3      	ldrh	r3, [r4, #12]
 8016e92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e96:	81a3      	strh	r3, [r4, #12]
 8016e98:	2300      	movs	r3, #0
 8016e9a:	6063      	str	r3, [r4, #4]
 8016e9c:	6923      	ldr	r3, [r4, #16]
 8016e9e:	6023      	str	r3, [r4, #0]
 8016ea0:	89a3      	ldrh	r3, [r4, #12]
 8016ea2:	f043 0308 	orr.w	r3, r3, #8
 8016ea6:	81a3      	strh	r3, [r4, #12]
 8016ea8:	6923      	ldr	r3, [r4, #16]
 8016eaa:	b94b      	cbnz	r3, 8016ec0 <__swsetup_r+0x7c>
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016eb6:	d003      	beq.n	8016ec0 <__swsetup_r+0x7c>
 8016eb8:	4621      	mov	r1, r4
 8016eba:	4628      	mov	r0, r5
 8016ebc:	f000 fc15 	bl	80176ea <__smakebuf_r>
 8016ec0:	89a0      	ldrh	r0, [r4, #12]
 8016ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ec6:	f010 0301 	ands.w	r3, r0, #1
 8016eca:	d00a      	beq.n	8016ee2 <__swsetup_r+0x9e>
 8016ecc:	2300      	movs	r3, #0
 8016ece:	60a3      	str	r3, [r4, #8]
 8016ed0:	6963      	ldr	r3, [r4, #20]
 8016ed2:	425b      	negs	r3, r3
 8016ed4:	61a3      	str	r3, [r4, #24]
 8016ed6:	6923      	ldr	r3, [r4, #16]
 8016ed8:	b943      	cbnz	r3, 8016eec <__swsetup_r+0xa8>
 8016eda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ede:	d1c4      	bne.n	8016e6a <__swsetup_r+0x26>
 8016ee0:	bd38      	pop	{r3, r4, r5, pc}
 8016ee2:	0781      	lsls	r1, r0, #30
 8016ee4:	bf58      	it	pl
 8016ee6:	6963      	ldrpl	r3, [r4, #20]
 8016ee8:	60a3      	str	r3, [r4, #8]
 8016eea:	e7f4      	b.n	8016ed6 <__swsetup_r+0x92>
 8016eec:	2000      	movs	r0, #0
 8016eee:	e7f7      	b.n	8016ee0 <__swsetup_r+0x9c>
 8016ef0:	200000d4 	.word	0x200000d4

08016ef4 <strncmp>:
 8016ef4:	b510      	push	{r4, lr}
 8016ef6:	b16a      	cbz	r2, 8016f14 <strncmp+0x20>
 8016ef8:	3901      	subs	r1, #1
 8016efa:	1884      	adds	r4, r0, r2
 8016efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d103      	bne.n	8016f10 <strncmp+0x1c>
 8016f08:	42a0      	cmp	r0, r4
 8016f0a:	d001      	beq.n	8016f10 <strncmp+0x1c>
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	d1f5      	bne.n	8016efc <strncmp+0x8>
 8016f10:	1ad0      	subs	r0, r2, r3
 8016f12:	bd10      	pop	{r4, pc}
 8016f14:	4610      	mov	r0, r2
 8016f16:	e7fc      	b.n	8016f12 <strncmp+0x1e>

08016f18 <nan>:
 8016f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016f20 <nan+0x8>
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop
 8016f20:	00000000 	.word	0x00000000
 8016f24:	7ff80000 	.word	0x7ff80000

08016f28 <_calloc_r>:
 8016f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f2a:	fba1 2402 	umull	r2, r4, r1, r2
 8016f2e:	b94c      	cbnz	r4, 8016f44 <_calloc_r+0x1c>
 8016f30:	4611      	mov	r1, r2
 8016f32:	9201      	str	r2, [sp, #4]
 8016f34:	f7fc f896 	bl	8013064 <_malloc_r>
 8016f38:	9a01      	ldr	r2, [sp, #4]
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	b930      	cbnz	r0, 8016f4c <_calloc_r+0x24>
 8016f3e:	4628      	mov	r0, r5
 8016f40:	b003      	add	sp, #12
 8016f42:	bd30      	pop	{r4, r5, pc}
 8016f44:	220c      	movs	r2, #12
 8016f46:	6002      	str	r2, [r0, #0]
 8016f48:	2500      	movs	r5, #0
 8016f4a:	e7f8      	b.n	8016f3e <_calloc_r+0x16>
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	f7fd f8ec 	bl	801412a <memset>
 8016f52:	e7f4      	b.n	8016f3e <_calloc_r+0x16>

08016f54 <rshift>:
 8016f54:	6903      	ldr	r3, [r0, #16]
 8016f56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016f62:	f100 0414 	add.w	r4, r0, #20
 8016f66:	dd45      	ble.n	8016ff4 <rshift+0xa0>
 8016f68:	f011 011f 	ands.w	r1, r1, #31
 8016f6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016f70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016f74:	d10c      	bne.n	8016f90 <rshift+0x3c>
 8016f76:	f100 0710 	add.w	r7, r0, #16
 8016f7a:	4629      	mov	r1, r5
 8016f7c:	42b1      	cmp	r1, r6
 8016f7e:	d334      	bcc.n	8016fea <rshift+0x96>
 8016f80:	1a9b      	subs	r3, r3, r2
 8016f82:	009b      	lsls	r3, r3, #2
 8016f84:	1eea      	subs	r2, r5, #3
 8016f86:	4296      	cmp	r6, r2
 8016f88:	bf38      	it	cc
 8016f8a:	2300      	movcc	r3, #0
 8016f8c:	4423      	add	r3, r4
 8016f8e:	e015      	b.n	8016fbc <rshift+0x68>
 8016f90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016f94:	f1c1 0820 	rsb	r8, r1, #32
 8016f98:	40cf      	lsrs	r7, r1
 8016f9a:	f105 0e04 	add.w	lr, r5, #4
 8016f9e:	46a1      	mov	r9, r4
 8016fa0:	4576      	cmp	r6, lr
 8016fa2:	46f4      	mov	ip, lr
 8016fa4:	d815      	bhi.n	8016fd2 <rshift+0x7e>
 8016fa6:	1a9a      	subs	r2, r3, r2
 8016fa8:	0092      	lsls	r2, r2, #2
 8016faa:	3a04      	subs	r2, #4
 8016fac:	3501      	adds	r5, #1
 8016fae:	42ae      	cmp	r6, r5
 8016fb0:	bf38      	it	cc
 8016fb2:	2200      	movcc	r2, #0
 8016fb4:	18a3      	adds	r3, r4, r2
 8016fb6:	50a7      	str	r7, [r4, r2]
 8016fb8:	b107      	cbz	r7, 8016fbc <rshift+0x68>
 8016fba:	3304      	adds	r3, #4
 8016fbc:	1b1a      	subs	r2, r3, r4
 8016fbe:	42a3      	cmp	r3, r4
 8016fc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016fc4:	bf08      	it	eq
 8016fc6:	2300      	moveq	r3, #0
 8016fc8:	6102      	str	r2, [r0, #16]
 8016fca:	bf08      	it	eq
 8016fcc:	6143      	streq	r3, [r0, #20]
 8016fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fd2:	f8dc c000 	ldr.w	ip, [ip]
 8016fd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8016fda:	ea4c 0707 	orr.w	r7, ip, r7
 8016fde:	f849 7b04 	str.w	r7, [r9], #4
 8016fe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016fe6:	40cf      	lsrs	r7, r1
 8016fe8:	e7da      	b.n	8016fa0 <rshift+0x4c>
 8016fea:	f851 cb04 	ldr.w	ip, [r1], #4
 8016fee:	f847 cf04 	str.w	ip, [r7, #4]!
 8016ff2:	e7c3      	b.n	8016f7c <rshift+0x28>
 8016ff4:	4623      	mov	r3, r4
 8016ff6:	e7e1      	b.n	8016fbc <rshift+0x68>

08016ff8 <__hexdig_fun>:
 8016ff8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016ffc:	2b09      	cmp	r3, #9
 8016ffe:	d802      	bhi.n	8017006 <__hexdig_fun+0xe>
 8017000:	3820      	subs	r0, #32
 8017002:	b2c0      	uxtb	r0, r0
 8017004:	4770      	bx	lr
 8017006:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801700a:	2b05      	cmp	r3, #5
 801700c:	d801      	bhi.n	8017012 <__hexdig_fun+0x1a>
 801700e:	3847      	subs	r0, #71	; 0x47
 8017010:	e7f7      	b.n	8017002 <__hexdig_fun+0xa>
 8017012:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017016:	2b05      	cmp	r3, #5
 8017018:	d801      	bhi.n	801701e <__hexdig_fun+0x26>
 801701a:	3827      	subs	r0, #39	; 0x27
 801701c:	e7f1      	b.n	8017002 <__hexdig_fun+0xa>
 801701e:	2000      	movs	r0, #0
 8017020:	4770      	bx	lr
	...

08017024 <__gethex>:
 8017024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017028:	4617      	mov	r7, r2
 801702a:	680a      	ldr	r2, [r1, #0]
 801702c:	b085      	sub	sp, #20
 801702e:	f102 0b02 	add.w	fp, r2, #2
 8017032:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017036:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801703a:	4681      	mov	r9, r0
 801703c:	468a      	mov	sl, r1
 801703e:	9302      	str	r3, [sp, #8]
 8017040:	32fe      	adds	r2, #254	; 0xfe
 8017042:	eb02 030b 	add.w	r3, r2, fp
 8017046:	46d8      	mov	r8, fp
 8017048:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801704c:	9301      	str	r3, [sp, #4]
 801704e:	2830      	cmp	r0, #48	; 0x30
 8017050:	d0f7      	beq.n	8017042 <__gethex+0x1e>
 8017052:	f7ff ffd1 	bl	8016ff8 <__hexdig_fun>
 8017056:	4604      	mov	r4, r0
 8017058:	2800      	cmp	r0, #0
 801705a:	d138      	bne.n	80170ce <__gethex+0xaa>
 801705c:	49a7      	ldr	r1, [pc, #668]	; (80172fc <__gethex+0x2d8>)
 801705e:	2201      	movs	r2, #1
 8017060:	4640      	mov	r0, r8
 8017062:	f7ff ff47 	bl	8016ef4 <strncmp>
 8017066:	4606      	mov	r6, r0
 8017068:	2800      	cmp	r0, #0
 801706a:	d169      	bne.n	8017140 <__gethex+0x11c>
 801706c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017070:	465d      	mov	r5, fp
 8017072:	f7ff ffc1 	bl	8016ff8 <__hexdig_fun>
 8017076:	2800      	cmp	r0, #0
 8017078:	d064      	beq.n	8017144 <__gethex+0x120>
 801707a:	465a      	mov	r2, fp
 801707c:	7810      	ldrb	r0, [r2, #0]
 801707e:	2830      	cmp	r0, #48	; 0x30
 8017080:	4690      	mov	r8, r2
 8017082:	f102 0201 	add.w	r2, r2, #1
 8017086:	d0f9      	beq.n	801707c <__gethex+0x58>
 8017088:	f7ff ffb6 	bl	8016ff8 <__hexdig_fun>
 801708c:	2301      	movs	r3, #1
 801708e:	fab0 f480 	clz	r4, r0
 8017092:	0964      	lsrs	r4, r4, #5
 8017094:	465e      	mov	r6, fp
 8017096:	9301      	str	r3, [sp, #4]
 8017098:	4642      	mov	r2, r8
 801709a:	4615      	mov	r5, r2
 801709c:	3201      	adds	r2, #1
 801709e:	7828      	ldrb	r0, [r5, #0]
 80170a0:	f7ff ffaa 	bl	8016ff8 <__hexdig_fun>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	d1f8      	bne.n	801709a <__gethex+0x76>
 80170a8:	4994      	ldr	r1, [pc, #592]	; (80172fc <__gethex+0x2d8>)
 80170aa:	2201      	movs	r2, #1
 80170ac:	4628      	mov	r0, r5
 80170ae:	f7ff ff21 	bl	8016ef4 <strncmp>
 80170b2:	b978      	cbnz	r0, 80170d4 <__gethex+0xb0>
 80170b4:	b946      	cbnz	r6, 80170c8 <__gethex+0xa4>
 80170b6:	1c6e      	adds	r6, r5, #1
 80170b8:	4632      	mov	r2, r6
 80170ba:	4615      	mov	r5, r2
 80170bc:	3201      	adds	r2, #1
 80170be:	7828      	ldrb	r0, [r5, #0]
 80170c0:	f7ff ff9a 	bl	8016ff8 <__hexdig_fun>
 80170c4:	2800      	cmp	r0, #0
 80170c6:	d1f8      	bne.n	80170ba <__gethex+0x96>
 80170c8:	1b73      	subs	r3, r6, r5
 80170ca:	009e      	lsls	r6, r3, #2
 80170cc:	e004      	b.n	80170d8 <__gethex+0xb4>
 80170ce:	2400      	movs	r4, #0
 80170d0:	4626      	mov	r6, r4
 80170d2:	e7e1      	b.n	8017098 <__gethex+0x74>
 80170d4:	2e00      	cmp	r6, #0
 80170d6:	d1f7      	bne.n	80170c8 <__gethex+0xa4>
 80170d8:	782b      	ldrb	r3, [r5, #0]
 80170da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80170de:	2b50      	cmp	r3, #80	; 0x50
 80170e0:	d13d      	bne.n	801715e <__gethex+0x13a>
 80170e2:	786b      	ldrb	r3, [r5, #1]
 80170e4:	2b2b      	cmp	r3, #43	; 0x2b
 80170e6:	d02f      	beq.n	8017148 <__gethex+0x124>
 80170e8:	2b2d      	cmp	r3, #45	; 0x2d
 80170ea:	d031      	beq.n	8017150 <__gethex+0x12c>
 80170ec:	1c69      	adds	r1, r5, #1
 80170ee:	f04f 0b00 	mov.w	fp, #0
 80170f2:	7808      	ldrb	r0, [r1, #0]
 80170f4:	f7ff ff80 	bl	8016ff8 <__hexdig_fun>
 80170f8:	1e42      	subs	r2, r0, #1
 80170fa:	b2d2      	uxtb	r2, r2
 80170fc:	2a18      	cmp	r2, #24
 80170fe:	d82e      	bhi.n	801715e <__gethex+0x13a>
 8017100:	f1a0 0210 	sub.w	r2, r0, #16
 8017104:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017108:	f7ff ff76 	bl	8016ff8 <__hexdig_fun>
 801710c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017110:	fa5f fc8c 	uxtb.w	ip, ip
 8017114:	f1bc 0f18 	cmp.w	ip, #24
 8017118:	d91d      	bls.n	8017156 <__gethex+0x132>
 801711a:	f1bb 0f00 	cmp.w	fp, #0
 801711e:	d000      	beq.n	8017122 <__gethex+0xfe>
 8017120:	4252      	negs	r2, r2
 8017122:	4416      	add	r6, r2
 8017124:	f8ca 1000 	str.w	r1, [sl]
 8017128:	b1dc      	cbz	r4, 8017162 <__gethex+0x13e>
 801712a:	9b01      	ldr	r3, [sp, #4]
 801712c:	2b00      	cmp	r3, #0
 801712e:	bf14      	ite	ne
 8017130:	f04f 0800 	movne.w	r8, #0
 8017134:	f04f 0806 	moveq.w	r8, #6
 8017138:	4640      	mov	r0, r8
 801713a:	b005      	add	sp, #20
 801713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017140:	4645      	mov	r5, r8
 8017142:	4626      	mov	r6, r4
 8017144:	2401      	movs	r4, #1
 8017146:	e7c7      	b.n	80170d8 <__gethex+0xb4>
 8017148:	f04f 0b00 	mov.w	fp, #0
 801714c:	1ca9      	adds	r1, r5, #2
 801714e:	e7d0      	b.n	80170f2 <__gethex+0xce>
 8017150:	f04f 0b01 	mov.w	fp, #1
 8017154:	e7fa      	b.n	801714c <__gethex+0x128>
 8017156:	230a      	movs	r3, #10
 8017158:	fb03 0002 	mla	r0, r3, r2, r0
 801715c:	e7d0      	b.n	8017100 <__gethex+0xdc>
 801715e:	4629      	mov	r1, r5
 8017160:	e7e0      	b.n	8017124 <__gethex+0x100>
 8017162:	eba5 0308 	sub.w	r3, r5, r8
 8017166:	3b01      	subs	r3, #1
 8017168:	4621      	mov	r1, r4
 801716a:	2b07      	cmp	r3, #7
 801716c:	dc0a      	bgt.n	8017184 <__gethex+0x160>
 801716e:	4648      	mov	r0, r9
 8017170:	f7fd ff9c 	bl	80150ac <_Balloc>
 8017174:	4604      	mov	r4, r0
 8017176:	b940      	cbnz	r0, 801718a <__gethex+0x166>
 8017178:	4b61      	ldr	r3, [pc, #388]	; (8017300 <__gethex+0x2dc>)
 801717a:	4602      	mov	r2, r0
 801717c:	21e4      	movs	r1, #228	; 0xe4
 801717e:	4861      	ldr	r0, [pc, #388]	; (8017304 <__gethex+0x2e0>)
 8017180:	f7fb ff10 	bl	8012fa4 <__assert_func>
 8017184:	3101      	adds	r1, #1
 8017186:	105b      	asrs	r3, r3, #1
 8017188:	e7ef      	b.n	801716a <__gethex+0x146>
 801718a:	f100 0a14 	add.w	sl, r0, #20
 801718e:	2300      	movs	r3, #0
 8017190:	495a      	ldr	r1, [pc, #360]	; (80172fc <__gethex+0x2d8>)
 8017192:	f8cd a004 	str.w	sl, [sp, #4]
 8017196:	469b      	mov	fp, r3
 8017198:	45a8      	cmp	r8, r5
 801719a:	d342      	bcc.n	8017222 <__gethex+0x1fe>
 801719c:	9801      	ldr	r0, [sp, #4]
 801719e:	f840 bb04 	str.w	fp, [r0], #4
 80171a2:	eba0 000a 	sub.w	r0, r0, sl
 80171a6:	1080      	asrs	r0, r0, #2
 80171a8:	6120      	str	r0, [r4, #16]
 80171aa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80171ae:	4658      	mov	r0, fp
 80171b0:	f7fe f86e 	bl	8015290 <__hi0bits>
 80171b4:	683d      	ldr	r5, [r7, #0]
 80171b6:	eba8 0000 	sub.w	r0, r8, r0
 80171ba:	42a8      	cmp	r0, r5
 80171bc:	dd59      	ble.n	8017272 <__gethex+0x24e>
 80171be:	eba0 0805 	sub.w	r8, r0, r5
 80171c2:	4641      	mov	r1, r8
 80171c4:	4620      	mov	r0, r4
 80171c6:	f7fe fbfd 	bl	80159c4 <__any_on>
 80171ca:	4683      	mov	fp, r0
 80171cc:	b1b8      	cbz	r0, 80171fe <__gethex+0x1da>
 80171ce:	f108 33ff 	add.w	r3, r8, #4294967295
 80171d2:	1159      	asrs	r1, r3, #5
 80171d4:	f003 021f 	and.w	r2, r3, #31
 80171d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80171dc:	f04f 0b01 	mov.w	fp, #1
 80171e0:	fa0b f202 	lsl.w	r2, fp, r2
 80171e4:	420a      	tst	r2, r1
 80171e6:	d00a      	beq.n	80171fe <__gethex+0x1da>
 80171e8:	455b      	cmp	r3, fp
 80171ea:	dd06      	ble.n	80171fa <__gethex+0x1d6>
 80171ec:	f1a8 0102 	sub.w	r1, r8, #2
 80171f0:	4620      	mov	r0, r4
 80171f2:	f7fe fbe7 	bl	80159c4 <__any_on>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	d138      	bne.n	801726c <__gethex+0x248>
 80171fa:	f04f 0b02 	mov.w	fp, #2
 80171fe:	4641      	mov	r1, r8
 8017200:	4620      	mov	r0, r4
 8017202:	f7ff fea7 	bl	8016f54 <rshift>
 8017206:	4446      	add	r6, r8
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	42b3      	cmp	r3, r6
 801720c:	da41      	bge.n	8017292 <__gethex+0x26e>
 801720e:	4621      	mov	r1, r4
 8017210:	4648      	mov	r0, r9
 8017212:	f7fd ff8b 	bl	801512c <_Bfree>
 8017216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017218:	2300      	movs	r3, #0
 801721a:	6013      	str	r3, [r2, #0]
 801721c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017220:	e78a      	b.n	8017138 <__gethex+0x114>
 8017222:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017226:	2a2e      	cmp	r2, #46	; 0x2e
 8017228:	d014      	beq.n	8017254 <__gethex+0x230>
 801722a:	2b20      	cmp	r3, #32
 801722c:	d106      	bne.n	801723c <__gethex+0x218>
 801722e:	9b01      	ldr	r3, [sp, #4]
 8017230:	f843 bb04 	str.w	fp, [r3], #4
 8017234:	f04f 0b00 	mov.w	fp, #0
 8017238:	9301      	str	r3, [sp, #4]
 801723a:	465b      	mov	r3, fp
 801723c:	7828      	ldrb	r0, [r5, #0]
 801723e:	9303      	str	r3, [sp, #12]
 8017240:	f7ff feda 	bl	8016ff8 <__hexdig_fun>
 8017244:	9b03      	ldr	r3, [sp, #12]
 8017246:	f000 000f 	and.w	r0, r0, #15
 801724a:	4098      	lsls	r0, r3
 801724c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017250:	3304      	adds	r3, #4
 8017252:	e7a1      	b.n	8017198 <__gethex+0x174>
 8017254:	45a8      	cmp	r8, r5
 8017256:	d8e8      	bhi.n	801722a <__gethex+0x206>
 8017258:	2201      	movs	r2, #1
 801725a:	4628      	mov	r0, r5
 801725c:	9303      	str	r3, [sp, #12]
 801725e:	f7ff fe49 	bl	8016ef4 <strncmp>
 8017262:	4926      	ldr	r1, [pc, #152]	; (80172fc <__gethex+0x2d8>)
 8017264:	9b03      	ldr	r3, [sp, #12]
 8017266:	2800      	cmp	r0, #0
 8017268:	d1df      	bne.n	801722a <__gethex+0x206>
 801726a:	e795      	b.n	8017198 <__gethex+0x174>
 801726c:	f04f 0b03 	mov.w	fp, #3
 8017270:	e7c5      	b.n	80171fe <__gethex+0x1da>
 8017272:	da0b      	bge.n	801728c <__gethex+0x268>
 8017274:	eba5 0800 	sub.w	r8, r5, r0
 8017278:	4621      	mov	r1, r4
 801727a:	4642      	mov	r2, r8
 801727c:	4648      	mov	r0, r9
 801727e:	f7fe f96f 	bl	8015560 <__lshift>
 8017282:	eba6 0608 	sub.w	r6, r6, r8
 8017286:	4604      	mov	r4, r0
 8017288:	f100 0a14 	add.w	sl, r0, #20
 801728c:	f04f 0b00 	mov.w	fp, #0
 8017290:	e7ba      	b.n	8017208 <__gethex+0x1e4>
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	42b3      	cmp	r3, r6
 8017296:	dd73      	ble.n	8017380 <__gethex+0x35c>
 8017298:	1b9e      	subs	r6, r3, r6
 801729a:	42b5      	cmp	r5, r6
 801729c:	dc34      	bgt.n	8017308 <__gethex+0x2e4>
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	2b02      	cmp	r3, #2
 80172a2:	d023      	beq.n	80172ec <__gethex+0x2c8>
 80172a4:	2b03      	cmp	r3, #3
 80172a6:	d025      	beq.n	80172f4 <__gethex+0x2d0>
 80172a8:	2b01      	cmp	r3, #1
 80172aa:	d115      	bne.n	80172d8 <__gethex+0x2b4>
 80172ac:	42b5      	cmp	r5, r6
 80172ae:	d113      	bne.n	80172d8 <__gethex+0x2b4>
 80172b0:	2d01      	cmp	r5, #1
 80172b2:	d10b      	bne.n	80172cc <__gethex+0x2a8>
 80172b4:	9a02      	ldr	r2, [sp, #8]
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	6013      	str	r3, [r2, #0]
 80172ba:	2301      	movs	r3, #1
 80172bc:	6123      	str	r3, [r4, #16]
 80172be:	f8ca 3000 	str.w	r3, [sl]
 80172c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172c4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80172c8:	601c      	str	r4, [r3, #0]
 80172ca:	e735      	b.n	8017138 <__gethex+0x114>
 80172cc:	1e69      	subs	r1, r5, #1
 80172ce:	4620      	mov	r0, r4
 80172d0:	f7fe fb78 	bl	80159c4 <__any_on>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	d1ed      	bne.n	80172b4 <__gethex+0x290>
 80172d8:	4621      	mov	r1, r4
 80172da:	4648      	mov	r0, r9
 80172dc:	f7fd ff26 	bl	801512c <_Bfree>
 80172e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172e2:	2300      	movs	r3, #0
 80172e4:	6013      	str	r3, [r2, #0]
 80172e6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80172ea:	e725      	b.n	8017138 <__gethex+0x114>
 80172ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d1f2      	bne.n	80172d8 <__gethex+0x2b4>
 80172f2:	e7df      	b.n	80172b4 <__gethex+0x290>
 80172f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d1dc      	bne.n	80172b4 <__gethex+0x290>
 80172fa:	e7ed      	b.n	80172d8 <__gethex+0x2b4>
 80172fc:	08018bb4 	.word	0x08018bb4
 8017300:	08018a49 	.word	0x08018a49
 8017304:	08018d22 	.word	0x08018d22
 8017308:	f106 38ff 	add.w	r8, r6, #4294967295
 801730c:	f1bb 0f00 	cmp.w	fp, #0
 8017310:	d133      	bne.n	801737a <__gethex+0x356>
 8017312:	f1b8 0f00 	cmp.w	r8, #0
 8017316:	d004      	beq.n	8017322 <__gethex+0x2fe>
 8017318:	4641      	mov	r1, r8
 801731a:	4620      	mov	r0, r4
 801731c:	f7fe fb52 	bl	80159c4 <__any_on>
 8017320:	4683      	mov	fp, r0
 8017322:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017326:	2301      	movs	r3, #1
 8017328:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801732c:	f008 081f 	and.w	r8, r8, #31
 8017330:	fa03 f308 	lsl.w	r3, r3, r8
 8017334:	4213      	tst	r3, r2
 8017336:	4631      	mov	r1, r6
 8017338:	4620      	mov	r0, r4
 801733a:	bf18      	it	ne
 801733c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017340:	1bad      	subs	r5, r5, r6
 8017342:	f7ff fe07 	bl	8016f54 <rshift>
 8017346:	687e      	ldr	r6, [r7, #4]
 8017348:	f04f 0802 	mov.w	r8, #2
 801734c:	f1bb 0f00 	cmp.w	fp, #0
 8017350:	d04a      	beq.n	80173e8 <__gethex+0x3c4>
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	2b02      	cmp	r3, #2
 8017356:	d016      	beq.n	8017386 <__gethex+0x362>
 8017358:	2b03      	cmp	r3, #3
 801735a:	d018      	beq.n	801738e <__gethex+0x36a>
 801735c:	2b01      	cmp	r3, #1
 801735e:	d109      	bne.n	8017374 <__gethex+0x350>
 8017360:	f01b 0f02 	tst.w	fp, #2
 8017364:	d006      	beq.n	8017374 <__gethex+0x350>
 8017366:	f8da 3000 	ldr.w	r3, [sl]
 801736a:	ea4b 0b03 	orr.w	fp, fp, r3
 801736e:	f01b 0f01 	tst.w	fp, #1
 8017372:	d10f      	bne.n	8017394 <__gethex+0x370>
 8017374:	f048 0810 	orr.w	r8, r8, #16
 8017378:	e036      	b.n	80173e8 <__gethex+0x3c4>
 801737a:	f04f 0b01 	mov.w	fp, #1
 801737e:	e7d0      	b.n	8017322 <__gethex+0x2fe>
 8017380:	f04f 0801 	mov.w	r8, #1
 8017384:	e7e2      	b.n	801734c <__gethex+0x328>
 8017386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017388:	f1c3 0301 	rsb	r3, r3, #1
 801738c:	930f      	str	r3, [sp, #60]	; 0x3c
 801738e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017390:	2b00      	cmp	r3, #0
 8017392:	d0ef      	beq.n	8017374 <__gethex+0x350>
 8017394:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017398:	f104 0214 	add.w	r2, r4, #20
 801739c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80173a0:	9301      	str	r3, [sp, #4]
 80173a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80173a6:	2300      	movs	r3, #0
 80173a8:	4694      	mov	ip, r2
 80173aa:	f852 1b04 	ldr.w	r1, [r2], #4
 80173ae:	f1b1 3fff 	cmp.w	r1, #4294967295
 80173b2:	d01e      	beq.n	80173f2 <__gethex+0x3ce>
 80173b4:	3101      	adds	r1, #1
 80173b6:	f8cc 1000 	str.w	r1, [ip]
 80173ba:	f1b8 0f02 	cmp.w	r8, #2
 80173be:	f104 0214 	add.w	r2, r4, #20
 80173c2:	d13d      	bne.n	8017440 <__gethex+0x41c>
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	3b01      	subs	r3, #1
 80173c8:	42ab      	cmp	r3, r5
 80173ca:	d10b      	bne.n	80173e4 <__gethex+0x3c0>
 80173cc:	1169      	asrs	r1, r5, #5
 80173ce:	2301      	movs	r3, #1
 80173d0:	f005 051f 	and.w	r5, r5, #31
 80173d4:	fa03 f505 	lsl.w	r5, r3, r5
 80173d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173dc:	421d      	tst	r5, r3
 80173de:	bf18      	it	ne
 80173e0:	f04f 0801 	movne.w	r8, #1
 80173e4:	f048 0820 	orr.w	r8, r8, #32
 80173e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173ea:	601c      	str	r4, [r3, #0]
 80173ec:	9b02      	ldr	r3, [sp, #8]
 80173ee:	601e      	str	r6, [r3, #0]
 80173f0:	e6a2      	b.n	8017138 <__gethex+0x114>
 80173f2:	4290      	cmp	r0, r2
 80173f4:	f842 3c04 	str.w	r3, [r2, #-4]
 80173f8:	d8d6      	bhi.n	80173a8 <__gethex+0x384>
 80173fa:	68a2      	ldr	r2, [r4, #8]
 80173fc:	4593      	cmp	fp, r2
 80173fe:	db17      	blt.n	8017430 <__gethex+0x40c>
 8017400:	6861      	ldr	r1, [r4, #4]
 8017402:	4648      	mov	r0, r9
 8017404:	3101      	adds	r1, #1
 8017406:	f7fd fe51 	bl	80150ac <_Balloc>
 801740a:	4682      	mov	sl, r0
 801740c:	b918      	cbnz	r0, 8017416 <__gethex+0x3f2>
 801740e:	4b1b      	ldr	r3, [pc, #108]	; (801747c <__gethex+0x458>)
 8017410:	4602      	mov	r2, r0
 8017412:	2184      	movs	r1, #132	; 0x84
 8017414:	e6b3      	b.n	801717e <__gethex+0x15a>
 8017416:	6922      	ldr	r2, [r4, #16]
 8017418:	3202      	adds	r2, #2
 801741a:	f104 010c 	add.w	r1, r4, #12
 801741e:	0092      	lsls	r2, r2, #2
 8017420:	300c      	adds	r0, #12
 8017422:	f7fc ff68 	bl	80142f6 <memcpy>
 8017426:	4621      	mov	r1, r4
 8017428:	4648      	mov	r0, r9
 801742a:	f7fd fe7f 	bl	801512c <_Bfree>
 801742e:	4654      	mov	r4, sl
 8017430:	6922      	ldr	r2, [r4, #16]
 8017432:	1c51      	adds	r1, r2, #1
 8017434:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017438:	6121      	str	r1, [r4, #16]
 801743a:	2101      	movs	r1, #1
 801743c:	6151      	str	r1, [r2, #20]
 801743e:	e7bc      	b.n	80173ba <__gethex+0x396>
 8017440:	6921      	ldr	r1, [r4, #16]
 8017442:	4559      	cmp	r1, fp
 8017444:	dd0b      	ble.n	801745e <__gethex+0x43a>
 8017446:	2101      	movs	r1, #1
 8017448:	4620      	mov	r0, r4
 801744a:	f7ff fd83 	bl	8016f54 <rshift>
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	3601      	adds	r6, #1
 8017452:	42b3      	cmp	r3, r6
 8017454:	f6ff aedb 	blt.w	801720e <__gethex+0x1ea>
 8017458:	f04f 0801 	mov.w	r8, #1
 801745c:	e7c2      	b.n	80173e4 <__gethex+0x3c0>
 801745e:	f015 051f 	ands.w	r5, r5, #31
 8017462:	d0f9      	beq.n	8017458 <__gethex+0x434>
 8017464:	9b01      	ldr	r3, [sp, #4]
 8017466:	441a      	add	r2, r3
 8017468:	f1c5 0520 	rsb	r5, r5, #32
 801746c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017470:	f7fd ff0e 	bl	8015290 <__hi0bits>
 8017474:	42a8      	cmp	r0, r5
 8017476:	dbe6      	blt.n	8017446 <__gethex+0x422>
 8017478:	e7ee      	b.n	8017458 <__gethex+0x434>
 801747a:	bf00      	nop
 801747c:	08018a49 	.word	0x08018a49

08017480 <L_shift>:
 8017480:	f1c2 0208 	rsb	r2, r2, #8
 8017484:	0092      	lsls	r2, r2, #2
 8017486:	b570      	push	{r4, r5, r6, lr}
 8017488:	f1c2 0620 	rsb	r6, r2, #32
 801748c:	6843      	ldr	r3, [r0, #4]
 801748e:	6804      	ldr	r4, [r0, #0]
 8017490:	fa03 f506 	lsl.w	r5, r3, r6
 8017494:	432c      	orrs	r4, r5
 8017496:	40d3      	lsrs	r3, r2
 8017498:	6004      	str	r4, [r0, #0]
 801749a:	f840 3f04 	str.w	r3, [r0, #4]!
 801749e:	4288      	cmp	r0, r1
 80174a0:	d3f4      	bcc.n	801748c <L_shift+0xc>
 80174a2:	bd70      	pop	{r4, r5, r6, pc}

080174a4 <__match>:
 80174a4:	b530      	push	{r4, r5, lr}
 80174a6:	6803      	ldr	r3, [r0, #0]
 80174a8:	3301      	adds	r3, #1
 80174aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174ae:	b914      	cbnz	r4, 80174b6 <__match+0x12>
 80174b0:	6003      	str	r3, [r0, #0]
 80174b2:	2001      	movs	r0, #1
 80174b4:	bd30      	pop	{r4, r5, pc}
 80174b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80174be:	2d19      	cmp	r5, #25
 80174c0:	bf98      	it	ls
 80174c2:	3220      	addls	r2, #32
 80174c4:	42a2      	cmp	r2, r4
 80174c6:	d0f0      	beq.n	80174aa <__match+0x6>
 80174c8:	2000      	movs	r0, #0
 80174ca:	e7f3      	b.n	80174b4 <__match+0x10>

080174cc <__hexnan>:
 80174cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174d0:	680b      	ldr	r3, [r1, #0]
 80174d2:	6801      	ldr	r1, [r0, #0]
 80174d4:	115e      	asrs	r6, r3, #5
 80174d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80174da:	f013 031f 	ands.w	r3, r3, #31
 80174de:	b087      	sub	sp, #28
 80174e0:	bf18      	it	ne
 80174e2:	3604      	addne	r6, #4
 80174e4:	2500      	movs	r5, #0
 80174e6:	1f37      	subs	r7, r6, #4
 80174e8:	4682      	mov	sl, r0
 80174ea:	4690      	mov	r8, r2
 80174ec:	9301      	str	r3, [sp, #4]
 80174ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80174f2:	46b9      	mov	r9, r7
 80174f4:	463c      	mov	r4, r7
 80174f6:	9502      	str	r5, [sp, #8]
 80174f8:	46ab      	mov	fp, r5
 80174fa:	784a      	ldrb	r2, [r1, #1]
 80174fc:	1c4b      	adds	r3, r1, #1
 80174fe:	9303      	str	r3, [sp, #12]
 8017500:	b342      	cbz	r2, 8017554 <__hexnan+0x88>
 8017502:	4610      	mov	r0, r2
 8017504:	9105      	str	r1, [sp, #20]
 8017506:	9204      	str	r2, [sp, #16]
 8017508:	f7ff fd76 	bl	8016ff8 <__hexdig_fun>
 801750c:	2800      	cmp	r0, #0
 801750e:	d14f      	bne.n	80175b0 <__hexnan+0xe4>
 8017510:	9a04      	ldr	r2, [sp, #16]
 8017512:	9905      	ldr	r1, [sp, #20]
 8017514:	2a20      	cmp	r2, #32
 8017516:	d818      	bhi.n	801754a <__hexnan+0x7e>
 8017518:	9b02      	ldr	r3, [sp, #8]
 801751a:	459b      	cmp	fp, r3
 801751c:	dd13      	ble.n	8017546 <__hexnan+0x7a>
 801751e:	454c      	cmp	r4, r9
 8017520:	d206      	bcs.n	8017530 <__hexnan+0x64>
 8017522:	2d07      	cmp	r5, #7
 8017524:	dc04      	bgt.n	8017530 <__hexnan+0x64>
 8017526:	462a      	mov	r2, r5
 8017528:	4649      	mov	r1, r9
 801752a:	4620      	mov	r0, r4
 801752c:	f7ff ffa8 	bl	8017480 <L_shift>
 8017530:	4544      	cmp	r4, r8
 8017532:	d950      	bls.n	80175d6 <__hexnan+0x10a>
 8017534:	2300      	movs	r3, #0
 8017536:	f1a4 0904 	sub.w	r9, r4, #4
 801753a:	f844 3c04 	str.w	r3, [r4, #-4]
 801753e:	f8cd b008 	str.w	fp, [sp, #8]
 8017542:	464c      	mov	r4, r9
 8017544:	461d      	mov	r5, r3
 8017546:	9903      	ldr	r1, [sp, #12]
 8017548:	e7d7      	b.n	80174fa <__hexnan+0x2e>
 801754a:	2a29      	cmp	r2, #41	; 0x29
 801754c:	d155      	bne.n	80175fa <__hexnan+0x12e>
 801754e:	3102      	adds	r1, #2
 8017550:	f8ca 1000 	str.w	r1, [sl]
 8017554:	f1bb 0f00 	cmp.w	fp, #0
 8017558:	d04f      	beq.n	80175fa <__hexnan+0x12e>
 801755a:	454c      	cmp	r4, r9
 801755c:	d206      	bcs.n	801756c <__hexnan+0xa0>
 801755e:	2d07      	cmp	r5, #7
 8017560:	dc04      	bgt.n	801756c <__hexnan+0xa0>
 8017562:	462a      	mov	r2, r5
 8017564:	4649      	mov	r1, r9
 8017566:	4620      	mov	r0, r4
 8017568:	f7ff ff8a 	bl	8017480 <L_shift>
 801756c:	4544      	cmp	r4, r8
 801756e:	d934      	bls.n	80175da <__hexnan+0x10e>
 8017570:	f1a8 0204 	sub.w	r2, r8, #4
 8017574:	4623      	mov	r3, r4
 8017576:	f853 1b04 	ldr.w	r1, [r3], #4
 801757a:	f842 1f04 	str.w	r1, [r2, #4]!
 801757e:	429f      	cmp	r7, r3
 8017580:	d2f9      	bcs.n	8017576 <__hexnan+0xaa>
 8017582:	1b3b      	subs	r3, r7, r4
 8017584:	f023 0303 	bic.w	r3, r3, #3
 8017588:	3304      	adds	r3, #4
 801758a:	3e03      	subs	r6, #3
 801758c:	3401      	adds	r4, #1
 801758e:	42a6      	cmp	r6, r4
 8017590:	bf38      	it	cc
 8017592:	2304      	movcc	r3, #4
 8017594:	4443      	add	r3, r8
 8017596:	2200      	movs	r2, #0
 8017598:	f843 2b04 	str.w	r2, [r3], #4
 801759c:	429f      	cmp	r7, r3
 801759e:	d2fb      	bcs.n	8017598 <__hexnan+0xcc>
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	b91b      	cbnz	r3, 80175ac <__hexnan+0xe0>
 80175a4:	4547      	cmp	r7, r8
 80175a6:	d126      	bne.n	80175f6 <__hexnan+0x12a>
 80175a8:	2301      	movs	r3, #1
 80175aa:	603b      	str	r3, [r7, #0]
 80175ac:	2005      	movs	r0, #5
 80175ae:	e025      	b.n	80175fc <__hexnan+0x130>
 80175b0:	3501      	adds	r5, #1
 80175b2:	2d08      	cmp	r5, #8
 80175b4:	f10b 0b01 	add.w	fp, fp, #1
 80175b8:	dd06      	ble.n	80175c8 <__hexnan+0xfc>
 80175ba:	4544      	cmp	r4, r8
 80175bc:	d9c3      	bls.n	8017546 <__hexnan+0x7a>
 80175be:	2300      	movs	r3, #0
 80175c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80175c4:	2501      	movs	r5, #1
 80175c6:	3c04      	subs	r4, #4
 80175c8:	6822      	ldr	r2, [r4, #0]
 80175ca:	f000 000f 	and.w	r0, r0, #15
 80175ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80175d2:	6020      	str	r0, [r4, #0]
 80175d4:	e7b7      	b.n	8017546 <__hexnan+0x7a>
 80175d6:	2508      	movs	r5, #8
 80175d8:	e7b5      	b.n	8017546 <__hexnan+0x7a>
 80175da:	9b01      	ldr	r3, [sp, #4]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d0df      	beq.n	80175a0 <__hexnan+0xd4>
 80175e0:	f1c3 0320 	rsb	r3, r3, #32
 80175e4:	f04f 32ff 	mov.w	r2, #4294967295
 80175e8:	40da      	lsrs	r2, r3
 80175ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80175ee:	4013      	ands	r3, r2
 80175f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80175f4:	e7d4      	b.n	80175a0 <__hexnan+0xd4>
 80175f6:	3f04      	subs	r7, #4
 80175f8:	e7d2      	b.n	80175a0 <__hexnan+0xd4>
 80175fa:	2004      	movs	r0, #4
 80175fc:	b007      	add	sp, #28
 80175fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017602 <__ascii_mbtowc>:
 8017602:	b082      	sub	sp, #8
 8017604:	b901      	cbnz	r1, 8017608 <__ascii_mbtowc+0x6>
 8017606:	a901      	add	r1, sp, #4
 8017608:	b142      	cbz	r2, 801761c <__ascii_mbtowc+0x1a>
 801760a:	b14b      	cbz	r3, 8017620 <__ascii_mbtowc+0x1e>
 801760c:	7813      	ldrb	r3, [r2, #0]
 801760e:	600b      	str	r3, [r1, #0]
 8017610:	7812      	ldrb	r2, [r2, #0]
 8017612:	1e10      	subs	r0, r2, #0
 8017614:	bf18      	it	ne
 8017616:	2001      	movne	r0, #1
 8017618:	b002      	add	sp, #8
 801761a:	4770      	bx	lr
 801761c:	4610      	mov	r0, r2
 801761e:	e7fb      	b.n	8017618 <__ascii_mbtowc+0x16>
 8017620:	f06f 0001 	mvn.w	r0, #1
 8017624:	e7f8      	b.n	8017618 <__ascii_mbtowc+0x16>

08017626 <_realloc_r>:
 8017626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801762a:	4680      	mov	r8, r0
 801762c:	4614      	mov	r4, r2
 801762e:	460e      	mov	r6, r1
 8017630:	b921      	cbnz	r1, 801763c <_realloc_r+0x16>
 8017632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017636:	4611      	mov	r1, r2
 8017638:	f7fb bd14 	b.w	8013064 <_malloc_r>
 801763c:	b92a      	cbnz	r2, 801764a <_realloc_r+0x24>
 801763e:	f7fd fce9 	bl	8015014 <_free_r>
 8017642:	4625      	mov	r5, r4
 8017644:	4628      	mov	r0, r5
 8017646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801764a:	f000 f8ad 	bl	80177a8 <_malloc_usable_size_r>
 801764e:	4284      	cmp	r4, r0
 8017650:	4607      	mov	r7, r0
 8017652:	d802      	bhi.n	801765a <_realloc_r+0x34>
 8017654:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017658:	d812      	bhi.n	8017680 <_realloc_r+0x5a>
 801765a:	4621      	mov	r1, r4
 801765c:	4640      	mov	r0, r8
 801765e:	f7fb fd01 	bl	8013064 <_malloc_r>
 8017662:	4605      	mov	r5, r0
 8017664:	2800      	cmp	r0, #0
 8017666:	d0ed      	beq.n	8017644 <_realloc_r+0x1e>
 8017668:	42bc      	cmp	r4, r7
 801766a:	4622      	mov	r2, r4
 801766c:	4631      	mov	r1, r6
 801766e:	bf28      	it	cs
 8017670:	463a      	movcs	r2, r7
 8017672:	f7fc fe40 	bl	80142f6 <memcpy>
 8017676:	4631      	mov	r1, r6
 8017678:	4640      	mov	r0, r8
 801767a:	f7fd fccb 	bl	8015014 <_free_r>
 801767e:	e7e1      	b.n	8017644 <_realloc_r+0x1e>
 8017680:	4635      	mov	r5, r6
 8017682:	e7df      	b.n	8017644 <_realloc_r+0x1e>

08017684 <__ascii_wctomb>:
 8017684:	b149      	cbz	r1, 801769a <__ascii_wctomb+0x16>
 8017686:	2aff      	cmp	r2, #255	; 0xff
 8017688:	bf85      	ittet	hi
 801768a:	238a      	movhi	r3, #138	; 0x8a
 801768c:	6003      	strhi	r3, [r0, #0]
 801768e:	700a      	strbls	r2, [r1, #0]
 8017690:	f04f 30ff 	movhi.w	r0, #4294967295
 8017694:	bf98      	it	ls
 8017696:	2001      	movls	r0, #1
 8017698:	4770      	bx	lr
 801769a:	4608      	mov	r0, r1
 801769c:	4770      	bx	lr

0801769e <__swhatbuf_r>:
 801769e:	b570      	push	{r4, r5, r6, lr}
 80176a0:	460c      	mov	r4, r1
 80176a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176a6:	2900      	cmp	r1, #0
 80176a8:	b096      	sub	sp, #88	; 0x58
 80176aa:	4615      	mov	r5, r2
 80176ac:	461e      	mov	r6, r3
 80176ae:	da0d      	bge.n	80176cc <__swhatbuf_r+0x2e>
 80176b0:	89a3      	ldrh	r3, [r4, #12]
 80176b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80176b6:	f04f 0100 	mov.w	r1, #0
 80176ba:	bf0c      	ite	eq
 80176bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80176c0:	2340      	movne	r3, #64	; 0x40
 80176c2:	2000      	movs	r0, #0
 80176c4:	6031      	str	r1, [r6, #0]
 80176c6:	602b      	str	r3, [r5, #0]
 80176c8:	b016      	add	sp, #88	; 0x58
 80176ca:	bd70      	pop	{r4, r5, r6, pc}
 80176cc:	466a      	mov	r2, sp
 80176ce:	f000 f849 	bl	8017764 <_fstat_r>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	dbec      	blt.n	80176b0 <__swhatbuf_r+0x12>
 80176d6:	9901      	ldr	r1, [sp, #4]
 80176d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80176dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80176e0:	4259      	negs	r1, r3
 80176e2:	4159      	adcs	r1, r3
 80176e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80176e8:	e7eb      	b.n	80176c2 <__swhatbuf_r+0x24>

080176ea <__smakebuf_r>:
 80176ea:	898b      	ldrh	r3, [r1, #12]
 80176ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176ee:	079d      	lsls	r5, r3, #30
 80176f0:	4606      	mov	r6, r0
 80176f2:	460c      	mov	r4, r1
 80176f4:	d507      	bpl.n	8017706 <__smakebuf_r+0x1c>
 80176f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80176fa:	6023      	str	r3, [r4, #0]
 80176fc:	6123      	str	r3, [r4, #16]
 80176fe:	2301      	movs	r3, #1
 8017700:	6163      	str	r3, [r4, #20]
 8017702:	b002      	add	sp, #8
 8017704:	bd70      	pop	{r4, r5, r6, pc}
 8017706:	ab01      	add	r3, sp, #4
 8017708:	466a      	mov	r2, sp
 801770a:	f7ff ffc8 	bl	801769e <__swhatbuf_r>
 801770e:	9900      	ldr	r1, [sp, #0]
 8017710:	4605      	mov	r5, r0
 8017712:	4630      	mov	r0, r6
 8017714:	f7fb fca6 	bl	8013064 <_malloc_r>
 8017718:	b948      	cbnz	r0, 801772e <__smakebuf_r+0x44>
 801771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801771e:	059a      	lsls	r2, r3, #22
 8017720:	d4ef      	bmi.n	8017702 <__smakebuf_r+0x18>
 8017722:	f023 0303 	bic.w	r3, r3, #3
 8017726:	f043 0302 	orr.w	r3, r3, #2
 801772a:	81a3      	strh	r3, [r4, #12]
 801772c:	e7e3      	b.n	80176f6 <__smakebuf_r+0xc>
 801772e:	89a3      	ldrh	r3, [r4, #12]
 8017730:	6020      	str	r0, [r4, #0]
 8017732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017736:	81a3      	strh	r3, [r4, #12]
 8017738:	9b00      	ldr	r3, [sp, #0]
 801773a:	6163      	str	r3, [r4, #20]
 801773c:	9b01      	ldr	r3, [sp, #4]
 801773e:	6120      	str	r0, [r4, #16]
 8017740:	b15b      	cbz	r3, 801775a <__smakebuf_r+0x70>
 8017742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017746:	4630      	mov	r0, r6
 8017748:	f000 f81e 	bl	8017788 <_isatty_r>
 801774c:	b128      	cbz	r0, 801775a <__smakebuf_r+0x70>
 801774e:	89a3      	ldrh	r3, [r4, #12]
 8017750:	f023 0303 	bic.w	r3, r3, #3
 8017754:	f043 0301 	orr.w	r3, r3, #1
 8017758:	81a3      	strh	r3, [r4, #12]
 801775a:	89a3      	ldrh	r3, [r4, #12]
 801775c:	431d      	orrs	r5, r3
 801775e:	81a5      	strh	r5, [r4, #12]
 8017760:	e7cf      	b.n	8017702 <__smakebuf_r+0x18>
	...

08017764 <_fstat_r>:
 8017764:	b538      	push	{r3, r4, r5, lr}
 8017766:	4d07      	ldr	r5, [pc, #28]	; (8017784 <_fstat_r+0x20>)
 8017768:	2300      	movs	r3, #0
 801776a:	4604      	mov	r4, r0
 801776c:	4608      	mov	r0, r1
 801776e:	4611      	mov	r1, r2
 8017770:	602b      	str	r3, [r5, #0]
 8017772:	f7f1 ff1e 	bl	80095b2 <_fstat>
 8017776:	1c43      	adds	r3, r0, #1
 8017778:	d102      	bne.n	8017780 <_fstat_r+0x1c>
 801777a:	682b      	ldr	r3, [r5, #0]
 801777c:	b103      	cbz	r3, 8017780 <_fstat_r+0x1c>
 801777e:	6023      	str	r3, [r4, #0]
 8017780:	bd38      	pop	{r3, r4, r5, pc}
 8017782:	bf00      	nop
 8017784:	20000adc 	.word	0x20000adc

08017788 <_isatty_r>:
 8017788:	b538      	push	{r3, r4, r5, lr}
 801778a:	4d06      	ldr	r5, [pc, #24]	; (80177a4 <_isatty_r+0x1c>)
 801778c:	2300      	movs	r3, #0
 801778e:	4604      	mov	r4, r0
 8017790:	4608      	mov	r0, r1
 8017792:	602b      	str	r3, [r5, #0]
 8017794:	f7f1 ff1d 	bl	80095d2 <_isatty>
 8017798:	1c43      	adds	r3, r0, #1
 801779a:	d102      	bne.n	80177a2 <_isatty_r+0x1a>
 801779c:	682b      	ldr	r3, [r5, #0]
 801779e:	b103      	cbz	r3, 80177a2 <_isatty_r+0x1a>
 80177a0:	6023      	str	r3, [r4, #0]
 80177a2:	bd38      	pop	{r3, r4, r5, pc}
 80177a4:	20000adc 	.word	0x20000adc

080177a8 <_malloc_usable_size_r>:
 80177a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177ac:	1f18      	subs	r0, r3, #4
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	bfbc      	itt	lt
 80177b2:	580b      	ldrlt	r3, [r1, r0]
 80177b4:	18c0      	addlt	r0, r0, r3
 80177b6:	4770      	bx	lr

080177b8 <_init>:
 80177b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ba:	bf00      	nop
 80177bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177be:	bc08      	pop	{r3}
 80177c0:	469e      	mov	lr, r3
 80177c2:	4770      	bx	lr

080177c4 <_fini>:
 80177c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c6:	bf00      	nop
 80177c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177ca:	bc08      	pop	{r3}
 80177cc:	469e      	mov	lr, r3
 80177ce:	4770      	bx	lr
