
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e2c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08018010  08018010  00019010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195c4  080195c4  0001b24c  2**0
                  CONTENTS
  4 .ARM          00000008  080195c4  080195c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080195cc  080195cc  0001b24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080195cc  080195cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080195dc  080195dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  080195ec  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000250  08019838  0001b250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  08019838  0001bb10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000487ae  00000000  00000000  0001b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ba8  00000000  00000000  00063a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a58  00000000  00000000  0006c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000211b  00000000  00000000  0006f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033f9a  00000000  00000000  0007114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000385a5  00000000  00000000  000a50e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129a65  00000000  00000000  000dd68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  002070ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cc68  00000000  00000000  00207178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00213de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  00213e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017ff4 	.word	0x08017ff4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08017ff4 	.word	0x08017ff4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08018a3c 	.word	0x08018a3c

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	08018a3c 	.word	0x08018a3c

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f012 fbec 	bl	8013862 <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb9 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	609a      	str	r2, [r3, #8]
  _address = address;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08018a20 	.word	0x08018a20

080010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa5c 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f013 fc92 	bl	8014a2a <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	83fb      	strh	r3, [r7, #30]
 800110a:	8bfb      	ldrh	r3, [r7, #30]
 800110c:	83bb      	strh	r3, [r7, #28]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	2306      	movs	r3, #6
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f000 fa05 	bl	800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d7b      	ldrb	r3, [r7, #21]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800113c:	7e3b      	ldrb	r3, [r7, #24]
 800113e:	b21a      	sxth	r2, r3
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b08      	subs	r3, #8
 800114e:	2b26      	cmp	r3, #38	@ 0x26
 8001150:	f200 8152 	bhi.w	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001379 	.word	0x08001379
 8001160:	080013f9 	.word	0x080013f9
 8001164:	080013f9 	.word	0x080013f9
 8001168:	080013f9 	.word	0x080013f9
 800116c:	080013f9 	.word	0x080013f9
 8001170:	080013f9 	.word	0x080013f9
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080013f9 	.word	0x080013f9
 800117c:	080013f9 	.word	0x080013f9
 8001180:	080013f9 	.word	0x080013f9
 8001184:	080013f9 	.word	0x080013f9
 8001188:	080013f9 	.word	0x080013f9
 800118c:	08001279 	.word	0x08001279
 8001190:	080013f9 	.word	0x080013f9
 8001194:	080013f9 	.word	0x080013f9
 8001198:	080013f9 	.word	0x080013f9
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	080013f9 	.word	0x080013f9
 80011a4:	080012f9 	.word	0x080012f9
 80011a8:	080013f9 	.word	0x080013f9
 80011ac:	080013f9 	.word	0x080013f9
 80011b0:	080013f9 	.word	0x080013f9
 80011b4:	080013f9 	.word	0x080013f9
 80011b8:	080013f9 	.word	0x080013f9
 80011bc:	080013f9 	.word	0x080013f9
 80011c0:	080013f9 	.word	0x080013f9
 80011c4:	080013f9 	.word	0x080013f9
 80011c8:	080013f9 	.word	0x080013f9
 80011cc:	080013f9 	.word	0x080013f9
 80011d0:	080013f9 	.word	0x080013f9
 80011d4:	080013f9 	.word	0x080013f9
 80011d8:	080013f9 	.word	0x080013f9
 80011dc:	08001379 	.word	0x08001379
 80011e0:	080013f9 	.word	0x080013f9
 80011e4:	080013f9 	.word	0x080013f9
 80011e8:	080013f9 	.word	0x080013f9
 80011ec:	080013f9 	.word	0x080013f9
 80011f0:	080013f9 	.word	0x080013f9
 80011f4:	08001379 	.word	0x08001379
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 80011f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001208:	f7ff fb48 	bl	800089c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9d9 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800121c:	4603      	mov	r3, r0
 800121e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a4 	bl	8000574 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001232:	f7ff fb33 	bl	800089c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	2101      	movs	r1, #1
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f9c4 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001246:	4603      	mov	r3, r0
 8001248:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 800124c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f98f 	bl	8000574 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800125c:	f7ff fb1e 	bl	800089c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	2102      	movs	r1, #2
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f9af 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001270:	4603      	mov	r3, r0
 8001272:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001276:	e0bf      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f999 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800129c:	4603      	mov	r3, r0
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f964 	bl	8000574 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012b2:	f7ff faf3 	bl	800089c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f984 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f96f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80012f6:	e07f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80012f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	2100      	movs	r1, #0
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f959 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800131c:	4603      	mov	r3, r0
 800131e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 8001322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f924 	bl	8000574 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001332:	f7ff fab3 	bl	800089c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f944 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001346:	4603      	mov	r3, r0
 8001348:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f90f 	bl	8000574 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800135c:	f7ff fa9e 	bl	800089c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f92f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001370:	4603      	mov	r3, r0
 8001372:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001376:	e03f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8f9 	bl	8000574 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001388:	f7ff fa88 	bl	800089c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f919 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800139c:	4603      	mov	r3, r0
 800139e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f904 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013dc:	f7ff fa5e 	bl	800089c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ef 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013f6:	bf00      	nop
  }

  return xyz;
 80013f8:	bf00      	nop
}
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	bf00      	nop
 8001404:	40300000 	.word	0x40300000
 8001408:	408c2000 	.word	0x408c2000
 800140c:	40590000 	.word	0x40590000

08001410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f013 fb03 	bl	8014a2a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	220b      	movs	r2, #11
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f013 fb05 	bl	8014a3a <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2203      	movs	r2, #3
 8001448:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001464:	621a      	str	r2, [r3, #32]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08018010 	.word	0x08018010
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f013 facf 	bl	8014a2a <memset>

  event->version   = sizeof(sensors_event_t);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2203      	movs	r2, #3
 800149e:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014a0:	f009 f968 	bl	800a774 <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	221a      	movs	r2, #26
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe15 	bl	80010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f853 	bl	800156a <_ZN3imu6VectorILh3EE1xEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbb3 	bl	8000c38 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84f 	bl	8001580 <_ZN3imu6VectorILh3EE1yEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fba4 	bl	8000c38 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <_ZN3imu6VectorILh3EE1zEv>
 8001500:	4603      	mov	r3, r0
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	61da      	str	r2, [r3, #28]

  return true;
 8001514:	2401      	movs	r4, #1
}
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f81a 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001520:	4623      	mov	r3, r4
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f89b 	bl	8001680 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    {
    }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2218      	movs	r2, #24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f013 fa33 	bl	8014a2a <memset>
    }
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
    }
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_ZN15Adafruit_BNO055D1Ev+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd29 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08018a20 	.word	0x08018a20

08001610 <_ZN15Adafruit_BNO055D0Ev>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f012 f91e 	bl	8013862 <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	3ff00000 	.word	0x3ff00000

08001680 <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29a      	uxth	r2, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2164      	movs	r1, #100	@ 0x64
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2152      	movs	r1, #82	@ 0x52
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016a8:	f00a fc14 	bl	800bed4 <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016b0:	bf00      	nop
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016b4:	f00a fec9 	bl	800c44a <HAL_I2C_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <I2C_n_byte_receive+0x32>

  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000320 	.word	0x20000320

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016f2:	2229      	movs	r2, #41	@ 0x29
 80016f4:	2137      	movs	r1, #55	@ 0x37
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f8:	f7ff fcd8 	bl	80010ac <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fe:	f7ff ff97 	bl	8001630 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001704:	f7ff ff54 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d105      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171a:	f7ff ff1b 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001720:	f7ff ff64 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000026c 	.word	0x2000026c
 8001730:	20000280 	.word	0x20000280
 8001734:	200002a0 	.word	0x200002a0

08001738 <_GLOBAL__sub_I_bno>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_bno>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <alert_regulator>:
 */
extern "C" {
#include <alert_reg.h>

void alert_regulator()
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f00a f9c8 	bl	800bb10 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4910      	ldr	r1, [pc, #64]	@ (80017cc <as50_readAngle+0x64>)
 800178a:	4811      	ldr	r0, [pc, #68]	@ (80017d0 <as50_readAngle+0x68>)
 800178c:	f00d f938 	bl	800ea00 <HAL_SPI_TransmitReceive>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10e      	bne.n	80017b4 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800179c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a0:	f00a f9b6 	bl	800bb10 <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017b2:	e006      	b.n	80017c2 <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017be:	f00a f9a7 	bl	800bb10 <HAL_GPIO_WritePin>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000830 	.word	0x20000830

080017d4 <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
int at24_isConnected(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80017d8:	2364      	movs	r3, #100	@ 0x64
 80017da:	2202      	movs	r2, #2
 80017dc:	21a0      	movs	r1, #160	@ 0xa0
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <at24_isConnected+0x20>)
 80017e0:	f00a fc92 	bl	800c108 <HAL_I2C_IsDeviceReady>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <at24_isConnected+0x1a>
    return true;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <at24_isConnected+0x1c>
  else
    return false;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000320 	.word	0x20000320

080017f8 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_write(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4603      	mov	r3, r0
 8001804:	81fb      	strh	r3, [r7, #14]
 8001806:	4613      	mov	r3, r2
 8001808:	737b      	strb	r3, [r7, #13]
  if (at24_lock == 1)
 800180a:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <at24_write+0xc0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <at24_write+0x1e>
    return false;
 8001812:	2300      	movs	r3, #0
 8001814:	e04b      	b.n	80018ae <at24_write+0xb6>

  at24_lock = 1;
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <at24_write+0xc0>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 800181c:	f008 ffaa 	bl	800a774 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]
  while (1)
  {
	#if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
	#endif
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	b29b      	uxth	r3, r3
 800182a:	f1c3 0320 	rsb	r3, r3, #32
 800182e:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8001830:	7b7b      	ldrb	r3, [r7, #13]
 8001832:	b29b      	uxth	r3, r3
 8001834:	8afa      	ldrh	r2, [r7, #22]
 8001836:	429a      	cmp	r2, r3
 8001838:	d901      	bls.n	800183e <at24_write+0x46>
      w = len;
 800183a:	7b7b      	ldrb	r3, [r7, #13]
 800183c:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 800183e:	89fa      	ldrh	r2, [r7, #14]
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	8afb      	ldrh	r3, [r7, #22]
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2302      	movs	r3, #2
 800184e:	21a0      	movs	r1, #160	@ 0xa0
 8001850:	481a      	ldr	r0, [pc, #104]	@ (80018bc <at24_write+0xc4>)
 8001852:	f00a fa2b 	bl	800bcac <HAL_I2C_Mem_Write>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d124      	bne.n	80018a6 <at24_write+0xae>
    #endif
    {
      at24_delay(1);
 800185c:	2001      	movs	r0, #1
 800185e:	f008 ff95 	bl	800a78c <HAL_Delay>
      len -= w;
 8001862:	8afb      	ldrh	r3, [r7, #22]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	7b7a      	ldrb	r2, [r7, #13]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	737b      	strb	r3, [r7, #13]
      data += w;
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
      address += w;
 8001874:	89fa      	ldrh	r2, [r7, #14]
 8001876:	8afb      	ldrh	r3, [r7, #22]
 8001878:	4413      	add	r3, r2
 800187a:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 800187c:	7b7b      	ldrb	r3, [r7, #13]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <at24_write+0x94>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        at24_lock = 0;
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <at24_write+0xc0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        return true;
 8001888:	2301      	movs	r3, #1
 800188a:	e010      	b.n	80018ae <at24_write+0xb6>
      }
      if (HAL_GetTick() - startTime >= timeout)
 800188c:	f008 ff72 	bl	800a774 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8c2      	bhi.n	8001822 <at24_write+0x2a>
      {
        at24_lock = 0;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <at24_write+0xc0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
        return false;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e003      	b.n	80018ae <at24_write+0xb6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      at24_lock = 0;
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <at24_write+0xc0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
      return false;
 80018ac:	2300      	movs	r3, #0
    }
  }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002b8 	.word	0x200002b8
 80018bc:	20000320 	.word	0x20000320

080018c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <MX_DMA_Init+0x60>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <MX_DMA_Init+0x60>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_DMA_Init+0x60>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <MX_DMA_Init+0x60>)
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <MX_DMA_Init+0x60>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <MX_DMA_Init+0x60>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	200b      	movs	r0, #11
 80018fc:	f009 f843 	bl	800a986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001900:	200b      	movs	r0, #11
 8001902:	f009 f85a 	bl	800a9ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	200c      	movs	r0, #12
 800190c:	f009 f83b 	bl	800a986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001910:	200c      	movs	r0, #12
 8001912:	f009 f852 	bl	800a9ba <HAL_NVIC_EnableIRQ>

}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <MX_FDCAN1_Init+0x8c>)
 800192c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001936:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800193a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001944:	2201      	movs	r2, #1
 8001946:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001948:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800194a:	2201      	movs	r2, #1
 800194c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001950:	2200      	movs	r2, #0
 8001952:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001956:	2204      	movs	r2, #4
 8001958:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800195c:	2201      	movs	r2, #1
 800195e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001962:	221d      	movs	r2, #29
 8001964:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001968:	220a      	movs	r2, #10
 800196a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800196e:	2204      	movs	r2, #4
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001974:	2201      	movs	r2, #1
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800197a:	2202      	movs	r2, #2
 800197c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001980:	2202      	movs	r2, #2
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001986:	2200      	movs	r2, #0
 8001988:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 800198c:	2203      	movs	r2, #3
 800198e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001992:	2200      	movs	r2, #0
 8001994:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_FDCAN1_Init+0x88>)
 8001998:	f009 fab2 	bl	800af00 <HAL_FDCAN_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80019a2:	f000 fbbc 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002bc 	.word	0x200002bc
 80019b0:	40006400 	.word	0x40006400

080019b4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b09e      	sub	sp, #120	@ 0x78
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2254      	movs	r2, #84	@ 0x54
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f013 f828 	bl	8014a2a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a20      	ldr	r2, [pc, #128]	@ (8001a60 <HAL_FDCAN_MspInit+0xac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d138      	bne.n	8001a56 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80019ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00c fb95 	bl	800e124 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a00:	f000 fb8d 	bl	800211e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_FDCAN_MspInit+0xb0>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_FDCAN_MspInit+0xb0>)
 8001a0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_FDCAN_MspInit+0xb0>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_FDCAN_MspInit+0xb0>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <HAL_FDCAN_MspInit+0xb0>)
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_FDCAN_MspInit+0xb0>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a38:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a46:	2309      	movs	r3, #9
 8001a48:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <HAL_FDCAN_MspInit+0xb4>)
 8001a52:	f009 fedb 	bl	800b80c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001a56:	bf00      	nop
 8001a58:	3778      	adds	r7, #120	@ 0x78
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40006400 	.word	0x40006400
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000400 	.word	0x48000400

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a82:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4a49      	ldr	r2, [pc, #292]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b44      	ldr	r3, [pc, #272]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	4a43      	ldr	r2, [pc, #268]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4a37      	ldr	r2, [pc, #220]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4b35      	ldr	r3, [pc, #212]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a31      	ldr	r2, [pc, #196]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <MX_GPIO_Init+0x140>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8001afa:	2200      	movs	r2, #0
 8001afc:	f649 3110 	movw	r1, #39696	@ 0x9b10
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b04:	f00a f804 	bl	800bb10 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	4828      	ldr	r0, [pc, #160]	@ (8001bb0 <MX_GPIO_Init+0x144>)
 8001b0e:	f009 ffff 	bl	800bb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2104      	movs	r1, #4
 8001b16:	4827      	ldr	r0, [pc, #156]	@ (8001bb4 <MX_GPIO_Init+0x148>)
 8001b18:	f009 fffa 	bl	800bb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b20:	2303      	movs	r3, #3
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4820      	ldr	r0, [pc, #128]	@ (8001bb0 <MX_GPIO_Init+0x144>)
 8001b30:	f009 fe6c 	bl	800b80c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8001b34:	230c      	movs	r3, #12
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	481a      	ldr	r0, [pc, #104]	@ (8001bb0 <MX_GPIO_Init+0x144>)
 8001b48:	f009 fe60 	bl	800b80c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8001b4c:	f649 3310 	movw	r3, #39696	@ 0x9b10
 8001b50:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b68:	f009 fe50 	bl	800b80c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <MX_GPIO_Init+0x144>)
 8001b84:	f009 fe42 	bl	800b80c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_GPIO_Init+0x148>)
 8001ba0:	f009 fe34 	bl	800b80c <HAL_GPIO_Init>

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	@ 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	48000c00 	.word	0x48000c00

08001bb8 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <MX_I2C4_Init+0x78>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <MX_I2C4_Init+0x7c>)
 8001bc6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001bf2:	480e      	ldr	r0, [pc, #56]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001bf4:	f009 ffbe 	bl	800bb74 <HAL_I2C_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001bfe:	f000 fa8e 	bl	800211e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001c06:	f00b fc13 	bl	800d430 <HAL_I2CEx_ConfigAnalogFilter>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001c10:	f000 fa85 	bl	800211e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001c14:	2100      	movs	r1, #0
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_I2C4_Init+0x74>)
 8001c18:	f00b fc55 	bl	800d4c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f000 fa7c 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000320 	.word	0x20000320
 8001c30:	40008400 	.word	0x40008400
 8001c34:	00702991 	.word	0x00702991

08001c38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0a0      	sub	sp, #128	@ 0x80
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	2254      	movs	r2, #84	@ 0x54
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f012 fee6 	bl	8014a2a <memset>
  if(i2cHandle->Instance==I2C4)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5e      	ldr	r2, [pc, #376]	@ (8001ddc <HAL_I2C_MspInit+0x1a4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	f040 80b5 	bne.w	8001dd4 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00c fa53 	bl	800e124 <HAL_RCCEx_PeriphCLKConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001c84:	f000 fa4b 	bl	800211e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c88:	4b55      	ldr	r3, [pc, #340]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8c:	4a54      	ldr	r2, [pc, #336]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c94:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb8:	2340      	movs	r3, #64	@ 0x40
 8001cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4844      	ldr	r0, [pc, #272]	@ (8001de4 <HAL_I2C_MspInit+0x1ac>)
 8001cd4:	f009 fd9a 	bl	800b80c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cdc:	2312      	movs	r3, #18
 8001cde:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	483d      	ldr	r0, [pc, #244]	@ (8001de8 <HAL_I2C_MspInit+0x1b0>)
 8001cf4:	f009 fd8a 	bl	800b80c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	4a38      	ldr	r2, [pc, #224]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001d04:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_I2C_MspInit+0x1a8>)
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d12:	4a37      	ldr	r2, [pc, #220]	@ (8001df0 <HAL_I2C_MspInit+0x1b8>)
 8001d14:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001d16:	4b35      	ldr	r3, [pc, #212]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d18:	2216      	movs	r2, #22
 8001d1a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d22:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d28:	4b30      	ldr	r3, [pc, #192]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d40:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001d46:	4829      	ldr	r0, [pc, #164]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d48:	f008 fe52 	bl	800a9f0 <HAL_DMA_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001d52:	f000 f9e4 	bl	800211e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a24      	ldr	r2, [pc, #144]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d5c:	4a23      	ldr	r2, [pc, #140]	@ (8001dec <HAL_I2C_MspInit+0x1b4>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001d62:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d64:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_I2C_MspInit+0x1c0>)
 8001d66:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d6a:	2217      	movs	r2, #23
 8001d6c:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d70:	2210      	movs	r2, #16
 8001d72:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d74:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d7c:	2280      	movs	r2, #128	@ 0x80
 8001d7e:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d92:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001d98:	4816      	ldr	r0, [pc, #88]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001d9a:	f008 fe29 	bl	800a9f0 <HAL_DMA_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001da4:	f000 f9bb 	bl	800211e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001dac:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dae:	4a11      	ldr	r2, [pc, #68]	@ (8001df4 <HAL_I2C_MspInit+0x1bc>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2052      	movs	r0, #82	@ 0x52
 8001dba:	f008 fde4 	bl	800a986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001dbe:	2052      	movs	r0, #82	@ 0x52
 8001dc0:	f008 fdfb 	bl	800a9ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2053      	movs	r0, #83	@ 0x53
 8001dca:	f008 fddc 	bl	800a986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001dce:	2053      	movs	r0, #83	@ 0x53
 8001dd0:	f008 fdf3 	bl	800a9ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3780      	adds	r7, #128	@ 0x80
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40008400 	.word	0x40008400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48000800 	.word	0x48000800
 8001de8:	48000400 	.word	0x48000400
 8001dec:	20000374 	.word	0x20000374
 8001df0:	40020008 	.word	0x40020008
 8001df4:	200003d4 	.word	0x200003d4
 8001df8:	4002001c 	.word	0x4002001c

08001dfc <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	{
		mc->motor_type = 14;
	}
	else if (JOINT_N == 5)
	{
		mc->motor_type = 14;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	220e      	movs	r2, #14
 8001e0a:	701a      	strb	r2, [r3, #0]
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
	}

	switch(mc->motor_type)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e12:	2b17      	cmp	r3, #23
 8001e14:	d01b      	beq.n	8001e4e <motor_config_assembler+0x52>
 8001e16:	2b17      	cmp	r3, #23
 8001e18:	dc23      	bgt.n	8001e62 <motor_config_assembler+0x66>
 8001e1a:	2b0e      	cmp	r3, #14
 8001e1c:	d002      	beq.n	8001e24 <motor_config_assembler+0x28>
 8001e1e:	2b11      	cmp	r3, #17
 8001e20:	d00b      	beq.n	8001e3a <motor_config_assembler+0x3e>
 8001e22:	e01e      	b.n	8001e62 <motor_config_assembler+0x66>
	{
	case 14:
		mc->max_irun_scaler = 8;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2208      	movs	r2, #8
 8001e28:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001e30:	605a      	str	r2, [r3, #4]
		mc->init_irun = 4;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	725a      	strb	r2, [r3, #9]
		break;
 8001e38:	e013      	b.n	8001e62 <motor_config_assembler+0x66>
	case 17:
		mc->max_irun_scaler = 12;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <motor_config_assembler+0x7c>)
 8001e44:	605a      	str	r2, [r3, #4]
		mc->init_irun = 8;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	725a      	strb	r2, [r3, #9]
		break;
 8001e4c:	e009      	b.n	8001e62 <motor_config_assembler+0x66>
	case 23:
		mc->max_irun_scaler = 31;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	221f      	movs	r2, #31
 8001e52:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <motor_config_assembler+0x80>)
 8001e58:	605a      	str	r2, [r3, #4]
		mc->init_irun = 18;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2212      	movs	r2, #18
 8001e5e:	725a      	strb	r2, [r3, #9]
		break;
 8001e60:	bf00      	nop
	}
	mc->direction = jc->direction;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	729a      	strb	r2, [r3, #10]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	4079999a 	.word	0x4079999a
 8001e7c:	41233333 	.word	0x41233333

08001e80 <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}
	else if (JOINT_N == 5)
	{
		jconf->motor_gear_ratio = 19.203208;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <joint_config_assembler+0x8c>)
 8001e8e:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 2.5;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <joint_config_assembler+0x90>)
 8001e94:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e9c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f14 <joint_config_assembler+0x94>
 8001ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb2:	ee17 2a90 	vmov	r2, s15
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	605a      	str	r2, [r3, #4]
		jconf->direction = 1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3304      	adds	r3, #4
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	809a      	strh	r2, [r3, #4]

}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	4199a02c 	.word	0x4199a02c
 8001f10:	40200000 	.word	0x40200000
 8001f14:	47480000 	.word	0x47480000

08001f18 <joint_config_write>:




void joint_config_write(joint_config * jc, joint_config_address * jc_a)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8001f22:	2364      	movs	r3, #100	@ 0x64
 8001f24:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 8001f26:	f7ff fc55 	bl	80017d4 <at24_isConnected>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d025      	beq.n	8001f7c <joint_config_write+0x64>
	{
		at24_write(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b298      	uxth	r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 0118 	add.w	r1, r3, #24
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	f7ff fc5b 	bl	80017f8 <at24_write>
		os_delay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f008 fc22 	bl	800a78c <HAL_Delay>
		at24_write(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f103 011c 	add.w	r1, r3, #28
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2204      	movs	r2, #4
 8001f58:	f7ff fc4e 	bl	80017f8 <at24_write>
		os_delay(1);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f008 fc15 	bl	800a78c <HAL_Delay>
		at24_write(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3304      	adds	r3, #4
 8001f66:	b298      	uxth	r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 0120 	add.w	r1, r3, #32
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2204      	movs	r2, #4
 8001f72:	f7ff fc41 	bl	80017f8 <at24_write>
		os_delay(1);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f008 fc08 	bl	800a78c <HAL_Delay>
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b094      	sub	sp, #80	@ 0x50
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8a:	f008 fb8e 	bl	800a6aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8e:	f000 f87b 	bl	8002088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f92:	f7ff fd6b 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f96:	f7ff fc93 	bl	80018c0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001f9a:	f7ff fcc3 	bl	8001924 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001f9e:	f7ff fe0b 	bl	8001bb8 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001fa2:	f008 fa1d 	bl	800a3e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001fa6:	f007 fadf 	bl	8009568 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001faa:	f007 fb1b 	bl	80095e4 <MX_SPI3_Init>
  MX_TIM8_Init();
 8001fae:	f007 fd3d 	bl	8009a2c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8001fb2:	4830      	ldr	r0, [pc, #192]	@ (8002074 <main+0xf0>)
 8001fb4:	f005 faa8 	bl	8007508 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8001fb8:	482e      	ldr	r0, [pc, #184]	@ (8002074 <main+0xf0>)
 8001fba:	f005 fa01 	bl	80073c0 <setup_cyphal>
  HAL_Delay(10);
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f008 fbe4 	bl	800a78c <HAL_Delay>
  joint_config_assembler(&jc, &jc_a);
 8001fc4:	492c      	ldr	r1, [pc, #176]	@ (8002078 <main+0xf4>)
 8001fc6:	482d      	ldr	r0, [pc, #180]	@ (800207c <main+0xf8>)
 8001fc8:	f7ff ff5a 	bl	8001e80 <joint_config_assembler>
  motor_config_assembler(&mc, &jc);
 8001fcc:	492b      	ldr	r1, [pc, #172]	@ (800207c <main+0xf8>)
 8001fce:	482c      	ldr	r0, [pc, #176]	@ (8002080 <main+0xfc>)
 8001fd0:	f7ff ff14 	bl	8001dfc <motor_config_assembler>
  //joint_config_read(&jc, &jc_a);
  HAL_Delay(10);
 8001fd4:	200a      	movs	r0, #10
 8001fd6:	f008 fbd9 	bl	800a78c <HAL_Delay>
  tmc5160_init(&mc);
 8001fda:	4829      	ldr	r0, [pc, #164]	@ (8002080 <main+0xfc>)
 8001fdc:	f008 f84c 	bl	800a078 <tmc5160_init>
  //js_init();
  HAL_Delay(10);
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f008 fbd3 	bl	800a78c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	643b      	str	r3, [r7, #64]	@ 0x40


  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8001fea:	f008 fbc3 	bl	800a774 <HAL_GetTick>
 8001fee:	64f8      	str	r0, [r7, #76]	@ 0x4c
  uint32_t last_js = HAL_GetTick();
 8001ff0:	f008 fbc0 	bl	800a774 <HAL_GetTick>
 8001ff4:	64b8      	str	r0, [r7, #72]	@ 0x48
  uint32_t last_AR = HAL_GetTick();
 8001ff6:	f008 fbbd 	bl	800a774 <HAL_GetTick>
 8001ffa:	6478      	str	r0, [r7, #68]	@ 0x44

  vec_4ax linear = {0};
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  //rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
  //IMU_setup();

  while (1)
  {
      uint32_t now = HAL_GetTick();
 8002024:	f008 fba6 	bl	800a774 <HAL_GetTick>
 8002028:	63f8      	str	r0, [r7, #60]	@ 0x3c
      if ( (now - last_hbeat) >= 1000) {
 800202a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800202c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002034:	d303      	bcc.n	800203e <main+0xba>
          last_hbeat = now;
 8002036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002038:	64fb      	str	r3, [r7, #76]	@ 0x4c
          heartbeat();
 800203a:	f005 f991 	bl	8007360 <heartbeat>
      	  //imu_get_gyro(&gyro);
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      if ( (now - last_AR) >= 500) {
 800203e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002048:	d303      	bcc.n	8002052 <main+0xce>
    	  last_AR = now;
 800204a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800204c:	647b      	str	r3, [r7, #68]	@ 0x44
    	  alert_regulator();
 800204e:	f7ff fb83 	bl	8001758 <alert_regulator>
      }
      if ( (now - last_js) >= 100) {
 8002052:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b63      	cmp	r3, #99	@ 0x63
 800205a:	d908      	bls.n	800206e <main+0xea>
    	  last_js = now;
 800205c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800205e:	64bb      	str	r3, [r7, #72]	@ 0x48
    	  send_JS(&jc);
 8002060:	4806      	ldr	r0, [pc, #24]	@ (800207c <main+0xf8>)
 8002062:	f005 f93b 	bl	80072dc <send_JS>
    	  as50_readAngle(&enc_angle, 100);
 8002066:	2164      	movs	r1, #100	@ 0x64
 8002068:	4806      	ldr	r0, [pc, #24]	@ (8002084 <main+0x100>)
 800206a:	f7ff fb7d 	bl	8001768 <as50_readAngle>
      }
      cyphal_loop();
 800206e:	f005 fa3d 	bl	80074ec <cyphal_loop>
  {
 8002072:	e7d7      	b.n	8002024 <main+0xa0>
 8002074:	200002bc 	.word	0x200002bc
 8002078:	20000464 	.word	0x20000464
 800207c:	20000440 	.word	0x20000440
 8002080:	20000434 	.word	0x20000434
 8002084:	20000472 	.word	0x20000472

08002088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b094      	sub	sp, #80	@ 0x50
 800208c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208e:	f107 0318 	add.w	r3, r7, #24
 8002092:	2238      	movs	r2, #56	@ 0x38
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f012 fcc7 	bl	8014a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f00b fa58 	bl	800d560 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ba:	2302      	movs	r3, #2
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020be:	2303      	movs	r3, #3
 80020c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020c6:	2328      	movs	r3, #40	@ 0x28
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	4618      	mov	r0, r3
 80020dc:	f00b faf4 	bl	800d6c8 <HAL_RCC_OscConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80020e6:	f000 f81a 	bl	800211e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ea:	230f      	movs	r3, #15
 80020ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ee:	2303      	movs	r3, #3
 80020f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002100:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2104      	movs	r1, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f00b fdf0 	bl	800dcec <HAL_RCC_ClockConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002112:	f000 f804 	bl	800211e <Error_Handler>
  }
}
 8002116:	bf00      	nop
 8002118:	3750      	adds	r7, #80	@ 0x50
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002122:	b672      	cpsid	i
}
 8002124:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002126:	bf00      	nop
 8002128:	e7fd      	b.n	8002126 <Error_Handler+0x8>

0800212a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3308      	adds	r3, #8
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	330c      	adds	r3, #12
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
        }
    }
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	2203      	movs	r2, #3
 8002206:	4798      	blx	r3
    }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffd4 	bl	80021ec <_ZNSt14_Function_baseD1Ev>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_ZNSt8functionIFvvEED1Ev>:
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ffc7 	bl	80021ec <_ZNSt14_Function_baseD1Ev>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	4618      	mov	r0, r3
 800227a:	f005 fa63 	bl	8007744 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3310      	adds	r3, #16
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	f005 fa88 	bl	800779a <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	4a06      	ldr	r2, [pc, #24]	@ (80022bc <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	08018b0c 	.word	0x08018b0c

080022c0 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80022ca:	480d      	ldr	r0, [pc, #52]	@ (8002300 <_Z7alloc_fP14CanardInstancej+0x40>)
 80022cc:	f005 fa90 	bl	80077f0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80022dc:	2001      	movs	r0, #1
 80022de:	f011 fb07 	bl	80138f0 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <_Z7alloc_fP14CanardInstancej+0x40>)
 80022e4:	f005 fa95 	bl	8007812 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	6814      	ldr	r4, [r2, #0]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	47a0      	blx	r4
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}
 8002300:	200009bc 	.word	0x200009bc

08002304 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <_Z6free_fP14CanardInstancePv+0x40>)
 8002310:	f005 fa6e 	bl	80077f0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002314:	4603      	mov	r3, r0
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8002320:	2001      	movs	r0, #1
 8002322:	f011 fae5 	bl	80138f0 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8002326:	4807      	ldr	r0, [pc, #28]	@ (8002344 <_Z6free_fP14CanardInstancePv+0x40>)
 8002328:	f005 fa73 	bl	8007812 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 800232c:	4603      	mov	r3, r0
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	3204      	adds	r2, #4
 8002332:	6814      	ldr	r4, [r2, #0]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	47a0      	blx	r4
 800233c:	bf00      	nop
}
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	200009bc 	.word	0x200009bc

08002348 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8002356:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	330c      	adds	r3, #12
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f010 ffb0 	bl	80132d8 <canardTxInit>
        utilities(utilities)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08018cd0 	.word	0x08018cd0

0800238c <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	7afa      	ldrb	r2, [r7, #11]
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fa4b 	bl	800784a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2248      	movs	r2, #72	@ 0x48
 80023d8:	2140      	movs	r1, #64	@ 0x40
 80023da:	f7ff ffb5 	bl	8002348 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08018cac 	.word	0x08018cac

080023f8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff42 	bl	8002294 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8002410:	4a03      	ldr	r2, [pc, #12]	@ (8002420 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	08018b90 	.word	0x08018b90

08002424 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	ed87 0a01 	vstr	s0, [r7, #4]
 800242e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002432:	eef0 7ae7 	vabs.f32	s15, s15
 8002436:	eeb0 0a67 	vmov.f32	s0, s15
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	ed87 0a01 	vstr	s0, [r7, #4]
 800244e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002452:	eef0 7ae7 	vabs.f32	s15, s15
 8002456:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002488 <_ZSt8isfinitef+0x44>
 800245a:	eef4 7a47 	vcmp.f32	s15, s14
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	bf8c      	ite	hi
 8002464:	2301      	movhi	r3, #1
 8002466:	2300      	movls	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f083 0301 	eor.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	7f7fffff 	.word	0x7f7fffff

0800248c <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d201      	bcs.n	80024a2 <nunavutChooseMin+0x16>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	e000      	b.n	80024a4 <nunavutChooseMin+0x18>
 80024a2:	683b      	ldr	r3, [r7, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	f7ff ffe1 	bl	800248c <nunavutChooseMin>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80024d2:	6939      	ldr	r1, [r7, #16]
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffd9 	bl	800248c <nunavutChooseMin>
 80024da:	4603      	mov	r3, r0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b092      	sub	sp, #72	@ 0x48
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 80024f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d145      	bne.n	8002588 <nunavutCopyBits+0xa4>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	2b00      	cmp	r3, #0
 8002504:	d140      	bne.n	8002588 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 800250c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4413      	add	r3, r2
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4413      	add	r3, r2
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8002520:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002522:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002524:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002526:	f012 fa66 	bl	80149f6 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8002536:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 808a 	beq.w	8002654 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8002540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002544:	4413      	add	r3, r2
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800254a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254c:	4413      	add	r3, r2
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8002550:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002554:	2201      	movs	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8002562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800256a:	43db      	mvns	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4013      	ands	r3, r2
 8002570:	b2da      	uxtb	r2, r3
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	7819      	ldrb	r1, [r3, #0]
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800257a:	400b      	ands	r3, r1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002584:	701a      	strb	r2, [r3, #0]
        }
    }
 8002586:	e065      	b.n	8002654 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002592:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8002598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 80025a0:	e053      	b.n	800264a <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80025a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80025ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80025b6:	7dfa      	ldrb	r2, [r7, #23]
 80025b8:	7dbb      	ldrb	r3, [r7, #22]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d901      	bls.n	80025c2 <nunavutCopyBits+0xde>
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	e000      	b.n	80025c4 <nunavutCopyBits+0xe0>
 80025c2:	7dbb      	ldrb	r3, [r7, #22]
 80025c4:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80025c6:	7d7b      	ldrb	r3, [r7, #21]
 80025c8:	f1c3 0008 	rsb	r0, r3, #8
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7ff ff5a 	bl	800248c <nunavutChooseMin>
 80025d8:	4603      	mov	r3, r0
 80025da:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80025dc:	7d3b      	ldrb	r3, [r7, #20]
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	7dbb      	ldrb	r3, [r7, #22]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80025ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	6a3a      	ldr	r2, [r7, #32]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	fa42 f303 	asr.w	r3, r2, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	7dbb      	ldrb	r3, [r7, #22]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 800260c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	43db      	mvns	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	4013      	ands	r3, r2
 800261e:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8002620:	7cba      	ldrb	r2, [r7, #18]
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	4013      	ands	r3, r2
 8002626:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	7c79      	ldrb	r1, [r7, #17]
 8002632:	7c3a      	ldrb	r2, [r7, #16]
 8002634:	430a      	orrs	r2, r1
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
            src_off += size;
 800263a:	7d3b      	ldrb	r3, [r7, #20]
 800263c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800263e:	4413      	add	r3, r2
 8002640:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 8002642:	7d3b      	ldrb	r3, [r7, #20]
 8002644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002646:	4413      	add	r3, r2
 8002648:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800264e:	429a      	cmp	r2, r3
 8002650:	d8a7      	bhi.n	80025a2 <nunavutCopyBits+0xbe>
        }

    }
}
 8002652:	e000      	b.n	8002656 <nunavutCopyBits+0x172>
    }
 8002654:	bf00      	nop
}
 8002656:	bf00      	nop
 8002658:	3748      	adds	r7, #72	@ 0x48
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b088      	sub	sp, #32
 8002662:	af02      	add	r7, sp, #8
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff1d 	bl	80024b0 <nunavutSaturateBufferFragmentBitLength>
 8002676:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08db      	lsrs	r3, r3, #3
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	18d0      	adds	r0, r2, r3
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	3307      	adds	r3, #7
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	461a      	mov	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	f012 f9cb 	bl	8014a2a <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	2100      	movs	r1, #0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff ff20 	bl	80024e4 <nunavutCopyBits>
}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	00da      	lsls	r2, r3, #3
 80026bc:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	440b      	add	r3, r1
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d202      	bcs.n	80026ce <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80026c8:	f06f 0302 	mvn.w	r3, #2
 80026cc:	e010      	b.n	80026f0 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80026ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80026d2:	2140      	movs	r1, #64	@ 0x40
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fed9 	bl	800248c <nunavutChooseMin>
 80026da:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fefb 	bl	80024e4 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	2110      	movs	r1, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff febe 	bl	800248c <nunavutChooseMin>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	68b8      	ldr	r0, [r7, #8]
 8002718:	f7ff feca 	bl	80024b0 <nunavutSaturateBufferFragmentBitLength>
 800271c:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002722:	f107 0012 	add.w	r0, r7, #18
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	2100      	movs	r1, #0
 8002730:	f7ff fed8 	bl	80024e4 <nunavutCopyBits>
    return val;
 8002734:	8a7b      	ldrh	r3, [r7, #18]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b088      	sub	sp, #32
 8002742:	af02      	add	r7, sp, #8
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2120      	movs	r1, #32
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fe9b 	bl	800248c <nunavutChooseMin>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f7ff fea7 	bl	80024b0 <nunavutSaturateBufferFragmentBitLength>
 8002762:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002768:	f107 0010 	add.w	r0, r7, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	2100      	movs	r1, #0
 8002776:	f7ff feb5 	bl	80024e4 <nunavutCopyBits>
    return val;
 800277a:	693b      	ldr	r3, [r7, #16]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8002784:	b480      	push	{r7}
 8002786:	b08b      	sub	sp, #44	@ 0x2c
 8002788:	af00      	add	r7, sp, #0
 800278a:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 800278e:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <nunavutFloat16Pack+0xb8>)
 8002790:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8002792:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8002796:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8002798:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 800279c:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 800279e:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 80027a2:	613b      	str	r3, [r7, #16]
    in.real = value;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027ae:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4053      	eors	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (in.bits >= f32inf.bits)
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d313      	bcc.n	80027ec <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 80027ce:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 80027d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80027d4:	e025      	b.n	8002822 <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d902      	bls.n	80027e4 <nunavutFloat16Pack+0x60>
 80027de:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80027e2:	e001      	b.n	80027e8 <nunavutFloat16Pack+0x64>
 80027e4:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 80027e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80027ea:	e01a      	b.n	8002822 <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027f2:	f023 030f 	bic.w	r3, r3, #15
 80027f6:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 80027f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80027fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800280e:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d901      	bls.n	800281c <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0b5b      	lsrs	r3, r3, #13
 8002820:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b29a      	uxth	r2, r3
 8002828:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800282a:	4313      	orrs	r3, r2
 800282c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    return out;
 800282e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8002830:	4618      	mov	r0, r3
 8002832:	372c      	adds	r7, #44	@ 0x2c
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	fffff000 	.word	0xfffff000

08002840 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 800284a:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 800284e:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8002850:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8002854:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	035a      	lsls	r2, r3, #13
 800285a:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <nunavutFloat16Unpack+0x6c>)
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8002860:	ed97 7a03 	vldr	s14, [r7, #12]
 8002864:	edd7 7a05 	vldr	s15, [r7, #20]
 8002868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8002870:	ed97 7a03 	vldr	s14, [r7, #12]
 8002874:	edd7 7a04 	vldr	s15, [r7, #16]
 8002878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002880:	db03      	blt.n	800288a <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8002888:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	ee07 3a90 	vmov	s15, r3
}
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	0fffe000 	.word	0x0fffe000

080028b0 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 80028bc:	2310      	movs	r3, #16
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff ff18 	bl	80026f8 <nunavutGetU16>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ffb8 	bl	8002840 <nunavutFloat16Unpack>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
}
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 80028ea:	2320      	movs	r3, #32
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff ff24 	bl	800273e <nunavutGetU32>
 80028f6:	4603      	mov	r3, r0
 80028f8:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	ee07 3a90 	vmov	s15, r3
}
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b08c      	sub	sp, #48	@ 0x30
 800290e:	af04      	add	r7, sp, #16
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <uavcan_node_Health_1_0_serialize_+0x1e>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002928:	f06f 0301 	mvn.w	r3, #1
 800292c:	e048      	b.n	80029c0 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	2b07      	cmp	r3, #7
 800293a:	d802      	bhi.n	8002942 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800293c:	f06f 0302 	mvn.w	r3, #2
 8002940:	e03e      	b.n	80029c0 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 800294c:	7efb      	ldrb	r3, [r7, #27]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d901      	bls.n	8002956 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002952:	2303      	movs	r3, #3
 8002954:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	7efa      	ldrb	r2, [r7, #27]
 8002960:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3302      	adds	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	2b00      	cmp	r3, #0
 8002970:	d021      	beq.n	80029b6 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f1c3 0308 	rsb	r3, r3, #8
 8002980:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9cd 2300 	strd	r2, r3, [sp]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	68b8      	ldr	r0, [r7, #8]
 8002998:	f7ff fe88 	bl	80026ac <nunavutSetUxx>
 800299c:	4603      	mov	r3, r0
 800299e:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80029a0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da02      	bge.n	80029ae <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 80029a8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80029ac:	e008      	b.n	80029c0 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <uavcan_node_Health_1_0_deserialize_+0x26>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <uavcan_node_Health_1_0_deserialize_+0x26>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <uavcan_node_Health_1_0_deserialize_+0x2c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80029ee:	f06f 0301 	mvn.w	r3, #1
 80029f2:	e030      	b.n	8002a56 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80029fa:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <uavcan_node_Health_1_0_deserialize_+0x98>)
 80029fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3302      	adds	r3, #2
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d30a      	bcc.n	8002a2e <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	08db      	lsrs	r3, r3, #3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e002      	b.n	8002a34 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3302      	adds	r3, #2
 8002a38:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3307      	adds	r3, #7
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002a44:	69b9      	ldr	r1, [r7, #24]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff fd20 	bl	800248c <nunavutChooseMin>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	08da      	lsrs	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08018a58 	.word	0x08018a58

08002a64 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	@ 0x30
 8002a68:	af04      	add	r7, sp, #16
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a82:	f06f 0301 	mvn.w	r3, #1
 8002a86:	e048      	b.n	8002b1a <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	2b07      	cmp	r3, #7
 8002a94:	d802      	bhi.n	8002a9c <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a96:	f06f 0302 	mvn.w	r3, #2
 8002a9a:	e03e      	b.n	8002b1a <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002aa6:	7efb      	ldrb	r3, [r7, #27]
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d901      	bls.n	8002ab0 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002aac:	2307      	movs	r3, #7
 8002aae:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08db      	lsrs	r3, r3, #3
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	7efa      	ldrb	r2, [r7, #27]
 8002aba:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3303      	adds	r3, #3
 8002ac0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d021      	beq.n	8002b10 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f1c3 0308 	rsb	r3, r3, #8
 8002ada:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9cd 2300 	strd	r2, r3, [sp]
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	68b8      	ldr	r0, [r7, #8]
 8002af2:	f7ff fddb 	bl	80026ac <nunavutSetUxx>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002afa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da02      	bge.n	8002b08 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002b02:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002b06:	e008      	b.n	8002b1a <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d006      	beq.n	8002b4a <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b4a:	f06f 0301 	mvn.w	r3, #1
 8002b4e:	e030      	b.n	8002bb2 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002b58:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d30a      	bcc.n	8002b8a <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	08db      	lsrs	r3, r3, #3
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e002      	b.n	8002b90 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3303      	adds	r3, #3
 8002b94:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3307      	adds	r3, #7
 8002b9a:	f023 0307 	bic.w	r3, r3, #7
 8002b9e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002ba0:	69b9      	ldr	r1, [r7, #24]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff fc72 	bl	800248c <nunavutChooseMin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	08018a58 	.word	0x08018a58

08002bc0 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	@ 0x38
 8002bc4:	af04      	add	r7, sp, #16
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002bde:	f06f 0301 	mvn.w	r3, #1
 8002be2:	e0cf      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	2b37      	cmp	r3, #55	@ 0x37
 8002bf0:	d802      	bhi.n	8002bf8 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002bf2:	f06f 0302 	mvn.w	r3, #2
 8002bf6:	e0c5      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4413      	add	r3, r2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	3320      	adds	r3, #32
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d021      	beq.n	8002c5e <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f1c3 0308 	rsb	r3, r3, #8
 8002c28:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9cd 2300 	strd	r2, r3, [sp]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff fd34 	bl	80026ac <nunavutSetUxx>
 8002c44:	4603      	mov	r3, r0
 8002c46:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002c48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da02      	bge.n	8002c56 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002c50:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002c54:	e096      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5a:	4413      	add	r3, r2
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002c5e:	2301      	movs	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f107 0214 	add.w	r2, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7ff fe49 	bl	800290a <uavcan_node_Health_1_0_serialize_>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002c7c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da02      	bge.n	8002c8a <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002c84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002c88:	e07c      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c90:	4413      	add	r3, r2
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d021      	beq.n	8002ce2 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f1c3 0308 	rsb	r3, r3, #8
 8002cac:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002cae:	7f3b      	ldrb	r3, [r7, #28]
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9cd 2300 	strd	r2, r3, [sp]
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	f7ff fcf2 	bl	80026ac <nunavutSetUxx>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002ccc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da02      	bge.n	8002cda <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002cd4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002cd8:	e054      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002cda:	7f3b      	ldrb	r3, [r7, #28]
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	4413      	add	r3, r2
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f107 0210 	add.w	r2, r7, #16
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7ff feb4 	bl	8002a64 <uavcan_node_Mode_1_0_serialize_>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002d00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da02      	bge.n	8002d0e <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002d08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002d0c:	e03a      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	4413      	add	r3, r2
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	4413      	add	r3, r2
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	7992      	ldrb	r2, [r2, #6]
 8002d24:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	3308      	adds	r3, #8
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d021      	beq.n	8002d7a <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f1c3 0308 	rsb	r3, r3, #8
 8002d44:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002d46:	7e7b      	ldrb	r3, [r7, #25]
 8002d48:	9302      	str	r3, [sp, #8]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9cd 2300 	strd	r2, r3, [sp]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68b8      	ldr	r0, [r7, #8]
 8002d5c:	f7ff fca6 	bl	80026ac <nunavutSetUxx>
 8002d60:	4603      	mov	r3, r0
 8002d62:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002d64:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da02      	bge.n	8002d72 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002d6c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002d70:	e008      	b.n	8002d84 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002d72:	7e7b      	ldrb	r3, [r7, #25]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d76:	4413      	add	r3, r2
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3728      	adds	r7, #40	@ 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	@ 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002db2:	f06f 0301 	mvn.w	r3, #1
 8002db6:	e089      	b.n	8002ecc <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002dbe:	4b45      	ldr	r3, [pc, #276]	@ (8002ed4 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002dc0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd8:	68b8      	ldr	r0, [r7, #8]
 8002dda:	f7ff fcb0 	bl	800273e <nunavutGetU32>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3320      	adds	r3, #32
 8002de8:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3307      	adds	r3, #7
 8002dee:	f023 0307 	bic.w	r3, r3, #7
 8002df2:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08db      	lsrs	r3, r3, #3
 8002df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fb46 	bl	800248c <nunavutChooseMin>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	4413      	add	r3, r2
 8002e14:	f107 0214 	add.w	r2, r7, #20
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7ff fdd5 	bl	80029c8 <uavcan_node_Health_1_0_deserialize_>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da02      	bge.n	8002e30 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002e2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e2e:	e04d      	b.n	8002ecc <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08db      	lsrs	r3, r3, #3
 8002e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb1e 	bl	800248c <nunavutChooseMin>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4413      	add	r3, r2
 8002e64:	f107 0210 	add.w	r2, r7, #16
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7ff fe5b 	bl	8002b24 <uavcan_node_Mode_1_0_deserialize_>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002e72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da02      	bge.n	8002e80 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002e7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e7e:	e025      	b.n	8002ecc <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d307      	bcc.n	8002ea4 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	719a      	strb	r2, [r3, #6]
 8002ea2:	e002      	b.n	8002eaa <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3308      	adds	r3, #8
 8002eae:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3307      	adds	r3, #7
 8002eb4:	f023 0307 	bic.w	r3, r3, #7
 8002eb8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002eba:	6a39      	ldr	r1, [r7, #32]
 8002ebc:	69f8      	ldr	r0, [r7, #28]
 8002ebe:	f7ff fae5 	bl	800248c <nunavutChooseMin>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3728      	adds	r7, #40	@ 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	08018a58 	.word	0x08018a58

08002ed8 <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	@ 0x30
 8002edc:	af04      	add	r7, sp, #16
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ef6:	f06f 0301 	mvn.w	r3, #1
 8002efa:	e041      	b.n	8002f80 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	2b1f      	cmp	r3, #31
 8002f08:	d802      	bhi.n	8002f10 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f0a:	f06f 0302 	mvn.w	r3, #2
 8002f0e:	e037      	b.n	8002f80 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3320      	adds	r3, #32
 8002f26:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d021      	beq.n	8002f76 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f1c3 0308 	rsb	r3, r3, #8
 8002f40:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	69b9      	ldr	r1, [r7, #24]
 8002f56:	68b8      	ldr	r0, [r7, #8]
 8002f58:	f7ff fba8 	bl	80026ac <nunavutSetUxx>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002f60:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da02      	bge.n	8002f6e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002f68:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f6c:	e008      	b.n	8002f80 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002fae:	f06f 0301 	mvn.w	r3, #1
 8002fb2:	e027      	b.n	8003004 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002fbc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	69f9      	ldr	r1, [r7, #28]
 8002fd2:	68b8      	ldr	r0, [r7, #8]
 8002fd4:	f7ff fc83 	bl	80028de <nunavutGetF32>
 8002fd8:	eef0 7a40 	vmov.f32	s15, s0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3320      	adds	r3, #32
 8002fe6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3307      	adds	r3, #7
 8002fec:	f023 0307 	bic.w	r3, r3, #7
 8002ff0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f7ff fa49 	bl	800248c <nunavutChooseMin>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	08018a58 	.word	0x08018a58

08003010 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	@ 0x30
 8003014:	af04      	add	r7, sp, #16
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800302e:	f06f 0301 	mvn.w	r3, #1
 8003032:	e041      	b.n	80030b8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	2b1f      	cmp	r3, #31
 8003040:	d802      	bhi.n	8003048 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003042:	f06f 0302 	mvn.w	r3, #2
 8003046:	e037      	b.n	80030b8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08db      	lsrs	r3, r3, #3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	4413      	add	r3, r2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3320      	adds	r3, #32
 800305e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	2b00      	cmp	r3, #0
 8003068:	d021      	beq.n	80030ae <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f1c3 0308 	rsb	r3, r3, #8
 8003078:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9cd 2300 	strd	r2, r3, [sp]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	68b8      	ldr	r0, [r7, #8]
 8003090:	f7ff fb0c 	bl	80026ac <nunavutSetUxx>
 8003094:	4603      	mov	r3, r0
 8003096:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003098:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da02      	bge.n	80030a6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 80030a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030a4:	e008      	b.n	80030b8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030e6:	f06f 0301 	mvn.w	r3, #1
 80030ea:	e027      	b.n	800313c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 80030f4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	69f9      	ldr	r1, [r7, #28]
 800310a:	68b8      	ldr	r0, [r7, #8]
 800310c:	f7ff fbe7 	bl	80028de <nunavutGetF32>
 8003110:	eef0 7a40 	vmov.f32	s15, s0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3320      	adds	r3, #32
 800311e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3307      	adds	r3, #7
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	6978      	ldr	r0, [r7, #20]
 800312e:	f7ff f9ad 	bl	800248c <nunavutChooseMin>
 8003132:	4603      	mov	r3, r0
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	08018a58 	.word	0x08018a58

08003148 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	@ 0x30
 800314c:	af04      	add	r7, sp, #16
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003166:	f06f 0301 	mvn.w	r3, #1
 800316a:	e041      	b.n	80031f0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	2b1f      	cmp	r3, #31
 8003178:	d802      	bhi.n	8003180 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800317a:	f06f 0302 	mvn.w	r3, #2
 800317e:	e037      	b.n	80031f0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4413      	add	r3, r2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3320      	adds	r3, #32
 8003196:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d021      	beq.n	80031e6 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f1c3 0308 	rsb	r3, r3, #8
 80031b0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	9302      	str	r3, [sp, #8]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9cd 2300 	strd	r2, r3, [sp]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	68b8      	ldr	r0, [r7, #8]
 80031c8:	f7ff fa70 	bl	80026ac <nunavutSetUxx>
 80031cc:	4603      	mov	r3, r0
 80031ce:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80031d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da02      	bge.n	80031de <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 80031d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031dc:	e008      	b.n	80031f0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d006      	beq.n	800321e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800321e:	f06f 0301 	mvn.w	r3, #1
 8003222:	e027      	b.n	8003274 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800322a:	4b14      	ldr	r3, [pc, #80]	@ (800327c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 800322c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	69f9      	ldr	r1, [r7, #28]
 8003242:	68b8      	ldr	r0, [r7, #8]
 8003244:	f7ff fb4b 	bl	80028de <nunavutGetF32>
 8003248:	eef0 7a40 	vmov.f32	s15, s0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3320      	adds	r3, #32
 8003256:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3307      	adds	r3, #7
 800325c:	f023 0307 	bic.w	r3, r3, #7
 8003260:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	6978      	ldr	r0, [r7, #20]
 8003266:	f7ff f911 	bl	800248c <nunavutChooseMin>
 800326a:	4603      	mov	r3, r0
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	08018a58 	.word	0x08018a58

08003280 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b090      	sub	sp, #64	@ 0x40
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800329e:	f06f 0301 	mvn.w	r3, #1
 80032a2:	e0e4      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	2b5f      	cmp	r3, #95	@ 0x5f
 80032b0:	d802      	bhi.n	80032b8 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80032b2:	f06f 0302 	mvn.w	r3, #2
 80032b6:	e0da      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 80032bc:	2304      	movs	r3, #4
 80032be:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80032c0:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4413      	add	r3, r2
 80032ca:	f107 0218 	add.w	r2, r7, #24
 80032ce:	4619      	mov	r1, r3
 80032d0:	f7ff fe02 	bl	8002ed8 <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 80032da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da02      	bge.n	80032e8 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 80032e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80032e6:	e0c2      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ee:	4413      	add	r3, r2
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d025      	beq.n	8003348 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f1c3 0308 	rsb	r3, r3, #8
 800330a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800330e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9cd 2300 	strd	r2, r3, [sp]
 8003320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003324:	68b8      	ldr	r0, [r7, #8]
 8003326:	f7ff f9c1 	bl	80026ac <nunavutSetUxx>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8003330:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003334:	2b00      	cmp	r3, #0
 8003336:	da02      	bge.n	800333e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 8003338:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800333c:	e097      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 800333e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003344:	4413      	add	r3, r2
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 8003348:	2304      	movs	r3, #4
 800334a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4413      	add	r3, r2
 8003358:	f107 0214 	add.w	r2, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	f7ff fef3 	bl	8003148 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8003362:	4603      	mov	r3, r0
 8003364:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8003368:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	da02      	bge.n	8003376 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8003370:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003374:	e07b      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337c:	4413      	add	r3, r2
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	2b00      	cmp	r3, #0
 8003388:	d025      	beq.n	80033d6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f1c3 0308 	rsb	r3, r3, #8
 8003398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800339c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033a0:	9302      	str	r3, [sp, #8]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9cd 2300 	strd	r2, r3, [sp]
 80033ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f7ff f97a 	bl	80026ac <nunavutSetUxx>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 80033be:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da02      	bge.n	80033cc <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 80033c6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80033ca:	e050      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 80033cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d2:	4413      	add	r3, r2
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 80033d6:	2304      	movs	r3, #4
 80033d8:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 80033e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e2:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4413      	add	r3, r2
 80033e8:	f107 0210 	add.w	r2, r7, #16
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7ff fe0f 	bl	8003010 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 80033f8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da02      	bge.n	8003406 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 8003400:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003404:	e033      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800340c:	4413      	add	r3, r2
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	2b00      	cmp	r3, #0
 8003418:	d024      	beq.n	8003464 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f1c3 0308 	rsb	r3, r3, #8
 8003428:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 800342c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9cd 2300 	strd	r2, r3, [sp]
 800343e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003442:	68b8      	ldr	r0, [r7, #8]
 8003444:	f7ff f932 	bl	80026ac <nunavutSetUxx>
 8003448:	4603      	mov	r3, r0
 800344a:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 800344c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003450:	2b00      	cmp	r3, #0
 8003452:	da02      	bge.n	800345a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8003454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003458:	e009      	b.n	800346e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 800345a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800345e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003460:	4413      	add	r3, r2
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3730      	adds	r7, #48	@ 0x30
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	@ 0x30
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800349e:	f06f 0301 	mvn.w	r3, #1
 80034a2:	e090      	b.n	80035c6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80034aa:	4b49      	ldr	r3, [pc, #292]	@ (80035d0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 80034ac:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t offset_bits = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe ffe1 	bl	800248c <nunavutChooseMin>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80034d2:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	4413      	add	r3, r2
 80034dc:	f107 021c 	add.w	r2, r7, #28
 80034e0:	4619      	mov	r1, r3
 80034e2:	f7ff fd51 	bl	8002f88 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (_err6_ < 0)
 80034ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da02      	bge.n	80034fa <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 80034f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80034f8:	e065      	b.n	80035c6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	4413      	add	r3, r2
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	3307      	adds	r3, #7
 8003508:	f023 0307 	bic.w	r3, r3, #7
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe ffb9 	bl	800248c <nunavutChooseMin>
 800351a:	4602      	mov	r2, r0
 800351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	f107 0218 	add.w	r2, r7, #24
 8003532:	4619      	mov	r1, r3
 8003534:	f7ff fe60 	bl	80031f8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err7_ < 0)
 800353e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003542:	2b00      	cmp	r3, #0
 8003544:	da02      	bge.n	800354c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8003546:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800354a:	e03c      	b.n	80035c6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4413      	add	r3, r2
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	3307      	adds	r3, #7
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe ff90 	bl	800248c <nunavutChooseMin>
 800356c:	4602      	mov	r2, r0
 800356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	4413      	add	r3, r2
 8003582:	f107 0214 	add.w	r2, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	f7ff fd9a 	bl	80030c0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err8_ < 0)
 8003592:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003596:	2b00      	cmp	r3, #0
 8003598:	da02      	bge.n	80035a0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 800359a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800359e:	e012      	b.n	80035c6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	4413      	add	r3, r2
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	3307      	adds	r3, #7
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80035b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035b8:	f7fe ff68 	bl	800248c <nunavutChooseMin>
 80035bc:	4603      	mov	r3, r0
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3730      	adds	r7, #48	@ 0x30
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	08018a58 	.word	0x08018a58

080035d4 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	@ 0x28
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <uavcan_register_Name_1_0_deserialize_+0x26>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d006      	beq.n	80035fa <uavcan_register_Name_1_0_deserialize_+0x26>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <uavcan_register_Name_1_0_deserialize_+0x2c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80035fa:	f06f 0301 	mvn.w	r3, #1
 80035fe:	e04a      	b.n	8003696 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003606:	4b26      	ldr	r3, [pc, #152]	@ (80036a0 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8003608:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3308      	adds	r3, #8
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	d309      	bcc.n	8003638 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003636:	e003      	b.n	8003640 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3308      	adds	r3, #8
 8003644:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800364c:	2bff      	cmp	r3, #255	@ 0xff
 800364e:	d902      	bls.n	8003656 <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003650:	f06f 0309 	mvn.w	r3, #9
 8003654:	e01f      	b.n	8003696 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	f7fe fff9 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4413      	add	r3, r2
 8003678:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3307      	adds	r3, #7
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7fe ff00 	bl	800248c <nunavutChooseMin>
 800368c:	4603      	mov	r3, r0
 800368e:	08da      	lsrs	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	08018a58 	.word	0x08018a58

080036a4 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	@ 0x30
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80036c2:	f06f 0301 	mvn.w	r3, #1
 80036c6:	e05e      	b.n	8003786 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80036d6:	d202      	bcs.n	80036de <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80036d8:	f06f 0302 	mvn.w	r3, #2
 80036dc:	e053      	b.n	8003786 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80036e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ec:	d902      	bls.n	80036f4 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80036ee:	f06f 0309 	mvn.w	r3, #9
 80036f2:	e048      	b.n	8003786 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	08db      	lsrs	r3, r3, #3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4413      	add	r3, r2
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003702:	8812      	ldrh	r2, [r2, #0]
 8003704:	b292      	uxth	r2, r2
 8003706:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	3310      	adds	r3, #16
 800370c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2100      	movs	r1, #0
 8003718:	9100      	str	r1, [sp, #0]
 800371a:	69f9      	ldr	r1, [r7, #28]
 800371c:	68b8      	ldr	r0, [r7, #8]
 800371e:	f7fe fee1 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	2b00      	cmp	r3, #0
 8003736:	d021      	beq.n	800377c <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f1c3 0308 	rsb	r3, r3, #8
 8003746:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9cd 2300 	strd	r2, r3, [sp]
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	69b9      	ldr	r1, [r7, #24]
 800375c:	68b8      	ldr	r0, [r7, #8]
 800375e:	f7fe ffa5 	bl	80026ac <nunavutSetUxx>
 8003762:	4603      	mov	r3, r0
 8003764:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003766:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da02      	bge.n	8003774 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 800376e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003772:	e008      	b.n	8003786 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	08da      	lsrs	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037b6:	f06f 0301 	mvn.w	r3, #1
 80037ba:	e041      	b.n	8003840 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80037c2:	4b21      	ldr	r3, [pc, #132]	@ (8003848 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 80037c4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80037d6:	2310      	movs	r3, #16
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	69f9      	ldr	r1, [r7, #28]
 80037dc:	68b8      	ldr	r0, [r7, #8]
 80037de:	f7fe ff8b 	bl	80026f8 <nunavutGetU16>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3310      	adds	r3, #16
 80037f0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80037f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037fc:	d902      	bls.n	8003804 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80037fe:	f06f 0309 	mvn.w	r3, #9
 8003802:	e01d      	b.n	8003840 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	f7fe ff23 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4413      	add	r3, r2
 8003822:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3307      	adds	r3, #7
 8003828:	f023 0307 	bic.w	r3, r3, #7
 800382c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	6978      	ldr	r0, [r7, #20]
 8003832:	f7fe fe2b 	bl	800248c <nunavutChooseMin>
 8003836:	4603      	mov	r3, r0
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	08018a58 	.word	0x08018a58

0800384c <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	@ 0x30
 8003850:	af04      	add	r7, sp, #16
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800386a:	f06f 0301 	mvn.w	r3, #1
 800386e:	e05f      	b.n	8003930 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	f640 0207 	movw	r2, #2055	@ 0x807
 800387e:	4293      	cmp	r3, r2
 8003880:	d802      	bhi.n	8003888 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003882:	f06f 0302 	mvn.w	r3, #2
 8003886:	e053      	b.n	8003930 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003892:	2b80      	cmp	r3, #128	@ 0x80
 8003894:	d902      	bls.n	800389c <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003896:	f06f 0309 	mvn.w	r3, #9
 800389a:	e049      	b.n	8003930 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	b2ca      	uxtb	r2, r1
 80038ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3308      	adds	r3, #8
 80038b2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038ba:	011a      	lsls	r2, r3, #4
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2100      	movs	r1, #0
 80038c0:	9100      	str	r1, [sp, #0]
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	68b8      	ldr	r0, [r7, #8]
 80038c6:	f7fe fe0d 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d021      	beq.n	8003926 <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f1c3 0308 	rsb	r3, r3, #8
 80038f0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	9302      	str	r3, [sp, #8]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f7fe fed0 	bl	80026ac <nunavutSetUxx>
 800390c:	4603      	mov	r3, r0
 800390e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003910:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da02      	bge.n	800391e <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003918:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800391c:	e008      	b.n	8003930 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	@ 0x28
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800395e:	f06f 0301 	mvn.w	r3, #1
 8003962:	e04a      	b.n	80039fa <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800396a:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 800396c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3308      	adds	r3, #8
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	429a      	cmp	r2, r3
 8003986:	d309      	bcc.n	800399c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	4413      	add	r3, r2
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800399a:	e003      	b.n	80039a4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3308      	adds	r3, #8
 80039a8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039b0:	2b80      	cmp	r3, #128	@ 0x80
 80039b2:	d902      	bls.n	80039ba <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039b4:	f06f 0309 	mvn.w	r3, #9
 80039b8:	e01f      	b.n	80039fa <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	f7fe fe47 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3307      	adds	r3, #7
 80039e2:	f023 0307 	bic.w	r3, r3, #7
 80039e6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7fe fd4e 	bl	800248c <nunavutChooseMin>
 80039f0:	4603      	mov	r3, r0
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	08018a58 	.word	0x08018a58

08003a08 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	@ 0x30
 8003a0c:	af04      	add	r7, sp, #16
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a26:	f06f 0301 	mvn.w	r3, #1
 8003a2a:	e05f      	b.n	8003aec <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f640 0207 	movw	r2, #2055	@ 0x807
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d802      	bhi.n	8003a44 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003a3e:	f06f 0302 	mvn.w	r3, #2
 8003a42:	e053      	b.n	8003aec <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d902      	bls.n	8003a58 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003a52:	f06f 0309 	mvn.w	r3, #9
 8003a56:	e049      	b.n	8003aec <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	b2ca      	uxtb	r2, r1
 8003a68:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	9100      	str	r1, [sp, #0]
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	68b8      	ldr	r0, [r7, #8]
 8003a82:	f7fe fd2f 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a8c:	015b      	lsls	r3, r3, #5
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d021      	beq.n	8003ae2 <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f1c3 0308 	rsb	r3, r3, #8
 8003aac:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	9302      	str	r3, [sp, #8]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9cd 2300 	strd	r2, r3, [sp]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	69b9      	ldr	r1, [r7, #24]
 8003ac2:	68b8      	ldr	r0, [r7, #8]
 8003ac4:	f7fe fdf2 	bl	80026ac <nunavutSetUxx>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003acc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da02      	bge.n	8003ada <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003ad4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ad8:	e008      	b.n	8003aec <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b1a:	f06f 0301 	mvn.w	r3, #1
 8003b1e:	e04a      	b.n	8003bb6 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003b26:	4b26      	ldr	r3, [pc, #152]	@ (8003bc0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 8003b28:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d309      	bcc.n	8003b58 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	08db      	lsrs	r3, r3, #3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003b56:	e003      	b.n	8003b60 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3308      	adds	r3, #8
 8003b64:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d902      	bls.n	8003b76 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b70:	f06f 0309 	mvn.w	r3, #9
 8003b74:	e01f      	b.n	8003bb6 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b7e:	015b      	lsls	r3, r3, #5
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	f7fe fd69 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b92:	015b      	lsls	r3, r3, #5
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f7fe fc70 	bl	800248c <nunavutChooseMin>
 8003bac:	4603      	mov	r3, r0
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	08018a58 	.word	0x08018a58

08003bc4 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	@ 0x30
 8003bc8:	af04      	add	r7, sp, #16
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003be2:	f06f 0301 	mvn.w	r3, #1
 8003be6:	e05f      	b.n	8003ca8 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f640 0207 	movw	r2, #2055	@ 0x807
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d802      	bhi.n	8003c00 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003bfa:	f06f 0302 	mvn.w	r3, #2
 8003bfe:	e053      	b.n	8003ca8 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d902      	bls.n	8003c14 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003c0e:	f06f 0309 	mvn.w	r3, #9
 8003c12:	e049      	b.n	8003ca8 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	08db      	lsrs	r3, r3, #3
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4413      	add	r3, r2
 8003c22:	b2ca      	uxtb	r2, r1
 8003c24:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c32:	019a      	lsls	r2, r3, #6
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2100      	movs	r1, #0
 8003c38:	9100      	str	r1, [sp, #0]
 8003c3a:	69f9      	ldr	r1, [r7, #28]
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f7fe fc51 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d021      	beq.n	8003c9e <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f1c3 0308 	rsb	r3, r3, #8
 8003c68:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	9302      	str	r3, [sp, #8]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9cd 2300 	strd	r2, r3, [sp]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	69b9      	ldr	r1, [r7, #24]
 8003c7e:	68b8      	ldr	r0, [r7, #8]
 8003c80:	f7fe fd14 	bl	80026ac <nunavutSetUxx>
 8003c84:	4603      	mov	r3, r0
 8003c86:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003c88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da02      	bge.n	8003c96 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003c90:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c94:	e008      	b.n	8003ca8 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d006      	beq.n	8003cd6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003cd6:	f06f 0301 	mvn.w	r3, #1
 8003cda:	e04a      	b.n	8003d72 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003ce2:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003ce4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d309      	bcc.n	8003d14 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003d12:	e003      	b.n	8003d1c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d902      	bls.n	8003d32 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d2c:	f06f 0309 	mvn.w	r3, #9
 8003d30:	e01f      	b.n	8003d72 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d3a:	019b      	lsls	r3, r3, #6
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	f7fe fc8b 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d4e:	019b      	lsls	r3, r3, #6
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3307      	adds	r3, #7
 8003d5a:	f023 0307 	bic.w	r3, r3, #7
 8003d5e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003d60:	69b9      	ldr	r1, [r7, #24]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7fe fb92 	bl	800248c <nunavutChooseMin>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	08da      	lsrs	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08018a58 	.word	0x08018a58

08003d80 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	@ 0x30
 8003d84:	af04      	add	r7, sp, #16
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d9e:	f06f 0301 	mvn.w	r3, #1
 8003da2:	e060      	b.n	8003e66 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003db2:	d202      	bcs.n	8003dba <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003db4:	f06f 0302 	mvn.w	r3, #2
 8003db8:	e055      	b.n	8003e66 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc8:	d902      	bls.n	8003dd0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003dca:	f06f 0309 	mvn.w	r3, #9
 8003dce:	e04a      	b.n	8003e66 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	08db      	lsrs	r3, r3, #3
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	b292      	uxth	r2, r2
 8003de2:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3310      	adds	r3, #16
 8003de8:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003df0:	00da      	lsls	r2, r3, #3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2100      	movs	r1, #0
 8003df6:	9100      	str	r1, [sp, #0]
 8003df8:	69f9      	ldr	r1, [r7, #28]
 8003dfa:	68b8      	ldr	r0, [r7, #8]
 8003dfc:	f7fe fb72 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d021      	beq.n	8003e5c <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f1c3 0308 	rsb	r3, r3, #8
 8003e26:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9cd 2300 	strd	r2, r3, [sp]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	68b8      	ldr	r0, [r7, #8]
 8003e3e:	f7fe fc35 	bl	80026ac <nunavutSetUxx>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003e46:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da02      	bge.n	8003e54 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003e4e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e52:	e008      	b.n	8003e66 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	08da      	lsrs	r2, r3, #3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	@ 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e96:	f06f 0301 	mvn.w	r3, #1
 8003e9a:	e043      	b.n	8003f24 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003ea2:	4b22      	ldr	r3, [pc, #136]	@ (8003f2c <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003ea4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	69f9      	ldr	r1, [r7, #28]
 8003ebc:	68b8      	ldr	r0, [r7, #8]
 8003ebe:	f7fe fc1b 	bl	80026f8 <nunavutGetU16>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3310      	adds	r3, #16
 8003ed0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003edc:	d902      	bls.n	8003ee4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ede:	f06f 0309 	mvn.w	r3, #9
 8003ee2:	e01f      	b.n	8003f24 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	f7fe fbb2 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4413      	add	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3307      	adds	r3, #7
 8003f0c:	f023 0307 	bic.w	r3, r3, #7
 8003f10:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7fe fab9 	bl	800248c <nunavutChooseMin>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	08018a58 	.word	0x08018a58

08003f30 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08c      	sub	sp, #48	@ 0x30
 8003f34:	af04      	add	r7, sp, #16
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003f4e:	f06f 0301 	mvn.w	r3, #1
 8003f52:	e05f      	b.n	8004014 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	f640 0207 	movw	r2, #2055	@ 0x807
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d802      	bhi.n	8003f6c <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003f66:	f06f 0302 	mvn.w	r3, #2
 8003f6a:	e053      	b.n	8004014 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d902      	bls.n	8003f80 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f7a:	f06f 0309 	mvn.w	r3, #9
 8003f7e:	e049      	b.n	8004014 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	08db      	lsrs	r3, r3, #3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b2ca      	uxtb	r2, r1
 8003f90:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3308      	adds	r3, #8
 8003f96:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f9e:	011a      	lsls	r2, r3, #4
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	9100      	str	r1, [sp, #0]
 8003fa6:	69f9      	ldr	r1, [r7, #28]
 8003fa8:	68b8      	ldr	r0, [r7, #8]
 8003faa:	f7fe fa9b 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d021      	beq.n	800400a <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f1c3 0308 	rsb	r3, r3, #8
 8003fd4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	9302      	str	r3, [sp, #8]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9cd 2300 	strd	r2, r3, [sp]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	69b9      	ldr	r1, [r7, #24]
 8003fea:	68b8      	ldr	r0, [r7, #8]
 8003fec:	f7fe fb5e 	bl	80026ac <nunavutSetUxx>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003ff4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	da02      	bge.n	8004002 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003ffc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004000:	e008      	b.n	8004014 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	08da      	lsrs	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	@ 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d006      	beq.n	8004042 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004042:	f06f 0301 	mvn.w	r3, #1
 8004046:	e04a      	b.n	80040de <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800404e:	4b26      	ldr	r3, [pc, #152]	@ (80040e8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 8004050:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3308      	adds	r3, #8
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d309      	bcc.n	8004080 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	4413      	add	r3, r2
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800407e:	e003      	b.n	8004088 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3308      	adds	r3, #8
 800408c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004094:	2b80      	cmp	r3, #128	@ 0x80
 8004096:	d902      	bls.n	800409e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004098:	f06f 0309 	mvn.w	r3, #9
 800409c:	e01f      	b.n	80040de <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	f7fe fad5 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	3307      	adds	r3, #7
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	f7fe f9dc 	bl	800248c <nunavutChooseMin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	08da      	lsrs	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08018a58 	.word	0x08018a58

080040ec <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08c      	sub	sp, #48	@ 0x30
 80040f0:	af04      	add	r7, sp, #16
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800410a:	f06f 0301 	mvn.w	r3, #1
 800410e:	e05f      	b.n	80041d0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	f640 0207 	movw	r2, #2055	@ 0x807
 800411e:	4293      	cmp	r3, r2
 8004120:	d802      	bhi.n	8004128 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004122:	f06f 0302 	mvn.w	r3, #2
 8004126:	e053      	b.n	80041d0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d902      	bls.n	800413c <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004136:	f06f 0309 	mvn.w	r3, #9
 800413a:	e049      	b.n	80041d0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	08db      	lsrs	r3, r3, #3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	b2ca      	uxtb	r2, r1
 800414c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3308      	adds	r3, #8
 8004152:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2100      	movs	r1, #0
 8004160:	9100      	str	r1, [sp, #0]
 8004162:	69f9      	ldr	r1, [r7, #28]
 8004164:	68b8      	ldr	r0, [r7, #8]
 8004166:	f7fe f9bd 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004170:	015b      	lsls	r3, r3, #5
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	2b00      	cmp	r3, #0
 8004180:	d021      	beq.n	80041c6 <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f1c3 0308 	rsb	r3, r3, #8
 8004190:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	e9cd 2300 	strd	r2, r3, [sp]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	69b9      	ldr	r1, [r7, #24]
 80041a6:	68b8      	ldr	r0, [r7, #8]
 80041a8:	f7fe fa80 	bl	80026ac <nunavutSetUxx>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80041b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da02      	bge.n	80041be <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80041b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80041bc:	e008      	b.n	80041d0 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	08da      	lsrs	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80041fe:	f06f 0301 	mvn.w	r3, #1
 8004202:	e04a      	b.n	800429a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800420a:	4b26      	ldr	r3, [pc, #152]	@ (80042a4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 800420c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3308      	adds	r3, #8
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	429a      	cmp	r2, r3
 8004226:	d309      	bcc.n	800423c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4413      	add	r3, r2
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800423a:	e003      	b.n	8004244 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	3308      	adds	r3, #8
 8004248:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004250:	2b40      	cmp	r3, #64	@ 0x40
 8004252:	d902      	bls.n	800425a <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004254:	f06f 0309 	mvn.w	r3, #9
 8004258:	e01f      	b.n	800429a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004262:	015b      	lsls	r3, r3, #5
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	f7fe f9f7 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004276:	015b      	lsls	r3, r3, #5
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3307      	adds	r3, #7
 8004282:	f023 0307 	bic.w	r3, r3, #7
 8004286:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f7fe f8fe 	bl	800248c <nunavutChooseMin>
 8004290:	4603      	mov	r3, r0
 8004292:	08da      	lsrs	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	08018a58 	.word	0x08018a58

080042a8 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08c      	sub	sp, #48	@ 0x30
 80042ac:	af04      	add	r7, sp, #16
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80042c6:	f06f 0301 	mvn.w	r3, #1
 80042ca:	e05f      	b.n	800438c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	f640 0207 	movw	r2, #2055	@ 0x807
 80042da:	4293      	cmp	r3, r2
 80042dc:	d802      	bhi.n	80042e4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80042de:	f06f 0302 	mvn.w	r3, #2
 80042e2:	e053      	b.n	800438c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d902      	bls.n	80042f8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042f2:	f06f 0309 	mvn.w	r3, #9
 80042f6:	e049      	b.n	800438c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	08db      	lsrs	r3, r3, #3
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4413      	add	r3, r2
 8004306:	b2ca      	uxtb	r2, r1
 8004308:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3308      	adds	r3, #8
 800430e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004316:	019a      	lsls	r2, r3, #6
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2100      	movs	r1, #0
 800431c:	9100      	str	r1, [sp, #0]
 800431e:	69f9      	ldr	r1, [r7, #28]
 8004320:	68b8      	ldr	r0, [r7, #8]
 8004322:	f7fe f8df 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800432c:	019b      	lsls	r3, r3, #6
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b00      	cmp	r3, #0
 800433c:	d021      	beq.n	8004382 <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f1c3 0308 	rsb	r3, r3, #8
 800434c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	9302      	str	r3, [sp, #8]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9cd 2300 	strd	r2, r3, [sp]
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f7fe f9a2 	bl	80026ac <nunavutSetUxx>
 8004368:	4603      	mov	r3, r0
 800436a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800436c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004370:	2b00      	cmp	r3, #0
 8004372:	da02      	bge.n	800437a <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004374:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004378:	e008      	b.n	800438c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	08da      	lsrs	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	@ 0x28
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043ba:	f06f 0301 	mvn.w	r3, #1
 80043be:	e04a      	b.n	8004456 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80043c6:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 80043c8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3308      	adds	r3, #8
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d309      	bcc.n	80043f8 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	08db      	lsrs	r3, r3, #3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4413      	add	r3, r2
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80043f6:	e003      	b.n	8004400 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3308      	adds	r3, #8
 8004404:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800440c:	2b20      	cmp	r3, #32
 800440e:	d902      	bls.n	8004416 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004410:	f06f 0309 	mvn.w	r3, #9
 8004414:	e01f      	b.n	8004456 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	f7fe f919 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004432:	019b      	lsls	r3, r3, #6
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4413      	add	r3, r2
 8004438:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3307      	adds	r3, #7
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7fe f820 	bl	800248c <nunavutChooseMin>
 800444c:	4603      	mov	r3, r0
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	08018a58 	.word	0x08018a58

08004464 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	@ 0x30
 8004468:	af04      	add	r7, sp, #16
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004482:	f06f 0301 	mvn.w	r3, #1
 8004486:	e060      	b.n	800454a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004496:	d202      	bcs.n	800449e <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004498:	f06f 0302 	mvn.w	r3, #2
 800449c:	e055      	b.n	800454a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ac:	d902      	bls.n	80044b4 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80044ae:	f06f 0309 	mvn.w	r3, #9
 80044b2:	e04a      	b.n	800454a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4413      	add	r3, r2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	b292      	uxth	r2, r2
 80044c6:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3310      	adds	r3, #16
 80044cc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80044d4:	00da      	lsls	r2, r3, #3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2100      	movs	r1, #0
 80044da:	9100      	str	r1, [sp, #0]
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f7fe f800 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d021      	beq.n	8004540 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f1c3 0308 	rsb	r3, r3, #8
 800450a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	9302      	str	r3, [sp, #8]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9cd 2300 	strd	r2, r3, [sp]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	68b8      	ldr	r0, [r7, #8]
 8004522:	f7fe f8c3 	bl	80026ac <nunavutSetUxx>
 8004526:	4603      	mov	r3, r0
 8004528:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800452a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da02      	bge.n	8004538 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004532:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004536:	e008      	b.n	800454a <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	08da      	lsrs	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	@ 0x28
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d006      	beq.n	800457a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800457a:	f06f 0301 	mvn.w	r3, #1
 800457e:	e043      	b.n	8004608 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004586:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8004588:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800459a:	2310      	movs	r3, #16
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	69f9      	ldr	r1, [r7, #28]
 80045a0:	68b8      	ldr	r0, [r7, #8]
 80045a2:	f7fe f8a9 	bl	80026f8 <nunavutGetU16>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3310      	adds	r3, #16
 80045b4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c0:	d902      	bls.n	80045c8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80045c2:	f06f 0309 	mvn.w	r3, #9
 80045c6:	e01f      	b.n	8004608 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	f7fe f840 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3307      	adds	r3, #7
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	6978      	ldr	r0, [r7, #20]
 80045fa:	f7fd ff47 	bl	800248c <nunavutChooseMin>
 80045fe:	4603      	mov	r3, r0
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	08018a58 	.word	0x08018a58

08004614 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	@ 0x38
 8004618:	af04      	add	r7, sp, #16
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004632:	f06f 0301 	mvn.w	r3, #1
 8004636:	e08b      	b.n	8004750 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	f640 0207 	movw	r2, #2055	@ 0x807
 8004646:	4293      	cmp	r3, r2
 8004648:	d802      	bhi.n	8004650 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800464a:	f06f 0302 	mvn.w	r3, #2
 800464e:	e07f      	b.n	8004750 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800465a:	2b80      	cmp	r3, #128	@ 0x80
 800465c:	d902      	bls.n	8004664 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800465e:	f06f 0309 	mvn.w	r3, #9
 8004662:	e075      	b.n	8004750 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	b2ca      	uxtb	r2, r1
 8004674:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	3308      	adds	r3, #8
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800467c:	2300      	movs	r3, #0
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	e034      	b.n	80046ec <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 800468e:	ed97 0a07 	vldr	s0, [r7, #28]
 8004692:	f7fd fed7 	bl	8002444 <_ZSt8isfinitef>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d015      	beq.n	80046c8 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 800469c:	edd7 7a07 	vldr	s15, [r7, #28]
 80046a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004758 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 80046a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d501      	bpl.n	80046b2 <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 80046ae:	4b2b      	ldr	r3, [pc, #172]	@ (800475c <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 80046b0:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 80046b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80046b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004760 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 80046ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	dd01      	ble.n	80046c8 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 80046c4:	4b27      	ldr	r3, [pc, #156]	@ (8004764 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 80046c6:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 80046c8:	ed97 0a07 	vldr	s0, [r7, #28]
 80046cc:	f7fe f85a 	bl	8002784 <nunavutFloat16Pack>
 80046d0:	4603      	mov	r3, r0
 80046d2:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4413      	add	r3, r2
 80046dc:	8aba      	ldrh	r2, [r7, #20]
 80046de:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	3310      	adds	r3, #16
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	3301      	adds	r3, #1
 80046ea:	623b      	str	r3, [r7, #32]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046f2:	6a3a      	ldr	r2, [r7, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3c4      	bcc.n	8004682 <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d021      	beq.n	8004746 <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f1c3 0308 	rsb	r3, r3, #8
 8004710:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	9302      	str	r3, [sp, #8]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9cd 2300 	strd	r2, r3, [sp]
 8004722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f7fd ffc0 	bl	80026ac <nunavutSetUxx>
 800472c:	4603      	mov	r3, r0
 800472e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004730:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004734:	2b00      	cmp	r3, #0
 8004736:	da02      	bge.n	800473e <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8004738:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800473c:	e008      	b.n	8004750 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004742:	4413      	add	r3, r2
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3728      	adds	r7, #40	@ 0x28
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	c77fe000 	.word	0xc77fe000
 800475c:	c77fe000 	.word	0xc77fe000
 8004760:	477fe000 	.word	0x477fe000
 8004764:	477fe000 	.word	0x477fe000

08004768 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800478e:	f06f 0301 	mvn.w	r3, #1
 8004792:	e054      	b.n	800483e <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800479a:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 800479c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3308      	adds	r3, #8
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d309      	bcc.n	80047cc <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80047ca:	e003      	b.n	80047d4 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    }
    offset_bits += 8U;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	3308      	adds	r3, #8
 80047d8:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d902      	bls.n	80047ea <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80047e4:	f06f 0309 	mvn.w	r3, #9
 80047e8:	e029      	b.n	800483e <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	e012      	b.n	8004816 <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	6979      	ldr	r1, [r7, #20]
 80047f4:	68b8      	ldr	r0, [r7, #8]
 80047f6:	f7fe f85b 	bl	80028b0 <nunavutGetF16>
 80047fa:	eef0 7a40 	vmov.f32	s15, s0
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3310      	adds	r3, #16
 800480e:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	3301      	adds	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d3e6      	bcc.n	80047f0 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3307      	adds	r3, #7
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800482c:	6939      	ldr	r1, [r7, #16]
 800482e:	69f8      	ldr	r0, [r7, #28]
 8004830:	f7fd fe2c 	bl	800248c <nunavutChooseMin>
 8004834:	4603      	mov	r3, r0
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	08018a58 	.word	0x08018a58

0800484c <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	@ 0x30
 8004850:	af04      	add	r7, sp, #16
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800486a:	f06f 0301 	mvn.w	r3, #1
 800486e:	e05f      	b.n	8004930 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	f640 0207 	movw	r2, #2055	@ 0x807
 800487e:	4293      	cmp	r3, r2
 8004880:	d802      	bhi.n	8004888 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004882:	f06f 0302 	mvn.w	r3, #2
 8004886:	e053      	b.n	8004930 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d902      	bls.n	800489c <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004896:	f06f 0309 	mvn.w	r3, #9
 800489a:	e049      	b.n	8004930 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	b2ca      	uxtb	r2, r1
 80048ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3308      	adds	r3, #8
 80048b2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2100      	movs	r1, #0
 80048c0:	9100      	str	r1, [sp, #0]
 80048c2:	69f9      	ldr	r1, [r7, #28]
 80048c4:	68b8      	ldr	r0, [r7, #8]
 80048c6:	f7fd fe0d 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80048d0:	015b      	lsls	r3, r3, #5
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d021      	beq.n	8004926 <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f1c3 0308 	rsb	r3, r3, #8
 80048f0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	e9cd 2300 	strd	r2, r3, [sp]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	69b9      	ldr	r1, [r7, #24]
 8004906:	68b8      	ldr	r0, [r7, #8]
 8004908:	f7fd fed0 	bl	80026ac <nunavutSetUxx>
 800490c:	4603      	mov	r3, r0
 800490e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004910:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da02      	bge.n	800491e <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004918:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800491c:	e008      	b.n	8004930 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	08da      	lsrs	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	@ 0x28
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d006      	beq.n	800495e <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800495e:	f06f 0301 	mvn.w	r3, #1
 8004962:	e04a      	b.n	80049fa <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800496a:	4b26      	ldr	r3, [pc, #152]	@ (8004a04 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 800496c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3308      	adds	r3, #8
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	429a      	cmp	r2, r3
 8004986:	d309      	bcc.n	800499c <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	08db      	lsrs	r3, r3, #3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4413      	add	r3, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800499a:	e003      	b.n	80049a4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3308      	adds	r3, #8
 80049a8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d902      	bls.n	80049ba <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80049b4:	f06f 0309 	mvn.w	r3, #9
 80049b8:	e01f      	b.n	80049fa <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80049c2:	015b      	lsls	r3, r3, #5
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	f7fd fe47 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80049d6:	015b      	lsls	r3, r3, #5
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4413      	add	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3307      	adds	r3, #7
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	6978      	ldr	r0, [r7, #20]
 80049ec:	f7fd fd4e 	bl	800248c <nunavutChooseMin>
 80049f0:	4603      	mov	r3, r0
 80049f2:	08da      	lsrs	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	08018a58 	.word	0x08018a58

08004a08 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08c      	sub	sp, #48	@ 0x30
 8004a0c:	af04      	add	r7, sp, #16
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a26:	f06f 0301 	mvn.w	r3, #1
 8004a2a:	e05f      	b.n	8004aec <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	f640 0207 	movw	r2, #2055	@ 0x807
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d802      	bhi.n	8004a44 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004a3e:	f06f 0302 	mvn.w	r3, #2
 8004a42:	e053      	b.n	8004aec <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d902      	bls.n	8004a58 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004a52:	f06f 0309 	mvn.w	r3, #9
 8004a56:	e049      	b.n	8004aec <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4413      	add	r3, r2
 8004a66:	b2ca      	uxtb	r2, r1
 8004a68:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004a76:	019a      	lsls	r2, r3, #6
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	9100      	str	r1, [sp, #0]
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	68b8      	ldr	r0, [r7, #8]
 8004a82:	f7fd fd2f 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d021      	beq.n	8004ae2 <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f1c3 0308 	rsb	r3, r3, #8
 8004aac:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9cd 2300 	strd	r2, r3, [sp]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	f7fd fdf2 	bl	80026ac <nunavutSetUxx>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004acc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	da02      	bge.n	8004ada <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004ad4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ad8:	e008      	b.n	8004aec <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	08da      	lsrs	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	@ 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004b1a:	f06f 0301 	mvn.w	r3, #1
 8004b1e:	e04a      	b.n	8004bb6 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004b26:	4b26      	ldr	r3, [pc, #152]	@ (8004bc0 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 8004b28:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d309      	bcc.n	8004b58 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	08db      	lsrs	r3, r3, #3
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004b56:	e003      	b.n	8004b60 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3308      	adds	r3, #8
 8004b64:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d902      	bls.n	8004b76 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004b70:	f06f 0309 	mvn.w	r3, #9
 8004b74:	e01f      	b.n	8004bb6 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004b7e:	019b      	lsls	r3, r3, #6
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	f7fd fd69 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004b92:	019b      	lsls	r3, r3, #6
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4413      	add	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	f023 0307 	bic.w	r3, r3, #7
 8004ba2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	6978      	ldr	r0, [r7, #20]
 8004ba8:	f7fd fc70 	bl	800248c <nunavutChooseMin>
 8004bac:	4603      	mov	r3, r0
 8004bae:	08da      	lsrs	r2, r3, #3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08018a58 	.word	0x08018a58

08004bc4 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004be2:	f06f 0301 	mvn.w	r3, #1
 8004be6:	e003      	b.n	8004bf0 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004c22:	f06f 0301 	mvn.w	r3, #1
 8004c26:	e008      	b.n	8004c3a <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004c2e:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8004c30:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	08018a58 	.word	0x08018a58

08004c4c <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	@ 0x30
 8004c50:	af04      	add	r7, sp, #16
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004c6a:	f06f 0301 	mvn.w	r3, #1
 8004c6e:	e060      	b.n	8004d32 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004c7e:	d202      	bcs.n	8004c86 <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004c80:	f06f 0302 	mvn.w	r3, #2
 8004c84:	e055      	b.n	8004d32 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c94:	d902      	bls.n	8004c9c <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004c96:	f06f 0309 	mvn.w	r3, #9
 8004c9a:	e04a      	b.n	8004d32 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	08db      	lsrs	r3, r3, #3
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004caa:	8812      	ldrh	r2, [r2, #0]
 8004cac:	b292      	uxth	r2, r2
 8004cae:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004cbc:	00da      	lsls	r2, r3, #3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	9100      	str	r1, [sp, #0]
 8004cc4:	69f9      	ldr	r1, [r7, #28]
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f7fd fc0c 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d021      	beq.n	8004d28 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f1c3 0308 	rsb	r3, r3, #8
 8004cf2:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	9302      	str	r3, [sp, #8]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9cd 2300 	strd	r2, r3, [sp]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	69b9      	ldr	r1, [r7, #24]
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f7fd fccf 	bl	80026ac <nunavutSetUxx>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004d12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da02      	bge.n	8004d20 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004d1a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004d1e:	e008      	b.n	8004d32 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	08da      	lsrs	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d62:	f06f 0301 	mvn.w	r3, #1
 8004d66:	e043      	b.n	8004df0 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004d6e:	4b22      	ldr	r3, [pc, #136]	@ (8004df8 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004d70:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004d82:	2310      	movs	r3, #16
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	69f9      	ldr	r1, [r7, #28]
 8004d88:	68b8      	ldr	r0, [r7, #8]
 8004d8a:	f7fd fcb5 	bl	80026f8 <nunavutGetU16>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	3310      	adds	r3, #16
 8004d9c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da8:	d902      	bls.n	8004db0 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004daa:	f06f 0309 	mvn.w	r3, #9
 8004dae:	e01f      	b.n	8004df0 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	f7fd fc4c 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3307      	adds	r3, #7
 8004dd8:	f023 0307 	bic.w	r3, r3, #7
 8004ddc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004dde:	69b9      	ldr	r1, [r7, #24]
 8004de0:	6978      	ldr	r0, [r7, #20]
 8004de2:	f7fd fb53 	bl	800248c <nunavutChooseMin>
 8004de6:	4603      	mov	r3, r0
 8004de8:	08da      	lsrs	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	08018a58 	.word	0x08018a58

08004dfc <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	@ 0x30
 8004e00:	af04      	add	r7, sp, #16
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004e1a:	f06f 0301 	mvn.w	r3, #1
 8004e1e:	e060      	b.n	8004ee2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004e2e:	d202      	bcs.n	8004e36 <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004e30:	f06f 0302 	mvn.w	r3, #2
 8004e34:	e055      	b.n	8004ee2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e44:	d902      	bls.n	8004e4c <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004e46:	f06f 0309 	mvn.w	r3, #9
 8004e4a:	e04a      	b.n	8004ee2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	08db      	lsrs	r3, r3, #3
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	4413      	add	r3, r2
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004e5a:	8812      	ldrh	r2, [r2, #0]
 8004e5c:	b292      	uxth	r2, r2
 8004e5e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	3310      	adds	r3, #16
 8004e64:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e6c:	00da      	lsls	r2, r3, #3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2100      	movs	r1, #0
 8004e72:	9100      	str	r1, [sp, #0]
 8004e74:	69f9      	ldr	r1, [r7, #28]
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	f7fd fb34 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d021      	beq.n	8004ed8 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f1c3 0308 	rsb	r3, r3, #8
 8004ea2:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	9302      	str	r3, [sp, #8]
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	69b9      	ldr	r1, [r7, #24]
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	f7fd fbf7 	bl	80026ac <nunavutSetUxx>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004ec2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da02      	bge.n	8004ed0 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004eca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ece:	e008      	b.n	8004ee2 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	08da      	lsrs	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	@ 0x28
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d006      	beq.n	8004f12 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004f12:	f06f 0301 	mvn.w	r3, #1
 8004f16:	e043      	b.n	8004fa0 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004f1e:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 8004f20:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004f32:	2310      	movs	r3, #16
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	69f9      	ldr	r1, [r7, #28]
 8004f38:	68b8      	ldr	r0, [r7, #8]
 8004f3a:	f7fd fbdd 	bl	80026f8 <nunavutGetU16>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f58:	d902      	bls.n	8004f60 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004f5a:	f06f 0309 	mvn.w	r3, #9
 8004f5e:	e01f      	b.n	8004fa0 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	f7fd fb74 	bl	800265e <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3307      	adds	r3, #7
 8004f88:	f023 0307 	bic.w	r3, r3, #7
 8004f8c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004f8e:	69b9      	ldr	r1, [r7, #24]
 8004f90:	6978      	ldr	r0, [r7, #20]
 8004f92:	f7fd fa7b 	bl	800248c <nunavutChooseMin>
 8004f96:	4603      	mov	r3, r0
 8004f98:	08da      	lsrs	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08018a58 	.word	0x08018a58

08004fac <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b09e      	sub	sp, #120	@ 0x78
 8004fb0:	af04      	add	r7, sp, #16
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <uavcan_register_Value_1_0_serialize_+0x1e>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <uavcan_register_Value_1_0_serialize_+0x1e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004fca:	f06f 0301 	mvn.w	r3, #1
 8004fce:	e248      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	663b      	str	r3, [r7, #96]	@ 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 8004fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	f640 0217 	movw	r2, #2071	@ 0x817
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d802      	bhi.n	8004fe8 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004fe2:	f06f 0302 	mvn.w	r3, #2
 8004fe6:	e23c      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	667b      	str	r3, [r7, #100]	@ 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8004fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f892 2208 	ldrb.w	r2, [r2, #520]	@ 0x208
 8004ffa:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffe:	3308      	adds	r3, #8
 8005000:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11b      	bne.n	8005044 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 800500c:	2300      	movs	r3, #0
 800500e:	64bb      	str	r3, [r7, #72]	@ 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8005010:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005012:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005014:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4413      	add	r3, r2
 800501a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800501e:	4619      	mov	r1, r3
 8005020:	f7ff fdd0 	bl	8004bc4 <uavcan_primitive_Empty_1_0_serialize_>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        if (_err0_ < 0)
 800502a:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 800502e:	2b00      	cmp	r3, #0
 8005030:	da02      	bge.n	8005038 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 8005032:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8005036:	e214      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8005038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800503e:	4413      	add	r3, r2
 8005040:	667b      	str	r3, [r7, #100]	@ 0x64
 8005042:	e1de      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800504a:	2b01      	cmp	r3, #1
 800504c:	d11c      	bne.n	8005088 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 800504e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8005054:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005058:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005062:	4619      	mov	r1, r3
 8005064:	f7ff fdf2 	bl	8004c4c <uavcan_primitive_String_1_0_serialize_>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (_err1_ < 0)
 800506e:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8005072:	2b00      	cmp	r3, #0
 8005074:	da02      	bge.n	800507c <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 8005076:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 800507a:	e1f2      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800507c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005082:	4413      	add	r3, r2
 8005084:	667b      	str	r3, [r7, #100]	@ 0x64
 8005086:	e1bc      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800508e:	2b02      	cmp	r3, #2
 8005090:	d11c      	bne.n	80050cc <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8005092:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005096:	643b      	str	r3, [r7, #64]	@ 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8005098:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 800509a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800509c:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7ff fea8 	bl	8004dfc <uavcan_primitive_Unstructured_1_0_serialize_>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (_err2_ < 0)
 80050b2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da02      	bge.n	80050c0 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 80050ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80050be:	e1d0      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80050c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050c6:	4413      	add	r3, r2
 80050c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ca:	e19a      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d11c      	bne.n	8005110 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 80050d6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 80050dc:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 80050de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050e0:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80050ea:	4619      	mov	r1, r3
 80050ec:	f7fe fada 	bl	80036a4 <uavcan_primitive_array_Bit_1_0_serialize_>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        if (_err3_ < 0)
 80050f6:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	da02      	bge.n	8005104 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 80050fe:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8005102:	e1ae      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8005104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800510a:	4413      	add	r3, r2
 800510c:	667b      	str	r3, [r7, #100]	@ 0x64
 800510e:	e178      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005116:	2b04      	cmp	r3, #4
 8005118:	d11c      	bne.n	8005154 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 800511a:	f240 1301 	movw	r3, #257	@ 0x101
 800511e:	63bb      	str	r3, [r7, #56]	@ 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8005120:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 8005122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005124:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800512e:	4619      	mov	r1, r3
 8005130:	f7fe fd48 	bl	8003bc4 <uavcan_primitive_array_Integer64_1_0_serialize_>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        if (_err4_ < 0)
 800513a:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 800513e:	2b00      	cmp	r3, #0
 8005140:	da02      	bge.n	8005148 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 8005142:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8005146:	e18c      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800514e:	4413      	add	r3, r2
 8005150:	667b      	str	r3, [r7, #100]	@ 0x64
 8005152:	e156      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800515a:	2b05      	cmp	r3, #5
 800515c:	d11c      	bne.n	8005198 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 800515e:	f240 1301 	movw	r3, #257	@ 0x101
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8005164:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005168:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4413      	add	r3, r2
 800516e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005172:	4619      	mov	r1, r3
 8005174:	f7fe fc48 	bl	8003a08 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (_err5_ < 0)
 800517e:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8005182:	2b00      	cmp	r3, #0
 8005184:	da02      	bge.n	800518c <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 8005186:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800518a:	e16a      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005192:	4413      	add	r3, r2
 8005194:	667b      	str	r3, [r7, #100]	@ 0x64
 8005196:	e134      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d11c      	bne.n	80051dc <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 80051a2:	f240 1301 	movw	r3, #257	@ 0x101
 80051a6:	633b      	str	r3, [r7, #48]	@ 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80051a8:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 80051aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ac:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fe fb48 	bl	800384c <uavcan_primitive_array_Integer16_1_0_serialize_>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (_err6_ < 0)
 80051c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da02      	bge.n	80051d0 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 80051ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80051ce:	e148      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051d6:	4413      	add	r3, r2
 80051d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80051da:	e112      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80051e2:	2b07      	cmp	r3, #7
 80051e4:	d11c      	bne.n	8005220 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 80051e6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 80051ec:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 80051ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051f0:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	4413      	add	r3, r2
 80051f6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80051fa:	4619      	mov	r1, r3
 80051fc:	f7fe fdc0 	bl	8003d80 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        if (_err7_ < 0)
 8005206:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800520a:	2b00      	cmp	r3, #0
 800520c:	da02      	bge.n	8005214 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 800520e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8005212:	e126      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8005214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800521a:	4413      	add	r3, r2
 800521c:	667b      	str	r3, [r7, #100]	@ 0x64
 800521e:	e0f0      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005226:	2b08      	cmp	r3, #8
 8005228:	d11c      	bne.n	8005264 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 800522a:	f240 1301 	movw	r3, #257	@ 0x101
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8005230:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8005232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005234:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800523e:	4619      	mov	r1, r3
 8005240:	f7ff f832 	bl	80042a8 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
        if (_err8_ < 0)
 800524a:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 800524e:	2b00      	cmp	r3, #0
 8005250:	da02      	bge.n	8005258 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 8005252:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 8005256:	e104      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800525e:	4413      	add	r3, r2
 8005260:	667b      	str	r3, [r7, #100]	@ 0x64
 8005262:	e0ce      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800526a:	2b09      	cmp	r3, #9
 800526c:	d11c      	bne.n	80052a8 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 800526e:	f240 1301 	movw	r3, #257	@ 0x101
 8005272:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8005274:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8005276:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005278:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005282:	4619      	mov	r1, r3
 8005284:	f7fe ff32 	bl	80040ec <uavcan_primitive_array_Natural32_1_0_serialize_>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
        if (_err9_ < 0)
 800528e:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8005292:	2b00      	cmp	r3, #0
 8005294:	da02      	bge.n	800529c <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8005296:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 800529a:	e0e2      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052a2:	4413      	add	r3, r2
 80052a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052a6:	e0ac      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80052ae:	2b0a      	cmp	r3, #10
 80052b0:	d11c      	bne.n	80052ec <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 80052b2:	f240 1301 	movw	r3, #257	@ 0x101
 80052b6:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80052b8:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 80052ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052bc:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	f107 0220 	add.w	r2, r7, #32
 80052c6:	4619      	mov	r1, r3
 80052c8:	f7fe fe32 	bl	8003f30 <uavcan_primitive_array_Natural16_1_0_serialize_>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        if (_err10_ < 0)
 80052d2:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	da02      	bge.n	80052e0 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 80052da:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80052de:	e0c0      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052e6:	4413      	add	r3, r2
 80052e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ea:	e08a      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80052f2:	2b0b      	cmp	r3, #11
 80052f4:	d11c      	bne.n	8005330 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 80052f6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80052fa:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80052fc:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 80052fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005300:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4413      	add	r3, r2
 8005306:	f107 021c 	add.w	r2, r7, #28
 800530a:	4619      	mov	r1, r3
 800530c:	f7ff f8aa 	bl	8004464 <uavcan_primitive_array_Natural8_1_0_serialize_>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (_err11_ < 0)
 8005316:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 800531a:	2b00      	cmp	r3, #0
 800531c:	da02      	bge.n	8005324 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 800531e:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 8005322:	e09e      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800532a:	4413      	add	r3, r2
 800532c:	667b      	str	r3, [r7, #100]	@ 0x64
 800532e:	e068      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d11c      	bne.n	8005374 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 800533a:	f240 1301 	movw	r3, #257	@ 0x101
 800533e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8005340:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8005342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005344:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4413      	add	r3, r2
 800534a:	f107 0218 	add.w	r2, r7, #24
 800534e:	4619      	mov	r1, r3
 8005350:	f7ff fb5a 	bl	8004a08 <uavcan_primitive_array_Real64_1_0_serialize_>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        if (_err12_ < 0)
 800535a:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 800535e:	2b00      	cmp	r3, #0
 8005360:	da02      	bge.n	8005368 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8005362:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 8005366:	e07c      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800536e:	4413      	add	r3, r2
 8005370:	667b      	str	r3, [r7, #100]	@ 0x64
 8005372:	e046      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800537a:	2b0d      	cmp	r3, #13
 800537c:	d11c      	bne.n	80053b8 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 800537e:	f240 1301 	movw	r3, #257	@ 0x101
 8005382:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8005384:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8005386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005388:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4413      	add	r3, r2
 800538e:	f107 0214 	add.w	r2, r7, #20
 8005392:	4619      	mov	r1, r3
 8005394:	f7ff fa5a 	bl	800484c <uavcan_primitive_array_Real32_1_0_serialize_>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        if (_err13_ < 0)
 800539e:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da02      	bge.n	80053ac <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 80053a6:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 80053aa:	e05a      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053b2:	4413      	add	r3, r2
 80053b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053b6:	e024      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80053be:	2b0e      	cmp	r3, #14
 80053c0:	d11c      	bne.n	80053fc <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 80053c2:	f240 1301 	movw	r3, #257	@ 0x101
 80053c6:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80053c8:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 80053ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053cc:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	f107 0210 	add.w	r2, r7, #16
 80053d6:	4619      	mov	r1, r3
 80053d8:	f7ff f91c 	bl	8004614 <uavcan_primitive_array_Real16_1_0_serialize_>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (_err14_ < 0)
 80053e2:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da02      	bge.n	80053f0 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 80053ea:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80053ee:	e038      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053f6:	4413      	add	r3, r2
 80053f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80053fa:	e002      	b.n	8005402 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80053fc:	f06f 030a 	mvn.w	r3, #10
 8005400:	e02f      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	2b00      	cmp	r3, #0
 800540a:	d025      	beq.n	8005458 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800540c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f1c3 0308 	rsb	r3, r3, #8
 800541a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800541e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005422:	9302      	str	r3, [sp, #8]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9cd 2300 	strd	r2, r3, [sp]
 8005430:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005432:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005434:	68b8      	ldr	r0, [r7, #8]
 8005436:	f7fd f939 	bl	80026ac <nunavutSetUxx>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if (_err15_ < 0)
 8005440:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8005444:	2b00      	cmp	r3, #0
 8005446:	da02      	bge.n	800544e <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8005448:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800544c:	e009      	b.n	8005462 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 800544e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005452:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005454:	4413      	add	r3, r2
 8005456:	667b      	str	r3, [r7, #100]	@ 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800545a:	08da      	lsrs	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3768      	adds	r7, #104	@ 0x68
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b09a      	sub	sp, #104	@ 0x68
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <uavcan_register_Value_1_0_deserialize_+0x26>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d006      	beq.n	8005492 <uavcan_register_Value_1_0_deserialize_+0x26>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <uavcan_register_Value_1_0_deserialize_+0x2c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005492:	f06f 0301 	mvn.w	r3, #1
 8005496:	e29b      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800549e:	4bb0      	ldr	r3, [pc, #704]	@ (8005760 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 80054a0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	663b      	str	r3, [r7, #96]	@ 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80054a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t offset_bits = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	667b      	str	r3, [r7, #100]	@ 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80054b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b4:	3308      	adds	r3, #8
 80054b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d308      	bcc.n	80054ce <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 80054bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4413      	add	r3, r2
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 80054cc:	e003      	b.n	80054d6 <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
    }
    offset_bits += 8U;
 80054d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054d8:	3308      	adds	r3, #8
 80054da:	667b      	str	r3, [r7, #100]	@ 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d123      	bne.n	800552e <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80054e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054e8:	08db      	lsrs	r3, r3, #3
 80054ea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fc ffcd 	bl	800248c <nunavutChooseMin>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	64bb      	str	r3, [r7, #72]	@ 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80054fa:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 80054fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054fe:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	4413      	add	r3, r2
 8005504:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005508:	4619      	mov	r1, r3
 800550a:	f7ff fb77 	bl	8004bfc <uavcan_primitive_Empty_1_0_deserialize_>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            if (_err16_ < 0)
 8005514:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8005518:	2b00      	cmp	r3, #0
 800551a:	da02      	bge.n	8005522 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 800551c:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8005520:	e256      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8005522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005528:	4413      	add	r3, r2
 800552a:	667b      	str	r3, [r7, #100]	@ 0x64
 800552c:	e242      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005534:	2b01      	cmp	r3, #1
 8005536:	d123      	bne.n	8005580 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800553a:	08db      	lsrs	r3, r3, #3
 800553c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc ffa4 	bl	800248c <nunavutChooseMin>
 8005544:	4602      	mov	r2, r0
 8005546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	647b      	str	r3, [r7, #68]	@ 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 800554c:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 800554e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005550:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4413      	add	r3, r2
 8005556:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800555a:	4619      	mov	r1, r3
 800555c:	f7ff fbee 	bl	8004d3c <uavcan_primitive_String_1_0_deserialize_>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            if (_err17_ < 0)
 8005566:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 800556a:	2b00      	cmp	r3, #0
 800556c:	da02      	bge.n	8005574 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 800556e:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8005572:	e22d      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8005574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800557a:	4413      	add	r3, r2
 800557c:	667b      	str	r3, [r7, #100]	@ 0x64
 800557e:	e219      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005586:	2b02      	cmp	r3, #2
 8005588:	d123      	bne.n	80055d2 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800558a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800558c:	08db      	lsrs	r3, r3, #3
 800558e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005590:	4618      	mov	r0, r3
 8005592:	f7fc ff7b 	bl	800248c <nunavutChooseMin>
 8005596:	4602      	mov	r2, r0
 8005598:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	643b      	str	r3, [r7, #64]	@ 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 800559e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 80055a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a2:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4413      	add	r3, r2
 80055a8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7ff fc9d 	bl	8004eec <uavcan_primitive_Unstructured_1_0_deserialize_>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if (_err18_ < 0)
 80055b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da02      	bge.n	80055c6 <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 80055c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80055c4:	e204      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 80055c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055cc:	4413      	add	r3, r2
 80055ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80055d0:	e1f0      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d123      	bne.n	8005624 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fc ff52 	bl	800248c <nunavutChooseMin>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80055f0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 80055f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f4:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4413      	add	r3, r2
 80055fa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80055fe:	4619      	mov	r1, r3
 8005600:	f7fe f8c6 	bl	8003790 <uavcan_primitive_array_Bit_1_0_deserialize_>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
            if (_err19_ < 0)
 800560a:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	da02      	bge.n	8005618 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 8005612:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8005616:	e1db      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8005618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800561e:	4413      	add	r3, r2
 8005620:	667b      	str	r3, [r7, #100]	@ 0x64
 8005622:	e1c7      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800562a:	2b04      	cmp	r3, #4
 800562c:	d123      	bne.n	8005676 <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800562e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005630:	08db      	lsrs	r3, r3, #3
 8005632:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005634:	4618      	mov	r0, r3
 8005636:	f7fc ff29 	bl	800248c <nunavutChooseMin>
 800563a:	4602      	mov	r2, r0
 800563c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	63bb      	str	r3, [r7, #56]	@ 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8005642:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8005644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005646:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	4413      	add	r3, r2
 800564c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005650:	4619      	mov	r1, r3
 8005652:	f7fe fb2d 	bl	8003cb0 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8005656:	4603      	mov	r3, r0
 8005658:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
            if (_err20_ < 0)
 800565c:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8005660:	2b00      	cmp	r3, #0
 8005662:	da02      	bge.n	800566a <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8005664:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8005668:	e1b2      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005670:	4413      	add	r3, r2
 8005672:	667b      	str	r3, [r7, #100]	@ 0x64
 8005674:	e19e      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800567c:	2b05      	cmp	r3, #5
 800567e:	d123      	bne.n	80056c8 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005682:	08db      	lsrs	r3, r3, #3
 8005684:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005686:	4618      	mov	r0, r3
 8005688:	f7fc ff00 	bl	800248c <nunavutChooseMin>
 800568c:	4602      	mov	r2, r0
 800568e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8005694:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8005696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005698:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4413      	add	r3, r2
 800569e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80056a2:	4619      	mov	r1, r3
 80056a4:	f7fe fa26 	bl	8003af4 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (_err21_ < 0)
 80056ae:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da02      	bge.n	80056bc <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 80056b6:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80056ba:	e189      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 80056bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80056c2:	4413      	add	r3, r2
 80056c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80056c6:	e175      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d123      	bne.n	800571a <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80056d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fc fed7 	bl	800248c <nunavutChooseMin>
 80056de:	4602      	mov	r2, r0
 80056e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80056e6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ea:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4413      	add	r3, r2
 80056f0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80056f4:	4619      	mov	r1, r3
 80056f6:	f7fe f91f 	bl	8003938 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (_err22_ < 0)
 8005700:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8005704:	2b00      	cmp	r3, #0
 8005706:	da02      	bge.n	800570e <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8005708:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800570c:	e160      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005714:	4413      	add	r3, r2
 8005716:	667b      	str	r3, [r7, #100]	@ 0x64
 8005718:	e14c      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005720:	2b07      	cmp	r3, #7
 8005722:	d125      	bne.n	8005770 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005726:	08db      	lsrs	r3, r3, #3
 8005728:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800572a:	4618      	mov	r0, r3
 800572c:	f7fc feae 	bl	800248c <nunavutChooseMin>
 8005730:	4602      	mov	r2, r0
 8005732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	62fb      	str	r3, [r7, #44]	@ 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8005738:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 800573a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800573c:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005746:	4619      	mov	r1, r3
 8005748:	f7fe fb92 	bl	8003e70 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            if (_err23_ < 0)
 8005752:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8005756:	2b00      	cmp	r3, #0
 8005758:	da04      	bge.n	8005764 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 800575a:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800575e:	e137      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
 8005760:	08018a58 	.word	0x08018a58
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800576a:	4413      	add	r3, r2
 800576c:	667b      	str	r3, [r7, #100]	@ 0x64
 800576e:	e121      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005776:	2b08      	cmp	r3, #8
 8005778:	d123      	bne.n	80057c2 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800577a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800577c:	08db      	lsrs	r3, r3, #3
 800577e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005780:	4618      	mov	r0, r3
 8005782:	f7fc fe83 	bl	800248c <nunavutChooseMin>
 8005786:	4602      	mov	r2, r0
 8005788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 800578e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8005790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005792:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	4413      	add	r3, r2
 8005798:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800579c:	4619      	mov	r1, r3
 800579e:	f7fe fdf9 	bl	8004394 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            if (_err24_ < 0)
 80057a8:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da02      	bge.n	80057b6 <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 80057b0:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80057b4:	e10c      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057bc:	4413      	add	r3, r2
 80057be:	667b      	str	r3, [r7, #100]	@ 0x64
 80057c0:	e0f8      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d123      	bne.n	8005814 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80057cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ce:	08db      	lsrs	r3, r3, #3
 80057d0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fc fe5a 	bl	800248c <nunavutChooseMin>
 80057d8:	4602      	mov	r2, r0
 80057da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80057e0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 80057e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e4:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80057ee:	4619      	mov	r1, r3
 80057f0:	f7fe fcf2 	bl	80041d8 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
            if (_err25_ < 0)
 80057fa:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da02      	bge.n	8005808 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 8005802:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8005806:	e0e3      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800580e:	4413      	add	r3, r2
 8005810:	667b      	str	r3, [r7, #100]	@ 0x64
 8005812:	e0cf      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800581a:	2b0a      	cmp	r3, #10
 800581c:	d123      	bne.n	8005866 <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800581e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005824:	4618      	mov	r0, r3
 8005826:	f7fc fe31 	bl	800248c <nunavutChooseMin>
 800582a:	4602      	mov	r2, r0
 800582c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005832:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8005834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005836:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	4413      	add	r3, r2
 800583c:	f107 0220 	add.w	r2, r7, #32
 8005840:	4619      	mov	r1, r3
 8005842:	f7fe fbeb 	bl	800401c <uavcan_primitive_array_Natural16_1_0_deserialize_>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (_err26_ < 0)
 800584c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005850:	2b00      	cmp	r3, #0
 8005852:	da02      	bge.n	800585a <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 8005854:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005858:	e0ba      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005860:	4413      	add	r3, r2
 8005862:	667b      	str	r3, [r7, #100]	@ 0x64
 8005864:	e0a6      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800586c:	2b0b      	cmp	r3, #11
 800586e:	d123      	bne.n	80058b8 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f7fc fe08 	bl	800248c <nunavutChooseMin>
 800587c:	4602      	mov	r2, r0
 800587e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005884:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 8005886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005888:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	f107 021c 	add.w	r2, r7, #28
 8005892:	4619      	mov	r1, r3
 8005894:	f7fe fe5e 	bl	8004554 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            if (_err27_ < 0)
 800589e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da02      	bge.n	80058ac <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 80058a6:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80058aa:	e091      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058b2:	4413      	add	r3, r2
 80058b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80058b6:	e07d      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d123      	bne.n	800590a <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80058c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c4:	08db      	lsrs	r3, r3, #3
 80058c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fc fddf 	bl	800248c <nunavutChooseMin>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80058d6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80058d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058da:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	4413      	add	r3, r2
 80058e0:	f107 0218 	add.w	r2, r7, #24
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7ff f905 	bl	8004af4 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
            if (_err28_ < 0)
 80058f0:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da02      	bge.n	80058fe <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 80058f8:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80058fc:	e068      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005904:	4413      	add	r3, r2
 8005906:	667b      	str	r3, [r7, #100]	@ 0x64
 8005908:	e054      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005910:	2b0d      	cmp	r3, #13
 8005912:	d123      	bne.n	800595c <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800591a:	4618      	mov	r0, r3
 800591c:	f7fc fdb6 	bl	800248c <nunavutChooseMin>
 8005920:	4602      	mov	r2, r0
 8005922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8005928:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 800592a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800592c:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	4413      	add	r3, r2
 8005932:	f107 0214 	add.w	r2, r7, #20
 8005936:	4619      	mov	r1, r3
 8005938:	f7fe fffe 	bl	8004938 <uavcan_primitive_array_Real32_1_0_deserialize_>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
            if (_err29_ < 0)
 8005942:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8005946:	2b00      	cmp	r3, #0
 8005948:	da02      	bge.n	8005950 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 800594a:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 800594e:	e03f      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005956:	4413      	add	r3, r2
 8005958:	667b      	str	r3, [r7, #100]	@ 0x64
 800595a:	e02b      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005962:	2b0e      	cmp	r3, #14
 8005964:	d123      	bne.n	80059ae <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800596c:	4618      	mov	r0, r3
 800596e:	f7fc fd8d 	bl	800248c <nunavutChooseMin>
 8005972:	4602      	mov	r2, r0
 8005974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800597a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 800597c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800597e:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4413      	add	r3, r2
 8005984:	f107 0210 	add.w	r2, r7, #16
 8005988:	4619      	mov	r1, r3
 800598a:	f7fe feed 	bl	8004768 <uavcan_primitive_array_Real16_1_0_deserialize_>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
            if (_err30_ < 0)
 8005994:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8005998:	2b00      	cmp	r3, #0
 800599a:	da02      	bge.n	80059a2 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 800599c:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80059a0:	e016      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80059a8:	4413      	add	r3, r2
 80059aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80059ac:	e002      	b.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80059ae:	f06f 030a 	mvn.w	r3, #10
 80059b2:	e00d      	b.n	80059d0 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80059b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059b6:	3307      	adds	r3, #7
 80059b8:	f023 0307 	bic.w	r3, r3, #7
 80059bc:	667b      	str	r3, [r7, #100]	@ 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80059be:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80059c0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80059c2:	f7fc fd63 	bl	800248c <nunavutChooseMin>
 80059c6:	4603      	mov	r3, r0
 80059c8:	08da      	lsrs	r2, r3, #3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3768      	adds	r7, #104	@ 0x68
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	@ 0x30
 80059dc:	af04      	add	r7, sp, #16
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80059f6:	f06f 0301 	mvn.w	r3, #1
 80059fa:	e043      	b.n	8005a84 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	2b37      	cmp	r3, #55	@ 0x37
 8005a08:	d802      	bhi.n	8005a10 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005a0a:	f06f 0302 	mvn.w	r3, #2
 8005a0e:	e039      	b.n	8005a84 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	68f9      	ldr	r1, [r7, #12]
 8005a1e:	2207      	movs	r2, #7
 8005a20:	4618      	mov	r0, r3
 8005a22:	f00e ffe8 	bl	80149f6 <memmove>
        offset_bits += 56U;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3338      	adds	r3, #56	@ 0x38
 8005a2a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d021      	beq.n	8005a7a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f1c3 0308 	rsb	r3, r3, #8
 8005a44:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	9302      	str	r3, [sp, #8]
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9cd 2300 	strd	r2, r3, [sp]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	69b9      	ldr	r1, [r7, #24]
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f7fc fe26 	bl	80026ac <nunavutSetUxx>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005a64:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	da02      	bge.n	8005a72 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 8005a6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005a70:	e008      	b.n	8005a84 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	08da      	lsrs	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d006      	beq.n	8005ab2 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005ab2:	f06f 0301 	mvn.w	r3, #1
 8005ab6:	e065      	b.n	8005b84 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005abe:	4b33      	ldr	r3, [pc, #204]	@ (8005b8c <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005ac0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	08db      	lsrs	r3, r3, #3
 8005ad6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc fcd7 	bl	800248c <nunavutChooseMin>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005ae6:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4413      	add	r3, r2
 8005af0:	f107 0214 	add.w	r2, r7, #20
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7fd fd6d 	bl	80035d4 <uavcan_register_Name_1_0_deserialize_>
 8005afa:	4603      	mov	r3, r0
 8005afc:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8005afe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da02      	bge.n	8005b0c <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 8005b06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b0a:	e03b      	b.n	8005b84 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3307      	adds	r3, #7
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	08db      	lsrs	r3, r3, #3
 8005b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fc fcb0 	bl	800248c <nunavutChooseMin>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 7084 	add.w	r0, r3, #264	@ 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	4413      	add	r3, r2
 8005b42:	f107 0210 	add.w	r2, r7, #16
 8005b46:	4619      	mov	r1, r3
 8005b48:	f7ff fc90 	bl	800546c <uavcan_register_Value_1_0_deserialize_>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8005b50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	da02      	bge.n	8005b5e <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 8005b58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005b5c:	e012      	b.n	8005b84 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005b72:	6a39      	ldr	r1, [r7, #32]
 8005b74:	69f8      	ldr	r0, [r7, #28]
 8005b76:	f7fc fc89 	bl	800248c <nunavutChooseMin>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	08da      	lsrs	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3728      	adds	r7, #40	@ 0x28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	08018a58 	.word	0x08018a58

08005b90 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	@ 0x38
 8005b94:	af04      	add	r7, sp, #16
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	e0f0      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	f640 0257 	movw	r2, #2135	@ 0x857
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d802      	bhi.n	8005bcc <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005bc6:	f06f 0302 	mvn.w	r3, #2
 8005bca:	e0e4      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005bd4:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f107 0214 	add.w	r2, r7, #20
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7ff fef8 	bl	80059d8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8005be8:	4603      	mov	r3, r0
 8005bea:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 8005bec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da02      	bge.n	8005bfa <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8005bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005bf8:	e0cd      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c00:	4413      	add	r3, r2
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	7a1b      	ldrb	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	e000      	b.n	8005c12 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 8005c10:	2100      	movs	r1, #0
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	08db      	lsrs	r3, r3, #3
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	4413      	add	r3, r2
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	3301      	adds	r3, #1
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	7a5b      	ldrb	r3, [r3, #9]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d013      	beq.n	8005c54 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	08db      	lsrs	r3, r3, #3
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4413      	add	r3, r2
 8005c34:	7819      	ldrb	r1, [r3, #0]
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	08db      	lsrs	r3, r3, #3
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	4403      	add	r3, r0
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e014      	b.n	8005c7e <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	08db      	lsrs	r3, r3, #3
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	7819      	ldrb	r1, [r3, #0]
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	2201      	movs	r2, #1
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	08db      	lsrs	r3, r3, #3
 8005c74:	68b8      	ldr	r0, [r7, #8]
 8005c76:	4403      	add	r3, r0
 8005c78:	400a      	ands	r2, r1
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	3301      	adds	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005c84:	2306      	movs	r3, #6
 8005c86:	9302      	str	r3, [sp, #8]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9cd 2300 	strd	r2, r3, [sp]
 8005c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c96:	6a39      	ldr	r1, [r7, #32]
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f7fc fd07 	bl	80026ac <nunavutSetUxx>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005ca2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	da02      	bge.n	8005cb0 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8005caa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005cae:	e072      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	3306      	adds	r3, #6
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d021      	beq.n	8005d04 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f1c3 0308 	rsb	r3, r3, #8
 8005cce:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005cd0:	7f7b      	ldrb	r3, [r7, #29]
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	e9cd 2300 	strd	r2, r3, [sp]
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce2:	6a39      	ldr	r1, [r7, #32]
 8005ce4:	68b8      	ldr	r0, [r7, #8]
 8005ce6:	f7fc fce1 	bl	80026ac <nunavutSetUxx>
 8005cea:	4603      	mov	r3, r0
 8005cec:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005cee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da02      	bge.n	8005cfc <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005cf6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005cfa:	e04c      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005cfc:	7f7b      	ldrb	r3, [r7, #29]
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d00:	4413      	add	r3, r2
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005d04:	f240 1303 	movw	r3, #259	@ 0x103
 8005d08:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	4413      	add	r3, r2
 8005d18:	f107 0210 	add.w	r2, r7, #16
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f7ff f945 	bl	8004fac <uavcan_register_Value_1_0_serialize_>
 8005d22:	4603      	mov	r3, r0
 8005d24:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 8005d26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	da02      	bge.n	8005d34 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8005d2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005d32:	e030      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3a:	4413      	add	r3, r2
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d021      	beq.n	8005d8c <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f1c3 0308 	rsb	r3, r3, #8
 8005d56:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8005d58:	7ebb      	ldrb	r3, [r7, #26]
 8005d5a:	9302      	str	r3, [sp, #8]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9cd 2300 	strd	r2, r3, [sp]
 8005d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6a:	6a39      	ldr	r1, [r7, #32]
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f7fc fc9d 	bl	80026ac <nunavutSetUxx>
 8005d72:	4603      	mov	r3, r0
 8005d74:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005d76:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da02      	bge.n	8005d84 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005d7e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005d82:	e008      	b.n	8005d96 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005d84:	7ebb      	ldrb	r3, [r7, #26]
 8005d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d88:	4413      	add	r3, r2
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	@ 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b08c      	sub	sp, #48	@ 0x30
 8005da2:	af04      	add	r7, sp, #16
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <uavcan_node_Version_1_0_serialize_+0x1e>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <uavcan_node_Version_1_0_serialize_+0x1e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005dbc:	f06f 0301 	mvn.w	r3, #1
 8005dc0:	e04b      	b.n	8005e5a <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d802      	bhi.n	8005dd6 <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005dd0:	f06f 0302 	mvn.w	r3, #2
 8005dd4:	e041      	b.n	8005e5a <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	08db      	lsrs	r3, r3, #3
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3308      	adds	r3, #8
 8005dec:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	7852      	ldrb	r2, [r2, #1]
 8005dfa:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d021      	beq.n	8005e50 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f1c3 0308 	rsb	r3, r3, #8
 8005e1a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	9302      	str	r3, [sp, #8]
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9cd 2300 	strd	r2, r3, [sp]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	68b8      	ldr	r0, [r7, #8]
 8005e32:	f7fc fc3b 	bl	80026ac <nunavutSetUxx>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005e3a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da02      	bge.n	8005e48 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 8005e42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005e46:	e008      	b.n	8005e5a <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	08da      	lsrs	r2, r3, #3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d006      	beq.n	8005e8a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005e8a:	f06f 0301 	mvn.w	r3, #1
 8005e8e:	e008      	b.n	8005ea2 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005e96:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005e98:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	08018a58 	.word	0x08018a58

08005eb4 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b090      	sub	sp, #64	@ 0x40
 8005eb8:	af04      	add	r7, sp, #16
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005ed2:	f06f 0301 	mvn.w	r3, #1
 8005ed6:	e16b      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	f640 12c7 	movw	r2, #2503	@ 0x9c7
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d802      	bhi.n	8005ef0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005eea:	f06f 0302 	mvn.w	r3, #2
 8005eee:	e15f      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005ef8:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	f107 0218 	add.w	r2, r7, #24
 8005f06:	4619      	mov	r1, r3
 8005f08:	f7ff ff49 	bl	8005d9e <uavcan_node_Version_1_0_serialize_>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 8005f12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da02      	bge.n	8005f20 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 8005f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f1e:	e147      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f26:	4413      	add	r3, r2
 8005f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d025      	beq.n	8005f80 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f1c3 0308 	rsb	r3, r3, #8
 8005f42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005f46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f4a:	9302      	str	r3, [sp, #8]
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	e9cd 2300 	strd	r2, r3, [sp]
 8005f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f5c:	68b8      	ldr	r0, [r7, #8]
 8005f5e:	f7fc fba5 	bl	80026ac <nunavutSetUxx>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8005f68:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	da02      	bge.n	8005f76 <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8005f70:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8005f74:	e11c      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8005f76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7c:	4413      	add	r3, r2
 8005f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8005f80:	2302      	movs	r3, #2
 8005f82:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f107 0214 	add.w	r2, r7, #20
 8005f94:	4619      	mov	r1, r3
 8005f96:	f7ff ff02 	bl	8005d9e <uavcan_node_Version_1_0_serialize_>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8005fa0:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	da02      	bge.n	8005fae <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8005fa8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8005fac:	e100      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb4:	4413      	add	r3, r2
 8005fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d025      	beq.n	800600e <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8005fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f1c3 0308 	rsb	r3, r3, #8
 8005fd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8005fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fd8:	9302      	str	r3, [sp, #8]
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9cd 2300 	strd	r2, r3, [sp]
 8005fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fea:	68b8      	ldr	r0, [r7, #8]
 8005fec:	f7fc fb5e 	bl	80026ac <nunavutSetUxx>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 8005ff6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	da02      	bge.n	8006004 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 8005ffe:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006002:	e0d5      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 8006004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800600a:	4413      	add	r3, r2
 800600c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 800600e:	2302      	movs	r3, #2
 8006010:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	f107 0210 	add.w	r2, r7, #16
 8006022:	4619      	mov	r1, r3
 8006024:	f7ff febb 	bl	8005d9e <uavcan_node_Version_1_0_serialize_>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 800602e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006032:	2b00      	cmp	r3, #0
 8006034:	da02      	bge.n	800603c <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 8006036:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800603a:	e0b9      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006042:	4413      	add	r3, r2
 8006044:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	08db      	lsrs	r3, r3, #3
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	18d0      	adds	r0, r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3308      	adds	r3, #8
 8006052:	2208      	movs	r2, #8
 8006054:	4619      	mov	r1, r3
 8006056:	f00e fcce 	bl	80149f6 <memmove>
        offset_bits += 64U;
 800605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605c:	3340      	adds	r3, #64	@ 0x40
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3310      	adds	r3, #16
 8006064:	2200      	movs	r2, #0
 8006066:	9200      	str	r2, [sp, #0]
 8006068:	2280      	movs	r2, #128	@ 0x80
 800606a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800606c:	68b8      	ldr	r0, [r7, #8]
 800606e:	f7fc fa39 	bl	80024e4 <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	3380      	adds	r3, #128	@ 0x80
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	2b32      	cmp	r3, #50	@ 0x32
 800607e:	d902      	bls.n	8006086 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8006080:	f06f 0309 	mvn.w	r3, #9
 8006084:	e094      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	08db      	lsrs	r3, r3, #3
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	b2ca      	uxtb	r2, r1
 8006094:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	3308      	adds	r3, #8
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a0:	00da      	lsls	r2, r3, #3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3320      	adds	r3, #32
 80060a6:	2100      	movs	r1, #0
 80060a8:	9100      	str	r1, [sp, #0]
 80060aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060ac:	68b8      	ldr	r0, [r7, #8]
 80060ae:	f7fc fa19 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ba:	4413      	add	r3, r2
 80060bc:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d902      	bls.n	80060cc <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80060c6:	f06f 0309 	mvn.w	r3, #9
 80060ca:	e071      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4413      	add	r3, r2
 80060d8:	b2ca      	uxtb	r2, r1
 80060da:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	3308      	adds	r3, #8
 80060e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	019a      	lsls	r2, r3, #6
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3358      	adds	r3, #88	@ 0x58
 80060ec:	2100      	movs	r1, #0
 80060ee:	9100      	str	r1, [sp, #0]
 80060f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7fc f9f6 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006100:	4413      	add	r3, r2
 8006102:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800610a:	2bde      	cmp	r3, #222	@ 0xde
 800610c:	d902      	bls.n	8006114 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800610e:	f06f 0309 	mvn.w	r3, #9
 8006112:	e04d      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	4413      	add	r3, r2
 8006122:	b2ca      	uxtb	r2, r1
 8006124:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	3308      	adds	r3, #8
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006132:	00da      	lsls	r2, r3, #3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3368      	adds	r3, #104	@ 0x68
 8006138:	2100      	movs	r1, #0
 800613a:	9100      	str	r1, [sp, #0]
 800613c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f7fc f9d0 	bl	80024e4 <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800614e:	4413      	add	r3, r2
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8006152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	2b00      	cmp	r3, #0
 800615a:	d024      	beq.n	80061a6 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 800615c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f1c3 0308 	rsb	r3, r3, #8
 800616a:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 800616e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9cd 2300 	strd	r2, r3, [sp]
 8006180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006182:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006184:	68b8      	ldr	r0, [r7, #8]
 8006186:	f7fc fa91 	bl	80026ac <nunavutSetUxx>
 800618a:	4603      	mov	r3, r0
 800618c:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 800618e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da02      	bge.n	800619c <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 8006196:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800619a:	e009      	b.n	80061b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 800619c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a2:	4413      	add	r3, r2
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80061a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a8:	08da      	lsrs	r2, r3, #3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3730      	adds	r7, #48	@ 0x30
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 fb71 	bl	80078ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
      { }
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	f7fb ff93 	bl	800211e <Error_Handler>
 80061f8:	bf00      	nop
 80061fa:	bd80      	pop	{r7, pc}

080061fc <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 80061fc:	b5b0      	push	{r4, r5, r7, lr}
 80061fe:	af00      	add	r7, sp, #0
 8006200:	f004 fab8 	bl	800a774 <HAL_GetTick>
 8006204:	4603      	mov	r3, r0
 8006206:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	2200      	movs	r2, #0
 8006210:	461c      	mov	r4, r3
 8006212:	4615      	mov	r5, r2
 8006214:	4622      	mov	r2, r4
 8006216:	462b      	mov	r3, r5
 8006218:	4610      	mov	r0, r2
 800621a:	4619      	mov	r1, r3
 800621c:	bdb0      	pop	{r4, r5, r7, pc}

0800621e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f001 fba8 	bl	8007990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff ffdf 	bl	800621e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff ff9f 	bl	80061b8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800628e:	687c      	ldr	r4, [r7, #4]
 8006290:	f107 0308 	add.w	r3, r7, #8
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff ffd7 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	f641 5255 	movw	r2, #7509	@ 0x1d55
 80062a4:	4619      	mov	r1, r3
 80062a6:	4620      	mov	r0, r4
 80062a8:	f001 fb89 	bl	80079be <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80062ac:	f107 0308 	add.w	r3, r7, #8
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff ffda 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80062b6:	4a04      	ldr	r2, [pc, #16]	@ (80062c8 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	08018ae0 	.word	0x08018ae0

080062cc <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
static float vel_set;
static float pos_set;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 80062ee:	687c      	ldr	r4, [r7, #4]
 80062f0:	f107 0308 	add.w	r3, r7, #8
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff ffa7 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80062fc:	f107 0308 	add.w	r3, r7, #8
 8006300:	f240 4265 	movw	r2, #1125	@ 0x465
 8006304:	4619      	mov	r1, r3
 8006306:	4620      	mov	r0, r4
 8006308:	f001 fb77 	bl	80079fa <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ffaa 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006316:	4a04      	ldr	r2, [pc, #16]	@ (8006328 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bd90      	pop	{r4, r7, pc}
 8006326:	bf00      	nop
 8006328:	08018ac0 	.word	0x08018ac0
 800632c:	00000000 	.word	0x00000000

08006330 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
    {

    	vel_moveit = js_in.angular_velocity.radian_per_second;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4a59      	ldr	r2, [pc, #356]	@ (80064a8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x178>)
 8006342:	6013      	str	r3, [r2, #0]
    	pos_moveit = js_in.angular_position.radian;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a58      	ldr	r2, [pc, #352]	@ (80064ac <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x17c>)
 800634a:	6013      	str	r3, [r2, #0]
    	pos_actual = steps_to_rads(tmc5160_position_read(), jc.full_steps);
 800634c:	f003 fe06 	bl	8009f5c <tmc5160_position_read>
 8006350:	4603      	mov	r3, r0
 8006352:	4a57      	ldr	r2, [pc, #348]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 8006354:	6852      	ldr	r2, [r2, #4]
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f004 f91d 	bl	800a598 <steps_to_rads>
 800635e:	eef0 7a40 	vmov.f32	s15, s0
 8006362:	4b54      	ldr	r3, [pc, #336]	@ (80064b4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x184>)
 8006364:	edc3 7a00 	vstr	s15, [r3]
    	vel_actual = steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
 8006368:	f003 fe32 	bl	8009fd0 <tmc5160_velocity_read>
 800636c:	4603      	mov	r3, r0
 800636e:	4a50      	ldr	r2, [pc, #320]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 8006370:	6852      	ldr	r2, [r2, #4]
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f004 f90f 	bl	800a598 <steps_to_rads>
 800637a:	eef0 7a40 	vmov.f32	s15, s0
 800637e:	4b4e      	ldr	r3, [pc, #312]	@ (80064b8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x188>)
 8006380:	edc3 7a00 	vstr	s15, [r3]
    	float Kd = 2.0;
 8006384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006388:	617b      	str	r3, [r7, #20]

    	pos_set = steps_to_rads(rad_to_steps(js_in.angular_position.radian, jc.full_steps), jc.full_steps);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	edd3 7a00 	vldr	s15, [r3]
 8006390:	4b47      	ldr	r3, [pc, #284]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	eeb0 0a67 	vmov.f32	s0, s15
 800639a:	f004 f931 	bl	800a600 <rad_to_steps>
 800639e:	4603      	mov	r3, r0
 80063a0:	4a43      	ldr	r2, [pc, #268]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 80063a2:	6852      	ldr	r2, [r2, #4]
 80063a4:	4611      	mov	r1, r2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f004 f8f6 	bl	800a598 <steps_to_rads>
 80063ac:	eef0 7a40 	vmov.f32	s15, s0
 80063b0:	4b42      	ldr	r3, [pc, #264]	@ (80064bc <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x18c>)
 80063b2:	edc3 7a00 	vstr	s15, [r3]
    	vel_set = steps_to_rads(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps), jc.full_steps);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80063bc:	4b3c      	ldr	r3, [pc, #240]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	eeb0 0a67 	vmov.f32	s0, s15
 80063c6:	f004 f91b 	bl	800a600 <rad_to_steps>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4a38      	ldr	r2, [pc, #224]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 80063ce:	6852      	ldr	r2, [r2, #4]
 80063d0:	4611      	mov	r1, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f004 f8e0 	bl	800a598 <steps_to_rads>
 80063d8:	eef0 7a40 	vmov.f32	s15, s0
 80063dc:	4b38      	ldr	r3, [pc, #224]	@ (80064c0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x190>)
 80063de:	edc3 7a00 	vstr	s15, [r3]
//    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
//    	}

    	//New version POS-VEL control
    	//tmc5160_acceleration(10000000);
    	tmc5160_velocity(rad_to_steps(js_in.angular_velocity.radian_per_second * Kd, jc.full_steps));
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80063e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80063ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f0:	4b2f      	ldr	r3, [pc, #188]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4618      	mov	r0, r3
 80063f6:	eeb0 0a67 	vmov.f32	s0, s15
 80063fa:	f004 f901 	bl	800a600 <rad_to_steps>
 80063fe:	4603      	mov	r3, r0
 8006400:	4618      	mov	r0, r3
 8006402:	f003 fced 	bl	8009de0 <tmc5160_velocity>
    	tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	edd3 7a00 	vldr	s15, [r3]
 800640c:	4b28      	ldr	r3, [pc, #160]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4618      	mov	r0, r3
 8006412:	eeb0 0a67 	vmov.f32	s0, s15
 8006416:	f004 f8f3 	bl	800a600 <rad_to_steps>
 800641a:	4603      	mov	r3, r0
 800641c:	4618      	mov	r0, r3
 800641e:	f003 fbc1 	bl	8009ba4 <tmc5160_position>
    	if(fabs(js_in.angular_velocity.radian_per_second) < 0.0001)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	edd3 7a01 	vldr	s15, [r3, #4]
 8006428:	eeb0 0a67 	vmov.f32	s0, s15
 800642c:	f7fb fffa 	bl	8002424 <_ZSt4fabsf>
 8006430:	ee10 3a10 	vmov	r3, s0
 8006434:	4618      	mov	r0, r3
 8006436:	f7fa f8af 	bl	8000598 <__aeabi_f2d>
 800643a:	2301      	movs	r3, #1
 800643c:	461c      	mov	r4, r3
 800643e:	a318      	add	r3, pc, #96	@ (adr r3, 80064a0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x170>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7fa fb72 	bl	8000b2c <__aeabi_dcmplt>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x122>
 800644e:	2300      	movs	r3, #0
 8006450:	461c      	mov	r4, r3
 8006452:	b2e3      	uxtb	r3, r4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01c      	beq.n	8006492 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x162>
    	{
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006458:	2104      	movs	r1, #4
 800645a:	481a      	ldr	r0, [pc, #104]	@ (80064c4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x194>)
 800645c:	f005 fb70 	bl	800bb40 <HAL_GPIO_TogglePin>
        	tmc5160_velocity(rad_to_steps(20000, jc.full_steps));
 8006460:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4618      	mov	r0, r3
 8006466:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80064c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x198>
 800646a:	f004 f8c9 	bl	800a600 <rad_to_steps>
 800646e:	4603      	mov	r3, r0
 8006470:	4618      	mov	r0, r3
 8006472:	f003 fcb5 	bl	8009de0 <tmc5160_velocity>
        	tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	edd3 7a00 	vldr	s15, [r3]
 800647c:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x180>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	eeb0 0a67 	vmov.f32	s0, s15
 8006486:	f004 f8bb 	bl	800a600 <rad_to_steps>
 800648a:	4603      	mov	r3, r0
 800648c:	4618      	mov	r0, r3
 800648e:	f003 fb89 	bl	8009ba4 <tmc5160_position>
//    		js_in.angular_position.radian != steps_to_rads(tmc5160_position_read(), jc.full_steps);
//    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
//    		tmc5160_velocity(rad_to_steps(100000, jc.full_steps)); //TODO to define proper speed
//    	}

    }
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	bd90      	pop	{r4, r7, pc}
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w
 80064a0:	eb1c432d 	.word	0xeb1c432d
 80064a4:	3f1a36e2 	.word	0x3f1a36e2
 80064a8:	200004fc 	.word	0x200004fc
 80064ac:	20000500 	.word	0x20000500
 80064b0:	20000440 	.word	0x20000440
 80064b4:	20000508 	.word	0x20000508
 80064b8:	20000504 	.word	0x20000504
 80064bc:	20000510 	.word	0x20000510
 80064c0:	2000050c 	.word	0x2000050c
 80064c4:	48000c00 	.word	0x48000c00
 80064c8:	469c4000 	.word	0x469c4000

080064cc <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 80064d6:	687c      	ldr	r4, [r7, #4]
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff feb3 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	2302      	movs	r3, #2
 80064ea:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80064ee:	4620      	mov	r0, r4
 80064f0:	f001 fab2 	bl	8007a58 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80064f4:	f107 0308 	add.w	r3, r7, #8
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff feb6 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80064fe:	4a04      	ldr	r2, [pc, #16]	@ (8006510 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}
 800650e:	bf00      	nop
 8006510:	08018aa0 	.word	0x08018aa0

08006514 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 8006514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006518:	b0e7      	sub	sp, #412	@ 0x19c
 800651a:	af06      	add	r7, sp, #24
 800651c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006520:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006524:	6018      	str	r0, [r3, #0]
 8006526:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800652a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800652e:	6019      	str	r1, [r3, #0]
 8006530:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006534:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8006538:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 800653a:	466b      	mov	r3, sp
 800653c:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 800653e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006542:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006546:	4618      	mov	r0, r3
 8006548:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800654c:	461a      	mov	r2, r3
 800654e:	2100      	movs	r1, #0
 8006550:	f00e fa6b 	bl	8014a2a <memset>
 8006554:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006558:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800655c:	2201      	movs	r2, #1
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006564:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006568:	2201      	movs	r2, #1
 800656a:	709a      	strb	r2, [r3, #2]
 800656c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006570:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006574:	2201      	movs	r2, #1
 8006576:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8006578:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800657c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006580:	2200      	movs	r2, #0
 8006582:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    node_info_response.software_image_crc.count = 0;
 8006586:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800658a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800658e:	2200      	movs	r2, #0
 8006590:	661a      	str	r2, [r3, #96]	@ 0x60
    size_t name_len = 8;
 8006592:	2308      	movs	r3, #8
 8006594:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    char joint_name[name_len];
 8006598:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 800659c:	460b      	mov	r3, r1
 800659e:	3b01      	subs	r3, #1
 80065a0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80065a4:	2300      	movs	r3, #0
 80065a6:	4688      	mov	r8, r1
 80065a8:	4699      	mov	r9, r3
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065be:	2300      	movs	r3, #0
 80065c0:	460c      	mov	r4, r1
 80065c2:	461d      	mov	r5, r3
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	00eb      	lsls	r3, r5, #3
 80065ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d2:	00e2      	lsls	r2, r4, #3
 80065d4:	1dcb      	adds	r3, r1, #7
 80065d6:	08db      	lsrs	r3, r3, #3
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	ebad 0d03 	sub.w	sp, sp, r3
 80065de:	ab06      	add	r3, sp, #24
 80065e0:	3300      	adds	r3, #0
 80065e2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 80065e6:	2205      	movs	r2, #5
 80065e8:	4939      	ldr	r1, [pc, #228]	@ (80066d0 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 80065ea:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80065ee:	f00e f98f 	bl	8014910 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 80065f2:	f107 0320 	add.w	r3, r7, #32
 80065f6:	3320      	adds	r3, #32
 80065f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80065fc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8006600:	4618      	mov	r0, r3
 8006602:	f00e faf8 	bl	8014bf6 <memcpy>
    node_info_response.name.count = name_len;
 8006606:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800660a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800660e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8006612:	655a      	str	r2, [r3, #84]	@ 0x54
    uint32_t word0 = 1;
 8006614:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006618:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 8006620:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006624:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006628:	2202      	movs	r2, #2
 800662a:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 800662c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006630:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006634:	2203      	movs	r2, #3
 8006636:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8006638:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800663c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006646:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800664a:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 800664c:	f107 0320 	add.w	r3, r7, #32
 8006650:	3310      	adds	r3, #16
 8006652:	3304      	adds	r3, #4
 8006654:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8006658:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8006660:	f107 0320 	add.w	r3, r7, #32
 8006664:	3310      	adds	r3, #16
 8006666:	3308      	adds	r3, #8
 8006668:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800666c:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 8006674:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006678:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800667c:	2205      	movs	r2, #5
 800667e:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8006680:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006684:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fa14 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006694:	4604      	mov	r4, r0
 8006696:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800669a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800669e:	f107 0020 	add.w	r0, r7, #32
 80066a2:	2304      	movs	r3, #4
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	4a0b      	ldr	r2, [pc, #44]	@ (80066d4 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066b0:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	680b      	ldr	r3, [r1, #0]
 80066b8:	4a07      	ldr	r2, [pc, #28]	@ (80066d8 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 80066ba:	4601      	mov	r1, r0
 80066bc:	4620      	mov	r0, r4
 80066be:	f001 fa09 	bl	8007ad4 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 80066c2:	46b5      	mov	sp, r6
}
 80066c4:	bf00      	nop
 80066c6:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 80066ca:	46bd      	mov	sp, r7
 80066cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066d0:	08018a50 	.word	0x08018a50
 80066d4:	000f4240 	.word	0x000f4240
 80066d8:	2000051c 	.word	0x2000051c

080066dc <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 80066e6:	687c      	ldr	r4, [r7, #4]
 80066e8:	f107 0308 	add.w	r3, r7, #8
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fdab 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	2302      	movs	r3, #2
 80066fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80066fe:	4620      	mov	r0, r4
 8006700:	f001 fa32 	bl	8007b68 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006704:	f107 0308 	add.w	r3, r7, #8
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff fdae 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800670e:	4a04      	ldr	r2, [pc, #16]	@ (8006720 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bd90      	pop	{r4, r7, pc}
 800671e:	bf00      	nop
 8006720:	08018a80 	.word	0x08018a80

08006724 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	f2ad 5d84 	subw	sp, sp, #1412	@ 0x584
 800672a:	af06      	add	r7, sp, #24
 800672c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006730:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 8006734:	6018      	str	r0, [r3, #0]
 8006736:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800673a:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800673e:	6019      	str	r1, [r3, #0]
 8006740:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006744:	f2a3 5364 	subw	r3, r3, #1380	@ 0x564
 8006748:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 800674a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800674e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006752:	4618      	mov	r0, r3
 8006754:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8006758:	461a      	mov	r2, r3
 800675a:	2100      	movs	r1, #0
 800675c:	f00e f965 	bl	8014a2a <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8006760:	f7ff fd4c 	bl	80061fc <micros_64>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800676c:	f5a1 710e 	sub.w	r1, r1, #568	@ 0x238
 8006770:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 8006774:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006778:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800677c:	4618      	mov	r0, r3
 800677e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8006782:	461a      	mov	r2, r3
 8006784:	2100      	movs	r1, #0
 8006786:	f00e f950 	bl	8014a2a <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006796:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 80067a0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067a4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2204      	movs	r2, #4
 80067ac:	49c2      	ldr	r1, [pc, #776]	@ (8006ab8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x394>)
 80067ae:	4618      	mov	r0, r3
 80067b0:	f00e f911 	bl	80149d6 <memcmp>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d15c      	bne.n	8006874 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 80067ba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067be:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d113      	bne.n	80067f4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80067cc:	2104      	movs	r1, #4
 80067ce:	48bb      	ldr	r0, [pc, #748]	@ (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80067d0:	f005 f9b6 	bl	800bb40 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 80067d4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067d8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80067e2:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80067e6:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 80067ea:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
 80067ee:	4618      	mov	r0, r3
 80067f0:	f003 fa0a 	bl	8009c08 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 80067f4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067f8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80067fc:	2201      	movs	r2, #1
 80067fe:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006800:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006804:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006808:	2201      	movs	r2, #1
 800680a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 800680c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006810:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006814:	2204      	movs	r2, #4
 8006816:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 800681a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800681e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006822:	4618      	mov	r0, r3
 8006824:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006828:	461a      	mov	r2, r3
 800682a:	2100      	movs	r1, #0
 800682c:	f00e f8fd 	bl	8014a2a <memset>
        result.value.elements[0] = tv; //PZDC!!!
 8006830:	f507 63ac 	add.w	r3, r7, #1376	@ 0x560
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800683c:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 8006840:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8006844:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006848:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800684c:	2201      	movs	r2, #1
 800684e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer64 = result;
 8006852:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006856:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800685a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800685e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800686a:	461a      	mov	r2, r3
 800686c:	f00e f9c3 	bl	8014bf6 <memcpy>
 8006870:	f000 bcf7 	b.w	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 8006874:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006878:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2204      	movs	r2, #4
 8006880:	498f      	ldr	r1, [pc, #572]	@ (8006ac0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x39c>)
 8006882:	4618      	mov	r0, r3
 8006884:	f00e f8a7 	bl	80149d6 <memcmp>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d168      	bne.n	8006960 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x23c>

    	int32_t pos = register_access_request.value.integer32.value.elements[0];
 800688e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006892:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800689c:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
    	int32_t rv;
    	if (pos > jc.upper_limit_ticks && pos < jc.lower_limit_ticks)
 80068a0:	4b88      	ldr	r3, [pc, #544]	@ (8006ac4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80068a8:	429a      	cmp	r2, r3
 80068aa:	dd0e      	ble.n	80068ca <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
 80068ac:	4b85      	ldr	r3, [pc, #532]	@ (8006ac4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80068b4:	429a      	cmp	r2, r3
 80068b6:	da08      	bge.n	80068ca <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80068b8:	2201      	movs	r2, #1
 80068ba:	2104      	movs	r1, #4
 80068bc:	487f      	ldr	r0, [pc, #508]	@ (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80068be:	f005 f927 	bl	800bb10 <HAL_GPIO_WritePin>
    		rv = 1;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 80068c8:	e009      	b.n	80068de <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1ba>
    	}
    	else
    	{
    		tmc5160_move(pos);
 80068ca:	f8d7 0558 	ldr.w	r0, [r7, #1368]	@ 0x558
 80068ce:	f003 f99b 	bl	8009c08 <tmc5160_move>
    		js.move = 1;
 80068d2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a4>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	709a      	strb	r2, [r3, #2]
    		rv = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
    	}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80068de:	2104      	movs	r1, #4
 80068e0:	4876      	ldr	r0, [pc, #472]	@ (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80068e2:	f005 f92d 	bl	800bb40 <HAL_GPIO_TogglePin>

		//response
        register_access_response.persistent = true;
 80068e6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068ea:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80068ee:	2201      	movs	r2, #1
 80068f0:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80068f2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068f6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80068fa:	2201      	movs	r2, #1
 80068fc:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 80068fe:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006902:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006906:	2209      	movs	r2, #9
 8006908:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 800690c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006910:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006914:	4618      	mov	r0, r3
 8006916:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800691a:	461a      	mov	r2, r3
 800691c:	2100      	movs	r1, #0
 800691e:	f00e f884 	bl	8014a2a <memset>
        result.value.elements[0] = tv;
 8006922:	f8d7 2560 	ldr.w	r2, [r7, #1376]	@ 0x560
 8006926:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800692a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800692e:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006930:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006934:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006938:	2201      	movs	r2, #1
 800693a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 800693e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006942:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006946:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800694a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006956:	461a      	mov	r2, r3
 8006958:	f00e f94d 	bl	8014bf6 <memcpy>
 800695c:	f000 bc81 	b.w	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 8006960:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006964:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2203      	movs	r2, #3
 800696c:	4957      	ldr	r1, [pc, #348]	@ (8006acc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>)
 800696e:	4618      	mov	r0, r3
 8006970:	f00e f831 	bl	80149d6 <memcmp>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d150      	bne.n	8006a1c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2f8>

		tmc5160_set_default_vel();
 800697a:	f003 f9cd 	bl	8009d18 <tmc5160_set_default_vel>
		tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 800697e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006982:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800698c:	4618      	mov	r0, r3
 800698e:	f003 f909 	bl	8009ba4 <tmc5160_position>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006992:	2104      	movs	r1, #4
 8006994:	4849      	ldr	r0, [pc, #292]	@ (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 8006996:	f005 f8d3 	bl	800bb40 <HAL_GPIO_TogglePin>
		js_pos_v = tmc5160_position_read();
 800699a:	f003 fadf 	bl	8009f5c <tmc5160_position_read>
 800699e:	f8c7 055c 	str.w	r0, [r7, #1372]	@ 0x55c
		//response
        register_access_response.persistent = true;
 80069a2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069a6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80069aa:	2201      	movs	r2, #1
 80069ac:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80069ae:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069b2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80069b6:	2201      	movs	r2, #1
 80069b8:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 80069ba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069be:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80069c2:	2209      	movs	r2, #9
 80069c4:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 80069c8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069cc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80069d0:	4618      	mov	r0, r3
 80069d2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80069d6:	461a      	mov	r2, r3
 80069d8:	2100      	movs	r1, #0
 80069da:	f00e f826 	bl	8014a2a <memset>
        result.value.elements[0] = js_pos_v;
 80069de:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069e2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80069e6:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
 80069ea:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 80069ec:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069f0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80069f4:	2201      	movs	r2, #1
 80069f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 80069fa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069fe:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006a02:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a06:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006a12:	461a      	mov	r2, r3
 8006a14:	f00e f8ef 	bl	8014bf6 <memcpy>
 8006a18:	f000 bc23 	b.w	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 8006a1c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a20:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2207      	movs	r2, #7
 8006a28:	4929      	ldr	r1, [pc, #164]	@ (8006ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f00d ffd3 	bl	80149d6 <memcmp>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d150      	bne.n	8006ad8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b4>
		//js_pos_v = enc_angle;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006a36:	2104      	movs	r1, #4
 8006a38:	4820      	ldr	r0, [pc, #128]	@ (8006abc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 8006a3a:	f005 f881 	bl	800bb40 <HAL_GPIO_TogglePin>
		//tv = 0;
		//response
        register_access_response.persistent = true;
 8006a3e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a42:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006a46:	2201      	movs	r2, #1
 8006a48:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006a4a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a4e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006a52:	2201      	movs	r2, #1
 8006a54:	721a      	strb	r2, [r3, #8]
        value._tag_ = 10;
 8006a56:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a5a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006a5e:	220a      	movs	r2, #10
 8006a60:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural16_1_0 result = {};
 8006a64:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a68:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006a72:	461a      	mov	r2, r3
 8006a74:	2100      	movs	r1, #0
 8006a76:	f00d ffd8 	bl	8014a2a <memset>
        result.value.elements[0] = enc_angle;
 8006a7a:	4b16      	ldr	r3, [pc, #88]	@ (8006ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b0>)
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a82:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a86:	801a      	strh	r2, [r3, #0]
        result.value.count = 1;
 8006a88:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a8c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a90:	2201      	movs	r2, #1
 8006a92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural16 = result;
 8006a96:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a9a:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006a9e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006aa2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f00e f8a1 	bl	8014bf6 <memcpy>
 8006ab4:	e3d5      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
 8006ab6:	bf00      	nop
 8006ab8:	20000004 	.word	0x20000004
 8006abc:	48000c00 	.word	0x48000c00
 8006ac0:	20000010 	.word	0x20000010
 8006ac4:	20000440 	.word	0x20000440
 8006ac8:	2000046c 	.word	0x2000046c
 8006acc:	20000018 	.word	0x20000018
 8006ad0:	20000020 	.word	0x20000020
 8006ad4:	20000472 	.word	0x20000472
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 8006ad8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006adc:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	49c7      	ldr	r1, [pc, #796]	@ (8006e04 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e0>)
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f00d ff75 	bl	80149d6 <memcmp>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d156      	bne.n	8006ba0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x47c>
		tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 8006af2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006af6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8006b00:	4618      	mov	r0, r3
 8006b02:	f003 fbc7 	bl	800a294 <tmc5160_set_motor_direction>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006b06:	2104      	movs	r1, #4
 8006b08:	48bf      	ldr	r0, [pc, #764]	@ (8006e08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006b0a:	f005 f819 	bl	800bb40 <HAL_GPIO_TogglePin>
		tv = 0;
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006b1a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006b1e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b22:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006b26:	2201      	movs	r2, #1
 8006b28:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006b2a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b2e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006b32:	2201      	movs	r2, #1
 8006b34:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006b36:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b3a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006b3e:	220b      	movs	r2, #11
 8006b40:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006b44:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b48:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006b52:	461a      	mov	r2, r3
 8006b54:	2100      	movs	r1, #0
 8006b56:	f00d ff68 	bl	8014a2a <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006b5a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b5e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8006b68:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b6c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b70:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006b72:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b76:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 8006b80:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b84:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006b88:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b8c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b90:	4610      	mov	r0, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f00e f82c 	bl	8014bf6 <memcpy>
 8006b9e:	e360      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    	}
    else if (memcmp(register_access_request.name.name.elements, arm_reg_name, ARM_REG_NAME_LEN) == 0) {
 8006ba0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ba4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2203      	movs	r2, #3
 8006bac:	4997      	ldr	r1, [pc, #604]	@ (8006e0c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e8>)
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f00d ff11 	bl	80149d6 <memcmp>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d15a      	bne.n	8006c70 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x54c>
		if(register_access_request.value.integer8.value.elements[0])
 8006bba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006bbe:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4ae>
		{
			tmc5160_arm();
 8006bcc:	f003 fbca 	bl	800a364 <tmc5160_arm>
 8006bd0:	e001      	b.n	8006bd6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4b2>
		}
		else
		{
			tmc5160_disarm();
 8006bd2:	f003 fbbb 	bl	800a34c <tmc5160_disarm>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	488b      	ldr	r0, [pc, #556]	@ (8006e08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006bda:	f004 ffb1 	bl	800bb40 <HAL_GPIO_TogglePin>
		tv = 0;
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006bea:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006bee:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006bf2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006bfa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006bfe:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006c02:	2201      	movs	r2, #1
 8006c04:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006c06:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c0a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006c0e:	220b      	movs	r2, #11
 8006c10:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006c14:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c18:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c22:	461a      	mov	r2, r3
 8006c24:	2100      	movs	r1, #0
 8006c26:	f00d ff00 	bl	8014a2a <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006c2a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c2e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8006c38:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c3c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c40:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006c42:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c46:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 8006c50:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c54:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006c58:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c5c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f00d ffc4 	bl	8014bf6 <memcpy>
 8006c6e:	e2f8      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 8006c70:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c74:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	4964      	ldr	r1, [pc, #400]	@ (8006e10 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6ec>)
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00d fea9 	bl	80149d6 <memcmp>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d14f      	bne.n	8006d2a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x606>
		//ENABLE CALIB
    	calib_move(&jc);
 8006c8a:	4862      	ldr	r0, [pc, #392]	@ (8006e14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006c8c:	f000 fcfc 	bl	8007688 <calib_move>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006c90:	2104      	movs	r1, #4
 8006c92:	485d      	ldr	r0, [pc, #372]	@ (8006e08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006c94:	f004 ff54 	bl	800bb40 <HAL_GPIO_TogglePin>
		tv = 0;
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006ca4:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006ca8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cac:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006cb4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cb8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006cc0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cc4:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006cc8:	220b      	movs	r2, #11
 8006cca:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006cce:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cd2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	f00d fea3 	bl	8014a2a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006ce4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ce8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8006cf2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cf6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006cfa:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006cfc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d00:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006d04:	2201      	movs	r2, #1
 8006d06:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8006d0a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d0e:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006d12:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d16:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006d22:	461a      	mov	r2, r3
 8006d24:	f00d ff67 	bl	8014bf6 <memcpy>
 8006d28:	e29b      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8006d2a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d2e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2209      	movs	r2, #9
 8006d36:	4938      	ldr	r1, [pc, #224]	@ (8006e18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f4>)
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f00d fe4c 	bl	80149d6 <memcmp>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d16d      	bne.n	8006e20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6fc>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006d44:	2104      	movs	r1, #4
 8006d46:	4830      	ldr	r0, [pc, #192]	@ (8006e08 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006d48:	f004 fefa 	bl	800bb40 <HAL_GPIO_TogglePin>
		jc.upper_limit_enc = register_access_request.value.integer32.value.elements[0];
 8006d4c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d50:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d62:	4b2c      	ldr	r3, [pc, #176]	@ (8006e14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006d64:	edc3 7a06 	vstr	s15, [r3, #24]
		joint_config_write(&jc, &jc_a);
 8006d68:	492c      	ldr	r1, [pc, #176]	@ (8006e1c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f8>)
 8006d6a:	482a      	ldr	r0, [pc, #168]	@ (8006e14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006d6c:	f7fb f8d4 	bl	8001f18 <joint_config_write>
		tv = 0;
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006d7c:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8006d80:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d84:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006d88:	2201      	movs	r2, #1
 8006d8a:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006d8c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d90:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006d94:	2201      	movs	r2, #1
 8006d96:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006d98:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d9c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006da0:	2209      	movs	r2, #9
 8006da2:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006da6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006daa:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006dae:	4618      	mov	r0, r3
 8006db0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006db4:	461a      	mov	r2, r3
 8006db6:	2100      	movs	r1, #0
 8006db8:	f00d fe37 	bl	8014a2a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006dbc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006dc0:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006dd0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006dd4:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006dd6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006dda:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8006de4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006de8:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006dec:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006df0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f00d fefa 	bl	8014bf6 <memcpy>
 8006e02:	e22e      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
 8006e04:	2000001c 	.word	0x2000001c
 8006e08:	48000c00 	.word	0x48000c00
 8006e0c:	2000000c 	.word	0x2000000c
 8006e10:	20000028 	.word	0x20000028
 8006e14:	20000440 	.word	0x20000440
 8006e18:	20000030 	.word	0x20000030
 8006e1c:	20000464 	.word	0x20000464
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8006e20:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e24:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2209      	movs	r2, #9
 8006e2c:	49d0      	ldr	r1, [pc, #832]	@ (8007170 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f00d fdd1 	bl	80149d6 <memcmp>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d15f      	bne.n	8006efa <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7d6>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	48cd      	ldr	r0, [pc, #820]	@ (8007174 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8006e3e:	f004 fe7f 	bl	800bb40 <HAL_GPIO_TogglePin>
		jc.lower_limit_enc = register_access_request.value.integer32.value.elements[0];
 8006e42:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e46:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e58:	4bc7      	ldr	r3, [pc, #796]	@ (8007178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006e5a:	edc3 7a07 	vstr	s15, [r3, #28]
		joint_config_write(&jc, &jc_a);
 8006e5e:	49c7      	ldr	r1, [pc, #796]	@ (800717c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8006e60:	48c5      	ldr	r0, [pc, #788]	@ (8007178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006e62:	f7fb f859 	bl	8001f18 <joint_config_write>
		tv = 0;
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006e72:	e9c1 2300 	strd	r2, r3, [r1]
		register_access_response.persistent = true;
 8006e76:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e7a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006e7e:	2201      	movs	r2, #1
 8006e80:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006e82:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e86:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006e8e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e92:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006e96:	2209      	movs	r2, #9
 8006e98:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006e9c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ea0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2100      	movs	r1, #0
 8006eae:	f00d fdbc 	bl	8014a2a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006eb2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006eb6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ec6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006eca:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006ecc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ed0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8006eda:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ede:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006ee2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ee6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006eea:	4610      	mov	r0, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f00d fe7f 	bl	8014bf6 <memcpy>
 8006ef8:	e1b3      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8006efa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006efe:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	499e      	ldr	r1, [pc, #632]	@ (8007180 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5c>)
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f00d fd64 	bl	80149d6 <memcmp>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d15d      	bne.n	8006fd0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8ac>
		tmc5160_set_zero();
 8006f14:	f003 f9f2 	bl	800a2fc <tmc5160_set_zero>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006f18:	2104      	movs	r1, #4
 8006f1a:	4896      	ldr	r0, [pc, #600]	@ (8007174 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8006f1c:	f004 fe10 	bl	800bb40 <HAL_GPIO_TogglePin>
		jc.zero_enc = enc_angle;
 8006f20:	4b98      	ldr	r3, [pc, #608]	@ (8007184 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa60>)
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b94      	ldr	r3, [pc, #592]	@ (8007178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006f28:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8006f2a:	4994      	ldr	r1, [pc, #592]	@ (800717c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8006f2c:	4892      	ldr	r0, [pc, #584]	@ (8007178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006f2e:	f7fa fff3 	bl	8001f18 <joint_config_write>
		tv = 0;
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006f3e:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8006f42:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f46:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006f4e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f52:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006f56:	2201      	movs	r2, #1
 8006f58:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006f5a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f5e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006f62:	2209      	movs	r2, #9
 8006f64:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 8006f68:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f6c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006f70:	4618      	mov	r0, r3
 8006f72:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006f76:	461a      	mov	r2, r3
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f00d fd56 	bl	8014a2a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006f7e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f82:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 fae1 	bl	8000554 <__aeabi_ui2d>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006f9a:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 8006f9e:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8006fa2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fa6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006faa:	2201      	movs	r2, #1
 8006fac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.real64 = result;
 8006fb0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fb4:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006fb8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fbc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f00d fe14 	bl	8014bf6 <memcpy>
 8006fce:	e148      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_value_zero_reg_name, SET_ENC_VALUE_ZERO_REG_NAME_LEN) == 0) {
 8006fd0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fd4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2212      	movs	r2, #18
 8006fdc:	496a      	ldr	r1, [pc, #424]	@ (8007188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa64>)
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f00d fcf9 	bl	80149d6 <memcmp>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d163      	bne.n	80070b2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x98e>
		//SET ENCODER ZERO TODO
		jc.zero_enc = register_access_request.value.integer32.value.elements[0];
 8006fea:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fee:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8007178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006ffc:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8006ffe:	495f      	ldr	r1, [pc, #380]	@ (800717c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8007000:	485d      	ldr	r0, [pc, #372]	@ (8007178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8007002:	f7fa ff89 	bl	8001f18 <joint_config_write>
		tv = 0;
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8007012:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8007016:	2104      	movs	r1, #4
 8007018:	4856      	ldr	r0, [pc, #344]	@ (8007174 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 800701a:	f004 fd91 	bl	800bb40 <HAL_GPIO_TogglePin>
		tv = 0;
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800702a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 800702e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007032:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8007036:	2201      	movs	r2, #1
 8007038:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800703a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800703e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8007042:	2201      	movs	r2, #1
 8007044:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8007046:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800704a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800704e:	2209      	movs	r2, #9
 8007050:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8007054:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007058:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800705c:	4618      	mov	r0, r3
 800705e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007062:	461a      	mov	r2, r3
 8007064:	2100      	movs	r1, #0
 8007066:	f00d fce0 	bl	8014a2a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 800706a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800706e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8007078:	461a      	mov	r2, r3
 800707a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800707e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007082:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8007084:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007088:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800708c:	2201      	movs	r2, #1
 800708e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8007092:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007096:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800709a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800709e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80070a2:	4610      	mov	r0, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80070aa:	461a      	mov	r2, r3
 80070ac:	f00d fda3 	bl	8014bf6 <memcpy>
 80070b0:	e0d7      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 80070b2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070b6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2204      	movs	r2, #4
 80070be:	4933      	ldr	r1, [pc, #204]	@ (800718c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa68>)
 80070c0:	4618      	mov	r0, r3
 80070c2:	f00d fc88 	bl	80149d6 <memcmp>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d163      	bne.n	8007194 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa70>
		//SET NAME FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80070cc:	2104      	movs	r1, #4
 80070ce:	4829      	ldr	r0, [pc, #164]	@ (8007174 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 80070d0:	f004 fd36 	bl	800bb40 <HAL_GPIO_TogglePin>
		tv = 0;
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80070e0:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 80070e4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070e8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80070ec:	2201      	movs	r2, #1
 80070ee:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80070f0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070f4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80070f8:	2201      	movs	r2, #1
 80070fa:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 80070fc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007100:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_String_1_0 result = {};
 800710a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800710e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007112:	4618      	mov	r0, r3
 8007114:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007118:	461a      	mov	r2, r3
 800711a:	2100      	movs	r1, #0
 800711c:	f00d fc85 	bl	8014a2a <memset>

        char mystring[4] = "xyz";
 8007120:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007124:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8007128:	4a19      	ldr	r2, [pc, #100]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa6c>)
 800712a:	601a      	str	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 800712c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007130:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800713a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800713e:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 8007140:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007144:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007148:	2203      	movs	r2, #3
 800714a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value._string = result;
 800714e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007152:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8007156:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800715a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800715e:	4610      	mov	r0, r2
 8007160:	4619      	mov	r1, r3
 8007162:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007166:	461a      	mov	r2, r3
 8007168:	f00d fd45 	bl	8014bf6 <memcpy>
 800716c:	e079      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
 800716e:	bf00      	nop
 8007170:	2000003c 	.word	0x2000003c
 8007174:	48000c00 	.word	0x48000c00
 8007178:	20000440 	.word	0x20000440
 800717c:	20000464 	.word	0x20000464
 8007180:	2000005c 	.word	0x2000005c
 8007184:	20000472 	.word	0x20000472
 8007188:	20000048 	.word	0x20000048
 800718c:	20000068 	.word	0x20000068
 8007190:	007a7978 	.word	0x007a7978
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 8007194:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007198:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2204      	movs	r2, #4
 80071a0:	494a      	ldr	r1, [pc, #296]	@ (80072cc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba8>)
 80071a2:	4618      	mov	r0, r3
 80071a4:	f00d fc17 	bl	80149d6 <memcmp>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d14c      	bne.n	8007248 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb24>
		//SET TYPE OF MOTOR FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80071ae:	2104      	movs	r1, #4
 80071b0:	4847      	ldr	r0, [pc, #284]	@ (80072d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbac>)
 80071b2:	f004 fcc5 	bl	800bb40 <HAL_GPIO_TogglePin>
		tv = 0;
 80071b6:	f04f 0200 	mov.w	r2, #0
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80071c2:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 80071c6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071ca:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80071ce:	2201      	movs	r2, #1
 80071d0:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80071d2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071d6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80071da:	2201      	movs	r2, #1
 80071dc:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80071de:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071e2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80071e6:	220b      	movs	r2, #11
 80071e8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 80071ec:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071f0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80071f4:	4618      	mov	r0, r3
 80071f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80071fa:	461a      	mov	r2, r3
 80071fc:	2100      	movs	r1, #0
 80071fe:	f00d fc14 	bl	8014a2a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8007202:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007206:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8007210:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007214:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007218:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800721a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800721e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007222:	2201      	movs	r2, #1
 8007224:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8007228:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800722c:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8007230:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007234:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007238:	4610      	mov	r0, r2
 800723a:	4619      	mov	r1, r3
 800723c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007240:	461a      	mov	r2, r3
 8007242:	f00d fcd8 	bl	8014bf6 <memcpy>
 8007246:	e00c      	b.n	8007262 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else {
        value._tag_ = 0;
 8007248:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800724c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 8007256:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800725a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8007262:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007266:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800726a:	f507 62ad 	add.w	r2, r7, #1384	@ 0x568
 800726e:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 8007272:	3310      	adds	r3, #16
 8007274:	4611      	mov	r1, r2
 8007276:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800727a:	4618      	mov	r0, r3
 800727c:	f00d fcbb 	bl	8014bf6 <memcpy>

    interface->send_response<RegisterAccessResponse>(
 8007280:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007284:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fc14 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007294:	4604      	mov	r4, r0
 8007296:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800729a:	f2a3 5164 	subw	r1, r3, #1380	@ 0x564
 800729e:	f507 704c 	add.w	r0, r7, #816	@ 0x330
 80072a2:	2304      	movs	r3, #4
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	4a0b      	ldr	r2, [pc, #44]	@ (80072d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbb0>)
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	680b      	ldr	r3, [r1, #0]
 80072b8:	4a07      	ldr	r2, [pc, #28]	@ (80072d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbb4>)
 80072ba:	4601      	mov	r1, r0
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fc85 	bl	8007bcc <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 80072c2:	bf00      	nop
 80072c4:	f207 576c 	addw	r7, r7, #1388	@ 0x56c
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd90      	pop	{r4, r7, pc}
 80072cc:	20000070 	.word	0x20000070
 80072d0:	48000c00 	.word	0x48000c00
 80072d4:	000f4240 	.word	0x000f4240
 80072d8:	2000065c 	.word	0x2000065c

080072dc <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	@ 0x30
 80072e0:	af06      	add	r7, sp, #24
 80072e2:	6078      	str	r0, [r7, #4]
//	pos.radian = steps_to_rads(tmc5160_position_read(), jc->full_steps);
//	uavcan_si_unit_angular_velocity_Scalar_1_0 vel;
//	vel.radian_per_second = steps_to_rads(tmc5160_velocity_read(), jc->full_steps);
	reg_udral_physics_kinematics_rotation_Planar_0_1 js_msg =
	{
			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
 80072e4:	f002 fe3a 	bl	8009f5c <tmc5160_position_read>
 80072e8:	4602      	mov	r2, r0
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f003 f951 	bl	800a598 <steps_to_rads>
 80072f6:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
			.angular_acceleration = eff_in
	};
 80072fa:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
 80072fe:	f002 fe67 	bl	8009fd0 <tmc5160_velocity_read>
 8007302:	4602      	mov	r2, r0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f003 f944 	bl	800a598 <steps_to_rads>
 8007310:	eef0 7a40 	vmov.f32	s15, s0
	};
 8007314:	edc7 7a04 	vstr	s15, [r7, #16]
 8007318:	4b0c      	ldr	r3, [pc, #48]	@ (800734c <send_JS+0x70>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 800731e:	480c      	ldr	r0, [pc, #48]	@ (8007350 <send_JS+0x74>)
 8007320:	f000 fbcc 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007324:	f107 010c 	add.w	r1, r7, #12
 8007328:	2304      	movs	r3, #4
 800732a:	9304      	str	r3, [sp, #16]
 800732c:	4a09      	ldr	r2, [pc, #36]	@ (8007354 <send_JS+0x78>)
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007336:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <send_JS+0x7c>)
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 800733e:	4a07      	ldr	r2, [pc, #28]	@ (800735c <send_JS+0x80>)
 8007340:	f000 fc8d 	bl	8007c5e <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 8007344:	bf00      	nop
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000474 	.word	0x20000474
 8007350:	200004d0 	.word	0x200004d0
 8007354:	000f4240 	.word	0x000f4240
 8007358:	20000774 	.word	0x20000774
 800735c:	20000768 	.word	0x20000768

08007360 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8007366:	463b      	mov	r3, r7
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 800736e:	4b0f      	ldr	r3, [pc, #60]	@ (80073ac <heartbeat+0x4c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 8007374:	480e      	ldr	r0, [pc, #56]	@ (80073b0 <heartbeat+0x50>)
 8007376:	f000 fba1 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800737a:	4639      	mov	r1, r7
 800737c:	2304      	movs	r3, #4
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	4a0c      	ldr	r2, [pc, #48]	@ (80073b4 <heartbeat+0x54>)
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800738a:	4b0b      	ldr	r3, [pc, #44]	@ (80073b8 <heartbeat+0x58>)
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <heartbeat+0x5c>)
 8007394:	f000 fc82 	bl	8007c9c <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <heartbeat+0x4c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	4a03      	ldr	r2, [pc, #12]	@ (80073ac <heartbeat+0x4c>)
 80073a0:	6013      	str	r3, [r2, #0]
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000780 	.word	0x20000780
 80073b0:	200004d0 	.word	0x200004d0
 80073b4:	000f4240 	.word	0x000f4240
 80073b8:	2000077f 	.word	0x2000077f
 80073bc:	20000778 	.word	0x20000778

080073c0 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b08f      	sub	sp, #60	@ 0x3c
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 80073c8:	4b41      	ldr	r3, [pc, #260]	@ (80074d0 <setup_cyphal+0x110>)
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	2105      	movs	r1, #5
 80073d4:	483f      	ldr	r0, [pc, #252]	@ (80074d4 <setup_cyphal+0x114>)
 80073d6:	f000 fc80 	bl	8007cda <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 80073da:	4602      	mov	r2, r0
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fca2 	bl	8007d2c <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	4619      	mov	r1, r3
 80073ee:	483a      	ldr	r0, [pc, #232]	@ (80074d8 <setup_cyphal+0x118>)
 80073f0:	f000 fcab 	bl	8007d4a <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe ff36 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 80073fe:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8007402:	f00c fa30 	bl	8013866 <_Znwj>
 8007406:	4603      	mov	r3, r0
 8007408:	461c      	mov	r4, r3
 800740a:	f107 0310 	add.w	r3, r7, #16
 800740e:	4932      	ldr	r1, [pc, #200]	@ (80074d8 <setup_cyphal+0x118>)
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe ff1a 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007416:	f107 0310 	add.w	r3, r7, #16
 800741a:	4619      	mov	r1, r3
 800741c:	4620      	mov	r0, r4
 800741e:	f7fe ff31 	bl	8006284 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007422:	4b2e      	ldr	r3, [pc, #184]	@ (80074dc <setup_cyphal+0x11c>)
 8007424:	601c      	str	r4, [r3, #0]
 8007426:	f107 0310 	add.w	r3, r7, #16
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe ff1d 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8007430:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8007434:	f00c fa17 	bl	8013866 <_Znwj>
 8007438:	4603      	mov	r3, r0
 800743a:	461c      	mov	r4, r3
 800743c:	f107 0318 	add.w	r3, r7, #24
 8007440:	4925      	ldr	r1, [pc, #148]	@ (80074d8 <setup_cyphal+0x118>)
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe ff01 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007448:	f107 0318 	add.w	r3, r7, #24
 800744c:	4619      	mov	r1, r3
 800744e:	4620      	mov	r0, r4
 8007450:	f7fe ff48 	bl	80062e4 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007454:	4b22      	ldr	r3, [pc, #136]	@ (80074e0 <setup_cyphal+0x120>)
 8007456:	601c      	str	r4, [r3, #0]
 8007458:	f107 0318 	add.w	r3, r7, #24
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe ff04 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 8007462:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8007466:	f00c f9fe 	bl	8013866 <_Znwj>
 800746a:	4603      	mov	r3, r0
 800746c:	461c      	mov	r4, r3
 800746e:	f107 0320 	add.w	r3, r7, #32
 8007472:	4919      	ldr	r1, [pc, #100]	@ (80074d8 <setup_cyphal+0x118>)
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fee8 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800747a:	f107 0320 	add.w	r3, r7, #32
 800747e:	4619      	mov	r1, r3
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff f92b 	bl	80066dc <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007486:	4b17      	ldr	r3, [pc, #92]	@ (80074e4 <setup_cyphal+0x124>)
 8007488:	601c      	str	r4, [r3, #0]
 800748a:	f107 0320 	add.w	r3, r7, #32
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe feeb 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 8007494:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8007498:	f00c f9e5 	bl	8013866 <_Znwj>
 800749c:	4603      	mov	r3, r0
 800749e:	461c      	mov	r4, r3
 80074a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074a4:	490c      	ldr	r1, [pc, #48]	@ (80074d8 <setup_cyphal+0x118>)
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fecf 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80074ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074b0:	4619      	mov	r1, r3
 80074b2:	4620      	mov	r0, r4
 80074b4:	f7ff f80a 	bl	80064cc <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80074b8:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <setup_cyphal+0x128>)
 80074ba:	601c      	str	r4, [r3, #0]
 80074bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fed2 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80074c6:	bf00      	nop
 80074c8:	3734      	adds	r7, #52	@ 0x34
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd90      	pop	{r4, r7, pc}
 80074ce:	bf00      	nop
 80074d0:	200004d8 	.word	0x200004d8
 80074d4:	20000478 	.word	0x20000478
 80074d8:	200004d0 	.word	0x200004d0
 80074dc:	200004f8 	.word	0x200004f8
 80074e0:	20000514 	.word	0x20000514
 80074e4:	20000658 	.word	0x20000658
 80074e8:	20000518 	.word	0x20000518

080074ec <cyphal_loop>:

void cyphal_loop() {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
    interface->loop();
 80074f0:	4804      	ldr	r0, [pc, #16]	@ (8007504 <cyphal_loop+0x18>)
 80074f2:	f000 fae3 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f009 fbf3 	bl	8010ce4 <_ZN15CyphalInterface4loopEv>
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200004d0 	.word	0x200004d0

08007508 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08c      	sub	sp, #48	@ 0x30
 800750c:	af02      	add	r7, sp, #8
 800750e:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8007510:	f107 0320 	add.w	r3, r7, #32
 8007514:	2105      	movs	r1, #5
 8007516:	4618      	mov	r0, r3
 8007518:	f00c f956 	bl	80137c8 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//JS_SUB_PORT_ID //1121
 800751c:	f107 0318 	add.w	r3, r7, #24
 8007520:	f240 4165 	movw	r1, #1125	@ 0x465
 8007524:	4618      	mov	r0, r3
 8007526:	f00c f92f 	bl	8013788 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 800752a:	f107 0310 	add.w	r3, r7, #16
 800752e:	f641 5155 	movw	r1, #7509	@ 0x1d55
 8007532:	4618      	mov	r0, r3
 8007534:	f00c f928 	bl	8013788 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8007538:	f107 0308 	add.w	r3, r7, #8
 800753c:	f107 0218 	add.w	r2, r7, #24
 8007540:	f107 0120 	add.w	r1, r7, #32
 8007544:	4618      	mov	r0, r3
 8007546:	f00c f961 	bl	801380c <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800754a:	4b4c      	ldr	r3, [pc, #304]	@ (800767c <cyphal_can_starter+0x174>)
 800754c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007550:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8007552:	4b4a      	ldr	r3, [pc, #296]	@ (800767c <cyphal_can_starter+0x174>)
 8007554:	2200      	movs	r2, #0
 8007556:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007558:	4b48      	ldr	r3, [pc, #288]	@ (800767c <cyphal_can_starter+0x174>)
 800755a:	2202      	movs	r2, #2
 800755c:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800755e:	4b47      	ldr	r3, [pc, #284]	@ (800767c <cyphal_can_starter+0x174>)
 8007560:	2201      	movs	r2, #1
 8007562:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	4a45      	ldr	r2, [pc, #276]	@ (800767c <cyphal_can_starter+0x174>)
 8007568:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	4a43      	ldr	r2, [pc, #268]	@ (800767c <cyphal_can_starter+0x174>)
 800756e:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8007570:	4b43      	ldr	r3, [pc, #268]	@ (8007680 <cyphal_can_starter+0x178>)
 8007572:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007576:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8007578:	4b41      	ldr	r3, [pc, #260]	@ (8007680 <cyphal_can_starter+0x178>)
 800757a:	2201      	movs	r2, #1
 800757c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800757e:	4b40      	ldr	r3, [pc, #256]	@ (8007680 <cyphal_can_starter+0x178>)
 8007580:	2202      	movs	r2, #2
 8007582:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007584:	4b3e      	ldr	r3, [pc, #248]	@ (8007680 <cyphal_can_starter+0x178>)
 8007586:	2201      	movs	r2, #1
 8007588:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	4a3c      	ldr	r2, [pc, #240]	@ (8007680 <cyphal_can_starter+0x178>)
 800758e:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	4a3b      	ldr	r2, [pc, #236]	@ (8007680 <cyphal_can_starter+0x178>)
 8007594:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8007596:	4b3b      	ldr	r3, [pc, #236]	@ (8007684 <cyphal_can_starter+0x17c>)
 8007598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800759c:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 800759e:	4b39      	ldr	r3, [pc, #228]	@ (8007684 <cyphal_can_starter+0x17c>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80075a4:	4b37      	ldr	r3, [pc, #220]	@ (8007684 <cyphal_can_starter+0x17c>)
 80075a6:	2202      	movs	r2, #2
 80075a8:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80075aa:	4b36      	ldr	r3, [pc, #216]	@ (8007684 <cyphal_can_starter+0x17c>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4a34      	ldr	r2, [pc, #208]	@ (8007684 <cyphal_can_starter+0x17c>)
 80075b4:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4a32      	ldr	r2, [pc, #200]	@ (8007684 <cyphal_can_starter+0x17c>)
 80075ba:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 80075bc:	2302      	movs	r3, #2
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	2302      	movs	r3, #2
 80075c2:	2202      	movs	r2, #2
 80075c4:	2102      	movs	r1, #2
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f003 fe4e 	bl	800b268 <HAL_FDCAN_ConfigGlobalFilter>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80075dc:	f7fa fd9f 	bl	800211e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80075e0:	4926      	ldr	r1, [pc, #152]	@ (800767c <cyphal_can_starter+0x174>)
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f003 fde6 	bl	800b1b4 <HAL_FDCAN_ConfigFilter>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bf14      	ite	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	2300      	moveq	r3, #0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <cyphal_can_starter+0xf4>
	  Error_Handler();
 80075f8:	f7fa fd91 	bl	800211e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 80075fc:	4920      	ldr	r1, [pc, #128]	@ (8007680 <cyphal_can_starter+0x178>)
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f003 fdd8 	bl	800b1b4 <HAL_FDCAN_ConfigFilter>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2301      	movne	r3, #1
 800760c:	2300      	moveq	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <cyphal_can_starter+0x110>
	  Error_Handler();
 8007614:	f7fa fd83 	bl	800211e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8007618:	491a      	ldr	r1, [pc, #104]	@ (8007684 <cyphal_can_starter+0x17c>)
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f003 fdca 	bl	800b1b4 <HAL_FDCAN_ConfigFilter>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf14      	ite	ne
 8007626:	2301      	movne	r3, #1
 8007628:	2300      	moveq	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <cyphal_can_starter+0x12c>
	  Error_Handler();
 8007630:	f7fa fd75 	bl	800211e <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8007634:	2200      	movs	r2, #0
 8007636:	2105      	movs	r1, #5
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f003 fe46 	bl	800b2ca <HAL_FDCAN_ConfigTxDelayCompensation>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf14      	ite	ne
 8007644:	2301      	movne	r3, #1
 8007646:	2300      	moveq	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <cyphal_can_starter+0x14a>
	  Error_Handler();
 800764e:	f7fa fd66 	bl	800211e <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f003 fe5b 	bl	800b30e <HAL_FDCAN_EnableTxDelayCompensation>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <cyphal_can_starter+0x164>
	  Error_Handler();
 8007668:	f7fa fd59 	bl	800211e <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f003 fe6f 	bl	800b350 <HAL_FDCAN_Start>
}
 8007672:	bf00      	nop
 8007674:	3728      	adds	r7, #40	@ 0x28
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	200007b4 	.word	0x200007b4
 8007680:	20000784 	.word	0x20000784
 8007684:	2000079c 	.word	0x2000079c

08007688 <calib_move>:


void calib_move(joint_config * jc)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	int8_t Kp = 100;
 8007690:	2364      	movs	r3, #100	@ 0x64
 8007692:	74fb      	strb	r3, [r7, #19]
	uint32_t epsilon = 10;
 8007694:	230a      	movs	r3, #10
 8007696:	60fb      	str	r3, [r7, #12]
	uint32_t deviation = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
	deviation = jc->zero_enc - enc_angle;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	4a15      	ldr	r2, [pc, #84]	@ (80076f8 <calib_move+0x70>)
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	617b      	str	r3, [r7, #20]
	while(deviation > epsilon)
 80076a8:	e01a      	b.n	80076e0 <calib_move+0x58>
	{
		as50_readAngle(&enc_angle, 100);
 80076aa:	2164      	movs	r1, #100	@ 0x64
 80076ac:	4812      	ldr	r0, [pc, #72]	@ (80076f8 <calib_move+0x70>)
 80076ae:	f7fa f85b 	bl	8001768 <as50_readAngle>
		deviation = jc->direction * (jc->zero_enc - enc_angle);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80076b8:	4619      	mov	r1, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	4a0e      	ldr	r2, [pc, #56]	@ (80076f8 <calib_move+0x70>)
 80076c0:	8812      	ldrh	r2, [r2, #0]
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	617b      	str	r3, [r7, #20]
		tmc5160_move(deviation * Kp);
 80076ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	fb02 f303 	mul.w	r3, r2, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 fa97 	bl	8009c08 <tmc5160_move>
		HAL_Delay(1);
 80076da:	2001      	movs	r0, #1
 80076dc:	f003 f856 	bl	800a78c <HAL_Delay>
	while(deviation > epsilon)
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d8e0      	bhi.n	80076aa <calib_move+0x22>
	}
	tmc5160_stop();
 80076e8:	f002 fe48 	bl	800a37c <tmc5160_stop>
	tmc5160_set_zero();
 80076ec:	f002 fe06 	bl	800a2fc <tmc5160_set_zero>
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000472 	.word	0x20000472

080076fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
      { delete this; }
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3304      	adds	r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	6053      	str	r3, [r2, #4]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	609a      	str	r2, [r3, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	461a      	mov	r2, r3
 8007752:	2300      	movs	r3, #0
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	6053      	str	r3, [r2, #4]
 8007758:	6093      	str	r3, [r2, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff ffde 	bl	800771e <_ZNSt14_Function_baseC1Ev>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f000 fb21 	bl	8007db0 <_ZNKSt8functionIFyvEEcvbEv>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00d      	beq.n	8007790 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	2202      	movs	r2, #2
 800777e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	609a      	str	r2, [r3, #8]
	  }
      }
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	461a      	mov	r2, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	6053      	str	r3, [r2, #4]
 80077ae:	6093      	str	r3, [r2, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff ffb3 	bl	800771e <_ZNSt14_Function_baseC1Ev>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80077be:	6838      	ldr	r0, [r7, #0]
 80077c0:	f000 fb06 	bl	8007dd0 <_ZNKSt8functionIFvvEEcvbEv>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	2202      	movs	r2, #2
 80077d4:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	609a      	str	r2, [r3, #8]
      }
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 faf9 	bl	8007df0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
	return get();
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fae8 	bl	8007df0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8007820:	4603      	mov	r3, r0
      }
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fae5 	bl	8007e0a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ffe6 	bl	800782a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fadd 	bl	8007e32 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007878:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fae2 	bl	8007e4c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8007888:	4604      	mov	r4, r0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 faeb 	bl	8007e66 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8007890:	4603      	mov	r3, r0
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	4620      	mov	r0, r4
 8007898:	f000 faf0 	bl	8007e7c <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
      }
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd90      	pop	{r4, r7, pc}

080078ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fa fc4d 	bl	8002160 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	461a      	mov	r2, r3
 80078de:	2300      	movs	r3, #0
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	6053      	str	r3, [r2, #4]
 80078e4:	6093      	str	r3, [r2, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff ff18 	bl	800771e <_ZNSt14_Function_baseC1Ev>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 80078f4:	6838      	ldr	r0, [r7, #0]
 80078f6:	f000 fad2 	bl	8007e9e <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8007900:	687c      	ldr	r4, [r7, #4]
 8007902:	6838      	ldr	r0, [r7, #0]
 8007904:	f000 fadb 	bl	8007ebe <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007908:	4603      	mov	r3, r0
 800790a:	4619      	mov	r1, r3
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fae1 	bl	8007ed4 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a04      	ldr	r2, [pc, #16]	@ (8007928 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8007916:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a04      	ldr	r2, [pc, #16]	@ (800792c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 800791c:	609a      	str	r2, [r3, #8]
	    }
	}
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bd90      	pop	{r4, r7, pc}
 8007928:	08007ef9 	.word	0x08007ef9
 800792c:	08007f1d 	.word	0x08007f1d

08007930 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8007930:	b590      	push	{r4, r7, lr}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	461a      	mov	r2, r3
 800793e:	2300      	movs	r3, #0
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	6053      	str	r3, [r2, #4]
 8007944:	6093      	str	r3, [r2, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fee8 	bl	800771e <_ZNSt14_Function_baseC1Ev>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8007954:	6838      	ldr	r0, [r7, #0]
 8007956:	f000 fb00 	bl	8007f5a <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00e      	beq.n	800797e <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8007960:	687c      	ldr	r4, [r7, #4]
 8007962:	6838      	ldr	r0, [r7, #0]
 8007964:	f000 fb09 	bl	8007f7a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007968:	4603      	mov	r3, r0
 800796a:	4619      	mov	r1, r3
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fb0f 	bl	8007f90 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a04      	ldr	r2, [pc, #16]	@ (8007988 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8007976:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a04      	ldr	r2, [pc, #16]	@ (800798c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 800797c:	609a      	str	r2, [r3, #8]
	}
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	bd90      	pop	{r4, r7, pc}
 8007988:	08007fb5 	.word	0x08007fb5
 800798c:	08007fd3 	.word	0x08007fd3

08007990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fa fbc7 	bl	8002142 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 80079cc:	f107 0310 	add.w	r3, r7, #16
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe fc39 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80079d8:	88fa      	ldrh	r2, [r7, #6]
 80079da:	f107 0110 	add.w	r1, r7, #16
 80079de:	2300      	movs	r3, #0
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fb15 	bl	8008010 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80079e6:	f107 0310 	add.w	r3, r7, #16
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fc3d 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b086      	sub	sp, #24
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fc1b 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007a14:	88fa      	ldrh	r2, [r7, #6]
 8007a16:	f107 0110 	add.w	r1, r7, #16
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fb29 	bl	8008074 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007a22:	f107 0310 	add.w	r3, r7, #16
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fc1f 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	08018b00 	.word	0x08018b00

08007a58 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	460b      	mov	r3, r1
 8007a68:	80fb      	strh	r3, [r7, #6]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff ffe1 	bl	8007a38 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007a76:	4a10      	ldr	r2, [pc, #64]	@ (8007ab8 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	797a      	ldrb	r2, [r7, #5]
 8007a80:	711a      	strb	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f00c ffcc 	bl	8014a2a <memset>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fbd5 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007aa0:	797a      	ldrb	r2, [r7, #5]
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fb16 	bl	80080d8 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08018ab0 	.word	0x08018ab0

08007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	return _M_get();
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb25 	bl	8008114 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8007aca:	4603      	mov	r3, r0
      }
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8007ad4:	b5b0      	push	{r4, r5, r7, lr}
 8007ad6:	b08c      	sub	sp, #48	@ 0x30
 8007ad8:	af04      	add	r7, sp, #16
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007ae2:	f240 1339 	movw	r3, #313	@ 0x139
 8007ae6:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007ae8:	f107 031c 	add.w	r3, r7, #28
 8007aec:	461a      	mov	r2, r3
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	68b8      	ldr	r0, [r7, #8]
 8007af2:	f7fe f9df 	bl	8005eb4 <uavcan_node_GetInfo_Response_1_0_serialize_>
 8007af6:	4603      	mov	r3, r0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	09db      	lsrs	r3, r3, #7
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	3310      	adds	r3, #16
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fb0f 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b0e:	f107 0314 	add.w	r3, r7, #20
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	809a      	strh	r2, [r3, #4]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	757b      	strb	r3, [r7, #21]
 8007b1c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007b20:	753b      	strb	r3, [r7, #20]
 8007b22:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007b24:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b2a:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b30:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fb0e 	bl	8008158 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b40:	1884      	adds	r4, r0, r2
 8007b42:	eb41 0503 	adc.w	r5, r1, r3
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	9202      	str	r2, [sp, #8]
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4622      	mov	r2, r4
 8007b56:	462b      	mov	r3, r5
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f009 f855 	bl	8010c08 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 8007b5e:	bf00      	nop
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b68 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	460b      	mov	r3, r1
 8007b78:	80fb      	strh	r3, [r7, #6]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff ff59 	bl	8007a38 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007b86:	4a10      	ldr	r2, [pc, #64]	@ (8007bc8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	797a      	ldrb	r2, [r7, #5]
 8007b90:	711a      	strb	r2, [r3, #4]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3308      	adds	r3, #8
 8007b96:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f00c ff44 	bl	8014a2a <memset>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fb4d 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007bb0:	797a      	ldrb	r2, [r7, #5]
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fae7 	bl	800818a <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08018a90 	.word	0x08018a90

08007bcc <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 8007bcc:	b5b0      	push	{r4, r5, r7, lr}
 8007bce:	b08c      	sub	sp, #48	@ 0x30
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007bda:	f240 130b 	movw	r3, #267	@ 0x10b
 8007bde:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007be0:	f107 031c 	add.w	r3, r7, #28
 8007be4:	461a      	mov	r2, r3
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	68b8      	ldr	r0, [r7, #8]
 8007bea:	f7fd ffd1 	bl	8005b90 <uavcan_register_Access_Response_1_0_serialize_>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	09db      	lsrs	r3, r3, #7
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	3310      	adds	r3, #16
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fa93 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007c06:	f107 0314 	add.w	r3, r7, #20
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	809a      	strh	r2, [r3, #4]
 8007c10:	2301      	movs	r3, #1
 8007c12:	757b      	strb	r3, [r7, #21]
 8007c14:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007c18:	753b      	strb	r3, [r7, #20]
 8007c1a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007c1c:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007c22:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007c28:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fa92 	bl	8008158 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c38:	1884      	adds	r4, r0, r2
 8007c3a:	eb41 0503 	adc.w	r5, r1, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	9202      	str	r2, [sp, #8]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	462b      	mov	r3, r5
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f008 ffd9 	bl	8010c08 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 8007c56:	bf00      	nop
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bdb0      	pop	{r4, r5, r7, pc}

08007c5e <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b08a      	sub	sp, #40	@ 0x28
 8007c62:	af06      	add	r7, sp, #24
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007c6c:	8879      	ldrh	r1, [r7, #2]
 8007c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c76:	23ff      	movs	r3, #255	@ 0xff
 8007c78:	9303      	str	r3, [sp, #12]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9302      	str	r3, [sp, #8]
 8007c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fa9a 	bl	80081c8 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08a      	sub	sp, #40	@ 0x28
 8007ca0:	af06      	add	r7, sp, #24
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007caa:	8879      	ldrh	r1, [r7, #2]
 8007cac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cb4:	23ff      	movs	r3, #255	@ 0xff
 8007cb6:	9303      	str	r3, [sp, #12]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fac5 	bl	800825c <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8007cda:	b590      	push	{r4, r7, lr}
 8007cdc:	b08b      	sub	sp, #44	@ 0x2c
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8007cea:	f107 030c 	add.w	r3, r7, #12
 8007cee:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8007cf0:	7afa      	ldrb	r2, [r7, #11]
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	69f8      	ldr	r0, [r7, #28]
 8007cfc:	f000 faf8 	bl	80082f0 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8007d00:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	200c      	movs	r0, #12
 8007d0e:	f7fa fa0c 	bl	800212a <_ZnwjPv>
 8007d12:	4604      	mov	r4, r0
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7fa fb36 	bl	800238c <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8007d20:	613c      	str	r4, [r7, #16]

        return interface;
 8007d22:	693b      	ldr	r3, [r7, #16]
    }
 8007d24:	4618      	mov	r0, r3
 8007d26:	3724      	adds	r7, #36	@ 0x24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fb26 	bl	800838c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8007d4a:	b590      	push	{r4, r7, lr}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8007d54:	687c      	ldr	r4, [r7, #4]
 8007d56:	6838      	ldr	r0, [r7, #0]
 8007d58:	f000 fb30 	bl	80083bc <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 fb36 	bl	80083d2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8007d66:	687b      	ldr	r3, [r7, #4]
      }
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd90      	pop	{r4, r7, pc}

08007d70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
      { }
 8007d78:	4a04      	ldr	r2, [pc, #16]	@ (8007d8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	08018b24 	.word	0x08018b24

08007d90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
      { }
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ffe9 	bl	8007d70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007d9e:	210c      	movs	r1, #12
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f00b fd5e 	bl	8013862 <_ZdlPvj>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fa fa29 	bl	8002212 <_ZNKSt14_Function_base8_M_emptyEv>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f083 0301 	eor.w	r3, r3, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fa fa19 	bl	8002212 <_ZNKSt14_Function_base8_M_emptyEv>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f083 0301 	eor.w	r3, r3, #1
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fb08 	bl	8008410 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007e00:	4603      	mov	r3, r0
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007e0a:	b590      	push	{r4, r7, lr}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fb08 	bl	800842c <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007e1c:	683c      	ldr	r4, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f807 	bl	8007e32 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007e24:	4603      	mov	r3, r0
 8007e26:	601c      	str	r4, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd90      	pop	{r4, r7, pc}

08007e32 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fb02 	bl	8008446 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007e42:	4603      	mov	r3, r0
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fb02 	bl	8008460 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	3218      	adds	r2, #24
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	4790      	blx	r2
      }
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007ede:	6838      	ldr	r0, [r7, #0]
 8007ee0:	f7ff ffed 	bl	8007ebe <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fac5 	bl	800847a <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}

08007ef8 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fad2 	bl	80084aa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fade 	bl	80084ca <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
      }
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d109      	bne.n	8007f44 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007f30:	68b8      	ldr	r0, [r7, #8]
 8007f32:	f000 faba 	bl	80084aa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007f36:	4604      	mov	r4, r0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fad9 	bl	80084f0 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	601c      	str	r4, [r3, #0]
	    break;
 8007f42:	e005      	b.n	8007f50 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fadc 	bl	8008508 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007f50:	2300      	movs	r3, #0
      }
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd90      	pop	{r4, r7, pc}

08007f5a <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bf14      	ite	ne
 8007f68:	2301      	movne	r3, #1
 8007f6a:	2300      	moveq	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007f9a:	6838      	ldr	r0, [r7, #0]
 8007f9c:	f7ff ffed 	bl	8007f7a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fae8 	bl	800857c <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd90      	pop	{r4, r7, pc}

08007fb4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 faf5 	bl	80085ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fb01 	bl	80085cc <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8007fca:	bf00      	nop
      }
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007fd2:	b590      	push	{r4, r7, lr}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d109      	bne.n	8007ffa <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007fe6:	68b8      	ldr	r0, [r7, #8]
 8007fe8:	f000 fae0 	bl	80085ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007fec:	4604      	mov	r4, r0
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fafc 	bl	80085ec <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	601c      	str	r4, [r3, #0]
	    break;
 8007ff8:	e005      	b.n	8008006 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 faff 	bl	8008604 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8008006:	2300      	movs	r3, #0
      }
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	bd90      	pop	{r4, r7, pc}

08008010 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	460b      	mov	r3, r1
 8008020:	80fb      	strh	r3, [r7, #6]
 8008022:	4613      	mov	r3, r2
 8008024:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fd05 	bl	8007a38 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800802e:	4a10      	ldr	r2, [pc, #64]	@ (8008070 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	797a      	ldrb	r2, [r7, #5]
 8008038:	711a      	strb	r2, [r3, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3308      	adds	r3, #8
 800803e:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f00c fcf0 	bl	8014a2a <memset>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe f8f9 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8008058:	797a      	ldrb	r2, [r7, #5]
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	4619      	mov	r1, r3
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fb0a 	bl	8008678 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	08018af0 	.word	0x08018af0

08008074 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	460b      	mov	r3, r1
 8008084:	80fb      	strh	r3, [r7, #6]
 8008086:	4613      	mov	r3, r2
 8008088:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fcd3 	bl	8007a38 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8008092:	4a10      	ldr	r2, [pc, #64]	@ (80080d4 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	797a      	ldrb	r2, [r7, #5]
 800809c:	711a      	strb	r2, [r3, #4]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3308      	adds	r3, #8
 80080a2:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f00c fcbe 	bl	8014a2a <memset>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe f8c7 	bl	800624a <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80080bc:	797a      	ldrb	r2, [r7, #5]
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	4619      	mov	r1, r3
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 faf6 	bl	80086b4 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	08018ad0 	.word	0x08018ad0

080080d8 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af02      	add	r7, sp, #8
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]
 80080e4:	4613      	mov	r3, r2
 80080e6:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff fce1 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3308      	adds	r3, #8
 80080fe:	787a      	ldrb	r2, [r7, #1]
 8008100:	8879      	ldrh	r1, [r7, #2]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	2200      	movs	r2, #0
 8008108:	f008 fdb8 	bl	8010c7c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fae7 	bl	80086f0 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008122:	4603      	mov	r3, r0
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4618      	mov	r0, r3
 8008138:	f7fa f86b 	bl	8002212 <_ZNKSt14_Function_base8_M_emptyEv>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8008142:	f00b fba1 	bl	8013888 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
 8008150:	bf00      	nop
      }
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	f7fa f855 	bl	8002212 <_ZNKSt14_Function_base8_M_emptyEv>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 800816e:	f00b fb8b 	bl	8013888 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
      }
 8008180:	4610      	mov	r0, r2
 8008182:	4619      	mov	r1, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af02      	add	r7, sp, #8
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	807b      	strh	r3, [r7, #2]
 8008196:	4613      	mov	r3, r2
 8008198:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff fc88 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3308      	adds	r3, #8
 80081b0:	787a      	ldrb	r2, [r7, #1]
 80081b2:	8879      	ldrh	r1, [r7, #2]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	f240 2203 	movw	r2, #515	@ 0x203
 80081bc:	f008 fd5e 	bl	8010c7c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 80081c8:	b5b0      	push	{r4, r5, r7, lr}
 80081ca:	b08c      	sub	sp, #48	@ 0x30
 80081cc:	af04      	add	r7, sp, #16
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80081d6:	230c      	movs	r3, #12
 80081d8:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80081da:	f107 031c 	add.w	r3, r7, #28
 80081de:	461a      	mov	r2, r3
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	68b8      	ldr	r0, [r7, #8]
 80081e4:	f7fb f84c 	bl	8003280 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 80081e8:	4603      	mov	r3, r0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	09db      	lsrs	r3, r3, #7
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	3310      	adds	r3, #16
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff ff96 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8008200:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008204:	753b      	strb	r3, [r7, #20]
 8008206:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800820a:	757b      	strb	r3, [r7, #21]
 800820c:	887b      	ldrh	r3, [r7, #2]
 800820e:	82fb      	strh	r3, [r7, #22]
 8008210:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008214:	763b      	strb	r3, [r7, #24]
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff ff99 	bl	8008158 <_ZNKSt8functionIFyvEEclEv>
    push(
 8008226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800822a:	1884      	adds	r4, r0, r2
 800822c:	eb41 0503 	adc.w	r5, r1, r3
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	9202      	str	r2, [sp, #8]
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	4622      	mov	r2, r4
 8008240:	462b      	mov	r3, r5
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f008 fce0 	bl	8010c08 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	3301      	adds	r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	701a      	strb	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bdb0      	pop	{r4, r5, r7, pc}

0800825c <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 800825c:	b5b0      	push	{r4, r5, r7, lr}
 800825e:	b08c      	sub	sp, #48	@ 0x30
 8008260:	af04      	add	r7, sp, #16
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800826a:	2307      	movs	r3, #7
 800826c:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800826e:	f107 031c 	add.w	r3, r7, #28
 8008272:	461a      	mov	r2, r3
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	68b8      	ldr	r0, [r7, #8]
 8008278:	f7fa fca2 	bl	8002bc0 <uavcan_node_Heartbeat_1_0_serialize_>
 800827c:	4603      	mov	r3, r0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	09db      	lsrs	r3, r3, #7
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	3310      	adds	r3, #16
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff ff4c 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8008294:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008298:	753b      	strb	r3, [r7, #20]
 800829a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800829e:	757b      	strb	r3, [r7, #21]
 80082a0:	887b      	ldrh	r3, [r7, #2]
 80082a2:	82fb      	strh	r3, [r7, #22]
 80082a4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80082a8:	763b      	strb	r3, [r7, #24]
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ff4f 	bl	8008158 <_ZNKSt8functionIFyvEEclEv>
    push(
 80082ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082be:	1884      	adds	r4, r0, r2
 80082c0:	eb41 0503 	adc.w	r5, r1, r3
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	9202      	str	r2, [sp, #8]
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	f107 0314 	add.w	r3, r7, #20
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f008 fc96 	bl	8010c08 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	701a      	strb	r2, [r3, #0]
}
 80082e8:	bf00      	nop
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bdb0      	pop	{r4, r5, r7, pc}

080082f0 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 80082f0:	b590      	push	{r4, r7, lr}
 80082f2:	b089      	sub	sp, #36	@ 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4619      	mov	r1, r3
 800830a:	2008      	movs	r0, #8
 800830c:	f7f9 ff0d 	bl	800212a <_ZnwjPv>
 8008310:	4604      	mov	r4, r0
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	4413      	add	r3, r2
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	4618      	mov	r0, r3
 800831e:	f7f8 f919 	bl	8000554 <__aeabi_ui2d>
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	4b18      	ldr	r3, [pc, #96]	@ (8008388 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8008328:	f7f8 f98e 	bl	8000648 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4610      	mov	r0, r2
 8008332:	4619      	mov	r1, r3
 8008334:	f7f8 fc60 	bl	8000bf8 <__aeabi_d2uiz>
 8008338:	4603      	mov	r3, r0
 800833a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800833c:	4619      	mov	r1, r3
 800833e:	4620      	mov	r0, r4
 8008340:	f7fa f85a 	bl	80023f8 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 8008344:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	3308      	adds	r3, #8
 800834a:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	4619      	mov	r1, r3
 8008350:	2044      	movs	r0, #68	@ 0x44
 8008352:	f7f9 feea 	bl	800212a <_ZnwjPv>
 8008356:	4604      	mov	r4, r0
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	68b9      	ldr	r1, [r7, #8]
 800835e:	4620      	mov	r0, r4
 8008360:	f7fa f82e 	bl	80023c0 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8008364:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	79fa      	ldrb	r2, [r7, #7]
 800836a:	69b9      	ldr	r1, [r7, #24]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f9cb 	bl	8008708 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	601a      	str	r2, [r3, #0]
        return ptr;
 800837c:	693b      	ldr	r3, [r7, #16]
    }
 800837e:	4618      	mov	r0, r3
 8008380:	3724      	adds	r7, #36	@ 0x24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd90      	pop	{r4, r7, pc}
 8008386:	bf00      	nop
 8008388:	40040000 	.word	0x40040000

0800838c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	4622      	mov	r2, r4
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f9f3 	bl	8008790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f9fe 	bl	80087ae <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd90      	pop	{r4, r7, pc}

080083bc <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 80083dc:	6838      	ldr	r0, [r7, #0]
 80083de:	f000 f9f1 	bl	80087c4 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80083e2:	4602      	mov	r2, r0
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f9f5 	bl	80087da <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fa0d 	bl	8008816 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	4618      	mov	r0, r3
 8008402:	f7fd fed9 	bl	80061b8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8008406:	687b      	ldr	r3, [r7, #4]
      }
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fa12 	bl	8008844 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008420:	4603      	mov	r3, r0
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fa11 	bl	800885e <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fa14 	bl	800887e <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008456:	4603      	mov	r3, r0
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fa13 	bl	8008896 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008470:	4603      	mov	r3, r0
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800847a:	b590      	push	{r4, r7, lr}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7f9 fe9a 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 800848c:	4603      	mov	r3, r0
 800848e:	4619      	mov	r1, r3
 8008490:	2004      	movs	r0, #4
 8008492:	f7f9 fe4a 	bl	800212a <_ZnwjPv>
 8008496:	4604      	mov	r4, r0
 8008498:	68b8      	ldr	r0, [r7, #8]
 800849a:	f7ff fd10 	bl	8007ebe <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800849e:	4603      	mov	r3, r0
 80084a0:	6023      	str	r3, [r4, #0]
	  }
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd90      	pop	{r4, r7, pc}

080084aa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f9fb 	bl	80088ae <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 80084b8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fa03 	bl	80088c6 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 80084c0:	4603      	mov	r3, r0
	}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80084ca:	b590      	push	{r4, r7, lr}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa02 	bl	80088dc <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80084d8:	4603      	mov	r3, r0
 80084da:	4619      	mov	r1, r3
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fa08 	bl	80088f2 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd90      	pop	{r4, r7, pc}

080084f0 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f9 fe61 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 80084fe:	4603      	mov	r3, r0
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d82a      	bhi.n	8008572 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800851c:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008535 	.word	0x08008535
 8008528:	08008543 	.word	0x08008543
 800852c:	08008557 	.word	0x08008557
 8008530:	08008569 	.word	0x08008569
	      __dest._M_access<const type_info*>() = nullptr;
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f9ee 	bl	8008916 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800853a:	4603      	mov	r3, r0
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
	      break;
 8008540:	e017      	b.n	8008572 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008542:	68b8      	ldr	r0, [r7, #8]
 8008544:	f7ff ffb1 	bl	80084aa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8008548:	4604      	mov	r4, r0
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff ffd0 	bl	80084f0 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8008550:	4603      	mov	r3, r0
 8008552:	601c      	str	r4, [r3, #0]
	      break;
 8008554:	e00d      	b.n	8008572 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8008556:	68b8      	ldr	r0, [r7, #8]
 8008558:	f7ff ffa7 	bl	80084aa <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 800855c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f9e4 	bl	800892e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8008566:	e004      	b.n	8008572 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8008568:	4621      	mov	r1, r4
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f9f1 	bl	8008952 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008570:	bf00      	nop
	  return false;
 8008572:	2300      	movs	r3, #0
	}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	bd90      	pop	{r4, r7, pc}

0800857c <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7f9 fe19 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 800858e:	4603      	mov	r3, r0
 8008590:	4619      	mov	r1, r3
 8008592:	2004      	movs	r0, #4
 8008594:	f7f9 fdc9 	bl	800212a <_ZnwjPv>
 8008598:	4604      	mov	r4, r0
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f7ff fced 	bl	8007f7a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80085a0:	4603      	mov	r3, r0
 80085a2:	6023      	str	r3, [r4, #0]
	  }
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd90      	pop	{r4, r7, pc}

080085ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9d8 	bl	800896a <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80085ba:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 f9e0 	bl	8008982 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80085c2:	4603      	mov	r3, r0
	}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9df 	bl	8008998 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80085da:	4603      	mov	r3, r0
 80085dc:	4619      	mov	r1, r3
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 f9e5 	bl	80089ae <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd90      	pop	{r4, r7, pc}

080085ec <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7f9 fde3 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d82a      	bhi.n	800866e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008618:	a201      	add	r2, pc, #4	@ (adr r2, 8008620 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008631 	.word	0x08008631
 8008624:	0800863f 	.word	0x0800863f
 8008628:	08008653 	.word	0x08008653
 800862c:	08008665 	.word	0x08008665
	      __dest._M_access<const type_info*>() = nullptr;
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f970 	bl	8008916 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8008636:	4603      	mov	r3, r0
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
	      break;
 800863c:	e017      	b.n	800866e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800863e:	68b8      	ldr	r0, [r7, #8]
 8008640:	f7ff ffb4 	bl	80085ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8008644:	4604      	mov	r4, r0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff ffd0 	bl	80085ec <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800864c:	4603      	mov	r3, r0
 800864e:	601c      	str	r4, [r3, #0]
	      break;
 8008650:	e00d      	b.n	800866e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8008652:	68b8      	ldr	r0, [r7, #8]
 8008654:	f7ff ffaa 	bl	80085ac <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8008658:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f9b5 	bl	80089cc <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8008662:	e004      	b.n	800866e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8008664:	4621      	mov	r1, r4
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f9c2 	bl	80089f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800866c:	bf00      	nop
	  return false;
 800866e:	2300      	movs	r3, #0
	}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	bd90      	pop	{r4, r7, pc}

08008678 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af02      	add	r7, sp, #8
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	807b      	strh	r3, [r7, #2]
 8008684:	4613      	mov	r3, r2
 8008686:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fa11 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3308      	adds	r3, #8
 800869e:	787a      	ldrb	r2, [r7, #1]
 80086a0:	8879      	ldrh	r1, [r7, #2]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4613      	mov	r3, r2
 80086a6:	220c      	movs	r2, #12
 80086a8:	f008 fae8 	bl	8010c7c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	807b      	strh	r3, [r7, #2]
 80086c0:	4613      	mov	r3, r2
 80086c2:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff f9f3 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3308      	adds	r3, #8
 80086da:	787a      	ldrb	r2, [r7, #1]
 80086dc:	8879      	ldrh	r1, [r7, #2]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	220c      	movs	r2, #12
 80086e4:	f008 faca 	bl	8010c7c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8008708:	b5b0      	push	{r4, r5, r7, lr}
 800870a:	b08e      	sub	sp, #56	@ 0x38
 800870c:	af00      	add	r7, sp, #0
 800870e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008710:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008712:	4613      	mov	r3, r2
 8008714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8008718:	481a      	ldr	r0, [pc, #104]	@ (8008784 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800871a:	f7ff f869 	bl	80077f0 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8008724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	3310      	adds	r3, #16
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff fcfe 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8008730:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f976 	bl	8008a28 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800873c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008740:	4619      	mov	r1, r3
 8008742:	4810      	ldr	r0, [pc, #64]	@ (8008784 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8008744:	f000 f9a1 	bl	8008a8a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8008748:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800874c:	4618      	mov	r0, r3
 800874e:	f000 f97a 	bl	8008a46 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 8008752:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8008754:	463b      	mov	r3, r7
 8008756:	4a0c      	ldr	r2, [pc, #48]	@ (8008788 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8008758:	490c      	ldr	r1, [pc, #48]	@ (800878c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 800875a:	4618      	mov	r0, r3
 800875c:	f00a fd7e 	bl	801325c <canardInit>
 8008760:	3420      	adds	r4, #32
 8008762:	463d      	mov	r5, r7
 8008764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800876c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8008770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008772:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800877a:	bf00      	nop
 800877c:	3738      	adds	r7, #56	@ 0x38
 800877e:	46bd      	mov	sp, r7
 8008780:	bdb0      	pop	{r4, r5, r7, pc}
 8008782:	bf00      	nop
 8008784:	200009bc 	.word	0x200009bc
 8008788:	08002305 	.word	0x08002305
 800878c:	080022c1 	.word	0x080022c1

08008790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f9a4 	bl	8008aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
	{ }
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3304      	adds	r3, #4
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fcef 	bl	80061d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	1d1a      	adds	r2, r3, #4
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f000 f98b 	bl	8008b1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]
      }
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f98d 	bl	8008b46 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	1d1a      	adds	r2, r3, #4
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f000 f970 	bl	8008b1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4618      	mov	r0, r3
 8008850:	f000 f998 	bl	8008b84 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008854:	4603      	mov	r3, r0
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f998 	bl	8008b9c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f9a0 	bl	8008bb4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f9a2 	bl	8008bd0 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 800888c:	4603      	mov	r3, r0
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9a3 	bl	8008bea <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f9 fc8d 	bl	80021d6 <_ZNKSt9_Any_data9_M_accessEv>
 80088bc:	4603      	mov	r3, r0
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	7138      	strb	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80088fc:	6838      	ldr	r0, [r7, #0]
 80088fe:	f7ff ffed 	bl	80088dc <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008902:	4603      	mov	r3, r0
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4798      	blx	r3
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4610      	mov	r0, r2
 800890e:	4619      	mov	r1, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7f9 fc4e 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 8008924:	4603      	mov	r3, r0
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800892e:	b590      	push	{r4, r7, lr}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008938:	6838      	ldr	r0, [r7, #0]
 800893a:	f000 f962 	bl	8008c02 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800893e:	4603      	mov	r3, r0
 8008940:	4622      	mov	r2, r4
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f967 	bl	8008c18 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	bd90      	pop	{r4, r7, pc}

08008952 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f974 	bl	8008c4a <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7f9 fc2f 	bl	80021d6 <_ZNKSt9_Any_data9_M_accessEv>
 8008978:	4603      	mov	r3, r0
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	7138      	strb	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80089b8:	6838      	ldr	r0, [r7, #0]
 80089ba:	f7ff ffed 	bl	8008998 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80089be:	4603      	mov	r3, r0
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4798      	blx	r3
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80089d6:	6838      	ldr	r0, [r7, #0]
 80089d8:	f000 f943 	bl	8008c62 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80089dc:	4603      	mov	r3, r0
 80089de:	4622      	mov	r2, r4
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f948 	bl	8008c78 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd90      	pop	{r4, r7, pc}

080089f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f955 	bl	8008caa <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f952 	bl	8008cc2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff ffe6 	bl	8008a08 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8008a46:	b590      	push	{r4, r7, lr}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f94a 	bl	8008cea <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008a56:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f94f 	bl	8008d04 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8008a66:	4604      	mov	r4, r0
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f958 	bl	8008d1e <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4619      	mov	r1, r3
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f95d 	bl	8008d34 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
      }
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}

08008a8a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8008a94:	6838      	ldr	r0, [r7, #0]
 8008a96:	f000 f972 	bl	8008d7e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f959 	bl	8008d56 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8008aa4:	6838      	ldr	r0, [r7, #0]
 8008aa6:	f000 f92d 	bl	8008d04 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 f980 	bl	8008db2 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f984 	bl	8008dc8 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f969 	bl	8008d98 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8008ac6:	687b      	ldr	r3, [r7, #4]
	}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3308      	adds	r3, #8
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fec3 	bl	8007868 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8008afc:	2010      	movs	r0, #16
 8008afe:	f00a feb2 	bl	8013866 <_Znwj>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461c      	mov	r4, r3
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f969 	bl	8008de0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	601c      	str	r4, [r3, #0]
	}
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd90      	pop	{r4, r7, pc}

08008b1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	601a      	str	r2, [r3, #0]
      }
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f95b 	bl	8008e0c <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008b56:	4603      	mov	r3, r0
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8008b5c:	6838      	ldr	r0, [r7, #0]
 8008b5e:	f000 f955 	bl	8008e0c <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008b62:	4603      	mov	r3, r0
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8008b6a:	f107 030c 	add.w	r3, r7, #12
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f94c 	bl	8008e0c <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008b74:	4603      	mov	r3, r0
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	601a      	str	r2, [r3, #0]
    }
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f948 	bl	8008e22 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f949 	bl	8008e3c <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f939 	bl	8008e52 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8008be0:	4603      	mov	r3, r0
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f938 	bl	8008e68 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008c18:	b590      	push	{r4, r7, lr}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7f9 facb 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	2004      	movs	r0, #4
 8008c30:	f7f9 fa7b 	bl	800212a <_ZnwjPv>
 8008c34:	4604      	mov	r4, r0
 8008c36:	68b8      	ldr	r0, [r7, #8]
 8008c38:	f7ff ffe3 	bl	8008c02 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6023      	str	r3, [r4, #0]
	  }
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd90      	pop	{r4, r7, pc}

08008c4a <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7f9 fab4 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7f9 fa9b 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	2004      	movs	r0, #4
 8008c90:	f7f9 fa4b 	bl	800212a <_ZnwjPv>
 8008c94:	4604      	mov	r4, r0
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	f7ff ffe3 	bl	8008c62 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6023      	str	r3, [r4, #0]
	  }
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}

08008caa <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7f9 fa84 	bl	80021c0 <_ZNSt9_Any_data9_M_accessEv>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8008cc2:	b590      	push	{r4, r7, lr}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f8d6 	bl	8008e80 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8008cd4:	683c      	ldr	r4, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f807 	bl	8008cea <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	601c      	str	r4, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}

08008cea <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f8d0 	bl	8008e9a <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f8d0 	bl	8008eb4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008d14:	4603      	mov	r3, r0
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d004      	beq.n	8008d4e <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	320c      	adds	r2, #12
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	4790      	blx	r2
      }
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 8008d56:	b590      	push	{r4, r7, lr}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8008d60:	687c      	ldr	r4, [r7, #4]
 8008d62:	463b      	mov	r3, r7
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 f8b2 	bl	8008ece <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 f8b7 	bl	8008ee4 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd90      	pop	{r4, r7, pc}

08008d7e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f8cb 	bl	8008f24 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f8d3 	bl	8008f4e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008da8:	4603      	mov	r3, r0
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f8bb 	bl	8008f68 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8008df2:	4a05      	ldr	r2, [pc, #20]	@ (8008e08 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	08018a64 	.word	0x08018a64

08008e0c <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4618      	mov	r0, r3
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f8b1 	bl	8008f94 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8008e32:	4603      	mov	r3, r0
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f89a 	bl	8008faa <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8008e76:	4603      	mov	r3, r0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 f898 	bl	8008fc0 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 f89b 	bl	8008fe0 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f89a 	bl	8008ff8 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f88e 	bl	8009010 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008efa:	683c      	ldr	r4, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f887 	bl	8009010 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f02:	4603      	mov	r3, r0
 8008f04:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f81e 	bl	8008f4e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008f12:	4603      	mov	r3, r0
 8008f14:	68f9      	ldr	r1, [r7, #12]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f887 	bl	800902a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008f1c:	bf00      	nop
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd90      	pop	{r4, r7, pc}

08008f24 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff fedc 	bl	8008cea <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f32:	4603      	mov	r3, r0
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fed6 	bl	8008cea <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
	return __p;
 8008f44:	68fb      	ldr	r3, [r7, #12]
      }
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 f877 	bl	800904c <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8008f70:	4a07      	ldr	r2, [pc, #28]	@ (8008f90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	605a      	str	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	609a      	str	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	08018b24 	.word	0x08018b24

08008f94 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f84b 	bl	8009064 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f853 	bl	800907c <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f855 	bl	8009098 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f856 	bl	80090b2 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8009006:	4603      	mov	r3, r0
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f855 	bl	80090ca <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009020:	4603      	mov	r3, r0
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	320c      	adds	r2, #12
 800903e:	6812      	ldr	r2, [r2, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	4790      	blx	r2
      }
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f845 	bl	80090e4 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800905a:	4603      	mov	r3, r0
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f845 	bl	80090fc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f835 	bl	8009112 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 80090a8:	4603      	mov	r3, r0
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f834 	bl	8009128 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f833 	bl	8009140 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80090da:	4603      	mov	r3, r0
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f833 	bl	8009158 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f81d 	bl	8009170 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8009136:	4603      	mov	r3, r0
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f81c 	bl	8009186 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 800914e:	4603      	mov	r3, r0
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f81d 	bl	80091a0 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8009166:	4603      	mov	r3, r0
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f810 	bl	80091b6 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8009196:	4603      	mov	r3, r0
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	4a05      	ldr	r2, [pc, #20]	@ (80091ec <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fdc7 	bl	8007d70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	08018a64 	.word	0x08018a64

080091f0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff ffe7 	bl	80091cc <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80091fe:	2110      	movs	r1, #16
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f00a fb2e 	bl	8013862 <_ZdlPvj>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3310      	adds	r3, #16
 800921c:	4618      	mov	r0, r3
 800921e:	f7f9 f816 	bl	800224e <_ZNSt8functionIFvvEED1Ev>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4618      	mov	r0, r3
 8009226:	f7f9 f805 	bl	8002234 <_ZNSt8functionIFyvEED1Ev>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <_Z41__static_initialization_and_destruction_0ii>:

}
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	@ 0x28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d122      	bne.n	800928a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800924a:	4293      	cmp	r3, r2
 800924c:	d11d      	bne.n	800928a <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4917      	ldr	r1, [pc, #92]	@ (80092b0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fb3b 	bl	80078d0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 800925a:	f107 0318 	add.w	r3, r7, #24
 800925e:	4915      	ldr	r1, [pc, #84]	@ (80092b4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fb65 	bl	8007930 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8009266:	f107 0218 	add.w	r2, r7, #24
 800926a:	f107 0308 	add.w	r3, r7, #8
 800926e:	4619      	mov	r1, r3
 8009270:	4811      	ldr	r0, [pc, #68]	@ (80092b8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8009272:	f7f8 fff9 	bl	8002268 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8009276:	f107 0318 	add.w	r3, r7, #24
 800927a:	4618      	mov	r0, r3
 800927c:	f7f8 ffe7 	bl	800224e <_ZNSt8functionIFvvEED1Ev>
 8009280:	f107 0308 	add.w	r3, r7, #8
 8009284:	4618      	mov	r0, r3
 8009286:	f7f8 ffd5 	bl	8002234 <_ZNSt8functionIFyvEED1Ev>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009296:	4293      	cmp	r3, r2
 8009298:	d105      	bne.n	80092a6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800929a:	4807      	ldr	r0, [pc, #28]	@ (80092b8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800929c:	f7ff ffb8 	bl	8009210 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 80092a0:	4806      	ldr	r0, [pc, #24]	@ (80092bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80092a2:	f7fc ffe2 	bl	800626a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80092a6:	bf00      	nop
 80092a8:	3728      	adds	r7, #40	@ 0x28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	080061fd 	.word	0x080061fd
 80092b4:	080061f1 	.word	0x080061f1
 80092b8:	200004d8 	.word	0x200004d8
 80092bc:	200004d0 	.word	0x200004d0

080092c0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68dc      	ldr	r4, [r3, #12]
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d006      	beq.n	80092de <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7ff fbfd 	bl	8008ad0 <_ZN15CyphalInterfaceD1Ev>
 80092d6:	210c      	movs	r1, #12
 80092d8:	4620      	mov	r0, r4
 80092da:	f00a fac2 	bl	8013862 <_ZdlPvj>
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}

080092e6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
      { delete this; }
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ff7b 	bl	80091f0 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 800930c:	2300      	movs	r3, #0
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 800931a:	b580      	push	{r7, lr}
 800931c:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8009320:	af00      	add	r7, sp, #0
 8009322:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009326:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800932a:	6018      	str	r0, [r3, #0]
 800932c:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009330:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8009334:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 8009336:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800933a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe fbb9 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800934a:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800934e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8009352:	f107 0108 	add.w	r1, r7, #8
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	f000 f874 	bl	8009444 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800935c:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009360:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3304      	adds	r3, #4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8009370:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 800937c:	f5a0 7047 	sub.w	r0, r0, #796	@ 0x31c
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	6800      	ldr	r0, [r0, #0]
 8009384:	4798      	blx	r3
    }
 8009386:	bf00      	nop
 8009388:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fb8b 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80093a6:	f107 030c 	add.w	r3, r7, #12
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4619      	mov	r1, r3
 80093ae:	f000 f86a 	bl	8009486 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3304      	adds	r3, #4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f107 010c 	add.w	r1, r7, #12
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3
    }
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fb6d 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80093e2:	f107 030c 	add.w	r3, r7, #12
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4619      	mov	r1, r3
 80093ea:	f000 f86c 	bl	80094c6 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3304      	adds	r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f107 010c 	add.w	r1, r7, #12
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
    }
 8009400:	bf00      	nop
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fb4f 	bl	8007abc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800941e:	f107 0308 	add.w	r3, r7, #8
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	4619      	mov	r1, r3
 8009426:	f000 f86e 	bl	8009506 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3304      	adds	r3, #4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f107 0108 	add.w	r1, r7, #8
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	4798      	blx	r3
    }
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8009450:	f240 2303 	movw	r3, #515	@ 0x203
 8009454:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	f107 0214 	add.w	r2, r7, #20
 800945e:	4619      	mov	r1, r3
 8009460:	68b8      	ldr	r0, [r7, #8]
 8009462:	f7fc fb13 	bl	8005a8c <uavcan_register_Access_Request_1_0_deserialize_>
 8009466:	4603      	mov	r3, r0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	09db      	lsrs	r3, r3, #7
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	3310      	adds	r3, #16
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe fe57 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    }
}
 800947e:	bf00      	nop
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8009486:	b580      	push	{r7, lr}
 8009488:	b086      	sub	sp, #24
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	f107 0214 	add.w	r2, r7, #20
 800949e:	4619      	mov	r1, r3
 80094a0:	68b8      	ldr	r0, [r7, #8]
 80094a2:	f7fc fcdf 	bl	8005e64 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 80094a6:	4603      	mov	r3, r0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	09db      	lsrs	r3, r3, #7
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	3310      	adds	r3, #16
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fe37 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
}
 80094be:	bf00      	nop
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b086      	sub	sp, #24
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80094d2:	230c      	movs	r3, #12
 80094d4:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f107 0214 	add.w	r2, r7, #20
 80094de:	4619      	mov	r1, r3
 80094e0:	68b8      	ldr	r0, [r7, #8]
 80094e2:	f7f9 ffc9 	bl	8003478 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 80094e6:	4603      	mov	r3, r0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	09db      	lsrs	r3, r3, #7
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	3310      	adds	r3, #16
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe fe17 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
}
 80094fe:	bf00      	nop
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8009506:	b580      	push	{r7, lr}
 8009508:	b086      	sub	sp, #24
 800950a:	af00      	add	r7, sp, #0
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009512:	230c      	movs	r3, #12
 8009514:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	f107 0214 	add.w	r2, r7, #20
 800951e:	4619      	mov	r1, r3
 8009520:	68b8      	ldr	r0, [r7, #8]
 8009522:	f7f9 fc33 	bl	8002d8c <uavcan_node_Heartbeat_1_0_deserialize_>
 8009526:	4603      	mov	r3, r0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	09db      	lsrs	r3, r3, #7
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	3310      	adds	r3, #16
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fdf7 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
}
 800953e:	bf00      	nop
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <_GLOBAL__sub_I_buffer>:
 8009546:	b580      	push	{r7, lr}
 8009548:	af00      	add	r7, sp, #0
 800954a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800954e:	2001      	movs	r0, #1
 8009550:	f7ff fe70 	bl	8009234 <_Z41__static_initialization_and_destruction_0ii>
 8009554:	bd80      	pop	{r7, pc}

08009556 <_GLOBAL__sub_D_buffer>:
 8009556:	b580      	push	{r7, lr}
 8009558:	af00      	add	r7, sp, #0
 800955a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800955e:	2000      	movs	r0, #0
 8009560:	f7ff fe68 	bl	8009234 <_Z41__static_initialization_and_destruction_0ii>
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800956c:	4b1b      	ldr	r3, [pc, #108]	@ (80095dc <MX_SPI1_Init+0x74>)
 800956e:	4a1c      	ldr	r2, [pc, #112]	@ (80095e0 <MX_SPI1_Init+0x78>)
 8009570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009572:	4b1a      	ldr	r3, [pc, #104]	@ (80095dc <MX_SPI1_Init+0x74>)
 8009574:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800957a:	4b18      	ldr	r3, [pc, #96]	@ (80095dc <MX_SPI1_Init+0x74>)
 800957c:	2200      	movs	r2, #0
 800957e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009580:	4b16      	ldr	r3, [pc, #88]	@ (80095dc <MX_SPI1_Init+0x74>)
 8009582:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8009586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009588:	4b14      	ldr	r3, [pc, #80]	@ (80095dc <MX_SPI1_Init+0x74>)
 800958a:	2202      	movs	r2, #2
 800958c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800958e:	4b13      	ldr	r3, [pc, #76]	@ (80095dc <MX_SPI1_Init+0x74>)
 8009590:	2201      	movs	r2, #1
 8009592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009594:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <MX_SPI1_Init+0x74>)
 8009596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800959a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800959c:	4b0f      	ldr	r3, [pc, #60]	@ (80095dc <MX_SPI1_Init+0x74>)
 800959e:	2220      	movs	r2, #32
 80095a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095a2:	4b0e      	ldr	r3, [pc, #56]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80095a8:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095ae:	4b0b      	ldr	r3, [pc, #44]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80095b4:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095b6:	2207      	movs	r2, #7
 80095b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80095ba:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095bc:	2200      	movs	r2, #0
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80095c0:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80095c6:	4805      	ldr	r0, [pc, #20]	@ (80095dc <MX_SPI1_Init+0x74>)
 80095c8:	f004 fffa 	bl	800e5c0 <HAL_SPI_Init>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80095d2:	f7f8 fda4 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80095d6:	bf00      	nop
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	200007cc 	.word	0x200007cc
 80095e0:	40013000 	.word	0x40013000

080095e4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80095e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009658 <MX_SPI3_Init+0x74>)
 80095ea:	4a1c      	ldr	r2, [pc, #112]	@ (800965c <MX_SPI3_Init+0x78>)
 80095ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80095ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <MX_SPI3_Init+0x74>)
 80095f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80095f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80095f6:	4b18      	ldr	r3, [pc, #96]	@ (8009658 <MX_SPI3_Init+0x74>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80095fc:	4b16      	ldr	r3, [pc, #88]	@ (8009658 <MX_SPI3_Init+0x74>)
 80095fe:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8009602:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009604:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009606:	2200      	movs	r2, #0
 8009608:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800960a:	4b13      	ldr	r3, [pc, #76]	@ (8009658 <MX_SPI3_Init+0x74>)
 800960c:	2201      	movs	r2, #1
 800960e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009610:	4b11      	ldr	r3, [pc, #68]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009616:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009618:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <MX_SPI3_Init+0x74>)
 800961a:	2218      	movs	r2, #24
 800961c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800961e:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009620:	2200      	movs	r2, #0
 8009622:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009624:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009626:	2200      	movs	r2, #0
 8009628:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <MX_SPI3_Init+0x74>)
 800962c:	2200      	movs	r2, #0
 800962e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009630:	4b09      	ldr	r3, [pc, #36]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009632:	2207      	movs	r2, #7
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009636:	4b08      	ldr	r3, [pc, #32]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009638:	2200      	movs	r2, #0
 800963a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800963c:	4b06      	ldr	r3, [pc, #24]	@ (8009658 <MX_SPI3_Init+0x74>)
 800963e:	2200      	movs	r2, #0
 8009640:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009642:	4805      	ldr	r0, [pc, #20]	@ (8009658 <MX_SPI3_Init+0x74>)
 8009644:	f004 ffbc 	bl	800e5c0 <HAL_SPI_Init>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800964e:	f7f8 fd66 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009652:	bf00      	nop
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000830 	.word	0x20000830
 800965c:	40003c00 	.word	0x40003c00

08009660 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08c      	sub	sp, #48	@ 0x30
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009668:	f107 031c 	add.w	r3, r7, #28
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	605a      	str	r2, [r3, #4]
 8009672:	609a      	str	r2, [r3, #8]
 8009674:	60da      	str	r2, [r3, #12]
 8009676:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a33      	ldr	r2, [pc, #204]	@ (800974c <HAL_SPI_MspInit+0xec>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d131      	bne.n	80096e6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009682:	4b33      	ldr	r3, [pc, #204]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 8009684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009686:	4a32      	ldr	r2, [pc, #200]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 8009688:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800968c:	6613      	str	r3, [r2, #96]	@ 0x60
 800968e:	4b30      	ldr	r3, [pc, #192]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 8009690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009692:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800969a:	4b2d      	ldr	r3, [pc, #180]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 800969c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969e:	4a2c      	ldr	r2, [pc, #176]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 80096a0:	f043 0301 	orr.w	r3, r3, #1
 80096a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 80096a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80096b2:	23e0      	movs	r3, #224	@ 0xe0
 80096b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b6:	2302      	movs	r3, #2
 80096b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096be:	2300      	movs	r3, #0
 80096c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80096c2:	2305      	movs	r3, #5
 80096c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096c6:	f107 031c 	add.w	r3, r7, #28
 80096ca:	4619      	mov	r1, r3
 80096cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096d0:	f002 f89c 	bl	800b80c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80096d4:	2200      	movs	r2, #0
 80096d6:	2100      	movs	r1, #0
 80096d8:	2023      	movs	r0, #35	@ 0x23
 80096da:	f001 f954 	bl	800a986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80096de:	2023      	movs	r0, #35	@ 0x23
 80096e0:	f001 f96b 	bl	800a9ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80096e4:	e02d      	b.n	8009742 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009754 <HAL_SPI_MspInit+0xf4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d128      	bne.n	8009742 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80096f0:	4b17      	ldr	r3, [pc, #92]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 80096f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f4:	4a16      	ldr	r2, [pc, #88]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 80096f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80096fc:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 80096fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009708:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 800970a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800970c:	4a10      	ldr	r2, [pc, #64]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 800970e:	f043 0304 	orr.w	r3, r3, #4
 8009712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009714:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <HAL_SPI_MspInit+0xf0>)
 8009716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009720:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009726:	2302      	movs	r3, #2
 8009728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800972a:	2300      	movs	r3, #0
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800972e:	2300      	movs	r3, #0
 8009730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009732:	2306      	movs	r3, #6
 8009734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009736:	f107 031c 	add.w	r3, r7, #28
 800973a:	4619      	mov	r1, r3
 800973c:	4806      	ldr	r0, [pc, #24]	@ (8009758 <HAL_SPI_MspInit+0xf8>)
 800973e:	f002 f865 	bl	800b80c <HAL_GPIO_Init>
}
 8009742:	bf00      	nop
 8009744:	3730      	adds	r7, #48	@ 0x30
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	40013000 	.word	0x40013000
 8009750:	40021000 	.word	0x40021000
 8009754:	40003c00 	.word	0x40003c00
 8009758:	48000800 	.word	0x48000800

0800975c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009762:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <HAL_MspInit+0x44>)
 8009764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009766:	4a0e      	ldr	r2, [pc, #56]	@ (80097a0 <HAL_MspInit+0x44>)
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	6613      	str	r3, [r2, #96]	@ 0x60
 800976e:	4b0c      	ldr	r3, [pc, #48]	@ (80097a0 <HAL_MspInit+0x44>)
 8009770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	607b      	str	r3, [r7, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800977a:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <HAL_MspInit+0x44>)
 800977c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800977e:	4a08      	ldr	r2, [pc, #32]	@ (80097a0 <HAL_MspInit+0x44>)
 8009780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009784:	6593      	str	r3, [r2, #88]	@ 0x58
 8009786:	4b06      	ldr	r3, [pc, #24]	@ (80097a0 <HAL_MspInit+0x44>)
 8009788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800978a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009792:	f003 ff89 	bl	800d6a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	40021000 	.word	0x40021000

080097a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80097a8:	bf00      	nop
 80097aa:	e7fd      	b.n	80097a8 <NMI_Handler+0x4>

080097ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80097b0:	bf00      	nop
 80097b2:	e7fd      	b.n	80097b0 <HardFault_Handler+0x4>

080097b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80097b8:	bf00      	nop
 80097ba:	e7fd      	b.n	80097b8 <MemManage_Handler+0x4>

080097bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <BusFault_Handler+0x4>

080097c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <UsageFault_Handler+0x4>

080097cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80097d0:	bf00      	nop
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80097da:	b480      	push	{r7}
 80097dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80097de:	bf00      	nop
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80097ec:	bf00      	nop
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80097fa:	f000 ffa9 	bl	800a750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80097fe:	bf00      	nop
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8009808:	4802      	ldr	r0, [pc, #8]	@ (8009814 <DMA1_Channel1_IRQHandler+0x10>)
 800980a:	f001 fa59 	bl	800acc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800980e:	bf00      	nop
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20000374 	.word	0x20000374

08009818 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800981c:	4802      	ldr	r0, [pc, #8]	@ (8009828 <DMA1_Channel2_IRQHandler+0x10>)
 800981e:	f001 fa4f 	bl	800acc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009822:	bf00      	nop
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200003d4 	.word	0x200003d4

0800982c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009830:	4802      	ldr	r0, [pc, #8]	@ (800983c <SPI1_IRQHandler+0x10>)
 8009832:	f005 fb07 	bl	800ee44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009836:	bf00      	nop
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200007cc 	.word	0x200007cc

08009840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009844:	4802      	ldr	r0, [pc, #8]	@ (8009850 <USART2_IRQHandler+0x10>)
 8009846:	f005 ffb5 	bl	800f7b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800984a:	bf00      	nop
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	200008e4 	.word	0x200008e4

08009854 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8009858:	4802      	ldr	r0, [pc, #8]	@ (8009864 <I2C4_EV_IRQHandler+0x10>)
 800985a:	f002 fd41 	bl	800c2e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800985e:	bf00      	nop
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000320 	.word	0x20000320

08009868 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800986c:	4802      	ldr	r0, [pc, #8]	@ (8009878 <I2C4_ER_IRQHandler+0x10>)
 800986e:	f002 fd51 	bl	800c314 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8009872:	bf00      	nop
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000320 	.word	0x20000320

0800987c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
  return 1;
 8009880:	2301      	movs	r3, #1
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <_kill>:

int _kill(int pid, int sig)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009896:	f00b f981 	bl	8014b9c <__errno>
 800989a:	4603      	mov	r3, r0
 800989c:	2216      	movs	r2, #22
 800989e:	601a      	str	r2, [r3, #0]
  return -1;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_exit>:

void _exit (int status)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80098b4:	f04f 31ff 	mov.w	r1, #4294967295
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff ffe7 	bl	800988c <_kill>
  while (1) {}    /* Make sure we hang here */
 80098be:	bf00      	nop
 80098c0:	e7fd      	b.n	80098be <_exit+0x12>

080098c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b086      	sub	sp, #24
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	e00a      	b.n	80098ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80098d4:	f3af 8000 	nop.w
 80098d8:	4601      	mov	r1, r0
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	60ba      	str	r2, [r7, #8]
 80098e0:	b2ca      	uxtb	r2, r1
 80098e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	3301      	adds	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	dbf0      	blt.n	80098d4 <_read+0x12>
  }

  return len;
 80098f2:	687b      	ldr	r3, [r7, #4]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e009      	b.n	8009922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	60ba      	str	r2, [r7, #8]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	3301      	adds	r3, #1
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	429a      	cmp	r2, r3
 8009928:	dbf1      	blt.n	800990e <_write+0x12>
  }
  return len;
 800992a:	687b      	ldr	r3, [r7, #4]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <_close>:

int _close(int file)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800993c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009940:	4618      	mov	r0, r3
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800995c:	605a      	str	r2, [r3, #4]
  return 0;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <_isatty>:

int _isatty(int file)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009974:	2301      	movs	r3, #1
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80099a4:	4a14      	ldr	r2, [pc, #80]	@ (80099f8 <_sbrk+0x5c>)
 80099a6:	4b15      	ldr	r3, [pc, #84]	@ (80099fc <_sbrk+0x60>)
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80099b0:	4b13      	ldr	r3, [pc, #76]	@ (8009a00 <_sbrk+0x64>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d102      	bne.n	80099be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80099b8:	4b11      	ldr	r3, [pc, #68]	@ (8009a00 <_sbrk+0x64>)
 80099ba:	4a12      	ldr	r2, [pc, #72]	@ (8009a04 <_sbrk+0x68>)
 80099bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80099be:	4b10      	ldr	r3, [pc, #64]	@ (8009a00 <_sbrk+0x64>)
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4413      	add	r3, r2
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d207      	bcs.n	80099dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80099cc:	f00b f8e6 	bl	8014b9c <__errno>
 80099d0:	4603      	mov	r3, r0
 80099d2:	220c      	movs	r2, #12
 80099d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80099d6:	f04f 33ff 	mov.w	r3, #4294967295
 80099da:	e009      	b.n	80099f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80099dc:	4b08      	ldr	r3, [pc, #32]	@ (8009a00 <_sbrk+0x64>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80099e2:	4b07      	ldr	r3, [pc, #28]	@ (8009a00 <_sbrk+0x64>)
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4413      	add	r3, r2
 80099ea:	4a05      	ldr	r2, [pc, #20]	@ (8009a00 <_sbrk+0x64>)
 80099ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80099ee:	68fb      	ldr	r3, [r7, #12]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20020000 	.word	0x20020000
 80099fc:	00000400 	.word	0x00000400
 8009a00:	20000894 	.word	0x20000894
 8009a04:	20000b10 	.word	0x20000b10

08009a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009a0c:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <SystemInit+0x20>)
 8009a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a12:	4a05      	ldr	r2, [pc, #20]	@ (8009a28 <SystemInit+0x20>)
 8009a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009a1c:	bf00      	nop
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	e000ed00 	.word	0xe000ed00

08009a2c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08c      	sub	sp, #48	@ 0x30
 8009a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	2224      	movs	r2, #36	@ 0x24
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00a fff5 	bl	8014a2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a40:	463b      	mov	r3, r7
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	605a      	str	r2, [r3, #4]
 8009a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009a4a:	4b23      	ldr	r3, [pc, #140]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a4c:	4a23      	ldr	r2, [pc, #140]	@ (8009adc <MX_TIM8_Init+0xb0>)
 8009a4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009a50:	4b21      	ldr	r3, [pc, #132]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a56:	4b20      	ldr	r3, [pc, #128]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a64:	4b1c      	ldr	r3, [pc, #112]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a70:	4b19      	ldr	r3, [pc, #100]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009a76:	2301      	movs	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009a92:	2300      	movs	r3, #0
 8009a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009a9a:	f107 030c 	add.w	r3, r7, #12
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	480d      	ldr	r0, [pc, #52]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009aa2:	f005 fc47 	bl	800f334 <HAL_TIM_Encoder_Init>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8009aac:	f7f8 fb37 	bl	800211e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009abc:	463b      	mov	r3, r7
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4805      	ldr	r0, [pc, #20]	@ (8009ad8 <MX_TIM8_Init+0xac>)
 8009ac2:	f005 fd91 	bl	800f5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8009acc:	f7f8 fb27 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009ad0:	bf00      	nop
 8009ad2:	3730      	adds	r7, #48	@ 0x30
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000898 	.word	0x20000898
 8009adc:	40013400 	.word	0x40013400

08009ae0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08a      	sub	sp, #40	@ 0x28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae8:	f107 0314 	add.w	r3, r7, #20
 8009aec:	2200      	movs	r2, #0
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	605a      	str	r2, [r3, #4]
 8009af2:	609a      	str	r2, [r3, #8]
 8009af4:	60da      	str	r2, [r3, #12]
 8009af6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a25      	ldr	r2, [pc, #148]	@ (8009b94 <HAL_TIM_Encoder_MspInit+0xb4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d143      	bne.n	8009b8a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009b02:	4b25      	ldr	r3, [pc, #148]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b06:	4a24      	ldr	r2, [pc, #144]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8009b0e:	4b22      	ldr	r3, [pc, #136]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b20:	f043 0304 	orr.w	r3, r3, #4
 8009b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b26:	4b1c      	ldr	r3, [pc, #112]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b32:	4b19      	ldr	r3, [pc, #100]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b36:	4a18      	ldr	r2, [pc, #96]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b38:	f043 0302 	orr.w	r3, r3, #2
 8009b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b3e:	4b16      	ldr	r3, [pc, #88]	@ (8009b98 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	60bb      	str	r3, [r7, #8]
 8009b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009b4a:	2380      	movs	r3, #128	@ 0x80
 8009b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b56:	2300      	movs	r3, #0
 8009b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009b5a:	2304      	movs	r3, #4
 8009b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b5e:	f107 0314 	add.w	r3, r7, #20
 8009b62:	4619      	mov	r1, r3
 8009b64:	480d      	ldr	r0, [pc, #52]	@ (8009b9c <HAL_TIM_Encoder_MspInit+0xbc>)
 8009b66:	f001 fe51 	bl	800b80c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009b6a:	2340      	movs	r3, #64	@ 0x40
 8009b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6e:	2302      	movs	r3, #2
 8009b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b76:	2300      	movs	r3, #0
 8009b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8009b7a:	2305      	movs	r3, #5
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b7e:	f107 0314 	add.w	r3, r7, #20
 8009b82:	4619      	mov	r1, r3
 8009b84:	4806      	ldr	r0, [pc, #24]	@ (8009ba0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8009b86:	f001 fe41 	bl	800b80c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	3728      	adds	r7, #40	@ 0x28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	40013400 	.word	0x40013400
 8009b98:	40021000 	.word	0x40021000
 8009b9c:	48000800 	.word	0x48000800
 8009ba0:	48000400 	.word	0x48000400

08009ba4 <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8009bac:	2300      	movs	r3, #0
 8009bae:	60bb      	str	r3, [r7, #8]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 8009bb4:	23a0      	movs	r3, #160	@ 0xa0
 8009bb6:	723b      	strb	r3, [r7, #8]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	727b      	strb	r3, [r7, #9]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	72bb      	strb	r3, [r7, #10]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	72fb      	strb	r3, [r7, #11]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f96f 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 8009bd2:	23ad      	movs	r3, #173	@ 0xad
 8009bd4:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	0e1b      	lsrs	r3, r3, #24
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	141b      	asrs	r3, r3, #16
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	121b      	asrs	r3, r3, #8
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009bf4:	f107 0308 	add.w	r3, r7, #8
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 f959 	bl	8009eb0 <tmc5160_write>
}
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7f6 fcaf 	bl	8000574 <__aeabi_i2d>
 8009c16:	a33c      	add	r3, pc, #240	@ (adr r3, 8009d08 <tmc5160_move+0x100>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7f6 fd14 	bl	8000648 <__aeabi_dmul>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4610      	mov	r0, r2
 8009c26:	4619      	mov	r1, r3
 8009c28:	f7f6 ffbe 	bl	8000ba8 <__aeabi_d2iz>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	617b      	str	r3, [r7, #20]

	uint8_t WData[5] = {0};
 8009c30:	2300      	movs	r3, #0
 8009c32:	60bb      	str	r3, [r7, #8]
 8009c34:	2300      	movs	r3, #0
 8009c36:	733b      	strb	r3, [r7, #12]
	if (vel_to_go < 0) //select positive or negative mode depending on vel sign
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da0f      	bge.n	8009c5e <tmc5160_move+0x56>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8009c3e:	23a0      	movs	r3, #160	@ 0xa0
 8009c40:	723b      	strb	r3, [r7, #8]
 8009c42:	2300      	movs	r3, #0
 8009c44:	727b      	strb	r3, [r7, #9]
 8009c46:	2300      	movs	r3, #0
 8009c48:	72bb      	strb	r3, [r7, #10]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	72fb      	strb	r3, [r7, #11]
 8009c4e:	2302      	movs	r3, #2
 8009c50:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8009c52:	f107 0308 	add.w	r3, r7, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f92a 	bl	8009eb0 <tmc5160_write>
 8009c5c:	e00e      	b.n	8009c7c <tmc5160_move+0x74>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8009c5e:	23a0      	movs	r3, #160	@ 0xa0
 8009c60:	723b      	strb	r3, [r7, #8]
 8009c62:	2300      	movs	r3, #0
 8009c64:	727b      	strb	r3, [r7, #9]
 8009c66:	2300      	movs	r3, #0
 8009c68:	72bb      	strb	r3, [r7, #10]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	72fb      	strb	r3, [r7, #11]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8009c72:	f107 0308 	add.w	r3, r7, #8
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f91a 	bl	8009eb0 <tmc5160_write>
	}
	vel_to_go = abs(vel_to_go);
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfb8      	it	lt
 8009c82:	425b      	neglt	r3, r3
 8009c84:	617b      	str	r3, [r7, #20]

	int32_t v1;
	v1 = (int32_t)(vel_to_go*0.1);
 8009c86:	6978      	ldr	r0, [r7, #20]
 8009c88:	f7f6 fc74 	bl	8000574 <__aeabi_i2d>
 8009c8c:	a320      	add	r3, pc, #128	@ (adr r3, 8009d10 <tmc5160_move+0x108>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	f7f6 fcd9 	bl	8000648 <__aeabi_dmul>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f7f6 ff83 	bl	8000ba8 <__aeabi_d2iz>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	613b      	str	r3, [r7, #16]


	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009ca6:	23a5      	movs	r3, #165	@ 0xa5
 8009ca8:	723b      	strb	r3, [r7, #8]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	0e1b      	lsrs	r3, r3, #24
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	727b      	strb	r3, [r7, #9]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	141b      	asrs	r3, r3, #16
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	72bb      	strb	r3, [r7, #10]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	121b      	asrs	r3, r3, #8
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	72fb      	strb	r3, [r7, #11]
	WData[4] = (v1 & 0x000000FF);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 f8ef 	bl	8009eb0 <tmc5160_write>

	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009cd2:	23a7      	movs	r3, #167	@ 0xa7
 8009cd4:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	0e1b      	lsrs	r3, r3, #24
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	141b      	asrs	r3, r3, #16
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	121b      	asrs	r3, r3, #8
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009cf4:	f107 0308 	add.w	r3, r7, #8
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 f8d9 	bl	8009eb0 <tmc5160_write>
}
 8009cfe:	bf00      	nop
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	77ffebde 	.word	0x77ffebde
 8009d0c:	3ff65e9f 	.word	0x3ff65e9f
 8009d10:	9999999a 	.word	0x9999999a
 8009d14:	3fb99999 	.word	0x3fb99999

08009d18 <tmc5160_set_default_vel>:

void tmc5160_set_default_vel()
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009d1e:	2300      	movs	r3, #0
 8009d20:	603b      	str	r3, [r7, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	713b      	strb	r3, [r7, #4]

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 8009d26:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8009d2a:	f000 f859 	bl	8009de0 <tmc5160_velocity>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009d2e:	23a3      	movs	r3, #163	@ 0xa3
 8009d30:	703b      	strb	r3, [r7, #0]
 8009d32:	2300      	movs	r3, #0
 8009d34:	707b      	strb	r3, [r7, #1]
 8009d36:	2300      	movs	r3, #0
 8009d38:	70bb      	strb	r3, [r7, #2]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	70fb      	strb	r3, [r7, #3]
 8009d3e:	230a      	movs	r3, #10
 8009d40:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d42:	463b      	mov	r3, r7
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f8b3 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0xff; WData[4] = 0xff; // A1 = 10 000 First acceleration
 8009d4a:	23a4      	movs	r3, #164	@ 0xa4
 8009d4c:	703b      	strb	r3, [r7, #0]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	707b      	strb	r3, [r7, #1]
 8009d52:	2303      	movs	r3, #3
 8009d54:	70bb      	strb	r3, [r7, #2]
 8009d56:	23ff      	movs	r3, #255	@ 0xff
 8009d58:	70fb      	strb	r3, [r7, #3]
 8009d5a:	23ff      	movs	r3, #255	@ 0xff
 8009d5c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d5e:	463b      	mov	r3, r7
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f8a5 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0xff; WData[4] = 0xff; // AMAX = 5 000 Acceleration above V1
 8009d66:	23a6      	movs	r3, #166	@ 0xa6
 8009d68:	703b      	strb	r3, [r7, #0]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	707b      	strb	r3, [r7, #1]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	70bb      	strb	r3, [r7, #2]
 8009d72:	23ff      	movs	r3, #255	@ 0xff
 8009d74:	70fb      	strb	r3, [r7, #3]
 8009d76:	23ff      	movs	r3, #255	@ 0xff
 8009d78:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 f897 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0xff; WData[4] = 0xff; // DMAX = 5 000 Deceleration above V1
 8009d82:	23a8      	movs	r3, #168	@ 0xa8
 8009d84:	703b      	strb	r3, [r7, #0]
 8009d86:	2300      	movs	r3, #0
 8009d88:	707b      	strb	r3, [r7, #1]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	70bb      	strb	r3, [r7, #2]
 8009d8e:	23ff      	movs	r3, #255	@ 0xff
 8009d90:	70fb      	strb	r3, [r7, #3]
 8009d92:	23ff      	movs	r3, #255	@ 0xff
 8009d94:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d96:	463b      	mov	r3, r7
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f889 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0xff; WData[4] = 0xff; // D1 = 10 000 Deceleration below V1
 8009d9e:	23aa      	movs	r3, #170	@ 0xaa
 8009da0:	703b      	strb	r3, [r7, #0]
 8009da2:	2300      	movs	r3, #0
 8009da4:	707b      	strb	r3, [r7, #1]
 8009da6:	2303      	movs	r3, #3
 8009da8:	70bb      	strb	r3, [r7, #2]
 8009daa:	23ff      	movs	r3, #255	@ 0xff
 8009dac:	70fb      	strb	r3, [r7, #3]
 8009dae:	23ff      	movs	r3, #255	@ 0xff
 8009db0:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009db2:	463b      	mov	r3, r7
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f87b 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 8009dba:	23ab      	movs	r3, #171	@ 0xab
 8009dbc:	703b      	strb	r3, [r7, #0]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	707b      	strb	r3, [r7, #1]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	70bb      	strb	r3, [r7, #2]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	70fb      	strb	r3, [r7, #3]
 8009dca:	230f      	movs	r3, #15
 8009dcc:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009dce:	463b      	mov	r3, r7
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f86d 	bl	8009eb0 <tmc5160_write>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <tmc5160_velocity>:

void tmc5160_velocity(int32_t vel)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7f6 fbc3 	bl	8000574 <__aeabi_i2d>
 8009dee:	a32c      	add	r3, pc, #176	@ (adr r3, 8009ea0 <tmc5160_velocity+0xc0>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f7f6 fc28 	bl	8000648 <__aeabi_dmul>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f7f6 fed2 	bl	8000ba8 <__aeabi_d2iz>
 8009e04:	4603      	mov	r3, r0
 8009e06:	617b      	str	r3, [r7, #20]
	vel_to_go = abs(vel_to_go);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	bfb8      	it	lt
 8009e0e:	425b      	neglt	r3, r3
 8009e10:	617b      	str	r3, [r7, #20]

	int32_t V1;
	V1 = (int32_t)(vel_to_go*0.1);
 8009e12:	6978      	ldr	r0, [r7, #20]
 8009e14:	f7f6 fbae 	bl	8000574 <__aeabi_i2d>
 8009e18:	a323      	add	r3, pc, #140	@ (adr r3, 8009ea8 <tmc5160_velocity+0xc8>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fc13 	bl	8000648 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4610      	mov	r0, r2
 8009e28:	4619      	mov	r1, r3
 8009e2a:	f7f6 febd 	bl	8000ba8 <__aeabi_d2iz>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	613b      	str	r3, [r7, #16]

	//Acceleration threshold velocity V1
	uint8_t WData[5] = {0};
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	2300      	movs	r3, #0
 8009e38:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA5; //V1 speed register
 8009e3a:	23a5      	movs	r3, #165	@ 0xa5
 8009e3c:	723b      	strb	r3, [r7, #8]
	WData[1] = (V1 & 0xFF000000) >> 24;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	0e1b      	lsrs	r3, r3, #24
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	727b      	strb	r3, [r7, #9]
	WData[2] = (V1 & 0x00FF0000) >> 16;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	141b      	asrs	r3, r3, #16
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	72bb      	strb	r3, [r7, #10]
	WData[3] = (V1 & 0x0000FF00) >> 8;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	121b      	asrs	r3, r3, #8
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	72fb      	strb	r3, [r7, #11]
	WData[4] = (V1 & 0x000000FF);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 f825 	bl	8009eb0 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009e66:	23a7      	movs	r3, #167	@ 0xa7
 8009e68:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	141b      	asrs	r3, r3, #16
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	121b      	asrs	r3, r3, #8
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f80f 	bl	8009eb0 <tmc5160_write>

}
 8009e92:	bf00      	nop
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	77ffebde 	.word	0x77ffebde
 8009ea4:	3ff65e9f 	.word	0x3ff65e9f
 8009ea8:	9999999a 	.word	0x9999999a
 8009eac:	3fb99999 	.word	0x3fb99999

08009eb0 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2110      	movs	r1, #16
 8009ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ec0:	f001 fe26 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 8009ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec8:	2205      	movs	r2, #5
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4806      	ldr	r0, [pc, #24]	@ (8009ee8 <tmc5160_write+0x38>)
 8009ece:	f004 fc22 	bl	800e716 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	2110      	movs	r1, #16
 8009ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009eda:	f001 fe19 	bl	800bb10 <HAL_GPIO_WritePin>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	200007cc 	.word	0x200007cc

08009eec <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2110      	movs	r1, #16
 8009efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009efe:	f001 fe07 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009f02:	f04f 33ff 	mov.w	r3, #4294967295
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2305      	movs	r3, #5
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4812      	ldr	r0, [pc, #72]	@ (8009f58 <tmc5160_read+0x6c>)
 8009f10:	f004 fd76 	bl	800ea00 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009f14:	2201      	movs	r2, #1
 8009f16:	2110      	movs	r1, #16
 8009f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f1c:	f001 fdf8 	bl	800bb10 <HAL_GPIO_WritePin>
	nop();
 8009f20:	bf00      	nop
	nop();
 8009f22:	bf00      	nop
	nop();
 8009f24:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009f26:	2200      	movs	r2, #0
 8009f28:	2110      	movs	r1, #16
 8009f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f2e:	f001 fdef 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009f32:	f04f 33ff 	mov.w	r3, #4294967295
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	2305      	movs	r3, #5
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4806      	ldr	r0, [pc, #24]	@ (8009f58 <tmc5160_read+0x6c>)
 8009f40:	f004 fd5e 	bl	800ea00 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009f44:	2201      	movs	r2, #1
 8009f46:	2110      	movs	r1, #16
 8009f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f4c:	f001 fde0 	bl	800bb10 <HAL_GPIO_WritePin>
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	200007cc 	.word	0x200007cc

08009f5c <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	2300      	movs	r3, #0
 8009f68:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 8009f72:	2321      	movs	r3, #33	@ 0x21
 8009f74:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 8009f76:	1d3a      	adds	r2, r7, #4
 8009f78:	f107 030c 	add.w	r3, r7, #12
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff ffb4 	bl	8009eec <tmc5160_read>

	int32_t response = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8009f88:	797b      	ldrb	r3, [r7, #5]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8009f98:	79bb      	ldrb	r3, [r7, #6]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	021b      	lsls	r3, r3, #8
 8009fa6:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	461a      	mov	r2, r3
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8009fb8:	7a3b      	ldrb	r3, [r7, #8]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]

	return response;
 8009fc2:	697b      	ldr	r3, [r7, #20]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	0000      	movs	r0, r0
	...

08009fd0 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8009fde:	2300      	movs	r3, #0
 8009fe0:	603b      	str	r3, [r7, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 8009fe6:	2322      	movs	r3, #34	@ 0x22
 8009fe8:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8009fea:	463a      	mov	r2, r7
 8009fec:	f107 0308 	add.w	r3, r7, #8
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff ff7a 	bl	8009eec <tmc5160_read>

	int32_t response = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 8009ffc:	787b      	ldrb	r3, [r7, #1]
 8009ffe:	461a      	mov	r2, r3
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 800a00c:	78bb      	ldrb	r3, [r7, #2]
 800a00e:	461a      	mov	r2, r3
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	021b      	lsls	r3, r3, #8
 800a01a:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	461a      	mov	r2, r3
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	021b      	lsls	r3, r3, #8
 800a02a:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 800a02c:	793b      	ldrb	r3, [r7, #4]
 800a02e:	461a      	mov	r2, r3
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	4313      	orrs	r3, r2
 800a034:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 800a03a:	2118      	movs	r1, #24
 800a03c:	6978      	ldr	r0, [r7, #20]
 800a03e:	f000 fa7b 	bl	800a538 <sign_extend_bits_to_32>
 800a042:	6138      	str	r0, [r7, #16]

	return (int32_t)(rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 800a044:	6938      	ldr	r0, [r7, #16]
 800a046:	f7f6 fa95 	bl	8000574 <__aeabi_i2d>
 800a04a:	a309      	add	r3, pc, #36	@ (adr r3, 800a070 <tmc5160_velocity_read+0xa0>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 fc24 	bl	800089c <__aeabi_ddiv>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4610      	mov	r0, r2
 800a05a:	4619      	mov	r1, r3
 800a05c:	f7f6 fda4 	bl	8000ba8 <__aeabi_d2iz>
 800a060:	4603      	mov	r3, r0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w
 800a070:	77ffebde 	.word	0x77ffebde
 800a074:	3ff65e9f 	.word	0x3ff65e9f

0800a078 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a080:	2200      	movs	r2, #0
 800a082:	2120      	movs	r1, #32
 800a084:	4882      	ldr	r0, [pc, #520]	@ (800a290 <tmc5160_init+0x218>)
 800a086:	f001 fd43 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 800a08a:	2201      	movs	r2, #1
 800a08c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a094:	f001 fd3c 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 800a098:	2200      	movs	r2, #0
 800a09a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a09e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0a2:	f001 fd35 	bl	800bb10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	2110      	movs	r1, #16
 800a0aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0ae:	f001 fd2f 	bl	800bb10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0bc:	f001 fd28 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a0c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0ca:	f001 fd21 	bl	800bb10 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a0ce:	2064      	movs	r0, #100	@ 0x64
 800a0d0:	f000 fb5c 	bl	800a78c <HAL_Delay>

	uint8_t WData[5] = {0};
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60bb      	str	r3, [r7, #8]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 800a0dc:	23ec      	movs	r3, #236	@ 0xec
 800a0de:	723b      	strb	r3, [r7, #8]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	727b      	strb	r3, [r7, #9]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	72bb      	strb	r3, [r7, #10]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	72fb      	strb	r3, [r7, #11]
 800a0ec:	23c3      	movs	r3, #195	@ 0xc3
 800a0ee:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0f0:	f107 0308 	add.w	r3, r7, #8
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff fedb 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 800a0fa:	2390      	movs	r3, #144	@ 0x90
 800a0fc:	723b      	strb	r3, [r7, #8]
 800a0fe:	2300      	movs	r3, #0
 800a100:	727b      	strb	r3, [r7, #9]
 800a102:	2300      	movs	r3, #0
 800a104:	72bb      	strb	r3, [r7, #10]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	72fb      	strb	r3, [r7, #11]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4618      	mov	r0, r3
 800a120:	f7ff fec6 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800a124:	2391      	movs	r3, #145	@ 0x91
 800a126:	723b      	strb	r3, [r7, #8]
 800a128:	2300      	movs	r3, #0
 800a12a:	727b      	strb	r3, [r7, #9]
 800a12c:	2300      	movs	r3, #0
 800a12e:	72bb      	strb	r3, [r7, #10]
 800a130:	2300      	movs	r3, #0
 800a132:	72fb      	strb	r3, [r7, #11]
 800a134:	230a      	movs	r3, #10
 800a136:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff feb7 	bl	8009eb0 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 800a142:	23f0      	movs	r3, #240	@ 0xf0
 800a144:	723b      	strb	r3, [r7, #8]
 800a146:	23c4      	movs	r3, #196	@ 0xc4
 800a148:	727b      	strb	r3, [r7, #9]
 800a14a:	230d      	movs	r3, #13
 800a14c:	72bb      	strb	r3, [r7, #10]
 800a14e:	2300      	movs	r3, #0
 800a150:	72fb      	strb	r3, [r7, #11]
 800a152:	231e      	movs	r3, #30
 800a154:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a156:	f107 0308 	add.w	r3, r7, #8
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fea8 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a160:	2380      	movs	r3, #128	@ 0x80
 800a162:	723b      	strb	r3, [r7, #8]
 800a164:	2300      	movs	r3, #0
 800a166:	727b      	strb	r3, [r7, #9]
 800a168:	2300      	movs	r3, #0
 800a16a:	72bb      	strb	r3, [r7, #10]
 800a16c:	2300      	movs	r3, #0
 800a16e:	72fb      	strb	r3, [r7, #11]
 800a170:	2304      	movs	r3, #4
 800a172:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a174:	f107 0308 	add.w	r3, r7, #8
 800a178:	4618      	mov	r0, r3
 800a17a:	f7ff fe99 	bl	8009eb0 <tmc5160_write>

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 800a17e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800a182:	f7ff fe2d 	bl	8009de0 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 800a186:	2393      	movs	r3, #147	@ 0x93
 800a188:	723b      	strb	r3, [r7, #8]
 800a18a:	2300      	movs	r3, #0
 800a18c:	727b      	strb	r3, [r7, #9]
 800a18e:	2300      	movs	r3, #0
 800a190:	72bb      	strb	r3, [r7, #10]
 800a192:	2300      	movs	r3, #0
 800a194:	72fb      	strb	r3, [r7, #11]
 800a196:	23c8      	movs	r3, #200	@ 0xc8
 800a198:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a19a:	f107 0308 	add.w	r3, r7, #8
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff fe86 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 800a1a4:	23a0      	movs	r3, #160	@ 0xa0
 800a1a6:	723b      	strb	r3, [r7, #8]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	727b      	strb	r3, [r7, #9]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	72bb      	strb	r3, [r7, #10]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	72fb      	strb	r3, [r7, #11]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a1b8:	f107 0308 	add.w	r3, r7, #8
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff fe77 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800a1c2:	23a3      	movs	r3, #163	@ 0xa3
 800a1c4:	723b      	strb	r3, [r7, #8]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	727b      	strb	r3, [r7, #9]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	72bb      	strb	r3, [r7, #10]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	72fb      	strb	r3, [r7, #11]
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff fe68 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0xFF; WData[4] = 0xFF; // A1 = 10 000 First acceleration
 800a1e0:	23a4      	movs	r3, #164	@ 0xa4
 800a1e2:	723b      	strb	r3, [r7, #8]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	727b      	strb	r3, [r7, #9]
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	72bb      	strb	r3, [r7, #10]
 800a1ec:	23ff      	movs	r3, #255	@ 0xff
 800a1ee:	72fb      	strb	r3, [r7, #11]
 800a1f0:	23ff      	movs	r3, #255	@ 0xff
 800a1f2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fe59 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0xFF; WData[4] = 0xFF; // AMAX = 5 000 Acceleration above V1
 800a1fe:	23a6      	movs	r3, #166	@ 0xa6
 800a200:	723b      	strb	r3, [r7, #8]
 800a202:	2300      	movs	r3, #0
 800a204:	727b      	strb	r3, [r7, #9]
 800a206:	2300      	movs	r3, #0
 800a208:	72bb      	strb	r3, [r7, #10]
 800a20a:	23ff      	movs	r3, #255	@ 0xff
 800a20c:	72fb      	strb	r3, [r7, #11]
 800a20e:	23ff      	movs	r3, #255	@ 0xff
 800a210:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fe4a 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0xFF; WData[4] = 0xFF; // DMAX = 5 000 Deceleration above V1
 800a21c:	23a8      	movs	r3, #168	@ 0xa8
 800a21e:	723b      	strb	r3, [r7, #8]
 800a220:	2300      	movs	r3, #0
 800a222:	727b      	strb	r3, [r7, #9]
 800a224:	2300      	movs	r3, #0
 800a226:	72bb      	strb	r3, [r7, #10]
 800a228:	23ff      	movs	r3, #255	@ 0xff
 800a22a:	72fb      	strb	r3, [r7, #11]
 800a22c:	23ff      	movs	r3, #255	@ 0xff
 800a22e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a230:	f107 0308 	add.w	r3, r7, #8
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fe3b 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0xFF; WData[4] = 0xFF; // D1 = 10 000 Deceleration below V1
 800a23a:	23aa      	movs	r3, #170	@ 0xaa
 800a23c:	723b      	strb	r3, [r7, #8]
 800a23e:	2300      	movs	r3, #0
 800a240:	727b      	strb	r3, [r7, #9]
 800a242:	2303      	movs	r3, #3
 800a244:	72bb      	strb	r3, [r7, #10]
 800a246:	23ff      	movs	r3, #255	@ 0xff
 800a248:	72fb      	strb	r3, [r7, #11]
 800a24a:	23ff      	movs	r3, #255	@ 0xff
 800a24c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a24e:	f107 0308 	add.w	r3, r7, #8
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fe2c 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 800a258:	23ab      	movs	r3, #171	@ 0xab
 800a25a:	723b      	strb	r3, [r7, #8]
 800a25c:	2300      	movs	r3, #0
 800a25e:	727b      	strb	r3, [r7, #9]
 800a260:	2300      	movs	r3, #0
 800a262:	72bb      	strb	r3, [r7, #10]
 800a264:	2300      	movs	r3, #0
 800a266:	72fb      	strb	r3, [r7, #11]
 800a268:	230f      	movs	r3, #15
 800a26a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fe1d 	bl	8009eb0 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f809 	bl	800a294 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 800a282:	2064      	movs	r0, #100	@ 0x64
 800a284:	f000 fa82 	bl	800a78c <HAL_Delay>
}
 800a288:	bf00      	nop
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	48000800 	.word	0x48000800

0800a294 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 800a29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	dc13      	bgt.n	800a2ce <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	613b      	str	r3, [r7, #16]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a2ae:	2380      	movs	r3, #128	@ 0x80
 800a2b0:	743b      	strb	r3, [r7, #16]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	747b      	strb	r3, [r7, #17]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	74bb      	strb	r3, [r7, #18]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	74fb      	strb	r3, [r7, #19]
 800a2be:	2314      	movs	r3, #20
 800a2c0:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 800a2c2:	f107 0310 	add.w	r3, r7, #16
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff fdf2 	bl	8009eb0 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 800a2cc:	e012      	b.n	800a2f4 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a2d6:	2380      	movs	r3, #128	@ 0x80
 800a2d8:	723b      	strb	r3, [r7, #8]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	727b      	strb	r3, [r7, #9]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	72bb      	strb	r3, [r7, #10]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	72fb      	strb	r3, [r7, #11]
 800a2e6:	2304      	movs	r3, #4
 800a2e8:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff fdde 	bl	8009eb0 <tmc5160_write>
}
 800a2f4:	bf00      	nop
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a302:	2300      	movs	r3, #0
 800a304:	603b      	str	r3, [r7, #0]
 800a306:	2300      	movs	r3, #0
 800a308:	713b      	strb	r3, [r7, #4]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 800a30a:	23a0      	movs	r3, #160	@ 0xa0
 800a30c:	703b      	strb	r3, [r7, #0]
 800a30e:	2300      	movs	r3, #0
 800a310:	707b      	strb	r3, [r7, #1]
 800a312:	2300      	movs	r3, #0
 800a314:	70bb      	strb	r3, [r7, #2]
 800a316:	2300      	movs	r3, #0
 800a318:	70fb      	strb	r3, [r7, #3]
 800a31a:	2303      	movs	r3, #3
 800a31c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a31e:	463b      	mov	r3, r7
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff fdc5 	bl	8009eb0 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 800a326:	23a1      	movs	r3, #161	@ 0xa1
 800a328:	703b      	strb	r3, [r7, #0]
 800a32a:	2300      	movs	r3, #0
 800a32c:	707b      	strb	r3, [r7, #1]
 800a32e:	2300      	movs	r3, #0
 800a330:	70bb      	strb	r3, [r7, #2]
 800a332:	2300      	movs	r3, #0
 800a334:	70fb      	strb	r3, [r7, #3]
 800a336:	2300      	movs	r3, #0
 800a338:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a33a:	463b      	mov	r3, r7
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fdb7 	bl	8009eb0 <tmc5160_write>
}
 800a342:	bf00      	nop
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <tmc5160_disarm>:

void tmc5160_disarm()
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //DRV SLEEP 0 for power on, 1 for power off
 800a350:	2201      	movs	r2, #1
 800a352:	2120      	movs	r1, #32
 800a354:	4802      	ldr	r0, [pc, #8]	@ (800a360 <tmc5160_disarm+0x14>)
 800a356:	f001 fbdb 	bl	800bb10 <HAL_GPIO_WritePin>
}
 800a35a:	bf00      	nop
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	48000800 	.word	0x48000800

0800a364 <tmc5160_arm>:

void tmc5160_arm()
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a368:	2200      	movs	r2, #0
 800a36a:	2120      	movs	r1, #32
 800a36c:	4802      	ldr	r0, [pc, #8]	@ (800a378 <tmc5160_arm+0x14>)
 800a36e:	f001 fbcf 	bl	800bb10 <HAL_GPIO_WritePin>
}
 800a372:	bf00      	nop
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	48000800 	.word	0x48000800

0800a37c <tmc5160_stop>:

void tmc5160_stop()
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a382:	2300      	movs	r3, #0
 800a384:	607b      	str	r3, [r7, #4]
 800a386:	2300      	movs	r3, #0
 800a388:	723b      	strb	r3, [r7, #8]
	uint32_t pos = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Start acceleration = 10 (Near start)
 800a38e:	23a3      	movs	r3, #163	@ 0xa3
 800a390:	713b      	strb	r3, [r7, #4]
 800a392:	2300      	movs	r3, #0
 800a394:	717b      	strb	r3, [r7, #5]
 800a396:	2300      	movs	r3, #0
 800a398:	71bb      	strb	r3, [r7, #6]
 800a39a:	2300      	movs	r3, #0
 800a39c:	71fb      	strb	r3, [r7, #7]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a3a2:	1d3b      	adds	r3, r7, #4
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fd83 	bl	8009eb0 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00;
 800a3aa:	23a7      	movs	r3, #167	@ 0xa7
 800a3ac:	713b      	strb	r3, [r7, #4]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	717b      	strb	r3, [r7, #5]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	71bb      	strb	r3, [r7, #6]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	71fb      	strb	r3, [r7, #7]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a3be:	1d3b      	adds	r3, r7, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff fd75 	bl	8009eb0 <tmc5160_write>

	pos = tmc5160_position_read();
 800a3c6:	f7ff fdc9 	bl	8009f5c <tmc5160_position_read>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	60fb      	str	r3, [r7, #12]
	tmc5160_position(pos);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff fbe7 	bl	8009ba4 <tmc5160_position>
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a3e4:	4b22      	ldr	r3, [pc, #136]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a3e6:	4a23      	ldr	r2, [pc, #140]	@ (800a474 <MX_USART2_UART_Init+0x94>)
 800a3e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a3ea:	4b21      	ldr	r3, [pc, #132]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a3ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a3f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a3fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a400:	2200      	movs	r2, #0
 800a402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a404:	4b1a      	ldr	r3, [pc, #104]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a406:	220c      	movs	r2, #12
 800a408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a40a:	4b19      	ldr	r3, [pc, #100]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a410:	4b17      	ldr	r3, [pc, #92]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a412:	2200      	movs	r2, #0
 800a414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a416:	4b16      	ldr	r3, [pc, #88]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a418:	2200      	movs	r2, #0
 800a41a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a41c:	4b14      	ldr	r3, [pc, #80]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a41e:	2200      	movs	r2, #0
 800a420:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a424:	2200      	movs	r2, #0
 800a426:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a428:	4811      	ldr	r0, [pc, #68]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a42a:	f005 f973 	bl	800f714 <HAL_UART_Init>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a434:	f7f7 fe73 	bl	800211e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a438:	2100      	movs	r1, #0
 800a43a:	480d      	ldr	r0, [pc, #52]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a43c:	f006 fab1 	bl	80109a2 <HAL_UARTEx_SetTxFifoThreshold>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a446:	f7f7 fe6a 	bl	800211e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a44a:	2100      	movs	r1, #0
 800a44c:	4808      	ldr	r0, [pc, #32]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a44e:	f006 fae6 	bl	8010a1e <HAL_UARTEx_SetRxFifoThreshold>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a458:	f7f7 fe61 	bl	800211e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a45c:	4804      	ldr	r0, [pc, #16]	@ (800a470 <MX_USART2_UART_Init+0x90>)
 800a45e:	f006 fa67 	bl	8010930 <HAL_UARTEx_DisableFifoMode>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a468:	f7f7 fe59 	bl	800211e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a46c:	bf00      	nop
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200008e4 	.word	0x200008e4
 800a474:	40004400 	.word	0x40004400

0800a478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b09e      	sub	sp, #120	@ 0x78
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a480:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	605a      	str	r2, [r3, #4]
 800a48a:	609a      	str	r2, [r3, #8]
 800a48c:	60da      	str	r2, [r3, #12]
 800a48e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a490:	f107 0310 	add.w	r3, r7, #16
 800a494:	2254      	movs	r2, #84	@ 0x54
 800a496:	2100      	movs	r1, #0
 800a498:	4618      	mov	r0, r3
 800a49a:	f00a fac6 	bl	8014a2a <memset>
  if(uartHandle->Instance==USART2)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a23      	ldr	r2, [pc, #140]	@ (800a530 <HAL_UART_MspInit+0xb8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d13e      	bne.n	800a526 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f003 fe35 	bl	800e124 <HAL_RCCEx_PeriphCLKConfig>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a4c0:	f7f7 fe2d 	bl	800211e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a534 <HAL_UART_MspInit+0xbc>)
 800a4c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c8:	4a1a      	ldr	r2, [pc, #104]	@ (800a534 <HAL_UART_MspInit+0xbc>)
 800a4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4d0:	4b18      	ldr	r3, [pc, #96]	@ (800a534 <HAL_UART_MspInit+0xbc>)
 800a4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4dc:	4b15      	ldr	r3, [pc, #84]	@ (800a534 <HAL_UART_MspInit+0xbc>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e0:	4a14      	ldr	r2, [pc, #80]	@ (800a534 <HAL_UART_MspInit+0xbc>)
 800a4e2:	f043 0301 	orr.w	r3, r3, #1
 800a4e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4e8:	4b12      	ldr	r3, [pc, #72]	@ (800a534 <HAL_UART_MspInit+0xbc>)
 800a4ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	60bb      	str	r3, [r7, #8]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a4f4:	230c      	movs	r3, #12
 800a4f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a500:	2300      	movs	r3, #0
 800a502:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a504:	2307      	movs	r3, #7
 800a506:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a508:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a50c:	4619      	mov	r1, r3
 800a50e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a512:	f001 f97b 	bl	800b80c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a516:	2200      	movs	r2, #0
 800a518:	2100      	movs	r1, #0
 800a51a:	2026      	movs	r0, #38	@ 0x26
 800a51c:	f000 fa33 	bl	800a986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a520:	2026      	movs	r0, #38	@ 0x26
 800a522:	f000 fa4a 	bl	800a9ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a526:	bf00      	nop
 800a528:	3778      	adds	r7, #120	@ 0x78
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40004400 	.word	0x40004400
 800a534:	40021000 	.word	0x40021000

0800a538 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	2201      	movs	r2, #1
 800a54e:	fa02 f303 	lsl.w	r3, r2, r3
 800a552:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	4013      	ands	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d010      	beq.n	800a588 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 800a56a:	23ff      	movs	r3, #255	@ 0xff
 800a56c:	60bb      	str	r3, [r7, #8]
		res |= x;
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	fa02 f303 	lsl.w	r3, r2, r3
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4313      	orrs	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
		return res;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	e000      	b.n	800a58a <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 800a588:	687b      	ldr	r3, [r7, #4]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	float rads = 0;
 800a5a2:	f04f 0300 	mov.w	r3, #0
 800a5a6:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	ee07 3a90 	vmov	s15, r3
 800a5ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	ee07 3a90 	vmov	s15, r3
 800a5b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a5c0:	ee16 0a90 	vmov	r0, s13
 800a5c4:	f7f5 ffe8 	bl	8000598 <__aeabi_f2d>
 800a5c8:	a30b      	add	r3, pc, #44	@ (adr r3, 800a5f8 <steps_to_rads+0x60>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f6 f83b 	bl	8000648 <__aeabi_dmul>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	4619      	mov	r1, r3
 800a5da:	f7f6 fb2d 	bl	8000c38 <__aeabi_d2f>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	60fb      	str	r3, [r7, #12]
	return rads;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	ee07 3a90 	vmov	s15, r3
}
 800a5e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	54442d18 	.word	0x54442d18
 800a5fc:	401921fb 	.word	0x401921fb

0800a600 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	ed87 0a01 	vstr	s0, [r7, #4]
 800a60a:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a61a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a622:	ee17 0a90 	vmov	r0, s15
 800a626:	f7f5 ffb7 	bl	8000598 <__aeabi_f2d>
 800a62a:	a309      	add	r3, pc, #36	@ (adr r3, 800a650 <rad_to_steps+0x50>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f7f6 f934 	bl	800089c <__aeabi_ddiv>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4610      	mov	r0, r2
 800a63a:	4619      	mov	r1, r3
 800a63c:	f7f6 fab4 	bl	8000ba8 <__aeabi_d2iz>
 800a640:	4603      	mov	r3, r0
 800a642:	60fb      	str	r3, [r7, #12]
	return steps;
 800a644:	68fb      	ldr	r3, [r7, #12]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	54442d18 	.word	0x54442d18
 800a654:	401921fb 	.word	0x401921fb

0800a658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a658:	480d      	ldr	r0, [pc, #52]	@ (800a690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a65a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a65c:	f7ff f9d4 	bl	8009a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a660:	480c      	ldr	r0, [pc, #48]	@ (800a694 <LoopForever+0x6>)
  ldr r1, =_edata
 800a662:	490d      	ldr	r1, [pc, #52]	@ (800a698 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a664:	4a0d      	ldr	r2, [pc, #52]	@ (800a69c <LoopForever+0xe>)
  movs r3, #0
 800a666:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a668:	e002      	b.n	800a670 <LoopCopyDataInit>

0800a66a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a66a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a66c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a66e:	3304      	adds	r3, #4

0800a670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a674:	d3f9      	bcc.n	800a66a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a676:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a678:	4c0a      	ldr	r4, [pc, #40]	@ (800a6a4 <LoopForever+0x16>)
  movs r3, #0
 800a67a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a67c:	e001      	b.n	800a682 <LoopFillZerobss>

0800a67e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a67e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a680:	3204      	adds	r2, #4

0800a682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a684:	d3fb      	bcc.n	800a67e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a686:	f00a fa8f 	bl	8014ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a68a:	f7f7 fc7b 	bl	8001f84 <main>

0800a68e <LoopForever>:

LoopForever:
    b LoopForever
 800a68e:	e7fe      	b.n	800a68e <LoopForever>
  ldr   r0, =_estack
 800a690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a698:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800a69c:	080195ec 	.word	0x080195ec
  ldr r2, =_sbss
 800a6a0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800a6a4:	20000b10 	.word	0x20000b10

0800a6a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a6a8:	e7fe      	b.n	800a6a8 <ADC1_2_IRQHandler>

0800a6aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a6b4:	2003      	movs	r0, #3
 800a6b6:	f000 f95b 	bl	800a970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a6ba:	200f      	movs	r0, #15
 800a6bc:	f000 f80e 	bl	800a6dc <HAL_InitTick>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d002      	beq.n	800a6cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	71fb      	strb	r3, [r7, #7]
 800a6ca:	e001      	b.n	800a6d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a6cc:	f7ff f846 	bl	800975c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a6d0:	79fb      	ldrb	r3, [r7, #7]

}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a6e8:	4b16      	ldr	r3, [pc, #88]	@ (800a744 <HAL_InitTick+0x68>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d022      	beq.n	800a736 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a6f0:	4b15      	ldr	r3, [pc, #84]	@ (800a748 <HAL_InitTick+0x6c>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	4b13      	ldr	r3, [pc, #76]	@ (800a744 <HAL_InitTick+0x68>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a6fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800a700:	fbb2 f3f3 	udiv	r3, r2, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f966 	bl	800a9d6 <HAL_SYSTICK_Config>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10f      	bne.n	800a730 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b0f      	cmp	r3, #15
 800a714:	d809      	bhi.n	800a72a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a716:	2200      	movs	r2, #0
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	f04f 30ff 	mov.w	r0, #4294967295
 800a71e:	f000 f932 	bl	800a986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a722:	4a0a      	ldr	r2, [pc, #40]	@ (800a74c <HAL_InitTick+0x70>)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	e007      	b.n	800a73a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	73fb      	strb	r3, [r7, #15]
 800a72e:	e004      	b.n	800a73a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	73fb      	strb	r3, [r7, #15]
 800a734:	e001      	b.n	800a73a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20000080 	.word	0x20000080
 800a748:	20000078 	.word	0x20000078
 800a74c:	2000007c 	.word	0x2000007c

0800a750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a754:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <HAL_IncTick+0x1c>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	4b05      	ldr	r3, [pc, #20]	@ (800a770 <HAL_IncTick+0x20>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4413      	add	r3, r2
 800a75e:	4a03      	ldr	r2, [pc, #12]	@ (800a76c <HAL_IncTick+0x1c>)
 800a760:	6013      	str	r3, [r2, #0]
}
 800a762:	bf00      	nop
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20000978 	.word	0x20000978
 800a770:	20000080 	.word	0x20000080

0800a774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  return uwTick;
 800a778:	4b03      	ldr	r3, [pc, #12]	@ (800a788 <HAL_GetTick+0x14>)
 800a77a:	681b      	ldr	r3, [r3, #0]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000978 	.word	0x20000978

0800a78c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a794:	f7ff ffee 	bl	800a774 <HAL_GetTick>
 800a798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d004      	beq.n	800a7b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a7a6:	4b09      	ldr	r3, [pc, #36]	@ (800a7cc <HAL_Delay+0x40>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a7b0:	bf00      	nop
 800a7b2:	f7ff ffdf 	bl	800a774 <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d8f7      	bhi.n	800a7b2 <HAL_Delay+0x26>
  {
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000080 	.word	0x20000080

0800a7d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a814 <__NVIC_SetPriorityGrouping+0x44>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a7f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a7fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a802:	4a04      	ldr	r2, [pc, #16]	@ (800a814 <__NVIC_SetPriorityGrouping+0x44>)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	60d3      	str	r3, [r2, #12]
}
 800a808:	bf00      	nop
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	e000ed00 	.word	0xe000ed00

0800a818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a81c:	4b04      	ldr	r3, [pc, #16]	@ (800a830 <__NVIC_GetPriorityGrouping+0x18>)
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	0a1b      	lsrs	r3, r3, #8
 800a822:	f003 0307 	and.w	r3, r3, #7
}
 800a826:	4618      	mov	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	e000ed00 	.word	0xe000ed00

0800a834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a842:	2b00      	cmp	r3, #0
 800a844:	db0b      	blt.n	800a85e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a846:	79fb      	ldrb	r3, [r7, #7]
 800a848:	f003 021f 	and.w	r2, r3, #31
 800a84c:	4907      	ldr	r1, [pc, #28]	@ (800a86c <__NVIC_EnableIRQ+0x38>)
 800a84e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a852:	095b      	lsrs	r3, r3, #5
 800a854:	2001      	movs	r0, #1
 800a856:	fa00 f202 	lsl.w	r2, r0, r2
 800a85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	e000e100 	.word	0xe000e100

0800a870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a87c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a880:	2b00      	cmp	r3, #0
 800a882:	db0a      	blt.n	800a89a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	b2da      	uxtb	r2, r3
 800a888:	490c      	ldr	r1, [pc, #48]	@ (800a8bc <__NVIC_SetPriority+0x4c>)
 800a88a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a88e:	0112      	lsls	r2, r2, #4
 800a890:	b2d2      	uxtb	r2, r2
 800a892:	440b      	add	r3, r1
 800a894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a898:	e00a      	b.n	800a8b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	4908      	ldr	r1, [pc, #32]	@ (800a8c0 <__NVIC_SetPriority+0x50>)
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	f003 030f 	and.w	r3, r3, #15
 800a8a6:	3b04      	subs	r3, #4
 800a8a8:	0112      	lsls	r2, r2, #4
 800a8aa:	b2d2      	uxtb	r2, r2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	761a      	strb	r2, [r3, #24]
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	e000e100 	.word	0xe000e100
 800a8c0:	e000ed00 	.word	0xe000ed00

0800a8c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b089      	sub	sp, #36	@ 0x24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f003 0307 	and.w	r3, r3, #7
 800a8d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	f1c3 0307 	rsb	r3, r3, #7
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	bf28      	it	cs
 800a8e2:	2304      	movcs	r3, #4
 800a8e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	2b06      	cmp	r3, #6
 800a8ec:	d902      	bls.n	800a8f4 <NVIC_EncodePriority+0x30>
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	3b03      	subs	r3, #3
 800a8f2:	e000      	b.n	800a8f6 <NVIC_EncodePriority+0x32>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a902:	43da      	mvns	r2, r3
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	401a      	ands	r2, r3
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a90c:	f04f 31ff 	mov.w	r1, #4294967295
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	fa01 f303 	lsl.w	r3, r1, r3
 800a916:	43d9      	mvns	r1, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a91c:	4313      	orrs	r3, r2
         );
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3724      	adds	r7, #36	@ 0x24
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
	...

0800a92c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3b01      	subs	r3, #1
 800a938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a93c:	d301      	bcc.n	800a942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a93e:	2301      	movs	r3, #1
 800a940:	e00f      	b.n	800a962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a942:	4a0a      	ldr	r2, [pc, #40]	@ (800a96c <SysTick_Config+0x40>)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3b01      	subs	r3, #1
 800a948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a94a:	210f      	movs	r1, #15
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295
 800a950:	f7ff ff8e 	bl	800a870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a954:	4b05      	ldr	r3, [pc, #20]	@ (800a96c <SysTick_Config+0x40>)
 800a956:	2200      	movs	r2, #0
 800a958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a95a:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <SysTick_Config+0x40>)
 800a95c:	2207      	movs	r2, #7
 800a95e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	e000e010 	.word	0xe000e010

0800a970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff ff29 	bl	800a7d0 <__NVIC_SetPriorityGrouping>
}
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b086      	sub	sp, #24
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	4603      	mov	r3, r0
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a994:	f7ff ff40 	bl	800a818 <__NVIC_GetPriorityGrouping>
 800a998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	6978      	ldr	r0, [r7, #20]
 800a9a0:	f7ff ff90 	bl	800a8c4 <NVIC_EncodePriority>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff ff5f 	bl	800a870 <__NVIC_SetPriority>
}
 800a9b2:	bf00      	nop
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a9c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff ff33 	bl	800a834 <__NVIC_EnableIRQ>
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff ffa4 	bl	800a92c <SysTick_Config>
 800a9e4:	4603      	mov	r3, r0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e08d      	b.n	800ab1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	4b47      	ldr	r3, [pc, #284]	@ (800ab28 <HAL_DMA_Init+0x138>)
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d80f      	bhi.n	800aa2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	4b45      	ldr	r3, [pc, #276]	@ (800ab2c <HAL_DMA_Init+0x13c>)
 800aa16:	4413      	add	r3, r2
 800aa18:	4a45      	ldr	r2, [pc, #276]	@ (800ab30 <HAL_DMA_Init+0x140>)
 800aa1a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1e:	091b      	lsrs	r3, r3, #4
 800aa20:	009a      	lsls	r2, r3, #2
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a42      	ldr	r2, [pc, #264]	@ (800ab34 <HAL_DMA_Init+0x144>)
 800aa2a:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa2c:	e00e      	b.n	800aa4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	4b40      	ldr	r3, [pc, #256]	@ (800ab38 <HAL_DMA_Init+0x148>)
 800aa36:	4413      	add	r3, r2
 800aa38:	4a3d      	ldr	r2, [pc, #244]	@ (800ab30 <HAL_DMA_Init+0x140>)
 800aa3a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3e:	091b      	lsrs	r3, r3, #4
 800aa40:	009a      	lsls	r2, r3, #2
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a3c      	ldr	r2, [pc, #240]	@ (800ab3c <HAL_DMA_Init+0x14c>)
 800aa4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800aa62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800aa70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f9cc 	bl	800ae3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aaac:	d102      	bne.n	800aab4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aabc:	b2d2      	uxtb	r2, r2
 800aabe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aac8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d010      	beq.n	800aaf4 <HAL_DMA_Init+0x104>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	d80c      	bhi.n	800aaf4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f9ec 	bl	800aeb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800aaf0:	605a      	str	r2, [r3, #4]
 800aaf2:	e008      	b.n	800ab06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	40020407 	.word	0x40020407
 800ab2c:	bffdfff8 	.word	0xbffdfff8
 800ab30:	cccccccd 	.word	0xcccccccd
 800ab34:	40020000 	.word	0x40020000
 800ab38:	bffdfbf8 	.word	0xbffdfbf8
 800ab3c:	40020400 	.word	0x40020400

0800ab40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d005      	beq.n	800ab64 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2204      	movs	r2, #4
 800ab5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	73fb      	strb	r3, [r7, #15]
 800ab62:	e037      	b.n	800abd4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 020e 	bic.w	r2, r2, #14
 800ab72:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab82:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0201 	bic.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab98:	f003 021f 	and.w	r2, r3, #31
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba0:	2101      	movs	r1, #1
 800aba2:	fa01 f202 	lsl.w	r2, r1, r2
 800aba6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800abb0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800abc8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800abd2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d00d      	beq.n	800ac26 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2204      	movs	r2, #4
 800ac0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	73fb      	strb	r3, [r7, #15]
 800ac24:	e047      	b.n	800acb6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f022 020e 	bic.w	r2, r2, #14
 800ac34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0201 	bic.w	r2, r2, #1
 800ac44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac5a:	f003 021f 	and.w	r2, r3, #31
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac62:	2101      	movs	r1, #1
 800ac64:	fa01 f202 	lsl.w	r2, r1, r2
 800ac68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ac72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00c      	beq.n	800ac96 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ac94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
    }
  }
  return status;
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acdc:	f003 031f 	and.w	r3, r3, #31
 800ace0:	2204      	movs	r2, #4
 800ace2:	409a      	lsls	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d026      	beq.n	800ad3a <HAL_DMA_IRQHandler+0x7a>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d021      	beq.n	800ad3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d107      	bne.n	800ad14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0204 	bic.w	r2, r2, #4
 800ad12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad18:	f003 021f 	and.w	r2, r3, #31
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad20:	2104      	movs	r1, #4
 800ad22:	fa01 f202 	lsl.w	r2, r1, r2
 800ad26:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d071      	beq.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ad38:	e06c      	b.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3e:	f003 031f 	and.w	r3, r3, #31
 800ad42:	2202      	movs	r2, #2
 800ad44:	409a      	lsls	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d02e      	beq.n	800adac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d029      	beq.n	800adac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10b      	bne.n	800ad7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 020a 	bic.w	r2, r2, #10
 800ad74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad82:	f003 021f 	and.w	r2, r3, #31
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	2102      	movs	r1, #2
 800ad8c:	fa01 f202 	lsl.w	r2, r1, r2
 800ad90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d038      	beq.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800adaa:	e033      	b.n	800ae14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2208      	movs	r2, #8
 800adb6:	409a      	lsls	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4013      	ands	r3, r2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d02a      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d025      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 020e 	bic.w	r2, r2, #14
 800add8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adde:	f003 021f 	and.w	r2, r3, #31
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade6:	2101      	movs	r1, #1
 800ade8:	fa01 f202 	lsl.w	r2, r1, r2
 800adec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
}
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ae2c:	b2db      	uxtb	r3, r3
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
	...

0800ae3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b087      	sub	sp, #28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	4b16      	ldr	r3, [pc, #88]	@ (800aea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d802      	bhi.n	800ae56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ae50:	4b15      	ldr	r3, [pc, #84]	@ (800aea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ae52:	617b      	str	r3, [r7, #20]
 800ae54:	e001      	b.n	800ae5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ae56:	4b15      	ldr	r3, [pc, #84]	@ (800aeac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ae58:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	3b08      	subs	r3, #8
 800ae66:	4a12      	ldr	r2, [pc, #72]	@ (800aeb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ae68:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6c:	091b      	lsrs	r3, r3, #4
 800ae6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae74:	089b      	lsrs	r3, r3, #2
 800ae76:	009a      	lsls	r2, r3, #2
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a0b      	ldr	r2, [pc, #44]	@ (800aeb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ae86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f003 031f 	and.w	r3, r3, #31
 800ae8e:	2201      	movs	r2, #1
 800ae90:	409a      	lsls	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ae96:	bf00      	nop
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	40020407 	.word	0x40020407
 800aea8:	40020800 	.word	0x40020800
 800aeac:	40020820 	.word	0x40020820
 800aeb0:	cccccccd 	.word	0xcccccccd
 800aeb4:	40020880 	.word	0x40020880

0800aeb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4b0b      	ldr	r3, [pc, #44]	@ (800aef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800aecc:	4413      	add	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	461a      	mov	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a08      	ldr	r2, [pc, #32]	@ (800aefc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800aeda:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b01      	subs	r3, #1
 800aee0:	f003 031f 	and.w	r3, r3, #31
 800aee4:	2201      	movs	r2, #1
 800aee6:	409a      	lsls	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800aeec:	bf00      	nop
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	1000823f 	.word	0x1000823f
 800aefc:	40020940 	.word	0x40020940

0800af00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e147      	b.n	800b1a2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d106      	bne.n	800af2c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7f6 fd44 	bl	80019b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0210 	bic.w	r2, r2, #16
 800af3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af3c:	f7ff fc1a 	bl	800a774 <HAL_GetTick>
 800af40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800af42:	e012      	b.n	800af6a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800af44:	f7ff fc16 	bl	800a774 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	2b0a      	cmp	r3, #10
 800af50:	d90b      	bls.n	800af6a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af56:	f043 0201 	orr.w	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2203      	movs	r2, #3
 800af62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e11b      	b.n	800b1a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	f003 0308 	and.w	r3, r3, #8
 800af74:	2b08      	cmp	r3, #8
 800af76:	d0e5      	beq.n	800af44 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f042 0201 	orr.w	r2, r2, #1
 800af86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af88:	f7ff fbf4 	bl	800a774 <HAL_GetTick>
 800af8c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800af8e:	e012      	b.n	800afb6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800af90:	f7ff fbf0 	bl	800a774 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	2b0a      	cmp	r3, #10
 800af9c:	d90b      	bls.n	800afb6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afa2:	f043 0201 	orr.w	r2, r3, #1
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2203      	movs	r2, #3
 800afae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e0f5      	b.n	800b1a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d0e5      	beq.n	800af90 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	699a      	ldr	r2, [r3, #24]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f042 0202 	orr.w	r2, r2, #2
 800afd2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a74      	ldr	r2, [pc, #464]	@ (800b1ac <HAL_FDCAN_Init+0x2ac>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d103      	bne.n	800afe6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800afde:	4a74      	ldr	r2, [pc, #464]	@ (800b1b0 <HAL_FDCAN_Init+0x2b0>)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7c1b      	ldrb	r3, [r3, #16]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d108      	bne.n	800b000 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	699a      	ldr	r2, [r3, #24]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800affc:	619a      	str	r2, [r3, #24]
 800affe:	e007      	b.n	800b010 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	699a      	ldr	r2, [r3, #24]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b00e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7c5b      	ldrb	r3, [r3, #17]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d108      	bne.n	800b02a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	699a      	ldr	r2, [r3, #24]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b026:	619a      	str	r2, [r3, #24]
 800b028:	e007      	b.n	800b03a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	699a      	ldr	r2, [r3, #24]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b038:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	7c9b      	ldrb	r3, [r3, #18]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d108      	bne.n	800b054 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	699a      	ldr	r2, [r3, #24]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b050:	619a      	str	r2, [r3, #24]
 800b052:	e007      	b.n	800b064 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b062:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	430a      	orrs	r2, r1
 800b078:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	699a      	ldr	r2, [r3, #24]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800b088:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691a      	ldr	r2, [r3, #16]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 0210 	bic.w	r2, r2, #16
 800b098:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d108      	bne.n	800b0b4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	699a      	ldr	r2, [r3, #24]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f042 0204 	orr.w	r2, r2, #4
 800b0b0:	619a      	str	r2, [r3, #24]
 800b0b2:	e02c      	b.n	800b10e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d028      	beq.n	800b10e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d01c      	beq.n	800b0fe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699a      	ldr	r2, [r3, #24]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b0d2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	691a      	ldr	r2, [r3, #16]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0210 	orr.w	r2, r2, #16
 800b0e2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d110      	bne.n	800b10e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	699a      	ldr	r2, [r3, #24]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f042 0220 	orr.w	r2, r2, #32
 800b0fa:	619a      	str	r2, [r3, #24]
 800b0fc:	e007      	b.n	800b10e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	699a      	ldr	r2, [r3, #24]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f042 0220 	orr.w	r2, r2, #32
 800b10c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	3b01      	subs	r3, #1
 800b114:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b11e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b126:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	3b01      	subs	r3, #1
 800b130:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b136:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b138:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b142:	d115      	bne.n	800b170 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b148:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	3b01      	subs	r3, #1
 800b150:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b152:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b158:	3b01      	subs	r3, #1
 800b15a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b15c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b164:	3b01      	subs	r3, #1
 800b166:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b16c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b16e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fa58 	bl	800b63c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40006400 	.word	0x40006400
 800b1b0:	40006500 	.word	0x40006500

0800b1b4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b1c4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d002      	beq.n	800b1d2 <HAL_FDCAN_ConfigFilter+0x1e>
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d13d      	bne.n	800b24e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d119      	bne.n	800b20e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b1e6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800b1ee:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	e01d      	b.n	800b24a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	075a      	lsls	r2, r3, #29
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	4313      	orrs	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	079a      	lsls	r2, r3, #30
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	4413      	add	r3, r2
 800b236:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	3304      	adds	r3, #4
 800b242:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e006      	b.n	800b25c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b252:	f043 0202 	orr.w	r2, r3, #2
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
  }
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	371c      	adds	r7, #28
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d116      	bne.n	800b2b0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b28a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	011a      	lsls	r2, r3, #4
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	431a      	orrs	r2, r3
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	431a      	orrs	r2, r3
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e006      	b.n	800b2be <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2b4:	f043 0204 	orr.w	r2, r3, #4
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
  }
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d108      	bne.n	800b2f4 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	0219      	lsls	r1, r3, #8
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e006      	b.n	800b302 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2f8:	f043 0204 	orr.w	r2, r3, #4
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800b30e:	b480      	push	{r7}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d109      	bne.n	800b336 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b330:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	e006      	b.n	800b344 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b33a:	f043 0204 	orr.w	r2, r3, #4
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
  }
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b01      	cmp	r3, #1
 800b362:	d110      	bne.n	800b386 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	699a      	ldr	r2, [r3, #24]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	e006      	b.n	800b394 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b38a:	f043 0204 	orr.w	r2, r3, #4
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
  }
}
 800b394:	4618      	mov	r0, r3
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d12c      	bne.n	800b412 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b3c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d007      	beq.n	800b3d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e023      	b.n	800b420 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b3e0:	0c1b      	lsrs	r3, r3, #16
 800b3e2:	f003 0303 	and.w	r3, r3, #3
 800b3e6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 f990 	bl	800b714 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	fa01 f202 	lsl.w	r2, r1, r2
 800b400:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800b404:	2201      	movs	r2, #1
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	409a      	lsls	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	e006      	b.n	800b420 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b416:	f043 0208 	orr.w	r2, r3, #8
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
  }
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800b428:	b480      	push	{r7}
 800b42a:	b08b      	sub	sp, #44	@ 0x2c
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b43c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800b43e:	7efb      	ldrb	r3, [r7, #27]
 800b440:	2b02      	cmp	r3, #2
 800b442:	f040 80bc 	bne.w	800b5be <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2b40      	cmp	r3, #64	@ 0x40
 800b44a:	d121      	bne.n	800b490 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d107      	bne.n	800b46c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b460:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e0af      	b.n	800b5cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	4613      	mov	r3, r2
 800b484:	00db      	lsls	r3, r3, #3
 800b486:	4413      	add	r3, r2
 800b488:	00db      	lsls	r3, r3, #3
 800b48a:	440b      	add	r3, r1
 800b48c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b48e:	e020      	b.n	800b4d2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b498:	f003 030f 	and.w	r3, r3, #15
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d107      	bne.n	800b4b0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e08d      	b.n	800b5cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4b8:	0a1b      	lsrs	r3, r3, #8
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	00db      	lsls	r3, r3, #3
 800b4ca:	4413      	add	r3, r2
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	440b      	add	r3, r1
 800b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d107      	bne.n	800b4f6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	0c9b      	lsrs	r3, r3, #18
 800b4ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	e005      	b.n	800b502 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800b50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51c:	3304      	adds	r3, #4
 800b51e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800b520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	b29a      	uxth	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800b536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	0e1b      	lsrs	r3, r3, #24
 800b554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800b55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	0fda      	lsrs	r2, r3, #31
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	3304      	adds	r3, #4
 800b56a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800b56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b570:	2300      	movs	r3, #0
 800b572:	623b      	str	r3, [r7, #32]
 800b574:	e00a      	b.n	800b58c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	441a      	add	r2, r3
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	440b      	add	r3, r1
 800b582:	7812      	ldrb	r2, [r2, #0]
 800b584:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	3301      	adds	r3, #1
 800b58a:	623b      	str	r3, [r7, #32]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	0c1b      	lsrs	r3, r3, #16
 800b592:	4a11      	ldr	r2, [pc, #68]	@ (800b5d8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800b594:	5cd3      	ldrb	r3, [r2, r3]
 800b596:	461a      	mov	r2, r3
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d3eb      	bcc.n	800b576 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b40      	cmp	r3, #64	@ 0x40
 800b5a2:	d105      	bne.n	800b5b0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800b5ae:	e004      	b.n	800b5ba <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	69fa      	ldr	r2, [r7, #28]
 800b5b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e006      	b.n	800b5cc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5c2:	f043 0208 	orr.w	r2, r3, #8
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
  }
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	372c      	adds	r7, #44	@ 0x2c
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	08018b50 	.word	0x08018b50

0800b5dc <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b40      	cmp	r3, #64	@ 0x40
 800b5ea:	d107      	bne.n	800b5fc <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5f4:	f003 030f 	and.w	r3, r3, #15
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e006      	b.n	800b60a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b604:	f003 030f 	and.w	r3, r3, #15
 800b608:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800b60a:	68fb      	ldr	r3, [r7, #12]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b628:	f003 0307 	and.w	r3, r3, #7
 800b62c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800b62e:	68fb      	ldr	r3, [r7, #12]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800b644:	4b30      	ldr	r3, [pc, #192]	@ (800b708 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800b646:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a2f      	ldr	r2, [pc, #188]	@ (800b70c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d103      	bne.n	800b65a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b658:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a2c      	ldr	r2, [pc, #176]	@ (800b710 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d103      	bne.n	800b66c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800b66a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b67a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b682:	041a      	lsls	r2, r3, #16
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a8:	061a      	lsls	r2, r3, #24
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e005      	b.n	800b6ee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d3f3      	bcc.n	800b6e2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b6fa:	bf00      	nop
 800b6fc:	bf00      	nop
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	4000a400 	.word	0x4000a400
 800b70c:	40006800 	.word	0x40006800
 800b710:	40006c00 	.word	0x40006c00

0800b714 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800b714:	b480      	push	{r7}
 800b716:	b089      	sub	sp, #36	@ 0x24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b732:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b73a:	4313      	orrs	r3, r2
 800b73c:	61fb      	str	r3, [r7, #28]
 800b73e:	e00a      	b.n	800b756 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b748:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b74e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b754:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b760:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b766:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b76c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b772:	4313      	orrs	r3, r2
 800b774:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	4613      	mov	r3, r2
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	4413      	add	r3, r2
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	440b      	add	r3, r1
 800b786:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	3304      	adds	r3, #4
 800b792:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	3304      	adds	r3, #4
 800b79e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e020      	b.n	800b7e8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	3303      	adds	r3, #3
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	3302      	adds	r3, #2
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	440b      	add	r3, r1
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b7be:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	440b      	add	r3, r1
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b7cc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b7d6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	0c1b      	lsrs	r3, r3, #16
 800b7ee:	4a06      	ldr	r2, [pc, #24]	@ (800b808 <FDCAN_CopyMessageToRAM+0xf4>)
 800b7f0:	5cd3      	ldrb	r3, [r2, r3]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d3d5      	bcc.n	800b7a6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	3724      	adds	r7, #36	@ 0x24
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	08018b50 	.word	0x08018b50

0800b80c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b81a:	e15a      	b.n	800bad2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	2101      	movs	r1, #1
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	fa01 f303 	lsl.w	r3, r1, r3
 800b828:	4013      	ands	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 814c 	beq.w	800bacc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	f003 0303 	and.w	r3, r3, #3
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d005      	beq.n	800b84c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d130      	bne.n	800b8ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	2203      	movs	r2, #3
 800b858:	fa02 f303 	lsl.w	r3, r2, r3
 800b85c:	43db      	mvns	r3, r3
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4013      	ands	r3, r2
 800b862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	005b      	lsls	r3, r3, #1
 800b86c:	fa02 f303 	lsl.w	r3, r2, r3
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b882:	2201      	movs	r2, #1
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	43db      	mvns	r3, r3
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4013      	ands	r3, r2
 800b890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	091b      	lsrs	r3, r3, #4
 800b898:	f003 0201 	and.w	r2, r3, #1
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f003 0303 	and.w	r3, r3, #3
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d017      	beq.n	800b8ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ca:	43db      	mvns	r3, r3
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f003 0303 	and.w	r3, r3, #3
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d123      	bne.n	800b93e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	08da      	lsrs	r2, r3, #3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3208      	adds	r2, #8
 800b8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	220f      	movs	r2, #15
 800b90e:	fa02 f303 	lsl.w	r3, r2, r3
 800b912:	43db      	mvns	r3, r3
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	4013      	ands	r3, r2
 800b918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	691a      	ldr	r2, [r3, #16]
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	fa02 f303 	lsl.w	r3, r2, r3
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	08da      	lsrs	r2, r3, #3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3208      	adds	r2, #8
 800b938:	6939      	ldr	r1, [r7, #16]
 800b93a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	2203      	movs	r2, #3
 800b94a:	fa02 f303 	lsl.w	r3, r2, r3
 800b94e:	43db      	mvns	r3, r3
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	4013      	ands	r3, r2
 800b954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f003 0203 	and.w	r2, r3, #3
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	4313      	orrs	r3, r2
 800b96a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 80a6 	beq.w	800bacc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b980:	4b5b      	ldr	r3, [pc, #364]	@ (800baf0 <HAL_GPIO_Init+0x2e4>)
 800b982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b984:	4a5a      	ldr	r2, [pc, #360]	@ (800baf0 <HAL_GPIO_Init+0x2e4>)
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	6613      	str	r3, [r2, #96]	@ 0x60
 800b98c:	4b58      	ldr	r3, [pc, #352]	@ (800baf0 <HAL_GPIO_Init+0x2e4>)
 800b98e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	60bb      	str	r3, [r7, #8]
 800b996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b998:	4a56      	ldr	r2, [pc, #344]	@ (800baf4 <HAL_GPIO_Init+0x2e8>)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	089b      	lsrs	r3, r3, #2
 800b99e:	3302      	adds	r3, #2
 800b9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f003 0303 	and.w	r3, r3, #3
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	220f      	movs	r2, #15
 800b9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b4:	43db      	mvns	r3, r3
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b9c2:	d01f      	beq.n	800ba04 <HAL_GPIO_Init+0x1f8>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4a4c      	ldr	r2, [pc, #304]	@ (800baf8 <HAL_GPIO_Init+0x2ec>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d019      	beq.n	800ba00 <HAL_GPIO_Init+0x1f4>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a4b      	ldr	r2, [pc, #300]	@ (800bafc <HAL_GPIO_Init+0x2f0>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d013      	beq.n	800b9fc <HAL_GPIO_Init+0x1f0>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a4a      	ldr	r2, [pc, #296]	@ (800bb00 <HAL_GPIO_Init+0x2f4>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00d      	beq.n	800b9f8 <HAL_GPIO_Init+0x1ec>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a49      	ldr	r2, [pc, #292]	@ (800bb04 <HAL_GPIO_Init+0x2f8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d007      	beq.n	800b9f4 <HAL_GPIO_Init+0x1e8>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a48      	ldr	r2, [pc, #288]	@ (800bb08 <HAL_GPIO_Init+0x2fc>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d101      	bne.n	800b9f0 <HAL_GPIO_Init+0x1e4>
 800b9ec:	2305      	movs	r3, #5
 800b9ee:	e00a      	b.n	800ba06 <HAL_GPIO_Init+0x1fa>
 800b9f0:	2306      	movs	r3, #6
 800b9f2:	e008      	b.n	800ba06 <HAL_GPIO_Init+0x1fa>
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	e006      	b.n	800ba06 <HAL_GPIO_Init+0x1fa>
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	e004      	b.n	800ba06 <HAL_GPIO_Init+0x1fa>
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e002      	b.n	800ba06 <HAL_GPIO_Init+0x1fa>
 800ba00:	2301      	movs	r3, #1
 800ba02:	e000      	b.n	800ba06 <HAL_GPIO_Init+0x1fa>
 800ba04:	2300      	movs	r3, #0
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	f002 0203 	and.w	r2, r2, #3
 800ba0c:	0092      	lsls	r2, r2, #2
 800ba0e:	4093      	lsls	r3, r2
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ba16:	4937      	ldr	r1, [pc, #220]	@ (800baf4 <HAL_GPIO_Init+0x2e8>)
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	089b      	lsrs	r3, r3, #2
 800ba1c:	3302      	adds	r3, #2
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ba24:	4b39      	ldr	r3, [pc, #228]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	43db      	mvns	r3, r3
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	4013      	ands	r3, r2
 800ba32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ba48:	4a30      	ldr	r2, [pc, #192]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ba4e:	4b2f      	ldr	r3, [pc, #188]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	43db      	mvns	r3, r3
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ba72:	4a26      	ldr	r2, [pc, #152]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800ba78:	4b24      	ldr	r3, [pc, #144]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	43db      	mvns	r3, r3
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	4013      	ands	r3, r2
 800ba86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d003      	beq.n	800ba9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ba9c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800baa2:	4b1a      	ldr	r3, [pc, #104]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	43db      	mvns	r3, r3
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	4013      	ands	r3, r2
 800bab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bac6:	4a11      	ldr	r2, [pc, #68]	@ (800bb0c <HAL_GPIO_Init+0x300>)
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	3301      	adds	r3, #1
 800bad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	fa22 f303 	lsr.w	r3, r2, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	f47f ae9d 	bne.w	800b81c <HAL_GPIO_Init+0x10>
  }
}
 800bae2:	bf00      	nop
 800bae4:	bf00      	nop
 800bae6:	371c      	adds	r7, #28
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	40021000 	.word	0x40021000
 800baf4:	40010000 	.word	0x40010000
 800baf8:	48000400 	.word	0x48000400
 800bafc:	48000800 	.word	0x48000800
 800bb00:	48000c00 	.word	0x48000c00
 800bb04:	48001000 	.word	0x48001000
 800bb08:	48001400 	.word	0x48001400
 800bb0c:	40010400 	.word	0x40010400

0800bb10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	807b      	strh	r3, [r7, #2]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bb20:	787b      	ldrb	r3, [r7, #1]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bb26:	887a      	ldrh	r2, [r7, #2]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bb2c:	e002      	b.n	800bb34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bb2e:	887a      	ldrh	r2, [r7, #2]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bb52:	887a      	ldrh	r2, [r7, #2]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4013      	ands	r3, r2
 800bb58:	041a      	lsls	r2, r3, #16
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	43d9      	mvns	r1, r3
 800bb5e:	887b      	ldrh	r3, [r7, #2]
 800bb60:	400b      	ands	r3, r1
 800bb62:	431a      	orrs	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	619a      	str	r2, [r3, #24]
}
 800bb68:	bf00      	nop
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e08d      	b.n	800bca2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7f6 f84c 	bl	8001c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2224      	movs	r2, #36	@ 0x24
 800bba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0201 	bic.w	r2, r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bbc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bbd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d107      	bne.n	800bbee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	689a      	ldr	r2, [r3, #8]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bbea:	609a      	str	r2, [r3, #8]
 800bbec:	e006      	b.n	800bbfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	689a      	ldr	r2, [r3, #8]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800bbfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d108      	bne.n	800bc16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc12:	605a      	str	r2, [r3, #4]
 800bc14:	e007      	b.n	800bc26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bc24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	6812      	ldr	r2, [r2, #0]
 800bc30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bc34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bc48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	691a      	ldr	r2, [r3, #16]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	430a      	orrs	r2, r1
 800bc62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	69d9      	ldr	r1, [r3, #28]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1a      	ldr	r2, [r3, #32]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f042 0201 	orr.w	r2, r2, #1
 800bc82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af02      	add	r7, sp, #8
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	461a      	mov	r2, r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	817b      	strh	r3, [r7, #10]
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	813b      	strh	r3, [r7, #8]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	f040 80f9 	bne.w	800bec6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <HAL_I2C_Mem_Write+0x34>
 800bcda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d105      	bne.n	800bcec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bce6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e0ed      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d101      	bne.n	800bcfa <HAL_I2C_Mem_Write+0x4e>
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e0e6      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bd02:	f7fe fd37 	bl	800a774 <HAL_GetTick>
 800bd06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	2319      	movs	r3, #25
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f001 f938 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e0d1      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2221      	movs	r2, #33	@ 0x21
 800bd28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2240      	movs	r2, #64	@ 0x40
 800bd30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a3a      	ldr	r2, [r7, #32]
 800bd3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bd44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd4c:	88f8      	ldrh	r0, [r7, #6]
 800bd4e:	893a      	ldrh	r2, [r7, #8]
 800bd50:	8979      	ldrh	r1, [r7, #10]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 fc7b 	bl	800c658 <I2C_RequestMemoryWrite>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d005      	beq.n	800bd74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e0a9      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	2bff      	cmp	r3, #255	@ 0xff
 800bd7c:	d90e      	bls.n	800bd9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	22ff      	movs	r2, #255	@ 0xff
 800bd82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	8979      	ldrh	r1, [r7, #10]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f001 fabb 	bl	800d310 <I2C_TransferConfig>
 800bd9a:	e00f      	b.n	800bdbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	8979      	ldrh	r1, [r7, #10]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f001 faaa 	bl	800d310 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdbc:	697a      	ldr	r2, [r7, #20]
 800bdbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f001 f93b 	bl	800d03c <I2C_WaitOnTXISFlagUntilTimeout>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e07b      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd4:	781a      	ldrb	r2, [r3, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be04:	b29b      	uxth	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d034      	beq.n	800be74 <HAL_I2C_Mem_Write+0x1c8>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d130      	bne.n	800be74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be18:	2200      	movs	r2, #0
 800be1a:	2180      	movs	r1, #128	@ 0x80
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f001 f8b4 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	e04d      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be30:	b29b      	uxth	r3, r3
 800be32:	2bff      	cmp	r3, #255	@ 0xff
 800be34:	d90e      	bls.n	800be54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	22ff      	movs	r2, #255	@ 0xff
 800be3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be40:	b2da      	uxtb	r2, r3
 800be42:	8979      	ldrh	r1, [r7, #10]
 800be44:	2300      	movs	r3, #0
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f001 fa5f 	bl	800d310 <I2C_TransferConfig>
 800be52:	e00f      	b.n	800be74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be58:	b29a      	uxth	r2, r3
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be62:	b2da      	uxtb	r2, r3
 800be64:	8979      	ldrh	r1, [r7, #10]
 800be66:	2300      	movs	r3, #0
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f001 fa4e 	bl	800d310 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be78:	b29b      	uxth	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d19e      	bne.n	800bdbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f001 f921 	bl	800d0ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e01a      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2220      	movs	r2, #32
 800be98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6859      	ldr	r1, [r3, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	4b0a      	ldr	r3, [pc, #40]	@ (800bed0 <HAL_I2C_Mem_Write+0x224>)
 800bea6:	400b      	ands	r3, r1
 800bea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2220      	movs	r2, #32
 800beae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	e000      	b.n	800bec8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bec6:	2302      	movs	r3, #2
  }
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	fe00e800 	.word	0xfe00e800

0800bed4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af02      	add	r7, sp, #8
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	461a      	mov	r2, r3
 800bee2:	4603      	mov	r3, r0
 800bee4:	817b      	strh	r3, [r7, #10]
 800bee6:	460b      	mov	r3, r1
 800bee8:	813b      	strh	r3, [r7, #8]
 800beea:	4613      	mov	r3, r2
 800beec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b20      	cmp	r3, #32
 800bef8:	f040 80fd 	bne.w	800c0f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d002      	beq.n	800bf08 <HAL_I2C_Mem_Read+0x34>
 800bf02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d105      	bne.n	800bf14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e0f1      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d101      	bne.n	800bf22 <HAL_I2C_Mem_Read+0x4e>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e0ea      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf2a:	f7fe fc23 	bl	800a774 <HAL_GetTick>
 800bf2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	2319      	movs	r3, #25
 800bf36:	2201      	movs	r2, #1
 800bf38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f001 f824 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e0d5      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2222      	movs	r2, #34	@ 0x22
 800bf50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2240      	movs	r2, #64	@ 0x40
 800bf58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6a3a      	ldr	r2, [r7, #32]
 800bf66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bf6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bf74:	88f8      	ldrh	r0, [r7, #6]
 800bf76:	893a      	ldrh	r2, [r7, #8]
 800bf78:	8979      	ldrh	r1, [r7, #10]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	4603      	mov	r3, r0
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 fbbb 	bl	800c700 <I2C_RequestMemoryRead>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e0ad      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	2bff      	cmp	r3, #255	@ 0xff
 800bfa4:	d90e      	bls.n	800bfc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	22ff      	movs	r2, #255	@ 0xff
 800bfaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	8979      	ldrh	r1, [r7, #10]
 800bfb4:	4b52      	ldr	r3, [pc, #328]	@ (800c100 <HAL_I2C_Mem_Read+0x22c>)
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f001 f9a7 	bl	800d310 <I2C_TransferConfig>
 800bfc2:	e00f      	b.n	800bfe4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	8979      	ldrh	r1, [r7, #10]
 800bfd6:	4b4a      	ldr	r3, [pc, #296]	@ (800c100 <HAL_I2C_Mem_Read+0x22c>)
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f001 f996 	bl	800d310 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	9300      	str	r3, [sp, #0]
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	2200      	movs	r2, #0
 800bfec:	2104      	movs	r1, #4
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f000 ffcb 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e07c      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c008:	b2d2      	uxtb	r2, r2
 800c00a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c01a:	3b01      	subs	r3, #1
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c026:	b29b      	uxth	r3, r3
 800c028:	3b01      	subs	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c034:	b29b      	uxth	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d034      	beq.n	800c0a4 <HAL_I2C_Mem_Read+0x1d0>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d130      	bne.n	800c0a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	2200      	movs	r2, #0
 800c04a:	2180      	movs	r1, #128	@ 0x80
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 ff9c 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e04d      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c060:	b29b      	uxth	r3, r3
 800c062:	2bff      	cmp	r3, #255	@ 0xff
 800c064:	d90e      	bls.n	800c084 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	22ff      	movs	r2, #255	@ 0xff
 800c06a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c070:	b2da      	uxtb	r2, r3
 800c072:	8979      	ldrh	r1, [r7, #10]
 800c074:	2300      	movs	r3, #0
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f001 f947 	bl	800d310 <I2C_TransferConfig>
 800c082:	e00f      	b.n	800c0a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c088:	b29a      	uxth	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c092:	b2da      	uxtb	r2, r3
 800c094:	8979      	ldrh	r1, [r7, #10]
 800c096:	2300      	movs	r3, #0
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f001 f936 	bl	800d310 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d19a      	bne.n	800bfe4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f001 f809 	bl	800d0ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e01a      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6859      	ldr	r1, [r3, #4]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c104 <HAL_I2C_Mem_Read+0x230>)
 800c0d6:	400b      	ands	r3, r1
 800c0d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e000      	b.n	800c0f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c0f6:	2302      	movs	r3, #2
  }
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	80002400 	.word	0x80002400
 800c104:	fe00e800 	.word	0xfe00e800

0800c108 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08a      	sub	sp, #40	@ 0x28
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	607a      	str	r2, [r7, #4]
 800c112:	603b      	str	r3, [r7, #0]
 800c114:	460b      	mov	r3, r1
 800c116:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800c118:	2300      	movs	r3, #0
 800c11a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b20      	cmp	r3, #32
 800c126:	f040 80d6 	bne.w	800c2d6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c138:	d101      	bne.n	800c13e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800c13a:	2302      	movs	r3, #2
 800c13c:	e0cc      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c144:	2b01      	cmp	r3, #1
 800c146:	d101      	bne.n	800c14c <HAL_I2C_IsDeviceReady+0x44>
 800c148:	2302      	movs	r3, #2
 800c14a:	e0c5      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2224      	movs	r2, #36	@ 0x24
 800c158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d107      	bne.n	800c17a <HAL_I2C_IsDeviceReady+0x72>
 800c16a:	897b      	ldrh	r3, [r7, #10]
 800c16c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c170:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c174:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c178:	e006      	b.n	800c188 <HAL_I2C_IsDeviceReady+0x80>
 800c17a:	897b      	ldrh	r3, [r7, #10]
 800c17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c180:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c184:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	6812      	ldr	r2, [r2, #0]
 800c18c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800c18e:	f7fe faf1 	bl	800a774 <HAL_GetTick>
 800c192:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	f003 0320 	and.w	r3, r3, #32
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	bf0c      	ite	eq
 800c1a2:	2301      	moveq	r3, #1
 800c1a4:	2300      	movne	r3, #0
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	f003 0310 	and.w	r3, r3, #16
 800c1b4:	2b10      	cmp	r3, #16
 800c1b6:	bf0c      	ite	eq
 800c1b8:	2301      	moveq	r3, #1
 800c1ba:	2300      	movne	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c1c0:	e034      	b.n	800c22c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d01a      	beq.n	800c200 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c1ca:	f7fe fad3 	bl	800a774 <HAL_GetTick>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d302      	bcc.n	800c1e0 <HAL_I2C_IsDeviceReady+0xd8>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10f      	bne.n	800c200 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ec:	f043 0220 	orr.w	r2, r3, #32
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e06b      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	f003 0320 	and.w	r3, r3, #32
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	bf0c      	ite	eq
 800c20e:	2301      	moveq	r3, #1
 800c210:	2300      	movne	r3, #0
 800c212:	b2db      	uxtb	r3, r3
 800c214:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	f003 0310 	and.w	r3, r3, #16
 800c220:	2b10      	cmp	r3, #16
 800c222:	bf0c      	ite	eq
 800c224:	2301      	moveq	r3, #1
 800c226:	2300      	movne	r3, #0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c22c:	7ffb      	ldrb	r3, [r7, #31]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d102      	bne.n	800c238 <HAL_I2C_IsDeviceReady+0x130>
 800c232:	7fbb      	ldrb	r3, [r7, #30]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0c4      	beq.n	800c1c2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	f003 0310 	and.w	r3, r3, #16
 800c242:	2b10      	cmp	r3, #16
 800c244:	d01a      	beq.n	800c27c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2200      	movs	r2, #0
 800c24e:	2120      	movs	r1, #32
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fe9a 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	e03b      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2220      	movs	r2, #32
 800c266:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2220      	movs	r2, #32
 800c26c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800c278:	2300      	movs	r3, #0
 800c27a:	e02d      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	2200      	movs	r2, #0
 800c284:	2120      	movs	r1, #32
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 fe7f 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d001      	beq.n	800c296 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e020      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2210      	movs	r2, #16
 800c29c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	f63f af56 	bhi.w	800c162 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2c2:	f043 0220 	orr.w	r2, r3, #32
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e000      	b.n	800c2d8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800c2d6:	2302      	movs	r3, #2
  }
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3720      	adds	r7, #32
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	68f9      	ldr	r1, [r7, #12]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	4798      	blx	r3
  }
}
 800c30c:	bf00      	nop
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00f      	beq.n	800c356 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00a      	beq.n	800c356 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c344:	f043 0201 	orr.w	r2, r3, #1
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c354:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00f      	beq.n	800c380 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c36e:	f043 0208 	orr.w	r2, r3, #8
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c37e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00f      	beq.n	800c3aa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00a      	beq.n	800c3aa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c398:	f043 0202 	orr.w	r2, r3, #2
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f003 030b 	and.w	r3, r3, #11
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800c3ba:	68f9      	ldr	r1, [r7, #12]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fc8b 	bl	800ccd8 <I2C_ITError>
  }
}
 800c3c2:	bf00      	nop
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b083      	sub	sp, #12
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70fb      	strb	r3, [r7, #3]
 800c3fe:	4613      	mov	r3, r2
 800c400:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr

0800c40e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c40e:	b480      	push	{r7}
 800c410:	b083      	sub	sp, #12
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c42a:	bf00      	nop
 800c42c:	370c      	adds	r7, #12
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c436:	b480      	push	{r7}
 800c438:	b083      	sub	sp, #12
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c43e:	bf00      	nop
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c44a:	b480      	push	{r7}
 800c44c:	b083      	sub	sp, #12
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c458:	b2db      	uxtb	r3, r3
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b086      	sub	sp, #24
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	60b9      	str	r1, [r7, #8]
 800c470:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c476:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c482:	2b01      	cmp	r3, #1
 800c484:	d101      	bne.n	800c48a <I2C_Slave_ISR_IT+0x24>
 800c486:	2302      	movs	r3, #2
 800c488:	e0e2      	b.n	800c650 <I2C_Slave_ISR_IT+0x1ea>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	f003 0320 	and.w	r3, r3, #32
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d009      	beq.n	800c4b0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d004      	beq.n	800c4b0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c4a6:	6939      	ldr	r1, [r7, #16]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f000 fa5d 	bl	800c968 <I2C_ITSlaveCplt>
 800c4ae:	e0ca      	b.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f003 0310 	and.w	r3, r3, #16
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d04b      	beq.n	800c552 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d046      	beq.n	800c552 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d128      	bne.n	800c520 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b28      	cmp	r3, #40	@ 0x28
 800c4d8:	d108      	bne.n	800c4ec <I2C_Slave_ISR_IT+0x86>
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4e0:	d104      	bne.n	800c4ec <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c4e2:	6939      	ldr	r1, [r7, #16]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 fba3 	bl	800cc30 <I2C_ITListenCplt>
 800c4ea:	e031      	b.n	800c550 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b29      	cmp	r3, #41	@ 0x29
 800c4f6:	d10e      	bne.n	800c516 <I2C_Slave_ISR_IT+0xb0>
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c4fe:	d00a      	beq.n	800c516 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2210      	movs	r2, #16
 800c506:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 fcfc 	bl	800cf06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 f9ce 	bl	800c8b0 <I2C_ITSlaveSeqCplt>
 800c514:	e01c      	b.n	800c550 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2210      	movs	r2, #16
 800c51c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c51e:	e08f      	b.n	800c640 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2210      	movs	r2, #16
 800c526:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c52c:	f043 0204 	orr.w	r2, r3, #4
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d003      	beq.n	800c542 <I2C_Slave_ISR_IT+0xdc>
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c540:	d17e      	bne.n	800c640 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	4619      	mov	r1, r3
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	f000 fbc5 	bl	800ccd8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c54e:	e077      	b.n	800c640 <I2C_Slave_ISR_IT+0x1da>
 800c550:	e076      	b.n	800c640 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d02f      	beq.n	800c5bc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c562:	2b00      	cmp	r3, #0
 800c564:	d02a      	beq.n	800c5bc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d018      	beq.n	800c5a2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c57a:	b2d2      	uxtb	r2, r2
 800c57c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c58c:	3b01      	subs	r3, #1
 800c58e:	b29a      	uxth	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c598:	b29b      	uxth	r3, r3
 800c59a:	3b01      	subs	r3, #1
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d14b      	bne.n	800c644 <I2C_Slave_ISR_IT+0x1de>
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c5b2:	d047      	beq.n	800c644 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 f97b 	bl	800c8b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c5ba:	e043      	b.n	800c644 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f003 0308 	and.w	r3, r3, #8
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d009      	beq.n	800c5da <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c5d0:	6939      	ldr	r1, [r7, #16]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 f8e8 	bl	800c7a8 <I2C_ITAddrCplt>
 800c5d8:	e035      	b.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d030      	beq.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d02b      	beq.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d018      	beq.n	800c62a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fc:	781a      	ldrb	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c608:	1c5a      	adds	r2, r3, #1
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c612:	b29b      	uxth	r3, r3
 800c614:	3b01      	subs	r3, #1
 800c616:	b29a      	uxth	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c620:	3b01      	subs	r3, #1
 800c622:	b29a      	uxth	r2, r3
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c628:	e00d      	b.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c630:	d002      	beq.n	800c638 <I2C_Slave_ISR_IT+0x1d2>
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d106      	bne.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f000 f939 	bl	800c8b0 <I2C_ITSlaveSeqCplt>
 800c63e:	e002      	b.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800c640:	bf00      	nop
 800c642:	e000      	b.n	800c646 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800c644:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	4608      	mov	r0, r1
 800c662:	4611      	mov	r1, r2
 800c664:	461a      	mov	r2, r3
 800c666:	4603      	mov	r3, r0
 800c668:	817b      	strh	r3, [r7, #10]
 800c66a:	460b      	mov	r3, r1
 800c66c:	813b      	strh	r3, [r7, #8]
 800c66e:	4613      	mov	r3, r2
 800c670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c672:	88fb      	ldrh	r3, [r7, #6]
 800c674:	b2da      	uxtb	r2, r3
 800c676:	8979      	ldrh	r1, [r7, #10]
 800c678:	4b20      	ldr	r3, [pc, #128]	@ (800c6fc <I2C_RequestMemoryWrite+0xa4>)
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fe45 	bl	800d310 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c686:	69fa      	ldr	r2, [r7, #28]
 800c688:	69b9      	ldr	r1, [r7, #24]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 fcd6 	bl	800d03c <I2C_WaitOnTXISFlagUntilTimeout>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	e02c      	b.n	800c6f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c69a:	88fb      	ldrh	r3, [r7, #6]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d105      	bne.n	800c6ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c6a0:	893b      	ldrh	r3, [r7, #8]
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c6aa:	e015      	b.n	800c6d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c6ac:	893b      	ldrh	r3, [r7, #8]
 800c6ae:	0a1b      	lsrs	r3, r3, #8
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6ba:	69fa      	ldr	r2, [r7, #28]
 800c6bc:	69b9      	ldr	r1, [r7, #24]
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 fcbc 	bl	800d03c <I2C_WaitOnTXISFlagUntilTimeout>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e012      	b.n	800c6f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c6ce:	893b      	ldrh	r3, [r7, #8]
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2180      	movs	r1, #128	@ 0x80
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f000 fc51 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e000      	b.n	800c6f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	80002000 	.word	0x80002000

0800c700 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af02      	add	r7, sp, #8
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	461a      	mov	r2, r3
 800c70e:	4603      	mov	r3, r0
 800c710:	817b      	strh	r3, [r7, #10]
 800c712:	460b      	mov	r3, r1
 800c714:	813b      	strh	r3, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c71a:	88fb      	ldrh	r3, [r7, #6]
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	8979      	ldrh	r1, [r7, #10]
 800c720:	4b20      	ldr	r3, [pc, #128]	@ (800c7a4 <I2C_RequestMemoryRead+0xa4>)
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	2300      	movs	r3, #0
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 fdf2 	bl	800d310 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c72c:	69fa      	ldr	r2, [r7, #28]
 800c72e:	69b9      	ldr	r1, [r7, #24]
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f000 fc83 	bl	800d03c <I2C_WaitOnTXISFlagUntilTimeout>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	e02c      	b.n	800c79a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c740:	88fb      	ldrh	r3, [r7, #6]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d105      	bne.n	800c752 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c746:	893b      	ldrh	r3, [r7, #8]
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c750:	e015      	b.n	800c77e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c752:	893b      	ldrh	r3, [r7, #8]
 800c754:	0a1b      	lsrs	r3, r3, #8
 800c756:	b29b      	uxth	r3, r3
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c760:	69fa      	ldr	r2, [r7, #28]
 800c762:	69b9      	ldr	r1, [r7, #24]
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f000 fc69 	bl	800d03c <I2C_WaitOnTXISFlagUntilTimeout>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d001      	beq.n	800c774 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e012      	b.n	800c79a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c774:	893b      	ldrh	r3, [r7, #8]
 800c776:	b2da      	uxtb	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	2200      	movs	r2, #0
 800c786:	2140      	movs	r1, #64	@ 0x40
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 fbfe 	bl	800cf8a <I2C_WaitOnFlagUntilTimeout>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	e000      	b.n	800c79a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	80002000 	.word	0x80002000

0800c7a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c7be:	2b28      	cmp	r3, #40	@ 0x28
 800c7c0:	d16a      	bne.n	800c898 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	0c1b      	lsrs	r3, r3, #16
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	0c1b      	lsrs	r3, r3, #16
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c7e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c7fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	2b02      	cmp	r3, #2
 800c804:	d138      	bne.n	800c878 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c806:	897b      	ldrh	r3, [r7, #10]
 800c808:	09db      	lsrs	r3, r3, #7
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	89bb      	ldrh	r3, [r7, #12]
 800c80e:	4053      	eors	r3, r2
 800c810:	b29b      	uxth	r3, r3
 800c812:	f003 0306 	and.w	r3, r3, #6
 800c816:	2b00      	cmp	r3, #0
 800c818:	d11c      	bne.n	800c854 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c81a:	897b      	ldrh	r3, [r7, #10]
 800c81c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d13b      	bne.n	800c8a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2208      	movs	r2, #8
 800c83c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c846:	89ba      	ldrh	r2, [r7, #12]
 800c848:	7bfb      	ldrb	r3, [r7, #15]
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fdd0 	bl	800c3f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c852:	e029      	b.n	800c8a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c854:	893b      	ldrh	r3, [r7, #8]
 800c856:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fd89 	bl	800d374 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c86a:	89ba      	ldrh	r2, [r7, #12]
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff fdbe 	bl	800c3f2 <HAL_I2C_AddrCallback>
}
 800c876:	e017      	b.n	800c8a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fd79 	bl	800d374 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c88a:	89ba      	ldrh	r2, [r7, #12]
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff fdae 	bl	800c3f2 <HAL_I2C_AddrCallback>
}
 800c896:	e007      	b.n	800c8a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2208      	movs	r2, #8
 800c89e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800c8a8:	bf00      	nop
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d008      	beq.n	800c8e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	e00c      	b.n	800c8fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d007      	beq.n	800c8fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c8fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b29      	cmp	r3, #41	@ 0x29
 800c908:	d112      	bne.n	800c930 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2228      	movs	r2, #40	@ 0x28
 800c90e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2221      	movs	r2, #33	@ 0x21
 800c916:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c918:	2101      	movs	r1, #1
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fd2a 	bl	800d374 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7ff fd4e 	bl	800c3ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c92e:	e017      	b.n	800c960 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b2a      	cmp	r3, #42	@ 0x2a
 800c93a:	d111      	bne.n	800c960 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2228      	movs	r2, #40	@ 0x28
 800c940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2222      	movs	r2, #34	@ 0x22
 800c948:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c94a:	2102      	movs	r1, #2
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fd11 	bl	800d374 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff fd3f 	bl	800c3de <HAL_I2C_SlaveRxCpltCallback>
}
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c982:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c98a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2220      	movs	r2, #32
 800c992:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c994:	7afb      	ldrb	r3, [r7, #11]
 800c996:	2b21      	cmp	r3, #33	@ 0x21
 800c998:	d002      	beq.n	800c9a0 <I2C_ITSlaveCplt+0x38>
 800c99a:	7afb      	ldrb	r3, [r7, #11]
 800c99c:	2b29      	cmp	r3, #41	@ 0x29
 800c99e:	d108      	bne.n	800c9b2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c9a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fce5 	bl	800d374 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2221      	movs	r2, #33	@ 0x21
 800c9ae:	631a      	str	r2, [r3, #48]	@ 0x30
 800c9b0:	e019      	b.n	800c9e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	2b22      	cmp	r3, #34	@ 0x22
 800c9b6:	d002      	beq.n	800c9be <I2C_ITSlaveCplt+0x56>
 800c9b8:	7afb      	ldrb	r3, [r7, #11]
 800c9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9bc:	d108      	bne.n	800c9d0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c9be:	f248 0102 	movw	r1, #32770	@ 0x8002
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fcd6 	bl	800d374 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2222      	movs	r2, #34	@ 0x22
 800c9cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c9ce:	e00a      	b.n	800c9e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c9d0:	7afb      	ldrb	r3, [r7, #11]
 800c9d2:	2b28      	cmp	r3, #40	@ 0x28
 800c9d4:	d107      	bne.n	800c9e6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c9d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fcca 	bl	800d374 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6859      	ldr	r1, [r3, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	4b89      	ldr	r3, [pc, #548]	@ (800cc28 <I2C_ITSlaveCplt+0x2c0>)
 800ca02:	400b      	ands	r3, r1
 800ca04:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa7d 	bl	800cf06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d013      	beq.n	800ca3e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ca24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01f      	beq.n	800ca6e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ca3c:	e017      	b.n	800ca6e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d012      	beq.n	800ca6e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ca56:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d006      	beq.n	800ca6e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f003 0304 	and.w	r3, r3, #4
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d020      	beq.n	800caba <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f023 0304 	bic.w	r3, r3, #4
 800ca7e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00c      	beq.n	800caba <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800caa4:	3b01      	subs	r3, #1
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	3b01      	subs	r3, #1
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cac8:	f043 0204 	orr.w	r2, r3, #4
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	f003 0310 	and.w	r3, r3, #16
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d049      	beq.n	800cb6e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d044      	beq.n	800cb6e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cae8:	b29b      	uxth	r3, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	d128      	bne.n	800cb40 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b28      	cmp	r3, #40	@ 0x28
 800caf8:	d108      	bne.n	800cb0c <I2C_ITSlaveCplt+0x1a4>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb00:	d104      	bne.n	800cb0c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb02:	6979      	ldr	r1, [r7, #20]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f893 	bl	800cc30 <I2C_ITListenCplt>
 800cb0a:	e030      	b.n	800cb6e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b29      	cmp	r3, #41	@ 0x29
 800cb16:	d10e      	bne.n	800cb36 <I2C_ITSlaveCplt+0x1ce>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cb1e:	d00a      	beq.n	800cb36 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2210      	movs	r2, #16
 800cb26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f9ec 	bl	800cf06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7ff febe 	bl	800c8b0 <I2C_ITSlaveSeqCplt>
 800cb34:	e01b      	b.n	800cb6e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2210      	movs	r2, #16
 800cb3c:	61da      	str	r2, [r3, #28]
 800cb3e:	e016      	b.n	800cb6e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2210      	movs	r2, #16
 800cb46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb4c:	f043 0204 	orr.w	r2, r3, #4
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <I2C_ITSlaveCplt+0x1fa>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb60:	d105      	bne.n	800cb6e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f8b5 	bl	800ccd8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d010      	beq.n	800cba6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f8a4 	bl	800ccd8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	2b28      	cmp	r3, #40	@ 0x28
 800cb9a:	d141      	bne.n	800cc20 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb9c:	6979      	ldr	r1, [r7, #20]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f846 	bl	800cc30 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cba4:	e03c      	b.n	800cc20 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cbae:	d014      	beq.n	800cbda <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff fe7d 	bl	800c8b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a1c      	ldr	r2, [pc, #112]	@ (800cc2c <I2C_ITSlaveCplt+0x2c4>)
 800cbba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2220      	movs	r2, #32
 800cbc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fc1b 	bl	800c40e <HAL_I2C_ListenCpltCallback>
}
 800cbd8:	e022      	b.n	800cc20 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b22      	cmp	r3, #34	@ 0x22
 800cbe4:	d10e      	bne.n	800cc04 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fbee 	bl	800c3de <HAL_I2C_SlaveRxCpltCallback>
}
 800cc02:	e00d      	b.n	800cc20 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fbd5 	bl	800c3ca <HAL_I2C_SlaveTxCpltCallback>
}
 800cc20:	bf00      	nop
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	fe00e800 	.word	0xfe00e800
 800cc2c:	ffff0000 	.word	0xffff0000

0800cc30 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a25      	ldr	r2, [pc, #148]	@ (800ccd4 <I2C_ITListenCplt+0xa4>)
 800cc3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2220      	movs	r2, #32
 800cc4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	f003 0304 	and.w	r3, r3, #4
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d022      	beq.n	800ccac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc70:	b2d2      	uxtb	r2, r2
 800cc72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d012      	beq.n	800ccac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cca4:	f043 0204 	orr.w	r2, r3, #4
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccac:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fb5f 	bl	800d374 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2210      	movs	r2, #16
 800ccbc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff fba1 	bl	800c40e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	ffff0000 	.word	0xffff0000

0800ccd8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cce8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a6d      	ldr	r2, [pc, #436]	@ (800ceac <I2C_ITError+0x1d4>)
 800ccf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	431a      	orrs	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	2b28      	cmp	r3, #40	@ 0x28
 800cd0e:	d005      	beq.n	800cd1c <I2C_ITError+0x44>
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
 800cd12:	2b29      	cmp	r3, #41	@ 0x29
 800cd14:	d002      	beq.n	800cd1c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd1a:	d10b      	bne.n	800cd34 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd1c:	2103      	movs	r1, #3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fb28 	bl	800d374 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2228      	movs	r2, #40	@ 0x28
 800cd28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a60      	ldr	r2, [pc, #384]	@ (800ceb0 <I2C_ITError+0x1d8>)
 800cd30:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd32:	e030      	b.n	800cd96 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd34:	f248 0103 	movw	r1, #32771	@ 0x8003
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fb1b 	bl	800d374 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f8e1 	bl	800cf06 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b60      	cmp	r3, #96	@ 0x60
 800cd4e:	d01f      	beq.n	800cd90 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	f003 0320 	and.w	r3, r3, #32
 800cd62:	2b20      	cmp	r3, #32
 800cd64:	d114      	bne.n	800cd90 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	f003 0310 	and.w	r3, r3, #16
 800cd70:	2b10      	cmp	r3, #16
 800cd72:	d109      	bne.n	800cd88 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2210      	movs	r2, #16
 800cd7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd80:	f043 0204 	orr.w	r2, r3, #4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd9a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d039      	beq.n	800ce18 <I2C_ITError+0x140>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b11      	cmp	r3, #17
 800cda8:	d002      	beq.n	800cdb0 <I2C_ITError+0xd8>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b21      	cmp	r3, #33	@ 0x21
 800cdae:	d133      	bne.n	800ce18 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdbe:	d107      	bne.n	800cdd0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cdce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe f822 	bl	800ae1e <HAL_DMA_GetState>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d017      	beq.n	800ce10 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde4:	4a33      	ldr	r2, [pc, #204]	@ (800ceb4 <I2C_ITError+0x1dc>)
 800cde6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fd fefc 	bl	800abf2 <HAL_DMA_Abort_IT>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d04d      	beq.n	800ce9c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce0e:	e045      	b.n	800ce9c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f851 	bl	800ceb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce16:	e041      	b.n	800ce9c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d039      	beq.n	800ce94 <I2C_ITError+0x1bc>
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2b12      	cmp	r3, #18
 800ce24:	d002      	beq.n	800ce2c <I2C_ITError+0x154>
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b22      	cmp	r3, #34	@ 0x22
 800ce2a:	d133      	bne.n	800ce94 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce3a:	d107      	bne.n	800ce4c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ce4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fd ffe4 	bl	800ae1e <HAL_DMA_GetState>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d017      	beq.n	800ce8c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce60:	4a14      	ldr	r2, [pc, #80]	@ (800ceb4 <I2C_ITError+0x1dc>)
 800ce62:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fd febe 	bl	800abf2 <HAL_DMA_Abort_IT>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d011      	beq.n	800cea0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce86:	4610      	mov	r0, r2
 800ce88:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce8a:	e009      	b.n	800cea0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f813 	bl	800ceb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce92:	e005      	b.n	800cea0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f80f 	bl	800ceb8 <I2C_TreatErrorCallback>
  }
}
 800ce9a:	e002      	b.n	800cea2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce9c:	bf00      	nop
 800ce9e:	e000      	b.n	800cea2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cea0:	bf00      	nop
}
 800cea2:	bf00      	nop
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	ffff0000 	.word	0xffff0000
 800ceb0:	0800c467 	.word	0x0800c467
 800ceb4:	0800cf4f 	.word	0x0800cf4f

0800ceb8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b60      	cmp	r3, #96	@ 0x60
 800ceca:	d10e      	bne.n	800ceea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2220      	movs	r2, #32
 800ced0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff faa7 	bl	800c436 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cee8:	e009      	b.n	800cefe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff fa92 	bl	800c422 <HAL_I2C_ErrorCallback>
}
 800cefe:	bf00      	nop
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	699b      	ldr	r3, [r3, #24]
 800cf14:	f003 0302 	and.w	r3, r3, #2
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d103      	bne.n	800cf24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2200      	movs	r2, #0
 800cf22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	699b      	ldr	r3, [r3, #24]
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d007      	beq.n	800cf42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	699a      	ldr	r2, [r3, #24]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f042 0201 	orr.w	r2, r2, #1
 800cf40:	619a      	str	r2, [r3, #24]
  }
}
 800cf42:	bf00      	nop
 800cf44:	370c      	adds	r7, #12
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d003      	beq.n	800cf6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf68:	2200      	movs	r2, #0
 800cf6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf78:	2200      	movs	r2, #0
 800cf7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f7ff ff9b 	bl	800ceb8 <I2C_TreatErrorCallback>
}
 800cf82:	bf00      	nop
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	603b      	str	r3, [r7, #0]
 800cf96:	4613      	mov	r3, r2
 800cf98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cf9a:	e03b      	b.n	800d014 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 f8d5 	bl	800d150 <I2C_IsErrorOccurred>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d001      	beq.n	800cfb0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e041      	b.n	800d034 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb6:	d02d      	beq.n	800d014 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfb8:	f7fd fbdc 	bl	800a774 <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d302      	bcc.n	800cfce <I2C_WaitOnFlagUntilTimeout+0x44>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d122      	bne.n	800d014 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	699a      	ldr	r2, [r3, #24]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	bf0c      	ite	eq
 800cfde:	2301      	moveq	r3, #1
 800cfe0:	2300      	movne	r3, #0
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d113      	bne.n	800d014 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cff0:	f043 0220 	orr.w	r2, r3, #32
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2220      	movs	r2, #32
 800cffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e00f      	b.n	800d034 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	699a      	ldr	r2, [r3, #24]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	4013      	ands	r3, r2
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	429a      	cmp	r2, r3
 800d022:	bf0c      	ite	eq
 800d024:	2301      	moveq	r3, #1
 800d026:	2300      	movne	r3, #0
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	461a      	mov	r2, r3
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d0b4      	beq.n	800cf9c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d048:	e033      	b.n	800d0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f000 f87e 	bl	800d150 <I2C_IsErrorOccurred>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e031      	b.n	800d0c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d064:	d025      	beq.n	800d0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d066:	f7fd fb85 	bl	800a774 <HAL_GetTick>
 800d06a:	4602      	mov	r2, r0
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	429a      	cmp	r2, r3
 800d074:	d302      	bcc.n	800d07c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d11a      	bne.n	800d0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	f003 0302 	and.w	r3, r3, #2
 800d086:	2b02      	cmp	r3, #2
 800d088:	d013      	beq.n	800d0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d08e:	f043 0220 	orr.w	r2, r3, #32
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2220      	movs	r2, #32
 800d09a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e007      	b.n	800d0c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	699b      	ldr	r3, [r3, #24]
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d1c4      	bne.n	800d04a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0d6:	e02f      	b.n	800d138 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f000 f837 	bl	800d150 <I2C_IsErrorOccurred>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e02d      	b.n	800d148 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ec:	f7fd fb42 	bl	800a774 <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d302      	bcc.n	800d102 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d11a      	bne.n	800d138 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	f003 0320 	and.w	r3, r3, #32
 800d10c:	2b20      	cmp	r3, #32
 800d10e:	d013      	beq.n	800d138 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d114:	f043 0220 	orr.w	r2, r3, #32
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2220      	movs	r2, #32
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e007      	b.n	800d148 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	699b      	ldr	r3, [r3, #24]
 800d13e:	f003 0320 	and.w	r3, r3, #32
 800d142:	2b20      	cmp	r3, #32
 800d144:	d1c8      	bne.n	800d0d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08a      	sub	sp, #40	@ 0x28
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	f003 0310 	and.w	r3, r3, #16
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d068      	beq.n	800d24e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2210      	movs	r2, #16
 800d182:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d184:	e049      	b.n	800d21a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18c:	d045      	beq.n	800d21a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d18e:	f7fd faf1 	bl	800a774 <HAL_GetTick>
 800d192:	4602      	mov	r2, r0
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d302      	bcc.n	800d1a4 <I2C_IsErrorOccurred+0x54>
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d13a      	bne.n	800d21a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1c6:	d121      	bne.n	800d20c <I2C_IsErrorOccurred+0xbc>
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1ce:	d01d      	beq.n	800d20c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d1d0:	7cfb      	ldrb	r3, [r7, #19]
 800d1d2:	2b20      	cmp	r3, #32
 800d1d4:	d01a      	beq.n	800d20c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d1e6:	f7fd fac5 	bl	800a774 <HAL_GetTick>
 800d1ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d1ec:	e00e      	b.n	800d20c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d1ee:	f7fd fac1 	bl	800a774 <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2b19      	cmp	r3, #25
 800d1fa:	d907      	bls.n	800d20c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	f043 0320 	orr.w	r3, r3, #32
 800d202:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d20a:	e006      	b.n	800d21a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	f003 0320 	and.w	r3, r3, #32
 800d216:	2b20      	cmp	r3, #32
 800d218:	d1e9      	bne.n	800d1ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	699b      	ldr	r3, [r3, #24]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b20      	cmp	r3, #32
 800d226:	d003      	beq.n	800d230 <I2C_IsErrorOccurred+0xe0>
 800d228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d0aa      	beq.n	800d186 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d234:	2b00      	cmp	r3, #0
 800d236:	d103      	bne.n	800d240 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2220      	movs	r2, #32
 800d23e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	f043 0304 	orr.w	r3, r3, #4
 800d246:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00b      	beq.n	800d278 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	f043 0301 	orr.w	r3, r3, #1
 800d266:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00b      	beq.n	800d29a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	f043 0308 	orr.w	r3, r3, #8
 800d288:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d292:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00b      	beq.n	800d2bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	f043 0302 	orr.w	r3, r3, #2
 800d2aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01c      	beq.n	800d2fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff fe1e 	bl	800cf06 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6859      	ldr	r1, [r3, #4]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d30c <I2C_IsErrorOccurred+0x1bc>)
 800d2d6:	400b      	ands	r3, r1
 800d2d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2220      	movs	r2, #32
 800d2ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d2fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d302:	4618      	mov	r0, r3
 800d304:	3728      	adds	r7, #40	@ 0x28
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	fe00e800 	.word	0xfe00e800

0800d310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d310:	b480      	push	{r7}
 800d312:	b087      	sub	sp, #28
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	607b      	str	r3, [r7, #4]
 800d31a:	460b      	mov	r3, r1
 800d31c:	817b      	strh	r3, [r7, #10]
 800d31e:	4613      	mov	r3, r2
 800d320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d322:	897b      	ldrh	r3, [r7, #10]
 800d324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d328:	7a7b      	ldrb	r3, [r7, #9]
 800d32a:	041b      	lsls	r3, r3, #16
 800d32c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d330:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d336:	6a3b      	ldr	r3, [r7, #32]
 800d338:	4313      	orrs	r3, r2
 800d33a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d33e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685a      	ldr	r2, [r3, #4]
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	0d5b      	lsrs	r3, r3, #21
 800d34a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d34e:	4b08      	ldr	r3, [pc, #32]	@ (800d370 <I2C_TransferConfig+0x60>)
 800d350:	430b      	orrs	r3, r1
 800d352:	43db      	mvns	r3, r3
 800d354:	ea02 0103 	and.w	r1, r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	697a      	ldr	r2, [r7, #20]
 800d35e:	430a      	orrs	r2, r1
 800d360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d362:	bf00      	nop
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	03ff63ff 	.word	0x03ff63ff

0800d374 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d380:	2300      	movs	r3, #0
 800d382:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d384:	887b      	ldrh	r3, [r7, #2]
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00f      	beq.n	800d3ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800d394:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d3a2:	2b28      	cmp	r3, #40	@ 0x28
 800d3a4:	d003      	beq.n	800d3ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d3ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d3ae:	887b      	ldrh	r3, [r7, #2]
 800d3b0:	f003 0302 	and.w	r3, r3, #2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00f      	beq.n	800d3d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800d3be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d3cc:	2b28      	cmp	r3, #40	@ 0x28
 800d3ce:	d003      	beq.n	800d3d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d3d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da03      	bge.n	800d3e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800d3e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d3e8:	887b      	ldrh	r3, [r7, #2]
 800d3ea:	2b10      	cmp	r3, #16
 800d3ec:	d103      	bne.n	800d3f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800d3f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3f6:	887b      	ldrh	r3, [r7, #2]
 800d3f8:	2b20      	cmp	r3, #32
 800d3fa:	d103      	bne.n	800d404 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f043 0320 	orr.w	r3, r3, #32
 800d402:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d404:	887b      	ldrh	r3, [r7, #2]
 800d406:	2b40      	cmp	r3, #64	@ 0x40
 800d408:	d103      	bne.n	800d412 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d410:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6819      	ldr	r1, [r3, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	43da      	mvns	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	400a      	ands	r2, r1
 800d422:	601a      	str	r2, [r3, #0]
}
 800d424:	bf00      	nop
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b20      	cmp	r3, #32
 800d444:	d138      	bne.n	800d4b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d101      	bne.n	800d454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d450:	2302      	movs	r3, #2
 800d452:	e032      	b.n	800d4ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2224      	movs	r2, #36	@ 0x24
 800d460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f022 0201 	bic.w	r2, r2, #1
 800d472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6819      	ldr	r1, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	430a      	orrs	r2, r1
 800d492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f042 0201 	orr.w	r2, r2, #1
 800d4a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	e000      	b.n	800d4ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d4b8:	2302      	movs	r3, #2
  }
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d4c6:	b480      	push	{r7}
 800d4c8:	b085      	sub	sp, #20
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	2b20      	cmp	r3, #32
 800d4da:	d139      	bne.n	800d550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d101      	bne.n	800d4ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d4e6:	2302      	movs	r3, #2
 800d4e8:	e033      	b.n	800d552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2224      	movs	r2, #36	@ 0x24
 800d4f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f022 0201 	bic.w	r2, r2, #1
 800d508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f042 0201 	orr.w	r2, r2, #1
 800d53a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2220      	movs	r2, #32
 800d540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	e000      	b.n	800d552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d550:	2302      	movs	r3, #2
  }
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
	...

0800d560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d141      	bne.n	800d5f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d56e:	4b4b      	ldr	r3, [pc, #300]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d57a:	d131      	bne.n	800d5e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d57c:	4b47      	ldr	r3, [pc, #284]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d582:	4a46      	ldr	r2, [pc, #280]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d58c:	4b43      	ldr	r3, [pc, #268]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d594:	4a41      	ldr	r2, [pc, #260]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d59a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d59c:	4b40      	ldr	r3, [pc, #256]	@ (800d6a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2232      	movs	r2, #50	@ 0x32
 800d5a2:	fb02 f303 	mul.w	r3, r2, r3
 800d5a6:	4a3f      	ldr	r2, [pc, #252]	@ (800d6a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ac:	0c9b      	lsrs	r3, r3, #18
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d5b2:	e002      	b.n	800d5ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d5ba:	4b38      	ldr	r3, [pc, #224]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5c6:	d102      	bne.n	800d5ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1f2      	bne.n	800d5b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d5ce:	4b33      	ldr	r3, [pc, #204]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5da:	d158      	bne.n	800d68e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	e057      	b.n	800d690 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e6:	4a2d      	ldr	r2, [pc, #180]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d5f0:	e04d      	b.n	800d68e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5f8:	d141      	bne.n	800d67e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d5fa:	4b28      	ldr	r3, [pc, #160]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d606:	d131      	bne.n	800d66c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d608:	4b24      	ldr	r3, [pc, #144]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d60e:	4a23      	ldr	r2, [pc, #140]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d618:	4b20      	ldr	r3, [pc, #128]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d620:	4a1e      	ldr	r2, [pc, #120]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d628:	4b1d      	ldr	r3, [pc, #116]	@ (800d6a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2232      	movs	r2, #50	@ 0x32
 800d62e:	fb02 f303 	mul.w	r3, r2, r3
 800d632:	4a1c      	ldr	r2, [pc, #112]	@ (800d6a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d634:	fba2 2303 	umull	r2, r3, r2, r3
 800d638:	0c9b      	lsrs	r3, r3, #18
 800d63a:	3301      	adds	r3, #1
 800d63c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d63e:	e002      	b.n	800d646 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3b01      	subs	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d646:	4b15      	ldr	r3, [pc, #84]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d64e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d652:	d102      	bne.n	800d65a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1f2      	bne.n	800d640 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d65a:	4b10      	ldr	r3, [pc, #64]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d666:	d112      	bne.n	800d68e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d668:	2303      	movs	r3, #3
 800d66a:	e011      	b.n	800d690 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d66c:	4b0b      	ldr	r3, [pc, #44]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d672:	4a0a      	ldr	r2, [pc, #40]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d67c:	e007      	b.n	800d68e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d67e:	4b07      	ldr	r3, [pc, #28]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d686:	4a05      	ldr	r2, [pc, #20]	@ (800d69c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d688:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d68c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	40007000 	.word	0x40007000
 800d6a0:	20000078 	.word	0x20000078
 800d6a4:	431bde83 	.word	0x431bde83

0800d6a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d6ac:	4b05      	ldr	r3, [pc, #20]	@ (800d6c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	4a04      	ldr	r2, [pc, #16]	@ (800d6c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d6b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d6b6:	6093      	str	r3, [r2, #8]
}
 800d6b8:	bf00      	nop
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	40007000 	.word	0x40007000

0800d6c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e2fe      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d075      	beq.n	800d7d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6e6:	4b97      	ldr	r3, [pc, #604]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	f003 030c 	and.w	r3, r3, #12
 800d6ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d6f0:	4b94      	ldr	r3, [pc, #592]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	f003 0303 	and.w	r3, r3, #3
 800d6f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	2b0c      	cmp	r3, #12
 800d6fe:	d102      	bne.n	800d706 <HAL_RCC_OscConfig+0x3e>
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	2b03      	cmp	r3, #3
 800d704:	d002      	beq.n	800d70c <HAL_RCC_OscConfig+0x44>
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	2b08      	cmp	r3, #8
 800d70a:	d10b      	bne.n	800d724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d70c:	4b8d      	ldr	r3, [pc, #564]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d714:	2b00      	cmp	r3, #0
 800d716:	d05b      	beq.n	800d7d0 <HAL_RCC_OscConfig+0x108>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d157      	bne.n	800d7d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	e2d9      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d72c:	d106      	bne.n	800d73c <HAL_RCC_OscConfig+0x74>
 800d72e:	4b85      	ldr	r3, [pc, #532]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a84      	ldr	r2, [pc, #528]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	e01d      	b.n	800d778 <HAL_RCC_OscConfig+0xb0>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d744:	d10c      	bne.n	800d760 <HAL_RCC_OscConfig+0x98>
 800d746:	4b7f      	ldr	r3, [pc, #508]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a7e      	ldr	r2, [pc, #504]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d74c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	4b7c      	ldr	r3, [pc, #496]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a7b      	ldr	r2, [pc, #492]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	e00b      	b.n	800d778 <HAL_RCC_OscConfig+0xb0>
 800d760:	4b78      	ldr	r3, [pc, #480]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a77      	ldr	r2, [pc, #476]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4b75      	ldr	r3, [pc, #468]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a74      	ldr	r2, [pc, #464]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d013      	beq.n	800d7a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d780:	f7fc fff8 	bl	800a774 <HAL_GetTick>
 800d784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d786:	e008      	b.n	800d79a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d788:	f7fc fff4 	bl	800a774 <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	2b64      	cmp	r3, #100	@ 0x64
 800d794:	d901      	bls.n	800d79a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d796:	2303      	movs	r3, #3
 800d798:	e29e      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d79a:	4b6a      	ldr	r3, [pc, #424]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0f0      	beq.n	800d788 <HAL_RCC_OscConfig+0xc0>
 800d7a6:	e014      	b.n	800d7d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7a8:	f7fc ffe4 	bl	800a774 <HAL_GetTick>
 800d7ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d7ae:	e008      	b.n	800d7c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d7b0:	f7fc ffe0 	bl	800a774 <HAL_GetTick>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	2b64      	cmp	r3, #100	@ 0x64
 800d7bc:	d901      	bls.n	800d7c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	e28a      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d7c2:	4b60      	ldr	r3, [pc, #384]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1f0      	bne.n	800d7b0 <HAL_RCC_OscConfig+0xe8>
 800d7ce:	e000      	b.n	800d7d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0302 	and.w	r3, r3, #2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d075      	beq.n	800d8ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7de:	4b59      	ldr	r3, [pc, #356]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	f003 030c 	and.w	r3, r3, #12
 800d7e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d7e8:	4b56      	ldr	r3, [pc, #344]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	f003 0303 	and.w	r3, r3, #3
 800d7f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	2b0c      	cmp	r3, #12
 800d7f6:	d102      	bne.n	800d7fe <HAL_RCC_OscConfig+0x136>
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d002      	beq.n	800d804 <HAL_RCC_OscConfig+0x13c>
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	2b04      	cmp	r3, #4
 800d802:	d11f      	bne.n	800d844 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d804:	4b4f      	ldr	r3, [pc, #316]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d005      	beq.n	800d81c <HAL_RCC_OscConfig+0x154>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	e25d      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d81c:	4b49      	ldr	r3, [pc, #292]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	061b      	lsls	r3, r3, #24
 800d82a:	4946      	ldr	r1, [pc, #280]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d82c:	4313      	orrs	r3, r2
 800d82e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d830:	4b45      	ldr	r3, [pc, #276]	@ (800d948 <HAL_RCC_OscConfig+0x280>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f7fc ff51 	bl	800a6dc <HAL_InitTick>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d043      	beq.n	800d8c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e249      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d023      	beq.n	800d894 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d84c:	4b3d      	ldr	r3, [pc, #244]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a3c      	ldr	r2, [pc, #240]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d858:	f7fc ff8c 	bl	800a774 <HAL_GetTick>
 800d85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d85e:	e008      	b.n	800d872 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d860:	f7fc ff88 	bl	800a774 <HAL_GetTick>
 800d864:	4602      	mov	r2, r0
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d901      	bls.n	800d872 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d86e:	2303      	movs	r3, #3
 800d870:	e232      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d872:	4b34      	ldr	r3, [pc, #208]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d0f0      	beq.n	800d860 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d87e:	4b31      	ldr	r3, [pc, #196]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	061b      	lsls	r3, r3, #24
 800d88c:	492d      	ldr	r1, [pc, #180]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d88e:	4313      	orrs	r3, r2
 800d890:	604b      	str	r3, [r1, #4]
 800d892:	e01a      	b.n	800d8ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d894:	4b2b      	ldr	r3, [pc, #172]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a2a      	ldr	r2, [pc, #168]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d89a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d89e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8a0:	f7fc ff68 	bl	800a774 <HAL_GetTick>
 800d8a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d8a6:	e008      	b.n	800d8ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d8a8:	f7fc ff64 	bl	800a774 <HAL_GetTick>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d901      	bls.n	800d8ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	e20e      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d8ba:	4b22      	ldr	r3, [pc, #136]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1f0      	bne.n	800d8a8 <HAL_RCC_OscConfig+0x1e0>
 800d8c6:	e000      	b.n	800d8ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d8c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 0308 	and.w	r3, r3, #8
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d041      	beq.n	800d95a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	695b      	ldr	r3, [r3, #20]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d01c      	beq.n	800d918 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8de:	4b19      	ldr	r3, [pc, #100]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d8e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8e4:	4a17      	ldr	r2, [pc, #92]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d8e6:	f043 0301 	orr.w	r3, r3, #1
 800d8ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8ee:	f7fc ff41 	bl	800a774 <HAL_GetTick>
 800d8f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d8f4:	e008      	b.n	800d908 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8f6:	f7fc ff3d 	bl	800a774 <HAL_GetTick>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	2b02      	cmp	r3, #2
 800d902:	d901      	bls.n	800d908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d904:	2303      	movs	r3, #3
 800d906:	e1e7      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d908:	4b0e      	ldr	r3, [pc, #56]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d90a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d90e:	f003 0302 	and.w	r3, r3, #2
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0ef      	beq.n	800d8f6 <HAL_RCC_OscConfig+0x22e>
 800d916:	e020      	b.n	800d95a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d918:	4b0a      	ldr	r3, [pc, #40]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d91a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d91e:	4a09      	ldr	r2, [pc, #36]	@ (800d944 <HAL_RCC_OscConfig+0x27c>)
 800d920:	f023 0301 	bic.w	r3, r3, #1
 800d924:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d928:	f7fc ff24 	bl	800a774 <HAL_GetTick>
 800d92c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d92e:	e00d      	b.n	800d94c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d930:	f7fc ff20 	bl	800a774 <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d906      	bls.n	800d94c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d93e:	2303      	movs	r3, #3
 800d940:	e1ca      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
 800d942:	bf00      	nop
 800d944:	40021000 	.word	0x40021000
 800d948:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d94c:	4b8c      	ldr	r3, [pc, #560]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d94e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d952:	f003 0302 	and.w	r3, r3, #2
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1ea      	bne.n	800d930 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f003 0304 	and.w	r3, r3, #4
 800d962:	2b00      	cmp	r3, #0
 800d964:	f000 80a6 	beq.w	800dab4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d968:	2300      	movs	r3, #0
 800d96a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d96c:	4b84      	ldr	r3, [pc, #528]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d96e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <HAL_RCC_OscConfig+0x2b4>
 800d978:	2301      	movs	r3, #1
 800d97a:	e000      	b.n	800d97e <HAL_RCC_OscConfig+0x2b6>
 800d97c:	2300      	movs	r3, #0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00d      	beq.n	800d99e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d982:	4b7f      	ldr	r3, [pc, #508]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d986:	4a7e      	ldr	r2, [pc, #504]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d98c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d98e:	4b7c      	ldr	r3, [pc, #496]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d99a:	2301      	movs	r3, #1
 800d99c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d99e:	4b79      	ldr	r3, [pc, #484]	@ (800db84 <HAL_RCC_OscConfig+0x4bc>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d118      	bne.n	800d9dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d9aa:	4b76      	ldr	r3, [pc, #472]	@ (800db84 <HAL_RCC_OscConfig+0x4bc>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a75      	ldr	r2, [pc, #468]	@ (800db84 <HAL_RCC_OscConfig+0x4bc>)
 800d9b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d9b6:	f7fc fedd 	bl	800a774 <HAL_GetTick>
 800d9ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9bc:	e008      	b.n	800d9d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9be:	f7fc fed9 	bl	800a774 <HAL_GetTick>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d901      	bls.n	800d9d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e183      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9d0:	4b6c      	ldr	r3, [pc, #432]	@ (800db84 <HAL_RCC_OscConfig+0x4bc>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d0f0      	beq.n	800d9be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d108      	bne.n	800d9f6 <HAL_RCC_OscConfig+0x32e>
 800d9e4:	4b66      	ldr	r3, [pc, #408]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ea:	4a65      	ldr	r2, [pc, #404]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800d9ec:	f043 0301 	orr.w	r3, r3, #1
 800d9f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9f4:	e024      	b.n	800da40 <HAL_RCC_OscConfig+0x378>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d110      	bne.n	800da20 <HAL_RCC_OscConfig+0x358>
 800d9fe:	4b60      	ldr	r3, [pc, #384]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da04:	4a5e      	ldr	r2, [pc, #376]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da06:	f043 0304 	orr.w	r3, r3, #4
 800da0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800da0e:	4b5c      	ldr	r3, [pc, #368]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da14:	4a5a      	ldr	r2, [pc, #360]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da16:	f043 0301 	orr.w	r3, r3, #1
 800da1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800da1e:	e00f      	b.n	800da40 <HAL_RCC_OscConfig+0x378>
 800da20:	4b57      	ldr	r3, [pc, #348]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da26:	4a56      	ldr	r2, [pc, #344]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da28:	f023 0301 	bic.w	r3, r3, #1
 800da2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800da30:	4b53      	ldr	r3, [pc, #332]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da36:	4a52      	ldr	r2, [pc, #328]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da38:	f023 0304 	bic.w	r3, r3, #4
 800da3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d016      	beq.n	800da76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da48:	f7fc fe94 	bl	800a774 <HAL_GetTick>
 800da4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da4e:	e00a      	b.n	800da66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da50:	f7fc fe90 	bl	800a774 <HAL_GetTick>
 800da54:	4602      	mov	r2, r0
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da5e:	4293      	cmp	r3, r2
 800da60:	d901      	bls.n	800da66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800da62:	2303      	movs	r3, #3
 800da64:	e138      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da66:	4b46      	ldr	r3, [pc, #280]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da6c:	f003 0302 	and.w	r3, r3, #2
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0ed      	beq.n	800da50 <HAL_RCC_OscConfig+0x388>
 800da74:	e015      	b.n	800daa2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da76:	f7fc fe7d 	bl	800a774 <HAL_GetTick>
 800da7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da7c:	e00a      	b.n	800da94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da7e:	f7fc fe79 	bl	800a774 <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d901      	bls.n	800da94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800da90:	2303      	movs	r3, #3
 800da92:	e121      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da94:	4b3a      	ldr	r3, [pc, #232]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800da96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da9a:	f003 0302 	and.w	r3, r3, #2
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1ed      	bne.n	800da7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800daa2:	7ffb      	ldrb	r3, [r7, #31]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d105      	bne.n	800dab4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800daa8:	4b35      	ldr	r3, [pc, #212]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800daaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daac:	4a34      	ldr	r2, [pc, #208]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800daae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dab2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f003 0320 	and.w	r3, r3, #32
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d03c      	beq.n	800db3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01c      	beq.n	800db02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dac8:	4b2d      	ldr	r3, [pc, #180]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800daca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dace:	4a2c      	ldr	r2, [pc, #176]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800dad0:	f043 0301 	orr.w	r3, r3, #1
 800dad4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dad8:	f7fc fe4c 	bl	800a774 <HAL_GetTick>
 800dadc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dade:	e008      	b.n	800daf2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dae0:	f7fc fe48 	bl	800a774 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b02      	cmp	r3, #2
 800daec:	d901      	bls.n	800daf2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e0f2      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800daf2:	4b23      	ldr	r3, [pc, #140]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800daf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800daf8:	f003 0302 	and.w	r3, r3, #2
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0ef      	beq.n	800dae0 <HAL_RCC_OscConfig+0x418>
 800db00:	e01b      	b.n	800db3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800db02:	4b1f      	ldr	r3, [pc, #124]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800db04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db08:	4a1d      	ldr	r2, [pc, #116]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800db0a:	f023 0301 	bic.w	r3, r3, #1
 800db0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db12:	f7fc fe2f 	bl	800a774 <HAL_GetTick>
 800db16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800db18:	e008      	b.n	800db2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800db1a:	f7fc fe2b 	bl	800a774 <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	2b02      	cmp	r3, #2
 800db26:	d901      	bls.n	800db2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e0d5      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800db2c:	4b14      	ldr	r3, [pc, #80]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800db2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1ef      	bne.n	800db1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	69db      	ldr	r3, [r3, #28]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 80c9 	beq.w	800dcd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800db44:	4b0e      	ldr	r3, [pc, #56]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	f003 030c 	and.w	r3, r3, #12
 800db4c:	2b0c      	cmp	r3, #12
 800db4e:	f000 8083 	beq.w	800dc58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	69db      	ldr	r3, [r3, #28]
 800db56:	2b02      	cmp	r3, #2
 800db58:	d15e      	bne.n	800dc18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db5a:	4b09      	ldr	r3, [pc, #36]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a08      	ldr	r2, [pc, #32]	@ (800db80 <HAL_RCC_OscConfig+0x4b8>)
 800db60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db66:	f7fc fe05 	bl	800a774 <HAL_GetTick>
 800db6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db6c:	e00c      	b.n	800db88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db6e:	f7fc fe01 	bl	800a774 <HAL_GetTick>
 800db72:	4602      	mov	r2, r0
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d905      	bls.n	800db88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800db7c:	2303      	movs	r3, #3
 800db7e:	e0ab      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
 800db80:	40021000 	.word	0x40021000
 800db84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db88:	4b55      	ldr	r3, [pc, #340]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1ec      	bne.n	800db6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db94:	4b52      	ldr	r3, [pc, #328]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	4b52      	ldr	r3, [pc, #328]	@ (800dce4 <HAL_RCC_OscConfig+0x61c>)
 800db9a:	4013      	ands	r3, r2
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	6a11      	ldr	r1, [r2, #32]
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800dba4:	3a01      	subs	r2, #1
 800dba6:	0112      	lsls	r2, r2, #4
 800dba8:	4311      	orrs	r1, r2
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800dbae:	0212      	lsls	r2, r2, #8
 800dbb0:	4311      	orrs	r1, r2
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800dbb6:	0852      	lsrs	r2, r2, #1
 800dbb8:	3a01      	subs	r2, #1
 800dbba:	0552      	lsls	r2, r2, #21
 800dbbc:	4311      	orrs	r1, r2
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dbc2:	0852      	lsrs	r2, r2, #1
 800dbc4:	3a01      	subs	r2, #1
 800dbc6:	0652      	lsls	r2, r2, #25
 800dbc8:	4311      	orrs	r1, r2
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dbce:	06d2      	lsls	r2, r2, #27
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	4943      	ldr	r1, [pc, #268]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dbd8:	4b41      	ldr	r3, [pc, #260]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a40      	ldr	r2, [pc, #256]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dbde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbe2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800dbe4:	4b3e      	ldr	r3, [pc, #248]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	4a3d      	ldr	r2, [pc, #244]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dbea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbf0:	f7fc fdc0 	bl	800a774 <HAL_GetTick>
 800dbf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbf6:	e008      	b.n	800dc0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbf8:	f7fc fdbc 	bl	800a774 <HAL_GetTick>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d901      	bls.n	800dc0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800dc06:	2303      	movs	r3, #3
 800dc08:	e066      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dc0a:	4b35      	ldr	r3, [pc, #212]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0f0      	beq.n	800dbf8 <HAL_RCC_OscConfig+0x530>
 800dc16:	e05e      	b.n	800dcd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc18:	4b31      	ldr	r3, [pc, #196]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a30      	ldr	r2, [pc, #192]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dc22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc24:	f7fc fda6 	bl	800a774 <HAL_GetTick>
 800dc28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dc2a:	e008      	b.n	800dc3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc2c:	f7fc fda2 	bl	800a774 <HAL_GetTick>
 800dc30:	4602      	mov	r2, r0
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d901      	bls.n	800dc3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	e04c      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dc3e:	4b28      	ldr	r3, [pc, #160]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1f0      	bne.n	800dc2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800dc4a:	4b25      	ldr	r3, [pc, #148]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc4c:	68da      	ldr	r2, [r3, #12]
 800dc4e:	4924      	ldr	r1, [pc, #144]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc50:	4b25      	ldr	r3, [pc, #148]	@ (800dce8 <HAL_RCC_OscConfig+0x620>)
 800dc52:	4013      	ands	r3, r2
 800dc54:	60cb      	str	r3, [r1, #12]
 800dc56:	e03e      	b.n	800dcd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	69db      	ldr	r3, [r3, #28]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e039      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dc64:	4b1e      	ldr	r3, [pc, #120]	@ (800dce0 <HAL_RCC_OscConfig+0x618>)
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f003 0203 	and.w	r2, r3, #3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d12c      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc82:	3b01      	subs	r3, #1
 800dc84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d123      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d11b      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d113      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d109      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc8:	085b      	lsrs	r3, r3, #1
 800dcca:	3b01      	subs	r3, #1
 800dccc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d001      	beq.n	800dcd6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e000      	b.n	800dcd8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3720      	adds	r7, #32
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	40021000 	.word	0x40021000
 800dce4:	019f800c 	.word	0x019f800c
 800dce8:	feeefffc 	.word	0xfeeefffc

0800dcec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e11e      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dd04:	4b91      	ldr	r3, [pc, #580]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 030f 	and.w	r3, r3, #15
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d910      	bls.n	800dd34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd12:	4b8e      	ldr	r3, [pc, #568]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f023 020f 	bic.w	r2, r3, #15
 800dd1a:	498c      	ldr	r1, [pc, #560]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd22:	4b8a      	ldr	r3, [pc, #552]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d001      	beq.n	800dd34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e106      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 0301 	and.w	r3, r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d073      	beq.n	800de28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d129      	bne.n	800dd9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dd48:	4b81      	ldr	r3, [pc, #516]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d101      	bne.n	800dd58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	e0f4      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dd58:	f000 f99e 	bl	800e098 <RCC_GetSysClockFreqFromPLLSource>
 800dd5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	4a7c      	ldr	r2, [pc, #496]	@ (800df54 <HAL_RCC_ClockConfig+0x268>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d93f      	bls.n	800dde6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd66:	4b7a      	ldr	r3, [pc, #488]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d009      	beq.n	800dd86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d033      	beq.n	800dde6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d12f      	bne.n	800dde6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd86:	4b72      	ldr	r3, [pc, #456]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd8e:	4a70      	ldr	r2, [pc, #448]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dd90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dd96:	2380      	movs	r3, #128	@ 0x80
 800dd98:	617b      	str	r3, [r7, #20]
 800dd9a:	e024      	b.n	800dde6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d107      	bne.n	800ddb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dda4:	4b6a      	ldr	r3, [pc, #424]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d109      	bne.n	800ddc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e0c6      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ddb4:	4b66      	ldr	r3, [pc, #408]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d101      	bne.n	800ddc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e0be      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ddc4:	f000 f8ce 	bl	800df64 <HAL_RCC_GetSysClockFreq>
 800ddc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	4a61      	ldr	r2, [pc, #388]	@ (800df54 <HAL_RCC_ClockConfig+0x268>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d909      	bls.n	800dde6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ddd2:	4b5f      	ldr	r3, [pc, #380]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ddda:	4a5d      	ldr	r2, [pc, #372]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800dde2:	2380      	movs	r3, #128	@ 0x80
 800dde4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dde6:	4b5a      	ldr	r3, [pc, #360]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	f023 0203 	bic.w	r2, r3, #3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	4957      	ldr	r1, [pc, #348]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddf8:	f7fc fcbc 	bl	800a774 <HAL_GetTick>
 800ddfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddfe:	e00a      	b.n	800de16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de00:	f7fc fcb8 	bl	800a774 <HAL_GetTick>
 800de04:	4602      	mov	r2, r0
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de0e:	4293      	cmp	r3, r2
 800de10:	d901      	bls.n	800de16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800de12:	2303      	movs	r3, #3
 800de14:	e095      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de16:	4b4e      	ldr	r3, [pc, #312]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f003 020c 	and.w	r2, r3, #12
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	429a      	cmp	r2, r3
 800de26:	d1eb      	bne.n	800de00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 0302 	and.w	r3, r3, #2
 800de30:	2b00      	cmp	r3, #0
 800de32:	d023      	beq.n	800de7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f003 0304 	and.w	r3, r3, #4
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d005      	beq.n	800de4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de40:	4b43      	ldr	r3, [pc, #268]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	4a42      	ldr	r2, [pc, #264]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f003 0308 	and.w	r3, r3, #8
 800de54:	2b00      	cmp	r3, #0
 800de56:	d007      	beq.n	800de68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800de58:	4b3d      	ldr	r3, [pc, #244]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800de60:	4a3b      	ldr	r2, [pc, #236]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de68:	4b39      	ldr	r3, [pc, #228]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	4936      	ldr	r1, [pc, #216]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de76:	4313      	orrs	r3, r2
 800de78:	608b      	str	r3, [r1, #8]
 800de7a:	e008      	b.n	800de8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	2b80      	cmp	r3, #128	@ 0x80
 800de80:	d105      	bne.n	800de8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800de82:	4b33      	ldr	r3, [pc, #204]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	4a32      	ldr	r2, [pc, #200]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800de88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de8e:	4b2f      	ldr	r3, [pc, #188]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f003 030f 	and.w	r3, r3, #15
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d21d      	bcs.n	800ded8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de9c:	4b2b      	ldr	r3, [pc, #172]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f023 020f 	bic.w	r2, r3, #15
 800dea4:	4929      	ldr	r1, [pc, #164]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800deac:	f7fc fc62 	bl	800a774 <HAL_GetTick>
 800deb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800deb2:	e00a      	b.n	800deca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800deb4:	f7fc fc5e 	bl	800a774 <HAL_GetTick>
 800deb8:	4602      	mov	r2, r0
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d901      	bls.n	800deca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e03b      	b.n	800df42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800deca:	4b20      	ldr	r3, [pc, #128]	@ (800df4c <HAL_RCC_ClockConfig+0x260>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f003 030f 	and.w	r3, r3, #15
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d1ed      	bne.n	800deb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d008      	beq.n	800def6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dee4:	4b1a      	ldr	r3, [pc, #104]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	4917      	ldr	r1, [pc, #92]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800def2:	4313      	orrs	r3, r2
 800def4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0308 	and.w	r3, r3, #8
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800df02:	4b13      	ldr	r3, [pc, #76]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	00db      	lsls	r3, r3, #3
 800df10:	490f      	ldr	r1, [pc, #60]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800df12:	4313      	orrs	r3, r2
 800df14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800df16:	f000 f825 	bl	800df64 <HAL_RCC_GetSysClockFreq>
 800df1a:	4602      	mov	r2, r0
 800df1c:	4b0c      	ldr	r3, [pc, #48]	@ (800df50 <HAL_RCC_ClockConfig+0x264>)
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	091b      	lsrs	r3, r3, #4
 800df22:	f003 030f 	and.w	r3, r3, #15
 800df26:	490c      	ldr	r1, [pc, #48]	@ (800df58 <HAL_RCC_ClockConfig+0x26c>)
 800df28:	5ccb      	ldrb	r3, [r1, r3]
 800df2a:	f003 031f 	and.w	r3, r3, #31
 800df2e:	fa22 f303 	lsr.w	r3, r2, r3
 800df32:	4a0a      	ldr	r2, [pc, #40]	@ (800df5c <HAL_RCC_ClockConfig+0x270>)
 800df34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800df36:	4b0a      	ldr	r3, [pc, #40]	@ (800df60 <HAL_RCC_ClockConfig+0x274>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fc fbce 	bl	800a6dc <HAL_InitTick>
 800df40:	4603      	mov	r3, r0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3718      	adds	r7, #24
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	40022000 	.word	0x40022000
 800df50:	40021000 	.word	0x40021000
 800df54:	04c4b400 	.word	0x04c4b400
 800df58:	08018b38 	.word	0x08018b38
 800df5c:	20000078 	.word	0x20000078
 800df60:	2000007c 	.word	0x2000007c

0800df64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df64:	b480      	push	{r7}
 800df66:	b087      	sub	sp, #28
 800df68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800df6a:	4b2c      	ldr	r3, [pc, #176]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	f003 030c 	and.w	r3, r3, #12
 800df72:	2b04      	cmp	r3, #4
 800df74:	d102      	bne.n	800df7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800df76:	4b2a      	ldr	r3, [pc, #168]	@ (800e020 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df78:	613b      	str	r3, [r7, #16]
 800df7a:	e047      	b.n	800e00c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800df7c:	4b27      	ldr	r3, [pc, #156]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	f003 030c 	and.w	r3, r3, #12
 800df84:	2b08      	cmp	r3, #8
 800df86:	d102      	bne.n	800df8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800df88:	4b26      	ldr	r3, [pc, #152]	@ (800e024 <HAL_RCC_GetSysClockFreq+0xc0>)
 800df8a:	613b      	str	r3, [r7, #16]
 800df8c:	e03e      	b.n	800e00c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800df8e:	4b23      	ldr	r3, [pc, #140]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	f003 030c 	and.w	r3, r3, #12
 800df96:	2b0c      	cmp	r3, #12
 800df98:	d136      	bne.n	800e008 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800df9a:	4b20      	ldr	r3, [pc, #128]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	f003 0303 	and.w	r3, r3, #3
 800dfa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dfa4:	4b1d      	ldr	r3, [pc, #116]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	091b      	lsrs	r3, r3, #4
 800dfaa:	f003 030f 	and.w	r3, r3, #15
 800dfae:	3301      	adds	r3, #1
 800dfb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b03      	cmp	r3, #3
 800dfb6:	d10c      	bne.n	800dfd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dfb8:	4a1a      	ldr	r2, [pc, #104]	@ (800e024 <HAL_RCC_GetSysClockFreq+0xc0>)
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc0:	4a16      	ldr	r2, [pc, #88]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfc2:	68d2      	ldr	r2, [r2, #12]
 800dfc4:	0a12      	lsrs	r2, r2, #8
 800dfc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dfca:	fb02 f303 	mul.w	r3, r2, r3
 800dfce:	617b      	str	r3, [r7, #20]
      break;
 800dfd0:	e00c      	b.n	800dfec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dfd2:	4a13      	ldr	r2, [pc, #76]	@ (800e020 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfda:	4a10      	ldr	r2, [pc, #64]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfdc:	68d2      	ldr	r2, [r2, #12]
 800dfde:	0a12      	lsrs	r2, r2, #8
 800dfe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dfe4:	fb02 f303 	mul.w	r3, r2, r3
 800dfe8:	617b      	str	r3, [r7, #20]
      break;
 800dfea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dfec:	4b0b      	ldr	r3, [pc, #44]	@ (800e01c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	0e5b      	lsrs	r3, r3, #25
 800dff2:	f003 0303 	and.w	r3, r3, #3
 800dff6:	3301      	adds	r3, #1
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	fbb2 f3f3 	udiv	r3, r2, r3
 800e004:	613b      	str	r3, [r7, #16]
 800e006:	e001      	b.n	800e00c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e008:	2300      	movs	r3, #0
 800e00a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e00c:	693b      	ldr	r3, [r7, #16]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	371c      	adds	r7, #28
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	40021000 	.word	0x40021000
 800e020:	00f42400 	.word	0x00f42400
 800e024:	007a1200 	.word	0x007a1200

0800e028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e028:	b480      	push	{r7}
 800e02a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e02c:	4b03      	ldr	r3, [pc, #12]	@ (800e03c <HAL_RCC_GetHCLKFreq+0x14>)
 800e02e:	681b      	ldr	r3, [r3, #0]
}
 800e030:	4618      	mov	r0, r3
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	20000078 	.word	0x20000078

0800e040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e044:	f7ff fff0 	bl	800e028 <HAL_RCC_GetHCLKFreq>
 800e048:	4602      	mov	r2, r0
 800e04a:	4b06      	ldr	r3, [pc, #24]	@ (800e064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	0a1b      	lsrs	r3, r3, #8
 800e050:	f003 0307 	and.w	r3, r3, #7
 800e054:	4904      	ldr	r1, [pc, #16]	@ (800e068 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e056:	5ccb      	ldrb	r3, [r1, r3]
 800e058:	f003 031f 	and.w	r3, r3, #31
 800e05c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e060:	4618      	mov	r0, r3
 800e062:	bd80      	pop	{r7, pc}
 800e064:	40021000 	.word	0x40021000
 800e068:	08018b48 	.word	0x08018b48

0800e06c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e070:	f7ff ffda 	bl	800e028 <HAL_RCC_GetHCLKFreq>
 800e074:	4602      	mov	r2, r0
 800e076:	4b06      	ldr	r3, [pc, #24]	@ (800e090 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	0adb      	lsrs	r3, r3, #11
 800e07c:	f003 0307 	and.w	r3, r3, #7
 800e080:	4904      	ldr	r1, [pc, #16]	@ (800e094 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e082:	5ccb      	ldrb	r3, [r1, r3]
 800e084:	f003 031f 	and.w	r3, r3, #31
 800e088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	40021000 	.word	0x40021000
 800e094:	08018b48 	.word	0x08018b48

0800e098 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e098:	b480      	push	{r7}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e09e:	4b1e      	ldr	r3, [pc, #120]	@ (800e118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	f003 0303 	and.w	r3, r3, #3
 800e0a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e0a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	091b      	lsrs	r3, r3, #4
 800e0ae:	f003 030f 	and.w	r3, r3, #15
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	2b03      	cmp	r3, #3
 800e0ba:	d10c      	bne.n	800e0d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e0bc:	4a17      	ldr	r2, [pc, #92]	@ (800e11c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0c4:	4a14      	ldr	r2, [pc, #80]	@ (800e118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0c6:	68d2      	ldr	r2, [r2, #12]
 800e0c8:	0a12      	lsrs	r2, r2, #8
 800e0ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e0ce:	fb02 f303 	mul.w	r3, r2, r3
 800e0d2:	617b      	str	r3, [r7, #20]
    break;
 800e0d4:	e00c      	b.n	800e0f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e0d6:	4a12      	ldr	r2, [pc, #72]	@ (800e120 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0de:	4a0e      	ldr	r2, [pc, #56]	@ (800e118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0e0:	68d2      	ldr	r2, [r2, #12]
 800e0e2:	0a12      	lsrs	r2, r2, #8
 800e0e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e0e8:	fb02 f303 	mul.w	r3, r2, r3
 800e0ec:	617b      	str	r3, [r7, #20]
    break;
 800e0ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e0f0:	4b09      	ldr	r3, [pc, #36]	@ (800e118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	0e5b      	lsrs	r3, r3, #25
 800e0f6:	f003 0303 	and.w	r3, r3, #3
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	005b      	lsls	r3, r3, #1
 800e0fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e100:	697a      	ldr	r2, [r7, #20]
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	fbb2 f3f3 	udiv	r3, r2, r3
 800e108:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e10a:	687b      	ldr	r3, [r7, #4]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	371c      	adds	r7, #28
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	40021000 	.word	0x40021000
 800e11c:	007a1200 	.word	0x007a1200
 800e120:	00f42400 	.word	0x00f42400

0800e124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e12c:	2300      	movs	r3, #0
 800e12e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e130:	2300      	movs	r3, #0
 800e132:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 8098 	beq.w	800e272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e142:	2300      	movs	r3, #0
 800e144:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e146:	4b43      	ldr	r3, [pc, #268]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e14a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10d      	bne.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e152:	4b40      	ldr	r3, [pc, #256]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e156:	4a3f      	ldr	r2, [pc, #252]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e15c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e15e:	4b3d      	ldr	r3, [pc, #244]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e166:	60bb      	str	r3, [r7, #8]
 800e168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e16a:	2301      	movs	r3, #1
 800e16c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e16e:	4b3a      	ldr	r3, [pc, #232]	@ (800e258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a39      	ldr	r2, [pc, #228]	@ (800e258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e17a:	f7fc fafb 	bl	800a774 <HAL_GetTick>
 800e17e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e180:	e009      	b.n	800e196 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e182:	f7fc faf7 	bl	800a774 <HAL_GetTick>
 800e186:	4602      	mov	r2, r0
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d902      	bls.n	800e196 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e190:	2303      	movs	r3, #3
 800e192:	74fb      	strb	r3, [r7, #19]
        break;
 800e194:	e005      	b.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e196:	4b30      	ldr	r3, [pc, #192]	@ (800e258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0ef      	beq.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e1a2:	7cfb      	ldrb	r3, [r7, #19]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d159      	bne.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e1a8:	4b2a      	ldr	r3, [pc, #168]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d01e      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d019      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e1c4:	4b23      	ldr	r3, [pc, #140]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e1d0:	4b20      	ldr	r3, [pc, #128]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1d6:	4a1f      	ldr	r2, [pc, #124]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e1e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1e6:	4a1b      	ldr	r2, [pc, #108]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e1ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e1f0:	4a18      	ldr	r2, [pc, #96]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d016      	beq.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e202:	f7fc fab7 	bl	800a774 <HAL_GetTick>
 800e206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e208:	e00b      	b.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e20a:	f7fc fab3 	bl	800a774 <HAL_GetTick>
 800e20e:	4602      	mov	r2, r0
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e218:	4293      	cmp	r3, r2
 800e21a:	d902      	bls.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e21c:	2303      	movs	r3, #3
 800e21e:	74fb      	strb	r3, [r7, #19]
            break;
 800e220:	e006      	b.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e222:	4b0c      	ldr	r3, [pc, #48]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e228:	f003 0302 	and.w	r3, r3, #2
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d0ec      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e230:	7cfb      	ldrb	r3, [r7, #19]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10b      	bne.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e236:	4b07      	ldr	r3, [pc, #28]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e23c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e244:	4903      	ldr	r1, [pc, #12]	@ (800e254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e246:	4313      	orrs	r3, r2
 800e248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e24c:	e008      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e24e:	7cfb      	ldrb	r3, [r7, #19]
 800e250:	74bb      	strb	r3, [r7, #18]
 800e252:	e005      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e254:	40021000 	.word	0x40021000
 800e258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e25c:	7cfb      	ldrb	r3, [r7, #19]
 800e25e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e260:	7c7b      	ldrb	r3, [r7, #17]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d105      	bne.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e266:	4ba7      	ldr	r3, [pc, #668]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e26a:	4aa6      	ldr	r2, [pc, #664]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e26c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e270:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 0301 	and.w	r3, r3, #1
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00a      	beq.n	800e294 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e27e:	4ba1      	ldr	r3, [pc, #644]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e284:	f023 0203 	bic.w	r2, r3, #3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	499d      	ldr	r1, [pc, #628]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e28e:	4313      	orrs	r3, r2
 800e290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 0302 	and.w	r3, r3, #2
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00a      	beq.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e2a0:	4b98      	ldr	r3, [pc, #608]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2a6:	f023 020c 	bic.w	r2, r3, #12
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	4995      	ldr	r1, [pc, #596]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f003 0304 	and.w	r3, r3, #4
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00a      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e2c2:	4b90      	ldr	r3, [pc, #576]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	498c      	ldr	r1, [pc, #560]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f003 0308 	and.w	r3, r3, #8
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00a      	beq.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e2e4:	4b87      	ldr	r3, [pc, #540]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	4984      	ldr	r1, [pc, #528]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f003 0310 	and.w	r3, r3, #16
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e306:	4b7f      	ldr	r3, [pc, #508]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e30c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	695b      	ldr	r3, [r3, #20]
 800e314:	497b      	ldr	r1, [pc, #492]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e316:	4313      	orrs	r3, r2
 800e318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f003 0320 	and.w	r3, r3, #32
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00a      	beq.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e328:	4b76      	ldr	r3, [pc, #472]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e32e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	4973      	ldr	r1, [pc, #460]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e338:	4313      	orrs	r3, r2
 800e33a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00a      	beq.n	800e360 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e34a:	4b6e      	ldr	r3, [pc, #440]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e350:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	496a      	ldr	r1, [pc, #424]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e35a:	4313      	orrs	r3, r2
 800e35c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00a      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e36c:	4b65      	ldr	r3, [pc, #404]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e372:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	4962      	ldr	r1, [pc, #392]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e37c:	4313      	orrs	r3, r2
 800e37e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00a      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e38e:	4b5d      	ldr	r3, [pc, #372]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e394:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e39c:	4959      	ldr	r1, [pc, #356]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e3b0:	4b54      	ldr	r3, [pc, #336]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e3b6:	f023 0203 	bic.w	r2, r3, #3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3be:	4951      	ldr	r1, [pc, #324]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00a      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e3d2:	4b4c      	ldr	r3, [pc, #304]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e0:	4948      	ldr	r1, [pc, #288]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d015      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e3f4:	4b43      	ldr	r3, [pc, #268]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e402:	4940      	ldr	r1, [pc, #256]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e404:	4313      	orrs	r3, r2
 800e406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e40e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e412:	d105      	bne.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e414:	4b3b      	ldr	r3, [pc, #236]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	4a3a      	ldr	r2, [pc, #232]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e41a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e41e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d015      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e42c:	4b35      	ldr	r3, [pc, #212]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e432:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e43a:	4932      	ldr	r1, [pc, #200]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e43c:	4313      	orrs	r3, r2
 800e43e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e44a:	d105      	bne.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e44c:	4b2d      	ldr	r3, [pc, #180]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	4a2c      	ldr	r2, [pc, #176]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e456:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d015      	beq.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e464:	4b27      	ldr	r3, [pc, #156]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e46a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e472:	4924      	ldr	r1, [pc, #144]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e474:	4313      	orrs	r3, r2
 800e476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e47e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e482:	d105      	bne.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e484:	4b1f      	ldr	r3, [pc, #124]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	4a1e      	ldr	r2, [pc, #120]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e48a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e48e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d015      	beq.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e49c:	4b19      	ldr	r3, [pc, #100]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4aa:	4916      	ldr	r1, [pc, #88]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4ba:	d105      	bne.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4bc:	4b11      	ldr	r3, [pc, #68]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	4a10      	ldr	r2, [pc, #64]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d019      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4e2:	4908      	ldr	r1, [pc, #32]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4f2:	d109      	bne.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4f4:	4b03      	ldr	r3, [pc, #12]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	4a02      	ldr	r2, [pc, #8]	@ (800e504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4fe:	60d3      	str	r3, [r2, #12]
 800e500:	e002      	b.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e502:	bf00      	nop
 800e504:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d015      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e514:	4b29      	ldr	r3, [pc, #164]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e51a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e522:	4926      	ldr	r1, [pc, #152]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e524:	4313      	orrs	r3, r2
 800e526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e52e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e532:	d105      	bne.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e534:	4b21      	ldr	r3, [pc, #132]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	4a20      	ldr	r2, [pc, #128]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e53a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e53e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d015      	beq.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e54c:	4b1b      	ldr	r3, [pc, #108]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e552:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e55a:	4918      	ldr	r1, [pc, #96]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e55c:	4313      	orrs	r3, r2
 800e55e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e56a:	d105      	bne.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e56c:	4b13      	ldr	r3, [pc, #76]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	4a12      	ldr	r2, [pc, #72]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e576:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e580:	2b00      	cmp	r3, #0
 800e582:	d015      	beq.n	800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e584:	4b0d      	ldr	r3, [pc, #52]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e58a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e592:	490a      	ldr	r1, [pc, #40]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e594:	4313      	orrs	r3, r2
 800e596:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e59e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5a2:	d105      	bne.n	800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e5a4:	4b05      	ldr	r3, [pc, #20]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	4a04      	ldr	r2, [pc, #16]	@ (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e5aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e5b0:	7cbb      	ldrb	r3, [r7, #18]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	40021000 	.word	0x40021000

0800e5c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e09d      	b.n	800e70e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d108      	bne.n	800e5ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e5e2:	d009      	beq.n	800e5f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	61da      	str	r2, [r3, #28]
 800e5ea:	e005      	b.n	800e5f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7fb f824 	bl	8009660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2202      	movs	r2, #2
 800e61c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e62e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e638:	d902      	bls.n	800e640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60fb      	str	r3, [r7, #12]
 800e63e:	e002      	b.n	800e646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e64e:	d007      	beq.n	800e660 <HAL_SPI_Init+0xa0>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e658:	d002      	beq.n	800e660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	f003 0302 	and.w	r3, r3, #2
 800e67a:	431a      	orrs	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	f003 0301 	and.w	r3, r3, #1
 800e684:	431a      	orrs	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e68e:	431a      	orrs	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	69db      	ldr	r3, [r3, #28]
 800e694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e698:	431a      	orrs	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6a2:	ea42 0103 	orr.w	r1, r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	430a      	orrs	r2, r1
 800e6b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	0c1b      	lsrs	r3, r3, #16
 800e6bc:	f003 0204 	and.w	r2, r3, #4
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	431a      	orrs	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6ce:	f003 0308 	and.w	r3, r3, #8
 800e6d2:	431a      	orrs	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e6dc:	ea42 0103 	orr.w	r1, r2, r3
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	430a      	orrs	r2, r1
 800e6ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	69da      	ldr	r2, [r3, #28]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e6fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b088      	sub	sp, #32
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	60f8      	str	r0, [r7, #12]
 800e71e:	60b9      	str	r1, [r7, #8]
 800e720:	603b      	str	r3, [r7, #0]
 800e722:	4613      	mov	r3, r2
 800e724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e726:	2300      	movs	r3, #0
 800e728:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e730:	2b01      	cmp	r3, #1
 800e732:	d101      	bne.n	800e738 <HAL_SPI_Transmit+0x22>
 800e734:	2302      	movs	r3, #2
 800e736:	e15f      	b.n	800e9f8 <HAL_SPI_Transmit+0x2e2>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e740:	f7fc f818 	bl	800a774 <HAL_GetTick>
 800e744:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e746:	88fb      	ldrh	r3, [r7, #6]
 800e748:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b01      	cmp	r3, #1
 800e754:	d002      	beq.n	800e75c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e756:	2302      	movs	r3, #2
 800e758:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e75a:	e148      	b.n	800e9ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <HAL_SPI_Transmit+0x52>
 800e762:	88fb      	ldrh	r3, [r7, #6]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d102      	bne.n	800e76e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e76c:	e13f      	b.n	800e9ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2203      	movs	r2, #3
 800e772:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	88fa      	ldrh	r2, [r7, #6]
 800e786:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	88fa      	ldrh	r2, [r7, #6]
 800e78c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2200      	movs	r2, #0
 800e798:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7b8:	d10f      	bne.n	800e7da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e7c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7e4:	2b40      	cmp	r3, #64	@ 0x40
 800e7e6:	d007      	beq.n	800e7f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e800:	d94f      	bls.n	800e8a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <HAL_SPI_Transmit+0xfa>
 800e80a:	8afb      	ldrh	r3, [r7, #22]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d142      	bne.n	800e896 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e814:	881a      	ldrh	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e820:	1c9a      	adds	r2, r3, #2
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	3b01      	subs	r3, #1
 800e82e:	b29a      	uxth	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e834:	e02f      	b.n	800e896 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	f003 0302 	and.w	r3, r3, #2
 800e840:	2b02      	cmp	r3, #2
 800e842:	d112      	bne.n	800e86a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e848:	881a      	ldrh	r2, [r3, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e854:	1c9a      	adds	r2, r3, #2
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3b01      	subs	r3, #1
 800e862:	b29a      	uxth	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e868:	e015      	b.n	800e896 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e86a:	f7fb ff83 	bl	800a774 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d803      	bhi.n	800e882 <HAL_SPI_Transmit+0x16c>
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e880:	d102      	bne.n	800e888 <HAL_SPI_Transmit+0x172>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d106      	bne.n	800e896 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800e888:	2303      	movs	r3, #3
 800e88a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800e894:	e0ab      	b.n	800e9ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1ca      	bne.n	800e836 <HAL_SPI_Transmit+0x120>
 800e8a0:	e080      	b.n	800e9a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d002      	beq.n	800e8b0 <HAL_SPI_Transmit+0x19a>
 800e8aa:	8afb      	ldrh	r3, [r7, #22]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d174      	bne.n	800e99a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d912      	bls.n	800e8e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8be:	881a      	ldrh	r2, [r3, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ca:	1c9a      	adds	r2, r3, #2
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	3b02      	subs	r3, #2
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e8de:	e05c      	b.n	800e99a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	330c      	adds	r3, #12
 800e8ea:	7812      	ldrb	r2, [r2, #0]
 800e8ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8f2:	1c5a      	adds	r2, r3, #1
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	3b01      	subs	r3, #1
 800e900:	b29a      	uxth	r2, r3
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e906:	e048      	b.n	800e99a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	f003 0302 	and.w	r3, r3, #2
 800e912:	2b02      	cmp	r3, #2
 800e914:	d12b      	bne.n	800e96e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d912      	bls.n	800e946 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e924:	881a      	ldrh	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e930:	1c9a      	adds	r2, r3, #2
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	3b02      	subs	r3, #2
 800e93e:	b29a      	uxth	r2, r3
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e944:	e029      	b.n	800e99a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	330c      	adds	r3, #12
 800e950:	7812      	ldrb	r2, [r2, #0]
 800e952:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e962:	b29b      	uxth	r3, r3
 800e964:	3b01      	subs	r3, #1
 800e966:	b29a      	uxth	r2, r3
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e96c:	e015      	b.n	800e99a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e96e:	f7fb ff01 	bl	800a774 <HAL_GetTick>
 800e972:	4602      	mov	r2, r0
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d803      	bhi.n	800e986 <HAL_SPI_Transmit+0x270>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e984:	d102      	bne.n	800e98c <HAL_SPI_Transmit+0x276>
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d106      	bne.n	800e99a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800e98c:	2303      	movs	r3, #3
 800e98e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800e998:	e029      	b.n	800e9ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1b1      	bne.n	800e908 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e9a4:	69ba      	ldr	r2, [r7, #24]
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 fc7d 	bl	800f2a8 <SPI_EndRxTxTransaction>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2220      	movs	r2, #32
 800e9b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10a      	bne.n	800e9d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	613b      	str	r3, [r7, #16]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	613b      	str	r3, [r7, #16]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	613b      	str	r3, [r7, #16]
 800e9d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d002      	beq.n	800e9e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	77fb      	strb	r3, [r7, #31]
 800e9e4:	e003      	b.n	800e9ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800e9f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3720      	adds	r7, #32
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b08a      	sub	sp, #40	@ 0x28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
 800ea0c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea12:	2300      	movs	r3, #0
 800ea14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d101      	bne.n	800ea26 <HAL_SPI_TransmitReceive+0x26>
 800ea22:	2302      	movs	r3, #2
 800ea24:	e20a      	b.n	800ee3c <HAL_SPI_TransmitReceive+0x43c>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea2e:	f7fb fea1 	bl	800a774 <HAL_GetTick>
 800ea32:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ea3a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ea42:	887b      	ldrh	r3, [r7, #2]
 800ea44:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ea46:	887b      	ldrh	r3, [r7, #2]
 800ea48:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea4a:	7efb      	ldrb	r3, [r7, #27]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d00e      	beq.n	800ea6e <HAL_SPI_TransmitReceive+0x6e>
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea56:	d106      	bne.n	800ea66 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d102      	bne.n	800ea66 <HAL_SPI_TransmitReceive+0x66>
 800ea60:	7efb      	ldrb	r3, [r7, #27]
 800ea62:	2b04      	cmp	r3, #4
 800ea64:	d003      	beq.n	800ea6e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ea66:	2302      	movs	r3, #2
 800ea68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ea6c:	e1e0      	b.n	800ee30 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d005      	beq.n	800ea80 <HAL_SPI_TransmitReceive+0x80>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d002      	beq.n	800ea80 <HAL_SPI_TransmitReceive+0x80>
 800ea7a:	887b      	ldrh	r3, [r7, #2]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ea86:	e1d3      	b.n	800ee30 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b04      	cmp	r3, #4
 800ea92:	d003      	beq.n	800ea9c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2205      	movs	r2, #5
 800ea98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	887a      	ldrh	r2, [r7, #2]
 800eaac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	887a      	ldrh	r2, [r7, #2]
 800eab4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	887a      	ldrh	r2, [r7, #2]
 800eac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	887a      	ldrh	r2, [r7, #2]
 800eac8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eade:	d802      	bhi.n	800eae6 <HAL_SPI_TransmitReceive+0xe6>
 800eae0:	8a3b      	ldrh	r3, [r7, #16]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d908      	bls.n	800eaf8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800eaf4:	605a      	str	r2, [r3, #4]
 800eaf6:	e007      	b.n	800eb08 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800eb06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb12:	2b40      	cmp	r3, #64	@ 0x40
 800eb14:	d007      	beq.n	800eb26 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eb2e:	f240 8081 	bls.w	800ec34 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <HAL_SPI_TransmitReceive+0x140>
 800eb3a:	8a7b      	ldrh	r3, [r7, #18]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d16d      	bne.n	800ec1c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb44:	881a      	ldrh	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb50:	1c9a      	adds	r2, r3, #2
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb64:	e05a      	b.n	800ec1c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d11b      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x1ac>
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d016      	beq.n	800ebac <HAL_SPI_TransmitReceive+0x1ac>
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d113      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb88:	881a      	ldrh	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb94:	1c9a      	adds	r2, r3, #2
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	3b01      	subs	r3, #1
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f003 0301 	and.w	r3, r3, #1
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d11c      	bne.n	800ebf4 <HAL_SPI_TransmitReceive+0x1f4>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d016      	beq.n	800ebf4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68da      	ldr	r2, [r3, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebd0:	b292      	uxth	r2, r2
 800ebd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebd8:	1c9a      	adds	r2, r3, #2
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ebf4:	f7fb fdbe 	bl	800a774 <HAL_GetTick>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d80b      	bhi.n	800ec1c <HAL_SPI_TransmitReceive+0x21c>
 800ec04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0a:	d007      	beq.n	800ec1c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ec0c:	2303      	movs	r3, #3
 800ec0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2201      	movs	r2, #1
 800ec16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ec1a:	e109      	b.n	800ee30 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d19f      	bne.n	800eb66 <HAL_SPI_TransmitReceive+0x166>
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d199      	bne.n	800eb66 <HAL_SPI_TransmitReceive+0x166>
 800ec32:	e0e3      	b.n	800edfc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <HAL_SPI_TransmitReceive+0x244>
 800ec3c:	8a7b      	ldrh	r3, [r7, #18]
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	f040 80cf 	bne.w	800ede2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d912      	bls.n	800ec74 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec52:	881a      	ldrh	r2, [r3, #0]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec5e:	1c9a      	adds	r2, r3, #2
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	3b02      	subs	r3, #2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ec72:	e0b6      	b.n	800ede2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	330c      	adds	r3, #12
 800ec7e:	7812      	ldrb	r2, [r2, #0]
 800ec80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	3b01      	subs	r3, #1
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec9a:	e0a2      	b.n	800ede2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f003 0302 	and.w	r3, r3, #2
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d134      	bne.n	800ed14 <HAL_SPI_TransmitReceive+0x314>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d02f      	beq.n	800ed14 <HAL_SPI_TransmitReceive+0x314>
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d12c      	bne.n	800ed14 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d912      	bls.n	800ecea <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc8:	881a      	ldrh	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecd4:	1c9a      	adds	r2, r3, #2
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	3b02      	subs	r3, #2
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ece8:	e012      	b.n	800ed10 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	330c      	adds	r3, #12
 800ecf4:	7812      	ldrb	r2, [r2, #0]
 800ecf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecfc:	1c5a      	adds	r2, r3, #1
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed10:	2300      	movs	r3, #0
 800ed12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d148      	bne.n	800edb4 <HAL_SPI_TransmitReceive+0x3b4>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d042      	beq.n	800edb4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d923      	bls.n	800ed82 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68da      	ldr	r2, [r3, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed44:	b292      	uxth	r2, r2
 800ed46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed4c:	1c9a      	adds	r2, r3, #2
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	3b02      	subs	r3, #2
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d81f      	bhi.n	800edb0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ed7e:	605a      	str	r2, [r3, #4]
 800ed80:	e016      	b.n	800edb0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f103 020c 	add.w	r2, r3, #12
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed8e:	7812      	ldrb	r2, [r2, #0]
 800ed90:	b2d2      	uxtb	r2, r2
 800ed92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed98:	1c5a      	adds	r2, r3, #1
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	3b01      	subs	r3, #1
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edb0:	2301      	movs	r3, #1
 800edb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800edb4:	f7fb fcde 	bl	800a774 <HAL_GetTick>
 800edb8:	4602      	mov	r2, r0
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d803      	bhi.n	800edcc <HAL_SPI_TransmitReceive+0x3cc>
 800edc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edca:	d102      	bne.n	800edd2 <HAL_SPI_TransmitReceive+0x3d2>
 800edcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d107      	bne.n	800ede2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800edd2:	2303      	movs	r3, #3
 800edd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ede0:	e026      	b.n	800ee30 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f47f af57 	bne.w	800ec9c <HAL_SPI_TransmitReceive+0x29c>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f47f af50 	bne.w	800ec9c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800edfc:	69fa      	ldr	r2, [r7, #28]
 800edfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f000 fa51 	bl	800f2a8 <SPI_EndRxTxTransaction>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2220      	movs	r2, #32
 800ee16:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ee26:	e003      	b.n	800ee30 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800ee38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3728      	adds	r7, #40	@ 0x28
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10e      	bne.n	800ee84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d009      	beq.n	800ee84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d004      	beq.n	800ee84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	4798      	blx	r3
    return;
 800ee82:	e0ce      	b.n	800f022 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	f003 0302 	and.w	r3, r3, #2
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d009      	beq.n	800eea2 <HAL_SPI_IRQHandler+0x5e>
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d004      	beq.n	800eea2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	4798      	blx	r3
    return;
 800eea0:	e0bf      	b.n	800f022 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	f003 0320 	and.w	r3, r3, #32
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10a      	bne.n	800eec2 <HAL_SPI_IRQHandler+0x7e>
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d105      	bne.n	800eec2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 80b0 	beq.w	800f022 <HAL_SPI_IRQHandler+0x1de>
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	f003 0320 	and.w	r3, r3, #32
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f000 80aa 	beq.w	800f022 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d023      	beq.n	800ef20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b03      	cmp	r3, #3
 800eee2:	d011      	beq.n	800ef08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eee8:	f043 0204 	orr.w	r2, r3, #4
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eef0:	2300      	movs	r3, #0
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	689b      	ldr	r3, [r3, #8]
 800ef02:	617b      	str	r3, [r7, #20]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	e00b      	b.n	800ef20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef08:	2300      	movs	r3, #0
 800ef0a:	613b      	str	r3, [r7, #16]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	613b      	str	r3, [r7, #16]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	613b      	str	r3, [r7, #16]
 800ef1c:	693b      	ldr	r3, [r7, #16]
        return;
 800ef1e:	e080      	b.n	800f022 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	f003 0320 	and.w	r3, r3, #32
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d014      	beq.n	800ef54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef2e:	f043 0201 	orr.w	r2, r3, #1
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ef36:	2300      	movs	r3, #0
 800ef38:	60fb      	str	r3, [r7, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	60fb      	str	r3, [r7, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef50:	601a      	str	r2, [r3, #0]
 800ef52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00c      	beq.n	800ef78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef62:	f043 0208 	orr.w	r2, r3, #8
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	60bb      	str	r3, [r7, #8]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	60bb      	str	r3, [r7, #8]
 800ef76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d04f      	beq.n	800f020 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ef8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	f003 0302 	and.w	r3, r3, #2
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d104      	bne.n	800efac <HAL_SPI_IRQHandler+0x168>
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	f003 0301 	and.w	r3, r3, #1
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d034      	beq.n	800f016 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f022 0203 	bic.w	r2, r2, #3
 800efba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d011      	beq.n	800efe8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efc8:	4a17      	ldr	r2, [pc, #92]	@ (800f028 <HAL_SPI_IRQHandler+0x1e4>)
 800efca:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fb fe0e 	bl	800abf2 <HAL_DMA_Abort_IT>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d005      	beq.n	800efe8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efe0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efec:	2b00      	cmp	r3, #0
 800efee:	d016      	beq.n	800f01e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eff4:	4a0c      	ldr	r2, [pc, #48]	@ (800f028 <HAL_SPI_IRQHandler+0x1e4>)
 800eff6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800effc:	4618      	mov	r0, r3
 800effe:	f7fb fdf8 	bl	800abf2 <HAL_DMA_Abort_IT>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00a      	beq.n	800f01e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f00c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800f014:	e003      	b.n	800f01e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 f808 	bl	800f02c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f01c:	e000      	b.n	800f020 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f01e:	bf00      	nop
    return;
 800f020:	bf00      	nop
  }
}
 800f022:	3720      	adds	r7, #32
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	0800f041 	.word	0x0800f041

0800f02c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f034:	bf00      	nop
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f04c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2200      	movs	r2, #0
 800f05a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff ffe5 	bl	800f02c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f062:	bf00      	nop
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	603b      	str	r3, [r7, #0]
 800f078:	4613      	mov	r3, r2
 800f07a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f07c:	f7fb fb7a 	bl	800a774 <HAL_GetTick>
 800f080:	4602      	mov	r2, r0
 800f082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	4413      	add	r3, r2
 800f08a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f08c:	f7fb fb72 	bl	800a774 <HAL_GetTick>
 800f090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f092:	4b39      	ldr	r3, [pc, #228]	@ (800f178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	015b      	lsls	r3, r3, #5
 800f098:	0d1b      	lsrs	r3, r3, #20
 800f09a:	69fa      	ldr	r2, [r7, #28]
 800f09c:	fb02 f303 	mul.w	r3, r2, r3
 800f0a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0a2:	e054      	b.n	800f14e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0aa:	d050      	beq.n	800f14e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f0ac:	f7fb fb62 	bl	800a774 <HAL_GetTick>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	1ad3      	subs	r3, r2, r3
 800f0b6:	69fa      	ldr	r2, [r7, #28]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d902      	bls.n	800f0c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d13d      	bne.n	800f13e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	685a      	ldr	r2, [r3, #4]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f0d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0da:	d111      	bne.n	800f100 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0e4:	d004      	beq.n	800f0f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0ee:	d107      	bne.n	800f100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f0fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f108:	d10f      	bne.n	800f12a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2201      	movs	r2, #1
 800f12e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2200      	movs	r2, #0
 800f136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f13a:	2303      	movs	r3, #3
 800f13c:	e017      	b.n	800f16e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f144:	2300      	movs	r3, #0
 800f146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	689a      	ldr	r2, [r3, #8]
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	4013      	ands	r3, r2
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	bf0c      	ite	eq
 800f15e:	2301      	moveq	r3, #1
 800f160:	2300      	movne	r3, #0
 800f162:	b2db      	uxtb	r3, r3
 800f164:	461a      	mov	r2, r3
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d19b      	bne.n	800f0a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3720      	adds	r7, #32
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	20000078 	.word	0x20000078

0800f17c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08a      	sub	sp, #40	@ 0x28
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f18e:	f7fb faf1 	bl	800a774 <HAL_GetTick>
 800f192:	4602      	mov	r2, r0
 800f194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f196:	1a9b      	subs	r3, r3, r2
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	4413      	add	r3, r2
 800f19c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f19e:	f7fb fae9 	bl	800a774 <HAL_GetTick>
 800f1a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	330c      	adds	r3, #12
 800f1aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f1ac:	4b3d      	ldr	r3, [pc, #244]	@ (800f2a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	4413      	add	r3, r2
 800f1b6:	00da      	lsls	r2, r3, #3
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	0d1b      	lsrs	r3, r3, #20
 800f1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1be:	fb02 f303 	mul.w	r3, r2, r3
 800f1c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f1c4:	e060      	b.n	800f288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f1cc:	d107      	bne.n	800f1de <SPI_WaitFifoStateUntilTimeout+0x62>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f1dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e4:	d050      	beq.n	800f288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f1e6:	f7fb fac5 	bl	800a774 <HAL_GetTick>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d902      	bls.n	800f1fc <SPI_WaitFifoStateUntilTimeout+0x80>
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d13d      	bne.n	800f278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	685a      	ldr	r2, [r3, #4]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f20a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f214:	d111      	bne.n	800f23a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f21e:	d004      	beq.n	800f22a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f228:	d107      	bne.n	800f23a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f23e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f242:	d10f      	bne.n	800f264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2201      	movs	r2, #1
 800f268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	e010      	b.n	800f29a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d101      	bne.n	800f282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f27e:	2300      	movs	r3, #0
 800f280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	3b01      	subs	r3, #1
 800f286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	689a      	ldr	r2, [r3, #8]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	4013      	ands	r3, r2
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	429a      	cmp	r2, r3
 800f296:	d196      	bne.n	800f1c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3728      	adds	r7, #40	@ 0x28
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20000078 	.word	0x20000078

0800f2a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b086      	sub	sp, #24
 800f2ac:	af02      	add	r7, sp, #8
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f7ff ff5b 	bl	800f17c <SPI_WaitFifoStateUntilTimeout>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d007      	beq.n	800f2dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2d0:	f043 0220 	orr.w	r2, r3, #32
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	e027      	b.n	800f32c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	2180      	movs	r1, #128	@ 0x80
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff fec0 	bl	800f06c <SPI_WaitFlagStateUntilTimeout>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d007      	beq.n	800f302 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2f6:	f043 0220 	orr.w	r2, r3, #32
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f2fe:	2303      	movs	r3, #3
 800f300:	e014      	b.n	800f32c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2200      	movs	r2, #0
 800f30a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f7ff ff34 	bl	800f17c <SPI_WaitFifoStateUntilTimeout>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d007      	beq.n	800f32a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f31e:	f043 0220 	orr.w	r2, r3, #32
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f326:	2303      	movs	r3, #3
 800f328:	e000      	b.n	800f32c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f32a:	2300      	movs	r3, #0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d101      	bne.n	800f348 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f344:	2301      	movs	r3, #1
 800f346:	e097      	b.n	800f478 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	2b00      	cmp	r3, #0
 800f352:	d106      	bne.n	800f362 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7fa fbbf 	bl	8009ae0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2202      	movs	r2, #2
 800f366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	6812      	ldr	r2, [r2, #0]
 800f374:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800f378:	f023 0307 	bic.w	r3, r3, #7
 800f37c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	3304      	adds	r3, #4
 800f386:	4619      	mov	r1, r3
 800f388:	4610      	mov	r0, r2
 800f38a:	f000 f879 	bl	800f480 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	699b      	ldr	r3, [r3, #24]
 800f39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3b6:	f023 0303 	bic.w	r3, r3, #3
 800f3ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	689a      	ldr	r2, [r3, #8]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	699b      	ldr	r3, [r3, #24]
 800f3c4:	021b      	lsls	r3, r3, #8
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f3d4:	f023 030c 	bic.w	r3, r3, #12
 800f3d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f3e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f3e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	69db      	ldr	r3, [r3, #28]
 800f3ee:	021b      	lsls	r3, r3, #8
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	693a      	ldr	r2, [r7, #16]
 800f3f4:	4313      	orrs	r3, r2
 800f3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	011a      	lsls	r2, r3, #4
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	6a1b      	ldr	r3, [r3, #32]
 800f402:	031b      	lsls	r3, r3, #12
 800f404:	4313      	orrs	r3, r2
 800f406:	693a      	ldr	r2, [r7, #16]
 800f408:	4313      	orrs	r3, r2
 800f40a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800f412:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800f41a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	685a      	ldr	r2, [r3, #4]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	695b      	ldr	r3, [r3, #20]
 800f424:	011b      	lsls	r3, r3, #4
 800f426:	4313      	orrs	r3, r2
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	4313      	orrs	r3, r2
 800f42c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	697a      	ldr	r2, [r7, #20]
 800f434:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	693a      	ldr	r2, [r7, #16]
 800f43c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2201      	movs	r2, #1
 800f462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3718      	adds	r7, #24
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a4c      	ldr	r2, [pc, #304]	@ (800f5c4 <TIM_Base_SetConfig+0x144>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d017      	beq.n	800f4c8 <TIM_Base_SetConfig+0x48>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f49e:	d013      	beq.n	800f4c8 <TIM_Base_SetConfig+0x48>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a49      	ldr	r2, [pc, #292]	@ (800f5c8 <TIM_Base_SetConfig+0x148>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d00f      	beq.n	800f4c8 <TIM_Base_SetConfig+0x48>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a48      	ldr	r2, [pc, #288]	@ (800f5cc <TIM_Base_SetConfig+0x14c>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d00b      	beq.n	800f4c8 <TIM_Base_SetConfig+0x48>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a47      	ldr	r2, [pc, #284]	@ (800f5d0 <TIM_Base_SetConfig+0x150>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d007      	beq.n	800f4c8 <TIM_Base_SetConfig+0x48>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a46      	ldr	r2, [pc, #280]	@ (800f5d4 <TIM_Base_SetConfig+0x154>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d003      	beq.n	800f4c8 <TIM_Base_SetConfig+0x48>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a45      	ldr	r2, [pc, #276]	@ (800f5d8 <TIM_Base_SetConfig+0x158>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d108      	bne.n	800f4da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	68fa      	ldr	r2, [r7, #12]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a39      	ldr	r2, [pc, #228]	@ (800f5c4 <TIM_Base_SetConfig+0x144>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d023      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4e8:	d01f      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a36      	ldr	r2, [pc, #216]	@ (800f5c8 <TIM_Base_SetConfig+0x148>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d01b      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a35      	ldr	r2, [pc, #212]	@ (800f5cc <TIM_Base_SetConfig+0x14c>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d017      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a34      	ldr	r2, [pc, #208]	@ (800f5d0 <TIM_Base_SetConfig+0x150>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d013      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a33      	ldr	r2, [pc, #204]	@ (800f5d4 <TIM_Base_SetConfig+0x154>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d00f      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a33      	ldr	r2, [pc, #204]	@ (800f5dc <TIM_Base_SetConfig+0x15c>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d00b      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a32      	ldr	r2, [pc, #200]	@ (800f5e0 <TIM_Base_SetConfig+0x160>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d007      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a31      	ldr	r2, [pc, #196]	@ (800f5e4 <TIM_Base_SetConfig+0x164>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d003      	beq.n	800f52a <TIM_Base_SetConfig+0xaa>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a2c      	ldr	r2, [pc, #176]	@ (800f5d8 <TIM_Base_SetConfig+0x158>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d108      	bne.n	800f53c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	4313      	orrs	r3, r2
 800f53a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	695b      	ldr	r3, [r3, #20]
 800f546:	4313      	orrs	r3, r2
 800f548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	689a      	ldr	r2, [r3, #8]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a18      	ldr	r2, [pc, #96]	@ (800f5c4 <TIM_Base_SetConfig+0x144>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d013      	beq.n	800f590 <TIM_Base_SetConfig+0x110>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a1a      	ldr	r2, [pc, #104]	@ (800f5d4 <TIM_Base_SetConfig+0x154>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d00f      	beq.n	800f590 <TIM_Base_SetConfig+0x110>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a1a      	ldr	r2, [pc, #104]	@ (800f5dc <TIM_Base_SetConfig+0x15c>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d00b      	beq.n	800f590 <TIM_Base_SetConfig+0x110>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a19      	ldr	r2, [pc, #100]	@ (800f5e0 <TIM_Base_SetConfig+0x160>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d007      	beq.n	800f590 <TIM_Base_SetConfig+0x110>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a18      	ldr	r2, [pc, #96]	@ (800f5e4 <TIM_Base_SetConfig+0x164>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d003      	beq.n	800f590 <TIM_Base_SetConfig+0x110>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a13      	ldr	r2, [pc, #76]	@ (800f5d8 <TIM_Base_SetConfig+0x158>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d103      	bne.n	800f598 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	691a      	ldr	r2, [r3, #16]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	691b      	ldr	r3, [r3, #16]
 800f5a2:	f003 0301 	and.w	r3, r3, #1
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d105      	bne.n	800f5b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	f023 0201 	bic.w	r2, r3, #1
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	611a      	str	r2, [r3, #16]
  }
}
 800f5b6:	bf00      	nop
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	40012c00 	.word	0x40012c00
 800f5c8:	40000400 	.word	0x40000400
 800f5cc:	40000800 	.word	0x40000800
 800f5d0:	40000c00 	.word	0x40000c00
 800f5d4:	40013400 	.word	0x40013400
 800f5d8:	40015000 	.word	0x40015000
 800f5dc:	40014000 	.word	0x40014000
 800f5e0:	40014400 	.word	0x40014400
 800f5e4:	40014800 	.word	0x40014800

0800f5e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d101      	bne.n	800f600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	e074      	b.n	800f6ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2202      	movs	r2, #2
 800f60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a34      	ldr	r2, [pc, #208]	@ (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d009      	beq.n	800f63e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a33      	ldr	r2, [pc, #204]	@ (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d004      	beq.n	800f63e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a31      	ldr	r2, [pc, #196]	@ (800f700 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d108      	bne.n	800f650 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f644:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f65a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	4313      	orrs	r3, r2
 800f664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	4a21      	ldr	r2, [pc, #132]	@ (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d022      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f680:	d01d      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a1f      	ldr	r2, [pc, #124]	@ (800f704 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d018      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a1d      	ldr	r2, [pc, #116]	@ (800f708 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d013      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a1c      	ldr	r2, [pc, #112]	@ (800f70c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d00e      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a15      	ldr	r2, [pc, #84]	@ (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d009      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a18      	ldr	r2, [pc, #96]	@ (800f710 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d004      	beq.n	800f6be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a11      	ldr	r2, [pc, #68]	@ (800f700 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d10c      	bne.n	800f6d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3714      	adds	r7, #20
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	40012c00 	.word	0x40012c00
 800f6fc:	40013400 	.word	0x40013400
 800f700:	40015000 	.word	0x40015000
 800f704:	40000400 	.word	0x40000400
 800f708:	40000800 	.word	0x40000800
 800f70c:	40000c00 	.word	0x40000c00
 800f710:	40014000 	.word	0x40014000

0800f714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	e042      	b.n	800f7ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7fa fe9d 	bl	800a478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2224      	movs	r2, #36	@ 0x24
 800f742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0201 	bic.w	r2, r2, #1
 800f754:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d002      	beq.n	800f764 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fe68 	bl	8010434 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 fb69 	bl	800fe3c <UART_SetConfig>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d101      	bne.n	800f774 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e01b      	b.n	800f7ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	685a      	ldr	r2, [r3, #4]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	689a      	ldr	r2, [r3, #8]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f042 0201 	orr.w	r2, r2, #1
 800f7a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fee7 	bl	8010578 <UART_CheckIdleState>
 800f7aa:	4603      	mov	r3, r0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b0ba      	sub	sp, #232	@ 0xe8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	69db      	ldr	r3, [r3, #28]
 800f7c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f7da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f7de:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f7e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d11b      	bne.n	800f828 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7f4:	f003 0320 	and.w	r3, r3, #32
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d015      	beq.n	800f828 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f800:	f003 0320 	and.w	r3, r3, #32
 800f804:	2b00      	cmp	r3, #0
 800f806:	d105      	bne.n	800f814 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f80c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f810:	2b00      	cmp	r3, #0
 800f812:	d009      	beq.n	800f828 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f000 82e3 	beq.w	800fde4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	4798      	blx	r3
      }
      return;
 800f826:	e2dd      	b.n	800fde4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f000 8123 	beq.w	800fa78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f832:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f836:	4b8d      	ldr	r3, [pc, #564]	@ (800fa6c <HAL_UART_IRQHandler+0x2b8>)
 800f838:	4013      	ands	r3, r2
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d106      	bne.n	800f84c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f83e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f842:	4b8b      	ldr	r3, [pc, #556]	@ (800fa70 <HAL_UART_IRQHandler+0x2bc>)
 800f844:	4013      	ands	r3, r2
 800f846:	2b00      	cmp	r3, #0
 800f848:	f000 8116 	beq.w	800fa78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d011      	beq.n	800f87c <HAL_UART_IRQHandler+0xc8>
 800f858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f85c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00b      	beq.n	800f87c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2201      	movs	r2, #1
 800f86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f872:	f043 0201 	orr.w	r2, r3, #1
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f880:	f003 0302 	and.w	r3, r3, #2
 800f884:	2b00      	cmp	r3, #0
 800f886:	d011      	beq.n	800f8ac <HAL_UART_IRQHandler+0xf8>
 800f888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f88c:	f003 0301 	and.w	r3, r3, #1
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00b      	beq.n	800f8ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2202      	movs	r2, #2
 800f89a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8a2:	f043 0204 	orr.w	r2, r3, #4
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8b0:	f003 0304 	and.w	r3, r3, #4
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d011      	beq.n	800f8dc <HAL_UART_IRQHandler+0x128>
 800f8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8bc:	f003 0301 	and.w	r3, r3, #1
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00b      	beq.n	800f8dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2204      	movs	r2, #4
 800f8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8d2:	f043 0202 	orr.w	r2, r3, #2
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8e0:	f003 0308 	and.w	r3, r3, #8
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d017      	beq.n	800f918 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8ec:	f003 0320 	and.w	r3, r3, #32
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d105      	bne.n	800f900 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f8f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f8f8:	4b5c      	ldr	r3, [pc, #368]	@ (800fa6c <HAL_UART_IRQHandler+0x2b8>)
 800f8fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00b      	beq.n	800f918 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2208      	movs	r2, #8
 800f906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f90e:	f043 0208 	orr.w	r2, r3, #8
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f91c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f920:	2b00      	cmp	r3, #0
 800f922:	d012      	beq.n	800f94a <HAL_UART_IRQHandler+0x196>
 800f924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f928:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00c      	beq.n	800f94a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f940:	f043 0220 	orr.w	r2, r3, #32
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f950:	2b00      	cmp	r3, #0
 800f952:	f000 8249 	beq.w	800fde8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f95a:	f003 0320 	and.w	r3, r3, #32
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d013      	beq.n	800f98a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f966:	f003 0320 	and.w	r3, r3, #32
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d105      	bne.n	800f97a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f976:	2b00      	cmp	r3, #0
 800f978:	d007      	beq.n	800f98a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d003      	beq.n	800f98a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f99e:	2b40      	cmp	r3, #64	@ 0x40
 800f9a0:	d005      	beq.n	800f9ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f9a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d054      	beq.n	800fa58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fef9 	bl	80107a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9be:	2b40      	cmp	r3, #64	@ 0x40
 800f9c0:	d146      	bne.n	800fa50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9d0:	e853 3f00 	ldrex	r3, [r3]
 800f9d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f9d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	3308      	adds	r3, #8
 800f9ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f9fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f9fe:	e841 2300 	strex	r3, r2, [r1]
 800fa02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1d9      	bne.n	800f9c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d017      	beq.n	800fa48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa1e:	4a15      	ldr	r2, [pc, #84]	@ (800fa74 <HAL_UART_IRQHandler+0x2c0>)
 800fa20:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fb f8e2 	bl	800abf2 <HAL_DMA_Abort_IT>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d019      	beq.n	800fa68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fa42:	4610      	mov	r0, r2
 800fa44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa46:	e00f      	b.n	800fa68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 f9e1 	bl	800fe10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa4e:	e00b      	b.n	800fa68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 f9dd 	bl	800fe10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa56:	e007      	b.n	800fa68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 f9d9 	bl	800fe10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fa66:	e1bf      	b.n	800fde8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa68:	bf00      	nop
    return;
 800fa6a:	e1bd      	b.n	800fde8 <HAL_UART_IRQHandler+0x634>
 800fa6c:	10000001 	.word	0x10000001
 800fa70:	04000120 	.word	0x04000120
 800fa74:	08010873 	.word	0x08010873

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	f040 8153 	bne.w	800fd28 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa86:	f003 0310 	and.w	r3, r3, #16
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f000 814c 	beq.w	800fd28 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa94:	f003 0310 	and.w	r3, r3, #16
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 8145 	beq.w	800fd28 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2210      	movs	r2, #16
 800faa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fab0:	2b40      	cmp	r3, #64	@ 0x40
 800fab2:	f040 80bb 	bne.w	800fc2c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 818f 	beq.w	800fdec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fad4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fad8:	429a      	cmp	r2, r3
 800fada:	f080 8187 	bcs.w	800fdec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fae4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f003 0320 	and.w	r3, r3, #32
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f040 8087 	bne.w	800fc0a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb08:	e853 3f00 	ldrex	r3, [r3]
 800fb0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fb10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	461a      	mov	r2, r3
 800fb22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fb2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fb32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb36:	e841 2300 	strex	r3, r2, [r1]
 800fb3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1da      	bne.n	800fafc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb50:	e853 3f00 	ldrex	r3, [r3]
 800fb54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb58:	f023 0301 	bic.w	r3, r3, #1
 800fb5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	3308      	adds	r3, #8
 800fb66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e1      	bne.n	800fb46 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	3308      	adds	r3, #8
 800fba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fbac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbae:	e841 2300 	strex	r3, r2, [r1]
 800fbb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fbb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1e3      	bne.n	800fb82 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2220      	movs	r2, #32
 800fbbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbd0:	e853 3f00 	ldrex	r3, [r3]
 800fbd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fbd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbd8:	f023 0310 	bic.w	r3, r3, #16
 800fbdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fbec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fbf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fbf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1e4      	bne.n	800fbc8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fa ff9b 	bl	800ab40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4619      	mov	r1, r3
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 f8fd 	bl	800fe24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fc2a:	e0df      	b.n	800fdec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 80d1 	beq.w	800fdf0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800fc4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 80cc 	beq.w	800fdf0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc60:	e853 3f00 	ldrex	r3, [r3]
 800fc64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	461a      	mov	r2, r3
 800fc76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fc7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc82:	e841 2300 	strex	r3, r2, [r1]
 800fc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1e4      	bne.n	800fc58 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3308      	adds	r3, #8
 800fc94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc98:	e853 3f00 	ldrex	r3, [r3]
 800fc9c:	623b      	str	r3, [r7, #32]
   return(result);
 800fc9e:	6a3b      	ldr	r3, [r7, #32]
 800fca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fca4:	f023 0301 	bic.w	r3, r3, #1
 800fca8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fcb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800fcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcbe:	e841 2300 	strex	r3, r2, [r1]
 800fcc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1e1      	bne.n	800fc8e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2220      	movs	r2, #32
 800fcce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	e853 3f00 	ldrex	r3, [r3]
 800fcea:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 0310 	bic.w	r3, r3, #16
 800fcf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fd00:	61fb      	str	r3, [r7, #28]
 800fd02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd04:	69b9      	ldr	r1, [r7, #24]
 800fd06:	69fa      	ldr	r2, [r7, #28]
 800fd08:	e841 2300 	strex	r3, r2, [r1]
 800fd0c:	617b      	str	r3, [r7, #20]
   return(result);
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1e4      	bne.n	800fcde <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2202      	movs	r2, #2
 800fd18:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fd1e:	4619      	mov	r1, r3
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f87f 	bl	800fe24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd26:	e063      	b.n	800fdf0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00e      	beq.n	800fd52 <HAL_UART_IRQHandler+0x59e>
 800fd34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d008      	beq.n	800fd52 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fd48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 fdd2 	bl	80108f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd50:	e051      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d014      	beq.n	800fd88 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d105      	bne.n	800fd76 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d008      	beq.n	800fd88 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d03a      	beq.n	800fdf4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4798      	blx	r3
    }
    return;
 800fd86:	e035      	b.n	800fdf4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d009      	beq.n	800fda8 <HAL_UART_IRQHandler+0x5f4>
 800fd94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d003      	beq.n	800fda8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fd7c 	bl	801089e <UART_EndTransmit_IT>
    return;
 800fda6:	e026      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fda8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <HAL_UART_IRQHandler+0x614>
 800fdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d003      	beq.n	800fdc8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f000 fdab 	bl	801091c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdc6:	e016      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fdc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d010      	beq.n	800fdf6 <HAL_UART_IRQHandler+0x642>
 800fdd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	da0c      	bge.n	800fdf6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fd93 	bl	8010908 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fde2:	e008      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
      return;
 800fde4:	bf00      	nop
 800fde6:	e006      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
    return;
 800fde8:	bf00      	nop
 800fdea:	e004      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
      return;
 800fdec:	bf00      	nop
 800fdee:	e002      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
      return;
 800fdf0:	bf00      	nop
 800fdf2:	e000      	b.n	800fdf6 <HAL_UART_IRQHandler+0x642>
    return;
 800fdf4:	bf00      	nop
  }
}
 800fdf6:	37e8      	adds	r7, #232	@ 0xe8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe04:	bf00      	nop
 800fe06:	370c      	adds	r7, #12
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe30:	bf00      	nop
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe40:	b08c      	sub	sp, #48	@ 0x30
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	689a      	ldr	r2, [r3, #8]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	691b      	ldr	r3, [r3, #16]
 800fe54:	431a      	orrs	r2, r3
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	695b      	ldr	r3, [r3, #20]
 800fe5a:	431a      	orrs	r2, r3
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	69db      	ldr	r3, [r3, #28]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	4baa      	ldr	r3, [pc, #680]	@ (8010114 <UART_SetConfig+0x2d8>)
 800fe6c:	4013      	ands	r3, r2
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	6812      	ldr	r2, [r2, #0]
 800fe72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe74:	430b      	orrs	r3, r1
 800fe76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	68da      	ldr	r2, [r3, #12]
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	430a      	orrs	r2, r1
 800fe8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a9f      	ldr	r2, [pc, #636]	@ (8010118 <UART_SetConfig+0x2dc>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d004      	beq.n	800fea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fea4:	4313      	orrs	r3, r2
 800fea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800feb2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	6812      	ldr	r2, [r2, #0]
 800feba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800febc:	430b      	orrs	r3, r1
 800febe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fec6:	f023 010f 	bic.w	r1, r3, #15
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	430a      	orrs	r2, r1
 800fed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a90      	ldr	r2, [pc, #576]	@ (801011c <UART_SetConfig+0x2e0>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d125      	bne.n	800ff2c <UART_SetConfig+0xf0>
 800fee0:	4b8f      	ldr	r3, [pc, #572]	@ (8010120 <UART_SetConfig+0x2e4>)
 800fee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fee6:	f003 0303 	and.w	r3, r3, #3
 800feea:	2b03      	cmp	r3, #3
 800feec:	d81a      	bhi.n	800ff24 <UART_SetConfig+0xe8>
 800feee:	a201      	add	r2, pc, #4	@ (adr r2, 800fef4 <UART_SetConfig+0xb8>)
 800fef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fef4:	0800ff05 	.word	0x0800ff05
 800fef8:	0800ff15 	.word	0x0800ff15
 800fefc:	0800ff0d 	.word	0x0800ff0d
 800ff00:	0800ff1d 	.word	0x0800ff1d
 800ff04:	2301      	movs	r3, #1
 800ff06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff0a:	e116      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff0c:	2302      	movs	r3, #2
 800ff0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff12:	e112      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff14:	2304      	movs	r3, #4
 800ff16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff1a:	e10e      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff1c:	2308      	movs	r3, #8
 800ff1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff22:	e10a      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff24:	2310      	movs	r3, #16
 800ff26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff2a:	e106      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a7c      	ldr	r2, [pc, #496]	@ (8010124 <UART_SetConfig+0x2e8>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d138      	bne.n	800ffa8 <UART_SetConfig+0x16c>
 800ff36:	4b7a      	ldr	r3, [pc, #488]	@ (8010120 <UART_SetConfig+0x2e4>)
 800ff38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff3c:	f003 030c 	and.w	r3, r3, #12
 800ff40:	2b0c      	cmp	r3, #12
 800ff42:	d82d      	bhi.n	800ffa0 <UART_SetConfig+0x164>
 800ff44:	a201      	add	r2, pc, #4	@ (adr r2, 800ff4c <UART_SetConfig+0x110>)
 800ff46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4a:	bf00      	nop
 800ff4c:	0800ff81 	.word	0x0800ff81
 800ff50:	0800ffa1 	.word	0x0800ffa1
 800ff54:	0800ffa1 	.word	0x0800ffa1
 800ff58:	0800ffa1 	.word	0x0800ffa1
 800ff5c:	0800ff91 	.word	0x0800ff91
 800ff60:	0800ffa1 	.word	0x0800ffa1
 800ff64:	0800ffa1 	.word	0x0800ffa1
 800ff68:	0800ffa1 	.word	0x0800ffa1
 800ff6c:	0800ff89 	.word	0x0800ff89
 800ff70:	0800ffa1 	.word	0x0800ffa1
 800ff74:	0800ffa1 	.word	0x0800ffa1
 800ff78:	0800ffa1 	.word	0x0800ffa1
 800ff7c:	0800ff99 	.word	0x0800ff99
 800ff80:	2300      	movs	r3, #0
 800ff82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff86:	e0d8      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff88:	2302      	movs	r3, #2
 800ff8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff8e:	e0d4      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff90:	2304      	movs	r3, #4
 800ff92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff96:	e0d0      	b.n	801013a <UART_SetConfig+0x2fe>
 800ff98:	2308      	movs	r3, #8
 800ff9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff9e:	e0cc      	b.n	801013a <UART_SetConfig+0x2fe>
 800ffa0:	2310      	movs	r3, #16
 800ffa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffa6:	e0c8      	b.n	801013a <UART_SetConfig+0x2fe>
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a5e      	ldr	r2, [pc, #376]	@ (8010128 <UART_SetConfig+0x2ec>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d125      	bne.n	800fffe <UART_SetConfig+0x1c2>
 800ffb2:	4b5b      	ldr	r3, [pc, #364]	@ (8010120 <UART_SetConfig+0x2e4>)
 800ffb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ffbc:	2b30      	cmp	r3, #48	@ 0x30
 800ffbe:	d016      	beq.n	800ffee <UART_SetConfig+0x1b2>
 800ffc0:	2b30      	cmp	r3, #48	@ 0x30
 800ffc2:	d818      	bhi.n	800fff6 <UART_SetConfig+0x1ba>
 800ffc4:	2b20      	cmp	r3, #32
 800ffc6:	d00a      	beq.n	800ffde <UART_SetConfig+0x1a2>
 800ffc8:	2b20      	cmp	r3, #32
 800ffca:	d814      	bhi.n	800fff6 <UART_SetConfig+0x1ba>
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d002      	beq.n	800ffd6 <UART_SetConfig+0x19a>
 800ffd0:	2b10      	cmp	r3, #16
 800ffd2:	d008      	beq.n	800ffe6 <UART_SetConfig+0x1aa>
 800ffd4:	e00f      	b.n	800fff6 <UART_SetConfig+0x1ba>
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffdc:	e0ad      	b.n	801013a <UART_SetConfig+0x2fe>
 800ffde:	2302      	movs	r3, #2
 800ffe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffe4:	e0a9      	b.n	801013a <UART_SetConfig+0x2fe>
 800ffe6:	2304      	movs	r3, #4
 800ffe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffec:	e0a5      	b.n	801013a <UART_SetConfig+0x2fe>
 800ffee:	2308      	movs	r3, #8
 800fff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fff4:	e0a1      	b.n	801013a <UART_SetConfig+0x2fe>
 800fff6:	2310      	movs	r3, #16
 800fff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fffc:	e09d      	b.n	801013a <UART_SetConfig+0x2fe>
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a4a      	ldr	r2, [pc, #296]	@ (801012c <UART_SetConfig+0x2f0>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d125      	bne.n	8010054 <UART_SetConfig+0x218>
 8010008:	4b45      	ldr	r3, [pc, #276]	@ (8010120 <UART_SetConfig+0x2e4>)
 801000a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801000e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010012:	2bc0      	cmp	r3, #192	@ 0xc0
 8010014:	d016      	beq.n	8010044 <UART_SetConfig+0x208>
 8010016:	2bc0      	cmp	r3, #192	@ 0xc0
 8010018:	d818      	bhi.n	801004c <UART_SetConfig+0x210>
 801001a:	2b80      	cmp	r3, #128	@ 0x80
 801001c:	d00a      	beq.n	8010034 <UART_SetConfig+0x1f8>
 801001e:	2b80      	cmp	r3, #128	@ 0x80
 8010020:	d814      	bhi.n	801004c <UART_SetConfig+0x210>
 8010022:	2b00      	cmp	r3, #0
 8010024:	d002      	beq.n	801002c <UART_SetConfig+0x1f0>
 8010026:	2b40      	cmp	r3, #64	@ 0x40
 8010028:	d008      	beq.n	801003c <UART_SetConfig+0x200>
 801002a:	e00f      	b.n	801004c <UART_SetConfig+0x210>
 801002c:	2300      	movs	r3, #0
 801002e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010032:	e082      	b.n	801013a <UART_SetConfig+0x2fe>
 8010034:	2302      	movs	r3, #2
 8010036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801003a:	e07e      	b.n	801013a <UART_SetConfig+0x2fe>
 801003c:	2304      	movs	r3, #4
 801003e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010042:	e07a      	b.n	801013a <UART_SetConfig+0x2fe>
 8010044:	2308      	movs	r3, #8
 8010046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801004a:	e076      	b.n	801013a <UART_SetConfig+0x2fe>
 801004c:	2310      	movs	r3, #16
 801004e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010052:	e072      	b.n	801013a <UART_SetConfig+0x2fe>
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a35      	ldr	r2, [pc, #212]	@ (8010130 <UART_SetConfig+0x2f4>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d12a      	bne.n	80100b4 <UART_SetConfig+0x278>
 801005e:	4b30      	ldr	r3, [pc, #192]	@ (8010120 <UART_SetConfig+0x2e4>)
 8010060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801006c:	d01a      	beq.n	80100a4 <UART_SetConfig+0x268>
 801006e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010072:	d81b      	bhi.n	80100ac <UART_SetConfig+0x270>
 8010074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010078:	d00c      	beq.n	8010094 <UART_SetConfig+0x258>
 801007a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801007e:	d815      	bhi.n	80100ac <UART_SetConfig+0x270>
 8010080:	2b00      	cmp	r3, #0
 8010082:	d003      	beq.n	801008c <UART_SetConfig+0x250>
 8010084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010088:	d008      	beq.n	801009c <UART_SetConfig+0x260>
 801008a:	e00f      	b.n	80100ac <UART_SetConfig+0x270>
 801008c:	2300      	movs	r3, #0
 801008e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010092:	e052      	b.n	801013a <UART_SetConfig+0x2fe>
 8010094:	2302      	movs	r3, #2
 8010096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801009a:	e04e      	b.n	801013a <UART_SetConfig+0x2fe>
 801009c:	2304      	movs	r3, #4
 801009e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100a2:	e04a      	b.n	801013a <UART_SetConfig+0x2fe>
 80100a4:	2308      	movs	r3, #8
 80100a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100aa:	e046      	b.n	801013a <UART_SetConfig+0x2fe>
 80100ac:	2310      	movs	r3, #16
 80100ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100b2:	e042      	b.n	801013a <UART_SetConfig+0x2fe>
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a17      	ldr	r2, [pc, #92]	@ (8010118 <UART_SetConfig+0x2dc>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d13a      	bne.n	8010134 <UART_SetConfig+0x2f8>
 80100be:	4b18      	ldr	r3, [pc, #96]	@ (8010120 <UART_SetConfig+0x2e4>)
 80100c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80100c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80100cc:	d01a      	beq.n	8010104 <UART_SetConfig+0x2c8>
 80100ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80100d2:	d81b      	bhi.n	801010c <UART_SetConfig+0x2d0>
 80100d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80100d8:	d00c      	beq.n	80100f4 <UART_SetConfig+0x2b8>
 80100da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80100de:	d815      	bhi.n	801010c <UART_SetConfig+0x2d0>
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d003      	beq.n	80100ec <UART_SetConfig+0x2b0>
 80100e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80100e8:	d008      	beq.n	80100fc <UART_SetConfig+0x2c0>
 80100ea:	e00f      	b.n	801010c <UART_SetConfig+0x2d0>
 80100ec:	2300      	movs	r3, #0
 80100ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100f2:	e022      	b.n	801013a <UART_SetConfig+0x2fe>
 80100f4:	2302      	movs	r3, #2
 80100f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100fa:	e01e      	b.n	801013a <UART_SetConfig+0x2fe>
 80100fc:	2304      	movs	r3, #4
 80100fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010102:	e01a      	b.n	801013a <UART_SetConfig+0x2fe>
 8010104:	2308      	movs	r3, #8
 8010106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801010a:	e016      	b.n	801013a <UART_SetConfig+0x2fe>
 801010c:	2310      	movs	r3, #16
 801010e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010112:	e012      	b.n	801013a <UART_SetConfig+0x2fe>
 8010114:	cfff69f3 	.word	0xcfff69f3
 8010118:	40008000 	.word	0x40008000
 801011c:	40013800 	.word	0x40013800
 8010120:	40021000 	.word	0x40021000
 8010124:	40004400 	.word	0x40004400
 8010128:	40004800 	.word	0x40004800
 801012c:	40004c00 	.word	0x40004c00
 8010130:	40005000 	.word	0x40005000
 8010134:	2310      	movs	r3, #16
 8010136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4aae      	ldr	r2, [pc, #696]	@ (80103f8 <UART_SetConfig+0x5bc>)
 8010140:	4293      	cmp	r3, r2
 8010142:	f040 8097 	bne.w	8010274 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010146:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801014a:	2b08      	cmp	r3, #8
 801014c:	d823      	bhi.n	8010196 <UART_SetConfig+0x35a>
 801014e:	a201      	add	r2, pc, #4	@ (adr r2, 8010154 <UART_SetConfig+0x318>)
 8010150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010154:	08010179 	.word	0x08010179
 8010158:	08010197 	.word	0x08010197
 801015c:	08010181 	.word	0x08010181
 8010160:	08010197 	.word	0x08010197
 8010164:	08010187 	.word	0x08010187
 8010168:	08010197 	.word	0x08010197
 801016c:	08010197 	.word	0x08010197
 8010170:	08010197 	.word	0x08010197
 8010174:	0801018f 	.word	0x0801018f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010178:	f7fd ff62 	bl	800e040 <HAL_RCC_GetPCLK1Freq>
 801017c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801017e:	e010      	b.n	80101a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010180:	4b9e      	ldr	r3, [pc, #632]	@ (80103fc <UART_SetConfig+0x5c0>)
 8010182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010184:	e00d      	b.n	80101a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010186:	f7fd feed 	bl	800df64 <HAL_RCC_GetSysClockFreq>
 801018a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801018c:	e009      	b.n	80101a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801018e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010194:	e005      	b.n	80101a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010196:	2300      	movs	r3, #0
 8010198:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801019a:	2301      	movs	r3, #1
 801019c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80101a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f000 8130 	beq.w	801040a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101ae:	4a94      	ldr	r2, [pc, #592]	@ (8010400 <UART_SetConfig+0x5c4>)
 80101b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101b4:	461a      	mov	r2, r3
 80101b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80101bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	685a      	ldr	r2, [r3, #4]
 80101c2:	4613      	mov	r3, r2
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	4413      	add	r3, r2
 80101c8:	69ba      	ldr	r2, [r7, #24]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d305      	bcc.n	80101da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101d4:	69ba      	ldr	r2, [r7, #24]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d903      	bls.n	80101e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80101da:	2301      	movs	r3, #1
 80101dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80101e0:	e113      	b.n	801040a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e4:	2200      	movs	r2, #0
 80101e6:	60bb      	str	r3, [r7, #8]
 80101e8:	60fa      	str	r2, [r7, #12]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101ee:	4a84      	ldr	r2, [pc, #528]	@ (8010400 <UART_SetConfig+0x5c4>)
 80101f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	2200      	movs	r2, #0
 80101f8:	603b      	str	r3, [r7, #0]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010204:	f7f0 fd68 	bl	8000cd8 <__aeabi_uldivmod>
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	4610      	mov	r0, r2
 801020e:	4619      	mov	r1, r3
 8010210:	f04f 0200 	mov.w	r2, #0
 8010214:	f04f 0300 	mov.w	r3, #0
 8010218:	020b      	lsls	r3, r1, #8
 801021a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801021e:	0202      	lsls	r2, r0, #8
 8010220:	6979      	ldr	r1, [r7, #20]
 8010222:	6849      	ldr	r1, [r1, #4]
 8010224:	0849      	lsrs	r1, r1, #1
 8010226:	2000      	movs	r0, #0
 8010228:	460c      	mov	r4, r1
 801022a:	4605      	mov	r5, r0
 801022c:	eb12 0804 	adds.w	r8, r2, r4
 8010230:	eb43 0905 	adc.w	r9, r3, r5
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	469a      	mov	sl, r3
 801023c:	4693      	mov	fp, r2
 801023e:	4652      	mov	r2, sl
 8010240:	465b      	mov	r3, fp
 8010242:	4640      	mov	r0, r8
 8010244:	4649      	mov	r1, r9
 8010246:	f7f0 fd47 	bl	8000cd8 <__aeabi_uldivmod>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	4613      	mov	r3, r2
 8010250:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010258:	d308      	bcc.n	801026c <UART_SetConfig+0x430>
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010260:	d204      	bcs.n	801026c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	6a3a      	ldr	r2, [r7, #32]
 8010268:	60da      	str	r2, [r3, #12]
 801026a:	e0ce      	b.n	801040a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801026c:	2301      	movs	r3, #1
 801026e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010272:	e0ca      	b.n	801040a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	69db      	ldr	r3, [r3, #28]
 8010278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801027c:	d166      	bne.n	801034c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801027e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010282:	2b08      	cmp	r3, #8
 8010284:	d827      	bhi.n	80102d6 <UART_SetConfig+0x49a>
 8010286:	a201      	add	r2, pc, #4	@ (adr r2, 801028c <UART_SetConfig+0x450>)
 8010288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801028c:	080102b1 	.word	0x080102b1
 8010290:	080102b9 	.word	0x080102b9
 8010294:	080102c1 	.word	0x080102c1
 8010298:	080102d7 	.word	0x080102d7
 801029c:	080102c7 	.word	0x080102c7
 80102a0:	080102d7 	.word	0x080102d7
 80102a4:	080102d7 	.word	0x080102d7
 80102a8:	080102d7 	.word	0x080102d7
 80102ac:	080102cf 	.word	0x080102cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102b0:	f7fd fec6 	bl	800e040 <HAL_RCC_GetPCLK1Freq>
 80102b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102b6:	e014      	b.n	80102e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102b8:	f7fd fed8 	bl	800e06c <HAL_RCC_GetPCLK2Freq>
 80102bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102be:	e010      	b.n	80102e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80102c0:	4b4e      	ldr	r3, [pc, #312]	@ (80103fc <UART_SetConfig+0x5c0>)
 80102c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80102c4:	e00d      	b.n	80102e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80102c6:	f7fd fe4d 	bl	800df64 <HAL_RCC_GetSysClockFreq>
 80102ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102cc:	e009      	b.n	80102e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80102d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80102d4:	e005      	b.n	80102e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80102d6:	2300      	movs	r3, #0
 80102d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80102da:	2301      	movs	r3, #1
 80102dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80102e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 8090 	beq.w	801040a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ee:	4a44      	ldr	r2, [pc, #272]	@ (8010400 <UART_SetConfig+0x5c4>)
 80102f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102f4:	461a      	mov	r2, r3
 80102f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80102fc:	005a      	lsls	r2, r3, #1
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	085b      	lsrs	r3, r3, #1
 8010304:	441a      	add	r2, r3
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	fbb2 f3f3 	udiv	r3, r2, r3
 801030e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010310:	6a3b      	ldr	r3, [r7, #32]
 8010312:	2b0f      	cmp	r3, #15
 8010314:	d916      	bls.n	8010344 <UART_SetConfig+0x508>
 8010316:	6a3b      	ldr	r3, [r7, #32]
 8010318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801031c:	d212      	bcs.n	8010344 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801031e:	6a3b      	ldr	r3, [r7, #32]
 8010320:	b29b      	uxth	r3, r3
 8010322:	f023 030f 	bic.w	r3, r3, #15
 8010326:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010328:	6a3b      	ldr	r3, [r7, #32]
 801032a:	085b      	lsrs	r3, r3, #1
 801032c:	b29b      	uxth	r3, r3
 801032e:	f003 0307 	and.w	r3, r3, #7
 8010332:	b29a      	uxth	r2, r3
 8010334:	8bfb      	ldrh	r3, [r7, #30]
 8010336:	4313      	orrs	r3, r2
 8010338:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	8bfa      	ldrh	r2, [r7, #30]
 8010340:	60da      	str	r2, [r3, #12]
 8010342:	e062      	b.n	801040a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801034a:	e05e      	b.n	801040a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801034c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010350:	2b08      	cmp	r3, #8
 8010352:	d828      	bhi.n	80103a6 <UART_SetConfig+0x56a>
 8010354:	a201      	add	r2, pc, #4	@ (adr r2, 801035c <UART_SetConfig+0x520>)
 8010356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801035a:	bf00      	nop
 801035c:	08010381 	.word	0x08010381
 8010360:	08010389 	.word	0x08010389
 8010364:	08010391 	.word	0x08010391
 8010368:	080103a7 	.word	0x080103a7
 801036c:	08010397 	.word	0x08010397
 8010370:	080103a7 	.word	0x080103a7
 8010374:	080103a7 	.word	0x080103a7
 8010378:	080103a7 	.word	0x080103a7
 801037c:	0801039f 	.word	0x0801039f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010380:	f7fd fe5e 	bl	800e040 <HAL_RCC_GetPCLK1Freq>
 8010384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010386:	e014      	b.n	80103b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010388:	f7fd fe70 	bl	800e06c <HAL_RCC_GetPCLK2Freq>
 801038c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801038e:	e010      	b.n	80103b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010390:	4b1a      	ldr	r3, [pc, #104]	@ (80103fc <UART_SetConfig+0x5c0>)
 8010392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010394:	e00d      	b.n	80103b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010396:	f7fd fde5 	bl	800df64 <HAL_RCC_GetSysClockFreq>
 801039a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801039c:	e009      	b.n	80103b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801039e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80103a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80103a4:	e005      	b.n	80103b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80103a6:	2300      	movs	r3, #0
 80103a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80103aa:	2301      	movs	r3, #1
 80103ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80103b0:	bf00      	nop
    }

    if (pclk != 0U)
 80103b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d028      	beq.n	801040a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103bc:	4a10      	ldr	r2, [pc, #64]	@ (8010400 <UART_SetConfig+0x5c4>)
 80103be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103c2:	461a      	mov	r2, r3
 80103c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	085b      	lsrs	r3, r3, #1
 80103d0:	441a      	add	r2, r3
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80103da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103dc:	6a3b      	ldr	r3, [r7, #32]
 80103de:	2b0f      	cmp	r3, #15
 80103e0:	d910      	bls.n	8010404 <UART_SetConfig+0x5c8>
 80103e2:	6a3b      	ldr	r3, [r7, #32]
 80103e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103e8:	d20c      	bcs.n	8010404 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	60da      	str	r2, [r3, #12]
 80103f4:	e009      	b.n	801040a <UART_SetConfig+0x5ce>
 80103f6:	bf00      	nop
 80103f8:	40008000 	.word	0x40008000
 80103fc:	00f42400 	.word	0x00f42400
 8010400:	08018b60 	.word	0x08018b60
      }
      else
      {
        ret = HAL_ERROR;
 8010404:	2301      	movs	r3, #1
 8010406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	2201      	movs	r2, #1
 801040e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	2201      	movs	r2, #1
 8010416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	2200      	movs	r2, #0
 801041e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	2200      	movs	r2, #0
 8010424:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010426:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801042a:	4618      	mov	r0, r3
 801042c:	3730      	adds	r7, #48	@ 0x30
 801042e:	46bd      	mov	sp, r7
 8010430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010434:	b480      	push	{r7}
 8010436:	b083      	sub	sp, #12
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010440:	f003 0308 	and.w	r3, r3, #8
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00a      	beq.n	801045e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	430a      	orrs	r2, r1
 801045c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00a      	beq.n	8010480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	430a      	orrs	r2, r1
 801047e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010484:	f003 0302 	and.w	r3, r3, #2
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00a      	beq.n	80104a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	430a      	orrs	r2, r1
 80104a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104a6:	f003 0304 	and.w	r3, r3, #4
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00a      	beq.n	80104c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	430a      	orrs	r2, r1
 80104c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104c8:	f003 0310 	and.w	r3, r3, #16
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00a      	beq.n	80104e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	430a      	orrs	r2, r1
 80104e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ea:	f003 0320 	and.w	r3, r3, #32
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00a      	beq.n	8010508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	430a      	orrs	r2, r1
 8010506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801050c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010510:	2b00      	cmp	r3, #0
 8010512:	d01a      	beq.n	801054a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	430a      	orrs	r2, r1
 8010528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801052e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010532:	d10a      	bne.n	801054a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	430a      	orrs	r2, r1
 8010548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801054e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00a      	beq.n	801056c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	430a      	orrs	r2, r1
 801056a:	605a      	str	r2, [r3, #4]
  }
}
 801056c:	bf00      	nop
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b098      	sub	sp, #96	@ 0x60
 801057c:	af02      	add	r7, sp, #8
 801057e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010588:	f7fa f8f4 	bl	800a774 <HAL_GetTick>
 801058c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f003 0308 	and.w	r3, r3, #8
 8010598:	2b08      	cmp	r3, #8
 801059a:	d12f      	bne.n	80105fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801059c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105a4:	2200      	movs	r2, #0
 80105a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 f88e 	bl	80106cc <UART_WaitOnFlagUntilTimeout>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d022      	beq.n	80105fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105be:	e853 3f00 	ldrex	r3, [r3]
 80105c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80105c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	461a      	mov	r2, r3
 80105d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80105d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105dc:	e841 2300 	strex	r3, r2, [r1]
 80105e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e6      	bne.n	80105b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2220      	movs	r2, #32
 80105ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105f8:	2303      	movs	r3, #3
 80105fa:	e063      	b.n	80106c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f003 0304 	and.w	r3, r3, #4
 8010606:	2b04      	cmp	r3, #4
 8010608:	d149      	bne.n	801069e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801060a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010612:	2200      	movs	r2, #0
 8010614:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 f857 	bl	80106cc <UART_WaitOnFlagUntilTimeout>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d03c      	beq.n	801069e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062c:	e853 3f00 	ldrex	r3, [r3]
 8010630:	623b      	str	r3, [r7, #32]
   return(result);
 8010632:	6a3b      	ldr	r3, [r7, #32]
 8010634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	461a      	mov	r2, r3
 8010640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010642:	633b      	str	r3, [r7, #48]	@ 0x30
 8010644:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801064a:	e841 2300 	strex	r3, r2, [r1]
 801064e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1e6      	bne.n	8010624 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3308      	adds	r3, #8
 801065c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	e853 3f00 	ldrex	r3, [r3]
 8010664:	60fb      	str	r3, [r7, #12]
   return(result);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f023 0301 	bic.w	r3, r3, #1
 801066c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3308      	adds	r3, #8
 8010674:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010676:	61fa      	str	r2, [r7, #28]
 8010678:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067a:	69b9      	ldr	r1, [r7, #24]
 801067c:	69fa      	ldr	r2, [r7, #28]
 801067e:	e841 2300 	strex	r3, r2, [r1]
 8010682:	617b      	str	r3, [r7, #20]
   return(result);
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1e5      	bne.n	8010656 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2220      	movs	r2, #32
 801068e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2200      	movs	r2, #0
 8010696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801069a:	2303      	movs	r3, #3
 801069c:	e012      	b.n	80106c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2220      	movs	r2, #32
 80106aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2200      	movs	r2, #0
 80106be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3758      	adds	r7, #88	@ 0x58
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	603b      	str	r3, [r7, #0]
 80106d8:	4613      	mov	r3, r2
 80106da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106dc:	e04f      	b.n	801077e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e4:	d04b      	beq.n	801077e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106e6:	f7fa f845 	bl	800a774 <HAL_GetTick>
 80106ea:	4602      	mov	r2, r0
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	69ba      	ldr	r2, [r7, #24]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d302      	bcc.n	80106fc <UART_WaitOnFlagUntilTimeout+0x30>
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80106fc:	2303      	movs	r3, #3
 80106fe:	e04e      	b.n	801079e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f003 0304 	and.w	r3, r3, #4
 801070a:	2b00      	cmp	r3, #0
 801070c:	d037      	beq.n	801077e <UART_WaitOnFlagUntilTimeout+0xb2>
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b80      	cmp	r3, #128	@ 0x80
 8010712:	d034      	beq.n	801077e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	2b40      	cmp	r3, #64	@ 0x40
 8010718:	d031      	beq.n	801077e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	69db      	ldr	r3, [r3, #28]
 8010720:	f003 0308 	and.w	r3, r3, #8
 8010724:	2b08      	cmp	r3, #8
 8010726:	d110      	bne.n	801074a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2208      	movs	r2, #8
 801072e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f000 f838 	bl	80107a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2208      	movs	r2, #8
 801073a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010746:	2301      	movs	r3, #1
 8010748:	e029      	b.n	801079e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	69db      	ldr	r3, [r3, #28]
 8010750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010758:	d111      	bne.n	801077e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f000 f81e 	bl	80107a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2220      	movs	r2, #32
 801076e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801077a:	2303      	movs	r3, #3
 801077c:	e00f      	b.n	801079e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	69da      	ldr	r2, [r3, #28]
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	4013      	ands	r3, r2
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	429a      	cmp	r2, r3
 801078c:	bf0c      	ite	eq
 801078e:	2301      	moveq	r3, #1
 8010790:	2300      	movne	r3, #0
 8010792:	b2db      	uxtb	r3, r3
 8010794:	461a      	mov	r2, r3
 8010796:	79fb      	ldrb	r3, [r7, #7]
 8010798:	429a      	cmp	r2, r3
 801079a:	d0a0      	beq.n	80106de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801079c:	2300      	movs	r3, #0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80107a6:	b480      	push	{r7}
 80107a8:	b095      	sub	sp, #84	@ 0x54
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107b6:	e853 3f00 	ldrex	r3, [r3]
 80107ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80107bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80107ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80107d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80107d4:	e841 2300 	strex	r3, r2, [r1]
 80107d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e6      	bne.n	80107ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	3308      	adds	r3, #8
 80107e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	e853 3f00 	ldrex	r3, [r3]
 80107ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80107f6:	f023 0301 	bic.w	r3, r3, #1
 80107fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	3308      	adds	r3, #8
 8010802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010806:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801080a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801080c:	e841 2300 	strex	r3, r2, [r1]
 8010810:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1e3      	bne.n	80107e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801081c:	2b01      	cmp	r3, #1
 801081e:	d118      	bne.n	8010852 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	e853 3f00 	ldrex	r3, [r3]
 801082c:	60bb      	str	r3, [r7, #8]
   return(result);
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	f023 0310 	bic.w	r3, r3, #16
 8010834:	647b      	str	r3, [r7, #68]	@ 0x44
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801083e:	61bb      	str	r3, [r7, #24]
 8010840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010842:	6979      	ldr	r1, [r7, #20]
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	e841 2300 	strex	r3, r2, [r1]
 801084a:	613b      	str	r3, [r7, #16]
   return(result);
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1e6      	bne.n	8010820 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2220      	movs	r2, #32
 8010856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010866:	bf00      	nop
 8010868:	3754      	adds	r7, #84	@ 0x54
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b084      	sub	sp, #16
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801087e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2200      	movs	r2, #0
 801088c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff fabd 	bl	800fe10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b088      	sub	sp, #32
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	e853 3f00 	ldrex	r3, [r3]
 80108b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108ba:	61fb      	str	r3, [r7, #28]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	461a      	mov	r2, r3
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	61bb      	str	r3, [r7, #24]
 80108c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c8:	6979      	ldr	r1, [r7, #20]
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	e841 2300 	strex	r3, r2, [r1]
 80108d0:	613b      	str	r3, [r7, #16]
   return(result);
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1e6      	bne.n	80108a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2220      	movs	r2, #32
 80108dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff fa88 	bl	800fdfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108ec:	bf00      	nop
 80108ee:	3720      	adds	r7, #32
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80108fc:	bf00      	nop
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010910:	bf00      	nop
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801093e:	2b01      	cmp	r3, #1
 8010940:	d101      	bne.n	8010946 <HAL_UARTEx_DisableFifoMode+0x16>
 8010942:	2302      	movs	r3, #2
 8010944:	e027      	b.n	8010996 <HAL_UARTEx_DisableFifoMode+0x66>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2224      	movs	r2, #36	@ 0x24
 8010952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f022 0201 	bic.w	r2, r2, #1
 801096c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68fa      	ldr	r2, [r7, #12]
 8010982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2220      	movs	r2, #32
 8010988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b084      	sub	sp, #16
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
 80109aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d101      	bne.n	80109ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80109b6:	2302      	movs	r3, #2
 80109b8:	e02d      	b.n	8010a16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2201      	movs	r2, #1
 80109be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2224      	movs	r2, #36	@ 0x24
 80109c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f022 0201 	bic.w	r2, r2, #1
 80109e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	683a      	ldr	r2, [r7, #0]
 80109f2:	430a      	orrs	r2, r1
 80109f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f850 	bl	8010a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2220      	movs	r2, #32
 8010a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a14:	2300      	movs	r3, #0
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3710      	adds	r7, #16
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}

08010a1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b084      	sub	sp, #16
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
 8010a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d101      	bne.n	8010a36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a32:	2302      	movs	r3, #2
 8010a34:	e02d      	b.n	8010a92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2224      	movs	r2, #36	@ 0x24
 8010a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f022 0201 	bic.w	r2, r2, #1
 8010a5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	430a      	orrs	r2, r1
 8010a70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 f812 	bl	8010a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2220      	movs	r2, #32
 8010a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a90:	2300      	movs	r3, #0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
	...

08010a9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d108      	bne.n	8010abe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2201      	movs	r2, #1
 8010ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010abc:	e031      	b.n	8010b22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010abe:	2308      	movs	r3, #8
 8010ac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010ac2:	2308      	movs	r3, #8
 8010ac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	0e5b      	lsrs	r3, r3, #25
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	f003 0307 	and.w	r3, r3, #7
 8010ad4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	0f5b      	lsrs	r3, r3, #29
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	f003 0307 	and.w	r3, r3, #7
 8010ae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ae6:	7bbb      	ldrb	r3, [r7, #14]
 8010ae8:	7b3a      	ldrb	r2, [r7, #12]
 8010aea:	4911      	ldr	r1, [pc, #68]	@ (8010b30 <UARTEx_SetNbDataToProcess+0x94>)
 8010aec:	5c8a      	ldrb	r2, [r1, r2]
 8010aee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010af2:	7b3a      	ldrb	r2, [r7, #12]
 8010af4:	490f      	ldr	r1, [pc, #60]	@ (8010b34 <UARTEx_SetNbDataToProcess+0x98>)
 8010af6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b04:	7bfb      	ldrb	r3, [r7, #15]
 8010b06:	7b7a      	ldrb	r2, [r7, #13]
 8010b08:	4909      	ldr	r1, [pc, #36]	@ (8010b30 <UARTEx_SetNbDataToProcess+0x94>)
 8010b0a:	5c8a      	ldrb	r2, [r1, r2]
 8010b0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b10:	7b7a      	ldrb	r2, [r7, #13]
 8010b12:	4908      	ldr	r1, [pc, #32]	@ (8010b34 <UARTEx_SetNbDataToProcess+0x98>)
 8010b14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010b22:	bf00      	nop
 8010b24:	3714      	adds	r7, #20
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	08018b78 	.word	0x08018b78
 8010b34:	08018b80 	.word	0x08018b80

08010b38 <_ZN17AbstractAllocatorD1Ev>:
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	4a04      	ldr	r2, [pc, #16]	@ (8010b54 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	601a      	str	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4618      	mov	r0, r3
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	08018b0c 	.word	0x08018b0c

08010b58 <_ZN17AbstractAllocatorD0Ev>:
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff ffe9 	bl	8010b38 <_ZN17AbstractAllocatorD1Ev>
 8010b66:	2108      	movs	r1, #8
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f002 fe7a 	bl	8013862 <_ZdlPvj>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include <cyphal/allocators/sys/sys_allocator.h>
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f002 fec5 	bl	8013914 <malloc>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d105      	bne.n	8010ba0 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	3310      	adds	r3, #16
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7f7 fac6 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 8010ba0:	697b      	ldr	r3, [r7, #20]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3718      	adds	r7, #24
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	60f8      	str	r0, [r7, #12]
 8010bb2:	60b9      	str	r1, [r7, #8]
 8010bb4:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f002 feb4 	bl	8013924 <free>
}
 8010bbc:	bf00      	nop
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	4a05      	ldr	r2, [pc, #20]	@ (8010be4 <_ZN15SystemAllocatorD1Ev+0x20>)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	601a      	str	r2, [r3, #0]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff ffaf 	bl	8010b38 <_ZN17AbstractAllocatorD1Ev>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	08018b90 	.word	0x08018b90

08010be8 <_ZN15SystemAllocatorD0Ev>:
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7ff ffe7 	bl	8010bc4 <_ZN15SystemAllocatorD1Ev>
 8010bf6:	2108      	movs	r1, #8
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f002 fe32 	bl	8013862 <_ZdlPvj>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 8010c08:	b590      	push	{r4, r7, lr}
 8010c0a:	b08b      	sub	sp, #44	@ 0x2c
 8010c0c:	af04      	add	r7, sp, #16
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	3308      	adds	r3, #8
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 f876 	bl	8010d0a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010c1e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8010c20:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	3308      	adds	r3, #8
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 f86e 	bl	8010d0a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010c2e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8010c30:	f103 0120 	add.w	r1, r3, #32
 8010c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c36:	9302      	str	r3, [sp, #8]
 8010c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c44:	4620      	mov	r0, r4
 8010c46:	f002 fb65 	bl	8013314 <canardTxPush>
 8010c4a:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	f113 0f03 	cmn.w	r3, #3
 8010c52:	d106      	bne.n	8010c62 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	3310      	adds	r3, #16
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7f7 fa66 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 8010c60:	e008      	b.n	8010c74 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	da05      	bge.n	8010c74 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	3310      	adds	r3, #16
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f7 fa5c 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    }
}
 8010c74:	371c      	adds	r7, #28
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd90      	pop	{r4, r7, pc}
	...

08010c7c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 8010c7c:	b590      	push	{r4, r7, lr}
 8010c7e:	b089      	sub	sp, #36	@ 0x24
 8010c80:	af04      	add	r7, sp, #16
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	607a      	str	r2, [r7, #4]
 8010c86:	461a      	mov	r2, r3
 8010c88:	460b      	mov	r3, r1
 8010c8a:	817b      	strh	r3, [r7, #10]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	3308      	adds	r3, #8
 8010c94:	4618      	mov	r0, r3
 8010c96:	f000 f838 	bl	8010d0a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010c9a:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 8010c9c:	f103 0020 	add.w	r0, r3, #32
 8010ca0:	897c      	ldrh	r4, [r7, #10]
 8010ca2:	7a79      	ldrb	r1, [r7, #9]
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	9302      	str	r3, [sp, #8]
 8010ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8010ce0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 8010caa:	f04f 0300 	mov.w	r3, #0
 8010cae:	e9cd 2300 	strd	r2, r3, [sp]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4622      	mov	r2, r4
 8010cb6:	f002 fc7d 	bl	80135b4 <canardRxSubscribe>
 8010cba:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	bf14      	ite	ne
 8010cc0:	2301      	movne	r3, #1
 8010cc2:	2300      	moveq	r3, #0
 8010cc4:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d005      	beq.n	8010cd6 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	3310      	adds	r3, #16
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7f7 fa2b 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    }
}
 8010cd6:	bf00      	nop
 8010cd8:	3714      	adds	r7, #20
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd90      	pop	{r4, r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	001e8480 	.word	0x001e8480

08010ce4 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3308      	adds	r3, #8
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f000 f80a 	bl	8010d0a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	3208      	adds	r2, #8
 8010cfc:	6812      	ldr	r2, [r2, #0]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	4790      	blx	r2
}
 8010d02:	bf00      	nop
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      operator->() const noexcept
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b082      	sub	sp, #8
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 f805 	bl	8010d22 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8010d18:	4603      	mov	r3, r0
      }
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3708      	adds	r7, #8
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f000 f805 	bl	8010d3c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8010d32:	4603      	mov	r3, r0
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f000 f806 	bl	8010d58 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4618      	mov	r0, r3
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 f805 	bl	8010d72 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b082      	sub	sp, #8
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f805 	bl	8010d8a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010d80:	4603      	mov	r3, r0
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4618      	mov	r0, r3
 8010d96:	f000 f805 	bl	8010da4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	4618      	mov	r0, r3
 8010db0:	370c      	adds	r7, #12
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr

08010dba <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 8010dba:	b480      	push	{r7}
 8010dbc:	b085      	sub	sp, #20
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	0c1b      	lsrs	r3, r3, #16
 8010dc6:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
 8010dca:	2b08      	cmp	r3, #8
 8010dcc:	d801      	bhi.n	8010dd2 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	e009      	b.n	8010de6 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 8010dd2:	7bfb      	ldrb	r3, [r7, #15]
 8010dd4:	2b0c      	cmp	r3, #12
 8010dd6:	d803      	bhi.n	8010de0 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 8010dd8:	7bfb      	ldrb	r3, [r7, #15]
 8010dda:	3b06      	subs	r3, #6
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	e002      	b.n	8010de6 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
 8010de2:	3b0b      	subs	r3, #11
 8010de4:	011b      	lsls	r3, r3, #4
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
	...

08010df4 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 8010df4:	f1a0 0308 	sub.w	r3, r0, #8
 8010df8:	4a07      	ldr	r2, [pc, #28]	@ (8010e18 <_ZL12delay_cyclest+0x24>)
 8010dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8010dfe:	17db      	asrs	r3, r3, #31
 8010e00:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 8010e04:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8010e08:	d004      	beq.n	8010e14 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 8010e0a:	bf00      	nop
    while (real_cycles--) {
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8010e12:	d1fa      	bne.n	8010e0a <_ZL12delay_cyclest+0x16>
    }
}
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	66666667 	.word	0x66666667

08010e1c <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include <cyphal/providers/FDCAN_generic.h>

uint32_t G4CAN::len_to_dlc(size_t len) {
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 8010e26:	4a05      	ldr	r2, [pc, #20]	@ (8010e3c <_ZN5G4CAN10len_to_dlcEj+0x20>)
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	08018ba0 	.word	0x08018ba0

08010e40 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 8010e4a:	6838      	ldr	r0, [r7, #0]
 8010e4c:	f7ff ffb5 	bl	8010dba <_Z16fdcan_dlc_to_lenm>
 8010e50:	4603      	mov	r3, r0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b086      	sub	sp, #24
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 8010e62:	e017      	b.n	8010e94 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	330c      	adds	r3, #12
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f107 0208 	add.w	r2, r7, #8
 8010e70:	4611      	mov	r1, r2
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	4798      	blx	r3
 8010e76:	4603      	mov	r3, r0
 8010e78:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	f083 0301 	eor.w	r3, r3, #1
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d115      	bne.n	8010eb2 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f107 0208 	add.w	r2, r7, #8
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f000 f904 	bl	801109c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e98:	2140      	movs	r1, #64	@ 0x40
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fa fb9e 	bl	800b5dc <HAL_FDCAN_GetRxFifoFillLevel>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	bf14      	ite	ne
 8010ea6:	2301      	movne	r3, #1
 8010ea8:	2300      	moveq	r3, #0
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1d9      	bne.n	8010e64 <_ZN5G4CAN8can_loopEv+0xa>
 8010eb0:	e000      	b.n	8010eb4 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 8010eb2:	bf00      	nop
    }

    process_canard_tx();
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f000 f944 	bl	8011144 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 8010ebc:	bf00      	nop
 8010ebe:	3718      	adds	r7, #24
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};
bool G4CAN::read_frame(CanardFrame* rxf) {
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b08e      	sub	sp, #56	@ 0x38
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
    uint32_t rx_fifo = -1;
 8010ece:	f04f 33ff 	mov.w	r3, #4294967295
 8010ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ed8:	2140      	movs	r1, #64	@ 0x40
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fa fb7e 	bl	800b5dc <HAL_FDCAN_GetRxFifoFillLevel>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	bf14      	ite	ne
 8010ee6:	2301      	movne	r3, #1
 8010ee8:	2300      	moveq	r3, #0
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 8010ef0:	2340      	movs	r3, #64	@ 0x40
 8010ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ef4:	e00f      	b.n	8010f16 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010efa:	2141      	movs	r1, #65	@ 0x41
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7fa fb6d 	bl	800b5dc <HAL_FDCAN_GetRxFifoFillLevel>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	bf14      	ite	ne
 8010f08:	2301      	movne	r3, #1
 8010f0a:	2300      	moveq	r3, #0
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d001      	beq.n	8010f16 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 8010f12:	2341      	movs	r3, #65	@ 0x41
 8010f14:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 8010f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1c:	d101      	bne.n	8010f22 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	e02e      	b.n	8010f80 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 8010f22:	f107 030c 	add.w	r3, r7, #12
 8010f26:	2228      	movs	r2, #40	@ 0x28
 8010f28:	2100      	movs	r1, #0
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f003 fd7d 	bl	8014a2a <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010f34:	f107 020c 	add.w	r2, r7, #12
 8010f38:	4b13      	ldr	r3, [pc, #76]	@ (8010f88 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010f3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f3c:	f7fa fa74 	bl	800b428 <HAL_FDCAN_GetRxMessage>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	bf14      	ite	ne
 8010f46:	2301      	movne	r3, #1
 8010f48:	2300      	moveq	r3, #0
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d005      	beq.n	8010f5c <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f54:	3310      	adds	r3, #16
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7f7 f8e8 	bl	800812c <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	3304      	adds	r3, #4
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	69ba      	ldr	r2, [r7, #24]
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	4798      	blx	r3
 8010f72:	4602      	mov	r2, r0
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	4a03      	ldr	r2, [pc, #12]	@ (8010f88 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010f7c:	609a      	str	r2, [r3, #8]
    return true;
 8010f7e:	2301      	movs	r3, #1
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3738      	adds	r7, #56	@ 0x38
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	2000097c 	.word	0x2000097c

08010f8c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b08c      	sub	sp, #48	@ 0x30
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8010f9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010fa0:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010faa:	4a2a      	ldr	r2, [pc, #168]	@ (8011054 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 8010fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fb0:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8010fb6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010fba:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8010fbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010fc0:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8010fc2:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8010fcc:	2300      	movs	r3, #0
 8010fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fd0:	e006      	b.n	8010fe0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 8010fd2:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8010fd6:	f7ff ff0d 	bl	8010df4 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8010fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fdc:	3301      	adds	r3, #1
 8010fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fa fb17 	bl	800b618 <HAL_FDCAN_GetTxFifoFreeLevel>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b03      	cmp	r3, #3
 8010fee:	d004      	beq.n	8010ffa <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	dc01      	bgt.n	8010ffa <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e000      	b.n	8010ffc <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e8      	bne.n	8010fd2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011004:	4618      	mov	r0, r3
 8011006:	f7fa fb07 	bl	800b618 <HAL_FDCAN_GetTxFifoFreeLevel>
 801100a:	4603      	mov	r3, r0
 801100c:	2b03      	cmp	r3, #3
 801100e:	bf14      	ite	ne
 8011010:	2301      	movne	r3, #1
 8011012:	2300      	moveq	r3, #0
 8011014:	b2db      	uxtb	r3, r3
 8011016:	2b00      	cmp	r3, #0
 8011018:	d002      	beq.n	8011020 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 801101a:	f04f 33ff 	mov.w	r3, #4294967295
 801101e:	e014      	b.n	801104a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011028:	f107 0308 	add.w	r3, r7, #8
 801102c:	4619      	mov	r1, r3
 801102e:	f7fa f9b7 	bl	800b3a0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	bf14      	ite	ne
 8011038:	2301      	movne	r3, #1
 801103a:	2300      	moveq	r3, #0
 801103c:	b2db      	uxtb	r3, r3
 801103e:	2b00      	cmp	r3, #0
 8011040:	d002      	beq.n	8011048 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 8011042:	f04f 33ff 	mov.w	r3, #4294967295
 8011046:	e000      	b.n	801104a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 8011048:	697b      	ldr	r3, [r7, #20]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3730      	adds	r7, #48	@ 0x30
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	08018ba0 	.word	0x08018ba0

08011058 <_ZN5G4CAND1Ev>:
class G4CAN : public AbstractCANProvider {
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	4a05      	ldr	r2, [pc, #20]	@ (8011078 <_ZN5G4CAND1Ev+0x20>)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	601a      	str	r2, [r3, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	f000 f8b1 	bl	80111d0 <_ZN19AbstractCANProviderD1Ev>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	08018cac 	.word	0x08018cac

0801107c <_ZN5G4CAND0Ev>:
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff ffe7 	bl	8011058 <_ZN5G4CAND1Ev>
 801108a:	2144      	movs	r1, #68	@ 0x44
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f002 fbe8 	bl	8013862 <_ZdlPvj>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 801109c:	b590      	push	{r4, r7, lr}
 801109e:	b091      	sub	sp, #68	@ 0x44
 80110a0:	af04      	add	r7, sp, #16
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 80110a6:	f107 0310 	add.w	r3, r7, #16
 80110aa:	2200      	movs	r2, #0
 80110ac:	601a      	str	r2, [r3, #0]
 80110ae:	605a      	str	r2, [r3, #4]
 80110b0:	609a      	str	r2, [r3, #8]
 80110b2:	60da      	str	r2, [r3, #12]
 80110b4:	611a      	str	r2, [r3, #16]
 80110b6:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 80110b8:	2300      	movs	r3, #0
 80110ba:	60fb      	str	r3, [r7, #12]

    const int8_t accept_result = canardRxAccept(
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7f7 f846 	bl	8008158 <_ZNKSt8functionIFyvEEclEv>
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	f107 010c 	add.w	r1, r7, #12
 80110d4:	9103      	str	r1, [sp, #12]
 80110d6:	f107 0110 	add.w	r1, r7, #16
 80110da:	9102      	str	r1, [sp, #8]
 80110dc:	2100      	movs	r1, #0
 80110de:	9101      	str	r1, [sp, #4]
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	9100      	str	r1, [sp, #0]
 80110e4:	4620      	mov	r0, r4
 80110e6:	f002 f9d5 	bl	8013494 <canardRxAccept>
 80110ea:	4603      	mov	r3, r0
 80110ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 1) {
 80110f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d10e      	bne.n	8011116 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
        IListener<CanardRxTransfer*>* listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6a1b      	ldr	r3, [r3, #32]
 80110fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (listener != nullptr) {
 80110fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011100:	2b00      	cmp	r3, #0
 8011102:	d010      	beq.n	8011126 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
            listener->accept(&transfer);
 8011104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f107 0210 	add.w	r2, r7, #16
 801110e:	4611      	mov	r1, r2
 8011110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011112:	4798      	blx	r3
 8011114:	e007      	b.n	8011126 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
        }
    }
    else if (accept_result == 0 || accept_result > 1) {
 8011116:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00e      	beq.n	801113c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 801111e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011122:	2b01      	cmp	r3, #1
 8011124:	dc0a      	bgt.n	801113c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }

    if (transfer.payload != nullptr) {
 8011126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011128:	2b00      	cmp	r3, #0
 801112a:	d008      	beq.n	801113e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        canard.memory_free(&canard, transfer.payload);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	3220      	adds	r2, #32
 8011134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011136:	4610      	mov	r0, r2
 8011138:	4798      	blx	r3
 801113a:	e000      	b.n	801113e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        return;
 801113c:	bf00      	nop
    }
}
 801113e:	3734      	adds	r7, #52	@ 0x34
 8011140:	46bd      	mov	sp, r7
 8011142:	bd90      	pop	{r4, r7, pc}

08011144 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 8011144:	b5b0      	push	{r4, r5, r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 801114c:	e036      	b.n	80111bc <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	330c      	adds	r3, #12
 8011152:	4618      	mov	r0, r3
 8011154:	f002 f968 	bl	8013428 <canardTxPeek>
 8011158:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8011160:	4313      	orrs	r3, r2
 8011162:	d00c      	beq.n	801117e <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801116e:	4618      	mov	r0, r3
 8011170:	f7f6 fff2 	bl	8008158 <_ZNKSt8functionIFyvEEclEv>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	42a2      	cmp	r2, r4
 801117a:	41ab      	sbcs	r3, r5
 801117c:	d201      	bcs.n	8011182 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 801117e:	2301      	movs	r3, #1
 8011180:	e000      	b.n	8011184 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 8011182:	2300      	movs	r3, #0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00a      	beq.n	801119e <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	3310      	adds	r3, #16
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68f9      	ldr	r1, [r7, #12]
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	4798      	blx	r3
 8011196:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	2b00      	cmp	r3, #0
 801119c:	db13      	blt.n	80111c6 <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f103 0520 	add.w	r5, r3, #32
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	330c      	adds	r3, #12
 80111ac:	68f9      	ldr	r1, [r7, #12]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f002 f94f 	bl	8013452 <canardTxPop>
 80111b4:	4603      	mov	r3, r0
 80111b6:	4619      	mov	r1, r3
 80111b8:	4628      	mov	r0, r5
 80111ba:	47a0      	blx	r4
    while (queue.size != 0) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	695b      	ldr	r3, [r3, #20]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1c4      	bne.n	801114e <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 80111c4:	e000      	b.n	80111c8 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 80111c6:	bf00      	nop
}
 80111c8:	bf00      	nop
 80111ca:	3710      	adds	r7, #16
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bdb0      	pop	{r4, r5, r7, pc}

080111d0 <_ZN19AbstractCANProviderD1Ev>:

AbstractCANProvider::~AbstractCANProvider() {
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	4a04      	ldr	r2, [pc, #16]	@ (80111ec <_ZN19AbstractCANProviderD1Ev+0x1c>)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	601a      	str	r2, [r3, #0]

}
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	370c      	adds	r7, #12
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr
 80111ec:	08018cd0 	.word	0x08018cd0

080111f0 <_Z41__static_initialization_and_destruction_0ii>:
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d107      	bne.n	8011210 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011206:	4293      	cmp	r3, r2
 8011208:	d102      	bne.n	8011210 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801120a:	4803      	ldr	r0, [pc, #12]	@ (8011218 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801120c:	f000 f806 	bl	801121c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	200009bc 	.word	0x200009bc

0801121c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4618      	mov	r0, r3
 8011228:	f7f7 fef2 	bl	8009010 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 801122c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00c      	beq.n	8011250 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7f7 fdae 	bl	8008d98 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 801123c:	4604      	mov	r4, r0
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f7f7 fe45 	bl	8008ece <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8011244:	4603      	mov	r3, r0
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4619      	mov	r1, r3
 801124a:	4620      	mov	r0, r4
 801124c:	f7f7 feed 	bl	800902a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	601a      	str	r2, [r3, #0]
      }
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4618      	mov	r0, r3
 801125a:	3714      	adds	r7, #20
 801125c:	46bd      	mov	sp, r7
 801125e:	bd90      	pop	{r4, r7, pc}

08011260 <_GLOBAL__sub_I_queue>:
 8011260:	b580      	push	{r7, lr}
 8011262:	af00      	add	r7, sp, #0
 8011264:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011268:	2001      	movs	r0, #1
 801126a:	f7ff ffc1 	bl	80111f0 <_Z41__static_initialization_and_destruction_0ii>
 801126e:	bd80      	pop	{r7, pc}

08011270 <_GLOBAL__sub_D_queue>:
 8011270:	b580      	push	{r7, lr}
 8011272:	af00      	add	r7, sp, #0
 8011274:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011278:	2000      	movs	r0, #0
 801127a:	f7ff ffb9 	bl	80111f0 <_Z41__static_initialization_and_destruction_0ii>
 801127e:	bd80      	pop	{r7, pc}

08011280 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 801128c:	2300      	movs	r3, #0
 801128e:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8011294:	e007      	b.n	80112a6 <cavlFindExtremum+0x26>
    {
        result = c;
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 801129a:	78fb      	ldrb	r3, [r7, #3]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	4413      	add	r3, r2
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1f4      	bne.n	8011296 <cavlFindExtremum+0x16>
    }
    return result;
 80112ac:	68fb      	ldr	r3, [r7, #12]
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3714      	adds	r7, #20
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
	...

080112bc <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d014      	beq.n	80112f8 <cavlPrivateRotate+0x3c>
 80112ce:	78fb      	ldrb	r3, [r7, #3]
 80112d0:	f083 0301 	eor.w	r3, r3, #1
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4413      	add	r3, r2
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00a      	beq.n	80112f8 <cavlPrivateRotate+0x3c>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ec:	db04      	blt.n	80112f8 <cavlPrivateRotate+0x3c>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	dd05      	ble.n	8011304 <cavlPrivateRotate+0x48>
 80112f8:	4b2a      	ldr	r3, [pc, #168]	@ (80113a4 <cavlPrivateRotate+0xe8>)
 80112fa:	4a2b      	ldr	r2, [pc, #172]	@ (80113a8 <cavlPrivateRotate+0xec>)
 80112fc:	2162      	movs	r1, #98	@ 0x62
 80112fe:	482b      	ldr	r0, [pc, #172]	@ (80113ac <cavlPrivateRotate+0xf0>)
 8011300:	f002 fad8 	bl	80138b4 <__assert_func>
    Cavl* const z = x->lr[!r];
 8011304:	78fb      	ldrb	r3, [r7, #3]
 8011306:	f083 0301 	eor.w	r3, r3, #1
 801130a:	b2db      	uxtb	r3, r3
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00e      	beq.n	801133c <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	689b      	ldr	r3, [r3, #8]
 8011328:	6879      	ldr	r1, [r7, #4]
 801132a:	4299      	cmp	r1, r3
 801132c:	bf0c      	ite	eq
 801132e:	2301      	moveq	r3, #1
 8011330:	2300      	movne	r3, #0
 8011332:	b2db      	uxtb	r3, r3
 8011334:	009b      	lsls	r3, r3, #2
 8011336:	4413      	add	r3, r2
 8011338:	68fa      	ldr	r2, [r7, #12]
 801133a:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	68fa      	ldr	r2, [r7, #12]
 8011348:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 801134a:	78fb      	ldrb	r3, [r7, #3]
 801134c:	78fa      	ldrb	r2, [r7, #3]
 801134e:	f082 0201 	eor.w	r2, r2, #1
 8011352:	b2d2      	uxtb	r2, r2
 8011354:	4610      	mov	r0, r2
 8011356:	68fa      	ldr	r2, [r7, #12]
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	4413      	add	r3, r2
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	6879      	ldr	r1, [r7, #4]
 8011360:	0083      	lsls	r3, r0, #2
 8011362:	440b      	add	r3, r1
 8011364:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8011366:	78fb      	ldrb	r3, [r7, #3]
 8011368:	f083 0301 	eor.w	r3, r3, #1
 801136c:	b2db      	uxtb	r3, r3
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	4413      	add	r3, r2
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d009      	beq.n	801138e <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 801137a:	78fb      	ldrb	r3, [r7, #3]
 801137c:	f083 0301 	eor.w	r3, r3, #1
 8011380:	b2db      	uxtb	r3, r3
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 801138e:	78fb      	ldrb	r3, [r7, #3]
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4413      	add	r3, r2
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	605a      	str	r2, [r3, #4]
}
 801139a:	bf00      	nop
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	08018018 	.word	0x08018018
 80113a8:	08019058 	.word	0x08019058
 80113ac:	08018060 	.word	0x08018060

080113b0 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00a      	beq.n	80113d8 <cavlPrivateAdjustBalance+0x28>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80113c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113cc:	db04      	blt.n	80113d8 <cavlPrivateAdjustBalance+0x28>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	dd05      	ble.n	80113e4 <cavlPrivateAdjustBalance+0x34>
 80113d8:	4b61      	ldr	r3, [pc, #388]	@ (8011560 <cavlPrivateAdjustBalance+0x1b0>)
 80113da:	4a62      	ldr	r2, [pc, #392]	@ (8011564 <cavlPrivateAdjustBalance+0x1b4>)
 80113dc:	2177      	movs	r1, #119	@ 0x77
 80113de:	4862      	ldr	r0, [pc, #392]	@ (8011568 <cavlPrivateAdjustBalance+0x1b8>)
 80113e0:	f002 fa68 	bl	80138b4 <__assert_func>
    Cavl*        out    = x;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	78fa      	ldrb	r2, [r7, #3]
 80113f2:	2a00      	cmp	r2, #0
 80113f4:	d001      	beq.n	80113fa <cavlPrivateAdjustBalance+0x4a>
 80113f6:	2201      	movs	r2, #1
 80113f8:	e000      	b.n	80113fc <cavlPrivateAdjustBalance+0x4c>
 80113fa:	22ff      	movs	r2, #255	@ 0xff
 80113fc:	4413      	add	r3, r2
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 8011402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801140a:	db04      	blt.n	8011416 <cavlPrivateAdjustBalance+0x66>
 801140c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011410:	2b01      	cmp	r3, #1
 8011412:	f340 809c 	ble.w	801154e <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8011416:	7cfb      	ldrb	r3, [r7, #19]
 8011418:	09db      	lsrs	r3, r3, #7
 801141a:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 801141c:	7cbb      	ldrb	r3, [r7, #18]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <cavlPrivateAdjustBalance+0x76>
 8011422:	2301      	movs	r3, #1
 8011424:	e001      	b.n	801142a <cavlPrivateAdjustBalance+0x7a>
 8011426:	f04f 33ff 	mov.w	r3, #4294967295
 801142a:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 801142c:	7cbb      	ldrb	r3, [r7, #18]
 801142e:	f083 0301 	eor.w	r3, r3, #1
 8011432:	b2db      	uxtb	r3, r3
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d105      	bne.n	8011450 <cavlPrivateAdjustBalance+0xa0>
 8011444:	4b49      	ldr	r3, [pc, #292]	@ (801156c <cavlPrivateAdjustBalance+0x1bc>)
 8011446:	4a47      	ldr	r2, [pc, #284]	@ (8011564 <cavlPrivateAdjustBalance+0x1b4>)
 8011448:	217f      	movs	r1, #127	@ 0x7f
 801144a:	4847      	ldr	r0, [pc, #284]	@ (8011568 <cavlPrivateAdjustBalance+0x1b8>)
 801144c:	f002 fa32 	bl	80138b4 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011456:	461a      	mov	r2, r3
 8011458:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801145c:	fb02 f303 	mul.w	r3, r2, r3
 8011460:	2b00      	cmp	r3, #0
 8011462:	dc1c      	bgt.n	801149e <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8011468:	7cbb      	ldrb	r3, [r7, #18]
 801146a:	4619      	mov	r1, r3
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7ff ff25 	bl	80112bc <cavlPrivateRotate>
            if (0 == z->bf)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d109      	bne.n	8011490 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 801147c:	7c7b      	ldrb	r3, [r7, #17]
 801147e:	425b      	negs	r3, r3
 8011480:	b2db      	uxtb	r3, r3
 8011482:	b25a      	sxtb	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	7c7a      	ldrb	r2, [r7, #17]
 801148c:	731a      	strb	r2, [r3, #12]
    {
 801148e:	e061      	b.n	8011554 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2200      	movs	r2, #0
 801149a:	731a      	strb	r2, [r3, #12]
    {
 801149c:	e05a      	b.n	8011554 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 801149e:	7cbb      	ldrb	r3, [r7, #18]
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d105      	bne.n	80114bc <cavlPrivateAdjustBalance+0x10c>
 80114b0:	4b2f      	ldr	r3, [pc, #188]	@ (8011570 <cavlPrivateAdjustBalance+0x1c0>)
 80114b2:	4a2c      	ldr	r2, [pc, #176]	@ (8011564 <cavlPrivateAdjustBalance+0x1b4>)
 80114b4:	2192      	movs	r1, #146	@ 0x92
 80114b6:	482c      	ldr	r0, [pc, #176]	@ (8011568 <cavlPrivateAdjustBalance+0x1b8>)
 80114b8:	f002 f9fc 	bl	80138b4 <__assert_func>
            out = y;
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 80114c0:	7cbb      	ldrb	r3, [r7, #18]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	bf14      	ite	ne
 80114c6:	2301      	movne	r3, #1
 80114c8:	2300      	moveq	r3, #0
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f083 0301 	eor.w	r3, r3, #1
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	4619      	mov	r1, r3
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f7ff feee 	bl	80112bc <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 80114e0:	7cbb      	ldrb	r3, [r7, #18]
 80114e2:	4619      	mov	r1, r3
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7ff fee9 	bl	80112bc <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80114f0:	461a      	mov	r2, r3
 80114f2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80114f6:	fb02 f303 	mul.w	r3, r2, r3
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	da09      	bge.n	8011512 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	7c7a      	ldrb	r2, [r7, #17]
 8011502:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	2200      	movs	r2, #0
 8011508:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2200      	movs	r2, #0
 801150e:	731a      	strb	r2, [r3, #12]
    {
 8011510:	e020      	b.n	8011554 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011518:	461a      	mov	r2, r3
 801151a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801151e:	fb02 f303 	mul.w	r3, r2, r3
 8011522:	2b00      	cmp	r3, #0
 8011524:	dd0c      	ble.n	8011540 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	2200      	movs	r2, #0
 8011530:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8011532:	7c7b      	ldrb	r3, [r7, #17]
 8011534:	425b      	negs	r3, r3
 8011536:	b2db      	uxtb	r3, r3
 8011538:	b25a      	sxtb	r2, r3
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	731a      	strb	r2, [r3, #12]
    {
 801153e:	e009      	b.n	8011554 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2200      	movs	r2, #0
 8011544:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2200      	movs	r2, #0
 801154a:	731a      	strb	r2, [r3, #12]
    {
 801154c:	e002      	b.n	8011554 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	7cfa      	ldrb	r2, [r7, #19]
 8011552:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8011554:	697b      	ldr	r3, [r7, #20]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3718      	adds	r7, #24
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	0801808c 	.word	0x0801808c
 8011564:	0801903c 	.word	0x0801903c
 8011568:	08018060 	.word	0x08018060
 801156c:	080180bc 	.word	0x080180bc
 8011570:	080180c8 	.word	0x080180c8

08011574 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b086      	sub	sp, #24
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d004      	beq.n	801158c <cavlPrivateRetraceOnGrowth+0x18>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d005      	beq.n	8011598 <cavlPrivateRetraceOnGrowth+0x24>
 801158c:	4b23      	ldr	r3, [pc, #140]	@ (801161c <cavlPrivateRetraceOnGrowth+0xa8>)
 801158e:	4a24      	ldr	r2, [pc, #144]	@ (8011620 <cavlPrivateRetraceOnGrowth+0xac>)
 8011590:	21b5      	movs	r1, #181	@ 0xb5
 8011592:	4824      	ldr	r0, [pc, #144]	@ (8011624 <cavlPrivateRetraceOnGrowth+0xb0>)
 8011594:	f002 f98e 	bl	80138b4 <__assert_func>
    Cavl* c = added;      // Child
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 80115a2:	e023      	b.n	80115ec <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	689b      	ldr	r3, [r3, #8]
 80115a8:	697a      	ldr	r2, [r7, #20]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	bf0c      	ite	eq
 80115ae:	2301      	moveq	r3, #1
 80115b0:	2300      	movne	r3, #0
 80115b2:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 80115b4:	7bfb      	ldrb	r3, [r7, #15]
 80115b6:	693a      	ldr	r2, [r7, #16]
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4413      	add	r3, r2
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	697a      	ldr	r2, [r7, #20]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d005      	beq.n	80115d0 <cavlPrivateRetraceOnGrowth+0x5c>
 80115c4:	4b18      	ldr	r3, [pc, #96]	@ (8011628 <cavlPrivateRetraceOnGrowth+0xb4>)
 80115c6:	4a16      	ldr	r2, [pc, #88]	@ (8011620 <cavlPrivateRetraceOnGrowth+0xac>)
 80115c8:	21bb      	movs	r1, #187	@ 0xbb
 80115ca:	4816      	ldr	r0, [pc, #88]	@ (8011624 <cavlPrivateRetraceOnGrowth+0xb0>)
 80115cc:	f002 f972 	bl	80138b4 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
 80115d2:	4619      	mov	r1, r3
 80115d4:	6938      	ldr	r0, [r7, #16]
 80115d6:	f7ff feeb 	bl	80113b0 <cavlPrivateAdjustBalance>
 80115da:	6178      	str	r0, [r7, #20]
        p = c->up;
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d003      	beq.n	80115f4 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d1d8      	bne.n	80115a4 <cavlPrivateRetraceOnGrowth+0x30>
 80115f2:	e000      	b.n	80115f6 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 80115f4:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d105      	bne.n	8011608 <cavlPrivateRetraceOnGrowth+0x94>
 80115fc:	4b0b      	ldr	r3, [pc, #44]	@ (801162c <cavlPrivateRetraceOnGrowth+0xb8>)
 80115fe:	4a08      	ldr	r2, [pc, #32]	@ (8011620 <cavlPrivateRetraceOnGrowth+0xac>)
 8011600:	21c3      	movs	r1, #195	@ 0xc3
 8011602:	4808      	ldr	r0, [pc, #32]	@ (8011624 <cavlPrivateRetraceOnGrowth+0xb0>)
 8011604:	f002 f956 	bl	80138b4 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <cavlPrivateRetraceOnGrowth+0x9e>
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	e000      	b.n	8011614 <cavlPrivateRetraceOnGrowth+0xa0>
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3718      	adds	r7, #24
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	080180d4 	.word	0x080180d4
 8011620:	08019020 	.word	0x08019020
 8011624:	08018060 	.word	0x08018060
 8011628:	080180f8 	.word	0x080180f8
 801162c:	08018108 	.word	0x08018108

08011630 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b08a      	sub	sp, #40	@ 0x28
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	607a      	str	r2, [r7, #4]
 801163c:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 801163e:	2300      	movs	r3, #0
 8011640:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d065      	beq.n	8011714 <cavlSearch+0xe4>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d062      	beq.n	8011714 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8011658:	e02f      	b.n	80116ba <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 801165a:	69fb      	ldr	r3, [r7, #28]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4611      	mov	r1, r2
 8011662:	68b8      	ldr	r0, [r7, #8]
 8011664:	4798      	blx	r3
 8011666:	4603      	mov	r3, r0
 8011668:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 801166a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d103      	bne.n	801167a <cavlSearch+0x4a>
            {
                out = *n;
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8011678:	e023      	b.n	80116c2 <cavlSearch+0x92>
            }
            up = *n;
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011688:	2b00      	cmp	r3, #0
 801168a:	bfcc      	ite	gt
 801168c:	2301      	movgt	r3, #1
 801168e:	2300      	movle	r3, #0
 8011690:	b2db      	uxtb	r3, r3
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	3304      	adds	r3, #4
 8011698:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00b      	beq.n	80116ba <cavlSearch+0x8a>
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	6a3a      	ldr	r2, [r7, #32]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d005      	beq.n	80116ba <cavlSearch+0x8a>
 80116ae:	4b1c      	ldr	r3, [pc, #112]	@ (8011720 <cavlSearch+0xf0>)
 80116b0:	4a1c      	ldr	r2, [pc, #112]	@ (8011724 <cavlSearch+0xf4>)
 80116b2:	21db      	movs	r1, #219	@ 0xdb
 80116b4:	481c      	ldr	r0, [pc, #112]	@ (8011728 <cavlSearch+0xf8>)
 80116b6:	f002 f8fd 	bl	80138b4 <__assert_func>
        while (*n != NULL)
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1cb      	bne.n	801165a <cavlSearch+0x2a>
        }
        if (NULL == out)
 80116c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d125      	bne.n	8011714 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d004      	beq.n	80116d8 <cavlSearch+0xa8>
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	68b8      	ldr	r0, [r7, #8]
 80116d2:	4798      	blx	r3
 80116d4:	4603      	mov	r3, r0
 80116d6:	e000      	b.n	80116da <cavlSearch+0xaa>
 80116d8:	2300      	movs	r3, #0
 80116da:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 80116dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d018      	beq.n	8011714 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116e6:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 80116e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ea:	2200      	movs	r2, #0
 80116ec:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 80116ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f0:	2200      	movs	r2, #0
 80116f2:	609a      	str	r2, [r3, #8]
                out->up        = up;
 80116f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f6:	6a3a      	ldr	r2, [r7, #32]
 80116f8:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 80116fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fc:	2200      	movs	r2, #0
 80116fe:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8011700:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011702:	f7ff ff37 	bl	8011574 <cavlPrivateRetraceOnGrowth>
 8011706:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d002      	beq.n	8011714 <cavlSearch+0xe4>
                {
                    *root = rt;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	697a      	ldr	r2, [r7, #20]
 8011712:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8011714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011716:	4618      	mov	r0, r3
 8011718:	3728      	adds	r7, #40	@ 0x28
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	08018114 	.word	0x08018114
 8011724:	08019014 	.word	0x08019014
 8011728:	08018060 	.word	0x08018060

0801172c <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 8116 	beq.w	801196a <cavlRemove+0x23e>
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	f000 8112 	beq.w	801196a <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d105      	bne.n	801175a <cavlRemove+0x2e>
 801174e:	4b89      	ldr	r3, [pc, #548]	@ (8011974 <cavlRemove+0x248>)
 8011750:	4a89      	ldr	r2, [pc, #548]	@ (8011978 <cavlRemove+0x24c>)
 8011752:	21f6      	movs	r1, #246	@ 0xf6
 8011754:	4889      	ldr	r0, [pc, #548]	@ (801197c <cavlRemove+0x250>)
 8011756:	f002 f8ad 	bl	80138b4 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d10a      	bne.n	8011778 <cavlRemove+0x4c>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	429a      	cmp	r2, r3
 801176a:	d005      	beq.n	8011778 <cavlRemove+0x4c>
 801176c:	4b84      	ldr	r3, [pc, #528]	@ (8011980 <cavlRemove+0x254>)
 801176e:	4a82      	ldr	r2, [pc, #520]	@ (8011978 <cavlRemove+0x24c>)
 8011770:	21f7      	movs	r1, #247	@ 0xf7
 8011772:	4882      	ldr	r0, [pc, #520]	@ (801197c <cavlRemove+0x250>)
 8011774:	f002 f89e 	bl	80138b4 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8011778:	2300      	movs	r3, #0
 801177a:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 801177c:	2300      	movs	r3, #0
 801177e:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d073      	beq.n	8011870 <cavlRemove+0x144>
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d06f      	beq.n	8011870 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	689b      	ldr	r3, [r3, #8]
 8011794:	2100      	movs	r1, #0
 8011796:	4618      	mov	r0, r3
 8011798:	f7ff fd72 	bl	8011280 <cavlFindExtremum>
 801179c:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d007      	beq.n	80117b4 <cavlRemove+0x88>
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d103      	bne.n	80117b4 <cavlRemove+0x88>
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d105      	bne.n	80117c0 <cavlRemove+0x94>
 80117b4:	4b73      	ldr	r3, [pc, #460]	@ (8011984 <cavlRemove+0x258>)
 80117b6:	4a70      	ldr	r2, [pc, #448]	@ (8011978 <cavlRemove+0x24c>)
 80117b8:	21ff      	movs	r1, #255	@ 0xff
 80117ba:	4870      	ldr	r0, [pc, #448]	@ (801197c <cavlRemove+0x250>)
 80117bc:	f002 f87a 	bl	80138b4 <__assert_func>
            re->bf        = node->bf;
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	685a      	ldr	r2, [r3, #4]
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	697a      	ldr	r2, [r7, #20]
 80117d8:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	683a      	ldr	r2, [r7, #0]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d025      	beq.n	8011830 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	697a      	ldr	r2, [r7, #20]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d006      	beq.n	8011802 <cavlRemove+0xd6>
 80117f4:	4b64      	ldr	r3, [pc, #400]	@ (8011988 <cavlRemove+0x25c>)
 80117f6:	4a60      	ldr	r2, [pc, #384]	@ (8011978 <cavlRemove+0x24c>)
 80117f8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80117fc:	485f      	ldr	r0, [pc, #380]	@ (801197c <cavlRemove+0x250>)
 80117fe:	f002 f859 	bl	80138b4 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	689a      	ldr	r2, [r3, #8]
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d003      	beq.n	801181a <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	69fa      	ldr	r2, [r7, #28]
 8011818:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	689a      	ldr	r2, [r3, #8]
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	697a      	ldr	r2, [r7, #20]
 8011828:	601a      	str	r2, [r3, #0]
                r             = false;
 801182a:	2300      	movs	r3, #0
 801182c:	76fb      	strb	r3, [r7, #27]
 801182e:	e003      	b.n	8011838 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8011834:	2301      	movs	r3, #1
 8011836:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00f      	beq.n	8011868 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	4299      	cmp	r1, r3
 8011856:	bf0c      	ite	eq
 8011858:	2301      	moveq	r3, #1
 801185a:	2300      	movne	r3, #0
 801185c:	b2db      	uxtb	r3, r3
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4413      	add	r3, r2
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	605a      	str	r2, [r3, #4]
        {
 8011866:	e046      	b.n	80118f6 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	697a      	ldr	r2, [r7, #20]
 801186c:	601a      	str	r2, [r3, #0]
        {
 801186e:	e042      	b.n	80118f6 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	689b      	ldr	r3, [r3, #8]
 801187a:	2b00      	cmp	r3, #0
 801187c:	bf14      	ite	ne
 801187e:	2301      	movne	r3, #1
 8011880:	2300      	moveq	r3, #0
 8011882:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8011884:	7cfb      	ldrb	r3, [r7, #19]
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	4413      	add	r3, r2
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d006      	beq.n	80118a0 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 8011892:	7cfb      	ldrb	r3, [r7, #19]
 8011894:	683a      	ldr	r2, [r7, #0]
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4413      	add	r3, r2
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	69fa      	ldr	r2, [r7, #28]
 801189e:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d020      	beq.n	80118e8 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	683a      	ldr	r2, [r7, #0]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	bf0c      	ite	eq
 80118b0:	2301      	moveq	r3, #1
 80118b2:	2300      	movne	r3, #0
 80118b4:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 80118b6:	7cfb      	ldrb	r3, [r7, #19]
 80118b8:	7ef8      	ldrb	r0, [r7, #27]
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	4413      	add	r3, r2
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	69f9      	ldr	r1, [r7, #28]
 80118c4:	0083      	lsls	r3, r0, #2
 80118c6:	440b      	add	r3, r1
 80118c8:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 80118ca:	7efb      	ldrb	r3, [r7, #27]
 80118cc:	69fa      	ldr	r2, [r7, #28]
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	4413      	add	r3, r2
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00e      	beq.n	80118f6 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 80118d8:	7efb      	ldrb	r3, [r7, #27]
 80118da:	69fa      	ldr	r2, [r7, #28]
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	4413      	add	r3, r2
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	69fa      	ldr	r2, [r7, #28]
 80118e4:	601a      	str	r2, [r3, #0]
 80118e6:	e006      	b.n	80118f6 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 80118e8:	7cfb      	ldrb	r3, [r7, #19]
 80118ea:	683a      	ldr	r2, [r7, #0]
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	685a      	ldr	r2, [r3, #4]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d036      	beq.n	801196a <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8011900:	7efb      	ldrb	r3, [r7, #27]
 8011902:	2b00      	cmp	r3, #0
 8011904:	bf14      	ite	ne
 8011906:	2301      	movne	r3, #1
 8011908:	2300      	moveq	r3, #0
 801190a:	b2db      	uxtb	r3, r3
 801190c:	f083 0301 	eor.w	r3, r3, #1
 8011910:	b2db      	uxtb	r3, r3
 8011912:	f003 0301 	and.w	r3, r3, #1
 8011916:	b2db      	uxtb	r3, r3
 8011918:	4619      	mov	r1, r3
 801191a:	69f8      	ldr	r0, [r7, #28]
 801191c:	f7ff fd48 	bl	80113b0 <cavlPrivateAdjustBalance>
 8011920:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d10b      	bne.n	801194a <cavlRemove+0x21e>
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d008      	beq.n	801194a <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	429a      	cmp	r2, r3
 8011940:	bf0c      	ite	eq
 8011942:	2301      	moveq	r3, #1
 8011944:	2300      	movne	r3, #0
 8011946:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8011948:	e7da      	b.n	8011900 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d10c      	bne.n	801196a <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <cavlRemove+0x238>
 8011956:	4b0d      	ldr	r3, [pc, #52]	@ (801198c <cavlRemove+0x260>)
 8011958:	4a07      	ldr	r2, [pc, #28]	@ (8011978 <cavlRemove+0x24c>)
 801195a:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 801195e:	4807      	ldr	r0, [pc, #28]	@ (801197c <cavlRemove+0x250>)
 8011960:	f001 ffa8 	bl	80138b4 <__assert_func>
                *root = c;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 801196a:	bf00      	nop
 801196c:	3720      	adds	r7, #32
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	08018138 	.word	0x08018138
 8011978:	0801909c 	.word	0x0801909c
 801197c:	08018060 	.word	0x08018060
 8011980:	08018148 	.word	0x08018148
 8011984:	08018170 	.word	0x08018170
 8011988:	080181a8 	.word	0x080181a8
 801198c:	08018108 	.word	0x08018108

08011990 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8011998:	687b      	ldr	r3, [r7, #4]
}
 801199a:	4618      	mov	r0, r3
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
	...

080119a8 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	4603      	mov	r3, r0
 80119b0:	460a      	mov	r2, r1
 80119b2:	80fb      	strh	r3, [r7, #6]
 80119b4:	4613      	mov	r3, r2
 80119b6:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80119b8:	88fb      	ldrh	r3, [r7, #6]
 80119ba:	021b      	lsls	r3, r3, #8
 80119bc:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 80119be:	88fb      	ldrh	r3, [r7, #6]
 80119c0:	0a1b      	lsrs	r3, r3, #8
 80119c2:	b299      	uxth	r1, r3
 80119c4:	797b      	ldrb	r3, [r7, #5]
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	404b      	eors	r3, r1
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	4905      	ldr	r1, [pc, #20]	@ (80119e4 <crcAddByte+0x3c>)
 80119d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80119d4:	4053      	eors	r3, r2
 80119d6:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 80119d8:	4618      	mov	r0, r3
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	08018cec 	.word	0x08018cec

080119e8 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b088      	sub	sp, #32
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	4603      	mov	r3, r0
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	607a      	str	r2, [r7, #4]
 80119f4:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d108      	bne.n	8011a0e <crcAdd+0x26>
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d005      	beq.n	8011a0e <crcAdd+0x26>
 8011a02:	4b12      	ldr	r3, [pc, #72]	@ (8011a4c <crcAdd+0x64>)
 8011a04:	4a12      	ldr	r2, [pc, #72]	@ (8011a50 <crcAdd+0x68>)
 8011a06:	2185      	movs	r1, #133	@ 0x85
 8011a08:	4812      	ldr	r0, [pc, #72]	@ (8011a54 <crcAdd+0x6c>)
 8011a0a:	f001 ff53 	bl	80138b4 <__assert_func>
    TransferCRC    out = crc;
 8011a0e:	89fb      	ldrh	r3, [r7, #14]
 8011a10:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8011a16:	2300      	movs	r3, #0
 8011a18:	617b      	str	r3, [r7, #20]
 8011a1a:	e00e      	b.n	8011a3a <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	781a      	ldrb	r2, [r3, #0]
 8011a20:	8bfb      	ldrh	r3, [r7, #30]
 8011a22:	4611      	mov	r1, r2
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7ff ffbf 	bl	80119a8 <crcAddByte>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	83fb      	strh	r3, [r7, #30]
        ++p;
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	3301      	adds	r3, #1
 8011a32:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	3301      	adds	r3, #1
 8011a38:	617b      	str	r3, [r7, #20]
 8011a3a:	697a      	ldr	r2, [r7, #20]
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d3ec      	bcc.n	8011a1c <crcAdd+0x34>
    }
    return out;
 8011a42:	8bfb      	ldrh	r3, [r7, #30]
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3720      	adds	r7, #32
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	080181b8 	.word	0x080181b8
 8011a50:	08018f68 	.word	0x08018f68
 8011a54:	080181e0 	.word	0x080181e0

08011a58 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	4603      	mov	r3, r0
 8011a60:	460a      	mov	r2, r1
 8011a62:	80fb      	strh	r3, [r7, #6]
 8011a64:	4613      	mov	r3, r2
 8011a66:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8011a68:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	da05      	bge.n	8011a7c <txMakeMessageSessionSpecifier+0x24>
 8011a70:	4b0e      	ldr	r3, [pc, #56]	@ (8011aac <txMakeMessageSessionSpecifier+0x54>)
 8011a72:	4a0f      	ldr	r2, [pc, #60]	@ (8011ab0 <txMakeMessageSessionSpecifier+0x58>)
 8011a74:	21ac      	movs	r1, #172	@ 0xac
 8011a76:	480f      	ldr	r0, [pc, #60]	@ (8011ab4 <txMakeMessageSessionSpecifier+0x5c>)
 8011a78:	f001 ff1c 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8011a7c:	88fb      	ldrh	r3, [r7, #6]
 8011a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a82:	d305      	bcc.n	8011a90 <txMakeMessageSessionSpecifier+0x38>
 8011a84:	4b0c      	ldr	r3, [pc, #48]	@ (8011ab8 <txMakeMessageSessionSpecifier+0x60>)
 8011a86:	4a0a      	ldr	r2, [pc, #40]	@ (8011ab0 <txMakeMessageSessionSpecifier+0x58>)
 8011a88:	21ad      	movs	r1, #173	@ 0xad
 8011a8a:	480a      	ldr	r0, [pc, #40]	@ (8011ab4 <txMakeMessageSessionSpecifier+0x5c>)
 8011a8c:	f001 ff12 	bl	80138b4 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8011a90:	88fb      	ldrh	r3, [r7, #6]
 8011a92:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8011a9a:	797a      	ldrb	r2, [r7, #5]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	021b      	lsls	r3, r3, #8
 8011aa0:	4313      	orrs	r3, r2
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	08018210 	.word	0x08018210
 8011ab0:	08018f70 	.word	0x08018f70
 8011ab4:	080181e0 	.word	0x080181e0
 8011ab8:	08018224 	.word	0x08018224

08011abc <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8011abc:	b590      	push	{r4, r7, lr}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4623      	mov	r3, r4
 8011acc:	80fb      	strh	r3, [r7, #6]
 8011ace:	4603      	mov	r3, r0
 8011ad0:	717b      	strb	r3, [r7, #5]
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	713b      	strb	r3, [r7, #4]
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8011ada:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	da05      	bge.n	8011aee <txMakeServiceSessionSpecifier+0x32>
 8011ae2:	4b17      	ldr	r3, [pc, #92]	@ (8011b40 <txMakeServiceSessionSpecifier+0x84>)
 8011ae4:	4a17      	ldr	r2, [pc, #92]	@ (8011b44 <txMakeServiceSessionSpecifier+0x88>)
 8011ae6:	21b7      	movs	r1, #183	@ 0xb7
 8011ae8:	4817      	ldr	r0, [pc, #92]	@ (8011b48 <txMakeServiceSessionSpecifier+0x8c>)
 8011aea:	f001 fee3 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8011aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	da05      	bge.n	8011b02 <txMakeServiceSessionSpecifier+0x46>
 8011af6:	4b15      	ldr	r3, [pc, #84]	@ (8011b4c <txMakeServiceSessionSpecifier+0x90>)
 8011af8:	4a12      	ldr	r2, [pc, #72]	@ (8011b44 <txMakeServiceSessionSpecifier+0x88>)
 8011afa:	21b8      	movs	r1, #184	@ 0xb8
 8011afc:	4812      	ldr	r0, [pc, #72]	@ (8011b48 <txMakeServiceSessionSpecifier+0x8c>)
 8011afe:	f001 fed9 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 8011b02:	88fb      	ldrh	r3, [r7, #6]
 8011b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b08:	d305      	bcc.n	8011b16 <txMakeServiceSessionSpecifier+0x5a>
 8011b0a:	4b11      	ldr	r3, [pc, #68]	@ (8011b50 <txMakeServiceSessionSpecifier+0x94>)
 8011b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8011b44 <txMakeServiceSessionSpecifier+0x88>)
 8011b0e:	21b9      	movs	r1, #185	@ 0xb9
 8011b10:	480d      	ldr	r0, [pc, #52]	@ (8011b48 <txMakeServiceSessionSpecifier+0x8c>)
 8011b12:	f001 fecf 	bl	80138b4 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8011b16:	793a      	ldrb	r2, [r7, #4]
 8011b18:	78fb      	ldrb	r3, [r7, #3]
 8011b1a:	01db      	lsls	r3, r3, #7
 8011b1c:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8011b1e:	88fb      	ldrh	r3, [r7, #6]
 8011b20:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8011b22:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8011b24:	797a      	ldrb	r2, [r7, #5]
 8011b26:	2a00      	cmp	r2, #0
 8011b28:	d002      	beq.n	8011b30 <txMakeServiceSessionSpecifier+0x74>
 8011b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011b2e:	e000      	b.n	8011b32 <txMakeServiceSessionSpecifier+0x76>
 8011b30:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8011b32:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8011b34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	370c      	adds	r7, #12
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd90      	pop	{r4, r7, pc}
 8011b40:	08018210 	.word	0x08018210
 8011b44:	08018f90 	.word	0x08018f90
 8011b48:	080181e0 	.word	0x080181e0
 8011b4c:	08018238 	.word	0x08018238
 8011b50:	0801824c 	.word	0x0801824c

08011b54 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b085      	sub	sp, #20
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8011b5c:	2340      	movs	r3, #64	@ 0x40
 8011b5e:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8011b60:	2300      	movs	r3, #0
 8011b62:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2b07      	cmp	r3, #7
 8011b68:	d802      	bhi.n	8011b70 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8011b6a:	2308      	movs	r3, #8
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	e014      	b.n	8011b9a <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8011b70:	687a      	ldr	r2, [r7, #4]
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d808      	bhi.n	8011b8a <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8011b78:	4a0c      	ldr	r2, [pc, #48]	@ (8011bac <adjustPresentationLayerMTU+0x58>)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	4413      	add	r3, r2
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb0 <adjustPresentationLayerMTU+0x5c>)
 8011b84:	5c9b      	ldrb	r3, [r3, r2]
 8011b86:	60fb      	str	r3, [r7, #12]
 8011b88:	e007      	b.n	8011b9a <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8011b8a:	4a08      	ldr	r2, [pc, #32]	@ (8011bac <adjustPresentationLayerMTU+0x58>)
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	4413      	add	r3, r2
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	461a      	mov	r2, r3
 8011b94:	4b06      	ldr	r3, [pc, #24]	@ (8011bb0 <adjustPresentationLayerMTU+0x5c>)
 8011b96:	5c9b      	ldrb	r3, [r3, r2]
 8011b98:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	3b01      	subs	r3, #1
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3714      	adds	r7, #20
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	08018efc 	.word	0x08018efc
 8011bb0:	08018eec 	.word	0x08018eec

08011bb4 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b08a      	sub	sp, #40	@ 0x28
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	607a      	str	r2, [r7, #4]
 8011bc0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d105      	bne.n	8011bd4 <txMakeCANID+0x20>
 8011bc8:	4b60      	ldr	r3, [pc, #384]	@ (8011d4c <txMakeCANID+0x198>)
 8011bca:	4a61      	ldr	r2, [pc, #388]	@ (8011d50 <txMakeCANID+0x19c>)
 8011bcc:	21d9      	movs	r1, #217	@ 0xd9
 8011bce:	4861      	ldr	r0, [pc, #388]	@ (8011d54 <txMakeCANID+0x1a0>)
 8011bd0:	f001 fe70 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8011bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d105      	bne.n	8011be6 <txMakeCANID+0x32>
 8011bda:	4b5f      	ldr	r3, [pc, #380]	@ (8011d58 <txMakeCANID+0x1a4>)
 8011bdc:	4a5c      	ldr	r2, [pc, #368]	@ (8011d50 <txMakeCANID+0x19c>)
 8011bde:	21da      	movs	r1, #218	@ 0xda
 8011be0:	485c      	ldr	r0, [pc, #368]	@ (8011d54 <txMakeCANID+0x1a0>)
 8011be2:	f001 fe67 	bl	80138b4 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011be6:	f06f 0301 	mvn.w	r3, #1
 8011bea:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	785b      	ldrb	r3, [r3, #1]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d157      	bne.n	8011ca4 <txMakeCANID+0xf0>
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	791b      	ldrb	r3, [r3, #4]
 8011bf8:	2bff      	cmp	r3, #255	@ 0xff
 8011bfa:	d153      	bne.n	8011ca4 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8011c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011c04:	d24e      	bcs.n	8011ca4 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	db11      	blt.n	8011c32 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	885b      	ldrh	r3, [r3, #2]
 8011c12:	78fa      	ldrb	r2, [r7, #3]
 8011c14:	4611      	mov	r1, r2
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7ff ff1e 	bl	8011a58 <txMakeMessageSessionSpecifier>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8011c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	da75      	bge.n	8011d12 <txMakeCANID+0x15e>
 8011c26:	4b4d      	ldr	r3, [pc, #308]	@ (8011d5c <txMakeCANID+0x1a8>)
 8011c28:	4a49      	ldr	r2, [pc, #292]	@ (8011d50 <txMakeCANID+0x19c>)
 8011c2a:	21e2      	movs	r1, #226	@ 0xe2
 8011c2c:	4849      	ldr	r0, [pc, #292]	@ (8011d54 <txMakeCANID+0x1a0>)
 8011c2e:	f001 fe41 	bl	80138b4 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d830      	bhi.n	8011c9c <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d108      	bne.n	8011c52 <txMakeCANID+0x9e>
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d005      	beq.n	8011c52 <txMakeCANID+0x9e>
 8011c46:	4b46      	ldr	r3, [pc, #280]	@ (8011d60 <txMakeCANID+0x1ac>)
 8011c48:	4a41      	ldr	r2, [pc, #260]	@ (8011d50 <txMakeCANID+0x19c>)
 8011c4a:	21e6      	movs	r1, #230	@ 0xe6
 8011c4c:	4841      	ldr	r0, [pc, #260]	@ (8011d54 <txMakeCANID+0x1a0>)
 8011c4e:	f001 fe31 	bl	80138b4 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	68b9      	ldr	r1, [r7, #8]
 8011c56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011c5a:	f7ff fec5 	bl	80119e8 <crcAdd>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	885b      	ldrh	r3, [r3, #2]
 8011c6e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8011c72:	4611      	mov	r1, r2
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff feef 	bl	8011a58 <txMakeMessageSessionSpecifier>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011c80:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011c88:	d305      	bcc.n	8011c96 <txMakeCANID+0xe2>
 8011c8a:	4b36      	ldr	r3, [pc, #216]	@ (8011d64 <txMakeCANID+0x1b0>)
 8011c8c:	4a30      	ldr	r2, [pc, #192]	@ (8011d50 <txMakeCANID+0x19c>)
 8011c8e:	21e9      	movs	r1, #233	@ 0xe9
 8011c90:	4830      	ldr	r0, [pc, #192]	@ (8011d54 <txMakeCANID+0x1a0>)
 8011c92:	f001 fe0f 	bl	80138b4 <__assert_func>
            out = (int32_t) spec;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011c9a:	e03a      	b.n	8011d12 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8011c9c:	f06f 0301 	mvn.w	r3, #1
 8011ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011ca2:	e036      	b.n	8011d12 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	785b      	ldrb	r3, [r3, #1]
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	d003      	beq.n	8011cb4 <txMakeCANID+0x100>
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	785b      	ldrb	r3, [r3, #1]
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d12a      	bne.n	8011d0a <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	791b      	ldrb	r3, [r3, #4]
 8011cb8:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	db25      	blt.n	8011d0a <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	885b      	ldrh	r3, [r3, #2]
 8011cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cc6:	d220      	bcs.n	8011d0a <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	db18      	blt.n	8011d02 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	bf0c      	ite	eq
 8011cdc:	2301      	moveq	r3, #1
 8011cde:	2300      	movne	r3, #0
 8011ce0:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011ce6:	78fa      	ldrb	r2, [r7, #3]
 8011ce8:	f7ff fee8 	bl	8011abc <txMakeServiceSessionSpecifier>
 8011cec:	4603      	mov	r3, r0
 8011cee:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	da0f      	bge.n	8011d16 <txMakeCANID+0x162>
 8011cf6:	4b19      	ldr	r3, [pc, #100]	@ (8011d5c <txMakeCANID+0x1a8>)
 8011cf8:	4a15      	ldr	r2, [pc, #84]	@ (8011d50 <txMakeCANID+0x19c>)
 8011cfa:	21fa      	movs	r1, #250	@ 0xfa
 8011cfc:	4815      	ldr	r0, [pc, #84]	@ (8011d54 <txMakeCANID+0x1a0>)
 8011cfe:	f001 fdd9 	bl	80138b4 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 8011d02:	f06f 0301 	mvn.w	r3, #1
 8011d06:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011d08:	e005      	b.n	8011d16 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011d0a:	f06f 0301 	mvn.w	r3, #1
 8011d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d10:	e002      	b.n	8011d18 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011d12:	bf00      	nop
 8011d14:	e000      	b.n	8011d18 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011d16:	bf00      	nop
    }

    if (out >= 0)
 8011d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	db10      	blt.n	8011d40 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	2b07      	cmp	r3, #7
 8011d28:	d807      	bhi.n	8011d3a <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	069a      	lsls	r2, r3, #26
 8011d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d30:	4313      	orrs	r3, r2
 8011d32:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d38:	e002      	b.n	8011d40 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011d3a:	f06f 0301 	mvn.w	r3, #1
 8011d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8011d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3728      	adds	r7, #40	@ 0x28
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	08018260 	.word	0x08018260
 8011d50:	08018f5c 	.word	0x08018f5c
 8011d54:	080181e0 	.word	0x080181e0
 8011d58:	08018274 	.word	0x08018274
 8011d5c:	08018290 	.word	0x08018290
 8011d60:	0801829c 	.word	0x0801829c
 8011d64:	080182d0 	.word	0x080182d0

08011d68 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8011d68:	b590      	push	{r4, r7, lr}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	4604      	mov	r4, r0
 8011d70:	4608      	mov	r0, r1
 8011d72:	4611      	mov	r1, r2
 8011d74:	461a      	mov	r2, r3
 8011d76:	4623      	mov	r3, r4
 8011d78:	71fb      	strb	r3, [r7, #7]
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	71bb      	strb	r3, [r7, #6]
 8011d7e:	460b      	mov	r3, r1
 8011d80:	717b      	strb	r3, [r7, #5]
 8011d82:	4613      	mov	r3, r2
 8011d84:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8011d86:	79fb      	ldrb	r3, [r7, #7]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d009      	beq.n	8011da0 <txMakeTailByte+0x38>
 8011d8c:	797b      	ldrb	r3, [r7, #5]
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d006      	beq.n	8011da0 <txMakeTailByte+0x38>
 8011d92:	4b13      	ldr	r3, [pc, #76]	@ (8011de0 <txMakeTailByte+0x78>)
 8011d94:	4a13      	ldr	r2, [pc, #76]	@ (8011de4 <txMakeTailByte+0x7c>)
 8011d96:	f240 111b 	movw	r1, #283	@ 0x11b
 8011d9a:	4813      	ldr	r0, [pc, #76]	@ (8011de8 <txMakeTailByte+0x80>)
 8011d9c:	f001 fd8a 	bl	80138b4 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8011da0:	79fb      	ldrb	r3, [r7, #7]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d001      	beq.n	8011daa <txMakeTailByte+0x42>
 8011da6:	2280      	movs	r2, #128	@ 0x80
 8011da8:	e000      	b.n	8011dac <txMakeTailByte+0x44>
 8011daa:	2200      	movs	r2, #0
 8011dac:	79bb      	ldrb	r3, [r7, #6]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <txMakeTailByte+0x4e>
 8011db2:	2340      	movs	r3, #64	@ 0x40
 8011db4:	e000      	b.n	8011db8 <txMakeTailByte+0x50>
 8011db6:	2300      	movs	r3, #0
 8011db8:	4313      	orrs	r3, r2
 8011dba:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8011dbc:	797a      	ldrb	r2, [r7, #5]
 8011dbe:	2a00      	cmp	r2, #0
 8011dc0:	d001      	beq.n	8011dc6 <txMakeTailByte+0x5e>
 8011dc2:	2220      	movs	r2, #32
 8011dc4:	e000      	b.n	8011dc8 <txMakeTailByte+0x60>
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8011dcc:	793b      	ldrb	r3, [r7, #4]
 8011dce:	f003 031f 	and.w	r3, r3, #31
 8011dd2:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	b2db      	uxtb	r3, r3
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	370c      	adds	r7, #12
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd90      	pop	{r4, r7, pc}
 8011de0:	080182ec 	.word	0x080182ec
 8011de4:	08019004 	.word	0x08019004
 8011de8:	080181e0 	.word	0x080181e0

08011dec <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b40      	cmp	r3, #64	@ 0x40
 8011df8:	d906      	bls.n	8011e08 <txRoundFramePayloadSizeUp+0x1c>
 8011dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011e38 <txRoundFramePayloadSizeUp+0x4c>)
 8011dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8011e3c <txRoundFramePayloadSizeUp+0x50>)
 8011dfe:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8011e02:	480f      	ldr	r0, [pc, #60]	@ (8011e40 <txRoundFramePayloadSizeUp+0x54>)
 8011e04:	f001 fd56 	bl	80138b4 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8011e08:	4a0e      	ldr	r2, [pc, #56]	@ (8011e44 <txRoundFramePayloadSizeUp+0x58>)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b0f      	cmp	r3, #15
 8011e16:	d906      	bls.n	8011e26 <txRoundFramePayloadSizeUp+0x3a>
 8011e18:	4b0b      	ldr	r3, [pc, #44]	@ (8011e48 <txRoundFramePayloadSizeUp+0x5c>)
 8011e1a:	4a08      	ldr	r2, [pc, #32]	@ (8011e3c <txRoundFramePayloadSizeUp+0x50>)
 8011e1c:	f240 1127 	movw	r1, #295	@ 0x127
 8011e20:	4807      	ldr	r0, [pc, #28]	@ (8011e40 <txRoundFramePayloadSizeUp+0x54>)
 8011e22:	f001 fd47 	bl	80138b4 <__assert_func>
    return CanardCANDLCToLength[y];
 8011e26:	4a09      	ldr	r2, [pc, #36]	@ (8011e4c <txRoundFramePayloadSizeUp+0x60>)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	781b      	ldrb	r3, [r3, #0]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	08018314 	.word	0x08018314
 8011e3c:	08018fd4 	.word	0x08018fd4
 8011e40:	080181e0 	.word	0x080181e0
 8011e44:	08018efc 	.word	0x08018efc
 8011e48:	0801835c 	.word	0x0801835c
 8011e4c:	08018eec 	.word	0x08018eec

08011e50 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d106      	bne.n	8011e72 <txAllocateQueueItem+0x22>
 8011e64:	4b1f      	ldr	r3, [pc, #124]	@ (8011ee4 <txAllocateQueueItem+0x94>)
 8011e66:	4a20      	ldr	r2, [pc, #128]	@ (8011ee8 <txAllocateQueueItem+0x98>)
 8011e68:	f240 1131 	movw	r1, #305	@ 0x131
 8011e6c:	481f      	ldr	r0, [pc, #124]	@ (8011eec <txAllocateQueueItem+0x9c>)
 8011e6e:	f001 fd21 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d106      	bne.n	8011e86 <txAllocateQueueItem+0x36>
 8011e78:	4b1d      	ldr	r3, [pc, #116]	@ (8011ef0 <txAllocateQueueItem+0xa0>)
 8011e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8011ee8 <txAllocateQueueItem+0x98>)
 8011e7c:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8011e80:	481a      	ldr	r0, [pc, #104]	@ (8011eec <txAllocateQueueItem+0x9c>)
 8011e82:	f001 fd17 	bl	80138b4 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	6a3a      	ldr	r2, [r7, #32]
 8011e8c:	3230      	adds	r2, #48	@ 0x30
 8011e8e:	4611      	mov	r1, r2
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	4798      	blx	r3
 8011e94:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d01e      	beq.n	8011eda <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8011eba:	6979      	ldr	r1, [r7, #20]
 8011ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ec0:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	6a3a      	ldr	r2, [r7, #32]
 8011ec8:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	68ba      	ldr	r2, [r7, #8]
 8011ed8:	621a      	str	r2, [r3, #32]
    }
    return out;
 8011eda:	697b      	ldr	r3, [r7, #20]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3718      	adds	r7, #24
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	080183a4 	.word	0x080183a4
 8011ee8:	08018ff0 	.word	0x08018ff0
 8011eec:	080181e0 	.word	0x080181e0
 8011ef0:	080183b8 	.word	0x080183b8

08011ef4 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <txAVLPredicate+0x1e>
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d106      	bne.n	8011f20 <txAVLPredicate+0x2c>
 8011f12:	4b0a      	ldr	r3, [pc, #40]	@ (8011f3c <txAVLPredicate+0x48>)
 8011f14:	4a0a      	ldr	r2, [pc, #40]	@ (8011f40 <txAVLPredicate+0x4c>)
 8011f16:	f240 114d 	movw	r1, #333	@ 0x14d
 8011f1a:	480a      	ldr	r0, [pc, #40]	@ (8011f44 <txAVLPredicate+0x50>)
 8011f1c:	f001 fcca 	bl	80138b4 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6a1a      	ldr	r2, [r3, #32]
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	6a1b      	ldr	r3, [r3, #32]
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d301      	bcc.n	8011f30 <txAVLPredicate+0x3c>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	e001      	b.n	8011f34 <txAVLPredicate+0x40>
 8011f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3710      	adds	r7, #16
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	080183cc 	.word	0x080183cc
 8011f40:	08018fc4 	.word	0x08018fc4
 8011f44:	080181e0 	.word	0x080181e0

08011f48 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8011f48:	b590      	push	{r4, r7, lr}
 8011f4a:	b08d      	sub	sp, #52	@ 0x34
 8011f4c:	af02      	add	r7, sp, #8
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d106      	bne.n	8011f6a <txPushSingleFrame+0x22>
 8011f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80120d0 <txPushSingleFrame+0x188>)
 8011f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80120d4 <txPushSingleFrame+0x18c>)
 8011f60:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8011f64:	485c      	ldr	r0, [pc, #368]	@ (80120d8 <txPushSingleFrame+0x190>)
 8011f66:	f001 fca5 	bl	80138b4 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8011f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d109      	bne.n	8011f84 <txPushSingleFrame+0x3c>
 8011f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d006      	beq.n	8011f84 <txPushSingleFrame+0x3c>
 8011f76:	4b59      	ldr	r3, [pc, #356]	@ (80120dc <txPushSingleFrame+0x194>)
 8011f78:	4a56      	ldr	r2, [pc, #344]	@ (80120d4 <txPushSingleFrame+0x18c>)
 8011f7a:	f240 115b 	movw	r1, #347	@ 0x15b
 8011f7e:	4856      	ldr	r0, [pc, #344]	@ (80120d8 <txPushSingleFrame+0x190>)
 8011f80:	f001 fc98 	bl	80138b4 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8011f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f86:	3301      	adds	r3, #1
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff ff2f 	bl	8011dec <txRoundFramePayloadSizeUp>
 8011f8e:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8011f90:	6a3a      	ldr	r2, [r7, #32]
 8011f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d806      	bhi.n	8011fa6 <txPushSingleFrame+0x5e>
 8011f98:	4b51      	ldr	r3, [pc, #324]	@ (80120e0 <txPushSingleFrame+0x198>)
 8011f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80120d4 <txPushSingleFrame+0x18c>)
 8011f9c:	f240 115d 	movw	r1, #349	@ 0x15d
 8011fa0:	484d      	ldr	r0, [pc, #308]	@ (80120d8 <txPushSingleFrame+0x190>)
 8011fa2:	f001 fc87 	bl	80138b4 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8011fa6:	6a3a      	ldr	r2, [r7, #32]
 8011fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011faa:	1ad3      	subs	r3, r2, r3
 8011fac:	3b01      	subs	r3, #1
 8011fae:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8011fb0:	69fa      	ldr	r2, [r7, #28]
 8011fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fb4:	4413      	add	r3, r2
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	6a3a      	ldr	r2, [r7, #32]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d006      	beq.n	8011fcc <txPushSingleFrame+0x84>
 8011fbe:	4b49      	ldr	r3, [pc, #292]	@ (80120e4 <txPushSingleFrame+0x19c>)
 8011fc0:	4a44      	ldr	r2, [pc, #272]	@ (80120d4 <txPushSingleFrame+0x18c>)
 8011fc2:	f240 115f 	movw	r1, #351	@ 0x15f
 8011fc6:	4844      	ldr	r0, [pc, #272]	@ (80120d8 <txPushSingleFrame+0x190>)
 8011fc8:	f001 fc74 	bl	80138b4 <__assert_func>
    int32_t       out = 0;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	689a      	ldr	r2, [r3, #8]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d209      	bcs.n	8011ff0 <txPushSingleFrame+0xa8>
 8011fdc:	6a3b      	ldr	r3, [r7, #32]
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fe4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011fe6:	68b8      	ldr	r0, [r7, #8]
 8011fe8:	f7ff ff32 	bl	8011e50 <txAllocateQueueItem>
 8011fec:	4603      	mov	r3, r0
 8011fee:	e000      	b.n	8011ff2 <txPushSingleFrame+0xaa>
 8011ff0:	2300      	movs	r3, #0
    TxItem* const tqi =
 8011ff2:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 8011ff4:	69bb      	ldr	r3, [r7, #24]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d054      	beq.n	80120a4 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8011ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d010      	beq.n	8012022 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8012000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012002:	2b00      	cmp	r3, #0
 8012004:	d106      	bne.n	8012014 <txPushSingleFrame+0xcc>
 8012006:	4b38      	ldr	r3, [pc, #224]	@ (80120e8 <txPushSingleFrame+0x1a0>)
 8012008:	4a32      	ldr	r2, [pc, #200]	@ (80120d4 <txPushSingleFrame+0x18c>)
 801200a:	f240 1167 	movw	r1, #359	@ 0x167
 801200e:	4832      	ldr	r0, [pc, #200]	@ (80120d8 <txPushSingleFrame+0x190>)
 8012010:	f001 fc50 	bl	80138b4 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 8012014:	69bb      	ldr	r3, [r7, #24]
 8012016:	3330      	adds	r3, #48	@ 0x30
 8012018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801201a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801201c:	4618      	mov	r0, r3
 801201e:	f002 fdea 	bl	8014bf6 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 8012022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012024:	3330      	adds	r3, #48	@ 0x30
 8012026:	69ba      	ldr	r2, [r7, #24]
 8012028:	4413      	add	r3, r2
 801202a:	69fa      	ldr	r2, [r7, #28]
 801202c:	2100      	movs	r1, #0
 801202e:	4618      	mov	r0, r3
 8012030:	f002 fcfb 	bl	8014a2a <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 8012034:	6a3b      	ldr	r3, [r7, #32]
 8012036:	1e5c      	subs	r4, r3, #1
 8012038:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801203c:	2201      	movs	r2, #1
 801203e:	2101      	movs	r1, #1
 8012040:	2001      	movs	r0, #1
 8012042:	f7ff fe91 	bl	8011d68 <txMakeTailByte>
 8012046:	4603      	mov	r3, r0
 8012048:	461a      	mov	r2, r3
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	4423      	add	r3, r4
 801204e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	f103 000c 	add.w	r0, r3, #12
 8012058:	69b9      	ldr	r1, [r7, #24]
 801205a:	4b24      	ldr	r3, [pc, #144]	@ (80120ec <txPushSingleFrame+0x1a4>)
 801205c:	4a24      	ldr	r2, [pc, #144]	@ (80120f0 <txPushSingleFrame+0x1a8>)
 801205e:	f7ff fae7 	bl	8011630 <cavlSearch>
 8012062:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	697a      	ldr	r2, [r7, #20]
 8012068:	429a      	cmp	r2, r3
 801206a:	d006      	beq.n	801207a <txPushSingleFrame+0x132>
 801206c:	4b21      	ldr	r3, [pc, #132]	@ (80120f4 <txPushSingleFrame+0x1ac>)
 801206e:	4a19      	ldr	r2, [pc, #100]	@ (80120d4 <txPushSingleFrame+0x18c>)
 8012070:	f240 1173 	movw	r1, #371	@ 0x173
 8012074:	4818      	ldr	r0, [pc, #96]	@ (80120d8 <txPushSingleFrame+0x190>)
 8012076:	f001 fc1d 	bl	80138b4 <__assert_func>
        que->size++;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	1c5a      	adds	r2, r3, #1
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	689a      	ldr	r2, [r3, #8]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	429a      	cmp	r2, r3
 801208e:	d906      	bls.n	801209e <txPushSingleFrame+0x156>
 8012090:	4b19      	ldr	r3, [pc, #100]	@ (80120f8 <txPushSingleFrame+0x1b0>)
 8012092:	4a10      	ldr	r2, [pc, #64]	@ (80120d4 <txPushSingleFrame+0x18c>)
 8012094:	f240 1175 	movw	r1, #373	@ 0x175
 8012098:	480f      	ldr	r0, [pc, #60]	@ (80120d8 <txPushSingleFrame+0x190>)
 801209a:	f001 fc0b 	bl	80138b4 <__assert_func>
        out = 1;  // One frame enqueued.
 801209e:	2301      	movs	r3, #1
 80120a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80120a2:	e002      	b.n	80120aa <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80120a4:	f06f 0302 	mvn.w	r3, #2
 80120a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 80120aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	db09      	blt.n	80120c4 <txPushSingleFrame+0x17c>
 80120b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d006      	beq.n	80120c4 <txPushSingleFrame+0x17c>
 80120b6:	4b11      	ldr	r3, [pc, #68]	@ (80120fc <txPushSingleFrame+0x1b4>)
 80120b8:	4a06      	ldr	r2, [pc, #24]	@ (80120d4 <txPushSingleFrame+0x18c>)
 80120ba:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80120be:	4806      	ldr	r0, [pc, #24]	@ (80120d8 <txPushSingleFrame+0x190>)
 80120c0:	f001 fbf8 	bl	80138b4 <__assert_func>
    return out;
 80120c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	372c      	adds	r7, #44	@ 0x2c
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd90      	pop	{r4, r7, pc}
 80120ce:	bf00      	nop
 80120d0:	080183a4 	.word	0x080183a4
 80120d4:	08018fb0 	.word	0x08018fb0
 80120d8:	080181e0 	.word	0x080181e0
 80120dc:	08018400 	.word	0x08018400
 80120e0:	08018430 	.word	0x08018430
 80120e4:	08018454 	.word	0x08018454
 80120e8:	08018490 	.word	0x08018490
 80120ec:	08011991 	.word	0x08011991
 80120f0:	08011ef5 	.word	0x08011ef5
 80120f4:	080184a8 	.word	0x080184a8
 80120f8:	080184c0 	.word	0x080184c0
 80120fc:	080184dc 	.word	0x080184dc

08012100 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8012100:	b590      	push	{r4, r7, lr}
 8012102:	b093      	sub	sp, #76	@ 0x4c
 8012104:	af02      	add	r7, sp, #8
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <txGenerateMultiFrameChain+0x20>
 8012112:	4b93      	ldr	r3, [pc, #588]	@ (8012360 <txGenerateMultiFrameChain+0x260>)
 8012114:	4a93      	ldr	r2, [pc, #588]	@ (8012364 <txGenerateMultiFrameChain+0x264>)
 8012116:	f240 1189 	movw	r1, #393	@ 0x189
 801211a:	4893      	ldr	r0, [pc, #588]	@ (8012368 <txGenerateMultiFrameChain+0x268>)
 801211c:	f001 fbca 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d106      	bne.n	8012134 <txGenerateMultiFrameChain+0x34>
 8012126:	4b91      	ldr	r3, [pc, #580]	@ (801236c <txGenerateMultiFrameChain+0x26c>)
 8012128:	4a8e      	ldr	r2, [pc, #568]	@ (8012364 <txGenerateMultiFrameChain+0x264>)
 801212a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 801212e:	488e      	ldr	r0, [pc, #568]	@ (8012368 <txGenerateMultiFrameChain+0x268>)
 8012130:	f001 fbc0 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8012134:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	429a      	cmp	r2, r3
 801213a:	d806      	bhi.n	801214a <txGenerateMultiFrameChain+0x4a>
 801213c:	4b8c      	ldr	r3, [pc, #560]	@ (8012370 <txGenerateMultiFrameChain+0x270>)
 801213e:	4a89      	ldr	r2, [pc, #548]	@ (8012364 <txGenerateMultiFrameChain+0x264>)
 8012140:	f240 118b 	movw	r1, #395	@ 0x18b
 8012144:	4888      	ldr	r0, [pc, #544]	@ (8012368 <txGenerateMultiFrameChain+0x268>)
 8012146:	f001 fbb5 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 801214a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801214c:	2b00      	cmp	r3, #0
 801214e:	d106      	bne.n	801215e <txGenerateMultiFrameChain+0x5e>
 8012150:	4b88      	ldr	r3, [pc, #544]	@ (8012374 <txGenerateMultiFrameChain+0x274>)
 8012152:	4a84      	ldr	r2, [pc, #528]	@ (8012364 <txGenerateMultiFrameChain+0x264>)
 8012154:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8012158:	4883      	ldr	r0, [pc, #524]	@ (8012368 <txGenerateMultiFrameChain+0x268>)
 801215a:	f001 fbab 	bl	80138b4 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 801215e:	2300      	movs	r3, #0
 8012160:	613b      	str	r3, [r7, #16]
 8012162:	2300      	movs	r3, #0
 8012164:	617b      	str	r3, [r7, #20]
 8012166:	2300      	movs	r3, #0
 8012168:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 801216a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801216c:	3302      	adds	r3, #2
 801216e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8012170:	2300      	movs	r3, #0
 8012172:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8012174:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012176:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012178:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801217c:	f7ff fc34 	bl	80119e8 <crcAdd>
 8012180:	4603      	mov	r3, r0
 8012182:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8012184:	2301      	movs	r3, #1
 8012186:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 801218a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801218c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 801218e:	e0d4      	b.n	801233a <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	3301      	adds	r3, #1
 8012194:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8012196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801219a:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d908      	bls.n	80121b4 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 80121a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	3301      	adds	r3, #1
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7ff fe1e 	bl	8011dec <txRoundFramePayloadSizeUp>
 80121b0:	4603      	mov	r3, r0
 80121b2:	e001      	b.n	80121b8 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 80121b8:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 80121ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80121c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80121c4:	68b8      	ldr	r0, [r7, #8]
 80121c6:	f7ff fe43 	bl	8011e50 <txAllocateQueueItem>
 80121ca:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d102      	bne.n	80121d8 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 80121d2:	6a3b      	ldr	r3, [r7, #32]
 80121d4:	613b      	str	r3, [r7, #16]
 80121d6:	e002      	b.n	80121de <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	6a3a      	ldr	r2, [r7, #32]
 80121dc:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 80121de:	6a3b      	ldr	r3, [r7, #32]
 80121e0:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f000 80ae 	beq.w	8012346 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 80121ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ec:	3b01      	subs	r3, #1
 80121ee:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 80121f0:	2300      	movs	r3, #0
 80121f2:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 80121f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80121f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d21c      	bcs.n	8012236 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 80121fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80121fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012200:	1ad3      	subs	r3, r2, r3
 8012202:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 8012204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	429a      	cmp	r2, r3
 801220a:	d901      	bls.n	8012210 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	3330      	adds	r3, #48	@ 0x30
 8012214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012216:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012218:	4618      	mov	r0, r3
 801221a:	f002 fcec 	bl	8014bf6 <memcpy>
            frame_offset = frame_offset + move_size;
 801221e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012222:	4413      	add	r3, r2
 8012224:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 8012226:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222a:	4413      	add	r3, r2
 801222c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 801222e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012232:	4413      	add	r3, r2
 8012234:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8012236:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801223a:	429a      	cmp	r2, r3
 801223c:	d343      	bcc.n	80122c6 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 801223e:	e00f      	b.n	8012260 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8012240:	697a      	ldr	r2, [r7, #20]
 8012242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012244:	4413      	add	r3, r2
 8012246:	3330      	adds	r3, #48	@ 0x30
 8012248:	2200      	movs	r2, #0
 801224a:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 801224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224e:	3301      	adds	r3, #1
 8012250:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8012252:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012254:	2100      	movs	r1, #0
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff fba6 	bl	80119a8 <crcAddByte>
 801225c:	4603      	mov	r3, r0
 801225e:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8012260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012262:	3302      	adds	r3, #2
 8012264:	69fa      	ldr	r2, [r7, #28]
 8012266:	429a      	cmp	r2, r3
 8012268:	d8ea      	bhi.n	8012240 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 801226a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	429a      	cmp	r2, r3
 8012270:	d213      	bcs.n	801229a <txGenerateMultiFrameChain+0x19a>
 8012272:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012276:	429a      	cmp	r2, r3
 8012278:	d10f      	bne.n	801229a <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 801227a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801227c:	0a1b      	lsrs	r3, r3, #8
 801227e:	b29b      	uxth	r3, r3
 8012280:	697a      	ldr	r2, [r7, #20]
 8012282:	b2d9      	uxtb	r1, r3
 8012284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012286:	4413      	add	r3, r2
 8012288:	3330      	adds	r3, #48	@ 0x30
 801228a:	460a      	mov	r2, r1
 801228c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 801228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012290:	3301      	adds	r3, #1
 8012292:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8012294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012296:	3301      	adds	r3, #1
 8012298:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 801229a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d211      	bcs.n	80122c6 <txGenerateMultiFrameChain+0x1c6>
 80122a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d90d      	bls.n	80122c6 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 80122aa:	697a      	ldr	r2, [r7, #20]
 80122ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80122ae:	b2d9      	uxtb	r1, r3
 80122b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b2:	4413      	add	r3, r2
 80122b4:	3330      	adds	r3, #48	@ 0x30
 80122b6:	460a      	mov	r2, r1
 80122b8:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80122ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122bc:	3301      	adds	r3, #1
 80122be:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 80122c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122c2:	3301      	adds	r3, #1
 80122c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 80122c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c8:	1c5a      	adds	r2, r3, #1
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d006      	beq.n	80122e0 <txGenerateMultiFrameChain+0x1e0>
 80122d2:	4b29      	ldr	r3, [pc, #164]	@ (8012378 <txGenerateMultiFrameChain+0x278>)
 80122d4:	4a23      	ldr	r2, [pc, #140]	@ (8012364 <txGenerateMultiFrameChain+0x264>)
 80122d6:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80122da:	4823      	ldr	r0, [pc, #140]	@ (8012368 <txGenerateMultiFrameChain+0x268>)
 80122dc:	f001 faea 	bl	80138b4 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80122e0:	693a      	ldr	r2, [r7, #16]
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	bf0c      	ite	eq
 80122e8:	2301      	moveq	r3, #1
 80122ea:	2300      	movne	r3, #0
 80122ec:	b2d8      	uxtb	r0, r3
 80122ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f2:	429a      	cmp	r2, r3
 80122f4:	bf2c      	ite	cs
 80122f6:	2301      	movcs	r3, #1
 80122f8:	2300      	movcc	r3, #0
 80122fa:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80122fc:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80122fe:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8012302:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8012306:	f7ff fd2f 	bl	8011d68 <txMakeTailByte>
 801230a:	4603      	mov	r3, r0
 801230c:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 801230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012310:	4423      	add	r3, r4
 8012312:	3330      	adds	r3, #48	@ 0x30
 8012314:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8012316:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801231a:	2b00      	cmp	r3, #0
 801231c:	bf14      	ite	ne
 801231e:	2301      	movne	r3, #1
 8012320:	2300      	moveq	r3, #0
 8012322:	b2db      	uxtb	r3, r3
 8012324:	f083 0301 	eor.w	r3, r3, #1
 8012328:	b2db      	uxtb	r3, r3
 801232a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 801232e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 801233a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801233e:	429a      	cmp	r2, r3
 8012340:	f4ff af26 	bcc.w	8012190 <txGenerateMultiFrameChain+0x90>
 8012344:	e000      	b.n	8012348 <txGenerateMultiFrameChain+0x248>
            break;
 8012346:	bf00      	nop
    }
    return out;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	461c      	mov	r4, r3
 801234c:	f107 0310 	add.w	r3, r7, #16
 8012350:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	3744      	adds	r7, #68	@ 0x44
 801235c:	46bd      	mov	sp, r7
 801235e:	bd90      	pop	{r4, r7, pc}
 8012360:	080183a4 	.word	0x080183a4
 8012364:	08019080 	.word	0x08019080
 8012368:	080181e0 	.word	0x080181e0
 801236c:	080184f4 	.word	0x080184f4
 8012370:	08018510 	.word	0x08018510
 8012374:	08018490 	.word	0x08018490
 8012378:	08018538 	.word	0x08018538

0801237c <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b094      	sub	sp, #80	@ 0x50
 8012380:	af06      	add	r7, sp, #24
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d002      	beq.n	8012394 <txPushMultiFrame+0x18>
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d106      	bne.n	80123a2 <txPushMultiFrame+0x26>
 8012394:	4b65      	ldr	r3, [pc, #404]	@ (801252c <txPushMultiFrame+0x1b0>)
 8012396:	4a66      	ldr	r2, [pc, #408]	@ (8012530 <txPushMultiFrame+0x1b4>)
 8012398:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 801239c:	4865      	ldr	r0, [pc, #404]	@ (8012534 <txPushMultiFrame+0x1b8>)
 801239e:	f001 fa89 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d106      	bne.n	80123b6 <txPushMultiFrame+0x3a>
 80123a8:	4b63      	ldr	r3, [pc, #396]	@ (8012538 <txPushMultiFrame+0x1bc>)
 80123aa:	4a61      	ldr	r2, [pc, #388]	@ (8012530 <txPushMultiFrame+0x1b4>)
 80123ac:	f240 11ed 	movw	r1, #493	@ 0x1ed
 80123b0:	4860      	ldr	r0, [pc, #384]	@ (8012534 <txPushMultiFrame+0x1b8>)
 80123b2:	f001 fa7f 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80123b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d806      	bhi.n	80123cc <txPushMultiFrame+0x50>
 80123be:	4b5f      	ldr	r3, [pc, #380]	@ (801253c <txPushMultiFrame+0x1c0>)
 80123c0:	4a5b      	ldr	r2, [pc, #364]	@ (8012530 <txPushMultiFrame+0x1b4>)
 80123c2:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 80123c6:	485b      	ldr	r0, [pc, #364]	@ (8012534 <txPushMultiFrame+0x1b8>)
 80123c8:	f001 fa74 	bl	80138b4 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 80123cc:	2300      	movs	r3, #0
 80123ce:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 80123d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123d2:	3302      	adds	r3, #2
 80123d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 80123d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	4413      	add	r3, r2
 80123dc:	1e5a      	subs	r2, r3, #1
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80123e4:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 80123e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d806      	bhi.n	80123fa <txPushMultiFrame+0x7e>
 80123ec:	4b54      	ldr	r3, [pc, #336]	@ (8012540 <txPushMultiFrame+0x1c4>)
 80123ee:	4a50      	ldr	r2, [pc, #320]	@ (8012530 <txPushMultiFrame+0x1b4>)
 80123f0:	f240 11f3 	movw	r1, #499	@ 0x1f3
 80123f4:	484f      	ldr	r0, [pc, #316]	@ (8012534 <txPushMultiFrame+0x1b8>)
 80123f6:	f001 fa5d 	bl	80138b4 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	689a      	ldr	r2, [r3, #8]
 80123fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012400:	441a      	add	r2, r3
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	429a      	cmp	r2, r3
 8012408:	d87b      	bhi.n	8012502 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 801240a:	f107 0010 	add.w	r0, r7, #16
 801240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012410:	9305      	str	r3, [sp, #20]
 8012412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012414:	9304      	str	r3, [sp, #16]
 8012416:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801241a:	9303      	str	r3, [sp, #12]
 801241c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801241e:	9302      	str	r3, [sp, #8]
 8012420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8012424:	e9cd 2300 	strd	r2, r3, [sp]
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	68b9      	ldr	r1, [r7, #8]
 801242c:	f7ff fe68 	bl	8012100 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d051      	beq.n	80124da <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	f103 000c 	add.w	r0, r3, #12
 8012440:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012442:	4b40      	ldr	r3, [pc, #256]	@ (8012544 <txPushMultiFrame+0x1c8>)
 8012444:	4a40      	ldr	r2, [pc, #256]	@ (8012548 <txPushMultiFrame+0x1cc>)
 8012446:	f7ff f8f3 	bl	8011630 <cavlSearch>
 801244a:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 801244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801244e:	69fa      	ldr	r2, [r7, #28]
 8012450:	429a      	cmp	r2, r3
 8012452:	d006      	beq.n	8012462 <txPushMultiFrame+0xe6>
 8012454:	4b3d      	ldr	r3, [pc, #244]	@ (801254c <txPushMultiFrame+0x1d0>)
 8012456:	4a36      	ldr	r2, [pc, #216]	@ (8012530 <txPushMultiFrame+0x1b4>)
 8012458:	f240 2105 	movw	r1, #517	@ 0x205
 801245c:	4835      	ldr	r0, [pc, #212]	@ (8012534 <txPushMultiFrame+0x1b8>)
 801245e:	f001 fa29 	bl	80138b4 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <txPushMultiFrame+0xfc>
 801246a:	4b39      	ldr	r3, [pc, #228]	@ (8012550 <txPushMultiFrame+0x1d4>)
 801246c:	4a30      	ldr	r2, [pc, #192]	@ (8012530 <txPushMultiFrame+0x1b4>)
 801246e:	f240 2106 	movw	r1, #518	@ 0x206
 8012472:	4830      	ldr	r0, [pc, #192]	@ (8012534 <txPushMultiFrame+0x1b8>)
 8012474:	f001 fa1e 	bl	80138b4 <__assert_func>
                next = next->next_in_transfer;
 8012478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247a:	691b      	ldr	r3, [r3, #16]
 801247c:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 801247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1da      	bne.n	801243a <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012488:	429a      	cmp	r2, r3
 801248a:	d006      	beq.n	801249a <txPushMultiFrame+0x11e>
 801248c:	4b31      	ldr	r3, [pc, #196]	@ (8012554 <txPushMultiFrame+0x1d8>)
 801248e:	4a28      	ldr	r2, [pc, #160]	@ (8012530 <txPushMultiFrame+0x1b4>)
 8012490:	f240 2109 	movw	r1, #521	@ 0x209
 8012494:	4827      	ldr	r0, [pc, #156]	@ (8012534 <txPushMultiFrame+0x1b8>)
 8012496:	f001 fa0d 	bl	80138b4 <__assert_func>
            que->size += sq.size;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	689a      	ldr	r2, [r3, #8]
 801249e:	69bb      	ldr	r3, [r7, #24]
 80124a0:	441a      	add	r2, r3
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	689a      	ldr	r2, [r3, #8]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d906      	bls.n	80124c0 <txPushMultiFrame+0x144>
 80124b2:	4b29      	ldr	r3, [pc, #164]	@ (8012558 <txPushMultiFrame+0x1dc>)
 80124b4:	4a1e      	ldr	r2, [pc, #120]	@ (8012530 <txPushMultiFrame+0x1b4>)
 80124b6:	f240 210b 	movw	r1, #523	@ 0x20b
 80124ba:	481e      	ldr	r0, [pc, #120]	@ (8012534 <txPushMultiFrame+0x1b8>)
 80124bc:	f001 f9fa 	bl	80138b4 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	da06      	bge.n	80124d4 <txPushMultiFrame+0x158>
 80124c6:	4b25      	ldr	r3, [pc, #148]	@ (801255c <txPushMultiFrame+0x1e0>)
 80124c8:	4a19      	ldr	r2, [pc, #100]	@ (8012530 <txPushMultiFrame+0x1b4>)
 80124ca:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 80124ce:	4819      	ldr	r0, [pc, #100]	@ (8012534 <txPushMultiFrame+0x1b8>)
 80124d0:	f001 f9f0 	bl	80138b4 <__assert_func>
            out = (int32_t) sq.size;
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80124d8:	e016      	b.n	8012508 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 80124da:	f06f 0302 	mvn.w	r3, #2
 80124de:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80124e4:	e009      	b.n	80124fa <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 80124e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e8:	691b      	ldr	r3, [r3, #16]
 80124ea:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124f2:	68b8      	ldr	r0, [r7, #8]
 80124f4:	4798      	blx	r3
                head = next;
 80124f6:	6a3b      	ldr	r3, [r7, #32]
 80124f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80124fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1f2      	bne.n	80124e6 <txPushMultiFrame+0x16a>
 8012500:	e002      	b.n	8012508 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8012502:	f06f 0302 	mvn.w	r3, #2
 8012506:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8012508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801250a:	2b00      	cmp	r3, #0
 801250c:	db09      	blt.n	8012522 <txPushMultiFrame+0x1a6>
 801250e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012510:	2b01      	cmp	r3, #1
 8012512:	dc06      	bgt.n	8012522 <txPushMultiFrame+0x1a6>
 8012514:	4b12      	ldr	r3, [pc, #72]	@ (8012560 <txPushMultiFrame+0x1e4>)
 8012516:	4a06      	ldr	r2, [pc, #24]	@ (8012530 <txPushMultiFrame+0x1b4>)
 8012518:	f240 211f 	movw	r1, #543	@ 0x21f
 801251c:	4805      	ldr	r0, [pc, #20]	@ (8012534 <txPushMultiFrame+0x1b8>)
 801251e:	f001 f9c9 	bl	80138b4 <__assert_func>
    return out;
 8012522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012524:	4618      	mov	r0, r3
 8012526:	3738      	adds	r7, #56	@ 0x38
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	08018574 	.word	0x08018574
 8012530:	0801906c 	.word	0x0801906c
 8012534:	080181e0 	.word	0x080181e0
 8012538:	080184f4 	.word	0x080184f4
 801253c:	08018510 	.word	0x08018510
 8012540:	080185a4 	.word	0x080185a4
 8012544:	08011991 	.word	0x08011991
 8012548:	08011ef5 	.word	0x08011ef5
 801254c:	080185b4 	.word	0x080185b4
 8012550:	080185c8 	.word	0x080185c8
 8012554:	080185e4 	.word	0x080185e4
 8012558:	080184c0 	.word	0x080184c0
 801255c:	080185fc 	.word	0x080185fc
 8012560:	08018620 	.word	0x08018620

08012564 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b088      	sub	sp, #32
 8012568:	af00      	add	r7, sp, #0
 801256a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
 8012570:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d106      	bne.n	8012586 <rxTryParseFrame+0x22>
 8012578:	4b96      	ldr	r3, [pc, #600]	@ (80127d4 <rxTryParseFrame+0x270>)
 801257a:	4a97      	ldr	r2, [pc, #604]	@ (80127d8 <rxTryParseFrame+0x274>)
 801257c:	f240 214e 	movw	r1, #590	@ 0x24e
 8012580:	4896      	ldr	r0, [pc, #600]	@ (80127dc <rxTryParseFrame+0x278>)
 8012582:	f001 f997 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801258e:	d306      	bcc.n	801259e <rxTryParseFrame+0x3a>
 8012590:	4b93      	ldr	r3, [pc, #588]	@ (80127e0 <rxTryParseFrame+0x27c>)
 8012592:	4a91      	ldr	r2, [pc, #580]	@ (80127d8 <rxTryParseFrame+0x274>)
 8012594:	f240 214f 	movw	r1, #591	@ 0x24f
 8012598:	4890      	ldr	r0, [pc, #576]	@ (80127dc <rxTryParseFrame+0x278>)
 801259a:	f001 f98b 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(out != NULL);
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d106      	bne.n	80125b2 <rxTryParseFrame+0x4e>
 80125a4:	4b8f      	ldr	r3, [pc, #572]	@ (80127e4 <rxTryParseFrame+0x280>)
 80125a6:	4a8c      	ldr	r2, [pc, #560]	@ (80127d8 <rxTryParseFrame+0x274>)
 80125a8:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80125ac:	488b      	ldr	r0, [pc, #556]	@ (80127dc <rxTryParseFrame+0x278>)
 80125ae:	f001 f981 	bl	80138b4 <__assert_func>
    bool valid = false;
 80125b2:	2300      	movs	r3, #0
 80125b4:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f000 8105 	beq.w	80127ca <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	689b      	ldr	r3, [r3, #8]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d106      	bne.n	80125d6 <rxTryParseFrame+0x72>
 80125c8:	4b87      	ldr	r3, [pc, #540]	@ (80127e8 <rxTryParseFrame+0x284>)
 80125ca:	4a83      	ldr	r2, [pc, #524]	@ (80127d8 <rxTryParseFrame+0x274>)
 80125cc:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80125d0:	4882      	ldr	r0, [pc, #520]	@ (80127dc <rxTryParseFrame+0x278>)
 80125d2:	f001 f96f 	bl	80138b4 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 80125d6:	6839      	ldr	r1, [r7, #0]
 80125d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80125dc:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	0e9b      	lsrs	r3, r3, #26
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	f003 0307 	and.w	r3, r3, #7
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 80125f6:	69bb      	ldr	r3, [r7, #24]
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80125fe:	b2da      	uxtb	r2, r3
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801260a:	2b00      	cmp	r3, #0
 801260c:	d128      	bne.n	8012660 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	2200      	movs	r2, #0
 8012612:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	0a1b      	lsrs	r3, r3, #8
 8012618:	b29b      	uxth	r3, r3
 801261a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801261e:	b29a      	uxth	r2, r3
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801262a:	2b00      	cmp	r3, #0
 801262c:	d002      	beq.n	8012634 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	22ff      	movs	r2, #255	@ 0xff
 8012632:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	22ff      	movs	r2, #255	@ 0xff
 8012638:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012640:	2b00      	cmp	r3, #0
 8012642:	d106      	bne.n	8012652 <rxTryParseFrame+0xee>
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801264a:	2b00      	cmp	r3, #0
 801264c:	d101      	bne.n	8012652 <rxTryParseFrame+0xee>
 801264e:	2301      	movs	r3, #1
 8012650:	e000      	b.n	8012654 <rxTryParseFrame+0xf0>
 8012652:	2300      	movs	r3, #0
 8012654:	77fb      	strb	r3, [r7, #31]
 8012656:	7ffb      	ldrb	r3, [r7, #31]
 8012658:	f003 0301 	and.w	r3, r3, #1
 801265c:	77fb      	strb	r3, [r7, #31]
 801265e:	e02c      	b.n	80126ba <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012666:	2b00      	cmp	r3, #0
 8012668:	d001      	beq.n	801266e <rxTryParseFrame+0x10a>
 801266a:	2202      	movs	r2, #2
 801266c:	e000      	b.n	8012670 <rxTryParseFrame+0x10c>
 801266e:	2201      	movs	r2, #1
            out->transfer_kind =
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	0b9b      	lsrs	r3, r3, #14
 8012678:	b29b      	uxth	r3, r3
 801267a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801267e:	b29a      	uxth	r2, r3
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	09db      	lsrs	r3, r3, #7
 8012688:	b2db      	uxtb	r3, r3
 801268a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801268e:	b2da      	uxtb	r2, r3
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801269a:	2b00      	cmp	r3, #0
 801269c:	d107      	bne.n	80126ae <rxTryParseFrame+0x14a>
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	7b1a      	ldrb	r2, [r3, #12]
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	7b5b      	ldrb	r3, [r3, #13]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d001      	beq.n	80126ae <rxTryParseFrame+0x14a>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e000      	b.n	80126b0 <rxTryParseFrame+0x14c>
 80126ae:	2300      	movs	r3, #0
 80126b0:	77fb      	strb	r3, [r7, #31]
 80126b2:	7ffb      	ldrb	r3, [r7, #31]
 80126b4:	f003 0301 	and.w	r3, r3, #1
 80126b8:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	1e5a      	subs	r2, r3, #1
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	689a      	ldr	r2, [r3, #8]
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	699a      	ldr	r2, [r3, #24]
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	695b      	ldr	r3, [r3, #20]
 80126d4:	4413      	add	r3, r2
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 80126da:	7dfb      	ldrb	r3, [r7, #23]
 80126dc:	f003 031f 	and.w	r3, r3, #31
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 80126e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	09db      	lsrs	r3, r3, #7
 80126ee:	b2da      	uxtb	r2, r3
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 80126f4:	7dfb      	ldrb	r3, [r7, #23]
 80126f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	bf14      	ite	ne
 80126fe:	2301      	movne	r3, #1
 8012700:	2300      	moveq	r3, #0
 8012702:	b2da      	uxtb	r2, r3
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8012708:	7dfb      	ldrb	r3, [r7, #23]
 801270a:	f003 0320 	and.w	r3, r3, #32
 801270e:	2b00      	cmp	r3, #0
 8012710:	bf14      	ite	ne
 8012712:	2301      	movne	r3, #1
 8012714:	2300      	moveq	r3, #0
 8012716:	b2da      	uxtb	r2, r3
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 801271c:	7ffb      	ldrb	r3, [r7, #31]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d00c      	beq.n	801273c <rxTryParseFrame+0x1d8>
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	7bdb      	ldrb	r3, [r3, #15]
 8012726:	f083 0301 	eor.w	r3, r3, #1
 801272a:	b2db      	uxtb	r3, r3
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <rxTryParseFrame+0x1d4>
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	7c5b      	ldrb	r3, [r3, #17]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d001      	beq.n	801273c <rxTryParseFrame+0x1d8>
 8012738:	2301      	movs	r3, #1
 801273a:	e000      	b.n	801273e <rxTryParseFrame+0x1da>
 801273c:	2300      	movs	r3, #0
 801273e:	77fb      	strb	r3, [r7, #31]
 8012740:	7ffb      	ldrb	r3, [r7, #31]
 8012742:	f003 0301 	and.w	r3, r3, #1
 8012746:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8012748:	7ffb      	ldrb	r3, [r7, #31]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00d      	beq.n	801276a <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 8012752:	2b00      	cmp	r3, #0
 8012754:	d003      	beq.n	801275e <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	7c1b      	ldrb	r3, [r3, #16]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d103      	bne.n	8012766 <rxTryParseFrame+0x202>
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	7b1b      	ldrb	r3, [r3, #12]
 8012762:	2bff      	cmp	r3, #255	@ 0xff
 8012764:	d001      	beq.n	801276a <rxTryParseFrame+0x206>
        valid = valid &&
 8012766:	2301      	movs	r3, #1
 8012768:	e000      	b.n	801276c <rxTryParseFrame+0x208>
 801276a:	2300      	movs	r3, #0
 801276c:	77fb      	strb	r3, [r7, #31]
 801276e:	7ffb      	ldrb	r3, [r7, #31]
 8012770:	f003 0301 	and.w	r3, r3, #1
 8012774:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8012776:	7ffb      	ldrb	r3, [r7, #31]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d009      	beq.n	8012790 <rxTryParseFrame+0x22c>
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	695b      	ldr	r3, [r3, #20]
 8012780:	2b06      	cmp	r3, #6
 8012782:	d803      	bhi.n	801278c <rxTryParseFrame+0x228>
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	7c1b      	ldrb	r3, [r3, #16]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <rxTryParseFrame+0x22c>
 801278c:	2301      	movs	r3, #1
 801278e:	e000      	b.n	8012792 <rxTryParseFrame+0x22e>
 8012790:	2300      	movs	r3, #0
 8012792:	77fb      	strb	r3, [r7, #31]
 8012794:	7ffb      	ldrb	r3, [r7, #31]
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 801279c:	7ffb      	ldrb	r3, [r7, #31]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00d      	beq.n	80127be <rxTryParseFrame+0x25a>
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	695b      	ldr	r3, [r3, #20]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d107      	bne.n	80127ba <rxTryParseFrame+0x256>
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	7bdb      	ldrb	r3, [r3, #15]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d005      	beq.n	80127be <rxTryParseFrame+0x25a>
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	7c1b      	ldrb	r3, [r3, #16]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d001      	beq.n	80127be <rxTryParseFrame+0x25a>
 80127ba:	2301      	movs	r3, #1
 80127bc:	e000      	b.n	80127c0 <rxTryParseFrame+0x25c>
 80127be:	2300      	movs	r3, #0
 80127c0:	77fb      	strb	r3, [r7, #31]
 80127c2:	7ffb      	ldrb	r3, [r7, #31]
 80127c4:	f003 0301 	and.w	r3, r3, #1
 80127c8:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 80127ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3720      	adds	r7, #32
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	08018638 	.word	0x08018638
 80127d8:	080190bc 	.word	0x080190bc
 80127dc:	080181e0 	.word	0x080181e0
 80127e0:	08018650 	.word	0x08018650
 80127e4:	08018680 	.word	0x08018680
 80127e8:	08018694 	.word	0x08018694

080127ec <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d106      	bne.n	801280a <rxInitTransferMetadataFromFrame+0x1e>
 80127fc:	4b19      	ldr	r3, [pc, #100]	@ (8012864 <rxInitTransferMetadataFromFrame+0x78>)
 80127fe:	4a1a      	ldr	r2, [pc, #104]	@ (8012868 <rxInitTransferMetadataFromFrame+0x7c>)
 8012800:	f240 218f 	movw	r1, #655	@ 0x28f
 8012804:	4819      	ldr	r0, [pc, #100]	@ (801286c <rxInitTransferMetadataFromFrame+0x80>)
 8012806:	f001 f855 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	699b      	ldr	r3, [r3, #24]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d106      	bne.n	8012820 <rxInitTransferMetadataFromFrame+0x34>
 8012812:	4b17      	ldr	r3, [pc, #92]	@ (8012870 <rxInitTransferMetadataFromFrame+0x84>)
 8012814:	4a14      	ldr	r2, [pc, #80]	@ (8012868 <rxInitTransferMetadataFromFrame+0x7c>)
 8012816:	f44f 7124 	mov.w	r1, #656	@ 0x290
 801281a:	4814      	ldr	r0, [pc, #80]	@ (801286c <rxInitTransferMetadataFromFrame+0x80>)
 801281c:	f001 f84a 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d106      	bne.n	8012834 <rxInitTransferMetadataFromFrame+0x48>
 8012826:	4b13      	ldr	r3, [pc, #76]	@ (8012874 <rxInitTransferMetadataFromFrame+0x88>)
 8012828:	4a0f      	ldr	r2, [pc, #60]	@ (8012868 <rxInitTransferMetadataFromFrame+0x7c>)
 801282a:	f240 2191 	movw	r1, #657	@ 0x291
 801282e:	480f      	ldr	r0, [pc, #60]	@ (801286c <rxInitTransferMetadataFromFrame+0x80>)
 8012830:	f001 f840 	bl	80138b4 <__assert_func>
    out_transfer->priority       = frame->priority;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	7a1a      	ldrb	r2, [r3, #8]
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	7a5a      	ldrb	r2, [r3, #9]
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	895a      	ldrh	r2, [r3, #10]
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	7b1a      	ldrb	r2, [r3, #12]
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	7b9a      	ldrb	r2, [r3, #14]
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	715a      	strb	r2, [r3, #5]
}
 801285c:	bf00      	nop
 801285e:	3708      	adds	r7, #8
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	08018638 	.word	0x08018638
 8012868:	08019150 	.word	0x08019150
 801286c:	080181e0 	.word	0x080181e0
 8012870:	08018694 	.word	0x08018694
 8012874:	080186b4 	.word	0x080186b4

08012878 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	4603      	mov	r3, r0
 8012880:	460a      	mov	r2, r1
 8012882:	71fb      	strb	r3, [r7, #7]
 8012884:	4613      	mov	r3, r2
 8012886:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8012888:	79fb      	ldrb	r3, [r7, #7]
 801288a:	2b1f      	cmp	r3, #31
 801288c:	d906      	bls.n	801289c <rxComputeTransferIDDifference+0x24>
 801288e:	4b15      	ldr	r3, [pc, #84]	@ (80128e4 <rxComputeTransferIDDifference+0x6c>)
 8012890:	4a15      	ldr	r2, [pc, #84]	@ (80128e8 <rxComputeTransferIDDifference+0x70>)
 8012892:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8012896:	4815      	ldr	r0, [pc, #84]	@ (80128ec <rxComputeTransferIDDifference+0x74>)
 8012898:	f001 f80c 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 801289c:	79bb      	ldrb	r3, [r7, #6]
 801289e:	2b1f      	cmp	r3, #31
 80128a0:	d906      	bls.n	80128b0 <rxComputeTransferIDDifference+0x38>
 80128a2:	4b13      	ldr	r3, [pc, #76]	@ (80128f0 <rxComputeTransferIDDifference+0x78>)
 80128a4:	4a10      	ldr	r2, [pc, #64]	@ (80128e8 <rxComputeTransferIDDifference+0x70>)
 80128a6:	f240 219d 	movw	r1, #669	@ 0x29d
 80128aa:	4810      	ldr	r0, [pc, #64]	@ (80128ec <rxComputeTransferIDDifference+0x74>)
 80128ac:	f001 f802 	bl	80138b4 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 80128b0:	79fb      	ldrb	r3, [r7, #7]
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	79bb      	ldrb	r3, [r7, #6]
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	1ad3      	subs	r3, r2, r3
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 80128be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	da07      	bge.n	80128d6 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 80128c6:	2320      	movs	r3, #32
 80128c8:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 80128ca:	7b7b      	ldrb	r3, [r7, #13]
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	89fb      	ldrh	r3, [r7, #14]
 80128d0:	4413      	add	r3, r2
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 80128d6:	89fb      	ldrh	r3, [r7, #14]
 80128d8:	b2db      	uxtb	r3, r3
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3710      	adds	r7, #16
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	080186d0 	.word	0x080186d0
 80128e8:	080190ec 	.word	0x080190ec
 80128ec:	080181e0 	.word	0x080181e0
 80128f0:	080186e8 	.word	0x080186e8

080128f4 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b086      	sub	sp, #24
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
 8012900:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d106      	bne.n	8012916 <rxSessionWritePayload+0x22>
 8012908:	4b67      	ldr	r3, [pc, #412]	@ (8012aa8 <rxSessionWritePayload+0x1b4>)
 801290a:	4a68      	ldr	r2, [pc, #416]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 801290c:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8012910:	4867      	ldr	r0, [pc, #412]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012912:	f000 ffcf 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d106      	bne.n	801292a <rxSessionWritePayload+0x36>
 801291c:	4b65      	ldr	r3, [pc, #404]	@ (8012ab4 <rxSessionWritePayload+0x1c0>)
 801291e:	4a63      	ldr	r2, [pc, #396]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012920:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8012924:	4862      	ldr	r0, [pc, #392]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012926:	f000 ffc5 	bl	80138b4 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 801292a:	6a3b      	ldr	r3, [r7, #32]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d109      	bne.n	8012944 <rxSessionWritePayload+0x50>
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d006      	beq.n	8012944 <rxSessionWritePayload+0x50>
 8012936:	4b60      	ldr	r3, [pc, #384]	@ (8012ab8 <rxSessionWritePayload+0x1c4>)
 8012938:	4a5c      	ldr	r2, [pc, #368]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 801293a:	f240 21af 	movw	r1, #687	@ 0x2af
 801293e:	485c      	ldr	r0, [pc, #368]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012940:	f000 ffb8 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	429a      	cmp	r2, r3
 801294c:	d206      	bcs.n	801295c <rxSessionWritePayload+0x68>
 801294e:	4b5b      	ldr	r3, [pc, #364]	@ (8012abc <rxSessionWritePayload+0x1c8>)
 8012950:	4a56      	ldr	r2, [pc, #344]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012952:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8012956:	4856      	ldr	r0, [pc, #344]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012958:	f000 ffac 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	68da      	ldr	r2, [r3, #12]
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	429a      	cmp	r2, r3
 8012966:	d906      	bls.n	8012976 <rxSessionWritePayload+0x82>
 8012968:	4b55      	ldr	r3, [pc, #340]	@ (8012ac0 <rxSessionWritePayload+0x1cc>)
 801296a:	4a50      	ldr	r2, [pc, #320]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 801296c:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8012970:	484f      	ldr	r0, [pc, #316]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012972:	f000 ff9f 	bl	80138b4 <__assert_func>

    rxs->total_payload_size += payload_size;
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	689a      	ldr	r2, [r3, #8]
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	441a      	add	r2, r3
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d115      	bne.n	80129b6 <rxSessionWritePayload+0xc2>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d012      	beq.n	80129b6 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d006      	beq.n	80129a6 <rxSessionWritePayload+0xb2>
 8012998:	4b4a      	ldr	r3, [pc, #296]	@ (8012ac4 <rxSessionWritePayload+0x1d0>)
 801299a:	4a44      	ldr	r2, [pc, #272]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 801299c:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 80129a0:	4843      	ldr	r0, [pc, #268]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 80129a2:	f000 ff87 	bl	80138b4 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	6879      	ldr	r1, [r7, #4]
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	4798      	blx	r3
 80129b0:	4602      	mov	r2, r0
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 80129b6:	2300      	movs	r3, #0
 80129b8:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	691b      	ldr	r3, [r3, #16]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d04e      	beq.n	8012a60 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	68da      	ldr	r2, [r3, #12]
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	4413      	add	r3, r2
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d229      	bcs.n	8012a28 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d206      	bcs.n	80129ec <rxSessionWritePayload+0xf8>
 80129de:	4b37      	ldr	r3, [pc, #220]	@ (8012abc <rxSessionWritePayload+0x1c8>)
 80129e0:	4a32      	ldr	r2, [pc, #200]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 80129e2:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80129e6:	4832      	ldr	r0, [pc, #200]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 80129e8:	f000 ff64 	bl	80138b4 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	1ad3      	subs	r3, r2, r3
 80129f4:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	68da      	ldr	r2, [r3, #12]
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	4413      	add	r3, r2
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d006      	beq.n	8012a12 <rxSessionWritePayload+0x11e>
 8012a04:	4b30      	ldr	r3, [pc, #192]	@ (8012ac8 <rxSessionWritePayload+0x1d4>)
 8012a06:	4a29      	ldr	r2, [pc, #164]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012a08:	f240 21c5 	movw	r1, #709	@ 0x2c5
 8012a0c:	4828      	ldr	r0, [pc, #160]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012a0e:	f000 ff51 	bl	80138b4 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 8012a12:	693a      	ldr	r2, [r7, #16]
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d306      	bcc.n	8012a28 <rxSessionWritePayload+0x134>
 8012a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8012acc <rxSessionWritePayload+0x1d8>)
 8012a1c:	4a23      	ldr	r2, [pc, #140]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012a1e:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8012a22:	4823      	ldr	r0, [pc, #140]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012a24:	f000 ff46 	bl	80138b4 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	691a      	ldr	r2, [r3, #16]
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	4413      	add	r3, r2
 8012a32:	693a      	ldr	r2, [r7, #16]
 8012a34:	6a39      	ldr	r1, [r7, #32]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f002 f8dd 	bl	8014bf6 <memcpy>
        rxs->payload_size += bytes_to_copy;
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	68da      	ldr	r2, [r3, #12]
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	441a      	add	r2, r3
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d219      	bcs.n	8012a86 <rxSessionWritePayload+0x192>
 8012a52:	4b1a      	ldr	r3, [pc, #104]	@ (8012abc <rxSessionWritePayload+0x1c8>)
 8012a54:	4a15      	ldr	r2, [pc, #84]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012a56:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8012a5a:	4815      	ldr	r0, [pc, #84]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012a5c:	f000 ff2a 	bl	80138b4 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d006      	beq.n	8012a76 <rxSessionWritePayload+0x182>
 8012a68:	4b16      	ldr	r3, [pc, #88]	@ (8012ac4 <rxSessionWritePayload+0x1d0>)
 8012a6a:	4a10      	ldr	r2, [pc, #64]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012a6c:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8012a70:	480f      	ldr	r0, [pc, #60]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012a72:	f000 ff1f 	bl	80138b4 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d002      	beq.n	8012a82 <rxSessionWritePayload+0x18e>
 8012a7c:	f06f 0302 	mvn.w	r3, #2
 8012a80:	e000      	b.n	8012a84 <rxSessionWritePayload+0x190>
 8012a82:	2300      	movs	r3, #0
 8012a84:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8012a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	dd06      	ble.n	8012a9c <rxSessionWritePayload+0x1a8>
 8012a8e:	4b10      	ldr	r3, [pc, #64]	@ (8012ad0 <rxSessionWritePayload+0x1dc>)
 8012a90:	4a06      	ldr	r2, [pc, #24]	@ (8012aac <rxSessionWritePayload+0x1b8>)
 8012a92:	f240 21d7 	movw	r1, #727	@ 0x2d7
 8012a96:	4806      	ldr	r0, [pc, #24]	@ (8012ab0 <rxSessionWritePayload+0x1bc>)
 8012a98:	f000 ff0c 	bl	80138b4 <__assert_func>
    return out;
 8012a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3718      	adds	r7, #24
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	080183a4 	.word	0x080183a4
 8012aac:	08019138 	.word	0x08019138
 8012ab0:	080181e0 	.word	0x080181e0
 8012ab4:	08018700 	.word	0x08018700
 8012ab8:	0801829c 	.word	0x0801829c
 8012abc:	08018714 	.word	0x08018714
 8012ac0:	08018730 	.word	0x08018730
 8012ac4:	08018760 	.word	0x08018760
 8012ac8:	08018778 	.word	0x08018778
 8012acc:	080187a8 	.word	0x080187a8
 8012ad0:	080187c8 	.word	0x080187c8

08012ad4 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d106      	bne.n	8012af2 <rxSessionRestart+0x1e>
 8012ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8012b50 <rxSessionRestart+0x7c>)
 8012ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8012b54 <rxSessionRestart+0x80>)
 8012ae8:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8012aec:	481a      	ldr	r0, [pc, #104]	@ (8012b58 <rxSessionRestart+0x84>)
 8012aee:	f000 fee1 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d106      	bne.n	8012b06 <rxSessionRestart+0x32>
 8012af8:	4b18      	ldr	r3, [pc, #96]	@ (8012b5c <rxSessionRestart+0x88>)
 8012afa:	4a16      	ldr	r2, [pc, #88]	@ (8012b54 <rxSessionRestart+0x80>)
 8012afc:	f240 21de 	movw	r1, #734	@ 0x2de
 8012b00:	4815      	ldr	r0, [pc, #84]	@ (8012b58 <rxSessionRestart+0x84>)
 8012b02:	f000 fed7 	bl	80138b4 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	6912      	ldr	r2, [r2, #16]
 8012b0e:	4611      	mov	r1, r2
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2200      	movs	r2, #0
 8012b18:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	2200      	movs	r2, #0
 8012b24:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b2c:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	7d9b      	ldrb	r3, [r3, #22]
 8012b32:	3301      	adds	r3, #1
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	f003 031f 	and.w	r3, r3, #31
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	2201      	movs	r2, #1
 8012b44:	761a      	strb	r2, [r3, #24]
}
 8012b46:	bf00      	nop
 8012b48:	3708      	adds	r7, #8
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	080183a4 	.word	0x080183a4
 8012b54:	0801910c 	.word	0x0801910c
 8012b58:	080181e0 	.word	0x080181e0
 8012b5c:	08018700 	.word	0x08018700

08012b60 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b088      	sub	sp, #32
 8012b64:	af02      	add	r7, sp, #8
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d106      	bne.n	8012b82 <rxSessionAcceptFrame+0x22>
 8012b74:	4b81      	ldr	r3, [pc, #516]	@ (8012d7c <rxSessionAcceptFrame+0x21c>)
 8012b76:	4a82      	ldr	r2, [pc, #520]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012b78:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012b7c:	4881      	ldr	r0, [pc, #516]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012b7e:	f000 fe99 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d106      	bne.n	8012b96 <rxSessionAcceptFrame+0x36>
 8012b88:	4b7f      	ldr	r3, [pc, #508]	@ (8012d88 <rxSessionAcceptFrame+0x228>)
 8012b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012b8c:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8012b90:	487c      	ldr	r0, [pc, #496]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012b92:	f000 fe8f 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d106      	bne.n	8012baa <rxSessionAcceptFrame+0x4a>
 8012b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8012d8c <rxSessionAcceptFrame+0x22c>)
 8012b9e:	4a78      	ldr	r2, [pc, #480]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012ba0:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8012ba4:	4877      	ldr	r0, [pc, #476]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012ba6:	f000 fe85 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	699b      	ldr	r3, [r3, #24]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d106      	bne.n	8012bc0 <rxSessionAcceptFrame+0x60>
 8012bb2:	4b77      	ldr	r3, [pc, #476]	@ (8012d90 <rxSessionAcceptFrame+0x230>)
 8012bb4:	4a72      	ldr	r2, [pc, #456]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012bb6:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8012bba:	4872      	ldr	r0, [pc, #456]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012bbc:	f000 fe7a 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	7b9b      	ldrb	r3, [r3, #14]
 8012bc4:	2b1f      	cmp	r3, #31
 8012bc6:	d906      	bls.n	8012bd6 <rxSessionAcceptFrame+0x76>
 8012bc8:	4b72      	ldr	r3, [pc, #456]	@ (8012d94 <rxSessionAcceptFrame+0x234>)
 8012bca:	4a6d      	ldr	r2, [pc, #436]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012bcc:	f240 21f3 	movw	r1, #755	@ 0x2f3
 8012bd0:	486c      	ldr	r0, [pc, #432]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012bd2:	f000 fe6f 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012bd6:	6a3b      	ldr	r3, [r7, #32]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <rxSessionAcceptFrame+0x8a>
 8012bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8012d98 <rxSessionAcceptFrame+0x238>)
 8012bde:	4a68      	ldr	r2, [pc, #416]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012be0:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8012be4:	4867      	ldr	r0, [pc, #412]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012be6:	f000 fe65 	bl	80138b4 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	7bdb      	ldrb	r3, [r3, #15]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d005      	beq.n	8012bfe <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf8:	68b9      	ldr	r1, [r7, #8]
 8012bfa:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	7bdb      	ldrb	r3, [r3, #15]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d005      	beq.n	8012c12 <rxSessionAcceptFrame+0xb2>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	7c1b      	ldrb	r3, [r3, #16]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d001      	beq.n	8012c12 <rxSessionAcceptFrame+0xb2>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e000      	b.n	8012c14 <rxSessionAcceptFrame+0xb4>
 8012c12:	2300      	movs	r3, #0
 8012c14:	75bb      	strb	r3, [r7, #22]
 8012c16:	7dbb      	ldrb	r3, [r7, #22]
 8012c18:	f003 0301 	and.w	r3, r3, #1
 8012c1c:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8012c1e:	7dbb      	ldrb	r3, [r7, #22]
 8012c20:	f083 0301 	eor.w	r3, r3, #1
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00c      	beq.n	8012c44 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	8a98      	ldrh	r0, [r3, #20]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6959      	ldr	r1, [r3, #20]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	699b      	ldr	r3, [r3, #24]
 8012c36:	461a      	mov	r2, r3
 8012c38:	f7fe fed6 	bl	80119e8 <crcAdd>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	461a      	mov	r2, r3
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	695a      	ldr	r2, [r3, #20]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	699b      	ldr	r3, [r3, #24]
 8012c4c:	9300      	str	r3, [sp, #0]
 8012c4e:	4613      	mov	r3, r2
 8012c50:	683a      	ldr	r2, [r7, #0]
 8012c52:	68b9      	ldr	r1, [r7, #8]
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ff fe4d 	bl	80128f4 <rxSessionWritePayload>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8012c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	da10      	bge.n	8012c88 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8012c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c6a:	f113 0f03 	cmn.w	r3, #3
 8012c6e:	d006      	beq.n	8012c7e <rxSessionAcceptFrame+0x11e>
 8012c70:	4b4a      	ldr	r3, [pc, #296]	@ (8012d9c <rxSessionAcceptFrame+0x23c>)
 8012c72:	4a43      	ldr	r2, [pc, #268]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012c74:	f240 3106 	movw	r1, #774	@ 0x306
 8012c78:	4842      	ldr	r0, [pc, #264]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012c7a:	f000 fe1b 	bl	80138b4 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8012c7e:	68b9      	ldr	r1, [r7, #8]
 8012c80:	68f8      	ldr	r0, [r7, #12]
 8012c82:	f7ff ff27 	bl	8012ad4 <rxSessionRestart>
 8012c86:	e072      	b.n	8012d6e <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	7c1b      	ldrb	r3, [r3, #16]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d05f      	beq.n	8012d50 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8012c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d006      	beq.n	8012ca6 <rxSessionAcceptFrame+0x146>
 8012c98:	4b41      	ldr	r3, [pc, #260]	@ (8012da0 <rxSessionAcceptFrame+0x240>)
 8012c9a:	4a39      	ldr	r2, [pc, #228]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012c9c:	f240 310b 	movw	r1, #779	@ 0x30b
 8012ca0:	4838      	ldr	r0, [pc, #224]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012ca2:	f000 fe07 	bl	80138b4 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8012ca6:	7dbb      	ldrb	r3, [r7, #22]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d103      	bne.n	8012cb4 <rxSessionAcceptFrame+0x154>
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	8a9b      	ldrh	r3, [r3, #20]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d148      	bne.n	8012d46 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8012cb8:	6a3b      	ldr	r3, [r7, #32]
 8012cba:	4619      	mov	r1, r3
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7ff fd95 	bl	80127ec <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	6a39      	ldr	r1, [r7, #32]
 8012cca:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	68da      	ldr	r2, [r3, #12]
 8012cd2:	6a3b      	ldr	r3, [r7, #32]
 8012cd4:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	691a      	ldr	r2, [r3, #16]
 8012cda:	6a3b      	ldr	r3, [r7, #32]
 8012cdc:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	689a      	ldr	r2, [r3, #8]
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d206      	bcs.n	8012cf8 <rxSessionAcceptFrame+0x198>
 8012cea:	4b2e      	ldr	r3, [pc, #184]	@ (8012da4 <rxSessionAcceptFrame+0x244>)
 8012cec:	4a24      	ldr	r2, [pc, #144]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012cee:	f240 3115 	movw	r1, #789	@ 0x315
 8012cf2:	4824      	ldr	r0, [pc, #144]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012cf4:	f000 fdde 	bl	80138b4 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	689a      	ldr	r2, [r3, #8]
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 8012d04:	7dbb      	ldrb	r3, [r7, #22]
 8012d06:	f083 0301 	eor.w	r3, r3, #1
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d017      	beq.n	8012d40 <rxSessionAcceptFrame+0x1e0>
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d814      	bhi.n	8012d40 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 8012d16:	6a3b      	ldr	r3, [r7, #32]
 8012d18:	691a      	ldr	r2, [r3, #16]
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	f1c3 0302 	rsb	r3, r3, #2
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d206      	bcs.n	8012d32 <rxSessionAcceptFrame+0x1d2>
 8012d24:	4b20      	ldr	r3, [pc, #128]	@ (8012da8 <rxSessionAcceptFrame+0x248>)
 8012d26:	4a16      	ldr	r2, [pc, #88]	@ (8012d80 <rxSessionAcceptFrame+0x220>)
 8012d28:	f240 3119 	movw	r1, #793	@ 0x319
 8012d2c:	4815      	ldr	r0, [pc, #84]	@ (8012d84 <rxSessionAcceptFrame+0x224>)
 8012d2e:	f000 fdc1 	bl	80138b4 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 8012d32:	6a3b      	ldr	r3, [r7, #32]
 8012d34:	691a      	ldr	r2, [r3, #16]
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	4413      	add	r3, r2
 8012d3a:	1e9a      	subs	r2, r3, #2
 8012d3c:	6a3b      	ldr	r3, [r7, #32]
 8012d3e:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2200      	movs	r2, #0
 8012d44:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 8012d46:	68b9      	ldr	r1, [r7, #8]
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f7ff fec3 	bl	8012ad4 <rxSessionRestart>
 8012d4e:	e00e      	b.n	8012d6e <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	7e1b      	ldrb	r3, [r3, #24]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	bf14      	ite	ne
 8012d58:	2301      	movne	r3, #1
 8012d5a:	2300      	moveq	r3, #0
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	f083 0301 	eor.w	r3, r3, #1
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	f003 0301 	and.w	r3, r3, #1
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8012d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	080183a4 	.word	0x080183a4
 8012d80:	08019120 	.word	0x08019120
 8012d84:	080181e0 	.word	0x080181e0
 8012d88:	08018700 	.word	0x08018700
 8012d8c:	08018638 	.word	0x08018638
 8012d90:	08018694 	.word	0x08018694
 8012d94:	080187d4 	.word	0x080187d4
 8012d98:	080186b4 	.word	0x080186b4
 8012d9c:	080187fc 	.word	0x080187fc
 8012da0:	08018808 	.word	0x08018808
 8012da4:	08018814 	.word	0x08018814
 8012da8:	08018844 	.word	0x08018844

08012dac <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8012dac:	b5b0      	push	{r4, r5, r7, lr}
 8012dae:	b088      	sub	sp, #32
 8012db0:	af02      	add	r7, sp, #8
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
 8012db8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d106      	bne.n	8012dce <rxSessionUpdate+0x22>
 8012dc0:	4b6d      	ldr	r3, [pc, #436]	@ (8012f78 <rxSessionUpdate+0x1cc>)
 8012dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8012f7c <rxSessionUpdate+0x1d0>)
 8012dc4:	f240 3137 	movw	r1, #823	@ 0x337
 8012dc8:	486d      	ldr	r0, [pc, #436]	@ (8012f80 <rxSessionUpdate+0x1d4>)
 8012dca:	f000 fd73 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d106      	bne.n	8012de2 <rxSessionUpdate+0x36>
 8012dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8012f84 <rxSessionUpdate+0x1d8>)
 8012dd6:	4a69      	ldr	r2, [pc, #420]	@ (8012f7c <rxSessionUpdate+0x1d0>)
 8012dd8:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8012ddc:	4868      	ldr	r0, [pc, #416]	@ (8012f80 <rxSessionUpdate+0x1d4>)
 8012dde:	f000 fd69 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d106      	bne.n	8012df6 <rxSessionUpdate+0x4a>
 8012de8:	4b67      	ldr	r3, [pc, #412]	@ (8012f88 <rxSessionUpdate+0x1dc>)
 8012dea:	4a64      	ldr	r2, [pc, #400]	@ (8012f7c <rxSessionUpdate+0x1d0>)
 8012dec:	f240 3139 	movw	r1, #825	@ 0x339
 8012df0:	4863      	ldr	r0, [pc, #396]	@ (8012f80 <rxSessionUpdate+0x1d4>)
 8012df2:	f000 fd5f 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d106      	bne.n	8012e0a <rxSessionUpdate+0x5e>
 8012dfc:	4b63      	ldr	r3, [pc, #396]	@ (8012f8c <rxSessionUpdate+0x1e0>)
 8012dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8012f7c <rxSessionUpdate+0x1d0>)
 8012e00:	f240 313a 	movw	r1, #826	@ 0x33a
 8012e04:	485e      	ldr	r0, [pc, #376]	@ (8012f80 <rxSessionUpdate+0x1d4>)
 8012e06:	f000 fd55 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	7d9b      	ldrb	r3, [r3, #22]
 8012e0e:	2b1f      	cmp	r3, #31
 8012e10:	d906      	bls.n	8012e20 <rxSessionUpdate+0x74>
 8012e12:	4b5f      	ldr	r3, [pc, #380]	@ (8012f90 <rxSessionUpdate+0x1e4>)
 8012e14:	4a59      	ldr	r2, [pc, #356]	@ (8012f7c <rxSessionUpdate+0x1d0>)
 8012e16:	f240 313b 	movw	r1, #827	@ 0x33b
 8012e1a:	4859      	ldr	r0, [pc, #356]	@ (8012f80 <rxSessionUpdate+0x1d4>)
 8012e1c:	f000 fd4a 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	7b9b      	ldrb	r3, [r3, #14]
 8012e24:	2b1f      	cmp	r3, #31
 8012e26:	d906      	bls.n	8012e36 <rxSessionUpdate+0x8a>
 8012e28:	4b5a      	ldr	r3, [pc, #360]	@ (8012f94 <rxSessionUpdate+0x1e8>)
 8012e2a:	4a54      	ldr	r2, [pc, #336]	@ (8012f7c <rxSessionUpdate+0x1d0>)
 8012e2c:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8012e30:	4853      	ldr	r0, [pc, #332]	@ (8012f80 <rxSessionUpdate+0x1d4>)
 8012e32:	f000 fd3f 	bl	80138b4 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3c:	68b9      	ldr	r1, [r7, #8]
 8012e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e42:	4290      	cmp	r0, r2
 8012e44:	eb71 0303 	sbcs.w	r3, r1, r3
 8012e48:	d20f      	bcs.n	8012e6a <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e56:	1a84      	subs	r4, r0, r2
 8012e58:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8012e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012e60:	42a2      	cmp	r2, r4
 8012e62:	41ab      	sbcs	r3, r5
 8012e64:	d201      	bcs.n	8012e6a <rxSessionUpdate+0xbe>
 8012e66:	2301      	movs	r3, #1
 8012e68:	e000      	b.n	8012e6c <rxSessionUpdate+0xc0>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	75bb      	strb	r3, [r7, #22]
 8012e6e:	7dbb      	ldrb	r3, [r7, #22]
 8012e70:	f003 0301 	and.w	r3, r3, #1
 8012e74:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	7d9a      	ldrb	r2, [r3, #22]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	7b9b      	ldrb	r3, [r3, #14]
 8012e7e:	4619      	mov	r1, r3
 8012e80:	4610      	mov	r0, r2
 8012e82:	f7ff fcf9 	bl	8012878 <rxComputeTransferIDDifference>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	bf8c      	ite	hi
 8012e8c:	2301      	movhi	r3, #1
 8012e8e:	2300      	movls	r3, #0
 8012e90:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012e92:	7dbb      	ldrb	r3, [r7, #22]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d10b      	bne.n	8012eb0 <rxSessionUpdate+0x104>
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	7ddb      	ldrb	r3, [r3, #23]
 8012e9c:	78fa      	ldrb	r2, [r7, #3]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d108      	bne.n	8012eb4 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d004      	beq.n	8012eb4 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8012eaa:	7d7b      	ldrb	r3, [r7, #21]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d001      	beq.n	8012eb4 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e000      	b.n	8012eb6 <rxSessionUpdate+0x10a>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	753b      	strb	r3, [r7, #20]
 8012eb8:	7d3b      	ldrb	r3, [r7, #20]
 8012eba:	f003 0301 	and.w	r3, r3, #1
 8012ebe:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 8012ec0:	7d3b      	ldrb	r3, [r7, #20]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d013      	beq.n	8012eee <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ed8:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	7b9a      	ldrb	r2, [r3, #14]
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	78fa      	ldrb	r2, [r7, #3]
 8012eec:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 8012ef2:	7d3b      	ldrb	r3, [r7, #20]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d00b      	beq.n	8012f10 <rxSessionUpdate+0x164>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	7bdb      	ldrb	r3, [r3, #15]
 8012efc:	f083 0301 	eor.w	r3, r3, #1
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d004      	beq.n	8012f10 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 8012f06:	68b9      	ldr	r1, [r7, #8]
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f7ff fde3 	bl	8012ad4 <rxSessionRestart>
 8012f0e:	e02c      	b.n	8012f6a <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	7ddb      	ldrb	r3, [r3, #23]
 8012f14:	78fa      	ldrb	r2, [r7, #3]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	bf0c      	ite	eq
 8012f1a:	2301      	moveq	r3, #1
 8012f1c:	2300      	movne	r3, #0
 8012f1e:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	7c5a      	ldrb	r2, [r3, #17]
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	7e1b      	ldrb	r3, [r3, #24]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	bf0c      	ite	eq
 8012f2c:	2301      	moveq	r3, #1
 8012f2e:	2300      	movne	r3, #0
 8012f30:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	7b9a      	ldrb	r2, [r3, #14]
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	7d9b      	ldrb	r3, [r3, #22]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	bf0c      	ite	eq
 8012f3e:	2301      	moveq	r3, #1
 8012f40:	2300      	movne	r3, #0
 8012f42:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 8012f44:	7cfb      	ldrb	r3, [r7, #19]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d00f      	beq.n	8012f6a <rxSessionUpdate+0x1be>
 8012f4a:	7cbb      	ldrb	r3, [r7, #18]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00c      	beq.n	8012f6a <rxSessionUpdate+0x1be>
 8012f50:	7c7b      	ldrb	r3, [r7, #17]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d009      	beq.n	8012f6a <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8012f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f58:	9300      	str	r3, [sp, #0]
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	68b9      	ldr	r1, [r7, #8]
 8012f60:	68f8      	ldr	r0, [r7, #12]
 8012f62:	f7ff fdfd 	bl	8012b60 <rxSessionAcceptFrame>
 8012f66:	4603      	mov	r3, r0
 8012f68:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 8012f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3718      	adds	r7, #24
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bdb0      	pop	{r4, r5, r7, pc}
 8012f76:	bf00      	nop
 8012f78:	080183a4 	.word	0x080183a4
 8012f7c:	080190dc 	.word	0x080190dc
 8012f80:	080181e0 	.word	0x080181e0
 8012f84:	08018700 	.word	0x08018700
 8012f88:	08018638 	.word	0x08018638
 8012f8c:	080186b4 	.word	0x080186b4
 8012f90:	0801887c 	.word	0x0801887c
 8012f94:	080187d4 	.word	0x080187d4

08012f98 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8012f98:	b5b0      	push	{r4, r5, r7, lr}
 8012f9a:	b08c      	sub	sp, #48	@ 0x30
 8012f9c:	af04      	add	r7, sp, #16
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
 8012fa4:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d106      	bne.n	8012fba <rxAcceptFrame+0x22>
 8012fac:	4b85      	ldr	r3, [pc, #532]	@ (80131c4 <rxAcceptFrame+0x22c>)
 8012fae:	4a86      	ldr	r2, [pc, #536]	@ (80131c8 <rxAcceptFrame+0x230>)
 8012fb0:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8012fb4:	4885      	ldr	r0, [pc, #532]	@ (80131cc <rxAcceptFrame+0x234>)
 8012fb6:	f000 fc7d 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d106      	bne.n	8012fce <rxAcceptFrame+0x36>
 8012fc0:	4b83      	ldr	r3, [pc, #524]	@ (80131d0 <rxAcceptFrame+0x238>)
 8012fc2:	4a81      	ldr	r2, [pc, #516]	@ (80131c8 <rxAcceptFrame+0x230>)
 8012fc4:	f240 3169 	movw	r1, #873	@ 0x369
 8012fc8:	4880      	ldr	r0, [pc, #512]	@ (80131cc <rxAcceptFrame+0x234>)
 8012fca:	f000 fc73 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	8b9a      	ldrh	r2, [r3, #28]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	895b      	ldrh	r3, [r3, #10]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d006      	beq.n	8012fe8 <rxAcceptFrame+0x50>
 8012fda:	4b7e      	ldr	r3, [pc, #504]	@ (80131d4 <rxAcceptFrame+0x23c>)
 8012fdc:	4a7a      	ldr	r2, [pc, #488]	@ (80131c8 <rxAcceptFrame+0x230>)
 8012fde:	f240 316a 	movw	r1, #874	@ 0x36a
 8012fe2:	487a      	ldr	r0, [pc, #488]	@ (80131cc <rxAcceptFrame+0x234>)
 8012fe4:	f000 fc66 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d106      	bne.n	8012ffc <rxAcceptFrame+0x64>
 8012fee:	4b7a      	ldr	r3, [pc, #488]	@ (80131d8 <rxAcceptFrame+0x240>)
 8012ff0:	4a75      	ldr	r2, [pc, #468]	@ (80131c8 <rxAcceptFrame+0x230>)
 8012ff2:	f240 316b 	movw	r1, #875	@ 0x36b
 8012ff6:	4875      	ldr	r0, [pc, #468]	@ (80131cc <rxAcceptFrame+0x234>)
 8012ff8:	f000 fc5c 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	699b      	ldr	r3, [r3, #24]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d106      	bne.n	8013012 <rxAcceptFrame+0x7a>
 8013004:	4b75      	ldr	r3, [pc, #468]	@ (80131dc <rxAcceptFrame+0x244>)
 8013006:	4a70      	ldr	r2, [pc, #448]	@ (80131c8 <rxAcceptFrame+0x230>)
 8013008:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 801300c:	486f      	ldr	r0, [pc, #444]	@ (80131cc <rxAcceptFrame+0x234>)
 801300e:	f000 fc51 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	7b9b      	ldrb	r3, [r3, #14]
 8013016:	2b1f      	cmp	r3, #31
 8013018:	d906      	bls.n	8013028 <rxAcceptFrame+0x90>
 801301a:	4b71      	ldr	r3, [pc, #452]	@ (80131e0 <rxAcceptFrame+0x248>)
 801301c:	4a6a      	ldr	r2, [pc, #424]	@ (80131c8 <rxAcceptFrame+0x230>)
 801301e:	f240 316d 	movw	r1, #877	@ 0x36d
 8013022:	486a      	ldr	r0, [pc, #424]	@ (80131cc <rxAcceptFrame+0x234>)
 8013024:	f000 fc46 	bl	80138b4 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	7b5b      	ldrb	r3, [r3, #13]
 801302c:	2bff      	cmp	r3, #255	@ 0xff
 801302e:	d00c      	beq.n	801304a <rxAcceptFrame+0xb2>
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	791a      	ldrb	r2, [r3, #4]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	7b5b      	ldrb	r3, [r3, #13]
 8013038:	429a      	cmp	r2, r3
 801303a:	d006      	beq.n	801304a <rxAcceptFrame+0xb2>
 801303c:	4b69      	ldr	r3, [pc, #420]	@ (80131e4 <rxAcceptFrame+0x24c>)
 801303e:	4a62      	ldr	r2, [pc, #392]	@ (80131c8 <rxAcceptFrame+0x230>)
 8013040:	f240 316e 	movw	r1, #878	@ 0x36e
 8013044:	4861      	ldr	r0, [pc, #388]	@ (80131cc <rxAcceptFrame+0x234>)
 8013046:	f000 fc35 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 801304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801304c:	2b00      	cmp	r3, #0
 801304e:	d106      	bne.n	801305e <rxAcceptFrame+0xc6>
 8013050:	4b65      	ldr	r3, [pc, #404]	@ (80131e8 <rxAcceptFrame+0x250>)
 8013052:	4a5d      	ldr	r2, [pc, #372]	@ (80131c8 <rxAcceptFrame+0x230>)
 8013054:	f240 316f 	movw	r1, #879	@ 0x36f
 8013058:	485c      	ldr	r0, [pc, #368]	@ (80131cc <rxAcceptFrame+0x234>)
 801305a:	f000 fc2b 	bl	80138b4 <__assert_func>

    int8_t out = 0;
 801305e:	2300      	movs	r3, #0
 8013060:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	7b1b      	ldrb	r3, [r3, #12]
 8013066:	b25b      	sxtb	r3, r3
 8013068:	2b00      	cmp	r3, #0
 801306a:	db6c      	blt.n	8013146 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	7b1b      	ldrb	r3, [r3, #12]
 8013070:	68ba      	ldr	r2, [r7, #8]
 8013072:	3308      	adds	r3, #8
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	4413      	add	r3, r2
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d134      	bne.n	80130e8 <rxAcceptFrame+0x150>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	7bdb      	ldrb	r3, [r3, #15]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d030      	beq.n	80130e8 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	2120      	movs	r1, #32
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	4798      	blx	r3
 8013090:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	7b1b      	ldrb	r3, [r3, #12]
 8013096:	68ba      	ldr	r2, [r7, #8]
 8013098:	3308      	adds	r3, #8
 801309a:	009b      	lsls	r3, r3, #2
 801309c:	4413      	add	r3, r2
 801309e:	693a      	ldr	r2, [r7, #16]
 80130a0:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d01d      	beq.n	80130e4 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ae:	6939      	ldr	r1, [r7, #16]
 80130b0:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	2200      	movs	r2, #0
 80130b8:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	2200      	movs	r2, #0
 80130be:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	2200      	movs	r2, #0
 80130c4:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130cc:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	7b9a      	ldrb	r2, [r3, #14]
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	78fa      	ldrb	r2, [r7, #3]
 80130da:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	2201      	movs	r2, #1
 80130e0:	761a      	strb	r2, [r3, #24]
 80130e2:	e001      	b.n	80130e8 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 80130e4:	23fd      	movs	r3, #253	@ 0xfd
 80130e6:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	7b1b      	ldrb	r3, [r3, #12]
 80130ec:	68ba      	ldr	r2, [r7, #8]
 80130ee:	3308      	adds	r3, #8
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	4413      	add	r3, r2
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d05e      	beq.n	80131b8 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 80130fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d006      	beq.n	8013110 <rxAcceptFrame+0x178>
 8013102:	4b3a      	ldr	r3, [pc, #232]	@ (80131ec <rxAcceptFrame+0x254>)
 8013104:	4a30      	ldr	r2, [pc, #192]	@ (80131c8 <rxAcceptFrame+0x230>)
 8013106:	f240 318e 	movw	r1, #910	@ 0x38e
 801310a:	4830      	ldr	r0, [pc, #192]	@ (80131cc <rxAcceptFrame+0x234>)
 801310c:	f000 fbd2 	bl	80138b4 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	7b1b      	ldrb	r3, [r3, #12]
 8013114:	68ba      	ldr	r2, [r7, #8]
 8013116:	3308      	adds	r3, #8
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013124:	68b9      	ldr	r1, [r7, #8]
 8013126:	6989      	ldr	r1, [r1, #24]
 8013128:	78fd      	ldrb	r5, [r7, #3]
 801312a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801312c:	9003      	str	r0, [sp, #12]
 801312e:	9102      	str	r1, [sp, #8]
 8013130:	e9cd 2300 	strd	r2, r3, [sp]
 8013134:	462b      	mov	r3, r5
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	4621      	mov	r1, r4
 801313a:	68f8      	ldr	r0, [r7, #12]
 801313c:	f7ff fe36 	bl	8012dac <rxSessionUpdate>
 8013140:	4603      	mov	r3, r0
 8013142:	77fb      	strb	r3, [r7, #31]
 8013144:	e038      	b.n	80131b8 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	7b1b      	ldrb	r3, [r3, #12]
 801314a:	2bff      	cmp	r3, #255	@ 0xff
 801314c:	d006      	beq.n	801315c <rxAcceptFrame+0x1c4>
 801314e:	4b28      	ldr	r3, [pc, #160]	@ (80131f0 <rxAcceptFrame+0x258>)
 8013150:	4a1d      	ldr	r2, [pc, #116]	@ (80131c8 <rxAcceptFrame+0x230>)
 8013152:	f240 319a 	movw	r1, #922	@ 0x39a
 8013156:	481d      	ldr	r0, [pc, #116]	@ (80131cc <rxAcceptFrame+0x234>)
 8013158:	f000 fbac 	bl	80138b4 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	695a      	ldr	r2, [r3, #20]
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8013164:	4293      	cmp	r3, r2
 8013166:	bf28      	it	cs
 8013168:	4613      	movcs	r3, r2
 801316a:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	69b9      	ldr	r1, [r7, #24]
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	4798      	blx	r3
 8013176:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d01a      	beq.n	80131b4 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 801317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013180:	4619      	mov	r1, r3
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff fb32 	bl	80127ec <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013190:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8013194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013196:	69ba      	ldr	r2, [r7, #24]
 8013198:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 801319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801319c:	697a      	ldr	r2, [r7, #20]
 801319e:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	69ba      	ldr	r2, [r7, #24]
 80131a6:	4619      	mov	r1, r3
 80131a8:	6978      	ldr	r0, [r7, #20]
 80131aa:	f001 fd24 	bl	8014bf6 <memcpy>
            out = 1;
 80131ae:	2301      	movs	r3, #1
 80131b0:	77fb      	strb	r3, [r7, #31]
 80131b2:	e001      	b.n	80131b8 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 80131b4:	23fd      	movs	r3, #253	@ 0xfd
 80131b6:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80131b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3720      	adds	r7, #32
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bdb0      	pop	{r4, r5, r7, pc}
 80131c4:	080183a4 	.word	0x080183a4
 80131c8:	080190cc 	.word	0x080190cc
 80131cc:	080181e0 	.word	0x080181e0
 80131d0:	080188a4 	.word	0x080188a4
 80131d4:	080188c0 	.word	0x080188c0
 80131d8:	08018638 	.word	0x08018638
 80131dc:	08018694 	.word	0x08018694
 80131e0:	080187d4 	.word	0x080187d4
 80131e4:	080188e8 	.word	0x080188e8
 80131e8:	080186b4 	.word	0x080186b4
 80131ec:	08018940 	.word	0x08018940
 80131f0:	0801894c 	.word	0x0801894c

080131f4 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80131f4:	b480      	push	{r7}
 80131f6:	b085      	sub	sp, #20
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	881b      	ldrh	r3, [r3, #0]
 8013202:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	8b9b      	ldrh	r3, [r3, #28]
 8013208:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 801320a:	89fa      	ldrh	r2, [r7, #14]
 801320c:	89bb      	ldrh	r3, [r7, #12]
 801320e:	429a      	cmp	r2, r3
 8013210:	d00a      	beq.n	8013228 <rxSubscriptionPredicateOnPortID+0x34>
 8013212:	89fa      	ldrh	r2, [r7, #14]
 8013214:	89bb      	ldrh	r3, [r7, #12]
 8013216:	429a      	cmp	r2, r3
 8013218:	bf8c      	ite	hi
 801321a:	2301      	movhi	r3, #1
 801321c:	2300      	movls	r3, #0
 801321e:	b2db      	uxtb	r3, r3
 8013220:	461a      	mov	r2, r3
 8013222:	4b05      	ldr	r3, [pc, #20]	@ (8013238 <rxSubscriptionPredicateOnPortID+0x44>)
 8013224:	569b      	ldrsb	r3, [r3, r2]
 8013226:	e000      	b.n	801322a <rxSubscriptionPredicateOnPortID+0x36>
 8013228:	2300      	movs	r3, #0
}
 801322a:	4618      	mov	r0, r3
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop
 8013238:	080190b8 	.word	0x080190b8

0801323c <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	331c      	adds	r3, #28
 801324a:	6839      	ldr	r1, [r7, #0]
 801324c:	4618      	mov	r0, r3
 801324e:	f7ff ffd1 	bl	80131f4 <rxSubscriptionPredicateOnPortID>
 8013252:	4603      	mov	r3, r0
}
 8013254:	4618      	mov	r0, r3
 8013256:	3708      	adds	r7, #8
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 801325c:	b5b0      	push	{r4, r5, r7, lr}
 801325e:	b08c      	sub	sp, #48	@ 0x30
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d106      	bne.n	801327c <canardInit+0x20>
 801326e:	4b16      	ldr	r3, [pc, #88]	@ (80132c8 <canardInit+0x6c>)
 8013270:	4a16      	ldr	r2, [pc, #88]	@ (80132cc <canardInit+0x70>)
 8013272:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8013276:	4816      	ldr	r0, [pc, #88]	@ (80132d0 <canardInit+0x74>)
 8013278:	f000 fb1c 	bl	80138b4 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d106      	bne.n	8013290 <canardInit+0x34>
 8013282:	4b14      	ldr	r3, [pc, #80]	@ (80132d4 <canardInit+0x78>)
 8013284:	4a11      	ldr	r2, [pc, #68]	@ (80132cc <canardInit+0x70>)
 8013286:	f240 31d7 	movw	r1, #983	@ 0x3d7
 801328a:	4811      	ldr	r0, [pc, #68]	@ (80132d0 <canardInit+0x74>)
 801328c:	f000 fb12 	bl	80138b4 <__assert_func>
    const CanardInstance out = {
 8013290:	2300      	movs	r3, #0
 8013292:	617b      	str	r3, [r7, #20]
 8013294:	23ff      	movs	r3, #255	@ 0xff
 8013296:	763b      	strb	r3, [r7, #24]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	61fb      	str	r3, [r7, #28]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	623b      	str	r3, [r7, #32]
 80132a0:	2300      	movs	r3, #0
 80132a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80132a4:	2300      	movs	r3, #0
 80132a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80132a8:	2300      	movs	r3, #0
 80132aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	461d      	mov	r5, r3
 80132b0:	f107 0414 	add.w	r4, r7, #20
 80132b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80132bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80132c0:	68f8      	ldr	r0, [r7, #12]
 80132c2:	3730      	adds	r7, #48	@ 0x30
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bdb0      	pop	{r4, r5, r7, pc}
 80132c8:	0801896c 	.word	0x0801896c
 80132cc:	08018f40 	.word	0x08018f40
 80132d0:	080181e0 	.word	0x080181e0
 80132d4:	0801898c 	.word	0x0801898c

080132d8 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 80132d8:	b4b0      	push	{r4, r5, r7}
 80132da:	b08b      	sub	sp, #44	@ 0x2c
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	617b      	str	r3, [r7, #20]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	61bb      	str	r3, [r7, #24]
 80132ec:	2300      	movs	r3, #0
 80132ee:	61fb      	str	r3, [r7, #28]
 80132f0:	2300      	movs	r3, #0
 80132f2:	623b      	str	r3, [r7, #32]
 80132f4:	2300      	movs	r3, #0
 80132f6:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	461d      	mov	r5, r3
 80132fc:	f107 0414 	add.w	r4, r7, #20
 8013300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	602b      	str	r3, [r5, #0]
}
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	372c      	adds	r7, #44	@ 0x2c
 801330c:	46bd      	mov	sp, r7
 801330e:	bcb0      	pop	{r4, r5, r7}
 8013310:	4770      	bx	lr
	...

08013314 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b08e      	sub	sp, #56	@ 0x38
 8013318:	af06      	add	r7, sp, #24
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013322:	f06f 0301 	mvn.w	r3, #1
 8013326:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d062      	beq.n	80133f4 <canardTxPush+0xe0>
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d05f      	beq.n	80133f4 <canardTxPush+0xe0>
 8013334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013336:	2b00      	cmp	r3, #0
 8013338:	d05c      	beq.n	80133f4 <canardTxPush+0xe0>
 801333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801333c:	2b00      	cmp	r3, #0
 801333e:	d102      	bne.n	8013346 <canardTxPush+0x32>
 8013340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013342:	2b00      	cmp	r3, #0
 8013344:	d156      	bne.n	80133f4 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	4618      	mov	r0, r3
 801334c:	f7fe fc02 	bl	8011b54 <adjustPresentationLayerMTU>
 8013350:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	791a      	ldrb	r2, [r3, #4]
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	9300      	str	r3, [sp, #0]
 801335a:	4613      	mov	r3, r2
 801335c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801335e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013362:	f7fe fc27 	bl	8011bb4 <txMakeCANID>
 8013366:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	2b00      	cmp	r3, #0
 801336c:	db40      	blt.n	80133f0 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 801336e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	429a      	cmp	r2, r3
 8013374:	d81c      	bhi.n	80133b0 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8013376:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8013378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801337a:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 801337c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801337e:	9103      	str	r1, [sp, #12]
 8013380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013382:	9102      	str	r1, [sp, #8]
 8013384:	9201      	str	r2, [sp, #4]
 8013386:	9300      	str	r3, [sp, #0]
 8013388:	e9d7 2300 	ldrd	r2, r3, [r7]
 801338c:	68b9      	ldr	r1, [r7, #8]
 801338e:	68f8      	ldr	r0, [r7, #12]
 8013390:	f7fe fdda 	bl	8011f48 <txPushSingleFrame>
 8013394:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	2b00      	cmp	r3, #0
 801339a:	db2b      	blt.n	80133f4 <canardTxPush+0xe0>
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d028      	beq.n	80133f4 <canardTxPush+0xe0>
 80133a2:	4b1c      	ldr	r3, [pc, #112]	@ (8013414 <canardTxPush+0x100>)
 80133a4:	4a1c      	ldr	r2, [pc, #112]	@ (8013418 <canardTxPush+0x104>)
 80133a6:	f240 4105 	movw	r1, #1029	@ 0x405
 80133aa:	481c      	ldr	r0, [pc, #112]	@ (801341c <canardTxPush+0x108>)
 80133ac:	f000 fa82 	bl	80138b4 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 80133b0:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 80133b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133b4:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 80133b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80133b8:	9105      	str	r1, [sp, #20]
 80133ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133bc:	9104      	str	r1, [sp, #16]
 80133be:	9203      	str	r2, [sp, #12]
 80133c0:	9302      	str	r3, [sp, #8]
 80133c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133c6:	e9cd 2300 	strd	r2, r3, [sp]
 80133ca:	69ba      	ldr	r2, [r7, #24]
 80133cc:	68b9      	ldr	r1, [r7, #8]
 80133ce:	68f8      	ldr	r0, [r7, #12]
 80133d0:	f7fe ffd4 	bl	801237c <txPushMultiFrame>
 80133d4:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	db0b      	blt.n	80133f4 <canardTxPush+0xe0>
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	2b01      	cmp	r3, #1
 80133e0:	dc08      	bgt.n	80133f4 <canardTxPush+0xe0>
 80133e2:	4b0f      	ldr	r3, [pc, #60]	@ (8013420 <canardTxPush+0x10c>)
 80133e4:	4a0c      	ldr	r2, [pc, #48]	@ (8013418 <canardTxPush+0x104>)
 80133e6:	f240 4111 	movw	r1, #1041	@ 0x411
 80133ea:	480c      	ldr	r0, [pc, #48]	@ (801341c <canardTxPush+0x108>)
 80133ec:	f000 fa62 	bl	80138b4 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80133f4:	69fb      	ldr	r3, [r7, #28]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <canardTxPush+0xf4>
 80133fa:	4b0a      	ldr	r3, [pc, #40]	@ (8013424 <canardTxPush+0x110>)
 80133fc:	4a06      	ldr	r2, [pc, #24]	@ (8013418 <canardTxPush+0x104>)
 80133fe:	f240 4119 	movw	r1, #1049	@ 0x419
 8013402:	4806      	ldr	r0, [pc, #24]	@ (801341c <canardTxPush+0x108>)
 8013404:	f000 fa56 	bl	80138b4 <__assert_func>
    return out;
 8013408:	69fb      	ldr	r3, [r7, #28]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3720      	adds	r7, #32
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	080184dc 	.word	0x080184dc
 8013418:	08018f4c 	.word	0x08018f4c
 801341c:	080181e0 	.word	0x080181e0
 8013420:	08018620 	.word	0x08018620
 8013424:	080189a8 	.word	0x080189a8

08013428 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8013430:	2300      	movs	r3, #0
 8013432:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d006      	beq.n	8013448 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	2100      	movs	r1, #0
 8013440:	4618      	mov	r0, r3
 8013442:	f7fd ff1d 	bl	8011280 <cavlFindExtremum>
 8013446:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8013448:	68fb      	ldr	r3, [r7, #12]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
 801345a:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 801345c:	2300      	movs	r3, #0
 801345e:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d010      	beq.n	8013488 <canardTxPop+0x36>
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00d      	beq.n	8013488 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	330c      	adds	r3, #12
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	4611      	mov	r1, r2
 8013478:	4618      	mov	r0, r3
 801347a:	f7fe f957 	bl	801172c <cavlRemove>
        que->size--;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	689b      	ldr	r3, [r3, #8]
 8013482:	1e5a      	subs	r2, r3, #1
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	609a      	str	r2, [r3, #8]
    }
    return out;
 8013488:	68fb      	ldr	r3, [r7, #12]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
	...

08013494 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b090      	sub	sp, #64	@ 0x40
 8013498:	af02      	add	r7, sp, #8
 801349a:	60f8      	str	r0, [r7, #12]
 801349c:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80134a0:	23fe      	movs	r3, #254	@ 0xfe
 80134a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d068      	beq.n	801357e <canardRxAccept+0xea>
 80134ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d065      	beq.n	801357e <canardRxAccept+0xea>
 80134b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d062      	beq.n	801357e <canardRxAccept+0xea>
 80134b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134c0:	d25d      	bcs.n	801357e <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80134c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134c4:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d103      	bne.n	80134d2 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80134ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d155      	bne.n	801357e <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 80134d2:	f107 0310 	add.w	r3, r7, #16
 80134d6:	2220      	movs	r2, #32
 80134d8:	2100      	movs	r1, #0
 80134da:	4618      	mov	r0, r3
 80134dc:	f001 faa5 	bl	8014a2a <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 80134e0:	f107 0310 	add.w	r3, r7, #16
 80134e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80134e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80134ea:	f7ff f83b 	bl	8012564 <rxTryParseFrame>
 80134ee:	4603      	mov	r3, r0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d041      	beq.n	8013578 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 80134f4:	7f7b      	ldrb	r3, [r7, #29]
 80134f6:	2bff      	cmp	r3, #255	@ 0xff
 80134f8:	d004      	beq.n	8013504 <canardRxAccept+0x70>
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	791a      	ldrb	r2, [r3, #4]
 80134fe:	7f7b      	ldrb	r3, [r7, #29]
 8013500:	429a      	cmp	r2, r3
 8013502:	d135      	bne.n	8013570 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 8013504:	7e7b      	ldrb	r3, [r7, #25]
 8013506:	3304      	adds	r3, #4
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	18d0      	adds	r0, r2, r3
 801350e:	f107 0310 	add.w	r3, r7, #16
 8013512:	f103 010a 	add.w	r1, r3, #10
 8013516:	2300      	movs	r3, #0
 8013518:	4a21      	ldr	r2, [pc, #132]	@ (80135a0 <canardRxAccept+0x10c>)
 801351a:	f7fe f889 	bl	8011630 <cavlSearch>
 801351e:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 8013520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013522:	2b00      	cmp	r3, #0
 8013524:	d002      	beq.n	801352c <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 8013526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801352a:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 801352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801352e:	2b00      	cmp	r3, #0
 8013530:	d01a      	beq.n	8013568 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 8013532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013534:	8b9a      	ldrh	r2, [r3, #28]
 8013536:	8b7b      	ldrh	r3, [r7, #26]
 8013538:	429a      	cmp	r2, r3
 801353a:	d006      	beq.n	801354a <canardRxAccept+0xb6>
 801353c:	4b19      	ldr	r3, [pc, #100]	@ (80135a4 <canardRxAccept+0x110>)
 801353e:	4a1a      	ldr	r2, [pc, #104]	@ (80135a8 <canardRxAccept+0x114>)
 8013540:	f240 415a 	movw	r1, #1114	@ 0x45a
 8013544:	4819      	ldr	r0, [pc, #100]	@ (80135ac <canardRxAccept+0x118>)
 8013546:	f000 f9b5 	bl	80138b4 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 801354a:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 801354e:	f107 0210 	add.w	r2, r7, #16
 8013552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013554:	9300      	str	r3, [sp, #0]
 8013556:	460b      	mov	r3, r1
 8013558:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f7ff fd1c 	bl	8012f98 <rxAcceptFrame>
 8013560:	4603      	mov	r3, r0
 8013562:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8013566:	e00a      	b.n	801357e <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8013568:	2300      	movs	r3, #0
 801356a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 801356e:	e006      	b.n	801357e <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8013570:	2300      	movs	r3, #0
 8013572:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013576:	e002      	b.n	801357e <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 8013578:	2300      	movs	r3, #0
 801357a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 801357e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013582:	2b01      	cmp	r3, #1
 8013584:	dd06      	ble.n	8013594 <canardRxAccept+0x100>
 8013586:	4b0a      	ldr	r3, [pc, #40]	@ (80135b0 <canardRxAccept+0x11c>)
 8013588:	4a07      	ldr	r2, [pc, #28]	@ (80135a8 <canardRxAccept+0x114>)
 801358a:	f240 416c 	movw	r1, #1132	@ 0x46c
 801358e:	4807      	ldr	r0, [pc, #28]	@ (80135ac <canardRxAccept+0x118>)
 8013590:	f000 f990 	bl	80138b4 <__assert_func>
    return out;
 8013594:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8013598:	4618      	mov	r0, r3
 801359a:	3738      	adds	r7, #56	@ 0x38
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	080131f5 	.word	0x080131f5
 80135a4:	080189b4 	.word	0x080189b4
 80135a8:	080190a8 	.word	0x080190a8
 80135ac:	080181e0 	.word	0x080181e0
 80135b0:	080189d4 	.word	0x080189d4

080135b4 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b088      	sub	sp, #32
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	607b      	str	r3, [r7, #4]
 80135be:	460b      	mov	r3, r1
 80135c0:	72fb      	strb	r3, [r7, #11]
 80135c2:	4613      	mov	r3, r2
 80135c4:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 80135c6:	23fe      	movs	r3, #254	@ 0xfe
 80135c8:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80135ca:	7afb      	ldrb	r3, [r7, #11]
 80135cc:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d04a      	beq.n	801366a <canardRxSubscribe+0xb6>
 80135d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d047      	beq.n	801366a <canardRxSubscribe+0xb6>
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	2b02      	cmp	r3, #2
 80135de:	d844      	bhi.n	801366a <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 80135e0:	893a      	ldrh	r2, [r7, #8]
 80135e2:	7afb      	ldrb	r3, [r7, #11]
 80135e4:	4619      	mov	r1, r3
 80135e6:	68f8      	ldr	r0, [r7, #12]
 80135e8:	f000 f850 	bl	801368c <canardRxUnsubscribe>
 80135ec:	4603      	mov	r3, r0
 80135ee:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 80135f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	db38      	blt.n	801366a <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 80135f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80135fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80135fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8013602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013604:	687a      	ldr	r2, [r7, #4]
 8013606:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8013608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360a:	893a      	ldrh	r2, [r7, #8]
 801360c:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 801360e:	2300      	movs	r3, #0
 8013610:	61bb      	str	r3, [r7, #24]
 8013612:	e009      	b.n	8013628 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8013614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	3308      	adds	r3, #8
 801361a:	009b      	lsls	r3, r3, #2
 801361c:	4413      	add	r3, r2
 801361e:	2200      	movs	r2, #0
 8013620:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	3301      	adds	r3, #1
 8013626:	61bb      	str	r3, [r7, #24]
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	2b7f      	cmp	r3, #127	@ 0x7f
 801362c:	d9f2      	bls.n	8013614 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	3304      	adds	r3, #4
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	68fa      	ldr	r2, [r7, #12]
 8013636:	18d0      	adds	r0, r2, r3
 8013638:	4b0f      	ldr	r3, [pc, #60]	@ (8013678 <canardRxSubscribe+0xc4>)
 801363a:	4a10      	ldr	r2, [pc, #64]	@ (801367c <canardRxSubscribe+0xc8>)
 801363c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801363e:	f7fd fff7 	bl	8011630 <cavlSearch>
 8013642:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8013644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013646:	693a      	ldr	r2, [r7, #16]
 8013648:	429a      	cmp	r2, r3
 801364a:	d006      	beq.n	801365a <canardRxSubscribe+0xa6>
 801364c:	4b0c      	ldr	r3, [pc, #48]	@ (8013680 <canardRxSubscribe+0xcc>)
 801364e:	4a0d      	ldr	r2, [pc, #52]	@ (8013684 <canardRxSubscribe+0xd0>)
 8013650:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 8013654:	480c      	ldr	r0, [pc, #48]	@ (8013688 <canardRxSubscribe+0xd4>)
 8013656:	f000 f92d 	bl	80138b4 <__assert_func>
            out = (out > 0) ? 0 : 1;
 801365a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801365e:	2b00      	cmp	r3, #0
 8013660:	bfd4      	ite	le
 8013662:	2301      	movle	r3, #1
 8013664:	2300      	movgt	r3, #0
 8013666:	b2db      	uxtb	r3, r3
 8013668:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 801366a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801366e:	4618      	mov	r0, r3
 8013670:	3720      	adds	r7, #32
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	08011991 	.word	0x08011991
 801367c:	0801323d 	.word	0x0801323d
 8013680:	080189e0 	.word	0x080189e0
 8013684:	08019170 	.word	0x08019170
 8013688:	080181e0 	.word	0x080181e0

0801368c <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b088      	sub	sp, #32
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	460b      	mov	r3, r1
 8013696:	70fb      	strb	r3, [r7, #3]
 8013698:	4613      	mov	r3, r2
 801369a:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 801369c:	23fe      	movs	r3, #254	@ 0xfe
 801369e:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80136a0:	78fb      	ldrb	r3, [r7, #3]
 80136a2:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d05f      	beq.n	801376a <canardRxUnsubscribe+0xde>
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	2b02      	cmp	r3, #2
 80136ae:	d85c      	bhi.n	801376a <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 80136b0:	883b      	ldrh	r3, [r7, #0]
 80136b2:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	3304      	adds	r3, #4
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	18d0      	adds	r0, r2, r3
 80136be:	f107 010e 	add.w	r1, r7, #14
 80136c2:	2300      	movs	r3, #0
 80136c4:	4a2c      	ldr	r2, [pc, #176]	@ (8013778 <canardRxUnsubscribe+0xec>)
 80136c6:	f7fd ffb3 	bl	8011630 <cavlSearch>
 80136ca:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d049      	beq.n	8013766 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	3304      	adds	r3, #4
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	4413      	add	r3, r2
 80136dc:	693a      	ldr	r2, [r7, #16]
 80136de:	4611      	mov	r1, r2
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fe f823 	bl	801172c <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	8b9b      	ldrh	r3, [r3, #28]
 80136ea:	883a      	ldrh	r2, [r7, #0]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d006      	beq.n	80136fe <canardRxUnsubscribe+0x72>
 80136f0:	4b22      	ldr	r3, [pc, #136]	@ (801377c <canardRxUnsubscribe+0xf0>)
 80136f2:	4a23      	ldr	r2, [pc, #140]	@ (8013780 <canardRxUnsubscribe+0xf4>)
 80136f4:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 80136f8:	4822      	ldr	r0, [pc, #136]	@ (8013784 <canardRxUnsubscribe+0xf8>)
 80136fa:	f000 f8db 	bl	80138b4 <__assert_func>
            out = 1;
 80136fe:	2301      	movs	r3, #1
 8013700:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013702:	2300      	movs	r3, #0
 8013704:	61bb      	str	r3, [r7, #24]
 8013706:	e02a      	b.n	801375e <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	68da      	ldr	r2, [r3, #12]
 801370c:	6939      	ldr	r1, [r7, #16]
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	3308      	adds	r3, #8
 8013712:	009b      	lsls	r3, r3, #2
 8013714:	440b      	add	r3, r1
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d007      	beq.n	801372c <canardRxUnsubscribe+0xa0>
 801371c:	6939      	ldr	r1, [r7, #16]
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	3308      	adds	r3, #8
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	440b      	add	r3, r1
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	691b      	ldr	r3, [r3, #16]
 801372a:	e000      	b.n	801372e <canardRxUnsubscribe+0xa2>
 801372c:	2300      	movs	r3, #0
 801372e:	4619      	mov	r1, r3
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	68da      	ldr	r2, [r3, #12]
 8013738:	6939      	ldr	r1, [r7, #16]
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	3308      	adds	r3, #8
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	440b      	add	r3, r1
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	4619      	mov	r1, r3
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	4790      	blx	r2
                sub->sessions[i] = NULL;
 801374a:	693a      	ldr	r2, [r7, #16]
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	3308      	adds	r3, #8
 8013750:	009b      	lsls	r3, r3, #2
 8013752:	4413      	add	r3, r2
 8013754:	2200      	movs	r2, #0
 8013756:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	3301      	adds	r3, #1
 801375c:	61bb      	str	r3, [r7, #24]
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	2b7f      	cmp	r3, #127	@ 0x7f
 8013762:	d9d1      	bls.n	8013708 <canardRxUnsubscribe+0x7c>
 8013764:	e001      	b.n	801376a <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 801376a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801376e:	4618      	mov	r0, r3
 8013770:	3720      	adds	r7, #32
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	080131f5 	.word	0x080131f5
 801377c:	08018a00 	.word	0x08018a00
 8013780:	08019184 	.word	0x08019184
 8013784:	080181e0 	.word	0x080181e0

08013788 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 8013788:	b480      	push	{r7}
 801378a:	b085      	sub	sp, #20
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	460b      	mov	r3, r1
 8013792:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 8013794:	f107 0308 	add.w	r3, r7, #8
 8013798:	2200      	movs	r2, #0
 801379a:	601a      	str	r2, [r3, #0]
 801379c:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 801379e:	887b      	ldrh	r3, [r7, #2]
 80137a0:	021b      	lsls	r3, r3, #8
 80137a2:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 80137a4:	4b07      	ldr	r3, [pc, #28]	@ (80137c4 <canardMakeFilterForSubject+0x3c>)
 80137a6:	60fb      	str	r3, [r7, #12]

    return out;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	461a      	mov	r2, r3
 80137ac:	f107 0308 	add.w	r3, r7, #8
 80137b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80137b4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	3714      	adds	r7, #20
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	021fff80 	.word	0x021fff80

080137c8 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b085      	sub	sp, #20
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	460b      	mov	r3, r1
 80137d2:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 80137d4:	f107 0308 	add.w	r3, r7, #8
 80137d8:	2200      	movs	r2, #0
 80137da:	601a      	str	r2, [r3, #0]
 80137dc:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 80137de:	78fb      	ldrb	r3, [r7, #3]
 80137e0:	01db      	lsls	r3, r3, #7
 80137e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80137e6:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 80137e8:	4b07      	ldr	r3, [pc, #28]	@ (8013808 <canardMakeFilterForServices+0x40>)
 80137ea:	60fb      	str	r3, [r7, #12]

    return out;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	461a      	mov	r2, r3
 80137f0:	f107 0308 	add.w	r3, r7, #8
 80137f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80137f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr
 8013808:	02803f80 	.word	0x02803f80

0801380c <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 801380c:	b480      	push	{r7}
 801380e:	b087      	sub	sp, #28
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	60b9      	str	r1, [r7, #8]
 8013816:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 8013818:	f107 0310 	add.w	r3, r7, #16
 801381c:	2200      	movs	r2, #0
 801381e:	601a      	str	r2, [r3, #0]
 8013820:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	685a      	ldr	r2, [r3, #4]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	401a      	ands	r2, r3
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	6819      	ldr	r1, [r3, #0]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	404b      	eors	r3, r1
 8013836:	43db      	mvns	r3, r3
 8013838:	4013      	ands	r3, r2
 801383a:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	4013      	ands	r3, r2
 8013844:	613b      	str	r3, [r7, #16]

    return out;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	461a      	mov	r2, r3
 801384a:	f107 0310 	add.w	r3, r7, #16
 801384e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013852:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8013856:	68f8      	ldr	r0, [r7, #12]
 8013858:	371c      	adds	r7, #28
 801385a:	46bd      	mov	sp, r7
 801385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013860:	4770      	bx	lr

08013862 <_ZdlPvj>:
 8013862:	f000 b814 	b.w	801388e <_ZdlPv>

08013866 <_Znwj>:
 8013866:	2801      	cmp	r0, #1
 8013868:	bf38      	it	cc
 801386a:	2001      	movcc	r0, #1
 801386c:	b510      	push	{r4, lr}
 801386e:	4604      	mov	r4, r0
 8013870:	4620      	mov	r0, r4
 8013872:	f000 f84f 	bl	8013914 <malloc>
 8013876:	b100      	cbz	r0, 801387a <_Znwj+0x14>
 8013878:	bd10      	pop	{r4, pc}
 801387a:	f000 f80b 	bl	8013894 <_ZSt15get_new_handlerv>
 801387e:	b908      	cbnz	r0, 8013884 <_Znwj+0x1e>
 8013880:	f000 f810 	bl	80138a4 <abort>
 8013884:	4780      	blx	r0
 8013886:	e7f3      	b.n	8013870 <_Znwj+0xa>

08013888 <_ZSt25__throw_bad_function_callv>:
 8013888:	b508      	push	{r3, lr}
 801388a:	f000 f80b 	bl	80138a4 <abort>

0801388e <_ZdlPv>:
 801388e:	f000 b849 	b.w	8013924 <free>
	...

08013894 <_ZSt15get_new_handlerv>:
 8013894:	4b02      	ldr	r3, [pc, #8]	@ (80138a0 <_ZSt15get_new_handlerv+0xc>)
 8013896:	6818      	ldr	r0, [r3, #0]
 8013898:	f3bf 8f5b 	dmb	ish
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop
 80138a0:	200009c0 	.word	0x200009c0

080138a4 <abort>:
 80138a4:	b508      	push	{r3, lr}
 80138a6:	2006      	movs	r0, #6
 80138a8:	f001 f902 	bl	8014ab0 <raise>
 80138ac:	2001      	movs	r0, #1
 80138ae:	f7f5 fffd 	bl	80098ac <_exit>
	...

080138b4 <__assert_func>:
 80138b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138b6:	4614      	mov	r4, r2
 80138b8:	461a      	mov	r2, r3
 80138ba:	4b09      	ldr	r3, [pc, #36]	@ (80138e0 <__assert_func+0x2c>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	4605      	mov	r5, r0
 80138c0:	68d8      	ldr	r0, [r3, #12]
 80138c2:	b954      	cbnz	r4, 80138da <__assert_func+0x26>
 80138c4:	4b07      	ldr	r3, [pc, #28]	@ (80138e4 <__assert_func+0x30>)
 80138c6:	461c      	mov	r4, r3
 80138c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138cc:	9100      	str	r1, [sp, #0]
 80138ce:	462b      	mov	r3, r5
 80138d0:	4905      	ldr	r1, [pc, #20]	@ (80138e8 <__assert_func+0x34>)
 80138d2:	f000 ffed 	bl	80148b0 <fiprintf>
 80138d6:	f7ff ffe5 	bl	80138a4 <abort>
 80138da:	4b04      	ldr	r3, [pc, #16]	@ (80138ec <__assert_func+0x38>)
 80138dc:	e7f4      	b.n	80138c8 <__assert_func+0x14>
 80138de:	bf00      	nop
 80138e0:	20000090 	.word	0x20000090
 80138e4:	080191d3 	.word	0x080191d3
 80138e8:	080191a5 	.word	0x080191a5
 80138ec:	08019198 	.word	0x08019198

080138f0 <exit>:
 80138f0:	b508      	push	{r3, lr}
 80138f2:	4b06      	ldr	r3, [pc, #24]	@ (801390c <exit+0x1c>)
 80138f4:	4604      	mov	r4, r0
 80138f6:	b113      	cbz	r3, 80138fe <exit+0xe>
 80138f8:	2100      	movs	r1, #0
 80138fa:	f3af 8000 	nop.w
 80138fe:	4b04      	ldr	r3, [pc, #16]	@ (8013910 <exit+0x20>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	b103      	cbz	r3, 8013906 <exit+0x16>
 8013904:	4798      	blx	r3
 8013906:	4620      	mov	r0, r4
 8013908:	f7f5 ffd0 	bl	80098ac <_exit>
 801390c:	00000000 	.word	0x00000000
 8013910:	20000b04 	.word	0x20000b04

08013914 <malloc>:
 8013914:	4b02      	ldr	r3, [pc, #8]	@ (8013920 <malloc+0xc>)
 8013916:	4601      	mov	r1, r0
 8013918:	6818      	ldr	r0, [r3, #0]
 801391a:	f000 b82d 	b.w	8013978 <_malloc_r>
 801391e:	bf00      	nop
 8013920:	20000090 	.word	0x20000090

08013924 <free>:
 8013924:	4b02      	ldr	r3, [pc, #8]	@ (8013930 <free+0xc>)
 8013926:	4601      	mov	r1, r0
 8013928:	6818      	ldr	r0, [r3, #0]
 801392a:	f001 bfc5 	b.w	80158b8 <_free_r>
 801392e:	bf00      	nop
 8013930:	20000090 	.word	0x20000090

08013934 <sbrk_aligned>:
 8013934:	b570      	push	{r4, r5, r6, lr}
 8013936:	4e0f      	ldr	r6, [pc, #60]	@ (8013974 <sbrk_aligned+0x40>)
 8013938:	460c      	mov	r4, r1
 801393a:	6831      	ldr	r1, [r6, #0]
 801393c:	4605      	mov	r5, r0
 801393e:	b911      	cbnz	r1, 8013946 <sbrk_aligned+0x12>
 8013940:	f001 f90a 	bl	8014b58 <_sbrk_r>
 8013944:	6030      	str	r0, [r6, #0]
 8013946:	4621      	mov	r1, r4
 8013948:	4628      	mov	r0, r5
 801394a:	f001 f905 	bl	8014b58 <_sbrk_r>
 801394e:	1c43      	adds	r3, r0, #1
 8013950:	d103      	bne.n	801395a <sbrk_aligned+0x26>
 8013952:	f04f 34ff 	mov.w	r4, #4294967295
 8013956:	4620      	mov	r0, r4
 8013958:	bd70      	pop	{r4, r5, r6, pc}
 801395a:	1cc4      	adds	r4, r0, #3
 801395c:	f024 0403 	bic.w	r4, r4, #3
 8013960:	42a0      	cmp	r0, r4
 8013962:	d0f8      	beq.n	8013956 <sbrk_aligned+0x22>
 8013964:	1a21      	subs	r1, r4, r0
 8013966:	4628      	mov	r0, r5
 8013968:	f001 f8f6 	bl	8014b58 <_sbrk_r>
 801396c:	3001      	adds	r0, #1
 801396e:	d1f2      	bne.n	8013956 <sbrk_aligned+0x22>
 8013970:	e7ef      	b.n	8013952 <sbrk_aligned+0x1e>
 8013972:	bf00      	nop
 8013974:	200009c4 	.word	0x200009c4

08013978 <_malloc_r>:
 8013978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801397c:	1ccd      	adds	r5, r1, #3
 801397e:	f025 0503 	bic.w	r5, r5, #3
 8013982:	3508      	adds	r5, #8
 8013984:	2d0c      	cmp	r5, #12
 8013986:	bf38      	it	cc
 8013988:	250c      	movcc	r5, #12
 801398a:	2d00      	cmp	r5, #0
 801398c:	4606      	mov	r6, r0
 801398e:	db01      	blt.n	8013994 <_malloc_r+0x1c>
 8013990:	42a9      	cmp	r1, r5
 8013992:	d904      	bls.n	801399e <_malloc_r+0x26>
 8013994:	230c      	movs	r3, #12
 8013996:	6033      	str	r3, [r6, #0]
 8013998:	2000      	movs	r0, #0
 801399a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013a74 <_malloc_r+0xfc>
 80139a2:	f000 f869 	bl	8013a78 <__malloc_lock>
 80139a6:	f8d8 3000 	ldr.w	r3, [r8]
 80139aa:	461c      	mov	r4, r3
 80139ac:	bb44      	cbnz	r4, 8013a00 <_malloc_r+0x88>
 80139ae:	4629      	mov	r1, r5
 80139b0:	4630      	mov	r0, r6
 80139b2:	f7ff ffbf 	bl	8013934 <sbrk_aligned>
 80139b6:	1c43      	adds	r3, r0, #1
 80139b8:	4604      	mov	r4, r0
 80139ba:	d158      	bne.n	8013a6e <_malloc_r+0xf6>
 80139bc:	f8d8 4000 	ldr.w	r4, [r8]
 80139c0:	4627      	mov	r7, r4
 80139c2:	2f00      	cmp	r7, #0
 80139c4:	d143      	bne.n	8013a4e <_malloc_r+0xd6>
 80139c6:	2c00      	cmp	r4, #0
 80139c8:	d04b      	beq.n	8013a62 <_malloc_r+0xea>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	4639      	mov	r1, r7
 80139ce:	4630      	mov	r0, r6
 80139d0:	eb04 0903 	add.w	r9, r4, r3
 80139d4:	f001 f8c0 	bl	8014b58 <_sbrk_r>
 80139d8:	4581      	cmp	r9, r0
 80139da:	d142      	bne.n	8013a62 <_malloc_r+0xea>
 80139dc:	6821      	ldr	r1, [r4, #0]
 80139de:	1a6d      	subs	r5, r5, r1
 80139e0:	4629      	mov	r1, r5
 80139e2:	4630      	mov	r0, r6
 80139e4:	f7ff ffa6 	bl	8013934 <sbrk_aligned>
 80139e8:	3001      	adds	r0, #1
 80139ea:	d03a      	beq.n	8013a62 <_malloc_r+0xea>
 80139ec:	6823      	ldr	r3, [r4, #0]
 80139ee:	442b      	add	r3, r5
 80139f0:	6023      	str	r3, [r4, #0]
 80139f2:	f8d8 3000 	ldr.w	r3, [r8]
 80139f6:	685a      	ldr	r2, [r3, #4]
 80139f8:	bb62      	cbnz	r2, 8013a54 <_malloc_r+0xdc>
 80139fa:	f8c8 7000 	str.w	r7, [r8]
 80139fe:	e00f      	b.n	8013a20 <_malloc_r+0xa8>
 8013a00:	6822      	ldr	r2, [r4, #0]
 8013a02:	1b52      	subs	r2, r2, r5
 8013a04:	d420      	bmi.n	8013a48 <_malloc_r+0xd0>
 8013a06:	2a0b      	cmp	r2, #11
 8013a08:	d917      	bls.n	8013a3a <_malloc_r+0xc2>
 8013a0a:	1961      	adds	r1, r4, r5
 8013a0c:	42a3      	cmp	r3, r4
 8013a0e:	6025      	str	r5, [r4, #0]
 8013a10:	bf18      	it	ne
 8013a12:	6059      	strne	r1, [r3, #4]
 8013a14:	6863      	ldr	r3, [r4, #4]
 8013a16:	bf08      	it	eq
 8013a18:	f8c8 1000 	streq.w	r1, [r8]
 8013a1c:	5162      	str	r2, [r4, r5]
 8013a1e:	604b      	str	r3, [r1, #4]
 8013a20:	4630      	mov	r0, r6
 8013a22:	f000 f82f 	bl	8013a84 <__malloc_unlock>
 8013a26:	f104 000b 	add.w	r0, r4, #11
 8013a2a:	1d23      	adds	r3, r4, #4
 8013a2c:	f020 0007 	bic.w	r0, r0, #7
 8013a30:	1ac2      	subs	r2, r0, r3
 8013a32:	bf1c      	itt	ne
 8013a34:	1a1b      	subne	r3, r3, r0
 8013a36:	50a3      	strne	r3, [r4, r2]
 8013a38:	e7af      	b.n	801399a <_malloc_r+0x22>
 8013a3a:	6862      	ldr	r2, [r4, #4]
 8013a3c:	42a3      	cmp	r3, r4
 8013a3e:	bf0c      	ite	eq
 8013a40:	f8c8 2000 	streq.w	r2, [r8]
 8013a44:	605a      	strne	r2, [r3, #4]
 8013a46:	e7eb      	b.n	8013a20 <_malloc_r+0xa8>
 8013a48:	4623      	mov	r3, r4
 8013a4a:	6864      	ldr	r4, [r4, #4]
 8013a4c:	e7ae      	b.n	80139ac <_malloc_r+0x34>
 8013a4e:	463c      	mov	r4, r7
 8013a50:	687f      	ldr	r7, [r7, #4]
 8013a52:	e7b6      	b.n	80139c2 <_malloc_r+0x4a>
 8013a54:	461a      	mov	r2, r3
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	42a3      	cmp	r3, r4
 8013a5a:	d1fb      	bne.n	8013a54 <_malloc_r+0xdc>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	6053      	str	r3, [r2, #4]
 8013a60:	e7de      	b.n	8013a20 <_malloc_r+0xa8>
 8013a62:	230c      	movs	r3, #12
 8013a64:	6033      	str	r3, [r6, #0]
 8013a66:	4630      	mov	r0, r6
 8013a68:	f000 f80c 	bl	8013a84 <__malloc_unlock>
 8013a6c:	e794      	b.n	8013998 <_malloc_r+0x20>
 8013a6e:	6005      	str	r5, [r0, #0]
 8013a70:	e7d6      	b.n	8013a20 <_malloc_r+0xa8>
 8013a72:	bf00      	nop
 8013a74:	200009c8 	.word	0x200009c8

08013a78 <__malloc_lock>:
 8013a78:	4801      	ldr	r0, [pc, #4]	@ (8013a80 <__malloc_lock+0x8>)
 8013a7a:	f001 b8ba 	b.w	8014bf2 <__retarget_lock_acquire_recursive>
 8013a7e:	bf00      	nop
 8013a80:	20000b0c 	.word	0x20000b0c

08013a84 <__malloc_unlock>:
 8013a84:	4801      	ldr	r0, [pc, #4]	@ (8013a8c <__malloc_unlock+0x8>)
 8013a86:	f001 b8b5 	b.w	8014bf4 <__retarget_lock_release_recursive>
 8013a8a:	bf00      	nop
 8013a8c:	20000b0c 	.word	0x20000b0c

08013a90 <__cvt>:
 8013a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a94:	ec57 6b10 	vmov	r6, r7, d0
 8013a98:	2f00      	cmp	r7, #0
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	463b      	mov	r3, r7
 8013aa0:	bfbb      	ittet	lt
 8013aa2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013aa6:	461f      	movlt	r7, r3
 8013aa8:	2300      	movge	r3, #0
 8013aaa:	232d      	movlt	r3, #45	@ 0x2d
 8013aac:	700b      	strb	r3, [r1, #0]
 8013aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ab0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013ab4:	4691      	mov	r9, r2
 8013ab6:	f023 0820 	bic.w	r8, r3, #32
 8013aba:	bfbc      	itt	lt
 8013abc:	4632      	movlt	r2, r6
 8013abe:	4616      	movlt	r6, r2
 8013ac0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013ac4:	d005      	beq.n	8013ad2 <__cvt+0x42>
 8013ac6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013aca:	d100      	bne.n	8013ace <__cvt+0x3e>
 8013acc:	3401      	adds	r4, #1
 8013ace:	2102      	movs	r1, #2
 8013ad0:	e000      	b.n	8013ad4 <__cvt+0x44>
 8013ad2:	2103      	movs	r1, #3
 8013ad4:	ab03      	add	r3, sp, #12
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	ab02      	add	r3, sp, #8
 8013ada:	9300      	str	r3, [sp, #0]
 8013adc:	ec47 6b10 	vmov	d0, r6, r7
 8013ae0:	4653      	mov	r3, sl
 8013ae2:	4622      	mov	r2, r4
 8013ae4:	f001 f924 	bl	8014d30 <_dtoa_r>
 8013ae8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013aec:	4605      	mov	r5, r0
 8013aee:	d119      	bne.n	8013b24 <__cvt+0x94>
 8013af0:	f019 0f01 	tst.w	r9, #1
 8013af4:	d00e      	beq.n	8013b14 <__cvt+0x84>
 8013af6:	eb00 0904 	add.w	r9, r0, r4
 8013afa:	2200      	movs	r2, #0
 8013afc:	2300      	movs	r3, #0
 8013afe:	4630      	mov	r0, r6
 8013b00:	4639      	mov	r1, r7
 8013b02:	f7ed f809 	bl	8000b18 <__aeabi_dcmpeq>
 8013b06:	b108      	cbz	r0, 8013b0c <__cvt+0x7c>
 8013b08:	f8cd 900c 	str.w	r9, [sp, #12]
 8013b0c:	2230      	movs	r2, #48	@ 0x30
 8013b0e:	9b03      	ldr	r3, [sp, #12]
 8013b10:	454b      	cmp	r3, r9
 8013b12:	d31e      	bcc.n	8013b52 <__cvt+0xc2>
 8013b14:	9b03      	ldr	r3, [sp, #12]
 8013b16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b18:	1b5b      	subs	r3, r3, r5
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	6013      	str	r3, [r2, #0]
 8013b1e:	b004      	add	sp, #16
 8013b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013b28:	eb00 0904 	add.w	r9, r0, r4
 8013b2c:	d1e5      	bne.n	8013afa <__cvt+0x6a>
 8013b2e:	7803      	ldrb	r3, [r0, #0]
 8013b30:	2b30      	cmp	r3, #48	@ 0x30
 8013b32:	d10a      	bne.n	8013b4a <__cvt+0xba>
 8013b34:	2200      	movs	r2, #0
 8013b36:	2300      	movs	r3, #0
 8013b38:	4630      	mov	r0, r6
 8013b3a:	4639      	mov	r1, r7
 8013b3c:	f7ec ffec 	bl	8000b18 <__aeabi_dcmpeq>
 8013b40:	b918      	cbnz	r0, 8013b4a <__cvt+0xba>
 8013b42:	f1c4 0401 	rsb	r4, r4, #1
 8013b46:	f8ca 4000 	str.w	r4, [sl]
 8013b4a:	f8da 3000 	ldr.w	r3, [sl]
 8013b4e:	4499      	add	r9, r3
 8013b50:	e7d3      	b.n	8013afa <__cvt+0x6a>
 8013b52:	1c59      	adds	r1, r3, #1
 8013b54:	9103      	str	r1, [sp, #12]
 8013b56:	701a      	strb	r2, [r3, #0]
 8013b58:	e7d9      	b.n	8013b0e <__cvt+0x7e>

08013b5a <__exponent>:
 8013b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b5c:	2900      	cmp	r1, #0
 8013b5e:	bfba      	itte	lt
 8013b60:	4249      	neglt	r1, r1
 8013b62:	232d      	movlt	r3, #45	@ 0x2d
 8013b64:	232b      	movge	r3, #43	@ 0x2b
 8013b66:	2909      	cmp	r1, #9
 8013b68:	7002      	strb	r2, [r0, #0]
 8013b6a:	7043      	strb	r3, [r0, #1]
 8013b6c:	dd29      	ble.n	8013bc2 <__exponent+0x68>
 8013b6e:	f10d 0307 	add.w	r3, sp, #7
 8013b72:	461d      	mov	r5, r3
 8013b74:	270a      	movs	r7, #10
 8013b76:	461a      	mov	r2, r3
 8013b78:	fbb1 f6f7 	udiv	r6, r1, r7
 8013b7c:	fb07 1416 	mls	r4, r7, r6, r1
 8013b80:	3430      	adds	r4, #48	@ 0x30
 8013b82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013b86:	460c      	mov	r4, r1
 8013b88:	2c63      	cmp	r4, #99	@ 0x63
 8013b8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b8e:	4631      	mov	r1, r6
 8013b90:	dcf1      	bgt.n	8013b76 <__exponent+0x1c>
 8013b92:	3130      	adds	r1, #48	@ 0x30
 8013b94:	1e94      	subs	r4, r2, #2
 8013b96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013b9a:	1c41      	adds	r1, r0, #1
 8013b9c:	4623      	mov	r3, r4
 8013b9e:	42ab      	cmp	r3, r5
 8013ba0:	d30a      	bcc.n	8013bb8 <__exponent+0x5e>
 8013ba2:	f10d 0309 	add.w	r3, sp, #9
 8013ba6:	1a9b      	subs	r3, r3, r2
 8013ba8:	42ac      	cmp	r4, r5
 8013baa:	bf88      	it	hi
 8013bac:	2300      	movhi	r3, #0
 8013bae:	3302      	adds	r3, #2
 8013bb0:	4403      	add	r3, r0
 8013bb2:	1a18      	subs	r0, r3, r0
 8013bb4:	b003      	add	sp, #12
 8013bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013bbc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013bc0:	e7ed      	b.n	8013b9e <__exponent+0x44>
 8013bc2:	2330      	movs	r3, #48	@ 0x30
 8013bc4:	3130      	adds	r1, #48	@ 0x30
 8013bc6:	7083      	strb	r3, [r0, #2]
 8013bc8:	70c1      	strb	r1, [r0, #3]
 8013bca:	1d03      	adds	r3, r0, #4
 8013bcc:	e7f1      	b.n	8013bb2 <__exponent+0x58>
	...

08013bd0 <_printf_float>:
 8013bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	b08d      	sub	sp, #52	@ 0x34
 8013bd6:	460c      	mov	r4, r1
 8013bd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013bdc:	4616      	mov	r6, r2
 8013bde:	461f      	mov	r7, r3
 8013be0:	4605      	mov	r5, r0
 8013be2:	f000 ff6d 	bl	8014ac0 <_localeconv_r>
 8013be6:	6803      	ldr	r3, [r0, #0]
 8013be8:	9304      	str	r3, [sp, #16]
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7ec fb68 	bl	80002c0 <strlen>
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8013bf8:	9005      	str	r0, [sp, #20]
 8013bfa:	3307      	adds	r3, #7
 8013bfc:	f023 0307 	bic.w	r3, r3, #7
 8013c00:	f103 0208 	add.w	r2, r3, #8
 8013c04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013c08:	f8d4 b000 	ldr.w	fp, [r4]
 8013c0c:	f8c8 2000 	str.w	r2, [r8]
 8013c10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013c18:	9307      	str	r3, [sp, #28]
 8013c1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8013c1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c26:	4b9c      	ldr	r3, [pc, #624]	@ (8013e98 <_printf_float+0x2c8>)
 8013c28:	f04f 32ff 	mov.w	r2, #4294967295
 8013c2c:	f7ec ffa6 	bl	8000b7c <__aeabi_dcmpun>
 8013c30:	bb70      	cbnz	r0, 8013c90 <_printf_float+0xc0>
 8013c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c36:	4b98      	ldr	r3, [pc, #608]	@ (8013e98 <_printf_float+0x2c8>)
 8013c38:	f04f 32ff 	mov.w	r2, #4294967295
 8013c3c:	f7ec ff80 	bl	8000b40 <__aeabi_dcmple>
 8013c40:	bb30      	cbnz	r0, 8013c90 <_printf_float+0xc0>
 8013c42:	2200      	movs	r2, #0
 8013c44:	2300      	movs	r3, #0
 8013c46:	4640      	mov	r0, r8
 8013c48:	4649      	mov	r1, r9
 8013c4a:	f7ec ff6f 	bl	8000b2c <__aeabi_dcmplt>
 8013c4e:	b110      	cbz	r0, 8013c56 <_printf_float+0x86>
 8013c50:	232d      	movs	r3, #45	@ 0x2d
 8013c52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c56:	4a91      	ldr	r2, [pc, #580]	@ (8013e9c <_printf_float+0x2cc>)
 8013c58:	4b91      	ldr	r3, [pc, #580]	@ (8013ea0 <_printf_float+0x2d0>)
 8013c5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013c5e:	bf94      	ite	ls
 8013c60:	4690      	movls	r8, r2
 8013c62:	4698      	movhi	r8, r3
 8013c64:	2303      	movs	r3, #3
 8013c66:	6123      	str	r3, [r4, #16]
 8013c68:	f02b 0304 	bic.w	r3, fp, #4
 8013c6c:	6023      	str	r3, [r4, #0]
 8013c6e:	f04f 0900 	mov.w	r9, #0
 8013c72:	9700      	str	r7, [sp, #0]
 8013c74:	4633      	mov	r3, r6
 8013c76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013c78:	4621      	mov	r1, r4
 8013c7a:	4628      	mov	r0, r5
 8013c7c:	f000 f9d2 	bl	8014024 <_printf_common>
 8013c80:	3001      	adds	r0, #1
 8013c82:	f040 808d 	bne.w	8013da0 <_printf_float+0x1d0>
 8013c86:	f04f 30ff 	mov.w	r0, #4294967295
 8013c8a:	b00d      	add	sp, #52	@ 0x34
 8013c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c90:	4642      	mov	r2, r8
 8013c92:	464b      	mov	r3, r9
 8013c94:	4640      	mov	r0, r8
 8013c96:	4649      	mov	r1, r9
 8013c98:	f7ec ff70 	bl	8000b7c <__aeabi_dcmpun>
 8013c9c:	b140      	cbz	r0, 8013cb0 <_printf_float+0xe0>
 8013c9e:	464b      	mov	r3, r9
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	bfbc      	itt	lt
 8013ca4:	232d      	movlt	r3, #45	@ 0x2d
 8013ca6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013caa:	4a7e      	ldr	r2, [pc, #504]	@ (8013ea4 <_printf_float+0x2d4>)
 8013cac:	4b7e      	ldr	r3, [pc, #504]	@ (8013ea8 <_printf_float+0x2d8>)
 8013cae:	e7d4      	b.n	8013c5a <_printf_float+0x8a>
 8013cb0:	6863      	ldr	r3, [r4, #4]
 8013cb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013cb6:	9206      	str	r2, [sp, #24]
 8013cb8:	1c5a      	adds	r2, r3, #1
 8013cba:	d13b      	bne.n	8013d34 <_printf_float+0x164>
 8013cbc:	2306      	movs	r3, #6
 8013cbe:	6063      	str	r3, [r4, #4]
 8013cc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	6022      	str	r2, [r4, #0]
 8013cc8:	9303      	str	r3, [sp, #12]
 8013cca:	ab0a      	add	r3, sp, #40	@ 0x28
 8013ccc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013cd0:	ab09      	add	r3, sp, #36	@ 0x24
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	6861      	ldr	r1, [r4, #4]
 8013cd6:	ec49 8b10 	vmov	d0, r8, r9
 8013cda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f7ff fed6 	bl	8013a90 <__cvt>
 8013ce4:	9b06      	ldr	r3, [sp, #24]
 8013ce6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013ce8:	2b47      	cmp	r3, #71	@ 0x47
 8013cea:	4680      	mov	r8, r0
 8013cec:	d129      	bne.n	8013d42 <_printf_float+0x172>
 8013cee:	1cc8      	adds	r0, r1, #3
 8013cf0:	db02      	blt.n	8013cf8 <_printf_float+0x128>
 8013cf2:	6863      	ldr	r3, [r4, #4]
 8013cf4:	4299      	cmp	r1, r3
 8013cf6:	dd41      	ble.n	8013d7c <_printf_float+0x1ac>
 8013cf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8013cfc:	fa5f fa8a 	uxtb.w	sl, sl
 8013d00:	3901      	subs	r1, #1
 8013d02:	4652      	mov	r2, sl
 8013d04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013d08:	9109      	str	r1, [sp, #36]	@ 0x24
 8013d0a:	f7ff ff26 	bl	8013b5a <__exponent>
 8013d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013d10:	1813      	adds	r3, r2, r0
 8013d12:	2a01      	cmp	r2, #1
 8013d14:	4681      	mov	r9, r0
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	dc02      	bgt.n	8013d20 <_printf_float+0x150>
 8013d1a:	6822      	ldr	r2, [r4, #0]
 8013d1c:	07d2      	lsls	r2, r2, #31
 8013d1e:	d501      	bpl.n	8013d24 <_printf_float+0x154>
 8013d20:	3301      	adds	r3, #1
 8013d22:	6123      	str	r3, [r4, #16]
 8013d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d0a2      	beq.n	8013c72 <_printf_float+0xa2>
 8013d2c:	232d      	movs	r3, #45	@ 0x2d
 8013d2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013d32:	e79e      	b.n	8013c72 <_printf_float+0xa2>
 8013d34:	9a06      	ldr	r2, [sp, #24]
 8013d36:	2a47      	cmp	r2, #71	@ 0x47
 8013d38:	d1c2      	bne.n	8013cc0 <_printf_float+0xf0>
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d1c0      	bne.n	8013cc0 <_printf_float+0xf0>
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e7bd      	b.n	8013cbe <_printf_float+0xee>
 8013d42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013d46:	d9db      	bls.n	8013d00 <_printf_float+0x130>
 8013d48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013d4c:	d118      	bne.n	8013d80 <_printf_float+0x1b0>
 8013d4e:	2900      	cmp	r1, #0
 8013d50:	6863      	ldr	r3, [r4, #4]
 8013d52:	dd0b      	ble.n	8013d6c <_printf_float+0x19c>
 8013d54:	6121      	str	r1, [r4, #16]
 8013d56:	b913      	cbnz	r3, 8013d5e <_printf_float+0x18e>
 8013d58:	6822      	ldr	r2, [r4, #0]
 8013d5a:	07d0      	lsls	r0, r2, #31
 8013d5c:	d502      	bpl.n	8013d64 <_printf_float+0x194>
 8013d5e:	3301      	adds	r3, #1
 8013d60:	440b      	add	r3, r1
 8013d62:	6123      	str	r3, [r4, #16]
 8013d64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013d66:	f04f 0900 	mov.w	r9, #0
 8013d6a:	e7db      	b.n	8013d24 <_printf_float+0x154>
 8013d6c:	b913      	cbnz	r3, 8013d74 <_printf_float+0x1a4>
 8013d6e:	6822      	ldr	r2, [r4, #0]
 8013d70:	07d2      	lsls	r2, r2, #31
 8013d72:	d501      	bpl.n	8013d78 <_printf_float+0x1a8>
 8013d74:	3302      	adds	r3, #2
 8013d76:	e7f4      	b.n	8013d62 <_printf_float+0x192>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e7f2      	b.n	8013d62 <_printf_float+0x192>
 8013d7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d82:	4299      	cmp	r1, r3
 8013d84:	db05      	blt.n	8013d92 <_printf_float+0x1c2>
 8013d86:	6823      	ldr	r3, [r4, #0]
 8013d88:	6121      	str	r1, [r4, #16]
 8013d8a:	07d8      	lsls	r0, r3, #31
 8013d8c:	d5ea      	bpl.n	8013d64 <_printf_float+0x194>
 8013d8e:	1c4b      	adds	r3, r1, #1
 8013d90:	e7e7      	b.n	8013d62 <_printf_float+0x192>
 8013d92:	2900      	cmp	r1, #0
 8013d94:	bfd4      	ite	le
 8013d96:	f1c1 0202 	rsble	r2, r1, #2
 8013d9a:	2201      	movgt	r2, #1
 8013d9c:	4413      	add	r3, r2
 8013d9e:	e7e0      	b.n	8013d62 <_printf_float+0x192>
 8013da0:	6823      	ldr	r3, [r4, #0]
 8013da2:	055a      	lsls	r2, r3, #21
 8013da4:	d407      	bmi.n	8013db6 <_printf_float+0x1e6>
 8013da6:	6923      	ldr	r3, [r4, #16]
 8013da8:	4642      	mov	r2, r8
 8013daa:	4631      	mov	r1, r6
 8013dac:	4628      	mov	r0, r5
 8013dae:	47b8      	blx	r7
 8013db0:	3001      	adds	r0, #1
 8013db2:	d12b      	bne.n	8013e0c <_printf_float+0x23c>
 8013db4:	e767      	b.n	8013c86 <_printf_float+0xb6>
 8013db6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013dba:	f240 80dd 	bls.w	8013f78 <_printf_float+0x3a8>
 8013dbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	f7ec fea7 	bl	8000b18 <__aeabi_dcmpeq>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d033      	beq.n	8013e36 <_printf_float+0x266>
 8013dce:	4a37      	ldr	r2, [pc, #220]	@ (8013eac <_printf_float+0x2dc>)
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	47b8      	blx	r7
 8013dd8:	3001      	adds	r0, #1
 8013dda:	f43f af54 	beq.w	8013c86 <_printf_float+0xb6>
 8013dde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013de2:	4543      	cmp	r3, r8
 8013de4:	db02      	blt.n	8013dec <_printf_float+0x21c>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	07d8      	lsls	r0, r3, #31
 8013dea:	d50f      	bpl.n	8013e0c <_printf_float+0x23c>
 8013dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013df0:	4631      	mov	r1, r6
 8013df2:	4628      	mov	r0, r5
 8013df4:	47b8      	blx	r7
 8013df6:	3001      	adds	r0, #1
 8013df8:	f43f af45 	beq.w	8013c86 <_printf_float+0xb6>
 8013dfc:	f04f 0900 	mov.w	r9, #0
 8013e00:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e04:	f104 0a1a 	add.w	sl, r4, #26
 8013e08:	45c8      	cmp	r8, r9
 8013e0a:	dc09      	bgt.n	8013e20 <_printf_float+0x250>
 8013e0c:	6823      	ldr	r3, [r4, #0]
 8013e0e:	079b      	lsls	r3, r3, #30
 8013e10:	f100 8103 	bmi.w	801401a <_printf_float+0x44a>
 8013e14:	68e0      	ldr	r0, [r4, #12]
 8013e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e18:	4298      	cmp	r0, r3
 8013e1a:	bfb8      	it	lt
 8013e1c:	4618      	movlt	r0, r3
 8013e1e:	e734      	b.n	8013c8a <_printf_float+0xba>
 8013e20:	2301      	movs	r3, #1
 8013e22:	4652      	mov	r2, sl
 8013e24:	4631      	mov	r1, r6
 8013e26:	4628      	mov	r0, r5
 8013e28:	47b8      	blx	r7
 8013e2a:	3001      	adds	r0, #1
 8013e2c:	f43f af2b 	beq.w	8013c86 <_printf_float+0xb6>
 8013e30:	f109 0901 	add.w	r9, r9, #1
 8013e34:	e7e8      	b.n	8013e08 <_printf_float+0x238>
 8013e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	dc39      	bgt.n	8013eb0 <_printf_float+0x2e0>
 8013e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8013eac <_printf_float+0x2dc>)
 8013e3e:	2301      	movs	r3, #1
 8013e40:	4631      	mov	r1, r6
 8013e42:	4628      	mov	r0, r5
 8013e44:	47b8      	blx	r7
 8013e46:	3001      	adds	r0, #1
 8013e48:	f43f af1d 	beq.w	8013c86 <_printf_float+0xb6>
 8013e4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013e50:	ea59 0303 	orrs.w	r3, r9, r3
 8013e54:	d102      	bne.n	8013e5c <_printf_float+0x28c>
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	07d9      	lsls	r1, r3, #31
 8013e5a:	d5d7      	bpl.n	8013e0c <_printf_float+0x23c>
 8013e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e60:	4631      	mov	r1, r6
 8013e62:	4628      	mov	r0, r5
 8013e64:	47b8      	blx	r7
 8013e66:	3001      	adds	r0, #1
 8013e68:	f43f af0d 	beq.w	8013c86 <_printf_float+0xb6>
 8013e6c:	f04f 0a00 	mov.w	sl, #0
 8013e70:	f104 0b1a 	add.w	fp, r4, #26
 8013e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e76:	425b      	negs	r3, r3
 8013e78:	4553      	cmp	r3, sl
 8013e7a:	dc01      	bgt.n	8013e80 <_printf_float+0x2b0>
 8013e7c:	464b      	mov	r3, r9
 8013e7e:	e793      	b.n	8013da8 <_printf_float+0x1d8>
 8013e80:	2301      	movs	r3, #1
 8013e82:	465a      	mov	r2, fp
 8013e84:	4631      	mov	r1, r6
 8013e86:	4628      	mov	r0, r5
 8013e88:	47b8      	blx	r7
 8013e8a:	3001      	adds	r0, #1
 8013e8c:	f43f aefb 	beq.w	8013c86 <_printf_float+0xb6>
 8013e90:	f10a 0a01 	add.w	sl, sl, #1
 8013e94:	e7ee      	b.n	8013e74 <_printf_float+0x2a4>
 8013e96:	bf00      	nop
 8013e98:	7fefffff 	.word	0x7fefffff
 8013e9c:	080191d4 	.word	0x080191d4
 8013ea0:	080191d8 	.word	0x080191d8
 8013ea4:	080191dc 	.word	0x080191dc
 8013ea8:	080191e0 	.word	0x080191e0
 8013eac:	080191e4 	.word	0x080191e4
 8013eb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013eb2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013eb6:	4553      	cmp	r3, sl
 8013eb8:	bfa8      	it	ge
 8013eba:	4653      	movge	r3, sl
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	4699      	mov	r9, r3
 8013ec0:	dc36      	bgt.n	8013f30 <_printf_float+0x360>
 8013ec2:	f04f 0b00 	mov.w	fp, #0
 8013ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013eca:	f104 021a 	add.w	r2, r4, #26
 8013ece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013ed0:	9306      	str	r3, [sp, #24]
 8013ed2:	eba3 0309 	sub.w	r3, r3, r9
 8013ed6:	455b      	cmp	r3, fp
 8013ed8:	dc31      	bgt.n	8013f3e <_printf_float+0x36e>
 8013eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013edc:	459a      	cmp	sl, r3
 8013ede:	dc3a      	bgt.n	8013f56 <_printf_float+0x386>
 8013ee0:	6823      	ldr	r3, [r4, #0]
 8013ee2:	07da      	lsls	r2, r3, #31
 8013ee4:	d437      	bmi.n	8013f56 <_printf_float+0x386>
 8013ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ee8:	ebaa 0903 	sub.w	r9, sl, r3
 8013eec:	9b06      	ldr	r3, [sp, #24]
 8013eee:	ebaa 0303 	sub.w	r3, sl, r3
 8013ef2:	4599      	cmp	r9, r3
 8013ef4:	bfa8      	it	ge
 8013ef6:	4699      	movge	r9, r3
 8013ef8:	f1b9 0f00 	cmp.w	r9, #0
 8013efc:	dc33      	bgt.n	8013f66 <_printf_float+0x396>
 8013efe:	f04f 0800 	mov.w	r8, #0
 8013f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f06:	f104 0b1a 	add.w	fp, r4, #26
 8013f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8013f10:	eba3 0309 	sub.w	r3, r3, r9
 8013f14:	4543      	cmp	r3, r8
 8013f16:	f77f af79 	ble.w	8013e0c <_printf_float+0x23c>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	465a      	mov	r2, fp
 8013f1e:	4631      	mov	r1, r6
 8013f20:	4628      	mov	r0, r5
 8013f22:	47b8      	blx	r7
 8013f24:	3001      	adds	r0, #1
 8013f26:	f43f aeae 	beq.w	8013c86 <_printf_float+0xb6>
 8013f2a:	f108 0801 	add.w	r8, r8, #1
 8013f2e:	e7ec      	b.n	8013f0a <_printf_float+0x33a>
 8013f30:	4642      	mov	r2, r8
 8013f32:	4631      	mov	r1, r6
 8013f34:	4628      	mov	r0, r5
 8013f36:	47b8      	blx	r7
 8013f38:	3001      	adds	r0, #1
 8013f3a:	d1c2      	bne.n	8013ec2 <_printf_float+0x2f2>
 8013f3c:	e6a3      	b.n	8013c86 <_printf_float+0xb6>
 8013f3e:	2301      	movs	r3, #1
 8013f40:	4631      	mov	r1, r6
 8013f42:	4628      	mov	r0, r5
 8013f44:	9206      	str	r2, [sp, #24]
 8013f46:	47b8      	blx	r7
 8013f48:	3001      	adds	r0, #1
 8013f4a:	f43f ae9c 	beq.w	8013c86 <_printf_float+0xb6>
 8013f4e:	9a06      	ldr	r2, [sp, #24]
 8013f50:	f10b 0b01 	add.w	fp, fp, #1
 8013f54:	e7bb      	b.n	8013ece <_printf_float+0x2fe>
 8013f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f5a:	4631      	mov	r1, r6
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	47b8      	blx	r7
 8013f60:	3001      	adds	r0, #1
 8013f62:	d1c0      	bne.n	8013ee6 <_printf_float+0x316>
 8013f64:	e68f      	b.n	8013c86 <_printf_float+0xb6>
 8013f66:	9a06      	ldr	r2, [sp, #24]
 8013f68:	464b      	mov	r3, r9
 8013f6a:	4442      	add	r2, r8
 8013f6c:	4631      	mov	r1, r6
 8013f6e:	4628      	mov	r0, r5
 8013f70:	47b8      	blx	r7
 8013f72:	3001      	adds	r0, #1
 8013f74:	d1c3      	bne.n	8013efe <_printf_float+0x32e>
 8013f76:	e686      	b.n	8013c86 <_printf_float+0xb6>
 8013f78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013f7c:	f1ba 0f01 	cmp.w	sl, #1
 8013f80:	dc01      	bgt.n	8013f86 <_printf_float+0x3b6>
 8013f82:	07db      	lsls	r3, r3, #31
 8013f84:	d536      	bpl.n	8013ff4 <_printf_float+0x424>
 8013f86:	2301      	movs	r3, #1
 8013f88:	4642      	mov	r2, r8
 8013f8a:	4631      	mov	r1, r6
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	47b8      	blx	r7
 8013f90:	3001      	adds	r0, #1
 8013f92:	f43f ae78 	beq.w	8013c86 <_printf_float+0xb6>
 8013f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f9a:	4631      	mov	r1, r6
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	47b8      	blx	r7
 8013fa0:	3001      	adds	r0, #1
 8013fa2:	f43f ae70 	beq.w	8013c86 <_printf_float+0xb6>
 8013fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013faa:	2200      	movs	r2, #0
 8013fac:	2300      	movs	r3, #0
 8013fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fb2:	f7ec fdb1 	bl	8000b18 <__aeabi_dcmpeq>
 8013fb6:	b9c0      	cbnz	r0, 8013fea <_printf_float+0x41a>
 8013fb8:	4653      	mov	r3, sl
 8013fba:	f108 0201 	add.w	r2, r8, #1
 8013fbe:	4631      	mov	r1, r6
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	47b8      	blx	r7
 8013fc4:	3001      	adds	r0, #1
 8013fc6:	d10c      	bne.n	8013fe2 <_printf_float+0x412>
 8013fc8:	e65d      	b.n	8013c86 <_printf_float+0xb6>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	465a      	mov	r2, fp
 8013fce:	4631      	mov	r1, r6
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	47b8      	blx	r7
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	f43f ae56 	beq.w	8013c86 <_printf_float+0xb6>
 8013fda:	f108 0801 	add.w	r8, r8, #1
 8013fde:	45d0      	cmp	r8, sl
 8013fe0:	dbf3      	blt.n	8013fca <_printf_float+0x3fa>
 8013fe2:	464b      	mov	r3, r9
 8013fe4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013fe8:	e6df      	b.n	8013daa <_printf_float+0x1da>
 8013fea:	f04f 0800 	mov.w	r8, #0
 8013fee:	f104 0b1a 	add.w	fp, r4, #26
 8013ff2:	e7f4      	b.n	8013fde <_printf_float+0x40e>
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	4642      	mov	r2, r8
 8013ff8:	e7e1      	b.n	8013fbe <_printf_float+0x3ee>
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	464a      	mov	r2, r9
 8013ffe:	4631      	mov	r1, r6
 8014000:	4628      	mov	r0, r5
 8014002:	47b8      	blx	r7
 8014004:	3001      	adds	r0, #1
 8014006:	f43f ae3e 	beq.w	8013c86 <_printf_float+0xb6>
 801400a:	f108 0801 	add.w	r8, r8, #1
 801400e:	68e3      	ldr	r3, [r4, #12]
 8014010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014012:	1a5b      	subs	r3, r3, r1
 8014014:	4543      	cmp	r3, r8
 8014016:	dcf0      	bgt.n	8013ffa <_printf_float+0x42a>
 8014018:	e6fc      	b.n	8013e14 <_printf_float+0x244>
 801401a:	f04f 0800 	mov.w	r8, #0
 801401e:	f104 0919 	add.w	r9, r4, #25
 8014022:	e7f4      	b.n	801400e <_printf_float+0x43e>

08014024 <_printf_common>:
 8014024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014028:	4616      	mov	r6, r2
 801402a:	4698      	mov	r8, r3
 801402c:	688a      	ldr	r2, [r1, #8]
 801402e:	690b      	ldr	r3, [r1, #16]
 8014030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014034:	4293      	cmp	r3, r2
 8014036:	bfb8      	it	lt
 8014038:	4613      	movlt	r3, r2
 801403a:	6033      	str	r3, [r6, #0]
 801403c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014040:	4607      	mov	r7, r0
 8014042:	460c      	mov	r4, r1
 8014044:	b10a      	cbz	r2, 801404a <_printf_common+0x26>
 8014046:	3301      	adds	r3, #1
 8014048:	6033      	str	r3, [r6, #0]
 801404a:	6823      	ldr	r3, [r4, #0]
 801404c:	0699      	lsls	r1, r3, #26
 801404e:	bf42      	ittt	mi
 8014050:	6833      	ldrmi	r3, [r6, #0]
 8014052:	3302      	addmi	r3, #2
 8014054:	6033      	strmi	r3, [r6, #0]
 8014056:	6825      	ldr	r5, [r4, #0]
 8014058:	f015 0506 	ands.w	r5, r5, #6
 801405c:	d106      	bne.n	801406c <_printf_common+0x48>
 801405e:	f104 0a19 	add.w	sl, r4, #25
 8014062:	68e3      	ldr	r3, [r4, #12]
 8014064:	6832      	ldr	r2, [r6, #0]
 8014066:	1a9b      	subs	r3, r3, r2
 8014068:	42ab      	cmp	r3, r5
 801406a:	dc26      	bgt.n	80140ba <_printf_common+0x96>
 801406c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014070:	6822      	ldr	r2, [r4, #0]
 8014072:	3b00      	subs	r3, #0
 8014074:	bf18      	it	ne
 8014076:	2301      	movne	r3, #1
 8014078:	0692      	lsls	r2, r2, #26
 801407a:	d42b      	bmi.n	80140d4 <_printf_common+0xb0>
 801407c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014080:	4641      	mov	r1, r8
 8014082:	4638      	mov	r0, r7
 8014084:	47c8      	blx	r9
 8014086:	3001      	adds	r0, #1
 8014088:	d01e      	beq.n	80140c8 <_printf_common+0xa4>
 801408a:	6823      	ldr	r3, [r4, #0]
 801408c:	6922      	ldr	r2, [r4, #16]
 801408e:	f003 0306 	and.w	r3, r3, #6
 8014092:	2b04      	cmp	r3, #4
 8014094:	bf02      	ittt	eq
 8014096:	68e5      	ldreq	r5, [r4, #12]
 8014098:	6833      	ldreq	r3, [r6, #0]
 801409a:	1aed      	subeq	r5, r5, r3
 801409c:	68a3      	ldr	r3, [r4, #8]
 801409e:	bf0c      	ite	eq
 80140a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140a4:	2500      	movne	r5, #0
 80140a6:	4293      	cmp	r3, r2
 80140a8:	bfc4      	itt	gt
 80140aa:	1a9b      	subgt	r3, r3, r2
 80140ac:	18ed      	addgt	r5, r5, r3
 80140ae:	2600      	movs	r6, #0
 80140b0:	341a      	adds	r4, #26
 80140b2:	42b5      	cmp	r5, r6
 80140b4:	d11a      	bne.n	80140ec <_printf_common+0xc8>
 80140b6:	2000      	movs	r0, #0
 80140b8:	e008      	b.n	80140cc <_printf_common+0xa8>
 80140ba:	2301      	movs	r3, #1
 80140bc:	4652      	mov	r2, sl
 80140be:	4641      	mov	r1, r8
 80140c0:	4638      	mov	r0, r7
 80140c2:	47c8      	blx	r9
 80140c4:	3001      	adds	r0, #1
 80140c6:	d103      	bne.n	80140d0 <_printf_common+0xac>
 80140c8:	f04f 30ff 	mov.w	r0, #4294967295
 80140cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140d0:	3501      	adds	r5, #1
 80140d2:	e7c6      	b.n	8014062 <_printf_common+0x3e>
 80140d4:	18e1      	adds	r1, r4, r3
 80140d6:	1c5a      	adds	r2, r3, #1
 80140d8:	2030      	movs	r0, #48	@ 0x30
 80140da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80140de:	4422      	add	r2, r4
 80140e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80140e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80140e8:	3302      	adds	r3, #2
 80140ea:	e7c7      	b.n	801407c <_printf_common+0x58>
 80140ec:	2301      	movs	r3, #1
 80140ee:	4622      	mov	r2, r4
 80140f0:	4641      	mov	r1, r8
 80140f2:	4638      	mov	r0, r7
 80140f4:	47c8      	blx	r9
 80140f6:	3001      	adds	r0, #1
 80140f8:	d0e6      	beq.n	80140c8 <_printf_common+0xa4>
 80140fa:	3601      	adds	r6, #1
 80140fc:	e7d9      	b.n	80140b2 <_printf_common+0x8e>
	...

08014100 <_printf_i>:
 8014100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014104:	7e0f      	ldrb	r7, [r1, #24]
 8014106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014108:	2f78      	cmp	r7, #120	@ 0x78
 801410a:	4691      	mov	r9, r2
 801410c:	4680      	mov	r8, r0
 801410e:	460c      	mov	r4, r1
 8014110:	469a      	mov	sl, r3
 8014112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014116:	d807      	bhi.n	8014128 <_printf_i+0x28>
 8014118:	2f62      	cmp	r7, #98	@ 0x62
 801411a:	d80a      	bhi.n	8014132 <_printf_i+0x32>
 801411c:	2f00      	cmp	r7, #0
 801411e:	f000 80d2 	beq.w	80142c6 <_printf_i+0x1c6>
 8014122:	2f58      	cmp	r7, #88	@ 0x58
 8014124:	f000 80b9 	beq.w	801429a <_printf_i+0x19a>
 8014128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801412c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014130:	e03a      	b.n	80141a8 <_printf_i+0xa8>
 8014132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014136:	2b15      	cmp	r3, #21
 8014138:	d8f6      	bhi.n	8014128 <_printf_i+0x28>
 801413a:	a101      	add	r1, pc, #4	@ (adr r1, 8014140 <_printf_i+0x40>)
 801413c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014140:	08014199 	.word	0x08014199
 8014144:	080141ad 	.word	0x080141ad
 8014148:	08014129 	.word	0x08014129
 801414c:	08014129 	.word	0x08014129
 8014150:	08014129 	.word	0x08014129
 8014154:	08014129 	.word	0x08014129
 8014158:	080141ad 	.word	0x080141ad
 801415c:	08014129 	.word	0x08014129
 8014160:	08014129 	.word	0x08014129
 8014164:	08014129 	.word	0x08014129
 8014168:	08014129 	.word	0x08014129
 801416c:	080142ad 	.word	0x080142ad
 8014170:	080141d7 	.word	0x080141d7
 8014174:	08014267 	.word	0x08014267
 8014178:	08014129 	.word	0x08014129
 801417c:	08014129 	.word	0x08014129
 8014180:	080142cf 	.word	0x080142cf
 8014184:	08014129 	.word	0x08014129
 8014188:	080141d7 	.word	0x080141d7
 801418c:	08014129 	.word	0x08014129
 8014190:	08014129 	.word	0x08014129
 8014194:	0801426f 	.word	0x0801426f
 8014198:	6833      	ldr	r3, [r6, #0]
 801419a:	1d1a      	adds	r2, r3, #4
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	6032      	str	r2, [r6, #0]
 80141a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80141a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80141a8:	2301      	movs	r3, #1
 80141aa:	e09d      	b.n	80142e8 <_printf_i+0x1e8>
 80141ac:	6833      	ldr	r3, [r6, #0]
 80141ae:	6820      	ldr	r0, [r4, #0]
 80141b0:	1d19      	adds	r1, r3, #4
 80141b2:	6031      	str	r1, [r6, #0]
 80141b4:	0606      	lsls	r6, r0, #24
 80141b6:	d501      	bpl.n	80141bc <_printf_i+0xbc>
 80141b8:	681d      	ldr	r5, [r3, #0]
 80141ba:	e003      	b.n	80141c4 <_printf_i+0xc4>
 80141bc:	0645      	lsls	r5, r0, #25
 80141be:	d5fb      	bpl.n	80141b8 <_printf_i+0xb8>
 80141c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80141c4:	2d00      	cmp	r5, #0
 80141c6:	da03      	bge.n	80141d0 <_printf_i+0xd0>
 80141c8:	232d      	movs	r3, #45	@ 0x2d
 80141ca:	426d      	negs	r5, r5
 80141cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141d0:	4859      	ldr	r0, [pc, #356]	@ (8014338 <_printf_i+0x238>)
 80141d2:	230a      	movs	r3, #10
 80141d4:	e011      	b.n	80141fa <_printf_i+0xfa>
 80141d6:	6821      	ldr	r1, [r4, #0]
 80141d8:	6833      	ldr	r3, [r6, #0]
 80141da:	0608      	lsls	r0, r1, #24
 80141dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80141e0:	d402      	bmi.n	80141e8 <_printf_i+0xe8>
 80141e2:	0649      	lsls	r1, r1, #25
 80141e4:	bf48      	it	mi
 80141e6:	b2ad      	uxthmi	r5, r5
 80141e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80141ea:	4853      	ldr	r0, [pc, #332]	@ (8014338 <_printf_i+0x238>)
 80141ec:	6033      	str	r3, [r6, #0]
 80141ee:	bf14      	ite	ne
 80141f0:	230a      	movne	r3, #10
 80141f2:	2308      	moveq	r3, #8
 80141f4:	2100      	movs	r1, #0
 80141f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80141fa:	6866      	ldr	r6, [r4, #4]
 80141fc:	60a6      	str	r6, [r4, #8]
 80141fe:	2e00      	cmp	r6, #0
 8014200:	bfa2      	ittt	ge
 8014202:	6821      	ldrge	r1, [r4, #0]
 8014204:	f021 0104 	bicge.w	r1, r1, #4
 8014208:	6021      	strge	r1, [r4, #0]
 801420a:	b90d      	cbnz	r5, 8014210 <_printf_i+0x110>
 801420c:	2e00      	cmp	r6, #0
 801420e:	d04b      	beq.n	80142a8 <_printf_i+0x1a8>
 8014210:	4616      	mov	r6, r2
 8014212:	fbb5 f1f3 	udiv	r1, r5, r3
 8014216:	fb03 5711 	mls	r7, r3, r1, r5
 801421a:	5dc7      	ldrb	r7, [r0, r7]
 801421c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014220:	462f      	mov	r7, r5
 8014222:	42bb      	cmp	r3, r7
 8014224:	460d      	mov	r5, r1
 8014226:	d9f4      	bls.n	8014212 <_printf_i+0x112>
 8014228:	2b08      	cmp	r3, #8
 801422a:	d10b      	bne.n	8014244 <_printf_i+0x144>
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	07df      	lsls	r7, r3, #31
 8014230:	d508      	bpl.n	8014244 <_printf_i+0x144>
 8014232:	6923      	ldr	r3, [r4, #16]
 8014234:	6861      	ldr	r1, [r4, #4]
 8014236:	4299      	cmp	r1, r3
 8014238:	bfde      	ittt	le
 801423a:	2330      	movle	r3, #48	@ 0x30
 801423c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014244:	1b92      	subs	r2, r2, r6
 8014246:	6122      	str	r2, [r4, #16]
 8014248:	f8cd a000 	str.w	sl, [sp]
 801424c:	464b      	mov	r3, r9
 801424e:	aa03      	add	r2, sp, #12
 8014250:	4621      	mov	r1, r4
 8014252:	4640      	mov	r0, r8
 8014254:	f7ff fee6 	bl	8014024 <_printf_common>
 8014258:	3001      	adds	r0, #1
 801425a:	d14a      	bne.n	80142f2 <_printf_i+0x1f2>
 801425c:	f04f 30ff 	mov.w	r0, #4294967295
 8014260:	b004      	add	sp, #16
 8014262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	f043 0320 	orr.w	r3, r3, #32
 801426c:	6023      	str	r3, [r4, #0]
 801426e:	4833      	ldr	r0, [pc, #204]	@ (801433c <_printf_i+0x23c>)
 8014270:	2778      	movs	r7, #120	@ 0x78
 8014272:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	6831      	ldr	r1, [r6, #0]
 801427a:	061f      	lsls	r7, r3, #24
 801427c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014280:	d402      	bmi.n	8014288 <_printf_i+0x188>
 8014282:	065f      	lsls	r7, r3, #25
 8014284:	bf48      	it	mi
 8014286:	b2ad      	uxthmi	r5, r5
 8014288:	6031      	str	r1, [r6, #0]
 801428a:	07d9      	lsls	r1, r3, #31
 801428c:	bf44      	itt	mi
 801428e:	f043 0320 	orrmi.w	r3, r3, #32
 8014292:	6023      	strmi	r3, [r4, #0]
 8014294:	b11d      	cbz	r5, 801429e <_printf_i+0x19e>
 8014296:	2310      	movs	r3, #16
 8014298:	e7ac      	b.n	80141f4 <_printf_i+0xf4>
 801429a:	4827      	ldr	r0, [pc, #156]	@ (8014338 <_printf_i+0x238>)
 801429c:	e7e9      	b.n	8014272 <_printf_i+0x172>
 801429e:	6823      	ldr	r3, [r4, #0]
 80142a0:	f023 0320 	bic.w	r3, r3, #32
 80142a4:	6023      	str	r3, [r4, #0]
 80142a6:	e7f6      	b.n	8014296 <_printf_i+0x196>
 80142a8:	4616      	mov	r6, r2
 80142aa:	e7bd      	b.n	8014228 <_printf_i+0x128>
 80142ac:	6833      	ldr	r3, [r6, #0]
 80142ae:	6825      	ldr	r5, [r4, #0]
 80142b0:	6961      	ldr	r1, [r4, #20]
 80142b2:	1d18      	adds	r0, r3, #4
 80142b4:	6030      	str	r0, [r6, #0]
 80142b6:	062e      	lsls	r6, r5, #24
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	d501      	bpl.n	80142c0 <_printf_i+0x1c0>
 80142bc:	6019      	str	r1, [r3, #0]
 80142be:	e002      	b.n	80142c6 <_printf_i+0x1c6>
 80142c0:	0668      	lsls	r0, r5, #25
 80142c2:	d5fb      	bpl.n	80142bc <_printf_i+0x1bc>
 80142c4:	8019      	strh	r1, [r3, #0]
 80142c6:	2300      	movs	r3, #0
 80142c8:	6123      	str	r3, [r4, #16]
 80142ca:	4616      	mov	r6, r2
 80142cc:	e7bc      	b.n	8014248 <_printf_i+0x148>
 80142ce:	6833      	ldr	r3, [r6, #0]
 80142d0:	1d1a      	adds	r2, r3, #4
 80142d2:	6032      	str	r2, [r6, #0]
 80142d4:	681e      	ldr	r6, [r3, #0]
 80142d6:	6862      	ldr	r2, [r4, #4]
 80142d8:	2100      	movs	r1, #0
 80142da:	4630      	mov	r0, r6
 80142dc:	f7eb ffa0 	bl	8000220 <memchr>
 80142e0:	b108      	cbz	r0, 80142e6 <_printf_i+0x1e6>
 80142e2:	1b80      	subs	r0, r0, r6
 80142e4:	6060      	str	r0, [r4, #4]
 80142e6:	6863      	ldr	r3, [r4, #4]
 80142e8:	6123      	str	r3, [r4, #16]
 80142ea:	2300      	movs	r3, #0
 80142ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142f0:	e7aa      	b.n	8014248 <_printf_i+0x148>
 80142f2:	6923      	ldr	r3, [r4, #16]
 80142f4:	4632      	mov	r2, r6
 80142f6:	4649      	mov	r1, r9
 80142f8:	4640      	mov	r0, r8
 80142fa:	47d0      	blx	sl
 80142fc:	3001      	adds	r0, #1
 80142fe:	d0ad      	beq.n	801425c <_printf_i+0x15c>
 8014300:	6823      	ldr	r3, [r4, #0]
 8014302:	079b      	lsls	r3, r3, #30
 8014304:	d413      	bmi.n	801432e <_printf_i+0x22e>
 8014306:	68e0      	ldr	r0, [r4, #12]
 8014308:	9b03      	ldr	r3, [sp, #12]
 801430a:	4298      	cmp	r0, r3
 801430c:	bfb8      	it	lt
 801430e:	4618      	movlt	r0, r3
 8014310:	e7a6      	b.n	8014260 <_printf_i+0x160>
 8014312:	2301      	movs	r3, #1
 8014314:	4632      	mov	r2, r6
 8014316:	4649      	mov	r1, r9
 8014318:	4640      	mov	r0, r8
 801431a:	47d0      	blx	sl
 801431c:	3001      	adds	r0, #1
 801431e:	d09d      	beq.n	801425c <_printf_i+0x15c>
 8014320:	3501      	adds	r5, #1
 8014322:	68e3      	ldr	r3, [r4, #12]
 8014324:	9903      	ldr	r1, [sp, #12]
 8014326:	1a5b      	subs	r3, r3, r1
 8014328:	42ab      	cmp	r3, r5
 801432a:	dcf2      	bgt.n	8014312 <_printf_i+0x212>
 801432c:	e7eb      	b.n	8014306 <_printf_i+0x206>
 801432e:	2500      	movs	r5, #0
 8014330:	f104 0619 	add.w	r6, r4, #25
 8014334:	e7f5      	b.n	8014322 <_printf_i+0x222>
 8014336:	bf00      	nop
 8014338:	080191e6 	.word	0x080191e6
 801433c:	080191f7 	.word	0x080191f7

08014340 <_scanf_float>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	b087      	sub	sp, #28
 8014346:	4617      	mov	r7, r2
 8014348:	9303      	str	r3, [sp, #12]
 801434a:	688b      	ldr	r3, [r1, #8]
 801434c:	1e5a      	subs	r2, r3, #1
 801434e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014352:	bf81      	itttt	hi
 8014354:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014358:	eb03 0b05 	addhi.w	fp, r3, r5
 801435c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014360:	608b      	strhi	r3, [r1, #8]
 8014362:	680b      	ldr	r3, [r1, #0]
 8014364:	460a      	mov	r2, r1
 8014366:	f04f 0500 	mov.w	r5, #0
 801436a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801436e:	f842 3b1c 	str.w	r3, [r2], #28
 8014372:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014376:	4680      	mov	r8, r0
 8014378:	460c      	mov	r4, r1
 801437a:	bf98      	it	ls
 801437c:	f04f 0b00 	movls.w	fp, #0
 8014380:	9201      	str	r2, [sp, #4]
 8014382:	4616      	mov	r6, r2
 8014384:	46aa      	mov	sl, r5
 8014386:	46a9      	mov	r9, r5
 8014388:	9502      	str	r5, [sp, #8]
 801438a:	68a2      	ldr	r2, [r4, #8]
 801438c:	b152      	cbz	r2, 80143a4 <_scanf_float+0x64>
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	2b4e      	cmp	r3, #78	@ 0x4e
 8014394:	d864      	bhi.n	8014460 <_scanf_float+0x120>
 8014396:	2b40      	cmp	r3, #64	@ 0x40
 8014398:	d83c      	bhi.n	8014414 <_scanf_float+0xd4>
 801439a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801439e:	b2c8      	uxtb	r0, r1
 80143a0:	280e      	cmp	r0, #14
 80143a2:	d93a      	bls.n	801441a <_scanf_float+0xda>
 80143a4:	f1b9 0f00 	cmp.w	r9, #0
 80143a8:	d003      	beq.n	80143b2 <_scanf_float+0x72>
 80143aa:	6823      	ldr	r3, [r4, #0]
 80143ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143b6:	f1ba 0f01 	cmp.w	sl, #1
 80143ba:	f200 8117 	bhi.w	80145ec <_scanf_float+0x2ac>
 80143be:	9b01      	ldr	r3, [sp, #4]
 80143c0:	429e      	cmp	r6, r3
 80143c2:	f200 8108 	bhi.w	80145d6 <_scanf_float+0x296>
 80143c6:	2001      	movs	r0, #1
 80143c8:	b007      	add	sp, #28
 80143ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80143d2:	2a0d      	cmp	r2, #13
 80143d4:	d8e6      	bhi.n	80143a4 <_scanf_float+0x64>
 80143d6:	a101      	add	r1, pc, #4	@ (adr r1, 80143dc <_scanf_float+0x9c>)
 80143d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80143dc:	08014523 	.word	0x08014523
 80143e0:	080143a5 	.word	0x080143a5
 80143e4:	080143a5 	.word	0x080143a5
 80143e8:	080143a5 	.word	0x080143a5
 80143ec:	08014583 	.word	0x08014583
 80143f0:	0801455b 	.word	0x0801455b
 80143f4:	080143a5 	.word	0x080143a5
 80143f8:	080143a5 	.word	0x080143a5
 80143fc:	08014531 	.word	0x08014531
 8014400:	080143a5 	.word	0x080143a5
 8014404:	080143a5 	.word	0x080143a5
 8014408:	080143a5 	.word	0x080143a5
 801440c:	080143a5 	.word	0x080143a5
 8014410:	080144e9 	.word	0x080144e9
 8014414:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014418:	e7db      	b.n	80143d2 <_scanf_float+0x92>
 801441a:	290e      	cmp	r1, #14
 801441c:	d8c2      	bhi.n	80143a4 <_scanf_float+0x64>
 801441e:	a001      	add	r0, pc, #4	@ (adr r0, 8014424 <_scanf_float+0xe4>)
 8014420:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014424:	080144d9 	.word	0x080144d9
 8014428:	080143a5 	.word	0x080143a5
 801442c:	080144d9 	.word	0x080144d9
 8014430:	0801456f 	.word	0x0801456f
 8014434:	080143a5 	.word	0x080143a5
 8014438:	08014481 	.word	0x08014481
 801443c:	080144bf 	.word	0x080144bf
 8014440:	080144bf 	.word	0x080144bf
 8014444:	080144bf 	.word	0x080144bf
 8014448:	080144bf 	.word	0x080144bf
 801444c:	080144bf 	.word	0x080144bf
 8014450:	080144bf 	.word	0x080144bf
 8014454:	080144bf 	.word	0x080144bf
 8014458:	080144bf 	.word	0x080144bf
 801445c:	080144bf 	.word	0x080144bf
 8014460:	2b6e      	cmp	r3, #110	@ 0x6e
 8014462:	d809      	bhi.n	8014478 <_scanf_float+0x138>
 8014464:	2b60      	cmp	r3, #96	@ 0x60
 8014466:	d8b2      	bhi.n	80143ce <_scanf_float+0x8e>
 8014468:	2b54      	cmp	r3, #84	@ 0x54
 801446a:	d07b      	beq.n	8014564 <_scanf_float+0x224>
 801446c:	2b59      	cmp	r3, #89	@ 0x59
 801446e:	d199      	bne.n	80143a4 <_scanf_float+0x64>
 8014470:	2d07      	cmp	r5, #7
 8014472:	d197      	bne.n	80143a4 <_scanf_float+0x64>
 8014474:	2508      	movs	r5, #8
 8014476:	e02c      	b.n	80144d2 <_scanf_float+0x192>
 8014478:	2b74      	cmp	r3, #116	@ 0x74
 801447a:	d073      	beq.n	8014564 <_scanf_float+0x224>
 801447c:	2b79      	cmp	r3, #121	@ 0x79
 801447e:	e7f6      	b.n	801446e <_scanf_float+0x12e>
 8014480:	6821      	ldr	r1, [r4, #0]
 8014482:	05c8      	lsls	r0, r1, #23
 8014484:	d51b      	bpl.n	80144be <_scanf_float+0x17e>
 8014486:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801448a:	6021      	str	r1, [r4, #0]
 801448c:	f109 0901 	add.w	r9, r9, #1
 8014490:	f1bb 0f00 	cmp.w	fp, #0
 8014494:	d003      	beq.n	801449e <_scanf_float+0x15e>
 8014496:	3201      	adds	r2, #1
 8014498:	f10b 3bff 	add.w	fp, fp, #4294967295
 801449c:	60a2      	str	r2, [r4, #8]
 801449e:	68a3      	ldr	r3, [r4, #8]
 80144a0:	3b01      	subs	r3, #1
 80144a2:	60a3      	str	r3, [r4, #8]
 80144a4:	6923      	ldr	r3, [r4, #16]
 80144a6:	3301      	adds	r3, #1
 80144a8:	6123      	str	r3, [r4, #16]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	3b01      	subs	r3, #1
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	607b      	str	r3, [r7, #4]
 80144b2:	f340 8087 	ble.w	80145c4 <_scanf_float+0x284>
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	3301      	adds	r3, #1
 80144ba:	603b      	str	r3, [r7, #0]
 80144bc:	e765      	b.n	801438a <_scanf_float+0x4a>
 80144be:	eb1a 0105 	adds.w	r1, sl, r5
 80144c2:	f47f af6f 	bne.w	80143a4 <_scanf_float+0x64>
 80144c6:	6822      	ldr	r2, [r4, #0]
 80144c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80144cc:	6022      	str	r2, [r4, #0]
 80144ce:	460d      	mov	r5, r1
 80144d0:	468a      	mov	sl, r1
 80144d2:	f806 3b01 	strb.w	r3, [r6], #1
 80144d6:	e7e2      	b.n	801449e <_scanf_float+0x15e>
 80144d8:	6822      	ldr	r2, [r4, #0]
 80144da:	0610      	lsls	r0, r2, #24
 80144dc:	f57f af62 	bpl.w	80143a4 <_scanf_float+0x64>
 80144e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80144e4:	6022      	str	r2, [r4, #0]
 80144e6:	e7f4      	b.n	80144d2 <_scanf_float+0x192>
 80144e8:	f1ba 0f00 	cmp.w	sl, #0
 80144ec:	d10e      	bne.n	801450c <_scanf_float+0x1cc>
 80144ee:	f1b9 0f00 	cmp.w	r9, #0
 80144f2:	d10e      	bne.n	8014512 <_scanf_float+0x1d2>
 80144f4:	6822      	ldr	r2, [r4, #0]
 80144f6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80144fa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80144fe:	d108      	bne.n	8014512 <_scanf_float+0x1d2>
 8014500:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014504:	6022      	str	r2, [r4, #0]
 8014506:	f04f 0a01 	mov.w	sl, #1
 801450a:	e7e2      	b.n	80144d2 <_scanf_float+0x192>
 801450c:	f1ba 0f02 	cmp.w	sl, #2
 8014510:	d055      	beq.n	80145be <_scanf_float+0x27e>
 8014512:	2d01      	cmp	r5, #1
 8014514:	d002      	beq.n	801451c <_scanf_float+0x1dc>
 8014516:	2d04      	cmp	r5, #4
 8014518:	f47f af44 	bne.w	80143a4 <_scanf_float+0x64>
 801451c:	3501      	adds	r5, #1
 801451e:	b2ed      	uxtb	r5, r5
 8014520:	e7d7      	b.n	80144d2 <_scanf_float+0x192>
 8014522:	f1ba 0f01 	cmp.w	sl, #1
 8014526:	f47f af3d 	bne.w	80143a4 <_scanf_float+0x64>
 801452a:	f04f 0a02 	mov.w	sl, #2
 801452e:	e7d0      	b.n	80144d2 <_scanf_float+0x192>
 8014530:	b97d      	cbnz	r5, 8014552 <_scanf_float+0x212>
 8014532:	f1b9 0f00 	cmp.w	r9, #0
 8014536:	f47f af38 	bne.w	80143aa <_scanf_float+0x6a>
 801453a:	6822      	ldr	r2, [r4, #0]
 801453c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014540:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014544:	f040 8108 	bne.w	8014758 <_scanf_float+0x418>
 8014548:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801454c:	6022      	str	r2, [r4, #0]
 801454e:	2501      	movs	r5, #1
 8014550:	e7bf      	b.n	80144d2 <_scanf_float+0x192>
 8014552:	2d03      	cmp	r5, #3
 8014554:	d0e2      	beq.n	801451c <_scanf_float+0x1dc>
 8014556:	2d05      	cmp	r5, #5
 8014558:	e7de      	b.n	8014518 <_scanf_float+0x1d8>
 801455a:	2d02      	cmp	r5, #2
 801455c:	f47f af22 	bne.w	80143a4 <_scanf_float+0x64>
 8014560:	2503      	movs	r5, #3
 8014562:	e7b6      	b.n	80144d2 <_scanf_float+0x192>
 8014564:	2d06      	cmp	r5, #6
 8014566:	f47f af1d 	bne.w	80143a4 <_scanf_float+0x64>
 801456a:	2507      	movs	r5, #7
 801456c:	e7b1      	b.n	80144d2 <_scanf_float+0x192>
 801456e:	6822      	ldr	r2, [r4, #0]
 8014570:	0591      	lsls	r1, r2, #22
 8014572:	f57f af17 	bpl.w	80143a4 <_scanf_float+0x64>
 8014576:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801457a:	6022      	str	r2, [r4, #0]
 801457c:	f8cd 9008 	str.w	r9, [sp, #8]
 8014580:	e7a7      	b.n	80144d2 <_scanf_float+0x192>
 8014582:	6822      	ldr	r2, [r4, #0]
 8014584:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014588:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801458c:	d006      	beq.n	801459c <_scanf_float+0x25c>
 801458e:	0550      	lsls	r0, r2, #21
 8014590:	f57f af08 	bpl.w	80143a4 <_scanf_float+0x64>
 8014594:	f1b9 0f00 	cmp.w	r9, #0
 8014598:	f000 80de 	beq.w	8014758 <_scanf_float+0x418>
 801459c:	0591      	lsls	r1, r2, #22
 801459e:	bf58      	it	pl
 80145a0:	9902      	ldrpl	r1, [sp, #8]
 80145a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80145a6:	bf58      	it	pl
 80145a8:	eba9 0101 	subpl.w	r1, r9, r1
 80145ac:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80145b0:	bf58      	it	pl
 80145b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80145b6:	6022      	str	r2, [r4, #0]
 80145b8:	f04f 0900 	mov.w	r9, #0
 80145bc:	e789      	b.n	80144d2 <_scanf_float+0x192>
 80145be:	f04f 0a03 	mov.w	sl, #3
 80145c2:	e786      	b.n	80144d2 <_scanf_float+0x192>
 80145c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80145c8:	4639      	mov	r1, r7
 80145ca:	4640      	mov	r0, r8
 80145cc:	4798      	blx	r3
 80145ce:	2800      	cmp	r0, #0
 80145d0:	f43f aedb 	beq.w	801438a <_scanf_float+0x4a>
 80145d4:	e6e6      	b.n	80143a4 <_scanf_float+0x64>
 80145d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80145de:	463a      	mov	r2, r7
 80145e0:	4640      	mov	r0, r8
 80145e2:	4798      	blx	r3
 80145e4:	6923      	ldr	r3, [r4, #16]
 80145e6:	3b01      	subs	r3, #1
 80145e8:	6123      	str	r3, [r4, #16]
 80145ea:	e6e8      	b.n	80143be <_scanf_float+0x7e>
 80145ec:	1e6b      	subs	r3, r5, #1
 80145ee:	2b06      	cmp	r3, #6
 80145f0:	d824      	bhi.n	801463c <_scanf_float+0x2fc>
 80145f2:	2d02      	cmp	r5, #2
 80145f4:	d836      	bhi.n	8014664 <_scanf_float+0x324>
 80145f6:	9b01      	ldr	r3, [sp, #4]
 80145f8:	429e      	cmp	r6, r3
 80145fa:	f67f aee4 	bls.w	80143c6 <_scanf_float+0x86>
 80145fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014602:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014606:	463a      	mov	r2, r7
 8014608:	4640      	mov	r0, r8
 801460a:	4798      	blx	r3
 801460c:	6923      	ldr	r3, [r4, #16]
 801460e:	3b01      	subs	r3, #1
 8014610:	6123      	str	r3, [r4, #16]
 8014612:	e7f0      	b.n	80145f6 <_scanf_float+0x2b6>
 8014614:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014618:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801461c:	463a      	mov	r2, r7
 801461e:	4640      	mov	r0, r8
 8014620:	4798      	blx	r3
 8014622:	6923      	ldr	r3, [r4, #16]
 8014624:	3b01      	subs	r3, #1
 8014626:	6123      	str	r3, [r4, #16]
 8014628:	f10a 3aff 	add.w	sl, sl, #4294967295
 801462c:	fa5f fa8a 	uxtb.w	sl, sl
 8014630:	f1ba 0f02 	cmp.w	sl, #2
 8014634:	d1ee      	bne.n	8014614 <_scanf_float+0x2d4>
 8014636:	3d03      	subs	r5, #3
 8014638:	b2ed      	uxtb	r5, r5
 801463a:	1b76      	subs	r6, r6, r5
 801463c:	6823      	ldr	r3, [r4, #0]
 801463e:	05da      	lsls	r2, r3, #23
 8014640:	d530      	bpl.n	80146a4 <_scanf_float+0x364>
 8014642:	055b      	lsls	r3, r3, #21
 8014644:	d511      	bpl.n	801466a <_scanf_float+0x32a>
 8014646:	9b01      	ldr	r3, [sp, #4]
 8014648:	429e      	cmp	r6, r3
 801464a:	f67f aebc 	bls.w	80143c6 <_scanf_float+0x86>
 801464e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014656:	463a      	mov	r2, r7
 8014658:	4640      	mov	r0, r8
 801465a:	4798      	blx	r3
 801465c:	6923      	ldr	r3, [r4, #16]
 801465e:	3b01      	subs	r3, #1
 8014660:	6123      	str	r3, [r4, #16]
 8014662:	e7f0      	b.n	8014646 <_scanf_float+0x306>
 8014664:	46aa      	mov	sl, r5
 8014666:	46b3      	mov	fp, r6
 8014668:	e7de      	b.n	8014628 <_scanf_float+0x2e8>
 801466a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801466e:	6923      	ldr	r3, [r4, #16]
 8014670:	2965      	cmp	r1, #101	@ 0x65
 8014672:	f103 33ff 	add.w	r3, r3, #4294967295
 8014676:	f106 35ff 	add.w	r5, r6, #4294967295
 801467a:	6123      	str	r3, [r4, #16]
 801467c:	d00c      	beq.n	8014698 <_scanf_float+0x358>
 801467e:	2945      	cmp	r1, #69	@ 0x45
 8014680:	d00a      	beq.n	8014698 <_scanf_float+0x358>
 8014682:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014686:	463a      	mov	r2, r7
 8014688:	4640      	mov	r0, r8
 801468a:	4798      	blx	r3
 801468c:	6923      	ldr	r3, [r4, #16]
 801468e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014692:	3b01      	subs	r3, #1
 8014694:	1eb5      	subs	r5, r6, #2
 8014696:	6123      	str	r3, [r4, #16]
 8014698:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801469c:	463a      	mov	r2, r7
 801469e:	4640      	mov	r0, r8
 80146a0:	4798      	blx	r3
 80146a2:	462e      	mov	r6, r5
 80146a4:	6822      	ldr	r2, [r4, #0]
 80146a6:	f012 0210 	ands.w	r2, r2, #16
 80146aa:	d001      	beq.n	80146b0 <_scanf_float+0x370>
 80146ac:	2000      	movs	r0, #0
 80146ae:	e68b      	b.n	80143c8 <_scanf_float+0x88>
 80146b0:	7032      	strb	r2, [r6, #0]
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80146b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80146bc:	d11c      	bne.n	80146f8 <_scanf_float+0x3b8>
 80146be:	9b02      	ldr	r3, [sp, #8]
 80146c0:	454b      	cmp	r3, r9
 80146c2:	eba3 0209 	sub.w	r2, r3, r9
 80146c6:	d123      	bne.n	8014710 <_scanf_float+0x3d0>
 80146c8:	9901      	ldr	r1, [sp, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	4640      	mov	r0, r8
 80146ce:	f002 fbf3 	bl	8016eb8 <_strtod_r>
 80146d2:	9b03      	ldr	r3, [sp, #12]
 80146d4:	6821      	ldr	r1, [r4, #0]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f011 0f02 	tst.w	r1, #2
 80146dc:	ec57 6b10 	vmov	r6, r7, d0
 80146e0:	f103 0204 	add.w	r2, r3, #4
 80146e4:	d01f      	beq.n	8014726 <_scanf_float+0x3e6>
 80146e6:	9903      	ldr	r1, [sp, #12]
 80146e8:	600a      	str	r2, [r1, #0]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	e9c3 6700 	strd	r6, r7, [r3]
 80146f0:	68e3      	ldr	r3, [r4, #12]
 80146f2:	3301      	adds	r3, #1
 80146f4:	60e3      	str	r3, [r4, #12]
 80146f6:	e7d9      	b.n	80146ac <_scanf_float+0x36c>
 80146f8:	9b04      	ldr	r3, [sp, #16]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d0e4      	beq.n	80146c8 <_scanf_float+0x388>
 80146fe:	9905      	ldr	r1, [sp, #20]
 8014700:	230a      	movs	r3, #10
 8014702:	3101      	adds	r1, #1
 8014704:	4640      	mov	r0, r8
 8014706:	f002 fc57 	bl	8016fb8 <_strtol_r>
 801470a:	9b04      	ldr	r3, [sp, #16]
 801470c:	9e05      	ldr	r6, [sp, #20]
 801470e:	1ac2      	subs	r2, r0, r3
 8014710:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014714:	429e      	cmp	r6, r3
 8014716:	bf28      	it	cs
 8014718:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801471c:	4910      	ldr	r1, [pc, #64]	@ (8014760 <_scanf_float+0x420>)
 801471e:	4630      	mov	r0, r6
 8014720:	f000 f8f6 	bl	8014910 <siprintf>
 8014724:	e7d0      	b.n	80146c8 <_scanf_float+0x388>
 8014726:	f011 0f04 	tst.w	r1, #4
 801472a:	9903      	ldr	r1, [sp, #12]
 801472c:	600a      	str	r2, [r1, #0]
 801472e:	d1dc      	bne.n	80146ea <_scanf_float+0x3aa>
 8014730:	681d      	ldr	r5, [r3, #0]
 8014732:	4632      	mov	r2, r6
 8014734:	463b      	mov	r3, r7
 8014736:	4630      	mov	r0, r6
 8014738:	4639      	mov	r1, r7
 801473a:	f7ec fa1f 	bl	8000b7c <__aeabi_dcmpun>
 801473e:	b128      	cbz	r0, 801474c <_scanf_float+0x40c>
 8014740:	4808      	ldr	r0, [pc, #32]	@ (8014764 <_scanf_float+0x424>)
 8014742:	f000 fa67 	bl	8014c14 <nanf>
 8014746:	ed85 0a00 	vstr	s0, [r5]
 801474a:	e7d1      	b.n	80146f0 <_scanf_float+0x3b0>
 801474c:	4630      	mov	r0, r6
 801474e:	4639      	mov	r1, r7
 8014750:	f7ec fa72 	bl	8000c38 <__aeabi_d2f>
 8014754:	6028      	str	r0, [r5, #0]
 8014756:	e7cb      	b.n	80146f0 <_scanf_float+0x3b0>
 8014758:	f04f 0900 	mov.w	r9, #0
 801475c:	e629      	b.n	80143b2 <_scanf_float+0x72>
 801475e:	bf00      	nop
 8014760:	08019208 	.word	0x08019208
 8014764:	080191d3 	.word	0x080191d3

08014768 <std>:
 8014768:	2300      	movs	r3, #0
 801476a:	b510      	push	{r4, lr}
 801476c:	4604      	mov	r4, r0
 801476e:	e9c0 3300 	strd	r3, r3, [r0]
 8014772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014776:	6083      	str	r3, [r0, #8]
 8014778:	8181      	strh	r1, [r0, #12]
 801477a:	6643      	str	r3, [r0, #100]	@ 0x64
 801477c:	81c2      	strh	r2, [r0, #14]
 801477e:	6183      	str	r3, [r0, #24]
 8014780:	4619      	mov	r1, r3
 8014782:	2208      	movs	r2, #8
 8014784:	305c      	adds	r0, #92	@ 0x5c
 8014786:	f000 f950 	bl	8014a2a <memset>
 801478a:	4b0d      	ldr	r3, [pc, #52]	@ (80147c0 <std+0x58>)
 801478c:	6263      	str	r3, [r4, #36]	@ 0x24
 801478e:	4b0d      	ldr	r3, [pc, #52]	@ (80147c4 <std+0x5c>)
 8014790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014792:	4b0d      	ldr	r3, [pc, #52]	@ (80147c8 <std+0x60>)
 8014794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014796:	4b0d      	ldr	r3, [pc, #52]	@ (80147cc <std+0x64>)
 8014798:	6323      	str	r3, [r4, #48]	@ 0x30
 801479a:	4b0d      	ldr	r3, [pc, #52]	@ (80147d0 <std+0x68>)
 801479c:	6224      	str	r4, [r4, #32]
 801479e:	429c      	cmp	r4, r3
 80147a0:	d006      	beq.n	80147b0 <std+0x48>
 80147a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80147a6:	4294      	cmp	r4, r2
 80147a8:	d002      	beq.n	80147b0 <std+0x48>
 80147aa:	33d0      	adds	r3, #208	@ 0xd0
 80147ac:	429c      	cmp	r4, r3
 80147ae:	d105      	bne.n	80147bc <std+0x54>
 80147b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80147b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147b8:	f000 ba1a 	b.w	8014bf0 <__retarget_lock_init_recursive>
 80147bc:	bd10      	pop	{r4, pc}
 80147be:	bf00      	nop
 80147c0:	08014951 	.word	0x08014951
 80147c4:	08014973 	.word	0x08014973
 80147c8:	080149ab 	.word	0x080149ab
 80147cc:	080149cf 	.word	0x080149cf
 80147d0:	200009cc 	.word	0x200009cc

080147d4 <stdio_exit_handler>:
 80147d4:	4a02      	ldr	r2, [pc, #8]	@ (80147e0 <stdio_exit_handler+0xc>)
 80147d6:	4903      	ldr	r1, [pc, #12]	@ (80147e4 <stdio_exit_handler+0x10>)
 80147d8:	4803      	ldr	r0, [pc, #12]	@ (80147e8 <stdio_exit_handler+0x14>)
 80147da:	f000 b87b 	b.w	80148d4 <_fwalk_sglue>
 80147de:	bf00      	nop
 80147e0:	20000084 	.word	0x20000084
 80147e4:	080175f9 	.word	0x080175f9
 80147e8:	20000094 	.word	0x20000094

080147ec <cleanup_stdio>:
 80147ec:	6841      	ldr	r1, [r0, #4]
 80147ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014820 <cleanup_stdio+0x34>)
 80147f0:	4299      	cmp	r1, r3
 80147f2:	b510      	push	{r4, lr}
 80147f4:	4604      	mov	r4, r0
 80147f6:	d001      	beq.n	80147fc <cleanup_stdio+0x10>
 80147f8:	f002 fefe 	bl	80175f8 <_fflush_r>
 80147fc:	68a1      	ldr	r1, [r4, #8]
 80147fe:	4b09      	ldr	r3, [pc, #36]	@ (8014824 <cleanup_stdio+0x38>)
 8014800:	4299      	cmp	r1, r3
 8014802:	d002      	beq.n	801480a <cleanup_stdio+0x1e>
 8014804:	4620      	mov	r0, r4
 8014806:	f002 fef7 	bl	80175f8 <_fflush_r>
 801480a:	68e1      	ldr	r1, [r4, #12]
 801480c:	4b06      	ldr	r3, [pc, #24]	@ (8014828 <cleanup_stdio+0x3c>)
 801480e:	4299      	cmp	r1, r3
 8014810:	d004      	beq.n	801481c <cleanup_stdio+0x30>
 8014812:	4620      	mov	r0, r4
 8014814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014818:	f002 beee 	b.w	80175f8 <_fflush_r>
 801481c:	bd10      	pop	{r4, pc}
 801481e:	bf00      	nop
 8014820:	200009cc 	.word	0x200009cc
 8014824:	20000a34 	.word	0x20000a34
 8014828:	20000a9c 	.word	0x20000a9c

0801482c <global_stdio_init.part.0>:
 801482c:	b510      	push	{r4, lr}
 801482e:	4b0b      	ldr	r3, [pc, #44]	@ (801485c <global_stdio_init.part.0+0x30>)
 8014830:	4c0b      	ldr	r4, [pc, #44]	@ (8014860 <global_stdio_init.part.0+0x34>)
 8014832:	4a0c      	ldr	r2, [pc, #48]	@ (8014864 <global_stdio_init.part.0+0x38>)
 8014834:	601a      	str	r2, [r3, #0]
 8014836:	4620      	mov	r0, r4
 8014838:	2200      	movs	r2, #0
 801483a:	2104      	movs	r1, #4
 801483c:	f7ff ff94 	bl	8014768 <std>
 8014840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014844:	2201      	movs	r2, #1
 8014846:	2109      	movs	r1, #9
 8014848:	f7ff ff8e 	bl	8014768 <std>
 801484c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014850:	2202      	movs	r2, #2
 8014852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014856:	2112      	movs	r1, #18
 8014858:	f7ff bf86 	b.w	8014768 <std>
 801485c:	20000b04 	.word	0x20000b04
 8014860:	200009cc 	.word	0x200009cc
 8014864:	080147d5 	.word	0x080147d5

08014868 <__sfp_lock_acquire>:
 8014868:	4801      	ldr	r0, [pc, #4]	@ (8014870 <__sfp_lock_acquire+0x8>)
 801486a:	f000 b9c2 	b.w	8014bf2 <__retarget_lock_acquire_recursive>
 801486e:	bf00      	nop
 8014870:	20000b0d 	.word	0x20000b0d

08014874 <__sfp_lock_release>:
 8014874:	4801      	ldr	r0, [pc, #4]	@ (801487c <__sfp_lock_release+0x8>)
 8014876:	f000 b9bd 	b.w	8014bf4 <__retarget_lock_release_recursive>
 801487a:	bf00      	nop
 801487c:	20000b0d 	.word	0x20000b0d

08014880 <__sinit>:
 8014880:	b510      	push	{r4, lr}
 8014882:	4604      	mov	r4, r0
 8014884:	f7ff fff0 	bl	8014868 <__sfp_lock_acquire>
 8014888:	6a23      	ldr	r3, [r4, #32]
 801488a:	b11b      	cbz	r3, 8014894 <__sinit+0x14>
 801488c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014890:	f7ff bff0 	b.w	8014874 <__sfp_lock_release>
 8014894:	4b04      	ldr	r3, [pc, #16]	@ (80148a8 <__sinit+0x28>)
 8014896:	6223      	str	r3, [r4, #32]
 8014898:	4b04      	ldr	r3, [pc, #16]	@ (80148ac <__sinit+0x2c>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d1f5      	bne.n	801488c <__sinit+0xc>
 80148a0:	f7ff ffc4 	bl	801482c <global_stdio_init.part.0>
 80148a4:	e7f2      	b.n	801488c <__sinit+0xc>
 80148a6:	bf00      	nop
 80148a8:	080147ed 	.word	0x080147ed
 80148ac:	20000b04 	.word	0x20000b04

080148b0 <fiprintf>:
 80148b0:	b40e      	push	{r1, r2, r3}
 80148b2:	b503      	push	{r0, r1, lr}
 80148b4:	4601      	mov	r1, r0
 80148b6:	ab03      	add	r3, sp, #12
 80148b8:	4805      	ldr	r0, [pc, #20]	@ (80148d0 <fiprintf+0x20>)
 80148ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80148be:	6800      	ldr	r0, [r0, #0]
 80148c0:	9301      	str	r3, [sp, #4]
 80148c2:	f002 fcfd 	bl	80172c0 <_vfiprintf_r>
 80148c6:	b002      	add	sp, #8
 80148c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80148cc:	b003      	add	sp, #12
 80148ce:	4770      	bx	lr
 80148d0:	20000090 	.word	0x20000090

080148d4 <_fwalk_sglue>:
 80148d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148d8:	4607      	mov	r7, r0
 80148da:	4688      	mov	r8, r1
 80148dc:	4614      	mov	r4, r2
 80148de:	2600      	movs	r6, #0
 80148e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148e4:	f1b9 0901 	subs.w	r9, r9, #1
 80148e8:	d505      	bpl.n	80148f6 <_fwalk_sglue+0x22>
 80148ea:	6824      	ldr	r4, [r4, #0]
 80148ec:	2c00      	cmp	r4, #0
 80148ee:	d1f7      	bne.n	80148e0 <_fwalk_sglue+0xc>
 80148f0:	4630      	mov	r0, r6
 80148f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	2b01      	cmp	r3, #1
 80148fa:	d907      	bls.n	801490c <_fwalk_sglue+0x38>
 80148fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014900:	3301      	adds	r3, #1
 8014902:	d003      	beq.n	801490c <_fwalk_sglue+0x38>
 8014904:	4629      	mov	r1, r5
 8014906:	4638      	mov	r0, r7
 8014908:	47c0      	blx	r8
 801490a:	4306      	orrs	r6, r0
 801490c:	3568      	adds	r5, #104	@ 0x68
 801490e:	e7e9      	b.n	80148e4 <_fwalk_sglue+0x10>

08014910 <siprintf>:
 8014910:	b40e      	push	{r1, r2, r3}
 8014912:	b500      	push	{lr}
 8014914:	b09c      	sub	sp, #112	@ 0x70
 8014916:	ab1d      	add	r3, sp, #116	@ 0x74
 8014918:	9002      	str	r0, [sp, #8]
 801491a:	9006      	str	r0, [sp, #24]
 801491c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014920:	4809      	ldr	r0, [pc, #36]	@ (8014948 <siprintf+0x38>)
 8014922:	9107      	str	r1, [sp, #28]
 8014924:	9104      	str	r1, [sp, #16]
 8014926:	4909      	ldr	r1, [pc, #36]	@ (801494c <siprintf+0x3c>)
 8014928:	f853 2b04 	ldr.w	r2, [r3], #4
 801492c:	9105      	str	r1, [sp, #20]
 801492e:	6800      	ldr	r0, [r0, #0]
 8014930:	9301      	str	r3, [sp, #4]
 8014932:	a902      	add	r1, sp, #8
 8014934:	f002 fb9e 	bl	8017074 <_svfiprintf_r>
 8014938:	9b02      	ldr	r3, [sp, #8]
 801493a:	2200      	movs	r2, #0
 801493c:	701a      	strb	r2, [r3, #0]
 801493e:	b01c      	add	sp, #112	@ 0x70
 8014940:	f85d eb04 	ldr.w	lr, [sp], #4
 8014944:	b003      	add	sp, #12
 8014946:	4770      	bx	lr
 8014948:	20000090 	.word	0x20000090
 801494c:	ffff0208 	.word	0xffff0208

08014950 <__sread>:
 8014950:	b510      	push	{r4, lr}
 8014952:	460c      	mov	r4, r1
 8014954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014958:	f000 f8d8 	bl	8014b0c <_read_r>
 801495c:	2800      	cmp	r0, #0
 801495e:	bfab      	itete	ge
 8014960:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014962:	89a3      	ldrhlt	r3, [r4, #12]
 8014964:	181b      	addge	r3, r3, r0
 8014966:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801496a:	bfac      	ite	ge
 801496c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801496e:	81a3      	strhlt	r3, [r4, #12]
 8014970:	bd10      	pop	{r4, pc}

08014972 <__swrite>:
 8014972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014976:	461f      	mov	r7, r3
 8014978:	898b      	ldrh	r3, [r1, #12]
 801497a:	05db      	lsls	r3, r3, #23
 801497c:	4605      	mov	r5, r0
 801497e:	460c      	mov	r4, r1
 8014980:	4616      	mov	r6, r2
 8014982:	d505      	bpl.n	8014990 <__swrite+0x1e>
 8014984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014988:	2302      	movs	r3, #2
 801498a:	2200      	movs	r2, #0
 801498c:	f000 f8ac 	bl	8014ae8 <_lseek_r>
 8014990:	89a3      	ldrh	r3, [r4, #12]
 8014992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014996:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801499a:	81a3      	strh	r3, [r4, #12]
 801499c:	4632      	mov	r2, r6
 801499e:	463b      	mov	r3, r7
 80149a0:	4628      	mov	r0, r5
 80149a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149a6:	f000 b8e7 	b.w	8014b78 <_write_r>

080149aa <__sseek>:
 80149aa:	b510      	push	{r4, lr}
 80149ac:	460c      	mov	r4, r1
 80149ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149b2:	f000 f899 	bl	8014ae8 <_lseek_r>
 80149b6:	1c43      	adds	r3, r0, #1
 80149b8:	89a3      	ldrh	r3, [r4, #12]
 80149ba:	bf15      	itete	ne
 80149bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80149be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80149c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80149c6:	81a3      	strheq	r3, [r4, #12]
 80149c8:	bf18      	it	ne
 80149ca:	81a3      	strhne	r3, [r4, #12]
 80149cc:	bd10      	pop	{r4, pc}

080149ce <__sclose>:
 80149ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d2:	f000 b879 	b.w	8014ac8 <_close_r>

080149d6 <memcmp>:
 80149d6:	b510      	push	{r4, lr}
 80149d8:	3901      	subs	r1, #1
 80149da:	4402      	add	r2, r0
 80149dc:	4290      	cmp	r0, r2
 80149de:	d101      	bne.n	80149e4 <memcmp+0xe>
 80149e0:	2000      	movs	r0, #0
 80149e2:	e005      	b.n	80149f0 <memcmp+0x1a>
 80149e4:	7803      	ldrb	r3, [r0, #0]
 80149e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80149ea:	42a3      	cmp	r3, r4
 80149ec:	d001      	beq.n	80149f2 <memcmp+0x1c>
 80149ee:	1b18      	subs	r0, r3, r4
 80149f0:	bd10      	pop	{r4, pc}
 80149f2:	3001      	adds	r0, #1
 80149f4:	e7f2      	b.n	80149dc <memcmp+0x6>

080149f6 <memmove>:
 80149f6:	4288      	cmp	r0, r1
 80149f8:	b510      	push	{r4, lr}
 80149fa:	eb01 0402 	add.w	r4, r1, r2
 80149fe:	d902      	bls.n	8014a06 <memmove+0x10>
 8014a00:	4284      	cmp	r4, r0
 8014a02:	4623      	mov	r3, r4
 8014a04:	d807      	bhi.n	8014a16 <memmove+0x20>
 8014a06:	1e43      	subs	r3, r0, #1
 8014a08:	42a1      	cmp	r1, r4
 8014a0a:	d008      	beq.n	8014a1e <memmove+0x28>
 8014a0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a14:	e7f8      	b.n	8014a08 <memmove+0x12>
 8014a16:	4402      	add	r2, r0
 8014a18:	4601      	mov	r1, r0
 8014a1a:	428a      	cmp	r2, r1
 8014a1c:	d100      	bne.n	8014a20 <memmove+0x2a>
 8014a1e:	bd10      	pop	{r4, pc}
 8014a20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a28:	e7f7      	b.n	8014a1a <memmove+0x24>

08014a2a <memset>:
 8014a2a:	4402      	add	r2, r0
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	d100      	bne.n	8014a34 <memset+0xa>
 8014a32:	4770      	bx	lr
 8014a34:	f803 1b01 	strb.w	r1, [r3], #1
 8014a38:	e7f9      	b.n	8014a2e <memset+0x4>

08014a3a <strncpy>:
 8014a3a:	b510      	push	{r4, lr}
 8014a3c:	3901      	subs	r1, #1
 8014a3e:	4603      	mov	r3, r0
 8014a40:	b132      	cbz	r2, 8014a50 <strncpy+0x16>
 8014a42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a46:	f803 4b01 	strb.w	r4, [r3], #1
 8014a4a:	3a01      	subs	r2, #1
 8014a4c:	2c00      	cmp	r4, #0
 8014a4e:	d1f7      	bne.n	8014a40 <strncpy+0x6>
 8014a50:	441a      	add	r2, r3
 8014a52:	2100      	movs	r1, #0
 8014a54:	4293      	cmp	r3, r2
 8014a56:	d100      	bne.n	8014a5a <strncpy+0x20>
 8014a58:	bd10      	pop	{r4, pc}
 8014a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8014a5e:	e7f9      	b.n	8014a54 <strncpy+0x1a>

08014a60 <_raise_r>:
 8014a60:	291f      	cmp	r1, #31
 8014a62:	b538      	push	{r3, r4, r5, lr}
 8014a64:	4605      	mov	r5, r0
 8014a66:	460c      	mov	r4, r1
 8014a68:	d904      	bls.n	8014a74 <_raise_r+0x14>
 8014a6a:	2316      	movs	r3, #22
 8014a6c:	6003      	str	r3, [r0, #0]
 8014a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a72:	bd38      	pop	{r3, r4, r5, pc}
 8014a74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014a76:	b112      	cbz	r2, 8014a7e <_raise_r+0x1e>
 8014a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a7c:	b94b      	cbnz	r3, 8014a92 <_raise_r+0x32>
 8014a7e:	4628      	mov	r0, r5
 8014a80:	f000 f868 	bl	8014b54 <_getpid_r>
 8014a84:	4622      	mov	r2, r4
 8014a86:	4601      	mov	r1, r0
 8014a88:	4628      	mov	r0, r5
 8014a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a8e:	f000 b84f 	b.w	8014b30 <_kill_r>
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d00a      	beq.n	8014aac <_raise_r+0x4c>
 8014a96:	1c59      	adds	r1, r3, #1
 8014a98:	d103      	bne.n	8014aa2 <_raise_r+0x42>
 8014a9a:	2316      	movs	r3, #22
 8014a9c:	6003      	str	r3, [r0, #0]
 8014a9e:	2001      	movs	r0, #1
 8014aa0:	e7e7      	b.n	8014a72 <_raise_r+0x12>
 8014aa2:	2100      	movs	r1, #0
 8014aa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	4798      	blx	r3
 8014aac:	2000      	movs	r0, #0
 8014aae:	e7e0      	b.n	8014a72 <_raise_r+0x12>

08014ab0 <raise>:
 8014ab0:	4b02      	ldr	r3, [pc, #8]	@ (8014abc <raise+0xc>)
 8014ab2:	4601      	mov	r1, r0
 8014ab4:	6818      	ldr	r0, [r3, #0]
 8014ab6:	f7ff bfd3 	b.w	8014a60 <_raise_r>
 8014aba:	bf00      	nop
 8014abc:	20000090 	.word	0x20000090

08014ac0 <_localeconv_r>:
 8014ac0:	4800      	ldr	r0, [pc, #0]	@ (8014ac4 <_localeconv_r+0x4>)
 8014ac2:	4770      	bx	lr
 8014ac4:	200001d0 	.word	0x200001d0

08014ac8 <_close_r>:
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	4d06      	ldr	r5, [pc, #24]	@ (8014ae4 <_close_r+0x1c>)
 8014acc:	2300      	movs	r3, #0
 8014ace:	4604      	mov	r4, r0
 8014ad0:	4608      	mov	r0, r1
 8014ad2:	602b      	str	r3, [r5, #0]
 8014ad4:	f7f4 ff2e 	bl	8009934 <_close>
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	d102      	bne.n	8014ae2 <_close_r+0x1a>
 8014adc:	682b      	ldr	r3, [r5, #0]
 8014ade:	b103      	cbz	r3, 8014ae2 <_close_r+0x1a>
 8014ae0:	6023      	str	r3, [r4, #0]
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}
 8014ae4:	20000b08 	.word	0x20000b08

08014ae8 <_lseek_r>:
 8014ae8:	b538      	push	{r3, r4, r5, lr}
 8014aea:	4d07      	ldr	r5, [pc, #28]	@ (8014b08 <_lseek_r+0x20>)
 8014aec:	4604      	mov	r4, r0
 8014aee:	4608      	mov	r0, r1
 8014af0:	4611      	mov	r1, r2
 8014af2:	2200      	movs	r2, #0
 8014af4:	602a      	str	r2, [r5, #0]
 8014af6:	461a      	mov	r2, r3
 8014af8:	f7f4 ff43 	bl	8009982 <_lseek>
 8014afc:	1c43      	adds	r3, r0, #1
 8014afe:	d102      	bne.n	8014b06 <_lseek_r+0x1e>
 8014b00:	682b      	ldr	r3, [r5, #0]
 8014b02:	b103      	cbz	r3, 8014b06 <_lseek_r+0x1e>
 8014b04:	6023      	str	r3, [r4, #0]
 8014b06:	bd38      	pop	{r3, r4, r5, pc}
 8014b08:	20000b08 	.word	0x20000b08

08014b0c <_read_r>:
 8014b0c:	b538      	push	{r3, r4, r5, lr}
 8014b0e:	4d07      	ldr	r5, [pc, #28]	@ (8014b2c <_read_r+0x20>)
 8014b10:	4604      	mov	r4, r0
 8014b12:	4608      	mov	r0, r1
 8014b14:	4611      	mov	r1, r2
 8014b16:	2200      	movs	r2, #0
 8014b18:	602a      	str	r2, [r5, #0]
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	f7f4 fed1 	bl	80098c2 <_read>
 8014b20:	1c43      	adds	r3, r0, #1
 8014b22:	d102      	bne.n	8014b2a <_read_r+0x1e>
 8014b24:	682b      	ldr	r3, [r5, #0]
 8014b26:	b103      	cbz	r3, 8014b2a <_read_r+0x1e>
 8014b28:	6023      	str	r3, [r4, #0]
 8014b2a:	bd38      	pop	{r3, r4, r5, pc}
 8014b2c:	20000b08 	.word	0x20000b08

08014b30 <_kill_r>:
 8014b30:	b538      	push	{r3, r4, r5, lr}
 8014b32:	4d07      	ldr	r5, [pc, #28]	@ (8014b50 <_kill_r+0x20>)
 8014b34:	2300      	movs	r3, #0
 8014b36:	4604      	mov	r4, r0
 8014b38:	4608      	mov	r0, r1
 8014b3a:	4611      	mov	r1, r2
 8014b3c:	602b      	str	r3, [r5, #0]
 8014b3e:	f7f4 fea5 	bl	800988c <_kill>
 8014b42:	1c43      	adds	r3, r0, #1
 8014b44:	d102      	bne.n	8014b4c <_kill_r+0x1c>
 8014b46:	682b      	ldr	r3, [r5, #0]
 8014b48:	b103      	cbz	r3, 8014b4c <_kill_r+0x1c>
 8014b4a:	6023      	str	r3, [r4, #0]
 8014b4c:	bd38      	pop	{r3, r4, r5, pc}
 8014b4e:	bf00      	nop
 8014b50:	20000b08 	.word	0x20000b08

08014b54 <_getpid_r>:
 8014b54:	f7f4 be92 	b.w	800987c <_getpid>

08014b58 <_sbrk_r>:
 8014b58:	b538      	push	{r3, r4, r5, lr}
 8014b5a:	4d06      	ldr	r5, [pc, #24]	@ (8014b74 <_sbrk_r+0x1c>)
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	4604      	mov	r4, r0
 8014b60:	4608      	mov	r0, r1
 8014b62:	602b      	str	r3, [r5, #0]
 8014b64:	f7f4 ff1a 	bl	800999c <_sbrk>
 8014b68:	1c43      	adds	r3, r0, #1
 8014b6a:	d102      	bne.n	8014b72 <_sbrk_r+0x1a>
 8014b6c:	682b      	ldr	r3, [r5, #0]
 8014b6e:	b103      	cbz	r3, 8014b72 <_sbrk_r+0x1a>
 8014b70:	6023      	str	r3, [r4, #0]
 8014b72:	bd38      	pop	{r3, r4, r5, pc}
 8014b74:	20000b08 	.word	0x20000b08

08014b78 <_write_r>:
 8014b78:	b538      	push	{r3, r4, r5, lr}
 8014b7a:	4d07      	ldr	r5, [pc, #28]	@ (8014b98 <_write_r+0x20>)
 8014b7c:	4604      	mov	r4, r0
 8014b7e:	4608      	mov	r0, r1
 8014b80:	4611      	mov	r1, r2
 8014b82:	2200      	movs	r2, #0
 8014b84:	602a      	str	r2, [r5, #0]
 8014b86:	461a      	mov	r2, r3
 8014b88:	f7f4 feb8 	bl	80098fc <_write>
 8014b8c:	1c43      	adds	r3, r0, #1
 8014b8e:	d102      	bne.n	8014b96 <_write_r+0x1e>
 8014b90:	682b      	ldr	r3, [r5, #0]
 8014b92:	b103      	cbz	r3, 8014b96 <_write_r+0x1e>
 8014b94:	6023      	str	r3, [r4, #0]
 8014b96:	bd38      	pop	{r3, r4, r5, pc}
 8014b98:	20000b08 	.word	0x20000b08

08014b9c <__errno>:
 8014b9c:	4b01      	ldr	r3, [pc, #4]	@ (8014ba4 <__errno+0x8>)
 8014b9e:	6818      	ldr	r0, [r3, #0]
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop
 8014ba4:	20000090 	.word	0x20000090

08014ba8 <__libc_init_array>:
 8014ba8:	b570      	push	{r4, r5, r6, lr}
 8014baa:	4d0d      	ldr	r5, [pc, #52]	@ (8014be0 <__libc_init_array+0x38>)
 8014bac:	4c0d      	ldr	r4, [pc, #52]	@ (8014be4 <__libc_init_array+0x3c>)
 8014bae:	1b64      	subs	r4, r4, r5
 8014bb0:	10a4      	asrs	r4, r4, #2
 8014bb2:	2600      	movs	r6, #0
 8014bb4:	42a6      	cmp	r6, r4
 8014bb6:	d109      	bne.n	8014bcc <__libc_init_array+0x24>
 8014bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8014be8 <__libc_init_array+0x40>)
 8014bba:	4c0c      	ldr	r4, [pc, #48]	@ (8014bec <__libc_init_array+0x44>)
 8014bbc:	f003 fa1a 	bl	8017ff4 <_init>
 8014bc0:	1b64      	subs	r4, r4, r5
 8014bc2:	10a4      	asrs	r4, r4, #2
 8014bc4:	2600      	movs	r6, #0
 8014bc6:	42a6      	cmp	r6, r4
 8014bc8:	d105      	bne.n	8014bd6 <__libc_init_array+0x2e>
 8014bca:	bd70      	pop	{r4, r5, r6, pc}
 8014bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bd0:	4798      	blx	r3
 8014bd2:	3601      	adds	r6, #1
 8014bd4:	e7ee      	b.n	8014bb4 <__libc_init_array+0xc>
 8014bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bda:	4798      	blx	r3
 8014bdc:	3601      	adds	r6, #1
 8014bde:	e7f2      	b.n	8014bc6 <__libc_init_array+0x1e>
 8014be0:	080195cc 	.word	0x080195cc
 8014be4:	080195cc 	.word	0x080195cc
 8014be8:	080195cc 	.word	0x080195cc
 8014bec:	080195dc 	.word	0x080195dc

08014bf0 <__retarget_lock_init_recursive>:
 8014bf0:	4770      	bx	lr

08014bf2 <__retarget_lock_acquire_recursive>:
 8014bf2:	4770      	bx	lr

08014bf4 <__retarget_lock_release_recursive>:
 8014bf4:	4770      	bx	lr

08014bf6 <memcpy>:
 8014bf6:	440a      	add	r2, r1
 8014bf8:	4291      	cmp	r1, r2
 8014bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bfe:	d100      	bne.n	8014c02 <memcpy+0xc>
 8014c00:	4770      	bx	lr
 8014c02:	b510      	push	{r4, lr}
 8014c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c0c:	4291      	cmp	r1, r2
 8014c0e:	d1f9      	bne.n	8014c04 <memcpy+0xe>
 8014c10:	bd10      	pop	{r4, pc}
	...

08014c14 <nanf>:
 8014c14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014c1c <nanf+0x8>
 8014c18:	4770      	bx	lr
 8014c1a:	bf00      	nop
 8014c1c:	7fc00000 	.word	0x7fc00000

08014c20 <quorem>:
 8014c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c24:	6903      	ldr	r3, [r0, #16]
 8014c26:	690c      	ldr	r4, [r1, #16]
 8014c28:	42a3      	cmp	r3, r4
 8014c2a:	4607      	mov	r7, r0
 8014c2c:	db7e      	blt.n	8014d2c <quorem+0x10c>
 8014c2e:	3c01      	subs	r4, #1
 8014c30:	f101 0814 	add.w	r8, r1, #20
 8014c34:	00a3      	lsls	r3, r4, #2
 8014c36:	f100 0514 	add.w	r5, r0, #20
 8014c3a:	9300      	str	r3, [sp, #0]
 8014c3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c40:	9301      	str	r3, [sp, #4]
 8014c42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c52:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c56:	d32e      	bcc.n	8014cb6 <quorem+0x96>
 8014c58:	f04f 0a00 	mov.w	sl, #0
 8014c5c:	46c4      	mov	ip, r8
 8014c5e:	46ae      	mov	lr, r5
 8014c60:	46d3      	mov	fp, sl
 8014c62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014c66:	b298      	uxth	r0, r3
 8014c68:	fb06 a000 	mla	r0, r6, r0, sl
 8014c6c:	0c02      	lsrs	r2, r0, #16
 8014c6e:	0c1b      	lsrs	r3, r3, #16
 8014c70:	fb06 2303 	mla	r3, r6, r3, r2
 8014c74:	f8de 2000 	ldr.w	r2, [lr]
 8014c78:	b280      	uxth	r0, r0
 8014c7a:	b292      	uxth	r2, r2
 8014c7c:	1a12      	subs	r2, r2, r0
 8014c7e:	445a      	add	r2, fp
 8014c80:	f8de 0000 	ldr.w	r0, [lr]
 8014c84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014c8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014c92:	b292      	uxth	r2, r2
 8014c94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014c98:	45e1      	cmp	r9, ip
 8014c9a:	f84e 2b04 	str.w	r2, [lr], #4
 8014c9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014ca2:	d2de      	bcs.n	8014c62 <quorem+0x42>
 8014ca4:	9b00      	ldr	r3, [sp, #0]
 8014ca6:	58eb      	ldr	r3, [r5, r3]
 8014ca8:	b92b      	cbnz	r3, 8014cb6 <quorem+0x96>
 8014caa:	9b01      	ldr	r3, [sp, #4]
 8014cac:	3b04      	subs	r3, #4
 8014cae:	429d      	cmp	r5, r3
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	d32f      	bcc.n	8014d14 <quorem+0xf4>
 8014cb4:	613c      	str	r4, [r7, #16]
 8014cb6:	4638      	mov	r0, r7
 8014cb8:	f001 f90c 	bl	8015ed4 <__mcmp>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	db25      	blt.n	8014d0c <quorem+0xec>
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8014cc8:	f8d1 c000 	ldr.w	ip, [r1]
 8014ccc:	fa1f fe82 	uxth.w	lr, r2
 8014cd0:	fa1f f38c 	uxth.w	r3, ip
 8014cd4:	eba3 030e 	sub.w	r3, r3, lr
 8014cd8:	4403      	add	r3, r0
 8014cda:	0c12      	lsrs	r2, r2, #16
 8014cdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014ce0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014ce4:	b29b      	uxth	r3, r3
 8014ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cea:	45c1      	cmp	r9, r8
 8014cec:	f841 3b04 	str.w	r3, [r1], #4
 8014cf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014cf4:	d2e6      	bcs.n	8014cc4 <quorem+0xa4>
 8014cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cfe:	b922      	cbnz	r2, 8014d0a <quorem+0xea>
 8014d00:	3b04      	subs	r3, #4
 8014d02:	429d      	cmp	r5, r3
 8014d04:	461a      	mov	r2, r3
 8014d06:	d30b      	bcc.n	8014d20 <quorem+0x100>
 8014d08:	613c      	str	r4, [r7, #16]
 8014d0a:	3601      	adds	r6, #1
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	b003      	add	sp, #12
 8014d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d14:	6812      	ldr	r2, [r2, #0]
 8014d16:	3b04      	subs	r3, #4
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	d1cb      	bne.n	8014cb4 <quorem+0x94>
 8014d1c:	3c01      	subs	r4, #1
 8014d1e:	e7c6      	b.n	8014cae <quorem+0x8e>
 8014d20:	6812      	ldr	r2, [r2, #0]
 8014d22:	3b04      	subs	r3, #4
 8014d24:	2a00      	cmp	r2, #0
 8014d26:	d1ef      	bne.n	8014d08 <quorem+0xe8>
 8014d28:	3c01      	subs	r4, #1
 8014d2a:	e7ea      	b.n	8014d02 <quorem+0xe2>
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	e7ee      	b.n	8014d0e <quorem+0xee>

08014d30 <_dtoa_r>:
 8014d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d34:	69c7      	ldr	r7, [r0, #28]
 8014d36:	b099      	sub	sp, #100	@ 0x64
 8014d38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014d3c:	ec55 4b10 	vmov	r4, r5, d0
 8014d40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d44:	4683      	mov	fp, r0
 8014d46:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014d4a:	b97f      	cbnz	r7, 8014d6c <_dtoa_r+0x3c>
 8014d4c:	2010      	movs	r0, #16
 8014d4e:	f7fe fde1 	bl	8013914 <malloc>
 8014d52:	4602      	mov	r2, r0
 8014d54:	f8cb 001c 	str.w	r0, [fp, #28]
 8014d58:	b920      	cbnz	r0, 8014d64 <_dtoa_r+0x34>
 8014d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8014ff8 <_dtoa_r+0x2c8>)
 8014d5c:	21ef      	movs	r1, #239	@ 0xef
 8014d5e:	48a7      	ldr	r0, [pc, #668]	@ (8014ffc <_dtoa_r+0x2cc>)
 8014d60:	f7fe fda8 	bl	80138b4 <__assert_func>
 8014d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014d68:	6007      	str	r7, [r0, #0]
 8014d6a:	60c7      	str	r7, [r0, #12]
 8014d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014d70:	6819      	ldr	r1, [r3, #0]
 8014d72:	b159      	cbz	r1, 8014d8c <_dtoa_r+0x5c>
 8014d74:	685a      	ldr	r2, [r3, #4]
 8014d76:	604a      	str	r2, [r1, #4]
 8014d78:	2301      	movs	r3, #1
 8014d7a:	4093      	lsls	r3, r2
 8014d7c:	608b      	str	r3, [r1, #8]
 8014d7e:	4658      	mov	r0, fp
 8014d80:	f000 fe24 	bl	80159cc <_Bfree>
 8014d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	601a      	str	r2, [r3, #0]
 8014d8c:	1e2b      	subs	r3, r5, #0
 8014d8e:	bfb9      	ittee	lt
 8014d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014d94:	9303      	strlt	r3, [sp, #12]
 8014d96:	2300      	movge	r3, #0
 8014d98:	6033      	strge	r3, [r6, #0]
 8014d9a:	9f03      	ldr	r7, [sp, #12]
 8014d9c:	4b98      	ldr	r3, [pc, #608]	@ (8015000 <_dtoa_r+0x2d0>)
 8014d9e:	bfbc      	itt	lt
 8014da0:	2201      	movlt	r2, #1
 8014da2:	6032      	strlt	r2, [r6, #0]
 8014da4:	43bb      	bics	r3, r7
 8014da6:	d112      	bne.n	8014dce <_dtoa_r+0x9e>
 8014da8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014dae:	6013      	str	r3, [r2, #0]
 8014db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014db4:	4323      	orrs	r3, r4
 8014db6:	f000 854d 	beq.w	8015854 <_dtoa_r+0xb24>
 8014dba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014dbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015014 <_dtoa_r+0x2e4>
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 854f 	beq.w	8015864 <_dtoa_r+0xb34>
 8014dc6:	f10a 0303 	add.w	r3, sl, #3
 8014dca:	f000 bd49 	b.w	8015860 <_dtoa_r+0xb30>
 8014dce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	ec51 0b17 	vmov	r0, r1, d7
 8014dd8:	2300      	movs	r3, #0
 8014dda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014dde:	f7eb fe9b 	bl	8000b18 <__aeabi_dcmpeq>
 8014de2:	4680      	mov	r8, r0
 8014de4:	b158      	cbz	r0, 8014dfe <_dtoa_r+0xce>
 8014de6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014de8:	2301      	movs	r3, #1
 8014dea:	6013      	str	r3, [r2, #0]
 8014dec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014dee:	b113      	cbz	r3, 8014df6 <_dtoa_r+0xc6>
 8014df0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014df2:	4b84      	ldr	r3, [pc, #528]	@ (8015004 <_dtoa_r+0x2d4>)
 8014df4:	6013      	str	r3, [r2, #0]
 8014df6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015018 <_dtoa_r+0x2e8>
 8014dfa:	f000 bd33 	b.w	8015864 <_dtoa_r+0xb34>
 8014dfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014e02:	aa16      	add	r2, sp, #88	@ 0x58
 8014e04:	a917      	add	r1, sp, #92	@ 0x5c
 8014e06:	4658      	mov	r0, fp
 8014e08:	f001 f984 	bl	8016114 <__d2b>
 8014e0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014e10:	4681      	mov	r9, r0
 8014e12:	2e00      	cmp	r6, #0
 8014e14:	d077      	beq.n	8014f06 <_dtoa_r+0x1d6>
 8014e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014e28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014e2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014e30:	4619      	mov	r1, r3
 8014e32:	2200      	movs	r2, #0
 8014e34:	4b74      	ldr	r3, [pc, #464]	@ (8015008 <_dtoa_r+0x2d8>)
 8014e36:	f7eb fa4f 	bl	80002d8 <__aeabi_dsub>
 8014e3a:	a369      	add	r3, pc, #420	@ (adr r3, 8014fe0 <_dtoa_r+0x2b0>)
 8014e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e40:	f7eb fc02 	bl	8000648 <__aeabi_dmul>
 8014e44:	a368      	add	r3, pc, #416	@ (adr r3, 8014fe8 <_dtoa_r+0x2b8>)
 8014e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4a:	f7eb fa47 	bl	80002dc <__adddf3>
 8014e4e:	4604      	mov	r4, r0
 8014e50:	4630      	mov	r0, r6
 8014e52:	460d      	mov	r5, r1
 8014e54:	f7eb fb8e 	bl	8000574 <__aeabi_i2d>
 8014e58:	a365      	add	r3, pc, #404	@ (adr r3, 8014ff0 <_dtoa_r+0x2c0>)
 8014e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5e:	f7eb fbf3 	bl	8000648 <__aeabi_dmul>
 8014e62:	4602      	mov	r2, r0
 8014e64:	460b      	mov	r3, r1
 8014e66:	4620      	mov	r0, r4
 8014e68:	4629      	mov	r1, r5
 8014e6a:	f7eb fa37 	bl	80002dc <__adddf3>
 8014e6e:	4604      	mov	r4, r0
 8014e70:	460d      	mov	r5, r1
 8014e72:	f7eb fe99 	bl	8000ba8 <__aeabi_d2iz>
 8014e76:	2200      	movs	r2, #0
 8014e78:	4607      	mov	r7, r0
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	4629      	mov	r1, r5
 8014e80:	f7eb fe54 	bl	8000b2c <__aeabi_dcmplt>
 8014e84:	b140      	cbz	r0, 8014e98 <_dtoa_r+0x168>
 8014e86:	4638      	mov	r0, r7
 8014e88:	f7eb fb74 	bl	8000574 <__aeabi_i2d>
 8014e8c:	4622      	mov	r2, r4
 8014e8e:	462b      	mov	r3, r5
 8014e90:	f7eb fe42 	bl	8000b18 <__aeabi_dcmpeq>
 8014e94:	b900      	cbnz	r0, 8014e98 <_dtoa_r+0x168>
 8014e96:	3f01      	subs	r7, #1
 8014e98:	2f16      	cmp	r7, #22
 8014e9a:	d851      	bhi.n	8014f40 <_dtoa_r+0x210>
 8014e9c:	4b5b      	ldr	r3, [pc, #364]	@ (801500c <_dtoa_r+0x2dc>)
 8014e9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014eaa:	f7eb fe3f 	bl	8000b2c <__aeabi_dcmplt>
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	d048      	beq.n	8014f44 <_dtoa_r+0x214>
 8014eb2:	3f01      	subs	r7, #1
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8014eb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014eba:	1b9b      	subs	r3, r3, r6
 8014ebc:	1e5a      	subs	r2, r3, #1
 8014ebe:	bf44      	itt	mi
 8014ec0:	f1c3 0801 	rsbmi	r8, r3, #1
 8014ec4:	2300      	movmi	r3, #0
 8014ec6:	9208      	str	r2, [sp, #32]
 8014ec8:	bf54      	ite	pl
 8014eca:	f04f 0800 	movpl.w	r8, #0
 8014ece:	9308      	strmi	r3, [sp, #32]
 8014ed0:	2f00      	cmp	r7, #0
 8014ed2:	db39      	blt.n	8014f48 <_dtoa_r+0x218>
 8014ed4:	9b08      	ldr	r3, [sp, #32]
 8014ed6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014ed8:	443b      	add	r3, r7
 8014eda:	9308      	str	r3, [sp, #32]
 8014edc:	2300      	movs	r3, #0
 8014ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ee2:	2b09      	cmp	r3, #9
 8014ee4:	d864      	bhi.n	8014fb0 <_dtoa_r+0x280>
 8014ee6:	2b05      	cmp	r3, #5
 8014ee8:	bfc4      	itt	gt
 8014eea:	3b04      	subgt	r3, #4
 8014eec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8014ef4:	bfcc      	ite	gt
 8014ef6:	2400      	movgt	r4, #0
 8014ef8:	2401      	movle	r4, #1
 8014efa:	2b03      	cmp	r3, #3
 8014efc:	d863      	bhi.n	8014fc6 <_dtoa_r+0x296>
 8014efe:	e8df f003 	tbb	[pc, r3]
 8014f02:	372a      	.short	0x372a
 8014f04:	5535      	.short	0x5535
 8014f06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014f0a:	441e      	add	r6, r3
 8014f0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014f10:	2b20      	cmp	r3, #32
 8014f12:	bfc1      	itttt	gt
 8014f14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014f18:	409f      	lslgt	r7, r3
 8014f1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014f1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014f22:	bfd6      	itet	le
 8014f24:	f1c3 0320 	rsble	r3, r3, #32
 8014f28:	ea47 0003 	orrgt.w	r0, r7, r3
 8014f2c:	fa04 f003 	lslle.w	r0, r4, r3
 8014f30:	f7eb fb10 	bl	8000554 <__aeabi_ui2d>
 8014f34:	2201      	movs	r2, #1
 8014f36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014f3a:	3e01      	subs	r6, #1
 8014f3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8014f3e:	e777      	b.n	8014e30 <_dtoa_r+0x100>
 8014f40:	2301      	movs	r3, #1
 8014f42:	e7b8      	b.n	8014eb6 <_dtoa_r+0x186>
 8014f44:	9012      	str	r0, [sp, #72]	@ 0x48
 8014f46:	e7b7      	b.n	8014eb8 <_dtoa_r+0x188>
 8014f48:	427b      	negs	r3, r7
 8014f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	eba8 0807 	sub.w	r8, r8, r7
 8014f52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f54:	e7c4      	b.n	8014ee0 <_dtoa_r+0x1b0>
 8014f56:	2300      	movs	r3, #0
 8014f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	dc35      	bgt.n	8014fcc <_dtoa_r+0x29c>
 8014f60:	2301      	movs	r3, #1
 8014f62:	9300      	str	r3, [sp, #0]
 8014f64:	9307      	str	r3, [sp, #28]
 8014f66:	461a      	mov	r2, r3
 8014f68:	920e      	str	r2, [sp, #56]	@ 0x38
 8014f6a:	e00b      	b.n	8014f84 <_dtoa_r+0x254>
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e7f3      	b.n	8014f58 <_dtoa_r+0x228>
 8014f70:	2300      	movs	r3, #0
 8014f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f76:	18fb      	adds	r3, r7, r3
 8014f78:	9300      	str	r3, [sp, #0]
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	9307      	str	r3, [sp, #28]
 8014f80:	bfb8      	it	lt
 8014f82:	2301      	movlt	r3, #1
 8014f84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014f88:	2100      	movs	r1, #0
 8014f8a:	2204      	movs	r2, #4
 8014f8c:	f102 0514 	add.w	r5, r2, #20
 8014f90:	429d      	cmp	r5, r3
 8014f92:	d91f      	bls.n	8014fd4 <_dtoa_r+0x2a4>
 8014f94:	6041      	str	r1, [r0, #4]
 8014f96:	4658      	mov	r0, fp
 8014f98:	f000 fcd8 	bl	801594c <_Balloc>
 8014f9c:	4682      	mov	sl, r0
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	d13c      	bne.n	801501c <_dtoa_r+0x2ec>
 8014fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8015010 <_dtoa_r+0x2e0>)
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8014faa:	e6d8      	b.n	8014d5e <_dtoa_r+0x2e>
 8014fac:	2301      	movs	r3, #1
 8014fae:	e7e0      	b.n	8014f72 <_dtoa_r+0x242>
 8014fb0:	2401      	movs	r4, #1
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fbc:	9300      	str	r3, [sp, #0]
 8014fbe:	9307      	str	r3, [sp, #28]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	2312      	movs	r3, #18
 8014fc4:	e7d0      	b.n	8014f68 <_dtoa_r+0x238>
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014fca:	e7f5      	b.n	8014fb8 <_dtoa_r+0x288>
 8014fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	9307      	str	r3, [sp, #28]
 8014fd2:	e7d7      	b.n	8014f84 <_dtoa_r+0x254>
 8014fd4:	3101      	adds	r1, #1
 8014fd6:	0052      	lsls	r2, r2, #1
 8014fd8:	e7d8      	b.n	8014f8c <_dtoa_r+0x25c>
 8014fda:	bf00      	nop
 8014fdc:	f3af 8000 	nop.w
 8014fe0:	636f4361 	.word	0x636f4361
 8014fe4:	3fd287a7 	.word	0x3fd287a7
 8014fe8:	8b60c8b3 	.word	0x8b60c8b3
 8014fec:	3fc68a28 	.word	0x3fc68a28
 8014ff0:	509f79fb 	.word	0x509f79fb
 8014ff4:	3fd34413 	.word	0x3fd34413
 8014ff8:	0801921a 	.word	0x0801921a
 8014ffc:	08019231 	.word	0x08019231
 8015000:	7ff00000 	.word	0x7ff00000
 8015004:	080191e5 	.word	0x080191e5
 8015008:	3ff80000 	.word	0x3ff80000
 801500c:	08019328 	.word	0x08019328
 8015010:	08019289 	.word	0x08019289
 8015014:	08019216 	.word	0x08019216
 8015018:	080191e4 	.word	0x080191e4
 801501c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015020:	6018      	str	r0, [r3, #0]
 8015022:	9b07      	ldr	r3, [sp, #28]
 8015024:	2b0e      	cmp	r3, #14
 8015026:	f200 80a4 	bhi.w	8015172 <_dtoa_r+0x442>
 801502a:	2c00      	cmp	r4, #0
 801502c:	f000 80a1 	beq.w	8015172 <_dtoa_r+0x442>
 8015030:	2f00      	cmp	r7, #0
 8015032:	dd33      	ble.n	801509c <_dtoa_r+0x36c>
 8015034:	4bad      	ldr	r3, [pc, #692]	@ (80152ec <_dtoa_r+0x5bc>)
 8015036:	f007 020f 	and.w	r2, r7, #15
 801503a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801503e:	ed93 7b00 	vldr	d7, [r3]
 8015042:	05f8      	lsls	r0, r7, #23
 8015044:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015048:	ea4f 1427 	mov.w	r4, r7, asr #4
 801504c:	d516      	bpl.n	801507c <_dtoa_r+0x34c>
 801504e:	4ba8      	ldr	r3, [pc, #672]	@ (80152f0 <_dtoa_r+0x5c0>)
 8015050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015058:	f7eb fc20 	bl	800089c <__aeabi_ddiv>
 801505c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015060:	f004 040f 	and.w	r4, r4, #15
 8015064:	2603      	movs	r6, #3
 8015066:	4da2      	ldr	r5, [pc, #648]	@ (80152f0 <_dtoa_r+0x5c0>)
 8015068:	b954      	cbnz	r4, 8015080 <_dtoa_r+0x350>
 801506a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801506e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015072:	f7eb fc13 	bl	800089c <__aeabi_ddiv>
 8015076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801507a:	e028      	b.n	80150ce <_dtoa_r+0x39e>
 801507c:	2602      	movs	r6, #2
 801507e:	e7f2      	b.n	8015066 <_dtoa_r+0x336>
 8015080:	07e1      	lsls	r1, r4, #31
 8015082:	d508      	bpl.n	8015096 <_dtoa_r+0x366>
 8015084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015088:	e9d5 2300 	ldrd	r2, r3, [r5]
 801508c:	f7eb fadc 	bl	8000648 <__aeabi_dmul>
 8015090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015094:	3601      	adds	r6, #1
 8015096:	1064      	asrs	r4, r4, #1
 8015098:	3508      	adds	r5, #8
 801509a:	e7e5      	b.n	8015068 <_dtoa_r+0x338>
 801509c:	f000 80d2 	beq.w	8015244 <_dtoa_r+0x514>
 80150a0:	427c      	negs	r4, r7
 80150a2:	4b92      	ldr	r3, [pc, #584]	@ (80152ec <_dtoa_r+0x5bc>)
 80150a4:	4d92      	ldr	r5, [pc, #584]	@ (80152f0 <_dtoa_r+0x5c0>)
 80150a6:	f004 020f 	and.w	r2, r4, #15
 80150aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80150b6:	f7eb fac7 	bl	8000648 <__aeabi_dmul>
 80150ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150be:	1124      	asrs	r4, r4, #4
 80150c0:	2300      	movs	r3, #0
 80150c2:	2602      	movs	r6, #2
 80150c4:	2c00      	cmp	r4, #0
 80150c6:	f040 80b2 	bne.w	801522e <_dtoa_r+0x4fe>
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d1d3      	bne.n	8015076 <_dtoa_r+0x346>
 80150ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80150d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f000 80b7 	beq.w	8015248 <_dtoa_r+0x518>
 80150da:	4b86      	ldr	r3, [pc, #536]	@ (80152f4 <_dtoa_r+0x5c4>)
 80150dc:	2200      	movs	r2, #0
 80150de:	4620      	mov	r0, r4
 80150e0:	4629      	mov	r1, r5
 80150e2:	f7eb fd23 	bl	8000b2c <__aeabi_dcmplt>
 80150e6:	2800      	cmp	r0, #0
 80150e8:	f000 80ae 	beq.w	8015248 <_dtoa_r+0x518>
 80150ec:	9b07      	ldr	r3, [sp, #28]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f000 80aa 	beq.w	8015248 <_dtoa_r+0x518>
 80150f4:	9b00      	ldr	r3, [sp, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	dd37      	ble.n	801516a <_dtoa_r+0x43a>
 80150fa:	1e7b      	subs	r3, r7, #1
 80150fc:	9304      	str	r3, [sp, #16]
 80150fe:	4620      	mov	r0, r4
 8015100:	4b7d      	ldr	r3, [pc, #500]	@ (80152f8 <_dtoa_r+0x5c8>)
 8015102:	2200      	movs	r2, #0
 8015104:	4629      	mov	r1, r5
 8015106:	f7eb fa9f 	bl	8000648 <__aeabi_dmul>
 801510a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801510e:	9c00      	ldr	r4, [sp, #0]
 8015110:	3601      	adds	r6, #1
 8015112:	4630      	mov	r0, r6
 8015114:	f7eb fa2e 	bl	8000574 <__aeabi_i2d>
 8015118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801511c:	f7eb fa94 	bl	8000648 <__aeabi_dmul>
 8015120:	4b76      	ldr	r3, [pc, #472]	@ (80152fc <_dtoa_r+0x5cc>)
 8015122:	2200      	movs	r2, #0
 8015124:	f7eb f8da 	bl	80002dc <__adddf3>
 8015128:	4605      	mov	r5, r0
 801512a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801512e:	2c00      	cmp	r4, #0
 8015130:	f040 808d 	bne.w	801524e <_dtoa_r+0x51e>
 8015134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015138:	4b71      	ldr	r3, [pc, #452]	@ (8015300 <_dtoa_r+0x5d0>)
 801513a:	2200      	movs	r2, #0
 801513c:	f7eb f8cc 	bl	80002d8 <__aeabi_dsub>
 8015140:	4602      	mov	r2, r0
 8015142:	460b      	mov	r3, r1
 8015144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015148:	462a      	mov	r2, r5
 801514a:	4633      	mov	r3, r6
 801514c:	f7eb fd0c 	bl	8000b68 <__aeabi_dcmpgt>
 8015150:	2800      	cmp	r0, #0
 8015152:	f040 828b 	bne.w	801566c <_dtoa_r+0x93c>
 8015156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801515a:	462a      	mov	r2, r5
 801515c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015160:	f7eb fce4 	bl	8000b2c <__aeabi_dcmplt>
 8015164:	2800      	cmp	r0, #0
 8015166:	f040 8128 	bne.w	80153ba <_dtoa_r+0x68a>
 801516a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801516e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015174:	2b00      	cmp	r3, #0
 8015176:	f2c0 815a 	blt.w	801542e <_dtoa_r+0x6fe>
 801517a:	2f0e      	cmp	r7, #14
 801517c:	f300 8157 	bgt.w	801542e <_dtoa_r+0x6fe>
 8015180:	4b5a      	ldr	r3, [pc, #360]	@ (80152ec <_dtoa_r+0x5bc>)
 8015182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015186:	ed93 7b00 	vldr	d7, [r3]
 801518a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801518c:	2b00      	cmp	r3, #0
 801518e:	ed8d 7b00 	vstr	d7, [sp]
 8015192:	da03      	bge.n	801519c <_dtoa_r+0x46c>
 8015194:	9b07      	ldr	r3, [sp, #28]
 8015196:	2b00      	cmp	r3, #0
 8015198:	f340 8101 	ble.w	801539e <_dtoa_r+0x66e>
 801519c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80151a0:	4656      	mov	r6, sl
 80151a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151a6:	4620      	mov	r0, r4
 80151a8:	4629      	mov	r1, r5
 80151aa:	f7eb fb77 	bl	800089c <__aeabi_ddiv>
 80151ae:	f7eb fcfb 	bl	8000ba8 <__aeabi_d2iz>
 80151b2:	4680      	mov	r8, r0
 80151b4:	f7eb f9de 	bl	8000574 <__aeabi_i2d>
 80151b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151bc:	f7eb fa44 	bl	8000648 <__aeabi_dmul>
 80151c0:	4602      	mov	r2, r0
 80151c2:	460b      	mov	r3, r1
 80151c4:	4620      	mov	r0, r4
 80151c6:	4629      	mov	r1, r5
 80151c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80151cc:	f7eb f884 	bl	80002d8 <__aeabi_dsub>
 80151d0:	f806 4b01 	strb.w	r4, [r6], #1
 80151d4:	9d07      	ldr	r5, [sp, #28]
 80151d6:	eba6 040a 	sub.w	r4, r6, sl
 80151da:	42a5      	cmp	r5, r4
 80151dc:	4602      	mov	r2, r0
 80151de:	460b      	mov	r3, r1
 80151e0:	f040 8117 	bne.w	8015412 <_dtoa_r+0x6e2>
 80151e4:	f7eb f87a 	bl	80002dc <__adddf3>
 80151e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151ec:	4604      	mov	r4, r0
 80151ee:	460d      	mov	r5, r1
 80151f0:	f7eb fcba 	bl	8000b68 <__aeabi_dcmpgt>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	f040 80f9 	bne.w	80153ec <_dtoa_r+0x6bc>
 80151fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151fe:	4620      	mov	r0, r4
 8015200:	4629      	mov	r1, r5
 8015202:	f7eb fc89 	bl	8000b18 <__aeabi_dcmpeq>
 8015206:	b118      	cbz	r0, 8015210 <_dtoa_r+0x4e0>
 8015208:	f018 0f01 	tst.w	r8, #1
 801520c:	f040 80ee 	bne.w	80153ec <_dtoa_r+0x6bc>
 8015210:	4649      	mov	r1, r9
 8015212:	4658      	mov	r0, fp
 8015214:	f000 fbda 	bl	80159cc <_Bfree>
 8015218:	2300      	movs	r3, #0
 801521a:	7033      	strb	r3, [r6, #0]
 801521c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801521e:	3701      	adds	r7, #1
 8015220:	601f      	str	r7, [r3, #0]
 8015222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 831d 	beq.w	8015864 <_dtoa_r+0xb34>
 801522a:	601e      	str	r6, [r3, #0]
 801522c:	e31a      	b.n	8015864 <_dtoa_r+0xb34>
 801522e:	07e2      	lsls	r2, r4, #31
 8015230:	d505      	bpl.n	801523e <_dtoa_r+0x50e>
 8015232:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015236:	f7eb fa07 	bl	8000648 <__aeabi_dmul>
 801523a:	3601      	adds	r6, #1
 801523c:	2301      	movs	r3, #1
 801523e:	1064      	asrs	r4, r4, #1
 8015240:	3508      	adds	r5, #8
 8015242:	e73f      	b.n	80150c4 <_dtoa_r+0x394>
 8015244:	2602      	movs	r6, #2
 8015246:	e742      	b.n	80150ce <_dtoa_r+0x39e>
 8015248:	9c07      	ldr	r4, [sp, #28]
 801524a:	9704      	str	r7, [sp, #16]
 801524c:	e761      	b.n	8015112 <_dtoa_r+0x3e2>
 801524e:	4b27      	ldr	r3, [pc, #156]	@ (80152ec <_dtoa_r+0x5bc>)
 8015250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015256:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801525a:	4454      	add	r4, sl
 801525c:	2900      	cmp	r1, #0
 801525e:	d053      	beq.n	8015308 <_dtoa_r+0x5d8>
 8015260:	4928      	ldr	r1, [pc, #160]	@ (8015304 <_dtoa_r+0x5d4>)
 8015262:	2000      	movs	r0, #0
 8015264:	f7eb fb1a 	bl	800089c <__aeabi_ddiv>
 8015268:	4633      	mov	r3, r6
 801526a:	462a      	mov	r2, r5
 801526c:	f7eb f834 	bl	80002d8 <__aeabi_dsub>
 8015270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015274:	4656      	mov	r6, sl
 8015276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801527a:	f7eb fc95 	bl	8000ba8 <__aeabi_d2iz>
 801527e:	4605      	mov	r5, r0
 8015280:	f7eb f978 	bl	8000574 <__aeabi_i2d>
 8015284:	4602      	mov	r2, r0
 8015286:	460b      	mov	r3, r1
 8015288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801528c:	f7eb f824 	bl	80002d8 <__aeabi_dsub>
 8015290:	3530      	adds	r5, #48	@ 0x30
 8015292:	4602      	mov	r2, r0
 8015294:	460b      	mov	r3, r1
 8015296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801529a:	f806 5b01 	strb.w	r5, [r6], #1
 801529e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152a2:	f7eb fc43 	bl	8000b2c <__aeabi_dcmplt>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d171      	bne.n	801538e <_dtoa_r+0x65e>
 80152aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152ae:	4911      	ldr	r1, [pc, #68]	@ (80152f4 <_dtoa_r+0x5c4>)
 80152b0:	2000      	movs	r0, #0
 80152b2:	f7eb f811 	bl	80002d8 <__aeabi_dsub>
 80152b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152ba:	f7eb fc37 	bl	8000b2c <__aeabi_dcmplt>
 80152be:	2800      	cmp	r0, #0
 80152c0:	f040 8095 	bne.w	80153ee <_dtoa_r+0x6be>
 80152c4:	42a6      	cmp	r6, r4
 80152c6:	f43f af50 	beq.w	801516a <_dtoa_r+0x43a>
 80152ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80152ce:	4b0a      	ldr	r3, [pc, #40]	@ (80152f8 <_dtoa_r+0x5c8>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	f7eb f9b9 	bl	8000648 <__aeabi_dmul>
 80152d6:	4b08      	ldr	r3, [pc, #32]	@ (80152f8 <_dtoa_r+0x5c8>)
 80152d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80152dc:	2200      	movs	r2, #0
 80152de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152e2:	f7eb f9b1 	bl	8000648 <__aeabi_dmul>
 80152e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152ea:	e7c4      	b.n	8015276 <_dtoa_r+0x546>
 80152ec:	08019328 	.word	0x08019328
 80152f0:	08019300 	.word	0x08019300
 80152f4:	3ff00000 	.word	0x3ff00000
 80152f8:	40240000 	.word	0x40240000
 80152fc:	401c0000 	.word	0x401c0000
 8015300:	40140000 	.word	0x40140000
 8015304:	3fe00000 	.word	0x3fe00000
 8015308:	4631      	mov	r1, r6
 801530a:	4628      	mov	r0, r5
 801530c:	f7eb f99c 	bl	8000648 <__aeabi_dmul>
 8015310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015314:	9415      	str	r4, [sp, #84]	@ 0x54
 8015316:	4656      	mov	r6, sl
 8015318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801531c:	f7eb fc44 	bl	8000ba8 <__aeabi_d2iz>
 8015320:	4605      	mov	r5, r0
 8015322:	f7eb f927 	bl	8000574 <__aeabi_i2d>
 8015326:	4602      	mov	r2, r0
 8015328:	460b      	mov	r3, r1
 801532a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801532e:	f7ea ffd3 	bl	80002d8 <__aeabi_dsub>
 8015332:	3530      	adds	r5, #48	@ 0x30
 8015334:	f806 5b01 	strb.w	r5, [r6], #1
 8015338:	4602      	mov	r2, r0
 801533a:	460b      	mov	r3, r1
 801533c:	42a6      	cmp	r6, r4
 801533e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015342:	f04f 0200 	mov.w	r2, #0
 8015346:	d124      	bne.n	8015392 <_dtoa_r+0x662>
 8015348:	4bac      	ldr	r3, [pc, #688]	@ (80155fc <_dtoa_r+0x8cc>)
 801534a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801534e:	f7ea ffc5 	bl	80002dc <__adddf3>
 8015352:	4602      	mov	r2, r0
 8015354:	460b      	mov	r3, r1
 8015356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801535a:	f7eb fc05 	bl	8000b68 <__aeabi_dcmpgt>
 801535e:	2800      	cmp	r0, #0
 8015360:	d145      	bne.n	80153ee <_dtoa_r+0x6be>
 8015362:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015366:	49a5      	ldr	r1, [pc, #660]	@ (80155fc <_dtoa_r+0x8cc>)
 8015368:	2000      	movs	r0, #0
 801536a:	f7ea ffb5 	bl	80002d8 <__aeabi_dsub>
 801536e:	4602      	mov	r2, r0
 8015370:	460b      	mov	r3, r1
 8015372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015376:	f7eb fbd9 	bl	8000b2c <__aeabi_dcmplt>
 801537a:	2800      	cmp	r0, #0
 801537c:	f43f aef5 	beq.w	801516a <_dtoa_r+0x43a>
 8015380:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015382:	1e73      	subs	r3, r6, #1
 8015384:	9315      	str	r3, [sp, #84]	@ 0x54
 8015386:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801538a:	2b30      	cmp	r3, #48	@ 0x30
 801538c:	d0f8      	beq.n	8015380 <_dtoa_r+0x650>
 801538e:	9f04      	ldr	r7, [sp, #16]
 8015390:	e73e      	b.n	8015210 <_dtoa_r+0x4e0>
 8015392:	4b9b      	ldr	r3, [pc, #620]	@ (8015600 <_dtoa_r+0x8d0>)
 8015394:	f7eb f958 	bl	8000648 <__aeabi_dmul>
 8015398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801539c:	e7bc      	b.n	8015318 <_dtoa_r+0x5e8>
 801539e:	d10c      	bne.n	80153ba <_dtoa_r+0x68a>
 80153a0:	4b98      	ldr	r3, [pc, #608]	@ (8015604 <_dtoa_r+0x8d4>)
 80153a2:	2200      	movs	r2, #0
 80153a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153a8:	f7eb f94e 	bl	8000648 <__aeabi_dmul>
 80153ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153b0:	f7eb fbd0 	bl	8000b54 <__aeabi_dcmpge>
 80153b4:	2800      	cmp	r0, #0
 80153b6:	f000 8157 	beq.w	8015668 <_dtoa_r+0x938>
 80153ba:	2400      	movs	r4, #0
 80153bc:	4625      	mov	r5, r4
 80153be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153c0:	43db      	mvns	r3, r3
 80153c2:	9304      	str	r3, [sp, #16]
 80153c4:	4656      	mov	r6, sl
 80153c6:	2700      	movs	r7, #0
 80153c8:	4621      	mov	r1, r4
 80153ca:	4658      	mov	r0, fp
 80153cc:	f000 fafe 	bl	80159cc <_Bfree>
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	d0dc      	beq.n	801538e <_dtoa_r+0x65e>
 80153d4:	b12f      	cbz	r7, 80153e2 <_dtoa_r+0x6b2>
 80153d6:	42af      	cmp	r7, r5
 80153d8:	d003      	beq.n	80153e2 <_dtoa_r+0x6b2>
 80153da:	4639      	mov	r1, r7
 80153dc:	4658      	mov	r0, fp
 80153de:	f000 faf5 	bl	80159cc <_Bfree>
 80153e2:	4629      	mov	r1, r5
 80153e4:	4658      	mov	r0, fp
 80153e6:	f000 faf1 	bl	80159cc <_Bfree>
 80153ea:	e7d0      	b.n	801538e <_dtoa_r+0x65e>
 80153ec:	9704      	str	r7, [sp, #16]
 80153ee:	4633      	mov	r3, r6
 80153f0:	461e      	mov	r6, r3
 80153f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153f6:	2a39      	cmp	r2, #57	@ 0x39
 80153f8:	d107      	bne.n	801540a <_dtoa_r+0x6da>
 80153fa:	459a      	cmp	sl, r3
 80153fc:	d1f8      	bne.n	80153f0 <_dtoa_r+0x6c0>
 80153fe:	9a04      	ldr	r2, [sp, #16]
 8015400:	3201      	adds	r2, #1
 8015402:	9204      	str	r2, [sp, #16]
 8015404:	2230      	movs	r2, #48	@ 0x30
 8015406:	f88a 2000 	strb.w	r2, [sl]
 801540a:	781a      	ldrb	r2, [r3, #0]
 801540c:	3201      	adds	r2, #1
 801540e:	701a      	strb	r2, [r3, #0]
 8015410:	e7bd      	b.n	801538e <_dtoa_r+0x65e>
 8015412:	4b7b      	ldr	r3, [pc, #492]	@ (8015600 <_dtoa_r+0x8d0>)
 8015414:	2200      	movs	r2, #0
 8015416:	f7eb f917 	bl	8000648 <__aeabi_dmul>
 801541a:	2200      	movs	r2, #0
 801541c:	2300      	movs	r3, #0
 801541e:	4604      	mov	r4, r0
 8015420:	460d      	mov	r5, r1
 8015422:	f7eb fb79 	bl	8000b18 <__aeabi_dcmpeq>
 8015426:	2800      	cmp	r0, #0
 8015428:	f43f aebb 	beq.w	80151a2 <_dtoa_r+0x472>
 801542c:	e6f0      	b.n	8015210 <_dtoa_r+0x4e0>
 801542e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015430:	2a00      	cmp	r2, #0
 8015432:	f000 80db 	beq.w	80155ec <_dtoa_r+0x8bc>
 8015436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015438:	2a01      	cmp	r2, #1
 801543a:	f300 80bf 	bgt.w	80155bc <_dtoa_r+0x88c>
 801543e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015440:	2a00      	cmp	r2, #0
 8015442:	f000 80b7 	beq.w	80155b4 <_dtoa_r+0x884>
 8015446:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801544a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801544c:	4646      	mov	r6, r8
 801544e:	9a08      	ldr	r2, [sp, #32]
 8015450:	2101      	movs	r1, #1
 8015452:	441a      	add	r2, r3
 8015454:	4658      	mov	r0, fp
 8015456:	4498      	add	r8, r3
 8015458:	9208      	str	r2, [sp, #32]
 801545a:	f000 fbb5 	bl	8015bc8 <__i2b>
 801545e:	4605      	mov	r5, r0
 8015460:	b15e      	cbz	r6, 801547a <_dtoa_r+0x74a>
 8015462:	9b08      	ldr	r3, [sp, #32]
 8015464:	2b00      	cmp	r3, #0
 8015466:	dd08      	ble.n	801547a <_dtoa_r+0x74a>
 8015468:	42b3      	cmp	r3, r6
 801546a:	9a08      	ldr	r2, [sp, #32]
 801546c:	bfa8      	it	ge
 801546e:	4633      	movge	r3, r6
 8015470:	eba8 0803 	sub.w	r8, r8, r3
 8015474:	1af6      	subs	r6, r6, r3
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	9308      	str	r3, [sp, #32]
 801547a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801547c:	b1f3      	cbz	r3, 80154bc <_dtoa_r+0x78c>
 801547e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 80b7 	beq.w	80155f4 <_dtoa_r+0x8c4>
 8015486:	b18c      	cbz	r4, 80154ac <_dtoa_r+0x77c>
 8015488:	4629      	mov	r1, r5
 801548a:	4622      	mov	r2, r4
 801548c:	4658      	mov	r0, fp
 801548e:	f000 fc5b 	bl	8015d48 <__pow5mult>
 8015492:	464a      	mov	r2, r9
 8015494:	4601      	mov	r1, r0
 8015496:	4605      	mov	r5, r0
 8015498:	4658      	mov	r0, fp
 801549a:	f000 fbab 	bl	8015bf4 <__multiply>
 801549e:	4649      	mov	r1, r9
 80154a0:	9004      	str	r0, [sp, #16]
 80154a2:	4658      	mov	r0, fp
 80154a4:	f000 fa92 	bl	80159cc <_Bfree>
 80154a8:	9b04      	ldr	r3, [sp, #16]
 80154aa:	4699      	mov	r9, r3
 80154ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154ae:	1b1a      	subs	r2, r3, r4
 80154b0:	d004      	beq.n	80154bc <_dtoa_r+0x78c>
 80154b2:	4649      	mov	r1, r9
 80154b4:	4658      	mov	r0, fp
 80154b6:	f000 fc47 	bl	8015d48 <__pow5mult>
 80154ba:	4681      	mov	r9, r0
 80154bc:	2101      	movs	r1, #1
 80154be:	4658      	mov	r0, fp
 80154c0:	f000 fb82 	bl	8015bc8 <__i2b>
 80154c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154c6:	4604      	mov	r4, r0
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	f000 81cf 	beq.w	801586c <_dtoa_r+0xb3c>
 80154ce:	461a      	mov	r2, r3
 80154d0:	4601      	mov	r1, r0
 80154d2:	4658      	mov	r0, fp
 80154d4:	f000 fc38 	bl	8015d48 <__pow5mult>
 80154d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154da:	2b01      	cmp	r3, #1
 80154dc:	4604      	mov	r4, r0
 80154de:	f300 8095 	bgt.w	801560c <_dtoa_r+0x8dc>
 80154e2:	9b02      	ldr	r3, [sp, #8]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	f040 8087 	bne.w	80155f8 <_dtoa_r+0x8c8>
 80154ea:	9b03      	ldr	r3, [sp, #12]
 80154ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f040 8089 	bne.w	8015608 <_dtoa_r+0x8d8>
 80154f6:	9b03      	ldr	r3, [sp, #12]
 80154f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80154fc:	0d1b      	lsrs	r3, r3, #20
 80154fe:	051b      	lsls	r3, r3, #20
 8015500:	b12b      	cbz	r3, 801550e <_dtoa_r+0x7de>
 8015502:	9b08      	ldr	r3, [sp, #32]
 8015504:	3301      	adds	r3, #1
 8015506:	9308      	str	r3, [sp, #32]
 8015508:	f108 0801 	add.w	r8, r8, #1
 801550c:	2301      	movs	r3, #1
 801550e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015512:	2b00      	cmp	r3, #0
 8015514:	f000 81b0 	beq.w	8015878 <_dtoa_r+0xb48>
 8015518:	6923      	ldr	r3, [r4, #16]
 801551a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801551e:	6918      	ldr	r0, [r3, #16]
 8015520:	f000 fb06 	bl	8015b30 <__hi0bits>
 8015524:	f1c0 0020 	rsb	r0, r0, #32
 8015528:	9b08      	ldr	r3, [sp, #32]
 801552a:	4418      	add	r0, r3
 801552c:	f010 001f 	ands.w	r0, r0, #31
 8015530:	d077      	beq.n	8015622 <_dtoa_r+0x8f2>
 8015532:	f1c0 0320 	rsb	r3, r0, #32
 8015536:	2b04      	cmp	r3, #4
 8015538:	dd6b      	ble.n	8015612 <_dtoa_r+0x8e2>
 801553a:	9b08      	ldr	r3, [sp, #32]
 801553c:	f1c0 001c 	rsb	r0, r0, #28
 8015540:	4403      	add	r3, r0
 8015542:	4480      	add	r8, r0
 8015544:	4406      	add	r6, r0
 8015546:	9308      	str	r3, [sp, #32]
 8015548:	f1b8 0f00 	cmp.w	r8, #0
 801554c:	dd05      	ble.n	801555a <_dtoa_r+0x82a>
 801554e:	4649      	mov	r1, r9
 8015550:	4642      	mov	r2, r8
 8015552:	4658      	mov	r0, fp
 8015554:	f000 fc52 	bl	8015dfc <__lshift>
 8015558:	4681      	mov	r9, r0
 801555a:	9b08      	ldr	r3, [sp, #32]
 801555c:	2b00      	cmp	r3, #0
 801555e:	dd05      	ble.n	801556c <_dtoa_r+0x83c>
 8015560:	4621      	mov	r1, r4
 8015562:	461a      	mov	r2, r3
 8015564:	4658      	mov	r0, fp
 8015566:	f000 fc49 	bl	8015dfc <__lshift>
 801556a:	4604      	mov	r4, r0
 801556c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801556e:	2b00      	cmp	r3, #0
 8015570:	d059      	beq.n	8015626 <_dtoa_r+0x8f6>
 8015572:	4621      	mov	r1, r4
 8015574:	4648      	mov	r0, r9
 8015576:	f000 fcad 	bl	8015ed4 <__mcmp>
 801557a:	2800      	cmp	r0, #0
 801557c:	da53      	bge.n	8015626 <_dtoa_r+0x8f6>
 801557e:	1e7b      	subs	r3, r7, #1
 8015580:	9304      	str	r3, [sp, #16]
 8015582:	4649      	mov	r1, r9
 8015584:	2300      	movs	r3, #0
 8015586:	220a      	movs	r2, #10
 8015588:	4658      	mov	r0, fp
 801558a:	f000 fa41 	bl	8015a10 <__multadd>
 801558e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015590:	4681      	mov	r9, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	f000 8172 	beq.w	801587c <_dtoa_r+0xb4c>
 8015598:	2300      	movs	r3, #0
 801559a:	4629      	mov	r1, r5
 801559c:	220a      	movs	r2, #10
 801559e:	4658      	mov	r0, fp
 80155a0:	f000 fa36 	bl	8015a10 <__multadd>
 80155a4:	9b00      	ldr	r3, [sp, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	4605      	mov	r5, r0
 80155aa:	dc67      	bgt.n	801567c <_dtoa_r+0x94c>
 80155ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155ae:	2b02      	cmp	r3, #2
 80155b0:	dc41      	bgt.n	8015636 <_dtoa_r+0x906>
 80155b2:	e063      	b.n	801567c <_dtoa_r+0x94c>
 80155b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80155b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80155ba:	e746      	b.n	801544a <_dtoa_r+0x71a>
 80155bc:	9b07      	ldr	r3, [sp, #28]
 80155be:	1e5c      	subs	r4, r3, #1
 80155c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155c2:	42a3      	cmp	r3, r4
 80155c4:	bfbf      	itttt	lt
 80155c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80155c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80155ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80155cc:	1ae3      	sublt	r3, r4, r3
 80155ce:	bfb4      	ite	lt
 80155d0:	18d2      	addlt	r2, r2, r3
 80155d2:	1b1c      	subge	r4, r3, r4
 80155d4:	9b07      	ldr	r3, [sp, #28]
 80155d6:	bfbc      	itt	lt
 80155d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80155da:	2400      	movlt	r4, #0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	bfb5      	itete	lt
 80155e0:	eba8 0603 	sublt.w	r6, r8, r3
 80155e4:	9b07      	ldrge	r3, [sp, #28]
 80155e6:	2300      	movlt	r3, #0
 80155e8:	4646      	movge	r6, r8
 80155ea:	e730      	b.n	801544e <_dtoa_r+0x71e>
 80155ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80155ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80155f0:	4646      	mov	r6, r8
 80155f2:	e735      	b.n	8015460 <_dtoa_r+0x730>
 80155f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80155f6:	e75c      	b.n	80154b2 <_dtoa_r+0x782>
 80155f8:	2300      	movs	r3, #0
 80155fa:	e788      	b.n	801550e <_dtoa_r+0x7de>
 80155fc:	3fe00000 	.word	0x3fe00000
 8015600:	40240000 	.word	0x40240000
 8015604:	40140000 	.word	0x40140000
 8015608:	9b02      	ldr	r3, [sp, #8]
 801560a:	e780      	b.n	801550e <_dtoa_r+0x7de>
 801560c:	2300      	movs	r3, #0
 801560e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015610:	e782      	b.n	8015518 <_dtoa_r+0x7e8>
 8015612:	d099      	beq.n	8015548 <_dtoa_r+0x818>
 8015614:	9a08      	ldr	r2, [sp, #32]
 8015616:	331c      	adds	r3, #28
 8015618:	441a      	add	r2, r3
 801561a:	4498      	add	r8, r3
 801561c:	441e      	add	r6, r3
 801561e:	9208      	str	r2, [sp, #32]
 8015620:	e792      	b.n	8015548 <_dtoa_r+0x818>
 8015622:	4603      	mov	r3, r0
 8015624:	e7f6      	b.n	8015614 <_dtoa_r+0x8e4>
 8015626:	9b07      	ldr	r3, [sp, #28]
 8015628:	9704      	str	r7, [sp, #16]
 801562a:	2b00      	cmp	r3, #0
 801562c:	dc20      	bgt.n	8015670 <_dtoa_r+0x940>
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015632:	2b02      	cmp	r3, #2
 8015634:	dd1e      	ble.n	8015674 <_dtoa_r+0x944>
 8015636:	9b00      	ldr	r3, [sp, #0]
 8015638:	2b00      	cmp	r3, #0
 801563a:	f47f aec0 	bne.w	80153be <_dtoa_r+0x68e>
 801563e:	4621      	mov	r1, r4
 8015640:	2205      	movs	r2, #5
 8015642:	4658      	mov	r0, fp
 8015644:	f000 f9e4 	bl	8015a10 <__multadd>
 8015648:	4601      	mov	r1, r0
 801564a:	4604      	mov	r4, r0
 801564c:	4648      	mov	r0, r9
 801564e:	f000 fc41 	bl	8015ed4 <__mcmp>
 8015652:	2800      	cmp	r0, #0
 8015654:	f77f aeb3 	ble.w	80153be <_dtoa_r+0x68e>
 8015658:	4656      	mov	r6, sl
 801565a:	2331      	movs	r3, #49	@ 0x31
 801565c:	f806 3b01 	strb.w	r3, [r6], #1
 8015660:	9b04      	ldr	r3, [sp, #16]
 8015662:	3301      	adds	r3, #1
 8015664:	9304      	str	r3, [sp, #16]
 8015666:	e6ae      	b.n	80153c6 <_dtoa_r+0x696>
 8015668:	9c07      	ldr	r4, [sp, #28]
 801566a:	9704      	str	r7, [sp, #16]
 801566c:	4625      	mov	r5, r4
 801566e:	e7f3      	b.n	8015658 <_dtoa_r+0x928>
 8015670:	9b07      	ldr	r3, [sp, #28]
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015676:	2b00      	cmp	r3, #0
 8015678:	f000 8104 	beq.w	8015884 <_dtoa_r+0xb54>
 801567c:	2e00      	cmp	r6, #0
 801567e:	dd05      	ble.n	801568c <_dtoa_r+0x95c>
 8015680:	4629      	mov	r1, r5
 8015682:	4632      	mov	r2, r6
 8015684:	4658      	mov	r0, fp
 8015686:	f000 fbb9 	bl	8015dfc <__lshift>
 801568a:	4605      	mov	r5, r0
 801568c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801568e:	2b00      	cmp	r3, #0
 8015690:	d05a      	beq.n	8015748 <_dtoa_r+0xa18>
 8015692:	6869      	ldr	r1, [r5, #4]
 8015694:	4658      	mov	r0, fp
 8015696:	f000 f959 	bl	801594c <_Balloc>
 801569a:	4606      	mov	r6, r0
 801569c:	b928      	cbnz	r0, 80156aa <_dtoa_r+0x97a>
 801569e:	4b84      	ldr	r3, [pc, #528]	@ (80158b0 <_dtoa_r+0xb80>)
 80156a0:	4602      	mov	r2, r0
 80156a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80156a6:	f7ff bb5a 	b.w	8014d5e <_dtoa_r+0x2e>
 80156aa:	692a      	ldr	r2, [r5, #16]
 80156ac:	3202      	adds	r2, #2
 80156ae:	0092      	lsls	r2, r2, #2
 80156b0:	f105 010c 	add.w	r1, r5, #12
 80156b4:	300c      	adds	r0, #12
 80156b6:	f7ff fa9e 	bl	8014bf6 <memcpy>
 80156ba:	2201      	movs	r2, #1
 80156bc:	4631      	mov	r1, r6
 80156be:	4658      	mov	r0, fp
 80156c0:	f000 fb9c 	bl	8015dfc <__lshift>
 80156c4:	f10a 0301 	add.w	r3, sl, #1
 80156c8:	9307      	str	r3, [sp, #28]
 80156ca:	9b00      	ldr	r3, [sp, #0]
 80156cc:	4453      	add	r3, sl
 80156ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156d0:	9b02      	ldr	r3, [sp, #8]
 80156d2:	f003 0301 	and.w	r3, r3, #1
 80156d6:	462f      	mov	r7, r5
 80156d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80156da:	4605      	mov	r5, r0
 80156dc:	9b07      	ldr	r3, [sp, #28]
 80156de:	4621      	mov	r1, r4
 80156e0:	3b01      	subs	r3, #1
 80156e2:	4648      	mov	r0, r9
 80156e4:	9300      	str	r3, [sp, #0]
 80156e6:	f7ff fa9b 	bl	8014c20 <quorem>
 80156ea:	4639      	mov	r1, r7
 80156ec:	9002      	str	r0, [sp, #8]
 80156ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80156f2:	4648      	mov	r0, r9
 80156f4:	f000 fbee 	bl	8015ed4 <__mcmp>
 80156f8:	462a      	mov	r2, r5
 80156fa:	9008      	str	r0, [sp, #32]
 80156fc:	4621      	mov	r1, r4
 80156fe:	4658      	mov	r0, fp
 8015700:	f000 fc04 	bl	8015f0c <__mdiff>
 8015704:	68c2      	ldr	r2, [r0, #12]
 8015706:	4606      	mov	r6, r0
 8015708:	bb02      	cbnz	r2, 801574c <_dtoa_r+0xa1c>
 801570a:	4601      	mov	r1, r0
 801570c:	4648      	mov	r0, r9
 801570e:	f000 fbe1 	bl	8015ed4 <__mcmp>
 8015712:	4602      	mov	r2, r0
 8015714:	4631      	mov	r1, r6
 8015716:	4658      	mov	r0, fp
 8015718:	920e      	str	r2, [sp, #56]	@ 0x38
 801571a:	f000 f957 	bl	80159cc <_Bfree>
 801571e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015722:	9e07      	ldr	r6, [sp, #28]
 8015724:	ea43 0102 	orr.w	r1, r3, r2
 8015728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801572a:	4319      	orrs	r1, r3
 801572c:	d110      	bne.n	8015750 <_dtoa_r+0xa20>
 801572e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015732:	d029      	beq.n	8015788 <_dtoa_r+0xa58>
 8015734:	9b08      	ldr	r3, [sp, #32]
 8015736:	2b00      	cmp	r3, #0
 8015738:	dd02      	ble.n	8015740 <_dtoa_r+0xa10>
 801573a:	9b02      	ldr	r3, [sp, #8]
 801573c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015740:	9b00      	ldr	r3, [sp, #0]
 8015742:	f883 8000 	strb.w	r8, [r3]
 8015746:	e63f      	b.n	80153c8 <_dtoa_r+0x698>
 8015748:	4628      	mov	r0, r5
 801574a:	e7bb      	b.n	80156c4 <_dtoa_r+0x994>
 801574c:	2201      	movs	r2, #1
 801574e:	e7e1      	b.n	8015714 <_dtoa_r+0x9e4>
 8015750:	9b08      	ldr	r3, [sp, #32]
 8015752:	2b00      	cmp	r3, #0
 8015754:	db04      	blt.n	8015760 <_dtoa_r+0xa30>
 8015756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015758:	430b      	orrs	r3, r1
 801575a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801575c:	430b      	orrs	r3, r1
 801575e:	d120      	bne.n	80157a2 <_dtoa_r+0xa72>
 8015760:	2a00      	cmp	r2, #0
 8015762:	dded      	ble.n	8015740 <_dtoa_r+0xa10>
 8015764:	4649      	mov	r1, r9
 8015766:	2201      	movs	r2, #1
 8015768:	4658      	mov	r0, fp
 801576a:	f000 fb47 	bl	8015dfc <__lshift>
 801576e:	4621      	mov	r1, r4
 8015770:	4681      	mov	r9, r0
 8015772:	f000 fbaf 	bl	8015ed4 <__mcmp>
 8015776:	2800      	cmp	r0, #0
 8015778:	dc03      	bgt.n	8015782 <_dtoa_r+0xa52>
 801577a:	d1e1      	bne.n	8015740 <_dtoa_r+0xa10>
 801577c:	f018 0f01 	tst.w	r8, #1
 8015780:	d0de      	beq.n	8015740 <_dtoa_r+0xa10>
 8015782:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015786:	d1d8      	bne.n	801573a <_dtoa_r+0xa0a>
 8015788:	9a00      	ldr	r2, [sp, #0]
 801578a:	2339      	movs	r3, #57	@ 0x39
 801578c:	7013      	strb	r3, [r2, #0]
 801578e:	4633      	mov	r3, r6
 8015790:	461e      	mov	r6, r3
 8015792:	3b01      	subs	r3, #1
 8015794:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015798:	2a39      	cmp	r2, #57	@ 0x39
 801579a:	d052      	beq.n	8015842 <_dtoa_r+0xb12>
 801579c:	3201      	adds	r2, #1
 801579e:	701a      	strb	r2, [r3, #0]
 80157a0:	e612      	b.n	80153c8 <_dtoa_r+0x698>
 80157a2:	2a00      	cmp	r2, #0
 80157a4:	dd07      	ble.n	80157b6 <_dtoa_r+0xa86>
 80157a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80157aa:	d0ed      	beq.n	8015788 <_dtoa_r+0xa58>
 80157ac:	9a00      	ldr	r2, [sp, #0]
 80157ae:	f108 0301 	add.w	r3, r8, #1
 80157b2:	7013      	strb	r3, [r2, #0]
 80157b4:	e608      	b.n	80153c8 <_dtoa_r+0x698>
 80157b6:	9b07      	ldr	r3, [sp, #28]
 80157b8:	9a07      	ldr	r2, [sp, #28]
 80157ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80157be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80157c0:	4293      	cmp	r3, r2
 80157c2:	d028      	beq.n	8015816 <_dtoa_r+0xae6>
 80157c4:	4649      	mov	r1, r9
 80157c6:	2300      	movs	r3, #0
 80157c8:	220a      	movs	r2, #10
 80157ca:	4658      	mov	r0, fp
 80157cc:	f000 f920 	bl	8015a10 <__multadd>
 80157d0:	42af      	cmp	r7, r5
 80157d2:	4681      	mov	r9, r0
 80157d4:	f04f 0300 	mov.w	r3, #0
 80157d8:	f04f 020a 	mov.w	r2, #10
 80157dc:	4639      	mov	r1, r7
 80157de:	4658      	mov	r0, fp
 80157e0:	d107      	bne.n	80157f2 <_dtoa_r+0xac2>
 80157e2:	f000 f915 	bl	8015a10 <__multadd>
 80157e6:	4607      	mov	r7, r0
 80157e8:	4605      	mov	r5, r0
 80157ea:	9b07      	ldr	r3, [sp, #28]
 80157ec:	3301      	adds	r3, #1
 80157ee:	9307      	str	r3, [sp, #28]
 80157f0:	e774      	b.n	80156dc <_dtoa_r+0x9ac>
 80157f2:	f000 f90d 	bl	8015a10 <__multadd>
 80157f6:	4629      	mov	r1, r5
 80157f8:	4607      	mov	r7, r0
 80157fa:	2300      	movs	r3, #0
 80157fc:	220a      	movs	r2, #10
 80157fe:	4658      	mov	r0, fp
 8015800:	f000 f906 	bl	8015a10 <__multadd>
 8015804:	4605      	mov	r5, r0
 8015806:	e7f0      	b.n	80157ea <_dtoa_r+0xaba>
 8015808:	9b00      	ldr	r3, [sp, #0]
 801580a:	2b00      	cmp	r3, #0
 801580c:	bfcc      	ite	gt
 801580e:	461e      	movgt	r6, r3
 8015810:	2601      	movle	r6, #1
 8015812:	4456      	add	r6, sl
 8015814:	2700      	movs	r7, #0
 8015816:	4649      	mov	r1, r9
 8015818:	2201      	movs	r2, #1
 801581a:	4658      	mov	r0, fp
 801581c:	f000 faee 	bl	8015dfc <__lshift>
 8015820:	4621      	mov	r1, r4
 8015822:	4681      	mov	r9, r0
 8015824:	f000 fb56 	bl	8015ed4 <__mcmp>
 8015828:	2800      	cmp	r0, #0
 801582a:	dcb0      	bgt.n	801578e <_dtoa_r+0xa5e>
 801582c:	d102      	bne.n	8015834 <_dtoa_r+0xb04>
 801582e:	f018 0f01 	tst.w	r8, #1
 8015832:	d1ac      	bne.n	801578e <_dtoa_r+0xa5e>
 8015834:	4633      	mov	r3, r6
 8015836:	461e      	mov	r6, r3
 8015838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801583c:	2a30      	cmp	r2, #48	@ 0x30
 801583e:	d0fa      	beq.n	8015836 <_dtoa_r+0xb06>
 8015840:	e5c2      	b.n	80153c8 <_dtoa_r+0x698>
 8015842:	459a      	cmp	sl, r3
 8015844:	d1a4      	bne.n	8015790 <_dtoa_r+0xa60>
 8015846:	9b04      	ldr	r3, [sp, #16]
 8015848:	3301      	adds	r3, #1
 801584a:	9304      	str	r3, [sp, #16]
 801584c:	2331      	movs	r3, #49	@ 0x31
 801584e:	f88a 3000 	strb.w	r3, [sl]
 8015852:	e5b9      	b.n	80153c8 <_dtoa_r+0x698>
 8015854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015856:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80158b4 <_dtoa_r+0xb84>
 801585a:	b11b      	cbz	r3, 8015864 <_dtoa_r+0xb34>
 801585c:	f10a 0308 	add.w	r3, sl, #8
 8015860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015862:	6013      	str	r3, [r2, #0]
 8015864:	4650      	mov	r0, sl
 8015866:	b019      	add	sp, #100	@ 0x64
 8015868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801586c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801586e:	2b01      	cmp	r3, #1
 8015870:	f77f ae37 	ble.w	80154e2 <_dtoa_r+0x7b2>
 8015874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015876:	930a      	str	r3, [sp, #40]	@ 0x28
 8015878:	2001      	movs	r0, #1
 801587a:	e655      	b.n	8015528 <_dtoa_r+0x7f8>
 801587c:	9b00      	ldr	r3, [sp, #0]
 801587e:	2b00      	cmp	r3, #0
 8015880:	f77f aed6 	ble.w	8015630 <_dtoa_r+0x900>
 8015884:	4656      	mov	r6, sl
 8015886:	4621      	mov	r1, r4
 8015888:	4648      	mov	r0, r9
 801588a:	f7ff f9c9 	bl	8014c20 <quorem>
 801588e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015892:	f806 8b01 	strb.w	r8, [r6], #1
 8015896:	9b00      	ldr	r3, [sp, #0]
 8015898:	eba6 020a 	sub.w	r2, r6, sl
 801589c:	4293      	cmp	r3, r2
 801589e:	ddb3      	ble.n	8015808 <_dtoa_r+0xad8>
 80158a0:	4649      	mov	r1, r9
 80158a2:	2300      	movs	r3, #0
 80158a4:	220a      	movs	r2, #10
 80158a6:	4658      	mov	r0, fp
 80158a8:	f000 f8b2 	bl	8015a10 <__multadd>
 80158ac:	4681      	mov	r9, r0
 80158ae:	e7ea      	b.n	8015886 <_dtoa_r+0xb56>
 80158b0:	08019289 	.word	0x08019289
 80158b4:	0801920d 	.word	0x0801920d

080158b8 <_free_r>:
 80158b8:	b538      	push	{r3, r4, r5, lr}
 80158ba:	4605      	mov	r5, r0
 80158bc:	2900      	cmp	r1, #0
 80158be:	d041      	beq.n	8015944 <_free_r+0x8c>
 80158c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158c4:	1f0c      	subs	r4, r1, #4
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	bfb8      	it	lt
 80158ca:	18e4      	addlt	r4, r4, r3
 80158cc:	f7fe f8d4 	bl	8013a78 <__malloc_lock>
 80158d0:	4a1d      	ldr	r2, [pc, #116]	@ (8015948 <_free_r+0x90>)
 80158d2:	6813      	ldr	r3, [r2, #0]
 80158d4:	b933      	cbnz	r3, 80158e4 <_free_r+0x2c>
 80158d6:	6063      	str	r3, [r4, #4]
 80158d8:	6014      	str	r4, [r2, #0]
 80158da:	4628      	mov	r0, r5
 80158dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158e0:	f7fe b8d0 	b.w	8013a84 <__malloc_unlock>
 80158e4:	42a3      	cmp	r3, r4
 80158e6:	d908      	bls.n	80158fa <_free_r+0x42>
 80158e8:	6820      	ldr	r0, [r4, #0]
 80158ea:	1821      	adds	r1, r4, r0
 80158ec:	428b      	cmp	r3, r1
 80158ee:	bf01      	itttt	eq
 80158f0:	6819      	ldreq	r1, [r3, #0]
 80158f2:	685b      	ldreq	r3, [r3, #4]
 80158f4:	1809      	addeq	r1, r1, r0
 80158f6:	6021      	streq	r1, [r4, #0]
 80158f8:	e7ed      	b.n	80158d6 <_free_r+0x1e>
 80158fa:	461a      	mov	r2, r3
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	b10b      	cbz	r3, 8015904 <_free_r+0x4c>
 8015900:	42a3      	cmp	r3, r4
 8015902:	d9fa      	bls.n	80158fa <_free_r+0x42>
 8015904:	6811      	ldr	r1, [r2, #0]
 8015906:	1850      	adds	r0, r2, r1
 8015908:	42a0      	cmp	r0, r4
 801590a:	d10b      	bne.n	8015924 <_free_r+0x6c>
 801590c:	6820      	ldr	r0, [r4, #0]
 801590e:	4401      	add	r1, r0
 8015910:	1850      	adds	r0, r2, r1
 8015912:	4283      	cmp	r3, r0
 8015914:	6011      	str	r1, [r2, #0]
 8015916:	d1e0      	bne.n	80158da <_free_r+0x22>
 8015918:	6818      	ldr	r0, [r3, #0]
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	6053      	str	r3, [r2, #4]
 801591e:	4408      	add	r0, r1
 8015920:	6010      	str	r0, [r2, #0]
 8015922:	e7da      	b.n	80158da <_free_r+0x22>
 8015924:	d902      	bls.n	801592c <_free_r+0x74>
 8015926:	230c      	movs	r3, #12
 8015928:	602b      	str	r3, [r5, #0]
 801592a:	e7d6      	b.n	80158da <_free_r+0x22>
 801592c:	6820      	ldr	r0, [r4, #0]
 801592e:	1821      	adds	r1, r4, r0
 8015930:	428b      	cmp	r3, r1
 8015932:	bf04      	itt	eq
 8015934:	6819      	ldreq	r1, [r3, #0]
 8015936:	685b      	ldreq	r3, [r3, #4]
 8015938:	6063      	str	r3, [r4, #4]
 801593a:	bf04      	itt	eq
 801593c:	1809      	addeq	r1, r1, r0
 801593e:	6021      	streq	r1, [r4, #0]
 8015940:	6054      	str	r4, [r2, #4]
 8015942:	e7ca      	b.n	80158da <_free_r+0x22>
 8015944:	bd38      	pop	{r3, r4, r5, pc}
 8015946:	bf00      	nop
 8015948:	200009c8 	.word	0x200009c8

0801594c <_Balloc>:
 801594c:	b570      	push	{r4, r5, r6, lr}
 801594e:	69c6      	ldr	r6, [r0, #28]
 8015950:	4604      	mov	r4, r0
 8015952:	460d      	mov	r5, r1
 8015954:	b976      	cbnz	r6, 8015974 <_Balloc+0x28>
 8015956:	2010      	movs	r0, #16
 8015958:	f7fd ffdc 	bl	8013914 <malloc>
 801595c:	4602      	mov	r2, r0
 801595e:	61e0      	str	r0, [r4, #28]
 8015960:	b920      	cbnz	r0, 801596c <_Balloc+0x20>
 8015962:	4b18      	ldr	r3, [pc, #96]	@ (80159c4 <_Balloc+0x78>)
 8015964:	4818      	ldr	r0, [pc, #96]	@ (80159c8 <_Balloc+0x7c>)
 8015966:	216b      	movs	r1, #107	@ 0x6b
 8015968:	f7fd ffa4 	bl	80138b4 <__assert_func>
 801596c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015970:	6006      	str	r6, [r0, #0]
 8015972:	60c6      	str	r6, [r0, #12]
 8015974:	69e6      	ldr	r6, [r4, #28]
 8015976:	68f3      	ldr	r3, [r6, #12]
 8015978:	b183      	cbz	r3, 801599c <_Balloc+0x50>
 801597a:	69e3      	ldr	r3, [r4, #28]
 801597c:	68db      	ldr	r3, [r3, #12]
 801597e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015982:	b9b8      	cbnz	r0, 80159b4 <_Balloc+0x68>
 8015984:	2101      	movs	r1, #1
 8015986:	fa01 f605 	lsl.w	r6, r1, r5
 801598a:	1d72      	adds	r2, r6, #5
 801598c:	0092      	lsls	r2, r2, #2
 801598e:	4620      	mov	r0, r4
 8015990:	f001 ff0a 	bl	80177a8 <_calloc_r>
 8015994:	b160      	cbz	r0, 80159b0 <_Balloc+0x64>
 8015996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801599a:	e00e      	b.n	80159ba <_Balloc+0x6e>
 801599c:	2221      	movs	r2, #33	@ 0x21
 801599e:	2104      	movs	r1, #4
 80159a0:	4620      	mov	r0, r4
 80159a2:	f001 ff01 	bl	80177a8 <_calloc_r>
 80159a6:	69e3      	ldr	r3, [r4, #28]
 80159a8:	60f0      	str	r0, [r6, #12]
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d1e4      	bne.n	801597a <_Balloc+0x2e>
 80159b0:	2000      	movs	r0, #0
 80159b2:	bd70      	pop	{r4, r5, r6, pc}
 80159b4:	6802      	ldr	r2, [r0, #0]
 80159b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80159ba:	2300      	movs	r3, #0
 80159bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80159c0:	e7f7      	b.n	80159b2 <_Balloc+0x66>
 80159c2:	bf00      	nop
 80159c4:	0801921a 	.word	0x0801921a
 80159c8:	0801929a 	.word	0x0801929a

080159cc <_Bfree>:
 80159cc:	b570      	push	{r4, r5, r6, lr}
 80159ce:	69c6      	ldr	r6, [r0, #28]
 80159d0:	4605      	mov	r5, r0
 80159d2:	460c      	mov	r4, r1
 80159d4:	b976      	cbnz	r6, 80159f4 <_Bfree+0x28>
 80159d6:	2010      	movs	r0, #16
 80159d8:	f7fd ff9c 	bl	8013914 <malloc>
 80159dc:	4602      	mov	r2, r0
 80159de:	61e8      	str	r0, [r5, #28]
 80159e0:	b920      	cbnz	r0, 80159ec <_Bfree+0x20>
 80159e2:	4b09      	ldr	r3, [pc, #36]	@ (8015a08 <_Bfree+0x3c>)
 80159e4:	4809      	ldr	r0, [pc, #36]	@ (8015a0c <_Bfree+0x40>)
 80159e6:	218f      	movs	r1, #143	@ 0x8f
 80159e8:	f7fd ff64 	bl	80138b4 <__assert_func>
 80159ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159f0:	6006      	str	r6, [r0, #0]
 80159f2:	60c6      	str	r6, [r0, #12]
 80159f4:	b13c      	cbz	r4, 8015a06 <_Bfree+0x3a>
 80159f6:	69eb      	ldr	r3, [r5, #28]
 80159f8:	6862      	ldr	r2, [r4, #4]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015a00:	6021      	str	r1, [r4, #0]
 8015a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015a06:	bd70      	pop	{r4, r5, r6, pc}
 8015a08:	0801921a 	.word	0x0801921a
 8015a0c:	0801929a 	.word	0x0801929a

08015a10 <__multadd>:
 8015a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a14:	690d      	ldr	r5, [r1, #16]
 8015a16:	4607      	mov	r7, r0
 8015a18:	460c      	mov	r4, r1
 8015a1a:	461e      	mov	r6, r3
 8015a1c:	f101 0c14 	add.w	ip, r1, #20
 8015a20:	2000      	movs	r0, #0
 8015a22:	f8dc 3000 	ldr.w	r3, [ip]
 8015a26:	b299      	uxth	r1, r3
 8015a28:	fb02 6101 	mla	r1, r2, r1, r6
 8015a2c:	0c1e      	lsrs	r6, r3, #16
 8015a2e:	0c0b      	lsrs	r3, r1, #16
 8015a30:	fb02 3306 	mla	r3, r2, r6, r3
 8015a34:	b289      	uxth	r1, r1
 8015a36:	3001      	adds	r0, #1
 8015a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015a3c:	4285      	cmp	r5, r0
 8015a3e:	f84c 1b04 	str.w	r1, [ip], #4
 8015a42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015a46:	dcec      	bgt.n	8015a22 <__multadd+0x12>
 8015a48:	b30e      	cbz	r6, 8015a8e <__multadd+0x7e>
 8015a4a:	68a3      	ldr	r3, [r4, #8]
 8015a4c:	42ab      	cmp	r3, r5
 8015a4e:	dc19      	bgt.n	8015a84 <__multadd+0x74>
 8015a50:	6861      	ldr	r1, [r4, #4]
 8015a52:	4638      	mov	r0, r7
 8015a54:	3101      	adds	r1, #1
 8015a56:	f7ff ff79 	bl	801594c <_Balloc>
 8015a5a:	4680      	mov	r8, r0
 8015a5c:	b928      	cbnz	r0, 8015a6a <__multadd+0x5a>
 8015a5e:	4602      	mov	r2, r0
 8015a60:	4b0c      	ldr	r3, [pc, #48]	@ (8015a94 <__multadd+0x84>)
 8015a62:	480d      	ldr	r0, [pc, #52]	@ (8015a98 <__multadd+0x88>)
 8015a64:	21ba      	movs	r1, #186	@ 0xba
 8015a66:	f7fd ff25 	bl	80138b4 <__assert_func>
 8015a6a:	6922      	ldr	r2, [r4, #16]
 8015a6c:	3202      	adds	r2, #2
 8015a6e:	f104 010c 	add.w	r1, r4, #12
 8015a72:	0092      	lsls	r2, r2, #2
 8015a74:	300c      	adds	r0, #12
 8015a76:	f7ff f8be 	bl	8014bf6 <memcpy>
 8015a7a:	4621      	mov	r1, r4
 8015a7c:	4638      	mov	r0, r7
 8015a7e:	f7ff ffa5 	bl	80159cc <_Bfree>
 8015a82:	4644      	mov	r4, r8
 8015a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a88:	3501      	adds	r5, #1
 8015a8a:	615e      	str	r6, [r3, #20]
 8015a8c:	6125      	str	r5, [r4, #16]
 8015a8e:	4620      	mov	r0, r4
 8015a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a94:	08019289 	.word	0x08019289
 8015a98:	0801929a 	.word	0x0801929a

08015a9c <__s2b>:
 8015a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015aa0:	460c      	mov	r4, r1
 8015aa2:	4615      	mov	r5, r2
 8015aa4:	461f      	mov	r7, r3
 8015aa6:	2209      	movs	r2, #9
 8015aa8:	3308      	adds	r3, #8
 8015aaa:	4606      	mov	r6, r0
 8015aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ab0:	2100      	movs	r1, #0
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	db09      	blt.n	8015acc <__s2b+0x30>
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f7ff ff47 	bl	801594c <_Balloc>
 8015abe:	b940      	cbnz	r0, 8015ad2 <__s2b+0x36>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	4b19      	ldr	r3, [pc, #100]	@ (8015b28 <__s2b+0x8c>)
 8015ac4:	4819      	ldr	r0, [pc, #100]	@ (8015b2c <__s2b+0x90>)
 8015ac6:	21d3      	movs	r1, #211	@ 0xd3
 8015ac8:	f7fd fef4 	bl	80138b4 <__assert_func>
 8015acc:	0052      	lsls	r2, r2, #1
 8015ace:	3101      	adds	r1, #1
 8015ad0:	e7f0      	b.n	8015ab4 <__s2b+0x18>
 8015ad2:	9b08      	ldr	r3, [sp, #32]
 8015ad4:	6143      	str	r3, [r0, #20]
 8015ad6:	2d09      	cmp	r5, #9
 8015ad8:	f04f 0301 	mov.w	r3, #1
 8015adc:	6103      	str	r3, [r0, #16]
 8015ade:	dd16      	ble.n	8015b0e <__s2b+0x72>
 8015ae0:	f104 0909 	add.w	r9, r4, #9
 8015ae4:	46c8      	mov	r8, r9
 8015ae6:	442c      	add	r4, r5
 8015ae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015aec:	4601      	mov	r1, r0
 8015aee:	3b30      	subs	r3, #48	@ 0x30
 8015af0:	220a      	movs	r2, #10
 8015af2:	4630      	mov	r0, r6
 8015af4:	f7ff ff8c 	bl	8015a10 <__multadd>
 8015af8:	45a0      	cmp	r8, r4
 8015afa:	d1f5      	bne.n	8015ae8 <__s2b+0x4c>
 8015afc:	f1a5 0408 	sub.w	r4, r5, #8
 8015b00:	444c      	add	r4, r9
 8015b02:	1b2d      	subs	r5, r5, r4
 8015b04:	1963      	adds	r3, r4, r5
 8015b06:	42bb      	cmp	r3, r7
 8015b08:	db04      	blt.n	8015b14 <__s2b+0x78>
 8015b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b0e:	340a      	adds	r4, #10
 8015b10:	2509      	movs	r5, #9
 8015b12:	e7f6      	b.n	8015b02 <__s2b+0x66>
 8015b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015b18:	4601      	mov	r1, r0
 8015b1a:	3b30      	subs	r3, #48	@ 0x30
 8015b1c:	220a      	movs	r2, #10
 8015b1e:	4630      	mov	r0, r6
 8015b20:	f7ff ff76 	bl	8015a10 <__multadd>
 8015b24:	e7ee      	b.n	8015b04 <__s2b+0x68>
 8015b26:	bf00      	nop
 8015b28:	08019289 	.word	0x08019289
 8015b2c:	0801929a 	.word	0x0801929a

08015b30 <__hi0bits>:
 8015b30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015b34:	4603      	mov	r3, r0
 8015b36:	bf36      	itet	cc
 8015b38:	0403      	lslcc	r3, r0, #16
 8015b3a:	2000      	movcs	r0, #0
 8015b3c:	2010      	movcc	r0, #16
 8015b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015b42:	bf3c      	itt	cc
 8015b44:	021b      	lslcc	r3, r3, #8
 8015b46:	3008      	addcc	r0, #8
 8015b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b4c:	bf3c      	itt	cc
 8015b4e:	011b      	lslcc	r3, r3, #4
 8015b50:	3004      	addcc	r0, #4
 8015b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b56:	bf3c      	itt	cc
 8015b58:	009b      	lslcc	r3, r3, #2
 8015b5a:	3002      	addcc	r0, #2
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	db05      	blt.n	8015b6c <__hi0bits+0x3c>
 8015b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015b64:	f100 0001 	add.w	r0, r0, #1
 8015b68:	bf08      	it	eq
 8015b6a:	2020      	moveq	r0, #32
 8015b6c:	4770      	bx	lr

08015b6e <__lo0bits>:
 8015b6e:	6803      	ldr	r3, [r0, #0]
 8015b70:	4602      	mov	r2, r0
 8015b72:	f013 0007 	ands.w	r0, r3, #7
 8015b76:	d00b      	beq.n	8015b90 <__lo0bits+0x22>
 8015b78:	07d9      	lsls	r1, r3, #31
 8015b7a:	d421      	bmi.n	8015bc0 <__lo0bits+0x52>
 8015b7c:	0798      	lsls	r0, r3, #30
 8015b7e:	bf49      	itett	mi
 8015b80:	085b      	lsrmi	r3, r3, #1
 8015b82:	089b      	lsrpl	r3, r3, #2
 8015b84:	2001      	movmi	r0, #1
 8015b86:	6013      	strmi	r3, [r2, #0]
 8015b88:	bf5c      	itt	pl
 8015b8a:	6013      	strpl	r3, [r2, #0]
 8015b8c:	2002      	movpl	r0, #2
 8015b8e:	4770      	bx	lr
 8015b90:	b299      	uxth	r1, r3
 8015b92:	b909      	cbnz	r1, 8015b98 <__lo0bits+0x2a>
 8015b94:	0c1b      	lsrs	r3, r3, #16
 8015b96:	2010      	movs	r0, #16
 8015b98:	b2d9      	uxtb	r1, r3
 8015b9a:	b909      	cbnz	r1, 8015ba0 <__lo0bits+0x32>
 8015b9c:	3008      	adds	r0, #8
 8015b9e:	0a1b      	lsrs	r3, r3, #8
 8015ba0:	0719      	lsls	r1, r3, #28
 8015ba2:	bf04      	itt	eq
 8015ba4:	091b      	lsreq	r3, r3, #4
 8015ba6:	3004      	addeq	r0, #4
 8015ba8:	0799      	lsls	r1, r3, #30
 8015baa:	bf04      	itt	eq
 8015bac:	089b      	lsreq	r3, r3, #2
 8015bae:	3002      	addeq	r0, #2
 8015bb0:	07d9      	lsls	r1, r3, #31
 8015bb2:	d403      	bmi.n	8015bbc <__lo0bits+0x4e>
 8015bb4:	085b      	lsrs	r3, r3, #1
 8015bb6:	f100 0001 	add.w	r0, r0, #1
 8015bba:	d003      	beq.n	8015bc4 <__lo0bits+0x56>
 8015bbc:	6013      	str	r3, [r2, #0]
 8015bbe:	4770      	bx	lr
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	4770      	bx	lr
 8015bc4:	2020      	movs	r0, #32
 8015bc6:	4770      	bx	lr

08015bc8 <__i2b>:
 8015bc8:	b510      	push	{r4, lr}
 8015bca:	460c      	mov	r4, r1
 8015bcc:	2101      	movs	r1, #1
 8015bce:	f7ff febd 	bl	801594c <_Balloc>
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	b928      	cbnz	r0, 8015be2 <__i2b+0x1a>
 8015bd6:	4b05      	ldr	r3, [pc, #20]	@ (8015bec <__i2b+0x24>)
 8015bd8:	4805      	ldr	r0, [pc, #20]	@ (8015bf0 <__i2b+0x28>)
 8015bda:	f240 1145 	movw	r1, #325	@ 0x145
 8015bde:	f7fd fe69 	bl	80138b4 <__assert_func>
 8015be2:	2301      	movs	r3, #1
 8015be4:	6144      	str	r4, [r0, #20]
 8015be6:	6103      	str	r3, [r0, #16]
 8015be8:	bd10      	pop	{r4, pc}
 8015bea:	bf00      	nop
 8015bec:	08019289 	.word	0x08019289
 8015bf0:	0801929a 	.word	0x0801929a

08015bf4 <__multiply>:
 8015bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf8:	4614      	mov	r4, r2
 8015bfa:	690a      	ldr	r2, [r1, #16]
 8015bfc:	6923      	ldr	r3, [r4, #16]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	bfa8      	it	ge
 8015c02:	4623      	movge	r3, r4
 8015c04:	460f      	mov	r7, r1
 8015c06:	bfa4      	itt	ge
 8015c08:	460c      	movge	r4, r1
 8015c0a:	461f      	movge	r7, r3
 8015c0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015c10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015c14:	68a3      	ldr	r3, [r4, #8]
 8015c16:	6861      	ldr	r1, [r4, #4]
 8015c18:	eb0a 0609 	add.w	r6, sl, r9
 8015c1c:	42b3      	cmp	r3, r6
 8015c1e:	b085      	sub	sp, #20
 8015c20:	bfb8      	it	lt
 8015c22:	3101      	addlt	r1, #1
 8015c24:	f7ff fe92 	bl	801594c <_Balloc>
 8015c28:	b930      	cbnz	r0, 8015c38 <__multiply+0x44>
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	4b44      	ldr	r3, [pc, #272]	@ (8015d40 <__multiply+0x14c>)
 8015c2e:	4845      	ldr	r0, [pc, #276]	@ (8015d44 <__multiply+0x150>)
 8015c30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015c34:	f7fd fe3e 	bl	80138b4 <__assert_func>
 8015c38:	f100 0514 	add.w	r5, r0, #20
 8015c3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015c40:	462b      	mov	r3, r5
 8015c42:	2200      	movs	r2, #0
 8015c44:	4543      	cmp	r3, r8
 8015c46:	d321      	bcc.n	8015c8c <__multiply+0x98>
 8015c48:	f107 0114 	add.w	r1, r7, #20
 8015c4c:	f104 0214 	add.w	r2, r4, #20
 8015c50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015c54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015c58:	9302      	str	r3, [sp, #8]
 8015c5a:	1b13      	subs	r3, r2, r4
 8015c5c:	3b15      	subs	r3, #21
 8015c5e:	f023 0303 	bic.w	r3, r3, #3
 8015c62:	3304      	adds	r3, #4
 8015c64:	f104 0715 	add.w	r7, r4, #21
 8015c68:	42ba      	cmp	r2, r7
 8015c6a:	bf38      	it	cc
 8015c6c:	2304      	movcc	r3, #4
 8015c6e:	9301      	str	r3, [sp, #4]
 8015c70:	9b02      	ldr	r3, [sp, #8]
 8015c72:	9103      	str	r1, [sp, #12]
 8015c74:	428b      	cmp	r3, r1
 8015c76:	d80c      	bhi.n	8015c92 <__multiply+0x9e>
 8015c78:	2e00      	cmp	r6, #0
 8015c7a:	dd03      	ble.n	8015c84 <__multiply+0x90>
 8015c7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d05b      	beq.n	8015d3c <__multiply+0x148>
 8015c84:	6106      	str	r6, [r0, #16]
 8015c86:	b005      	add	sp, #20
 8015c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8c:	f843 2b04 	str.w	r2, [r3], #4
 8015c90:	e7d8      	b.n	8015c44 <__multiply+0x50>
 8015c92:	f8b1 a000 	ldrh.w	sl, [r1]
 8015c96:	f1ba 0f00 	cmp.w	sl, #0
 8015c9a:	d024      	beq.n	8015ce6 <__multiply+0xf2>
 8015c9c:	f104 0e14 	add.w	lr, r4, #20
 8015ca0:	46a9      	mov	r9, r5
 8015ca2:	f04f 0c00 	mov.w	ip, #0
 8015ca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015caa:	f8d9 3000 	ldr.w	r3, [r9]
 8015cae:	fa1f fb87 	uxth.w	fp, r7
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015cb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015cbc:	f8d9 7000 	ldr.w	r7, [r9]
 8015cc0:	4463      	add	r3, ip
 8015cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015cc6:	fb0a c70b 	mla	r7, sl, fp, ip
 8015cca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015cd4:	4572      	cmp	r2, lr
 8015cd6:	f849 3b04 	str.w	r3, [r9], #4
 8015cda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015cde:	d8e2      	bhi.n	8015ca6 <__multiply+0xb2>
 8015ce0:	9b01      	ldr	r3, [sp, #4]
 8015ce2:	f845 c003 	str.w	ip, [r5, r3]
 8015ce6:	9b03      	ldr	r3, [sp, #12]
 8015ce8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015cec:	3104      	adds	r1, #4
 8015cee:	f1b9 0f00 	cmp.w	r9, #0
 8015cf2:	d021      	beq.n	8015d38 <__multiply+0x144>
 8015cf4:	682b      	ldr	r3, [r5, #0]
 8015cf6:	f104 0c14 	add.w	ip, r4, #20
 8015cfa:	46ae      	mov	lr, r5
 8015cfc:	f04f 0a00 	mov.w	sl, #0
 8015d00:	f8bc b000 	ldrh.w	fp, [ip]
 8015d04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015d08:	fb09 770b 	mla	r7, r9, fp, r7
 8015d0c:	4457      	add	r7, sl
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015d14:	f84e 3b04 	str.w	r3, [lr], #4
 8015d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d20:	f8be 3000 	ldrh.w	r3, [lr]
 8015d24:	fb09 330a 	mla	r3, r9, sl, r3
 8015d28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015d2c:	4562      	cmp	r2, ip
 8015d2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d32:	d8e5      	bhi.n	8015d00 <__multiply+0x10c>
 8015d34:	9f01      	ldr	r7, [sp, #4]
 8015d36:	51eb      	str	r3, [r5, r7]
 8015d38:	3504      	adds	r5, #4
 8015d3a:	e799      	b.n	8015c70 <__multiply+0x7c>
 8015d3c:	3e01      	subs	r6, #1
 8015d3e:	e79b      	b.n	8015c78 <__multiply+0x84>
 8015d40:	08019289 	.word	0x08019289
 8015d44:	0801929a 	.word	0x0801929a

08015d48 <__pow5mult>:
 8015d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d4c:	4615      	mov	r5, r2
 8015d4e:	f012 0203 	ands.w	r2, r2, #3
 8015d52:	4607      	mov	r7, r0
 8015d54:	460e      	mov	r6, r1
 8015d56:	d007      	beq.n	8015d68 <__pow5mult+0x20>
 8015d58:	4c25      	ldr	r4, [pc, #148]	@ (8015df0 <__pow5mult+0xa8>)
 8015d5a:	3a01      	subs	r2, #1
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d62:	f7ff fe55 	bl	8015a10 <__multadd>
 8015d66:	4606      	mov	r6, r0
 8015d68:	10ad      	asrs	r5, r5, #2
 8015d6a:	d03d      	beq.n	8015de8 <__pow5mult+0xa0>
 8015d6c:	69fc      	ldr	r4, [r7, #28]
 8015d6e:	b97c      	cbnz	r4, 8015d90 <__pow5mult+0x48>
 8015d70:	2010      	movs	r0, #16
 8015d72:	f7fd fdcf 	bl	8013914 <malloc>
 8015d76:	4602      	mov	r2, r0
 8015d78:	61f8      	str	r0, [r7, #28]
 8015d7a:	b928      	cbnz	r0, 8015d88 <__pow5mult+0x40>
 8015d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8015df4 <__pow5mult+0xac>)
 8015d7e:	481e      	ldr	r0, [pc, #120]	@ (8015df8 <__pow5mult+0xb0>)
 8015d80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015d84:	f7fd fd96 	bl	80138b4 <__assert_func>
 8015d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d8c:	6004      	str	r4, [r0, #0]
 8015d8e:	60c4      	str	r4, [r0, #12]
 8015d90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d98:	b94c      	cbnz	r4, 8015dae <__pow5mult+0x66>
 8015d9a:	f240 2171 	movw	r1, #625	@ 0x271
 8015d9e:	4638      	mov	r0, r7
 8015da0:	f7ff ff12 	bl	8015bc8 <__i2b>
 8015da4:	2300      	movs	r3, #0
 8015da6:	f8c8 0008 	str.w	r0, [r8, #8]
 8015daa:	4604      	mov	r4, r0
 8015dac:	6003      	str	r3, [r0, #0]
 8015dae:	f04f 0900 	mov.w	r9, #0
 8015db2:	07eb      	lsls	r3, r5, #31
 8015db4:	d50a      	bpl.n	8015dcc <__pow5mult+0x84>
 8015db6:	4631      	mov	r1, r6
 8015db8:	4622      	mov	r2, r4
 8015dba:	4638      	mov	r0, r7
 8015dbc:	f7ff ff1a 	bl	8015bf4 <__multiply>
 8015dc0:	4631      	mov	r1, r6
 8015dc2:	4680      	mov	r8, r0
 8015dc4:	4638      	mov	r0, r7
 8015dc6:	f7ff fe01 	bl	80159cc <_Bfree>
 8015dca:	4646      	mov	r6, r8
 8015dcc:	106d      	asrs	r5, r5, #1
 8015dce:	d00b      	beq.n	8015de8 <__pow5mult+0xa0>
 8015dd0:	6820      	ldr	r0, [r4, #0]
 8015dd2:	b938      	cbnz	r0, 8015de4 <__pow5mult+0x9c>
 8015dd4:	4622      	mov	r2, r4
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	4638      	mov	r0, r7
 8015dda:	f7ff ff0b 	bl	8015bf4 <__multiply>
 8015dde:	6020      	str	r0, [r4, #0]
 8015de0:	f8c0 9000 	str.w	r9, [r0]
 8015de4:	4604      	mov	r4, r0
 8015de6:	e7e4      	b.n	8015db2 <__pow5mult+0x6a>
 8015de8:	4630      	mov	r0, r6
 8015dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dee:	bf00      	nop
 8015df0:	080192f4 	.word	0x080192f4
 8015df4:	0801921a 	.word	0x0801921a
 8015df8:	0801929a 	.word	0x0801929a

08015dfc <__lshift>:
 8015dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e00:	460c      	mov	r4, r1
 8015e02:	6849      	ldr	r1, [r1, #4]
 8015e04:	6923      	ldr	r3, [r4, #16]
 8015e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015e0a:	68a3      	ldr	r3, [r4, #8]
 8015e0c:	4607      	mov	r7, r0
 8015e0e:	4691      	mov	r9, r2
 8015e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015e14:	f108 0601 	add.w	r6, r8, #1
 8015e18:	42b3      	cmp	r3, r6
 8015e1a:	db0b      	blt.n	8015e34 <__lshift+0x38>
 8015e1c:	4638      	mov	r0, r7
 8015e1e:	f7ff fd95 	bl	801594c <_Balloc>
 8015e22:	4605      	mov	r5, r0
 8015e24:	b948      	cbnz	r0, 8015e3a <__lshift+0x3e>
 8015e26:	4602      	mov	r2, r0
 8015e28:	4b28      	ldr	r3, [pc, #160]	@ (8015ecc <__lshift+0xd0>)
 8015e2a:	4829      	ldr	r0, [pc, #164]	@ (8015ed0 <__lshift+0xd4>)
 8015e2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015e30:	f7fd fd40 	bl	80138b4 <__assert_func>
 8015e34:	3101      	adds	r1, #1
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	e7ee      	b.n	8015e18 <__lshift+0x1c>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f100 0114 	add.w	r1, r0, #20
 8015e40:	f100 0210 	add.w	r2, r0, #16
 8015e44:	4618      	mov	r0, r3
 8015e46:	4553      	cmp	r3, sl
 8015e48:	db33      	blt.n	8015eb2 <__lshift+0xb6>
 8015e4a:	6920      	ldr	r0, [r4, #16]
 8015e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e50:	f104 0314 	add.w	r3, r4, #20
 8015e54:	f019 091f 	ands.w	r9, r9, #31
 8015e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e60:	d02b      	beq.n	8015eba <__lshift+0xbe>
 8015e62:	f1c9 0e20 	rsb	lr, r9, #32
 8015e66:	468a      	mov	sl, r1
 8015e68:	2200      	movs	r2, #0
 8015e6a:	6818      	ldr	r0, [r3, #0]
 8015e6c:	fa00 f009 	lsl.w	r0, r0, r9
 8015e70:	4310      	orrs	r0, r2
 8015e72:	f84a 0b04 	str.w	r0, [sl], #4
 8015e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e7a:	459c      	cmp	ip, r3
 8015e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e80:	d8f3      	bhi.n	8015e6a <__lshift+0x6e>
 8015e82:	ebac 0304 	sub.w	r3, ip, r4
 8015e86:	3b15      	subs	r3, #21
 8015e88:	f023 0303 	bic.w	r3, r3, #3
 8015e8c:	3304      	adds	r3, #4
 8015e8e:	f104 0015 	add.w	r0, r4, #21
 8015e92:	4584      	cmp	ip, r0
 8015e94:	bf38      	it	cc
 8015e96:	2304      	movcc	r3, #4
 8015e98:	50ca      	str	r2, [r1, r3]
 8015e9a:	b10a      	cbz	r2, 8015ea0 <__lshift+0xa4>
 8015e9c:	f108 0602 	add.w	r6, r8, #2
 8015ea0:	3e01      	subs	r6, #1
 8015ea2:	4638      	mov	r0, r7
 8015ea4:	612e      	str	r6, [r5, #16]
 8015ea6:	4621      	mov	r1, r4
 8015ea8:	f7ff fd90 	bl	80159cc <_Bfree>
 8015eac:	4628      	mov	r0, r5
 8015eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	e7c5      	b.n	8015e46 <__lshift+0x4a>
 8015eba:	3904      	subs	r1, #4
 8015ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8015ec4:	459c      	cmp	ip, r3
 8015ec6:	d8f9      	bhi.n	8015ebc <__lshift+0xc0>
 8015ec8:	e7ea      	b.n	8015ea0 <__lshift+0xa4>
 8015eca:	bf00      	nop
 8015ecc:	08019289 	.word	0x08019289
 8015ed0:	0801929a 	.word	0x0801929a

08015ed4 <__mcmp>:
 8015ed4:	690a      	ldr	r2, [r1, #16]
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	6900      	ldr	r0, [r0, #16]
 8015eda:	1a80      	subs	r0, r0, r2
 8015edc:	b530      	push	{r4, r5, lr}
 8015ede:	d10e      	bne.n	8015efe <__mcmp+0x2a>
 8015ee0:	3314      	adds	r3, #20
 8015ee2:	3114      	adds	r1, #20
 8015ee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015ee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015eec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ef4:	4295      	cmp	r5, r2
 8015ef6:	d003      	beq.n	8015f00 <__mcmp+0x2c>
 8015ef8:	d205      	bcs.n	8015f06 <__mcmp+0x32>
 8015efa:	f04f 30ff 	mov.w	r0, #4294967295
 8015efe:	bd30      	pop	{r4, r5, pc}
 8015f00:	42a3      	cmp	r3, r4
 8015f02:	d3f3      	bcc.n	8015eec <__mcmp+0x18>
 8015f04:	e7fb      	b.n	8015efe <__mcmp+0x2a>
 8015f06:	2001      	movs	r0, #1
 8015f08:	e7f9      	b.n	8015efe <__mcmp+0x2a>
	...

08015f0c <__mdiff>:
 8015f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	4689      	mov	r9, r1
 8015f12:	4606      	mov	r6, r0
 8015f14:	4611      	mov	r1, r2
 8015f16:	4648      	mov	r0, r9
 8015f18:	4614      	mov	r4, r2
 8015f1a:	f7ff ffdb 	bl	8015ed4 <__mcmp>
 8015f1e:	1e05      	subs	r5, r0, #0
 8015f20:	d112      	bne.n	8015f48 <__mdiff+0x3c>
 8015f22:	4629      	mov	r1, r5
 8015f24:	4630      	mov	r0, r6
 8015f26:	f7ff fd11 	bl	801594c <_Balloc>
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	b928      	cbnz	r0, 8015f3a <__mdiff+0x2e>
 8015f2e:	4b3f      	ldr	r3, [pc, #252]	@ (801602c <__mdiff+0x120>)
 8015f30:	f240 2137 	movw	r1, #567	@ 0x237
 8015f34:	483e      	ldr	r0, [pc, #248]	@ (8016030 <__mdiff+0x124>)
 8015f36:	f7fd fcbd 	bl	80138b4 <__assert_func>
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015f40:	4610      	mov	r0, r2
 8015f42:	b003      	add	sp, #12
 8015f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f48:	bfbc      	itt	lt
 8015f4a:	464b      	movlt	r3, r9
 8015f4c:	46a1      	movlt	r9, r4
 8015f4e:	4630      	mov	r0, r6
 8015f50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015f54:	bfba      	itte	lt
 8015f56:	461c      	movlt	r4, r3
 8015f58:	2501      	movlt	r5, #1
 8015f5a:	2500      	movge	r5, #0
 8015f5c:	f7ff fcf6 	bl	801594c <_Balloc>
 8015f60:	4602      	mov	r2, r0
 8015f62:	b918      	cbnz	r0, 8015f6c <__mdiff+0x60>
 8015f64:	4b31      	ldr	r3, [pc, #196]	@ (801602c <__mdiff+0x120>)
 8015f66:	f240 2145 	movw	r1, #581	@ 0x245
 8015f6a:	e7e3      	b.n	8015f34 <__mdiff+0x28>
 8015f6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015f70:	6926      	ldr	r6, [r4, #16]
 8015f72:	60c5      	str	r5, [r0, #12]
 8015f74:	f109 0310 	add.w	r3, r9, #16
 8015f78:	f109 0514 	add.w	r5, r9, #20
 8015f7c:	f104 0e14 	add.w	lr, r4, #20
 8015f80:	f100 0b14 	add.w	fp, r0, #20
 8015f84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015f88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015f8c:	9301      	str	r3, [sp, #4]
 8015f8e:	46d9      	mov	r9, fp
 8015f90:	f04f 0c00 	mov.w	ip, #0
 8015f94:	9b01      	ldr	r3, [sp, #4]
 8015f96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015f9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015f9e:	9301      	str	r3, [sp, #4]
 8015fa0:	fa1f f38a 	uxth.w	r3, sl
 8015fa4:	4619      	mov	r1, r3
 8015fa6:	b283      	uxth	r3, r0
 8015fa8:	1acb      	subs	r3, r1, r3
 8015faa:	0c00      	lsrs	r0, r0, #16
 8015fac:	4463      	add	r3, ip
 8015fae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015fb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015fbc:	4576      	cmp	r6, lr
 8015fbe:	f849 3b04 	str.w	r3, [r9], #4
 8015fc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015fc6:	d8e5      	bhi.n	8015f94 <__mdiff+0x88>
 8015fc8:	1b33      	subs	r3, r6, r4
 8015fca:	3b15      	subs	r3, #21
 8015fcc:	f023 0303 	bic.w	r3, r3, #3
 8015fd0:	3415      	adds	r4, #21
 8015fd2:	3304      	adds	r3, #4
 8015fd4:	42a6      	cmp	r6, r4
 8015fd6:	bf38      	it	cc
 8015fd8:	2304      	movcc	r3, #4
 8015fda:	441d      	add	r5, r3
 8015fdc:	445b      	add	r3, fp
 8015fde:	461e      	mov	r6, r3
 8015fe0:	462c      	mov	r4, r5
 8015fe2:	4544      	cmp	r4, r8
 8015fe4:	d30e      	bcc.n	8016004 <__mdiff+0xf8>
 8015fe6:	f108 0103 	add.w	r1, r8, #3
 8015fea:	1b49      	subs	r1, r1, r5
 8015fec:	f021 0103 	bic.w	r1, r1, #3
 8015ff0:	3d03      	subs	r5, #3
 8015ff2:	45a8      	cmp	r8, r5
 8015ff4:	bf38      	it	cc
 8015ff6:	2100      	movcc	r1, #0
 8015ff8:	440b      	add	r3, r1
 8015ffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015ffe:	b191      	cbz	r1, 8016026 <__mdiff+0x11a>
 8016000:	6117      	str	r7, [r2, #16]
 8016002:	e79d      	b.n	8015f40 <__mdiff+0x34>
 8016004:	f854 1b04 	ldr.w	r1, [r4], #4
 8016008:	46e6      	mov	lr, ip
 801600a:	0c08      	lsrs	r0, r1, #16
 801600c:	fa1c fc81 	uxtah	ip, ip, r1
 8016010:	4471      	add	r1, lr
 8016012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016016:	b289      	uxth	r1, r1
 8016018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801601c:	f846 1b04 	str.w	r1, [r6], #4
 8016020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016024:	e7dd      	b.n	8015fe2 <__mdiff+0xd6>
 8016026:	3f01      	subs	r7, #1
 8016028:	e7e7      	b.n	8015ffa <__mdiff+0xee>
 801602a:	bf00      	nop
 801602c:	08019289 	.word	0x08019289
 8016030:	0801929a 	.word	0x0801929a

08016034 <__ulp>:
 8016034:	b082      	sub	sp, #8
 8016036:	ed8d 0b00 	vstr	d0, [sp]
 801603a:	9a01      	ldr	r2, [sp, #4]
 801603c:	4b0f      	ldr	r3, [pc, #60]	@ (801607c <__ulp+0x48>)
 801603e:	4013      	ands	r3, r2
 8016040:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016044:	2b00      	cmp	r3, #0
 8016046:	dc08      	bgt.n	801605a <__ulp+0x26>
 8016048:	425b      	negs	r3, r3
 801604a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801604e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016052:	da04      	bge.n	801605e <__ulp+0x2a>
 8016054:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016058:	4113      	asrs	r3, r2
 801605a:	2200      	movs	r2, #0
 801605c:	e008      	b.n	8016070 <__ulp+0x3c>
 801605e:	f1a2 0314 	sub.w	r3, r2, #20
 8016062:	2b1e      	cmp	r3, #30
 8016064:	bfda      	itte	le
 8016066:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801606a:	40da      	lsrle	r2, r3
 801606c:	2201      	movgt	r2, #1
 801606e:	2300      	movs	r3, #0
 8016070:	4619      	mov	r1, r3
 8016072:	4610      	mov	r0, r2
 8016074:	ec41 0b10 	vmov	d0, r0, r1
 8016078:	b002      	add	sp, #8
 801607a:	4770      	bx	lr
 801607c:	7ff00000 	.word	0x7ff00000

08016080 <__b2d>:
 8016080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016084:	6906      	ldr	r6, [r0, #16]
 8016086:	f100 0814 	add.w	r8, r0, #20
 801608a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801608e:	1f37      	subs	r7, r6, #4
 8016090:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016094:	4610      	mov	r0, r2
 8016096:	f7ff fd4b 	bl	8015b30 <__hi0bits>
 801609a:	f1c0 0320 	rsb	r3, r0, #32
 801609e:	280a      	cmp	r0, #10
 80160a0:	600b      	str	r3, [r1, #0]
 80160a2:	491b      	ldr	r1, [pc, #108]	@ (8016110 <__b2d+0x90>)
 80160a4:	dc15      	bgt.n	80160d2 <__b2d+0x52>
 80160a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80160aa:	fa22 f30c 	lsr.w	r3, r2, ip
 80160ae:	45b8      	cmp	r8, r7
 80160b0:	ea43 0501 	orr.w	r5, r3, r1
 80160b4:	bf34      	ite	cc
 80160b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80160ba:	2300      	movcs	r3, #0
 80160bc:	3015      	adds	r0, #21
 80160be:	fa02 f000 	lsl.w	r0, r2, r0
 80160c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80160c6:	4303      	orrs	r3, r0
 80160c8:	461c      	mov	r4, r3
 80160ca:	ec45 4b10 	vmov	d0, r4, r5
 80160ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160d2:	45b8      	cmp	r8, r7
 80160d4:	bf3a      	itte	cc
 80160d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80160da:	f1a6 0708 	subcc.w	r7, r6, #8
 80160de:	2300      	movcs	r3, #0
 80160e0:	380b      	subs	r0, #11
 80160e2:	d012      	beq.n	801610a <__b2d+0x8a>
 80160e4:	f1c0 0120 	rsb	r1, r0, #32
 80160e8:	fa23 f401 	lsr.w	r4, r3, r1
 80160ec:	4082      	lsls	r2, r0
 80160ee:	4322      	orrs	r2, r4
 80160f0:	4547      	cmp	r7, r8
 80160f2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80160f6:	bf8c      	ite	hi
 80160f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80160fc:	2200      	movls	r2, #0
 80160fe:	4083      	lsls	r3, r0
 8016100:	40ca      	lsrs	r2, r1
 8016102:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016106:	4313      	orrs	r3, r2
 8016108:	e7de      	b.n	80160c8 <__b2d+0x48>
 801610a:	ea42 0501 	orr.w	r5, r2, r1
 801610e:	e7db      	b.n	80160c8 <__b2d+0x48>
 8016110:	3ff00000 	.word	0x3ff00000

08016114 <__d2b>:
 8016114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016118:	460f      	mov	r7, r1
 801611a:	2101      	movs	r1, #1
 801611c:	ec59 8b10 	vmov	r8, r9, d0
 8016120:	4616      	mov	r6, r2
 8016122:	f7ff fc13 	bl	801594c <_Balloc>
 8016126:	4604      	mov	r4, r0
 8016128:	b930      	cbnz	r0, 8016138 <__d2b+0x24>
 801612a:	4602      	mov	r2, r0
 801612c:	4b23      	ldr	r3, [pc, #140]	@ (80161bc <__d2b+0xa8>)
 801612e:	4824      	ldr	r0, [pc, #144]	@ (80161c0 <__d2b+0xac>)
 8016130:	f240 310f 	movw	r1, #783	@ 0x30f
 8016134:	f7fd fbbe 	bl	80138b4 <__assert_func>
 8016138:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801613c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016140:	b10d      	cbz	r5, 8016146 <__d2b+0x32>
 8016142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016146:	9301      	str	r3, [sp, #4]
 8016148:	f1b8 0300 	subs.w	r3, r8, #0
 801614c:	d023      	beq.n	8016196 <__d2b+0x82>
 801614e:	4668      	mov	r0, sp
 8016150:	9300      	str	r3, [sp, #0]
 8016152:	f7ff fd0c 	bl	8015b6e <__lo0bits>
 8016156:	e9dd 1200 	ldrd	r1, r2, [sp]
 801615a:	b1d0      	cbz	r0, 8016192 <__d2b+0x7e>
 801615c:	f1c0 0320 	rsb	r3, r0, #32
 8016160:	fa02 f303 	lsl.w	r3, r2, r3
 8016164:	430b      	orrs	r3, r1
 8016166:	40c2      	lsrs	r2, r0
 8016168:	6163      	str	r3, [r4, #20]
 801616a:	9201      	str	r2, [sp, #4]
 801616c:	9b01      	ldr	r3, [sp, #4]
 801616e:	61a3      	str	r3, [r4, #24]
 8016170:	2b00      	cmp	r3, #0
 8016172:	bf0c      	ite	eq
 8016174:	2201      	moveq	r2, #1
 8016176:	2202      	movne	r2, #2
 8016178:	6122      	str	r2, [r4, #16]
 801617a:	b1a5      	cbz	r5, 80161a6 <__d2b+0x92>
 801617c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016180:	4405      	add	r5, r0
 8016182:	603d      	str	r5, [r7, #0]
 8016184:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016188:	6030      	str	r0, [r6, #0]
 801618a:	4620      	mov	r0, r4
 801618c:	b003      	add	sp, #12
 801618e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016192:	6161      	str	r1, [r4, #20]
 8016194:	e7ea      	b.n	801616c <__d2b+0x58>
 8016196:	a801      	add	r0, sp, #4
 8016198:	f7ff fce9 	bl	8015b6e <__lo0bits>
 801619c:	9b01      	ldr	r3, [sp, #4]
 801619e:	6163      	str	r3, [r4, #20]
 80161a0:	3020      	adds	r0, #32
 80161a2:	2201      	movs	r2, #1
 80161a4:	e7e8      	b.n	8016178 <__d2b+0x64>
 80161a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80161ae:	6038      	str	r0, [r7, #0]
 80161b0:	6918      	ldr	r0, [r3, #16]
 80161b2:	f7ff fcbd 	bl	8015b30 <__hi0bits>
 80161b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161ba:	e7e5      	b.n	8016188 <__d2b+0x74>
 80161bc:	08019289 	.word	0x08019289
 80161c0:	0801929a 	.word	0x0801929a

080161c4 <__ratio>:
 80161c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c8:	b085      	sub	sp, #20
 80161ca:	e9cd 1000 	strd	r1, r0, [sp]
 80161ce:	a902      	add	r1, sp, #8
 80161d0:	f7ff ff56 	bl	8016080 <__b2d>
 80161d4:	9800      	ldr	r0, [sp, #0]
 80161d6:	a903      	add	r1, sp, #12
 80161d8:	ec55 4b10 	vmov	r4, r5, d0
 80161dc:	f7ff ff50 	bl	8016080 <__b2d>
 80161e0:	9b01      	ldr	r3, [sp, #4]
 80161e2:	6919      	ldr	r1, [r3, #16]
 80161e4:	9b00      	ldr	r3, [sp, #0]
 80161e6:	691b      	ldr	r3, [r3, #16]
 80161e8:	1ac9      	subs	r1, r1, r3
 80161ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80161ee:	1a9b      	subs	r3, r3, r2
 80161f0:	ec5b ab10 	vmov	sl, fp, d0
 80161f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	bfce      	itee	gt
 80161fc:	462a      	movgt	r2, r5
 80161fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016202:	465a      	movle	r2, fp
 8016204:	462f      	mov	r7, r5
 8016206:	46d9      	mov	r9, fp
 8016208:	bfcc      	ite	gt
 801620a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801620e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016212:	464b      	mov	r3, r9
 8016214:	4652      	mov	r2, sl
 8016216:	4620      	mov	r0, r4
 8016218:	4639      	mov	r1, r7
 801621a:	f7ea fb3f 	bl	800089c <__aeabi_ddiv>
 801621e:	ec41 0b10 	vmov	d0, r0, r1
 8016222:	b005      	add	sp, #20
 8016224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016228 <__copybits>:
 8016228:	3901      	subs	r1, #1
 801622a:	b570      	push	{r4, r5, r6, lr}
 801622c:	1149      	asrs	r1, r1, #5
 801622e:	6914      	ldr	r4, [r2, #16]
 8016230:	3101      	adds	r1, #1
 8016232:	f102 0314 	add.w	r3, r2, #20
 8016236:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801623a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801623e:	1f05      	subs	r5, r0, #4
 8016240:	42a3      	cmp	r3, r4
 8016242:	d30c      	bcc.n	801625e <__copybits+0x36>
 8016244:	1aa3      	subs	r3, r4, r2
 8016246:	3b11      	subs	r3, #17
 8016248:	f023 0303 	bic.w	r3, r3, #3
 801624c:	3211      	adds	r2, #17
 801624e:	42a2      	cmp	r2, r4
 8016250:	bf88      	it	hi
 8016252:	2300      	movhi	r3, #0
 8016254:	4418      	add	r0, r3
 8016256:	2300      	movs	r3, #0
 8016258:	4288      	cmp	r0, r1
 801625a:	d305      	bcc.n	8016268 <__copybits+0x40>
 801625c:	bd70      	pop	{r4, r5, r6, pc}
 801625e:	f853 6b04 	ldr.w	r6, [r3], #4
 8016262:	f845 6f04 	str.w	r6, [r5, #4]!
 8016266:	e7eb      	b.n	8016240 <__copybits+0x18>
 8016268:	f840 3b04 	str.w	r3, [r0], #4
 801626c:	e7f4      	b.n	8016258 <__copybits+0x30>

0801626e <__any_on>:
 801626e:	f100 0214 	add.w	r2, r0, #20
 8016272:	6900      	ldr	r0, [r0, #16]
 8016274:	114b      	asrs	r3, r1, #5
 8016276:	4298      	cmp	r0, r3
 8016278:	b510      	push	{r4, lr}
 801627a:	db11      	blt.n	80162a0 <__any_on+0x32>
 801627c:	dd0a      	ble.n	8016294 <__any_on+0x26>
 801627e:	f011 011f 	ands.w	r1, r1, #31
 8016282:	d007      	beq.n	8016294 <__any_on+0x26>
 8016284:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016288:	fa24 f001 	lsr.w	r0, r4, r1
 801628c:	fa00 f101 	lsl.w	r1, r0, r1
 8016290:	428c      	cmp	r4, r1
 8016292:	d10b      	bne.n	80162ac <__any_on+0x3e>
 8016294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016298:	4293      	cmp	r3, r2
 801629a:	d803      	bhi.n	80162a4 <__any_on+0x36>
 801629c:	2000      	movs	r0, #0
 801629e:	bd10      	pop	{r4, pc}
 80162a0:	4603      	mov	r3, r0
 80162a2:	e7f7      	b.n	8016294 <__any_on+0x26>
 80162a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80162a8:	2900      	cmp	r1, #0
 80162aa:	d0f5      	beq.n	8016298 <__any_on+0x2a>
 80162ac:	2001      	movs	r0, #1
 80162ae:	e7f6      	b.n	801629e <__any_on+0x30>

080162b0 <sulp>:
 80162b0:	b570      	push	{r4, r5, r6, lr}
 80162b2:	4604      	mov	r4, r0
 80162b4:	460d      	mov	r5, r1
 80162b6:	ec45 4b10 	vmov	d0, r4, r5
 80162ba:	4616      	mov	r6, r2
 80162bc:	f7ff feba 	bl	8016034 <__ulp>
 80162c0:	ec51 0b10 	vmov	r0, r1, d0
 80162c4:	b17e      	cbz	r6, 80162e6 <sulp+0x36>
 80162c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80162ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	dd09      	ble.n	80162e6 <sulp+0x36>
 80162d2:	051b      	lsls	r3, r3, #20
 80162d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80162d8:	2400      	movs	r4, #0
 80162da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80162de:	4622      	mov	r2, r4
 80162e0:	462b      	mov	r3, r5
 80162e2:	f7ea f9b1 	bl	8000648 <__aeabi_dmul>
 80162e6:	ec41 0b10 	vmov	d0, r0, r1
 80162ea:	bd70      	pop	{r4, r5, r6, pc}
 80162ec:	0000      	movs	r0, r0
	...

080162f0 <_strtod_l>:
 80162f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f4:	b09f      	sub	sp, #124	@ 0x7c
 80162f6:	460c      	mov	r4, r1
 80162f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80162fa:	2200      	movs	r2, #0
 80162fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80162fe:	9005      	str	r0, [sp, #20]
 8016300:	f04f 0a00 	mov.w	sl, #0
 8016304:	f04f 0b00 	mov.w	fp, #0
 8016308:	460a      	mov	r2, r1
 801630a:	9219      	str	r2, [sp, #100]	@ 0x64
 801630c:	7811      	ldrb	r1, [r2, #0]
 801630e:	292b      	cmp	r1, #43	@ 0x2b
 8016310:	d04a      	beq.n	80163a8 <_strtod_l+0xb8>
 8016312:	d838      	bhi.n	8016386 <_strtod_l+0x96>
 8016314:	290d      	cmp	r1, #13
 8016316:	d832      	bhi.n	801637e <_strtod_l+0x8e>
 8016318:	2908      	cmp	r1, #8
 801631a:	d832      	bhi.n	8016382 <_strtod_l+0x92>
 801631c:	2900      	cmp	r1, #0
 801631e:	d03b      	beq.n	8016398 <_strtod_l+0xa8>
 8016320:	2200      	movs	r2, #0
 8016322:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016324:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016326:	782a      	ldrb	r2, [r5, #0]
 8016328:	2a30      	cmp	r2, #48	@ 0x30
 801632a:	f040 80b3 	bne.w	8016494 <_strtod_l+0x1a4>
 801632e:	786a      	ldrb	r2, [r5, #1]
 8016330:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016334:	2a58      	cmp	r2, #88	@ 0x58
 8016336:	d16e      	bne.n	8016416 <_strtod_l+0x126>
 8016338:	9302      	str	r3, [sp, #8]
 801633a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801633c:	9301      	str	r3, [sp, #4]
 801633e:	ab1a      	add	r3, sp, #104	@ 0x68
 8016340:	9300      	str	r3, [sp, #0]
 8016342:	4a8e      	ldr	r2, [pc, #568]	@ (801657c <_strtod_l+0x28c>)
 8016344:	9805      	ldr	r0, [sp, #20]
 8016346:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016348:	a919      	add	r1, sp, #100	@ 0x64
 801634a:	f001 faa9 	bl	80178a0 <__gethex>
 801634e:	f010 060f 	ands.w	r6, r0, #15
 8016352:	4604      	mov	r4, r0
 8016354:	d005      	beq.n	8016362 <_strtod_l+0x72>
 8016356:	2e06      	cmp	r6, #6
 8016358:	d128      	bne.n	80163ac <_strtod_l+0xbc>
 801635a:	3501      	adds	r5, #1
 801635c:	2300      	movs	r3, #0
 801635e:	9519      	str	r5, [sp, #100]	@ 0x64
 8016360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016362:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016364:	2b00      	cmp	r3, #0
 8016366:	f040 858e 	bne.w	8016e86 <_strtod_l+0xb96>
 801636a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801636c:	b1cb      	cbz	r3, 80163a2 <_strtod_l+0xb2>
 801636e:	4652      	mov	r2, sl
 8016370:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016374:	ec43 2b10 	vmov	d0, r2, r3
 8016378:	b01f      	add	sp, #124	@ 0x7c
 801637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637e:	2920      	cmp	r1, #32
 8016380:	d1ce      	bne.n	8016320 <_strtod_l+0x30>
 8016382:	3201      	adds	r2, #1
 8016384:	e7c1      	b.n	801630a <_strtod_l+0x1a>
 8016386:	292d      	cmp	r1, #45	@ 0x2d
 8016388:	d1ca      	bne.n	8016320 <_strtod_l+0x30>
 801638a:	2101      	movs	r1, #1
 801638c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801638e:	1c51      	adds	r1, r2, #1
 8016390:	9119      	str	r1, [sp, #100]	@ 0x64
 8016392:	7852      	ldrb	r2, [r2, #1]
 8016394:	2a00      	cmp	r2, #0
 8016396:	d1c5      	bne.n	8016324 <_strtod_l+0x34>
 8016398:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801639a:	9419      	str	r4, [sp, #100]	@ 0x64
 801639c:	2b00      	cmp	r3, #0
 801639e:	f040 8570 	bne.w	8016e82 <_strtod_l+0xb92>
 80163a2:	4652      	mov	r2, sl
 80163a4:	465b      	mov	r3, fp
 80163a6:	e7e5      	b.n	8016374 <_strtod_l+0x84>
 80163a8:	2100      	movs	r1, #0
 80163aa:	e7ef      	b.n	801638c <_strtod_l+0x9c>
 80163ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80163ae:	b13a      	cbz	r2, 80163c0 <_strtod_l+0xd0>
 80163b0:	2135      	movs	r1, #53	@ 0x35
 80163b2:	a81c      	add	r0, sp, #112	@ 0x70
 80163b4:	f7ff ff38 	bl	8016228 <__copybits>
 80163b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80163ba:	9805      	ldr	r0, [sp, #20]
 80163bc:	f7ff fb06 	bl	80159cc <_Bfree>
 80163c0:	3e01      	subs	r6, #1
 80163c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80163c4:	2e04      	cmp	r6, #4
 80163c6:	d806      	bhi.n	80163d6 <_strtod_l+0xe6>
 80163c8:	e8df f006 	tbb	[pc, r6]
 80163cc:	201d0314 	.word	0x201d0314
 80163d0:	14          	.byte	0x14
 80163d1:	00          	.byte	0x00
 80163d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80163d6:	05e1      	lsls	r1, r4, #23
 80163d8:	bf48      	it	mi
 80163da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80163de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80163e2:	0d1b      	lsrs	r3, r3, #20
 80163e4:	051b      	lsls	r3, r3, #20
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d1bb      	bne.n	8016362 <_strtod_l+0x72>
 80163ea:	f7fe fbd7 	bl	8014b9c <__errno>
 80163ee:	2322      	movs	r3, #34	@ 0x22
 80163f0:	6003      	str	r3, [r0, #0]
 80163f2:	e7b6      	b.n	8016362 <_strtod_l+0x72>
 80163f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80163f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80163fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016400:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016404:	e7e7      	b.n	80163d6 <_strtod_l+0xe6>
 8016406:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8016584 <_strtod_l+0x294>
 801640a:	e7e4      	b.n	80163d6 <_strtod_l+0xe6>
 801640c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016410:	f04f 3aff 	mov.w	sl, #4294967295
 8016414:	e7df      	b.n	80163d6 <_strtod_l+0xe6>
 8016416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016418:	1c5a      	adds	r2, r3, #1
 801641a:	9219      	str	r2, [sp, #100]	@ 0x64
 801641c:	785b      	ldrb	r3, [r3, #1]
 801641e:	2b30      	cmp	r3, #48	@ 0x30
 8016420:	d0f9      	beq.n	8016416 <_strtod_l+0x126>
 8016422:	2b00      	cmp	r3, #0
 8016424:	d09d      	beq.n	8016362 <_strtod_l+0x72>
 8016426:	2301      	movs	r3, #1
 8016428:	9309      	str	r3, [sp, #36]	@ 0x24
 801642a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801642c:	930c      	str	r3, [sp, #48]	@ 0x30
 801642e:	2300      	movs	r3, #0
 8016430:	9308      	str	r3, [sp, #32]
 8016432:	930a      	str	r3, [sp, #40]	@ 0x28
 8016434:	461f      	mov	r7, r3
 8016436:	220a      	movs	r2, #10
 8016438:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801643a:	7805      	ldrb	r5, [r0, #0]
 801643c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016440:	b2d9      	uxtb	r1, r3
 8016442:	2909      	cmp	r1, #9
 8016444:	d928      	bls.n	8016498 <_strtod_l+0x1a8>
 8016446:	494e      	ldr	r1, [pc, #312]	@ (8016580 <_strtod_l+0x290>)
 8016448:	2201      	movs	r2, #1
 801644a:	f001 f991 	bl	8017770 <strncmp>
 801644e:	2800      	cmp	r0, #0
 8016450:	d032      	beq.n	80164b8 <_strtod_l+0x1c8>
 8016452:	2000      	movs	r0, #0
 8016454:	462a      	mov	r2, r5
 8016456:	4681      	mov	r9, r0
 8016458:	463d      	mov	r5, r7
 801645a:	4603      	mov	r3, r0
 801645c:	2a65      	cmp	r2, #101	@ 0x65
 801645e:	d001      	beq.n	8016464 <_strtod_l+0x174>
 8016460:	2a45      	cmp	r2, #69	@ 0x45
 8016462:	d114      	bne.n	801648e <_strtod_l+0x19e>
 8016464:	b91d      	cbnz	r5, 801646e <_strtod_l+0x17e>
 8016466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016468:	4302      	orrs	r2, r0
 801646a:	d095      	beq.n	8016398 <_strtod_l+0xa8>
 801646c:	2500      	movs	r5, #0
 801646e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016470:	1c62      	adds	r2, r4, #1
 8016472:	9219      	str	r2, [sp, #100]	@ 0x64
 8016474:	7862      	ldrb	r2, [r4, #1]
 8016476:	2a2b      	cmp	r2, #43	@ 0x2b
 8016478:	d077      	beq.n	801656a <_strtod_l+0x27a>
 801647a:	2a2d      	cmp	r2, #45	@ 0x2d
 801647c:	d07b      	beq.n	8016576 <_strtod_l+0x286>
 801647e:	f04f 0c00 	mov.w	ip, #0
 8016482:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016486:	2909      	cmp	r1, #9
 8016488:	f240 8082 	bls.w	8016590 <_strtod_l+0x2a0>
 801648c:	9419      	str	r4, [sp, #100]	@ 0x64
 801648e:	f04f 0800 	mov.w	r8, #0
 8016492:	e0a2      	b.n	80165da <_strtod_l+0x2ea>
 8016494:	2300      	movs	r3, #0
 8016496:	e7c7      	b.n	8016428 <_strtod_l+0x138>
 8016498:	2f08      	cmp	r7, #8
 801649a:	bfd5      	itete	le
 801649c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801649e:	9908      	ldrgt	r1, [sp, #32]
 80164a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80164a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80164a8:	f100 0001 	add.w	r0, r0, #1
 80164ac:	bfd4      	ite	le
 80164ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 80164b0:	9308      	strgt	r3, [sp, #32]
 80164b2:	3701      	adds	r7, #1
 80164b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80164b6:	e7bf      	b.n	8016438 <_strtod_l+0x148>
 80164b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164ba:	1c5a      	adds	r2, r3, #1
 80164bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80164be:	785a      	ldrb	r2, [r3, #1]
 80164c0:	b37f      	cbz	r7, 8016522 <_strtod_l+0x232>
 80164c2:	4681      	mov	r9, r0
 80164c4:	463d      	mov	r5, r7
 80164c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80164ca:	2b09      	cmp	r3, #9
 80164cc:	d912      	bls.n	80164f4 <_strtod_l+0x204>
 80164ce:	2301      	movs	r3, #1
 80164d0:	e7c4      	b.n	801645c <_strtod_l+0x16c>
 80164d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164d4:	1c5a      	adds	r2, r3, #1
 80164d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80164d8:	785a      	ldrb	r2, [r3, #1]
 80164da:	3001      	adds	r0, #1
 80164dc:	2a30      	cmp	r2, #48	@ 0x30
 80164de:	d0f8      	beq.n	80164d2 <_strtod_l+0x1e2>
 80164e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80164e4:	2b08      	cmp	r3, #8
 80164e6:	f200 84d3 	bhi.w	8016e90 <_strtod_l+0xba0>
 80164ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80164ee:	4681      	mov	r9, r0
 80164f0:	2000      	movs	r0, #0
 80164f2:	4605      	mov	r5, r0
 80164f4:	3a30      	subs	r2, #48	@ 0x30
 80164f6:	f100 0301 	add.w	r3, r0, #1
 80164fa:	d02a      	beq.n	8016552 <_strtod_l+0x262>
 80164fc:	4499      	add	r9, r3
 80164fe:	eb00 0c05 	add.w	ip, r0, r5
 8016502:	462b      	mov	r3, r5
 8016504:	210a      	movs	r1, #10
 8016506:	4563      	cmp	r3, ip
 8016508:	d10d      	bne.n	8016526 <_strtod_l+0x236>
 801650a:	1c69      	adds	r1, r5, #1
 801650c:	4401      	add	r1, r0
 801650e:	4428      	add	r0, r5
 8016510:	2808      	cmp	r0, #8
 8016512:	dc16      	bgt.n	8016542 <_strtod_l+0x252>
 8016514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016516:	230a      	movs	r3, #10
 8016518:	fb03 2300 	mla	r3, r3, r0, r2
 801651c:	930a      	str	r3, [sp, #40]	@ 0x28
 801651e:	2300      	movs	r3, #0
 8016520:	e018      	b.n	8016554 <_strtod_l+0x264>
 8016522:	4638      	mov	r0, r7
 8016524:	e7da      	b.n	80164dc <_strtod_l+0x1ec>
 8016526:	2b08      	cmp	r3, #8
 8016528:	f103 0301 	add.w	r3, r3, #1
 801652c:	dc03      	bgt.n	8016536 <_strtod_l+0x246>
 801652e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016530:	434e      	muls	r6, r1
 8016532:	960a      	str	r6, [sp, #40]	@ 0x28
 8016534:	e7e7      	b.n	8016506 <_strtod_l+0x216>
 8016536:	2b10      	cmp	r3, #16
 8016538:	bfde      	ittt	le
 801653a:	9e08      	ldrle	r6, [sp, #32]
 801653c:	434e      	mulle	r6, r1
 801653e:	9608      	strle	r6, [sp, #32]
 8016540:	e7e1      	b.n	8016506 <_strtod_l+0x216>
 8016542:	280f      	cmp	r0, #15
 8016544:	dceb      	bgt.n	801651e <_strtod_l+0x22e>
 8016546:	9808      	ldr	r0, [sp, #32]
 8016548:	230a      	movs	r3, #10
 801654a:	fb03 2300 	mla	r3, r3, r0, r2
 801654e:	9308      	str	r3, [sp, #32]
 8016550:	e7e5      	b.n	801651e <_strtod_l+0x22e>
 8016552:	4629      	mov	r1, r5
 8016554:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016556:	1c50      	adds	r0, r2, #1
 8016558:	9019      	str	r0, [sp, #100]	@ 0x64
 801655a:	7852      	ldrb	r2, [r2, #1]
 801655c:	4618      	mov	r0, r3
 801655e:	460d      	mov	r5, r1
 8016560:	e7b1      	b.n	80164c6 <_strtod_l+0x1d6>
 8016562:	f04f 0900 	mov.w	r9, #0
 8016566:	2301      	movs	r3, #1
 8016568:	e77d      	b.n	8016466 <_strtod_l+0x176>
 801656a:	f04f 0c00 	mov.w	ip, #0
 801656e:	1ca2      	adds	r2, r4, #2
 8016570:	9219      	str	r2, [sp, #100]	@ 0x64
 8016572:	78a2      	ldrb	r2, [r4, #2]
 8016574:	e785      	b.n	8016482 <_strtod_l+0x192>
 8016576:	f04f 0c01 	mov.w	ip, #1
 801657a:	e7f8      	b.n	801656e <_strtod_l+0x27e>
 801657c:	08019408 	.word	0x08019408
 8016580:	080193f0 	.word	0x080193f0
 8016584:	7ff00000 	.word	0x7ff00000
 8016588:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801658a:	1c51      	adds	r1, r2, #1
 801658c:	9119      	str	r1, [sp, #100]	@ 0x64
 801658e:	7852      	ldrb	r2, [r2, #1]
 8016590:	2a30      	cmp	r2, #48	@ 0x30
 8016592:	d0f9      	beq.n	8016588 <_strtod_l+0x298>
 8016594:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016598:	2908      	cmp	r1, #8
 801659a:	f63f af78 	bhi.w	801648e <_strtod_l+0x19e>
 801659e:	3a30      	subs	r2, #48	@ 0x30
 80165a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80165a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80165a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80165a6:	f04f 080a 	mov.w	r8, #10
 80165aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80165ac:	1c56      	adds	r6, r2, #1
 80165ae:	9619      	str	r6, [sp, #100]	@ 0x64
 80165b0:	7852      	ldrb	r2, [r2, #1]
 80165b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80165b6:	f1be 0f09 	cmp.w	lr, #9
 80165ba:	d939      	bls.n	8016630 <_strtod_l+0x340>
 80165bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80165be:	1a76      	subs	r6, r6, r1
 80165c0:	2e08      	cmp	r6, #8
 80165c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80165c6:	dc03      	bgt.n	80165d0 <_strtod_l+0x2e0>
 80165c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80165ca:	4588      	cmp	r8, r1
 80165cc:	bfa8      	it	ge
 80165ce:	4688      	movge	r8, r1
 80165d0:	f1bc 0f00 	cmp.w	ip, #0
 80165d4:	d001      	beq.n	80165da <_strtod_l+0x2ea>
 80165d6:	f1c8 0800 	rsb	r8, r8, #0
 80165da:	2d00      	cmp	r5, #0
 80165dc:	d14e      	bne.n	801667c <_strtod_l+0x38c>
 80165de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80165e0:	4308      	orrs	r0, r1
 80165e2:	f47f aebe 	bne.w	8016362 <_strtod_l+0x72>
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	f47f aed6 	bne.w	8016398 <_strtod_l+0xa8>
 80165ec:	2a69      	cmp	r2, #105	@ 0x69
 80165ee:	d028      	beq.n	8016642 <_strtod_l+0x352>
 80165f0:	dc25      	bgt.n	801663e <_strtod_l+0x34e>
 80165f2:	2a49      	cmp	r2, #73	@ 0x49
 80165f4:	d025      	beq.n	8016642 <_strtod_l+0x352>
 80165f6:	2a4e      	cmp	r2, #78	@ 0x4e
 80165f8:	f47f aece 	bne.w	8016398 <_strtod_l+0xa8>
 80165fc:	499b      	ldr	r1, [pc, #620]	@ (801686c <_strtod_l+0x57c>)
 80165fe:	a819      	add	r0, sp, #100	@ 0x64
 8016600:	f001 fb70 	bl	8017ce4 <__match>
 8016604:	2800      	cmp	r0, #0
 8016606:	f43f aec7 	beq.w	8016398 <_strtod_l+0xa8>
 801660a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	2b28      	cmp	r3, #40	@ 0x28
 8016610:	d12e      	bne.n	8016670 <_strtod_l+0x380>
 8016612:	4997      	ldr	r1, [pc, #604]	@ (8016870 <_strtod_l+0x580>)
 8016614:	aa1c      	add	r2, sp, #112	@ 0x70
 8016616:	a819      	add	r0, sp, #100	@ 0x64
 8016618:	f001 fb78 	bl	8017d0c <__hexnan>
 801661c:	2805      	cmp	r0, #5
 801661e:	d127      	bne.n	8016670 <_strtod_l+0x380>
 8016620:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016622:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016626:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801662a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801662e:	e698      	b.n	8016362 <_strtod_l+0x72>
 8016630:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016632:	fb08 2101 	mla	r1, r8, r1, r2
 8016636:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801663a:	920e      	str	r2, [sp, #56]	@ 0x38
 801663c:	e7b5      	b.n	80165aa <_strtod_l+0x2ba>
 801663e:	2a6e      	cmp	r2, #110	@ 0x6e
 8016640:	e7da      	b.n	80165f8 <_strtod_l+0x308>
 8016642:	498c      	ldr	r1, [pc, #560]	@ (8016874 <_strtod_l+0x584>)
 8016644:	a819      	add	r0, sp, #100	@ 0x64
 8016646:	f001 fb4d 	bl	8017ce4 <__match>
 801664a:	2800      	cmp	r0, #0
 801664c:	f43f aea4 	beq.w	8016398 <_strtod_l+0xa8>
 8016650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016652:	4989      	ldr	r1, [pc, #548]	@ (8016878 <_strtod_l+0x588>)
 8016654:	3b01      	subs	r3, #1
 8016656:	a819      	add	r0, sp, #100	@ 0x64
 8016658:	9319      	str	r3, [sp, #100]	@ 0x64
 801665a:	f001 fb43 	bl	8017ce4 <__match>
 801665e:	b910      	cbnz	r0, 8016666 <_strtod_l+0x376>
 8016660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016662:	3301      	adds	r3, #1
 8016664:	9319      	str	r3, [sp, #100]	@ 0x64
 8016666:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8016888 <_strtod_l+0x598>
 801666a:	f04f 0a00 	mov.w	sl, #0
 801666e:	e678      	b.n	8016362 <_strtod_l+0x72>
 8016670:	4882      	ldr	r0, [pc, #520]	@ (801687c <_strtod_l+0x58c>)
 8016672:	f001 f891 	bl	8017798 <nan>
 8016676:	ec5b ab10 	vmov	sl, fp, d0
 801667a:	e672      	b.n	8016362 <_strtod_l+0x72>
 801667c:	eba8 0309 	sub.w	r3, r8, r9
 8016680:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016682:	9309      	str	r3, [sp, #36]	@ 0x24
 8016684:	2f00      	cmp	r7, #0
 8016686:	bf08      	it	eq
 8016688:	462f      	moveq	r7, r5
 801668a:	2d10      	cmp	r5, #16
 801668c:	462c      	mov	r4, r5
 801668e:	bfa8      	it	ge
 8016690:	2410      	movge	r4, #16
 8016692:	f7e9 ff5f 	bl	8000554 <__aeabi_ui2d>
 8016696:	2d09      	cmp	r5, #9
 8016698:	4682      	mov	sl, r0
 801669a:	468b      	mov	fp, r1
 801669c:	dc13      	bgt.n	80166c6 <_strtod_l+0x3d6>
 801669e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	f43f ae5e 	beq.w	8016362 <_strtod_l+0x72>
 80166a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166a8:	dd78      	ble.n	801679c <_strtod_l+0x4ac>
 80166aa:	2b16      	cmp	r3, #22
 80166ac:	dc5f      	bgt.n	801676e <_strtod_l+0x47e>
 80166ae:	4974      	ldr	r1, [pc, #464]	@ (8016880 <_strtod_l+0x590>)
 80166b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80166b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166b8:	4652      	mov	r2, sl
 80166ba:	465b      	mov	r3, fp
 80166bc:	f7e9 ffc4 	bl	8000648 <__aeabi_dmul>
 80166c0:	4682      	mov	sl, r0
 80166c2:	468b      	mov	fp, r1
 80166c4:	e64d      	b.n	8016362 <_strtod_l+0x72>
 80166c6:	4b6e      	ldr	r3, [pc, #440]	@ (8016880 <_strtod_l+0x590>)
 80166c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80166cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80166d0:	f7e9 ffba 	bl	8000648 <__aeabi_dmul>
 80166d4:	4682      	mov	sl, r0
 80166d6:	9808      	ldr	r0, [sp, #32]
 80166d8:	468b      	mov	fp, r1
 80166da:	f7e9 ff3b 	bl	8000554 <__aeabi_ui2d>
 80166de:	4602      	mov	r2, r0
 80166e0:	460b      	mov	r3, r1
 80166e2:	4650      	mov	r0, sl
 80166e4:	4659      	mov	r1, fp
 80166e6:	f7e9 fdf9 	bl	80002dc <__adddf3>
 80166ea:	2d0f      	cmp	r5, #15
 80166ec:	4682      	mov	sl, r0
 80166ee:	468b      	mov	fp, r1
 80166f0:	ddd5      	ble.n	801669e <_strtod_l+0x3ae>
 80166f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166f4:	1b2c      	subs	r4, r5, r4
 80166f6:	441c      	add	r4, r3
 80166f8:	2c00      	cmp	r4, #0
 80166fa:	f340 8096 	ble.w	801682a <_strtod_l+0x53a>
 80166fe:	f014 030f 	ands.w	r3, r4, #15
 8016702:	d00a      	beq.n	801671a <_strtod_l+0x42a>
 8016704:	495e      	ldr	r1, [pc, #376]	@ (8016880 <_strtod_l+0x590>)
 8016706:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801670a:	4652      	mov	r2, sl
 801670c:	465b      	mov	r3, fp
 801670e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016712:	f7e9 ff99 	bl	8000648 <__aeabi_dmul>
 8016716:	4682      	mov	sl, r0
 8016718:	468b      	mov	fp, r1
 801671a:	f034 040f 	bics.w	r4, r4, #15
 801671e:	d073      	beq.n	8016808 <_strtod_l+0x518>
 8016720:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016724:	dd48      	ble.n	80167b8 <_strtod_l+0x4c8>
 8016726:	2400      	movs	r4, #0
 8016728:	46a0      	mov	r8, r4
 801672a:	940a      	str	r4, [sp, #40]	@ 0x28
 801672c:	46a1      	mov	r9, r4
 801672e:	9a05      	ldr	r2, [sp, #20]
 8016730:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016888 <_strtod_l+0x598>
 8016734:	2322      	movs	r3, #34	@ 0x22
 8016736:	6013      	str	r3, [r2, #0]
 8016738:	f04f 0a00 	mov.w	sl, #0
 801673c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801673e:	2b00      	cmp	r3, #0
 8016740:	f43f ae0f 	beq.w	8016362 <_strtod_l+0x72>
 8016744:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016746:	9805      	ldr	r0, [sp, #20]
 8016748:	f7ff f940 	bl	80159cc <_Bfree>
 801674c:	9805      	ldr	r0, [sp, #20]
 801674e:	4649      	mov	r1, r9
 8016750:	f7ff f93c 	bl	80159cc <_Bfree>
 8016754:	9805      	ldr	r0, [sp, #20]
 8016756:	4641      	mov	r1, r8
 8016758:	f7ff f938 	bl	80159cc <_Bfree>
 801675c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801675e:	9805      	ldr	r0, [sp, #20]
 8016760:	f7ff f934 	bl	80159cc <_Bfree>
 8016764:	9805      	ldr	r0, [sp, #20]
 8016766:	4621      	mov	r1, r4
 8016768:	f7ff f930 	bl	80159cc <_Bfree>
 801676c:	e5f9      	b.n	8016362 <_strtod_l+0x72>
 801676e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016770:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016774:	4293      	cmp	r3, r2
 8016776:	dbbc      	blt.n	80166f2 <_strtod_l+0x402>
 8016778:	4c41      	ldr	r4, [pc, #260]	@ (8016880 <_strtod_l+0x590>)
 801677a:	f1c5 050f 	rsb	r5, r5, #15
 801677e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016782:	4652      	mov	r2, sl
 8016784:	465b      	mov	r3, fp
 8016786:	e9d1 0100 	ldrd	r0, r1, [r1]
 801678a:	f7e9 ff5d 	bl	8000648 <__aeabi_dmul>
 801678e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016790:	1b5d      	subs	r5, r3, r5
 8016792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016796:	e9d4 2300 	ldrd	r2, r3, [r4]
 801679a:	e78f      	b.n	80166bc <_strtod_l+0x3cc>
 801679c:	3316      	adds	r3, #22
 801679e:	dba8      	blt.n	80166f2 <_strtod_l+0x402>
 80167a0:	4b37      	ldr	r3, [pc, #220]	@ (8016880 <_strtod_l+0x590>)
 80167a2:	eba9 0808 	sub.w	r8, r9, r8
 80167a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80167aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80167ae:	4650      	mov	r0, sl
 80167b0:	4659      	mov	r1, fp
 80167b2:	f7ea f873 	bl	800089c <__aeabi_ddiv>
 80167b6:	e783      	b.n	80166c0 <_strtod_l+0x3d0>
 80167b8:	4b32      	ldr	r3, [pc, #200]	@ (8016884 <_strtod_l+0x594>)
 80167ba:	9308      	str	r3, [sp, #32]
 80167bc:	2300      	movs	r3, #0
 80167be:	1124      	asrs	r4, r4, #4
 80167c0:	4650      	mov	r0, sl
 80167c2:	4659      	mov	r1, fp
 80167c4:	461e      	mov	r6, r3
 80167c6:	2c01      	cmp	r4, #1
 80167c8:	dc21      	bgt.n	801680e <_strtod_l+0x51e>
 80167ca:	b10b      	cbz	r3, 80167d0 <_strtod_l+0x4e0>
 80167cc:	4682      	mov	sl, r0
 80167ce:	468b      	mov	fp, r1
 80167d0:	492c      	ldr	r1, [pc, #176]	@ (8016884 <_strtod_l+0x594>)
 80167d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80167d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80167da:	4652      	mov	r2, sl
 80167dc:	465b      	mov	r3, fp
 80167de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167e2:	f7e9 ff31 	bl	8000648 <__aeabi_dmul>
 80167e6:	4b28      	ldr	r3, [pc, #160]	@ (8016888 <_strtod_l+0x598>)
 80167e8:	460a      	mov	r2, r1
 80167ea:	400b      	ands	r3, r1
 80167ec:	4927      	ldr	r1, [pc, #156]	@ (801688c <_strtod_l+0x59c>)
 80167ee:	428b      	cmp	r3, r1
 80167f0:	4682      	mov	sl, r0
 80167f2:	d898      	bhi.n	8016726 <_strtod_l+0x436>
 80167f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80167f8:	428b      	cmp	r3, r1
 80167fa:	bf86      	itte	hi
 80167fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8016890 <_strtod_l+0x5a0>
 8016800:	f04f 3aff 	movhi.w	sl, #4294967295
 8016804:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016808:	2300      	movs	r3, #0
 801680a:	9308      	str	r3, [sp, #32]
 801680c:	e07a      	b.n	8016904 <_strtod_l+0x614>
 801680e:	07e2      	lsls	r2, r4, #31
 8016810:	d505      	bpl.n	801681e <_strtod_l+0x52e>
 8016812:	9b08      	ldr	r3, [sp, #32]
 8016814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016818:	f7e9 ff16 	bl	8000648 <__aeabi_dmul>
 801681c:	2301      	movs	r3, #1
 801681e:	9a08      	ldr	r2, [sp, #32]
 8016820:	3208      	adds	r2, #8
 8016822:	3601      	adds	r6, #1
 8016824:	1064      	asrs	r4, r4, #1
 8016826:	9208      	str	r2, [sp, #32]
 8016828:	e7cd      	b.n	80167c6 <_strtod_l+0x4d6>
 801682a:	d0ed      	beq.n	8016808 <_strtod_l+0x518>
 801682c:	4264      	negs	r4, r4
 801682e:	f014 020f 	ands.w	r2, r4, #15
 8016832:	d00a      	beq.n	801684a <_strtod_l+0x55a>
 8016834:	4b12      	ldr	r3, [pc, #72]	@ (8016880 <_strtod_l+0x590>)
 8016836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801683a:	4650      	mov	r0, sl
 801683c:	4659      	mov	r1, fp
 801683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016842:	f7ea f82b 	bl	800089c <__aeabi_ddiv>
 8016846:	4682      	mov	sl, r0
 8016848:	468b      	mov	fp, r1
 801684a:	1124      	asrs	r4, r4, #4
 801684c:	d0dc      	beq.n	8016808 <_strtod_l+0x518>
 801684e:	2c1f      	cmp	r4, #31
 8016850:	dd20      	ble.n	8016894 <_strtod_l+0x5a4>
 8016852:	2400      	movs	r4, #0
 8016854:	46a0      	mov	r8, r4
 8016856:	940a      	str	r4, [sp, #40]	@ 0x28
 8016858:	46a1      	mov	r9, r4
 801685a:	9a05      	ldr	r2, [sp, #20]
 801685c:	2322      	movs	r3, #34	@ 0x22
 801685e:	f04f 0a00 	mov.w	sl, #0
 8016862:	f04f 0b00 	mov.w	fp, #0
 8016866:	6013      	str	r3, [r2, #0]
 8016868:	e768      	b.n	801673c <_strtod_l+0x44c>
 801686a:	bf00      	nop
 801686c:	080191e1 	.word	0x080191e1
 8016870:	080193f4 	.word	0x080193f4
 8016874:	080191d9 	.word	0x080191d9
 8016878:	08019210 	.word	0x08019210
 801687c:	080191d3 	.word	0x080191d3
 8016880:	08019328 	.word	0x08019328
 8016884:	08019300 	.word	0x08019300
 8016888:	7ff00000 	.word	0x7ff00000
 801688c:	7ca00000 	.word	0x7ca00000
 8016890:	7fefffff 	.word	0x7fefffff
 8016894:	f014 0310 	ands.w	r3, r4, #16
 8016898:	bf18      	it	ne
 801689a:	236a      	movne	r3, #106	@ 0x6a
 801689c:	4ea9      	ldr	r6, [pc, #676]	@ (8016b44 <_strtod_l+0x854>)
 801689e:	9308      	str	r3, [sp, #32]
 80168a0:	4650      	mov	r0, sl
 80168a2:	4659      	mov	r1, fp
 80168a4:	2300      	movs	r3, #0
 80168a6:	07e2      	lsls	r2, r4, #31
 80168a8:	d504      	bpl.n	80168b4 <_strtod_l+0x5c4>
 80168aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80168ae:	f7e9 fecb 	bl	8000648 <__aeabi_dmul>
 80168b2:	2301      	movs	r3, #1
 80168b4:	1064      	asrs	r4, r4, #1
 80168b6:	f106 0608 	add.w	r6, r6, #8
 80168ba:	d1f4      	bne.n	80168a6 <_strtod_l+0x5b6>
 80168bc:	b10b      	cbz	r3, 80168c2 <_strtod_l+0x5d2>
 80168be:	4682      	mov	sl, r0
 80168c0:	468b      	mov	fp, r1
 80168c2:	9b08      	ldr	r3, [sp, #32]
 80168c4:	b1b3      	cbz	r3, 80168f4 <_strtod_l+0x604>
 80168c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80168ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	4659      	mov	r1, fp
 80168d2:	dd0f      	ble.n	80168f4 <_strtod_l+0x604>
 80168d4:	2b1f      	cmp	r3, #31
 80168d6:	dd55      	ble.n	8016984 <_strtod_l+0x694>
 80168d8:	2b34      	cmp	r3, #52	@ 0x34
 80168da:	bfde      	ittt	le
 80168dc:	f04f 33ff 	movle.w	r3, #4294967295
 80168e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80168e4:	4093      	lslle	r3, r2
 80168e6:	f04f 0a00 	mov.w	sl, #0
 80168ea:	bfcc      	ite	gt
 80168ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80168f0:	ea03 0b01 	andle.w	fp, r3, r1
 80168f4:	2200      	movs	r2, #0
 80168f6:	2300      	movs	r3, #0
 80168f8:	4650      	mov	r0, sl
 80168fa:	4659      	mov	r1, fp
 80168fc:	f7ea f90c 	bl	8000b18 <__aeabi_dcmpeq>
 8016900:	2800      	cmp	r0, #0
 8016902:	d1a6      	bne.n	8016852 <_strtod_l+0x562>
 8016904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016906:	9300      	str	r3, [sp, #0]
 8016908:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801690a:	9805      	ldr	r0, [sp, #20]
 801690c:	462b      	mov	r3, r5
 801690e:	463a      	mov	r2, r7
 8016910:	f7ff f8c4 	bl	8015a9c <__s2b>
 8016914:	900a      	str	r0, [sp, #40]	@ 0x28
 8016916:	2800      	cmp	r0, #0
 8016918:	f43f af05 	beq.w	8016726 <_strtod_l+0x436>
 801691c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801691e:	2a00      	cmp	r2, #0
 8016920:	eba9 0308 	sub.w	r3, r9, r8
 8016924:	bfa8      	it	ge
 8016926:	2300      	movge	r3, #0
 8016928:	9312      	str	r3, [sp, #72]	@ 0x48
 801692a:	2400      	movs	r4, #0
 801692c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016930:	9316      	str	r3, [sp, #88]	@ 0x58
 8016932:	46a0      	mov	r8, r4
 8016934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016936:	9805      	ldr	r0, [sp, #20]
 8016938:	6859      	ldr	r1, [r3, #4]
 801693a:	f7ff f807 	bl	801594c <_Balloc>
 801693e:	4681      	mov	r9, r0
 8016940:	2800      	cmp	r0, #0
 8016942:	f43f aef4 	beq.w	801672e <_strtod_l+0x43e>
 8016946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016948:	691a      	ldr	r2, [r3, #16]
 801694a:	3202      	adds	r2, #2
 801694c:	f103 010c 	add.w	r1, r3, #12
 8016950:	0092      	lsls	r2, r2, #2
 8016952:	300c      	adds	r0, #12
 8016954:	f7fe f94f 	bl	8014bf6 <memcpy>
 8016958:	ec4b ab10 	vmov	d0, sl, fp
 801695c:	9805      	ldr	r0, [sp, #20]
 801695e:	aa1c      	add	r2, sp, #112	@ 0x70
 8016960:	a91b      	add	r1, sp, #108	@ 0x6c
 8016962:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016966:	f7ff fbd5 	bl	8016114 <__d2b>
 801696a:	901a      	str	r0, [sp, #104]	@ 0x68
 801696c:	2800      	cmp	r0, #0
 801696e:	f43f aede 	beq.w	801672e <_strtod_l+0x43e>
 8016972:	9805      	ldr	r0, [sp, #20]
 8016974:	2101      	movs	r1, #1
 8016976:	f7ff f927 	bl	8015bc8 <__i2b>
 801697a:	4680      	mov	r8, r0
 801697c:	b948      	cbnz	r0, 8016992 <_strtod_l+0x6a2>
 801697e:	f04f 0800 	mov.w	r8, #0
 8016982:	e6d4      	b.n	801672e <_strtod_l+0x43e>
 8016984:	f04f 32ff 	mov.w	r2, #4294967295
 8016988:	fa02 f303 	lsl.w	r3, r2, r3
 801698c:	ea03 0a0a 	and.w	sl, r3, sl
 8016990:	e7b0      	b.n	80168f4 <_strtod_l+0x604>
 8016992:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016994:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016996:	2d00      	cmp	r5, #0
 8016998:	bfab      	itete	ge
 801699a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801699c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801699e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80169a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80169a2:	bfac      	ite	ge
 80169a4:	18ef      	addge	r7, r5, r3
 80169a6:	1b5e      	sublt	r6, r3, r5
 80169a8:	9b08      	ldr	r3, [sp, #32]
 80169aa:	1aed      	subs	r5, r5, r3
 80169ac:	4415      	add	r5, r2
 80169ae:	4b66      	ldr	r3, [pc, #408]	@ (8016b48 <_strtod_l+0x858>)
 80169b0:	3d01      	subs	r5, #1
 80169b2:	429d      	cmp	r5, r3
 80169b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80169b8:	da50      	bge.n	8016a5c <_strtod_l+0x76c>
 80169ba:	1b5b      	subs	r3, r3, r5
 80169bc:	2b1f      	cmp	r3, #31
 80169be:	eba2 0203 	sub.w	r2, r2, r3
 80169c2:	f04f 0101 	mov.w	r1, #1
 80169c6:	dc3d      	bgt.n	8016a44 <_strtod_l+0x754>
 80169c8:	fa01 f303 	lsl.w	r3, r1, r3
 80169cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80169ce:	2300      	movs	r3, #0
 80169d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80169d2:	18bd      	adds	r5, r7, r2
 80169d4:	9b08      	ldr	r3, [sp, #32]
 80169d6:	42af      	cmp	r7, r5
 80169d8:	4416      	add	r6, r2
 80169da:	441e      	add	r6, r3
 80169dc:	463b      	mov	r3, r7
 80169de:	bfa8      	it	ge
 80169e0:	462b      	movge	r3, r5
 80169e2:	42b3      	cmp	r3, r6
 80169e4:	bfa8      	it	ge
 80169e6:	4633      	movge	r3, r6
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	bfc2      	ittt	gt
 80169ec:	1aed      	subgt	r5, r5, r3
 80169ee:	1af6      	subgt	r6, r6, r3
 80169f0:	1aff      	subgt	r7, r7, r3
 80169f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	dd16      	ble.n	8016a26 <_strtod_l+0x736>
 80169f8:	4641      	mov	r1, r8
 80169fa:	9805      	ldr	r0, [sp, #20]
 80169fc:	461a      	mov	r2, r3
 80169fe:	f7ff f9a3 	bl	8015d48 <__pow5mult>
 8016a02:	4680      	mov	r8, r0
 8016a04:	2800      	cmp	r0, #0
 8016a06:	d0ba      	beq.n	801697e <_strtod_l+0x68e>
 8016a08:	4601      	mov	r1, r0
 8016a0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016a0c:	9805      	ldr	r0, [sp, #20]
 8016a0e:	f7ff f8f1 	bl	8015bf4 <__multiply>
 8016a12:	900e      	str	r0, [sp, #56]	@ 0x38
 8016a14:	2800      	cmp	r0, #0
 8016a16:	f43f ae8a 	beq.w	801672e <_strtod_l+0x43e>
 8016a1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a1c:	9805      	ldr	r0, [sp, #20]
 8016a1e:	f7fe ffd5 	bl	80159cc <_Bfree>
 8016a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a26:	2d00      	cmp	r5, #0
 8016a28:	dc1d      	bgt.n	8016a66 <_strtod_l+0x776>
 8016a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	dd23      	ble.n	8016a78 <_strtod_l+0x788>
 8016a30:	4649      	mov	r1, r9
 8016a32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016a34:	9805      	ldr	r0, [sp, #20]
 8016a36:	f7ff f987 	bl	8015d48 <__pow5mult>
 8016a3a:	4681      	mov	r9, r0
 8016a3c:	b9e0      	cbnz	r0, 8016a78 <_strtod_l+0x788>
 8016a3e:	f04f 0900 	mov.w	r9, #0
 8016a42:	e674      	b.n	801672e <_strtod_l+0x43e>
 8016a44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016a48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016a4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016a50:	35e2      	adds	r5, #226	@ 0xe2
 8016a52:	fa01 f305 	lsl.w	r3, r1, r5
 8016a56:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a58:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016a5a:	e7ba      	b.n	80169d2 <_strtod_l+0x6e2>
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a60:	2301      	movs	r3, #1
 8016a62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016a64:	e7b5      	b.n	80169d2 <_strtod_l+0x6e2>
 8016a66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a68:	9805      	ldr	r0, [sp, #20]
 8016a6a:	462a      	mov	r2, r5
 8016a6c:	f7ff f9c6 	bl	8015dfc <__lshift>
 8016a70:	901a      	str	r0, [sp, #104]	@ 0x68
 8016a72:	2800      	cmp	r0, #0
 8016a74:	d1d9      	bne.n	8016a2a <_strtod_l+0x73a>
 8016a76:	e65a      	b.n	801672e <_strtod_l+0x43e>
 8016a78:	2e00      	cmp	r6, #0
 8016a7a:	dd07      	ble.n	8016a8c <_strtod_l+0x79c>
 8016a7c:	4649      	mov	r1, r9
 8016a7e:	9805      	ldr	r0, [sp, #20]
 8016a80:	4632      	mov	r2, r6
 8016a82:	f7ff f9bb 	bl	8015dfc <__lshift>
 8016a86:	4681      	mov	r9, r0
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	d0d8      	beq.n	8016a3e <_strtod_l+0x74e>
 8016a8c:	2f00      	cmp	r7, #0
 8016a8e:	dd08      	ble.n	8016aa2 <_strtod_l+0x7b2>
 8016a90:	4641      	mov	r1, r8
 8016a92:	9805      	ldr	r0, [sp, #20]
 8016a94:	463a      	mov	r2, r7
 8016a96:	f7ff f9b1 	bl	8015dfc <__lshift>
 8016a9a:	4680      	mov	r8, r0
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	f43f ae46 	beq.w	801672e <_strtod_l+0x43e>
 8016aa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016aa4:	9805      	ldr	r0, [sp, #20]
 8016aa6:	464a      	mov	r2, r9
 8016aa8:	f7ff fa30 	bl	8015f0c <__mdiff>
 8016aac:	4604      	mov	r4, r0
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	f43f ae3d 	beq.w	801672e <_strtod_l+0x43e>
 8016ab4:	68c3      	ldr	r3, [r0, #12]
 8016ab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016ab8:	2300      	movs	r3, #0
 8016aba:	60c3      	str	r3, [r0, #12]
 8016abc:	4641      	mov	r1, r8
 8016abe:	f7ff fa09 	bl	8015ed4 <__mcmp>
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	da46      	bge.n	8016b54 <_strtod_l+0x864>
 8016ac6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ac8:	ea53 030a 	orrs.w	r3, r3, sl
 8016acc:	d16c      	bne.n	8016ba8 <_strtod_l+0x8b8>
 8016ace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d168      	bne.n	8016ba8 <_strtod_l+0x8b8>
 8016ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016ada:	0d1b      	lsrs	r3, r3, #20
 8016adc:	051b      	lsls	r3, r3, #20
 8016ade:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016ae2:	d961      	bls.n	8016ba8 <_strtod_l+0x8b8>
 8016ae4:	6963      	ldr	r3, [r4, #20]
 8016ae6:	b913      	cbnz	r3, 8016aee <_strtod_l+0x7fe>
 8016ae8:	6923      	ldr	r3, [r4, #16]
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	dd5c      	ble.n	8016ba8 <_strtod_l+0x8b8>
 8016aee:	4621      	mov	r1, r4
 8016af0:	2201      	movs	r2, #1
 8016af2:	9805      	ldr	r0, [sp, #20]
 8016af4:	f7ff f982 	bl	8015dfc <__lshift>
 8016af8:	4641      	mov	r1, r8
 8016afa:	4604      	mov	r4, r0
 8016afc:	f7ff f9ea 	bl	8015ed4 <__mcmp>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	dd51      	ble.n	8016ba8 <_strtod_l+0x8b8>
 8016b04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b08:	9a08      	ldr	r2, [sp, #32]
 8016b0a:	0d1b      	lsrs	r3, r3, #20
 8016b0c:	051b      	lsls	r3, r3, #20
 8016b0e:	2a00      	cmp	r2, #0
 8016b10:	d06b      	beq.n	8016bea <_strtod_l+0x8fa>
 8016b12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016b16:	d868      	bhi.n	8016bea <_strtod_l+0x8fa>
 8016b18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016b1c:	f67f ae9d 	bls.w	801685a <_strtod_l+0x56a>
 8016b20:	4b0a      	ldr	r3, [pc, #40]	@ (8016b4c <_strtod_l+0x85c>)
 8016b22:	4650      	mov	r0, sl
 8016b24:	4659      	mov	r1, fp
 8016b26:	2200      	movs	r2, #0
 8016b28:	f7e9 fd8e 	bl	8000648 <__aeabi_dmul>
 8016b2c:	4b08      	ldr	r3, [pc, #32]	@ (8016b50 <_strtod_l+0x860>)
 8016b2e:	400b      	ands	r3, r1
 8016b30:	4682      	mov	sl, r0
 8016b32:	468b      	mov	fp, r1
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	f47f ae05 	bne.w	8016744 <_strtod_l+0x454>
 8016b3a:	9a05      	ldr	r2, [sp, #20]
 8016b3c:	2322      	movs	r3, #34	@ 0x22
 8016b3e:	6013      	str	r3, [r2, #0]
 8016b40:	e600      	b.n	8016744 <_strtod_l+0x454>
 8016b42:	bf00      	nop
 8016b44:	08019420 	.word	0x08019420
 8016b48:	fffffc02 	.word	0xfffffc02
 8016b4c:	39500000 	.word	0x39500000
 8016b50:	7ff00000 	.word	0x7ff00000
 8016b54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016b58:	d165      	bne.n	8016c26 <_strtod_l+0x936>
 8016b5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b60:	b35a      	cbz	r2, 8016bba <_strtod_l+0x8ca>
 8016b62:	4a9f      	ldr	r2, [pc, #636]	@ (8016de0 <_strtod_l+0xaf0>)
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d12b      	bne.n	8016bc0 <_strtod_l+0x8d0>
 8016b68:	9b08      	ldr	r3, [sp, #32]
 8016b6a:	4651      	mov	r1, sl
 8016b6c:	b303      	cbz	r3, 8016bb0 <_strtod_l+0x8c0>
 8016b6e:	4b9d      	ldr	r3, [pc, #628]	@ (8016de4 <_strtod_l+0xaf4>)
 8016b70:	465a      	mov	r2, fp
 8016b72:	4013      	ands	r3, r2
 8016b74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016b78:	f04f 32ff 	mov.w	r2, #4294967295
 8016b7c:	d81b      	bhi.n	8016bb6 <_strtod_l+0x8c6>
 8016b7e:	0d1b      	lsrs	r3, r3, #20
 8016b80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016b84:	fa02 f303 	lsl.w	r3, r2, r3
 8016b88:	4299      	cmp	r1, r3
 8016b8a:	d119      	bne.n	8016bc0 <_strtod_l+0x8d0>
 8016b8c:	4b96      	ldr	r3, [pc, #600]	@ (8016de8 <_strtod_l+0xaf8>)
 8016b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d102      	bne.n	8016b9a <_strtod_l+0x8aa>
 8016b94:	3101      	adds	r1, #1
 8016b96:	f43f adca 	beq.w	801672e <_strtod_l+0x43e>
 8016b9a:	4b92      	ldr	r3, [pc, #584]	@ (8016de4 <_strtod_l+0xaf4>)
 8016b9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b9e:	401a      	ands	r2, r3
 8016ba0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016ba4:	f04f 0a00 	mov.w	sl, #0
 8016ba8:	9b08      	ldr	r3, [sp, #32]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d1b8      	bne.n	8016b20 <_strtod_l+0x830>
 8016bae:	e5c9      	b.n	8016744 <_strtod_l+0x454>
 8016bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb4:	e7e8      	b.n	8016b88 <_strtod_l+0x898>
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	e7e6      	b.n	8016b88 <_strtod_l+0x898>
 8016bba:	ea53 030a 	orrs.w	r3, r3, sl
 8016bbe:	d0a1      	beq.n	8016b04 <_strtod_l+0x814>
 8016bc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016bc2:	b1db      	cbz	r3, 8016bfc <_strtod_l+0x90c>
 8016bc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bc6:	4213      	tst	r3, r2
 8016bc8:	d0ee      	beq.n	8016ba8 <_strtod_l+0x8b8>
 8016bca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bcc:	9a08      	ldr	r2, [sp, #32]
 8016bce:	4650      	mov	r0, sl
 8016bd0:	4659      	mov	r1, fp
 8016bd2:	b1bb      	cbz	r3, 8016c04 <_strtod_l+0x914>
 8016bd4:	f7ff fb6c 	bl	80162b0 <sulp>
 8016bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016bdc:	ec53 2b10 	vmov	r2, r3, d0
 8016be0:	f7e9 fb7c 	bl	80002dc <__adddf3>
 8016be4:	4682      	mov	sl, r0
 8016be6:	468b      	mov	fp, r1
 8016be8:	e7de      	b.n	8016ba8 <_strtod_l+0x8b8>
 8016bea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016bee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016bf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016bf6:	f04f 3aff 	mov.w	sl, #4294967295
 8016bfa:	e7d5      	b.n	8016ba8 <_strtod_l+0x8b8>
 8016bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016bfe:	ea13 0f0a 	tst.w	r3, sl
 8016c02:	e7e1      	b.n	8016bc8 <_strtod_l+0x8d8>
 8016c04:	f7ff fb54 	bl	80162b0 <sulp>
 8016c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016c0c:	ec53 2b10 	vmov	r2, r3, d0
 8016c10:	f7e9 fb62 	bl	80002d8 <__aeabi_dsub>
 8016c14:	2200      	movs	r2, #0
 8016c16:	2300      	movs	r3, #0
 8016c18:	4682      	mov	sl, r0
 8016c1a:	468b      	mov	fp, r1
 8016c1c:	f7e9 ff7c 	bl	8000b18 <__aeabi_dcmpeq>
 8016c20:	2800      	cmp	r0, #0
 8016c22:	d0c1      	beq.n	8016ba8 <_strtod_l+0x8b8>
 8016c24:	e619      	b.n	801685a <_strtod_l+0x56a>
 8016c26:	4641      	mov	r1, r8
 8016c28:	4620      	mov	r0, r4
 8016c2a:	f7ff facb 	bl	80161c4 <__ratio>
 8016c2e:	ec57 6b10 	vmov	r6, r7, d0
 8016c32:	2200      	movs	r2, #0
 8016c34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016c38:	4630      	mov	r0, r6
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	f7e9 ff80 	bl	8000b40 <__aeabi_dcmple>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	d06f      	beq.n	8016d24 <_strtod_l+0xa34>
 8016c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d17a      	bne.n	8016d40 <_strtod_l+0xa50>
 8016c4a:	f1ba 0f00 	cmp.w	sl, #0
 8016c4e:	d158      	bne.n	8016d02 <_strtod_l+0xa12>
 8016c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d15a      	bne.n	8016d10 <_strtod_l+0xa20>
 8016c5a:	4b64      	ldr	r3, [pc, #400]	@ (8016dec <_strtod_l+0xafc>)
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	4630      	mov	r0, r6
 8016c60:	4639      	mov	r1, r7
 8016c62:	f7e9 ff63 	bl	8000b2c <__aeabi_dcmplt>
 8016c66:	2800      	cmp	r0, #0
 8016c68:	d159      	bne.n	8016d1e <_strtod_l+0xa2e>
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	4639      	mov	r1, r7
 8016c6e:	4b60      	ldr	r3, [pc, #384]	@ (8016df0 <_strtod_l+0xb00>)
 8016c70:	2200      	movs	r2, #0
 8016c72:	f7e9 fce9 	bl	8000648 <__aeabi_dmul>
 8016c76:	4606      	mov	r6, r0
 8016c78:	460f      	mov	r7, r1
 8016c7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016c7e:	9606      	str	r6, [sp, #24]
 8016c80:	9307      	str	r3, [sp, #28]
 8016c82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c86:	4d57      	ldr	r5, [pc, #348]	@ (8016de4 <_strtod_l+0xaf4>)
 8016c88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c8e:	401d      	ands	r5, r3
 8016c90:	4b58      	ldr	r3, [pc, #352]	@ (8016df4 <_strtod_l+0xb04>)
 8016c92:	429d      	cmp	r5, r3
 8016c94:	f040 80b2 	bne.w	8016dfc <_strtod_l+0xb0c>
 8016c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016c9e:	ec4b ab10 	vmov	d0, sl, fp
 8016ca2:	f7ff f9c7 	bl	8016034 <__ulp>
 8016ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016caa:	ec51 0b10 	vmov	r0, r1, d0
 8016cae:	f7e9 fccb 	bl	8000648 <__aeabi_dmul>
 8016cb2:	4652      	mov	r2, sl
 8016cb4:	465b      	mov	r3, fp
 8016cb6:	f7e9 fb11 	bl	80002dc <__adddf3>
 8016cba:	460b      	mov	r3, r1
 8016cbc:	4949      	ldr	r1, [pc, #292]	@ (8016de4 <_strtod_l+0xaf4>)
 8016cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8016df8 <_strtod_l+0xb08>)
 8016cc0:	4019      	ands	r1, r3
 8016cc2:	4291      	cmp	r1, r2
 8016cc4:	4682      	mov	sl, r0
 8016cc6:	d942      	bls.n	8016d4e <_strtod_l+0xa5e>
 8016cc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016cca:	4b47      	ldr	r3, [pc, #284]	@ (8016de8 <_strtod_l+0xaf8>)
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d103      	bne.n	8016cd8 <_strtod_l+0x9e8>
 8016cd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	f43f ad2b 	beq.w	801672e <_strtod_l+0x43e>
 8016cd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016de8 <_strtod_l+0xaf8>
 8016cdc:	f04f 3aff 	mov.w	sl, #4294967295
 8016ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016ce2:	9805      	ldr	r0, [sp, #20]
 8016ce4:	f7fe fe72 	bl	80159cc <_Bfree>
 8016ce8:	9805      	ldr	r0, [sp, #20]
 8016cea:	4649      	mov	r1, r9
 8016cec:	f7fe fe6e 	bl	80159cc <_Bfree>
 8016cf0:	9805      	ldr	r0, [sp, #20]
 8016cf2:	4641      	mov	r1, r8
 8016cf4:	f7fe fe6a 	bl	80159cc <_Bfree>
 8016cf8:	9805      	ldr	r0, [sp, #20]
 8016cfa:	4621      	mov	r1, r4
 8016cfc:	f7fe fe66 	bl	80159cc <_Bfree>
 8016d00:	e618      	b.n	8016934 <_strtod_l+0x644>
 8016d02:	f1ba 0f01 	cmp.w	sl, #1
 8016d06:	d103      	bne.n	8016d10 <_strtod_l+0xa20>
 8016d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	f43f ada5 	beq.w	801685a <_strtod_l+0x56a>
 8016d10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016dc0 <_strtod_l+0xad0>
 8016d14:	4f35      	ldr	r7, [pc, #212]	@ (8016dec <_strtod_l+0xafc>)
 8016d16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d1a:	2600      	movs	r6, #0
 8016d1c:	e7b1      	b.n	8016c82 <_strtod_l+0x992>
 8016d1e:	4f34      	ldr	r7, [pc, #208]	@ (8016df0 <_strtod_l+0xb00>)
 8016d20:	2600      	movs	r6, #0
 8016d22:	e7aa      	b.n	8016c7a <_strtod_l+0x98a>
 8016d24:	4b32      	ldr	r3, [pc, #200]	@ (8016df0 <_strtod_l+0xb00>)
 8016d26:	4630      	mov	r0, r6
 8016d28:	4639      	mov	r1, r7
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	f7e9 fc8c 	bl	8000648 <__aeabi_dmul>
 8016d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d32:	4606      	mov	r6, r0
 8016d34:	460f      	mov	r7, r1
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d09f      	beq.n	8016c7a <_strtod_l+0x98a>
 8016d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016d3e:	e7a0      	b.n	8016c82 <_strtod_l+0x992>
 8016d40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016dc8 <_strtod_l+0xad8>
 8016d44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d48:	ec57 6b17 	vmov	r6, r7, d7
 8016d4c:	e799      	b.n	8016c82 <_strtod_l+0x992>
 8016d4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016d52:	9b08      	ldr	r3, [sp, #32]
 8016d54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d1c1      	bne.n	8016ce0 <_strtod_l+0x9f0>
 8016d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d60:	0d1b      	lsrs	r3, r3, #20
 8016d62:	051b      	lsls	r3, r3, #20
 8016d64:	429d      	cmp	r5, r3
 8016d66:	d1bb      	bne.n	8016ce0 <_strtod_l+0x9f0>
 8016d68:	4630      	mov	r0, r6
 8016d6a:	4639      	mov	r1, r7
 8016d6c:	f7e9 ffcc 	bl	8000d08 <__aeabi_d2lz>
 8016d70:	f7e9 fc3c 	bl	80005ec <__aeabi_l2d>
 8016d74:	4602      	mov	r2, r0
 8016d76:	460b      	mov	r3, r1
 8016d78:	4630      	mov	r0, r6
 8016d7a:	4639      	mov	r1, r7
 8016d7c:	f7e9 faac 	bl	80002d8 <__aeabi_dsub>
 8016d80:	460b      	mov	r3, r1
 8016d82:	4602      	mov	r2, r0
 8016d84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016d88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d8e:	ea46 060a 	orr.w	r6, r6, sl
 8016d92:	431e      	orrs	r6, r3
 8016d94:	d06f      	beq.n	8016e76 <_strtod_l+0xb86>
 8016d96:	a30e      	add	r3, pc, #56	@ (adr r3, 8016dd0 <_strtod_l+0xae0>)
 8016d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d9c:	f7e9 fec6 	bl	8000b2c <__aeabi_dcmplt>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	f47f accf 	bne.w	8016744 <_strtod_l+0x454>
 8016da6:	a30c      	add	r3, pc, #48	@ (adr r3, 8016dd8 <_strtod_l+0xae8>)
 8016da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016db0:	f7e9 feda 	bl	8000b68 <__aeabi_dcmpgt>
 8016db4:	2800      	cmp	r0, #0
 8016db6:	d093      	beq.n	8016ce0 <_strtod_l+0x9f0>
 8016db8:	e4c4      	b.n	8016744 <_strtod_l+0x454>
 8016dba:	bf00      	nop
 8016dbc:	f3af 8000 	nop.w
 8016dc0:	00000000 	.word	0x00000000
 8016dc4:	bff00000 	.word	0xbff00000
 8016dc8:	00000000 	.word	0x00000000
 8016dcc:	3ff00000 	.word	0x3ff00000
 8016dd0:	94a03595 	.word	0x94a03595
 8016dd4:	3fdfffff 	.word	0x3fdfffff
 8016dd8:	35afe535 	.word	0x35afe535
 8016ddc:	3fe00000 	.word	0x3fe00000
 8016de0:	000fffff 	.word	0x000fffff
 8016de4:	7ff00000 	.word	0x7ff00000
 8016de8:	7fefffff 	.word	0x7fefffff
 8016dec:	3ff00000 	.word	0x3ff00000
 8016df0:	3fe00000 	.word	0x3fe00000
 8016df4:	7fe00000 	.word	0x7fe00000
 8016df8:	7c9fffff 	.word	0x7c9fffff
 8016dfc:	9b08      	ldr	r3, [sp, #32]
 8016dfe:	b323      	cbz	r3, 8016e4a <_strtod_l+0xb5a>
 8016e00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016e04:	d821      	bhi.n	8016e4a <_strtod_l+0xb5a>
 8016e06:	a328      	add	r3, pc, #160	@ (adr r3, 8016ea8 <_strtod_l+0xbb8>)
 8016e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0c:	4630      	mov	r0, r6
 8016e0e:	4639      	mov	r1, r7
 8016e10:	f7e9 fe96 	bl	8000b40 <__aeabi_dcmple>
 8016e14:	b1a0      	cbz	r0, 8016e40 <_strtod_l+0xb50>
 8016e16:	4639      	mov	r1, r7
 8016e18:	4630      	mov	r0, r6
 8016e1a:	f7e9 feed 	bl	8000bf8 <__aeabi_d2uiz>
 8016e1e:	2801      	cmp	r0, #1
 8016e20:	bf38      	it	cc
 8016e22:	2001      	movcc	r0, #1
 8016e24:	f7e9 fb96 	bl	8000554 <__aeabi_ui2d>
 8016e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e2a:	4606      	mov	r6, r0
 8016e2c:	460f      	mov	r7, r1
 8016e2e:	b9fb      	cbnz	r3, 8016e70 <_strtod_l+0xb80>
 8016e30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016e34:	9014      	str	r0, [sp, #80]	@ 0x50
 8016e36:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016e3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016e40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016e46:	1b5b      	subs	r3, r3, r5
 8016e48:	9311      	str	r3, [sp, #68]	@ 0x44
 8016e4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016e4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016e52:	f7ff f8ef 	bl	8016034 <__ulp>
 8016e56:	4650      	mov	r0, sl
 8016e58:	ec53 2b10 	vmov	r2, r3, d0
 8016e5c:	4659      	mov	r1, fp
 8016e5e:	f7e9 fbf3 	bl	8000648 <__aeabi_dmul>
 8016e62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016e66:	f7e9 fa39 	bl	80002dc <__adddf3>
 8016e6a:	4682      	mov	sl, r0
 8016e6c:	468b      	mov	fp, r1
 8016e6e:	e770      	b.n	8016d52 <_strtod_l+0xa62>
 8016e70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016e74:	e7e0      	b.n	8016e38 <_strtod_l+0xb48>
 8016e76:	a30e      	add	r3, pc, #56	@ (adr r3, 8016eb0 <_strtod_l+0xbc0>)
 8016e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7c:	f7e9 fe56 	bl	8000b2c <__aeabi_dcmplt>
 8016e80:	e798      	b.n	8016db4 <_strtod_l+0xac4>
 8016e82:	2300      	movs	r3, #0
 8016e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016e86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016e88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e8a:	6013      	str	r3, [r2, #0]
 8016e8c:	f7ff ba6d 	b.w	801636a <_strtod_l+0x7a>
 8016e90:	2a65      	cmp	r2, #101	@ 0x65
 8016e92:	f43f ab66 	beq.w	8016562 <_strtod_l+0x272>
 8016e96:	2a45      	cmp	r2, #69	@ 0x45
 8016e98:	f43f ab63 	beq.w	8016562 <_strtod_l+0x272>
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	f7ff bb9e 	b.w	80165de <_strtod_l+0x2ee>
 8016ea2:	bf00      	nop
 8016ea4:	f3af 8000 	nop.w
 8016ea8:	ffc00000 	.word	0xffc00000
 8016eac:	41dfffff 	.word	0x41dfffff
 8016eb0:	94a03595 	.word	0x94a03595
 8016eb4:	3fcfffff 	.word	0x3fcfffff

08016eb8 <_strtod_r>:
 8016eb8:	4b01      	ldr	r3, [pc, #4]	@ (8016ec0 <_strtod_r+0x8>)
 8016eba:	f7ff ba19 	b.w	80162f0 <_strtod_l>
 8016ebe:	bf00      	nop
 8016ec0:	200000e0 	.word	0x200000e0

08016ec4 <_strtol_l.constprop.0>:
 8016ec4:	2b24      	cmp	r3, #36	@ 0x24
 8016ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eca:	4686      	mov	lr, r0
 8016ecc:	4690      	mov	r8, r2
 8016ece:	d801      	bhi.n	8016ed4 <_strtol_l.constprop.0+0x10>
 8016ed0:	2b01      	cmp	r3, #1
 8016ed2:	d106      	bne.n	8016ee2 <_strtol_l.constprop.0+0x1e>
 8016ed4:	f7fd fe62 	bl	8014b9c <__errno>
 8016ed8:	2316      	movs	r3, #22
 8016eda:	6003      	str	r3, [r0, #0]
 8016edc:	2000      	movs	r0, #0
 8016ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ee2:	4834      	ldr	r0, [pc, #208]	@ (8016fb4 <_strtol_l.constprop.0+0xf0>)
 8016ee4:	460d      	mov	r5, r1
 8016ee6:	462a      	mov	r2, r5
 8016ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016eec:	5d06      	ldrb	r6, [r0, r4]
 8016eee:	f016 0608 	ands.w	r6, r6, #8
 8016ef2:	d1f8      	bne.n	8016ee6 <_strtol_l.constprop.0+0x22>
 8016ef4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016ef6:	d12d      	bne.n	8016f54 <_strtol_l.constprop.0+0x90>
 8016ef8:	782c      	ldrb	r4, [r5, #0]
 8016efa:	2601      	movs	r6, #1
 8016efc:	1c95      	adds	r5, r2, #2
 8016efe:	f033 0210 	bics.w	r2, r3, #16
 8016f02:	d109      	bne.n	8016f18 <_strtol_l.constprop.0+0x54>
 8016f04:	2c30      	cmp	r4, #48	@ 0x30
 8016f06:	d12a      	bne.n	8016f5e <_strtol_l.constprop.0+0x9a>
 8016f08:	782a      	ldrb	r2, [r5, #0]
 8016f0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016f0e:	2a58      	cmp	r2, #88	@ 0x58
 8016f10:	d125      	bne.n	8016f5e <_strtol_l.constprop.0+0x9a>
 8016f12:	786c      	ldrb	r4, [r5, #1]
 8016f14:	2310      	movs	r3, #16
 8016f16:	3502      	adds	r5, #2
 8016f18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016f1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f20:	2200      	movs	r2, #0
 8016f22:	fbbc f9f3 	udiv	r9, ip, r3
 8016f26:	4610      	mov	r0, r2
 8016f28:	fb03 ca19 	mls	sl, r3, r9, ip
 8016f2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016f30:	2f09      	cmp	r7, #9
 8016f32:	d81b      	bhi.n	8016f6c <_strtol_l.constprop.0+0xa8>
 8016f34:	463c      	mov	r4, r7
 8016f36:	42a3      	cmp	r3, r4
 8016f38:	dd27      	ble.n	8016f8a <_strtol_l.constprop.0+0xc6>
 8016f3a:	1c57      	adds	r7, r2, #1
 8016f3c:	d007      	beq.n	8016f4e <_strtol_l.constprop.0+0x8a>
 8016f3e:	4581      	cmp	r9, r0
 8016f40:	d320      	bcc.n	8016f84 <_strtol_l.constprop.0+0xc0>
 8016f42:	d101      	bne.n	8016f48 <_strtol_l.constprop.0+0x84>
 8016f44:	45a2      	cmp	sl, r4
 8016f46:	db1d      	blt.n	8016f84 <_strtol_l.constprop.0+0xc0>
 8016f48:	fb00 4003 	mla	r0, r0, r3, r4
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f52:	e7eb      	b.n	8016f2c <_strtol_l.constprop.0+0x68>
 8016f54:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f56:	bf04      	itt	eq
 8016f58:	782c      	ldrbeq	r4, [r5, #0]
 8016f5a:	1c95      	addeq	r5, r2, #2
 8016f5c:	e7cf      	b.n	8016efe <_strtol_l.constprop.0+0x3a>
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d1da      	bne.n	8016f18 <_strtol_l.constprop.0+0x54>
 8016f62:	2c30      	cmp	r4, #48	@ 0x30
 8016f64:	bf0c      	ite	eq
 8016f66:	2308      	moveq	r3, #8
 8016f68:	230a      	movne	r3, #10
 8016f6a:	e7d5      	b.n	8016f18 <_strtol_l.constprop.0+0x54>
 8016f6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016f70:	2f19      	cmp	r7, #25
 8016f72:	d801      	bhi.n	8016f78 <_strtol_l.constprop.0+0xb4>
 8016f74:	3c37      	subs	r4, #55	@ 0x37
 8016f76:	e7de      	b.n	8016f36 <_strtol_l.constprop.0+0x72>
 8016f78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016f7c:	2f19      	cmp	r7, #25
 8016f7e:	d804      	bhi.n	8016f8a <_strtol_l.constprop.0+0xc6>
 8016f80:	3c57      	subs	r4, #87	@ 0x57
 8016f82:	e7d8      	b.n	8016f36 <_strtol_l.constprop.0+0x72>
 8016f84:	f04f 32ff 	mov.w	r2, #4294967295
 8016f88:	e7e1      	b.n	8016f4e <_strtol_l.constprop.0+0x8a>
 8016f8a:	1c53      	adds	r3, r2, #1
 8016f8c:	d108      	bne.n	8016fa0 <_strtol_l.constprop.0+0xdc>
 8016f8e:	2322      	movs	r3, #34	@ 0x22
 8016f90:	f8ce 3000 	str.w	r3, [lr]
 8016f94:	4660      	mov	r0, ip
 8016f96:	f1b8 0f00 	cmp.w	r8, #0
 8016f9a:	d0a0      	beq.n	8016ede <_strtol_l.constprop.0+0x1a>
 8016f9c:	1e69      	subs	r1, r5, #1
 8016f9e:	e006      	b.n	8016fae <_strtol_l.constprop.0+0xea>
 8016fa0:	b106      	cbz	r6, 8016fa4 <_strtol_l.constprop.0+0xe0>
 8016fa2:	4240      	negs	r0, r0
 8016fa4:	f1b8 0f00 	cmp.w	r8, #0
 8016fa8:	d099      	beq.n	8016ede <_strtol_l.constprop.0+0x1a>
 8016faa:	2a00      	cmp	r2, #0
 8016fac:	d1f6      	bne.n	8016f9c <_strtol_l.constprop.0+0xd8>
 8016fae:	f8c8 1000 	str.w	r1, [r8]
 8016fb2:	e794      	b.n	8016ede <_strtol_l.constprop.0+0x1a>
 8016fb4:	08019449 	.word	0x08019449

08016fb8 <_strtol_r>:
 8016fb8:	f7ff bf84 	b.w	8016ec4 <_strtol_l.constprop.0>

08016fbc <__ssputs_r>:
 8016fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fc0:	688e      	ldr	r6, [r1, #8]
 8016fc2:	461f      	mov	r7, r3
 8016fc4:	42be      	cmp	r6, r7
 8016fc6:	680b      	ldr	r3, [r1, #0]
 8016fc8:	4682      	mov	sl, r0
 8016fca:	460c      	mov	r4, r1
 8016fcc:	4690      	mov	r8, r2
 8016fce:	d82d      	bhi.n	801702c <__ssputs_r+0x70>
 8016fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016fd8:	d026      	beq.n	8017028 <__ssputs_r+0x6c>
 8016fda:	6965      	ldr	r5, [r4, #20]
 8016fdc:	6909      	ldr	r1, [r1, #16]
 8016fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fe2:	eba3 0901 	sub.w	r9, r3, r1
 8016fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fea:	1c7b      	adds	r3, r7, #1
 8016fec:	444b      	add	r3, r9
 8016fee:	106d      	asrs	r5, r5, #1
 8016ff0:	429d      	cmp	r5, r3
 8016ff2:	bf38      	it	cc
 8016ff4:	461d      	movcc	r5, r3
 8016ff6:	0553      	lsls	r3, r2, #21
 8016ff8:	d527      	bpl.n	801704a <__ssputs_r+0x8e>
 8016ffa:	4629      	mov	r1, r5
 8016ffc:	f7fc fcbc 	bl	8013978 <_malloc_r>
 8017000:	4606      	mov	r6, r0
 8017002:	b360      	cbz	r0, 801705e <__ssputs_r+0xa2>
 8017004:	6921      	ldr	r1, [r4, #16]
 8017006:	464a      	mov	r2, r9
 8017008:	f7fd fdf5 	bl	8014bf6 <memcpy>
 801700c:	89a3      	ldrh	r3, [r4, #12]
 801700e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017016:	81a3      	strh	r3, [r4, #12]
 8017018:	6126      	str	r6, [r4, #16]
 801701a:	6165      	str	r5, [r4, #20]
 801701c:	444e      	add	r6, r9
 801701e:	eba5 0509 	sub.w	r5, r5, r9
 8017022:	6026      	str	r6, [r4, #0]
 8017024:	60a5      	str	r5, [r4, #8]
 8017026:	463e      	mov	r6, r7
 8017028:	42be      	cmp	r6, r7
 801702a:	d900      	bls.n	801702e <__ssputs_r+0x72>
 801702c:	463e      	mov	r6, r7
 801702e:	6820      	ldr	r0, [r4, #0]
 8017030:	4632      	mov	r2, r6
 8017032:	4641      	mov	r1, r8
 8017034:	f7fd fcdf 	bl	80149f6 <memmove>
 8017038:	68a3      	ldr	r3, [r4, #8]
 801703a:	1b9b      	subs	r3, r3, r6
 801703c:	60a3      	str	r3, [r4, #8]
 801703e:	6823      	ldr	r3, [r4, #0]
 8017040:	4433      	add	r3, r6
 8017042:	6023      	str	r3, [r4, #0]
 8017044:	2000      	movs	r0, #0
 8017046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801704a:	462a      	mov	r2, r5
 801704c:	f000 ff0b 	bl	8017e66 <_realloc_r>
 8017050:	4606      	mov	r6, r0
 8017052:	2800      	cmp	r0, #0
 8017054:	d1e0      	bne.n	8017018 <__ssputs_r+0x5c>
 8017056:	6921      	ldr	r1, [r4, #16]
 8017058:	4650      	mov	r0, sl
 801705a:	f7fe fc2d 	bl	80158b8 <_free_r>
 801705e:	230c      	movs	r3, #12
 8017060:	f8ca 3000 	str.w	r3, [sl]
 8017064:	89a3      	ldrh	r3, [r4, #12]
 8017066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801706a:	81a3      	strh	r3, [r4, #12]
 801706c:	f04f 30ff 	mov.w	r0, #4294967295
 8017070:	e7e9      	b.n	8017046 <__ssputs_r+0x8a>
	...

08017074 <_svfiprintf_r>:
 8017074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017078:	4698      	mov	r8, r3
 801707a:	898b      	ldrh	r3, [r1, #12]
 801707c:	061b      	lsls	r3, r3, #24
 801707e:	b09d      	sub	sp, #116	@ 0x74
 8017080:	4607      	mov	r7, r0
 8017082:	460d      	mov	r5, r1
 8017084:	4614      	mov	r4, r2
 8017086:	d510      	bpl.n	80170aa <_svfiprintf_r+0x36>
 8017088:	690b      	ldr	r3, [r1, #16]
 801708a:	b973      	cbnz	r3, 80170aa <_svfiprintf_r+0x36>
 801708c:	2140      	movs	r1, #64	@ 0x40
 801708e:	f7fc fc73 	bl	8013978 <_malloc_r>
 8017092:	6028      	str	r0, [r5, #0]
 8017094:	6128      	str	r0, [r5, #16]
 8017096:	b930      	cbnz	r0, 80170a6 <_svfiprintf_r+0x32>
 8017098:	230c      	movs	r3, #12
 801709a:	603b      	str	r3, [r7, #0]
 801709c:	f04f 30ff 	mov.w	r0, #4294967295
 80170a0:	b01d      	add	sp, #116	@ 0x74
 80170a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a6:	2340      	movs	r3, #64	@ 0x40
 80170a8:	616b      	str	r3, [r5, #20]
 80170aa:	2300      	movs	r3, #0
 80170ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80170ae:	2320      	movs	r3, #32
 80170b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80170b8:	2330      	movs	r3, #48	@ 0x30
 80170ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017258 <_svfiprintf_r+0x1e4>
 80170be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170c2:	f04f 0901 	mov.w	r9, #1
 80170c6:	4623      	mov	r3, r4
 80170c8:	469a      	mov	sl, r3
 80170ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ce:	b10a      	cbz	r2, 80170d4 <_svfiprintf_r+0x60>
 80170d0:	2a25      	cmp	r2, #37	@ 0x25
 80170d2:	d1f9      	bne.n	80170c8 <_svfiprintf_r+0x54>
 80170d4:	ebba 0b04 	subs.w	fp, sl, r4
 80170d8:	d00b      	beq.n	80170f2 <_svfiprintf_r+0x7e>
 80170da:	465b      	mov	r3, fp
 80170dc:	4622      	mov	r2, r4
 80170de:	4629      	mov	r1, r5
 80170e0:	4638      	mov	r0, r7
 80170e2:	f7ff ff6b 	bl	8016fbc <__ssputs_r>
 80170e6:	3001      	adds	r0, #1
 80170e8:	f000 80a7 	beq.w	801723a <_svfiprintf_r+0x1c6>
 80170ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170ee:	445a      	add	r2, fp
 80170f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80170f2:	f89a 3000 	ldrb.w	r3, [sl]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	f000 809f 	beq.w	801723a <_svfiprintf_r+0x1c6>
 80170fc:	2300      	movs	r3, #0
 80170fe:	f04f 32ff 	mov.w	r2, #4294967295
 8017102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017106:	f10a 0a01 	add.w	sl, sl, #1
 801710a:	9304      	str	r3, [sp, #16]
 801710c:	9307      	str	r3, [sp, #28]
 801710e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017112:	931a      	str	r3, [sp, #104]	@ 0x68
 8017114:	4654      	mov	r4, sl
 8017116:	2205      	movs	r2, #5
 8017118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801711c:	484e      	ldr	r0, [pc, #312]	@ (8017258 <_svfiprintf_r+0x1e4>)
 801711e:	f7e9 f87f 	bl	8000220 <memchr>
 8017122:	9a04      	ldr	r2, [sp, #16]
 8017124:	b9d8      	cbnz	r0, 801715e <_svfiprintf_r+0xea>
 8017126:	06d0      	lsls	r0, r2, #27
 8017128:	bf44      	itt	mi
 801712a:	2320      	movmi	r3, #32
 801712c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017130:	0711      	lsls	r1, r2, #28
 8017132:	bf44      	itt	mi
 8017134:	232b      	movmi	r3, #43	@ 0x2b
 8017136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801713a:	f89a 3000 	ldrb.w	r3, [sl]
 801713e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017140:	d015      	beq.n	801716e <_svfiprintf_r+0xfa>
 8017142:	9a07      	ldr	r2, [sp, #28]
 8017144:	4654      	mov	r4, sl
 8017146:	2000      	movs	r0, #0
 8017148:	f04f 0c0a 	mov.w	ip, #10
 801714c:	4621      	mov	r1, r4
 801714e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017152:	3b30      	subs	r3, #48	@ 0x30
 8017154:	2b09      	cmp	r3, #9
 8017156:	d94b      	bls.n	80171f0 <_svfiprintf_r+0x17c>
 8017158:	b1b0      	cbz	r0, 8017188 <_svfiprintf_r+0x114>
 801715a:	9207      	str	r2, [sp, #28]
 801715c:	e014      	b.n	8017188 <_svfiprintf_r+0x114>
 801715e:	eba0 0308 	sub.w	r3, r0, r8
 8017162:	fa09 f303 	lsl.w	r3, r9, r3
 8017166:	4313      	orrs	r3, r2
 8017168:	9304      	str	r3, [sp, #16]
 801716a:	46a2      	mov	sl, r4
 801716c:	e7d2      	b.n	8017114 <_svfiprintf_r+0xa0>
 801716e:	9b03      	ldr	r3, [sp, #12]
 8017170:	1d19      	adds	r1, r3, #4
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	9103      	str	r1, [sp, #12]
 8017176:	2b00      	cmp	r3, #0
 8017178:	bfbb      	ittet	lt
 801717a:	425b      	neglt	r3, r3
 801717c:	f042 0202 	orrlt.w	r2, r2, #2
 8017180:	9307      	strge	r3, [sp, #28]
 8017182:	9307      	strlt	r3, [sp, #28]
 8017184:	bfb8      	it	lt
 8017186:	9204      	strlt	r2, [sp, #16]
 8017188:	7823      	ldrb	r3, [r4, #0]
 801718a:	2b2e      	cmp	r3, #46	@ 0x2e
 801718c:	d10a      	bne.n	80171a4 <_svfiprintf_r+0x130>
 801718e:	7863      	ldrb	r3, [r4, #1]
 8017190:	2b2a      	cmp	r3, #42	@ 0x2a
 8017192:	d132      	bne.n	80171fa <_svfiprintf_r+0x186>
 8017194:	9b03      	ldr	r3, [sp, #12]
 8017196:	1d1a      	adds	r2, r3, #4
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	9203      	str	r2, [sp, #12]
 801719c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171a0:	3402      	adds	r4, #2
 80171a2:	9305      	str	r3, [sp, #20]
 80171a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017268 <_svfiprintf_r+0x1f4>
 80171a8:	7821      	ldrb	r1, [r4, #0]
 80171aa:	2203      	movs	r2, #3
 80171ac:	4650      	mov	r0, sl
 80171ae:	f7e9 f837 	bl	8000220 <memchr>
 80171b2:	b138      	cbz	r0, 80171c4 <_svfiprintf_r+0x150>
 80171b4:	9b04      	ldr	r3, [sp, #16]
 80171b6:	eba0 000a 	sub.w	r0, r0, sl
 80171ba:	2240      	movs	r2, #64	@ 0x40
 80171bc:	4082      	lsls	r2, r0
 80171be:	4313      	orrs	r3, r2
 80171c0:	3401      	adds	r4, #1
 80171c2:	9304      	str	r3, [sp, #16]
 80171c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171c8:	4824      	ldr	r0, [pc, #144]	@ (801725c <_svfiprintf_r+0x1e8>)
 80171ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171ce:	2206      	movs	r2, #6
 80171d0:	f7e9 f826 	bl	8000220 <memchr>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	d036      	beq.n	8017246 <_svfiprintf_r+0x1d2>
 80171d8:	4b21      	ldr	r3, [pc, #132]	@ (8017260 <_svfiprintf_r+0x1ec>)
 80171da:	bb1b      	cbnz	r3, 8017224 <_svfiprintf_r+0x1b0>
 80171dc:	9b03      	ldr	r3, [sp, #12]
 80171de:	3307      	adds	r3, #7
 80171e0:	f023 0307 	bic.w	r3, r3, #7
 80171e4:	3308      	adds	r3, #8
 80171e6:	9303      	str	r3, [sp, #12]
 80171e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171ea:	4433      	add	r3, r6
 80171ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80171ee:	e76a      	b.n	80170c6 <_svfiprintf_r+0x52>
 80171f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80171f4:	460c      	mov	r4, r1
 80171f6:	2001      	movs	r0, #1
 80171f8:	e7a8      	b.n	801714c <_svfiprintf_r+0xd8>
 80171fa:	2300      	movs	r3, #0
 80171fc:	3401      	adds	r4, #1
 80171fe:	9305      	str	r3, [sp, #20]
 8017200:	4619      	mov	r1, r3
 8017202:	f04f 0c0a 	mov.w	ip, #10
 8017206:	4620      	mov	r0, r4
 8017208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801720c:	3a30      	subs	r2, #48	@ 0x30
 801720e:	2a09      	cmp	r2, #9
 8017210:	d903      	bls.n	801721a <_svfiprintf_r+0x1a6>
 8017212:	2b00      	cmp	r3, #0
 8017214:	d0c6      	beq.n	80171a4 <_svfiprintf_r+0x130>
 8017216:	9105      	str	r1, [sp, #20]
 8017218:	e7c4      	b.n	80171a4 <_svfiprintf_r+0x130>
 801721a:	fb0c 2101 	mla	r1, ip, r1, r2
 801721e:	4604      	mov	r4, r0
 8017220:	2301      	movs	r3, #1
 8017222:	e7f0      	b.n	8017206 <_svfiprintf_r+0x192>
 8017224:	ab03      	add	r3, sp, #12
 8017226:	9300      	str	r3, [sp, #0]
 8017228:	462a      	mov	r2, r5
 801722a:	4b0e      	ldr	r3, [pc, #56]	@ (8017264 <_svfiprintf_r+0x1f0>)
 801722c:	a904      	add	r1, sp, #16
 801722e:	4638      	mov	r0, r7
 8017230:	f7fc fcce 	bl	8013bd0 <_printf_float>
 8017234:	1c42      	adds	r2, r0, #1
 8017236:	4606      	mov	r6, r0
 8017238:	d1d6      	bne.n	80171e8 <_svfiprintf_r+0x174>
 801723a:	89ab      	ldrh	r3, [r5, #12]
 801723c:	065b      	lsls	r3, r3, #25
 801723e:	f53f af2d 	bmi.w	801709c <_svfiprintf_r+0x28>
 8017242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017244:	e72c      	b.n	80170a0 <_svfiprintf_r+0x2c>
 8017246:	ab03      	add	r3, sp, #12
 8017248:	9300      	str	r3, [sp, #0]
 801724a:	462a      	mov	r2, r5
 801724c:	4b05      	ldr	r3, [pc, #20]	@ (8017264 <_svfiprintf_r+0x1f0>)
 801724e:	a904      	add	r1, sp, #16
 8017250:	4638      	mov	r0, r7
 8017252:	f7fc ff55 	bl	8014100 <_printf_i>
 8017256:	e7ed      	b.n	8017234 <_svfiprintf_r+0x1c0>
 8017258:	08019549 	.word	0x08019549
 801725c:	08019553 	.word	0x08019553
 8017260:	08013bd1 	.word	0x08013bd1
 8017264:	08016fbd 	.word	0x08016fbd
 8017268:	0801954f 	.word	0x0801954f

0801726c <__sfputc_r>:
 801726c:	6893      	ldr	r3, [r2, #8]
 801726e:	3b01      	subs	r3, #1
 8017270:	2b00      	cmp	r3, #0
 8017272:	b410      	push	{r4}
 8017274:	6093      	str	r3, [r2, #8]
 8017276:	da08      	bge.n	801728a <__sfputc_r+0x1e>
 8017278:	6994      	ldr	r4, [r2, #24]
 801727a:	42a3      	cmp	r3, r4
 801727c:	db01      	blt.n	8017282 <__sfputc_r+0x16>
 801727e:	290a      	cmp	r1, #10
 8017280:	d103      	bne.n	801728a <__sfputc_r+0x1e>
 8017282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017286:	f000 b9df 	b.w	8017648 <__swbuf_r>
 801728a:	6813      	ldr	r3, [r2, #0]
 801728c:	1c58      	adds	r0, r3, #1
 801728e:	6010      	str	r0, [r2, #0]
 8017290:	7019      	strb	r1, [r3, #0]
 8017292:	4608      	mov	r0, r1
 8017294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017298:	4770      	bx	lr

0801729a <__sfputs_r>:
 801729a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801729c:	4606      	mov	r6, r0
 801729e:	460f      	mov	r7, r1
 80172a0:	4614      	mov	r4, r2
 80172a2:	18d5      	adds	r5, r2, r3
 80172a4:	42ac      	cmp	r4, r5
 80172a6:	d101      	bne.n	80172ac <__sfputs_r+0x12>
 80172a8:	2000      	movs	r0, #0
 80172aa:	e007      	b.n	80172bc <__sfputs_r+0x22>
 80172ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b0:	463a      	mov	r2, r7
 80172b2:	4630      	mov	r0, r6
 80172b4:	f7ff ffda 	bl	801726c <__sfputc_r>
 80172b8:	1c43      	adds	r3, r0, #1
 80172ba:	d1f3      	bne.n	80172a4 <__sfputs_r+0xa>
 80172bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172c0 <_vfiprintf_r>:
 80172c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c4:	460d      	mov	r5, r1
 80172c6:	b09d      	sub	sp, #116	@ 0x74
 80172c8:	4614      	mov	r4, r2
 80172ca:	4698      	mov	r8, r3
 80172cc:	4606      	mov	r6, r0
 80172ce:	b118      	cbz	r0, 80172d8 <_vfiprintf_r+0x18>
 80172d0:	6a03      	ldr	r3, [r0, #32]
 80172d2:	b90b      	cbnz	r3, 80172d8 <_vfiprintf_r+0x18>
 80172d4:	f7fd fad4 	bl	8014880 <__sinit>
 80172d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172da:	07d9      	lsls	r1, r3, #31
 80172dc:	d405      	bmi.n	80172ea <_vfiprintf_r+0x2a>
 80172de:	89ab      	ldrh	r3, [r5, #12]
 80172e0:	059a      	lsls	r2, r3, #22
 80172e2:	d402      	bmi.n	80172ea <_vfiprintf_r+0x2a>
 80172e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172e6:	f7fd fc84 	bl	8014bf2 <__retarget_lock_acquire_recursive>
 80172ea:	89ab      	ldrh	r3, [r5, #12]
 80172ec:	071b      	lsls	r3, r3, #28
 80172ee:	d501      	bpl.n	80172f4 <_vfiprintf_r+0x34>
 80172f0:	692b      	ldr	r3, [r5, #16]
 80172f2:	b99b      	cbnz	r3, 801731c <_vfiprintf_r+0x5c>
 80172f4:	4629      	mov	r1, r5
 80172f6:	4630      	mov	r0, r6
 80172f8:	f000 f9e4 	bl	80176c4 <__swsetup_r>
 80172fc:	b170      	cbz	r0, 801731c <_vfiprintf_r+0x5c>
 80172fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017300:	07dc      	lsls	r4, r3, #31
 8017302:	d504      	bpl.n	801730e <_vfiprintf_r+0x4e>
 8017304:	f04f 30ff 	mov.w	r0, #4294967295
 8017308:	b01d      	add	sp, #116	@ 0x74
 801730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801730e:	89ab      	ldrh	r3, [r5, #12]
 8017310:	0598      	lsls	r0, r3, #22
 8017312:	d4f7      	bmi.n	8017304 <_vfiprintf_r+0x44>
 8017314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017316:	f7fd fc6d 	bl	8014bf4 <__retarget_lock_release_recursive>
 801731a:	e7f3      	b.n	8017304 <_vfiprintf_r+0x44>
 801731c:	2300      	movs	r3, #0
 801731e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017320:	2320      	movs	r3, #32
 8017322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017326:	f8cd 800c 	str.w	r8, [sp, #12]
 801732a:	2330      	movs	r3, #48	@ 0x30
 801732c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80174dc <_vfiprintf_r+0x21c>
 8017330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017334:	f04f 0901 	mov.w	r9, #1
 8017338:	4623      	mov	r3, r4
 801733a:	469a      	mov	sl, r3
 801733c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017340:	b10a      	cbz	r2, 8017346 <_vfiprintf_r+0x86>
 8017342:	2a25      	cmp	r2, #37	@ 0x25
 8017344:	d1f9      	bne.n	801733a <_vfiprintf_r+0x7a>
 8017346:	ebba 0b04 	subs.w	fp, sl, r4
 801734a:	d00b      	beq.n	8017364 <_vfiprintf_r+0xa4>
 801734c:	465b      	mov	r3, fp
 801734e:	4622      	mov	r2, r4
 8017350:	4629      	mov	r1, r5
 8017352:	4630      	mov	r0, r6
 8017354:	f7ff ffa1 	bl	801729a <__sfputs_r>
 8017358:	3001      	adds	r0, #1
 801735a:	f000 80a7 	beq.w	80174ac <_vfiprintf_r+0x1ec>
 801735e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017360:	445a      	add	r2, fp
 8017362:	9209      	str	r2, [sp, #36]	@ 0x24
 8017364:	f89a 3000 	ldrb.w	r3, [sl]
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 809f 	beq.w	80174ac <_vfiprintf_r+0x1ec>
 801736e:	2300      	movs	r3, #0
 8017370:	f04f 32ff 	mov.w	r2, #4294967295
 8017374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017378:	f10a 0a01 	add.w	sl, sl, #1
 801737c:	9304      	str	r3, [sp, #16]
 801737e:	9307      	str	r3, [sp, #28]
 8017380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017384:	931a      	str	r3, [sp, #104]	@ 0x68
 8017386:	4654      	mov	r4, sl
 8017388:	2205      	movs	r2, #5
 801738a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801738e:	4853      	ldr	r0, [pc, #332]	@ (80174dc <_vfiprintf_r+0x21c>)
 8017390:	f7e8 ff46 	bl	8000220 <memchr>
 8017394:	9a04      	ldr	r2, [sp, #16]
 8017396:	b9d8      	cbnz	r0, 80173d0 <_vfiprintf_r+0x110>
 8017398:	06d1      	lsls	r1, r2, #27
 801739a:	bf44      	itt	mi
 801739c:	2320      	movmi	r3, #32
 801739e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173a2:	0713      	lsls	r3, r2, #28
 80173a4:	bf44      	itt	mi
 80173a6:	232b      	movmi	r3, #43	@ 0x2b
 80173a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173ac:	f89a 3000 	ldrb.w	r3, [sl]
 80173b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80173b2:	d015      	beq.n	80173e0 <_vfiprintf_r+0x120>
 80173b4:	9a07      	ldr	r2, [sp, #28]
 80173b6:	4654      	mov	r4, sl
 80173b8:	2000      	movs	r0, #0
 80173ba:	f04f 0c0a 	mov.w	ip, #10
 80173be:	4621      	mov	r1, r4
 80173c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173c4:	3b30      	subs	r3, #48	@ 0x30
 80173c6:	2b09      	cmp	r3, #9
 80173c8:	d94b      	bls.n	8017462 <_vfiprintf_r+0x1a2>
 80173ca:	b1b0      	cbz	r0, 80173fa <_vfiprintf_r+0x13a>
 80173cc:	9207      	str	r2, [sp, #28]
 80173ce:	e014      	b.n	80173fa <_vfiprintf_r+0x13a>
 80173d0:	eba0 0308 	sub.w	r3, r0, r8
 80173d4:	fa09 f303 	lsl.w	r3, r9, r3
 80173d8:	4313      	orrs	r3, r2
 80173da:	9304      	str	r3, [sp, #16]
 80173dc:	46a2      	mov	sl, r4
 80173de:	e7d2      	b.n	8017386 <_vfiprintf_r+0xc6>
 80173e0:	9b03      	ldr	r3, [sp, #12]
 80173e2:	1d19      	adds	r1, r3, #4
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	9103      	str	r1, [sp, #12]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	bfbb      	ittet	lt
 80173ec:	425b      	neglt	r3, r3
 80173ee:	f042 0202 	orrlt.w	r2, r2, #2
 80173f2:	9307      	strge	r3, [sp, #28]
 80173f4:	9307      	strlt	r3, [sp, #28]
 80173f6:	bfb8      	it	lt
 80173f8:	9204      	strlt	r2, [sp, #16]
 80173fa:	7823      	ldrb	r3, [r4, #0]
 80173fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80173fe:	d10a      	bne.n	8017416 <_vfiprintf_r+0x156>
 8017400:	7863      	ldrb	r3, [r4, #1]
 8017402:	2b2a      	cmp	r3, #42	@ 0x2a
 8017404:	d132      	bne.n	801746c <_vfiprintf_r+0x1ac>
 8017406:	9b03      	ldr	r3, [sp, #12]
 8017408:	1d1a      	adds	r2, r3, #4
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	9203      	str	r2, [sp, #12]
 801740e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017412:	3402      	adds	r4, #2
 8017414:	9305      	str	r3, [sp, #20]
 8017416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174ec <_vfiprintf_r+0x22c>
 801741a:	7821      	ldrb	r1, [r4, #0]
 801741c:	2203      	movs	r2, #3
 801741e:	4650      	mov	r0, sl
 8017420:	f7e8 fefe 	bl	8000220 <memchr>
 8017424:	b138      	cbz	r0, 8017436 <_vfiprintf_r+0x176>
 8017426:	9b04      	ldr	r3, [sp, #16]
 8017428:	eba0 000a 	sub.w	r0, r0, sl
 801742c:	2240      	movs	r2, #64	@ 0x40
 801742e:	4082      	lsls	r2, r0
 8017430:	4313      	orrs	r3, r2
 8017432:	3401      	adds	r4, #1
 8017434:	9304      	str	r3, [sp, #16]
 8017436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801743a:	4829      	ldr	r0, [pc, #164]	@ (80174e0 <_vfiprintf_r+0x220>)
 801743c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017440:	2206      	movs	r2, #6
 8017442:	f7e8 feed 	bl	8000220 <memchr>
 8017446:	2800      	cmp	r0, #0
 8017448:	d03f      	beq.n	80174ca <_vfiprintf_r+0x20a>
 801744a:	4b26      	ldr	r3, [pc, #152]	@ (80174e4 <_vfiprintf_r+0x224>)
 801744c:	bb1b      	cbnz	r3, 8017496 <_vfiprintf_r+0x1d6>
 801744e:	9b03      	ldr	r3, [sp, #12]
 8017450:	3307      	adds	r3, #7
 8017452:	f023 0307 	bic.w	r3, r3, #7
 8017456:	3308      	adds	r3, #8
 8017458:	9303      	str	r3, [sp, #12]
 801745a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801745c:	443b      	add	r3, r7
 801745e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017460:	e76a      	b.n	8017338 <_vfiprintf_r+0x78>
 8017462:	fb0c 3202 	mla	r2, ip, r2, r3
 8017466:	460c      	mov	r4, r1
 8017468:	2001      	movs	r0, #1
 801746a:	e7a8      	b.n	80173be <_vfiprintf_r+0xfe>
 801746c:	2300      	movs	r3, #0
 801746e:	3401      	adds	r4, #1
 8017470:	9305      	str	r3, [sp, #20]
 8017472:	4619      	mov	r1, r3
 8017474:	f04f 0c0a 	mov.w	ip, #10
 8017478:	4620      	mov	r0, r4
 801747a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801747e:	3a30      	subs	r2, #48	@ 0x30
 8017480:	2a09      	cmp	r2, #9
 8017482:	d903      	bls.n	801748c <_vfiprintf_r+0x1cc>
 8017484:	2b00      	cmp	r3, #0
 8017486:	d0c6      	beq.n	8017416 <_vfiprintf_r+0x156>
 8017488:	9105      	str	r1, [sp, #20]
 801748a:	e7c4      	b.n	8017416 <_vfiprintf_r+0x156>
 801748c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017490:	4604      	mov	r4, r0
 8017492:	2301      	movs	r3, #1
 8017494:	e7f0      	b.n	8017478 <_vfiprintf_r+0x1b8>
 8017496:	ab03      	add	r3, sp, #12
 8017498:	9300      	str	r3, [sp, #0]
 801749a:	462a      	mov	r2, r5
 801749c:	4b12      	ldr	r3, [pc, #72]	@ (80174e8 <_vfiprintf_r+0x228>)
 801749e:	a904      	add	r1, sp, #16
 80174a0:	4630      	mov	r0, r6
 80174a2:	f7fc fb95 	bl	8013bd0 <_printf_float>
 80174a6:	4607      	mov	r7, r0
 80174a8:	1c78      	adds	r0, r7, #1
 80174aa:	d1d6      	bne.n	801745a <_vfiprintf_r+0x19a>
 80174ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174ae:	07d9      	lsls	r1, r3, #31
 80174b0:	d405      	bmi.n	80174be <_vfiprintf_r+0x1fe>
 80174b2:	89ab      	ldrh	r3, [r5, #12]
 80174b4:	059a      	lsls	r2, r3, #22
 80174b6:	d402      	bmi.n	80174be <_vfiprintf_r+0x1fe>
 80174b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174ba:	f7fd fb9b 	bl	8014bf4 <__retarget_lock_release_recursive>
 80174be:	89ab      	ldrh	r3, [r5, #12]
 80174c0:	065b      	lsls	r3, r3, #25
 80174c2:	f53f af1f 	bmi.w	8017304 <_vfiprintf_r+0x44>
 80174c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174c8:	e71e      	b.n	8017308 <_vfiprintf_r+0x48>
 80174ca:	ab03      	add	r3, sp, #12
 80174cc:	9300      	str	r3, [sp, #0]
 80174ce:	462a      	mov	r2, r5
 80174d0:	4b05      	ldr	r3, [pc, #20]	@ (80174e8 <_vfiprintf_r+0x228>)
 80174d2:	a904      	add	r1, sp, #16
 80174d4:	4630      	mov	r0, r6
 80174d6:	f7fc fe13 	bl	8014100 <_printf_i>
 80174da:	e7e4      	b.n	80174a6 <_vfiprintf_r+0x1e6>
 80174dc:	08019549 	.word	0x08019549
 80174e0:	08019553 	.word	0x08019553
 80174e4:	08013bd1 	.word	0x08013bd1
 80174e8:	0801729b 	.word	0x0801729b
 80174ec:	0801954f 	.word	0x0801954f

080174f0 <__sflush_r>:
 80174f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80174f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f8:	0716      	lsls	r6, r2, #28
 80174fa:	4605      	mov	r5, r0
 80174fc:	460c      	mov	r4, r1
 80174fe:	d454      	bmi.n	80175aa <__sflush_r+0xba>
 8017500:	684b      	ldr	r3, [r1, #4]
 8017502:	2b00      	cmp	r3, #0
 8017504:	dc02      	bgt.n	801750c <__sflush_r+0x1c>
 8017506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017508:	2b00      	cmp	r3, #0
 801750a:	dd48      	ble.n	801759e <__sflush_r+0xae>
 801750c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801750e:	2e00      	cmp	r6, #0
 8017510:	d045      	beq.n	801759e <__sflush_r+0xae>
 8017512:	2300      	movs	r3, #0
 8017514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017518:	682f      	ldr	r7, [r5, #0]
 801751a:	6a21      	ldr	r1, [r4, #32]
 801751c:	602b      	str	r3, [r5, #0]
 801751e:	d030      	beq.n	8017582 <__sflush_r+0x92>
 8017520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017522:	89a3      	ldrh	r3, [r4, #12]
 8017524:	0759      	lsls	r1, r3, #29
 8017526:	d505      	bpl.n	8017534 <__sflush_r+0x44>
 8017528:	6863      	ldr	r3, [r4, #4]
 801752a:	1ad2      	subs	r2, r2, r3
 801752c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801752e:	b10b      	cbz	r3, 8017534 <__sflush_r+0x44>
 8017530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017532:	1ad2      	subs	r2, r2, r3
 8017534:	2300      	movs	r3, #0
 8017536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017538:	6a21      	ldr	r1, [r4, #32]
 801753a:	4628      	mov	r0, r5
 801753c:	47b0      	blx	r6
 801753e:	1c43      	adds	r3, r0, #1
 8017540:	89a3      	ldrh	r3, [r4, #12]
 8017542:	d106      	bne.n	8017552 <__sflush_r+0x62>
 8017544:	6829      	ldr	r1, [r5, #0]
 8017546:	291d      	cmp	r1, #29
 8017548:	d82b      	bhi.n	80175a2 <__sflush_r+0xb2>
 801754a:	4a2a      	ldr	r2, [pc, #168]	@ (80175f4 <__sflush_r+0x104>)
 801754c:	410a      	asrs	r2, r1
 801754e:	07d6      	lsls	r6, r2, #31
 8017550:	d427      	bmi.n	80175a2 <__sflush_r+0xb2>
 8017552:	2200      	movs	r2, #0
 8017554:	6062      	str	r2, [r4, #4]
 8017556:	04d9      	lsls	r1, r3, #19
 8017558:	6922      	ldr	r2, [r4, #16]
 801755a:	6022      	str	r2, [r4, #0]
 801755c:	d504      	bpl.n	8017568 <__sflush_r+0x78>
 801755e:	1c42      	adds	r2, r0, #1
 8017560:	d101      	bne.n	8017566 <__sflush_r+0x76>
 8017562:	682b      	ldr	r3, [r5, #0]
 8017564:	b903      	cbnz	r3, 8017568 <__sflush_r+0x78>
 8017566:	6560      	str	r0, [r4, #84]	@ 0x54
 8017568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801756a:	602f      	str	r7, [r5, #0]
 801756c:	b1b9      	cbz	r1, 801759e <__sflush_r+0xae>
 801756e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017572:	4299      	cmp	r1, r3
 8017574:	d002      	beq.n	801757c <__sflush_r+0x8c>
 8017576:	4628      	mov	r0, r5
 8017578:	f7fe f99e 	bl	80158b8 <_free_r>
 801757c:	2300      	movs	r3, #0
 801757e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017580:	e00d      	b.n	801759e <__sflush_r+0xae>
 8017582:	2301      	movs	r3, #1
 8017584:	4628      	mov	r0, r5
 8017586:	47b0      	blx	r6
 8017588:	4602      	mov	r2, r0
 801758a:	1c50      	adds	r0, r2, #1
 801758c:	d1c9      	bne.n	8017522 <__sflush_r+0x32>
 801758e:	682b      	ldr	r3, [r5, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d0c6      	beq.n	8017522 <__sflush_r+0x32>
 8017594:	2b1d      	cmp	r3, #29
 8017596:	d001      	beq.n	801759c <__sflush_r+0xac>
 8017598:	2b16      	cmp	r3, #22
 801759a:	d11e      	bne.n	80175da <__sflush_r+0xea>
 801759c:	602f      	str	r7, [r5, #0]
 801759e:	2000      	movs	r0, #0
 80175a0:	e022      	b.n	80175e8 <__sflush_r+0xf8>
 80175a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175a6:	b21b      	sxth	r3, r3
 80175a8:	e01b      	b.n	80175e2 <__sflush_r+0xf2>
 80175aa:	690f      	ldr	r7, [r1, #16]
 80175ac:	2f00      	cmp	r7, #0
 80175ae:	d0f6      	beq.n	801759e <__sflush_r+0xae>
 80175b0:	0793      	lsls	r3, r2, #30
 80175b2:	680e      	ldr	r6, [r1, #0]
 80175b4:	bf08      	it	eq
 80175b6:	694b      	ldreq	r3, [r1, #20]
 80175b8:	600f      	str	r7, [r1, #0]
 80175ba:	bf18      	it	ne
 80175bc:	2300      	movne	r3, #0
 80175be:	eba6 0807 	sub.w	r8, r6, r7
 80175c2:	608b      	str	r3, [r1, #8]
 80175c4:	f1b8 0f00 	cmp.w	r8, #0
 80175c8:	dde9      	ble.n	801759e <__sflush_r+0xae>
 80175ca:	6a21      	ldr	r1, [r4, #32]
 80175cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80175ce:	4643      	mov	r3, r8
 80175d0:	463a      	mov	r2, r7
 80175d2:	4628      	mov	r0, r5
 80175d4:	47b0      	blx	r6
 80175d6:	2800      	cmp	r0, #0
 80175d8:	dc08      	bgt.n	80175ec <__sflush_r+0xfc>
 80175da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175e2:	81a3      	strh	r3, [r4, #12]
 80175e4:	f04f 30ff 	mov.w	r0, #4294967295
 80175e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ec:	4407      	add	r7, r0
 80175ee:	eba8 0800 	sub.w	r8, r8, r0
 80175f2:	e7e7      	b.n	80175c4 <__sflush_r+0xd4>
 80175f4:	dfbffffe 	.word	0xdfbffffe

080175f8 <_fflush_r>:
 80175f8:	b538      	push	{r3, r4, r5, lr}
 80175fa:	690b      	ldr	r3, [r1, #16]
 80175fc:	4605      	mov	r5, r0
 80175fe:	460c      	mov	r4, r1
 8017600:	b913      	cbnz	r3, 8017608 <_fflush_r+0x10>
 8017602:	2500      	movs	r5, #0
 8017604:	4628      	mov	r0, r5
 8017606:	bd38      	pop	{r3, r4, r5, pc}
 8017608:	b118      	cbz	r0, 8017612 <_fflush_r+0x1a>
 801760a:	6a03      	ldr	r3, [r0, #32]
 801760c:	b90b      	cbnz	r3, 8017612 <_fflush_r+0x1a>
 801760e:	f7fd f937 	bl	8014880 <__sinit>
 8017612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d0f3      	beq.n	8017602 <_fflush_r+0xa>
 801761a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801761c:	07d0      	lsls	r0, r2, #31
 801761e:	d404      	bmi.n	801762a <_fflush_r+0x32>
 8017620:	0599      	lsls	r1, r3, #22
 8017622:	d402      	bmi.n	801762a <_fflush_r+0x32>
 8017624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017626:	f7fd fae4 	bl	8014bf2 <__retarget_lock_acquire_recursive>
 801762a:	4628      	mov	r0, r5
 801762c:	4621      	mov	r1, r4
 801762e:	f7ff ff5f 	bl	80174f0 <__sflush_r>
 8017632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017634:	07da      	lsls	r2, r3, #31
 8017636:	4605      	mov	r5, r0
 8017638:	d4e4      	bmi.n	8017604 <_fflush_r+0xc>
 801763a:	89a3      	ldrh	r3, [r4, #12]
 801763c:	059b      	lsls	r3, r3, #22
 801763e:	d4e1      	bmi.n	8017604 <_fflush_r+0xc>
 8017640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017642:	f7fd fad7 	bl	8014bf4 <__retarget_lock_release_recursive>
 8017646:	e7dd      	b.n	8017604 <_fflush_r+0xc>

08017648 <__swbuf_r>:
 8017648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801764a:	460e      	mov	r6, r1
 801764c:	4614      	mov	r4, r2
 801764e:	4605      	mov	r5, r0
 8017650:	b118      	cbz	r0, 801765a <__swbuf_r+0x12>
 8017652:	6a03      	ldr	r3, [r0, #32]
 8017654:	b90b      	cbnz	r3, 801765a <__swbuf_r+0x12>
 8017656:	f7fd f913 	bl	8014880 <__sinit>
 801765a:	69a3      	ldr	r3, [r4, #24]
 801765c:	60a3      	str	r3, [r4, #8]
 801765e:	89a3      	ldrh	r3, [r4, #12]
 8017660:	071a      	lsls	r2, r3, #28
 8017662:	d501      	bpl.n	8017668 <__swbuf_r+0x20>
 8017664:	6923      	ldr	r3, [r4, #16]
 8017666:	b943      	cbnz	r3, 801767a <__swbuf_r+0x32>
 8017668:	4621      	mov	r1, r4
 801766a:	4628      	mov	r0, r5
 801766c:	f000 f82a 	bl	80176c4 <__swsetup_r>
 8017670:	b118      	cbz	r0, 801767a <__swbuf_r+0x32>
 8017672:	f04f 37ff 	mov.w	r7, #4294967295
 8017676:	4638      	mov	r0, r7
 8017678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801767a:	6823      	ldr	r3, [r4, #0]
 801767c:	6922      	ldr	r2, [r4, #16]
 801767e:	1a98      	subs	r0, r3, r2
 8017680:	6963      	ldr	r3, [r4, #20]
 8017682:	b2f6      	uxtb	r6, r6
 8017684:	4283      	cmp	r3, r0
 8017686:	4637      	mov	r7, r6
 8017688:	dc05      	bgt.n	8017696 <__swbuf_r+0x4e>
 801768a:	4621      	mov	r1, r4
 801768c:	4628      	mov	r0, r5
 801768e:	f7ff ffb3 	bl	80175f8 <_fflush_r>
 8017692:	2800      	cmp	r0, #0
 8017694:	d1ed      	bne.n	8017672 <__swbuf_r+0x2a>
 8017696:	68a3      	ldr	r3, [r4, #8]
 8017698:	3b01      	subs	r3, #1
 801769a:	60a3      	str	r3, [r4, #8]
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	1c5a      	adds	r2, r3, #1
 80176a0:	6022      	str	r2, [r4, #0]
 80176a2:	701e      	strb	r6, [r3, #0]
 80176a4:	6962      	ldr	r2, [r4, #20]
 80176a6:	1c43      	adds	r3, r0, #1
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d004      	beq.n	80176b6 <__swbuf_r+0x6e>
 80176ac:	89a3      	ldrh	r3, [r4, #12]
 80176ae:	07db      	lsls	r3, r3, #31
 80176b0:	d5e1      	bpl.n	8017676 <__swbuf_r+0x2e>
 80176b2:	2e0a      	cmp	r6, #10
 80176b4:	d1df      	bne.n	8017676 <__swbuf_r+0x2e>
 80176b6:	4621      	mov	r1, r4
 80176b8:	4628      	mov	r0, r5
 80176ba:	f7ff ff9d 	bl	80175f8 <_fflush_r>
 80176be:	2800      	cmp	r0, #0
 80176c0:	d0d9      	beq.n	8017676 <__swbuf_r+0x2e>
 80176c2:	e7d6      	b.n	8017672 <__swbuf_r+0x2a>

080176c4 <__swsetup_r>:
 80176c4:	b538      	push	{r3, r4, r5, lr}
 80176c6:	4b29      	ldr	r3, [pc, #164]	@ (801776c <__swsetup_r+0xa8>)
 80176c8:	4605      	mov	r5, r0
 80176ca:	6818      	ldr	r0, [r3, #0]
 80176cc:	460c      	mov	r4, r1
 80176ce:	b118      	cbz	r0, 80176d8 <__swsetup_r+0x14>
 80176d0:	6a03      	ldr	r3, [r0, #32]
 80176d2:	b90b      	cbnz	r3, 80176d8 <__swsetup_r+0x14>
 80176d4:	f7fd f8d4 	bl	8014880 <__sinit>
 80176d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176dc:	0719      	lsls	r1, r3, #28
 80176de:	d422      	bmi.n	8017726 <__swsetup_r+0x62>
 80176e0:	06da      	lsls	r2, r3, #27
 80176e2:	d407      	bmi.n	80176f4 <__swsetup_r+0x30>
 80176e4:	2209      	movs	r2, #9
 80176e6:	602a      	str	r2, [r5, #0]
 80176e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176ec:	81a3      	strh	r3, [r4, #12]
 80176ee:	f04f 30ff 	mov.w	r0, #4294967295
 80176f2:	e033      	b.n	801775c <__swsetup_r+0x98>
 80176f4:	0758      	lsls	r0, r3, #29
 80176f6:	d512      	bpl.n	801771e <__swsetup_r+0x5a>
 80176f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176fa:	b141      	cbz	r1, 801770e <__swsetup_r+0x4a>
 80176fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017700:	4299      	cmp	r1, r3
 8017702:	d002      	beq.n	801770a <__swsetup_r+0x46>
 8017704:	4628      	mov	r0, r5
 8017706:	f7fe f8d7 	bl	80158b8 <_free_r>
 801770a:	2300      	movs	r3, #0
 801770c:	6363      	str	r3, [r4, #52]	@ 0x34
 801770e:	89a3      	ldrh	r3, [r4, #12]
 8017710:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017714:	81a3      	strh	r3, [r4, #12]
 8017716:	2300      	movs	r3, #0
 8017718:	6063      	str	r3, [r4, #4]
 801771a:	6923      	ldr	r3, [r4, #16]
 801771c:	6023      	str	r3, [r4, #0]
 801771e:	89a3      	ldrh	r3, [r4, #12]
 8017720:	f043 0308 	orr.w	r3, r3, #8
 8017724:	81a3      	strh	r3, [r4, #12]
 8017726:	6923      	ldr	r3, [r4, #16]
 8017728:	b94b      	cbnz	r3, 801773e <__swsetup_r+0x7a>
 801772a:	89a3      	ldrh	r3, [r4, #12]
 801772c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017734:	d003      	beq.n	801773e <__swsetup_r+0x7a>
 8017736:	4621      	mov	r1, r4
 8017738:	4628      	mov	r0, r5
 801773a:	f000 fbf5 	bl	8017f28 <__smakebuf_r>
 801773e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017742:	f013 0201 	ands.w	r2, r3, #1
 8017746:	d00a      	beq.n	801775e <__swsetup_r+0x9a>
 8017748:	2200      	movs	r2, #0
 801774a:	60a2      	str	r2, [r4, #8]
 801774c:	6962      	ldr	r2, [r4, #20]
 801774e:	4252      	negs	r2, r2
 8017750:	61a2      	str	r2, [r4, #24]
 8017752:	6922      	ldr	r2, [r4, #16]
 8017754:	b942      	cbnz	r2, 8017768 <__swsetup_r+0xa4>
 8017756:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801775a:	d1c5      	bne.n	80176e8 <__swsetup_r+0x24>
 801775c:	bd38      	pop	{r3, r4, r5, pc}
 801775e:	0799      	lsls	r1, r3, #30
 8017760:	bf58      	it	pl
 8017762:	6962      	ldrpl	r2, [r4, #20]
 8017764:	60a2      	str	r2, [r4, #8]
 8017766:	e7f4      	b.n	8017752 <__swsetup_r+0x8e>
 8017768:	2000      	movs	r0, #0
 801776a:	e7f7      	b.n	801775c <__swsetup_r+0x98>
 801776c:	20000090 	.word	0x20000090

08017770 <strncmp>:
 8017770:	b510      	push	{r4, lr}
 8017772:	b16a      	cbz	r2, 8017790 <strncmp+0x20>
 8017774:	3901      	subs	r1, #1
 8017776:	1884      	adds	r4, r0, r2
 8017778:	f810 2b01 	ldrb.w	r2, [r0], #1
 801777c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017780:	429a      	cmp	r2, r3
 8017782:	d103      	bne.n	801778c <strncmp+0x1c>
 8017784:	42a0      	cmp	r0, r4
 8017786:	d001      	beq.n	801778c <strncmp+0x1c>
 8017788:	2a00      	cmp	r2, #0
 801778a:	d1f5      	bne.n	8017778 <strncmp+0x8>
 801778c:	1ad0      	subs	r0, r2, r3
 801778e:	bd10      	pop	{r4, pc}
 8017790:	4610      	mov	r0, r2
 8017792:	e7fc      	b.n	801778e <strncmp+0x1e>
 8017794:	0000      	movs	r0, r0
	...

08017798 <nan>:
 8017798:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80177a0 <nan+0x8>
 801779c:	4770      	bx	lr
 801779e:	bf00      	nop
 80177a0:	00000000 	.word	0x00000000
 80177a4:	7ff80000 	.word	0x7ff80000

080177a8 <_calloc_r>:
 80177a8:	b570      	push	{r4, r5, r6, lr}
 80177aa:	fba1 5402 	umull	r5, r4, r1, r2
 80177ae:	b93c      	cbnz	r4, 80177c0 <_calloc_r+0x18>
 80177b0:	4629      	mov	r1, r5
 80177b2:	f7fc f8e1 	bl	8013978 <_malloc_r>
 80177b6:	4606      	mov	r6, r0
 80177b8:	b928      	cbnz	r0, 80177c6 <_calloc_r+0x1e>
 80177ba:	2600      	movs	r6, #0
 80177bc:	4630      	mov	r0, r6
 80177be:	bd70      	pop	{r4, r5, r6, pc}
 80177c0:	220c      	movs	r2, #12
 80177c2:	6002      	str	r2, [r0, #0]
 80177c4:	e7f9      	b.n	80177ba <_calloc_r+0x12>
 80177c6:	462a      	mov	r2, r5
 80177c8:	4621      	mov	r1, r4
 80177ca:	f7fd f92e 	bl	8014a2a <memset>
 80177ce:	e7f5      	b.n	80177bc <_calloc_r+0x14>

080177d0 <rshift>:
 80177d0:	6903      	ldr	r3, [r0, #16]
 80177d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80177d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80177de:	f100 0414 	add.w	r4, r0, #20
 80177e2:	dd45      	ble.n	8017870 <rshift+0xa0>
 80177e4:	f011 011f 	ands.w	r1, r1, #31
 80177e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80177ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80177f0:	d10c      	bne.n	801780c <rshift+0x3c>
 80177f2:	f100 0710 	add.w	r7, r0, #16
 80177f6:	4629      	mov	r1, r5
 80177f8:	42b1      	cmp	r1, r6
 80177fa:	d334      	bcc.n	8017866 <rshift+0x96>
 80177fc:	1a9b      	subs	r3, r3, r2
 80177fe:	009b      	lsls	r3, r3, #2
 8017800:	1eea      	subs	r2, r5, #3
 8017802:	4296      	cmp	r6, r2
 8017804:	bf38      	it	cc
 8017806:	2300      	movcc	r3, #0
 8017808:	4423      	add	r3, r4
 801780a:	e015      	b.n	8017838 <rshift+0x68>
 801780c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017810:	f1c1 0820 	rsb	r8, r1, #32
 8017814:	40cf      	lsrs	r7, r1
 8017816:	f105 0e04 	add.w	lr, r5, #4
 801781a:	46a1      	mov	r9, r4
 801781c:	4576      	cmp	r6, lr
 801781e:	46f4      	mov	ip, lr
 8017820:	d815      	bhi.n	801784e <rshift+0x7e>
 8017822:	1a9a      	subs	r2, r3, r2
 8017824:	0092      	lsls	r2, r2, #2
 8017826:	3a04      	subs	r2, #4
 8017828:	3501      	adds	r5, #1
 801782a:	42ae      	cmp	r6, r5
 801782c:	bf38      	it	cc
 801782e:	2200      	movcc	r2, #0
 8017830:	18a3      	adds	r3, r4, r2
 8017832:	50a7      	str	r7, [r4, r2]
 8017834:	b107      	cbz	r7, 8017838 <rshift+0x68>
 8017836:	3304      	adds	r3, #4
 8017838:	1b1a      	subs	r2, r3, r4
 801783a:	42a3      	cmp	r3, r4
 801783c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017840:	bf08      	it	eq
 8017842:	2300      	moveq	r3, #0
 8017844:	6102      	str	r2, [r0, #16]
 8017846:	bf08      	it	eq
 8017848:	6143      	streq	r3, [r0, #20]
 801784a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801784e:	f8dc c000 	ldr.w	ip, [ip]
 8017852:	fa0c fc08 	lsl.w	ip, ip, r8
 8017856:	ea4c 0707 	orr.w	r7, ip, r7
 801785a:	f849 7b04 	str.w	r7, [r9], #4
 801785e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017862:	40cf      	lsrs	r7, r1
 8017864:	e7da      	b.n	801781c <rshift+0x4c>
 8017866:	f851 cb04 	ldr.w	ip, [r1], #4
 801786a:	f847 cf04 	str.w	ip, [r7, #4]!
 801786e:	e7c3      	b.n	80177f8 <rshift+0x28>
 8017870:	4623      	mov	r3, r4
 8017872:	e7e1      	b.n	8017838 <rshift+0x68>

08017874 <__hexdig_fun>:
 8017874:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017878:	2b09      	cmp	r3, #9
 801787a:	d802      	bhi.n	8017882 <__hexdig_fun+0xe>
 801787c:	3820      	subs	r0, #32
 801787e:	b2c0      	uxtb	r0, r0
 8017880:	4770      	bx	lr
 8017882:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017886:	2b05      	cmp	r3, #5
 8017888:	d801      	bhi.n	801788e <__hexdig_fun+0x1a>
 801788a:	3847      	subs	r0, #71	@ 0x47
 801788c:	e7f7      	b.n	801787e <__hexdig_fun+0xa>
 801788e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017892:	2b05      	cmp	r3, #5
 8017894:	d801      	bhi.n	801789a <__hexdig_fun+0x26>
 8017896:	3827      	subs	r0, #39	@ 0x27
 8017898:	e7f1      	b.n	801787e <__hexdig_fun+0xa>
 801789a:	2000      	movs	r0, #0
 801789c:	4770      	bx	lr
	...

080178a0 <__gethex>:
 80178a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a4:	b085      	sub	sp, #20
 80178a6:	468a      	mov	sl, r1
 80178a8:	9302      	str	r3, [sp, #8]
 80178aa:	680b      	ldr	r3, [r1, #0]
 80178ac:	9001      	str	r0, [sp, #4]
 80178ae:	4690      	mov	r8, r2
 80178b0:	1c9c      	adds	r4, r3, #2
 80178b2:	46a1      	mov	r9, r4
 80178b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80178b8:	2830      	cmp	r0, #48	@ 0x30
 80178ba:	d0fa      	beq.n	80178b2 <__gethex+0x12>
 80178bc:	eba9 0303 	sub.w	r3, r9, r3
 80178c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80178c4:	f7ff ffd6 	bl	8017874 <__hexdig_fun>
 80178c8:	4605      	mov	r5, r0
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d168      	bne.n	80179a0 <__gethex+0x100>
 80178ce:	49a0      	ldr	r1, [pc, #640]	@ (8017b50 <__gethex+0x2b0>)
 80178d0:	2201      	movs	r2, #1
 80178d2:	4648      	mov	r0, r9
 80178d4:	f7ff ff4c 	bl	8017770 <strncmp>
 80178d8:	4607      	mov	r7, r0
 80178da:	2800      	cmp	r0, #0
 80178dc:	d167      	bne.n	80179ae <__gethex+0x10e>
 80178de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80178e2:	4626      	mov	r6, r4
 80178e4:	f7ff ffc6 	bl	8017874 <__hexdig_fun>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d062      	beq.n	80179b2 <__gethex+0x112>
 80178ec:	4623      	mov	r3, r4
 80178ee:	7818      	ldrb	r0, [r3, #0]
 80178f0:	2830      	cmp	r0, #48	@ 0x30
 80178f2:	4699      	mov	r9, r3
 80178f4:	f103 0301 	add.w	r3, r3, #1
 80178f8:	d0f9      	beq.n	80178ee <__gethex+0x4e>
 80178fa:	f7ff ffbb 	bl	8017874 <__hexdig_fun>
 80178fe:	fab0 f580 	clz	r5, r0
 8017902:	096d      	lsrs	r5, r5, #5
 8017904:	f04f 0b01 	mov.w	fp, #1
 8017908:	464a      	mov	r2, r9
 801790a:	4616      	mov	r6, r2
 801790c:	3201      	adds	r2, #1
 801790e:	7830      	ldrb	r0, [r6, #0]
 8017910:	f7ff ffb0 	bl	8017874 <__hexdig_fun>
 8017914:	2800      	cmp	r0, #0
 8017916:	d1f8      	bne.n	801790a <__gethex+0x6a>
 8017918:	498d      	ldr	r1, [pc, #564]	@ (8017b50 <__gethex+0x2b0>)
 801791a:	2201      	movs	r2, #1
 801791c:	4630      	mov	r0, r6
 801791e:	f7ff ff27 	bl	8017770 <strncmp>
 8017922:	2800      	cmp	r0, #0
 8017924:	d13f      	bne.n	80179a6 <__gethex+0x106>
 8017926:	b944      	cbnz	r4, 801793a <__gethex+0x9a>
 8017928:	1c74      	adds	r4, r6, #1
 801792a:	4622      	mov	r2, r4
 801792c:	4616      	mov	r6, r2
 801792e:	3201      	adds	r2, #1
 8017930:	7830      	ldrb	r0, [r6, #0]
 8017932:	f7ff ff9f 	bl	8017874 <__hexdig_fun>
 8017936:	2800      	cmp	r0, #0
 8017938:	d1f8      	bne.n	801792c <__gethex+0x8c>
 801793a:	1ba4      	subs	r4, r4, r6
 801793c:	00a7      	lsls	r7, r4, #2
 801793e:	7833      	ldrb	r3, [r6, #0]
 8017940:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017944:	2b50      	cmp	r3, #80	@ 0x50
 8017946:	d13e      	bne.n	80179c6 <__gethex+0x126>
 8017948:	7873      	ldrb	r3, [r6, #1]
 801794a:	2b2b      	cmp	r3, #43	@ 0x2b
 801794c:	d033      	beq.n	80179b6 <__gethex+0x116>
 801794e:	2b2d      	cmp	r3, #45	@ 0x2d
 8017950:	d034      	beq.n	80179bc <__gethex+0x11c>
 8017952:	1c71      	adds	r1, r6, #1
 8017954:	2400      	movs	r4, #0
 8017956:	7808      	ldrb	r0, [r1, #0]
 8017958:	f7ff ff8c 	bl	8017874 <__hexdig_fun>
 801795c:	1e43      	subs	r3, r0, #1
 801795e:	b2db      	uxtb	r3, r3
 8017960:	2b18      	cmp	r3, #24
 8017962:	d830      	bhi.n	80179c6 <__gethex+0x126>
 8017964:	f1a0 0210 	sub.w	r2, r0, #16
 8017968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801796c:	f7ff ff82 	bl	8017874 <__hexdig_fun>
 8017970:	f100 3cff 	add.w	ip, r0, #4294967295
 8017974:	fa5f fc8c 	uxtb.w	ip, ip
 8017978:	f1bc 0f18 	cmp.w	ip, #24
 801797c:	f04f 030a 	mov.w	r3, #10
 8017980:	d91e      	bls.n	80179c0 <__gethex+0x120>
 8017982:	b104      	cbz	r4, 8017986 <__gethex+0xe6>
 8017984:	4252      	negs	r2, r2
 8017986:	4417      	add	r7, r2
 8017988:	f8ca 1000 	str.w	r1, [sl]
 801798c:	b1ed      	cbz	r5, 80179ca <__gethex+0x12a>
 801798e:	f1bb 0f00 	cmp.w	fp, #0
 8017992:	bf0c      	ite	eq
 8017994:	2506      	moveq	r5, #6
 8017996:	2500      	movne	r5, #0
 8017998:	4628      	mov	r0, r5
 801799a:	b005      	add	sp, #20
 801799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a0:	2500      	movs	r5, #0
 80179a2:	462c      	mov	r4, r5
 80179a4:	e7b0      	b.n	8017908 <__gethex+0x68>
 80179a6:	2c00      	cmp	r4, #0
 80179a8:	d1c7      	bne.n	801793a <__gethex+0x9a>
 80179aa:	4627      	mov	r7, r4
 80179ac:	e7c7      	b.n	801793e <__gethex+0x9e>
 80179ae:	464e      	mov	r6, r9
 80179b0:	462f      	mov	r7, r5
 80179b2:	2501      	movs	r5, #1
 80179b4:	e7c3      	b.n	801793e <__gethex+0x9e>
 80179b6:	2400      	movs	r4, #0
 80179b8:	1cb1      	adds	r1, r6, #2
 80179ba:	e7cc      	b.n	8017956 <__gethex+0xb6>
 80179bc:	2401      	movs	r4, #1
 80179be:	e7fb      	b.n	80179b8 <__gethex+0x118>
 80179c0:	fb03 0002 	mla	r0, r3, r2, r0
 80179c4:	e7ce      	b.n	8017964 <__gethex+0xc4>
 80179c6:	4631      	mov	r1, r6
 80179c8:	e7de      	b.n	8017988 <__gethex+0xe8>
 80179ca:	eba6 0309 	sub.w	r3, r6, r9
 80179ce:	3b01      	subs	r3, #1
 80179d0:	4629      	mov	r1, r5
 80179d2:	2b07      	cmp	r3, #7
 80179d4:	dc0a      	bgt.n	80179ec <__gethex+0x14c>
 80179d6:	9801      	ldr	r0, [sp, #4]
 80179d8:	f7fd ffb8 	bl	801594c <_Balloc>
 80179dc:	4604      	mov	r4, r0
 80179de:	b940      	cbnz	r0, 80179f2 <__gethex+0x152>
 80179e0:	4b5c      	ldr	r3, [pc, #368]	@ (8017b54 <__gethex+0x2b4>)
 80179e2:	4602      	mov	r2, r0
 80179e4:	21e4      	movs	r1, #228	@ 0xe4
 80179e6:	485c      	ldr	r0, [pc, #368]	@ (8017b58 <__gethex+0x2b8>)
 80179e8:	f7fb ff64 	bl	80138b4 <__assert_func>
 80179ec:	3101      	adds	r1, #1
 80179ee:	105b      	asrs	r3, r3, #1
 80179f0:	e7ef      	b.n	80179d2 <__gethex+0x132>
 80179f2:	f100 0a14 	add.w	sl, r0, #20
 80179f6:	2300      	movs	r3, #0
 80179f8:	4655      	mov	r5, sl
 80179fa:	469b      	mov	fp, r3
 80179fc:	45b1      	cmp	r9, r6
 80179fe:	d337      	bcc.n	8017a70 <__gethex+0x1d0>
 8017a00:	f845 bb04 	str.w	fp, [r5], #4
 8017a04:	eba5 050a 	sub.w	r5, r5, sl
 8017a08:	10ad      	asrs	r5, r5, #2
 8017a0a:	6125      	str	r5, [r4, #16]
 8017a0c:	4658      	mov	r0, fp
 8017a0e:	f7fe f88f 	bl	8015b30 <__hi0bits>
 8017a12:	016d      	lsls	r5, r5, #5
 8017a14:	f8d8 6000 	ldr.w	r6, [r8]
 8017a18:	1a2d      	subs	r5, r5, r0
 8017a1a:	42b5      	cmp	r5, r6
 8017a1c:	dd54      	ble.n	8017ac8 <__gethex+0x228>
 8017a1e:	1bad      	subs	r5, r5, r6
 8017a20:	4629      	mov	r1, r5
 8017a22:	4620      	mov	r0, r4
 8017a24:	f7fe fc23 	bl	801626e <__any_on>
 8017a28:	4681      	mov	r9, r0
 8017a2a:	b178      	cbz	r0, 8017a4c <__gethex+0x1ac>
 8017a2c:	1e6b      	subs	r3, r5, #1
 8017a2e:	1159      	asrs	r1, r3, #5
 8017a30:	f003 021f 	and.w	r2, r3, #31
 8017a34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017a38:	f04f 0901 	mov.w	r9, #1
 8017a3c:	fa09 f202 	lsl.w	r2, r9, r2
 8017a40:	420a      	tst	r2, r1
 8017a42:	d003      	beq.n	8017a4c <__gethex+0x1ac>
 8017a44:	454b      	cmp	r3, r9
 8017a46:	dc36      	bgt.n	8017ab6 <__gethex+0x216>
 8017a48:	f04f 0902 	mov.w	r9, #2
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	4620      	mov	r0, r4
 8017a50:	f7ff febe 	bl	80177d0 <rshift>
 8017a54:	442f      	add	r7, r5
 8017a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a5a:	42bb      	cmp	r3, r7
 8017a5c:	da42      	bge.n	8017ae4 <__gethex+0x244>
 8017a5e:	9801      	ldr	r0, [sp, #4]
 8017a60:	4621      	mov	r1, r4
 8017a62:	f7fd ffb3 	bl	80159cc <_Bfree>
 8017a66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a68:	2300      	movs	r3, #0
 8017a6a:	6013      	str	r3, [r2, #0]
 8017a6c:	25a3      	movs	r5, #163	@ 0xa3
 8017a6e:	e793      	b.n	8017998 <__gethex+0xf8>
 8017a70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017a74:	2a2e      	cmp	r2, #46	@ 0x2e
 8017a76:	d012      	beq.n	8017a9e <__gethex+0x1fe>
 8017a78:	2b20      	cmp	r3, #32
 8017a7a:	d104      	bne.n	8017a86 <__gethex+0x1e6>
 8017a7c:	f845 bb04 	str.w	fp, [r5], #4
 8017a80:	f04f 0b00 	mov.w	fp, #0
 8017a84:	465b      	mov	r3, fp
 8017a86:	7830      	ldrb	r0, [r6, #0]
 8017a88:	9303      	str	r3, [sp, #12]
 8017a8a:	f7ff fef3 	bl	8017874 <__hexdig_fun>
 8017a8e:	9b03      	ldr	r3, [sp, #12]
 8017a90:	f000 000f 	and.w	r0, r0, #15
 8017a94:	4098      	lsls	r0, r3
 8017a96:	ea4b 0b00 	orr.w	fp, fp, r0
 8017a9a:	3304      	adds	r3, #4
 8017a9c:	e7ae      	b.n	80179fc <__gethex+0x15c>
 8017a9e:	45b1      	cmp	r9, r6
 8017aa0:	d8ea      	bhi.n	8017a78 <__gethex+0x1d8>
 8017aa2:	492b      	ldr	r1, [pc, #172]	@ (8017b50 <__gethex+0x2b0>)
 8017aa4:	9303      	str	r3, [sp, #12]
 8017aa6:	2201      	movs	r2, #1
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	f7ff fe61 	bl	8017770 <strncmp>
 8017aae:	9b03      	ldr	r3, [sp, #12]
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d1e1      	bne.n	8017a78 <__gethex+0x1d8>
 8017ab4:	e7a2      	b.n	80179fc <__gethex+0x15c>
 8017ab6:	1ea9      	subs	r1, r5, #2
 8017ab8:	4620      	mov	r0, r4
 8017aba:	f7fe fbd8 	bl	801626e <__any_on>
 8017abe:	2800      	cmp	r0, #0
 8017ac0:	d0c2      	beq.n	8017a48 <__gethex+0x1a8>
 8017ac2:	f04f 0903 	mov.w	r9, #3
 8017ac6:	e7c1      	b.n	8017a4c <__gethex+0x1ac>
 8017ac8:	da09      	bge.n	8017ade <__gethex+0x23e>
 8017aca:	1b75      	subs	r5, r6, r5
 8017acc:	4621      	mov	r1, r4
 8017ace:	9801      	ldr	r0, [sp, #4]
 8017ad0:	462a      	mov	r2, r5
 8017ad2:	f7fe f993 	bl	8015dfc <__lshift>
 8017ad6:	1b7f      	subs	r7, r7, r5
 8017ad8:	4604      	mov	r4, r0
 8017ada:	f100 0a14 	add.w	sl, r0, #20
 8017ade:	f04f 0900 	mov.w	r9, #0
 8017ae2:	e7b8      	b.n	8017a56 <__gethex+0x1b6>
 8017ae4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ae8:	42bd      	cmp	r5, r7
 8017aea:	dd6f      	ble.n	8017bcc <__gethex+0x32c>
 8017aec:	1bed      	subs	r5, r5, r7
 8017aee:	42ae      	cmp	r6, r5
 8017af0:	dc34      	bgt.n	8017b5c <__gethex+0x2bc>
 8017af2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017af6:	2b02      	cmp	r3, #2
 8017af8:	d022      	beq.n	8017b40 <__gethex+0x2a0>
 8017afa:	2b03      	cmp	r3, #3
 8017afc:	d024      	beq.n	8017b48 <__gethex+0x2a8>
 8017afe:	2b01      	cmp	r3, #1
 8017b00:	d115      	bne.n	8017b2e <__gethex+0x28e>
 8017b02:	42ae      	cmp	r6, r5
 8017b04:	d113      	bne.n	8017b2e <__gethex+0x28e>
 8017b06:	2e01      	cmp	r6, #1
 8017b08:	d10b      	bne.n	8017b22 <__gethex+0x282>
 8017b0a:	9a02      	ldr	r2, [sp, #8]
 8017b0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017b10:	6013      	str	r3, [r2, #0]
 8017b12:	2301      	movs	r3, #1
 8017b14:	6123      	str	r3, [r4, #16]
 8017b16:	f8ca 3000 	str.w	r3, [sl]
 8017b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b1c:	2562      	movs	r5, #98	@ 0x62
 8017b1e:	601c      	str	r4, [r3, #0]
 8017b20:	e73a      	b.n	8017998 <__gethex+0xf8>
 8017b22:	1e71      	subs	r1, r6, #1
 8017b24:	4620      	mov	r0, r4
 8017b26:	f7fe fba2 	bl	801626e <__any_on>
 8017b2a:	2800      	cmp	r0, #0
 8017b2c:	d1ed      	bne.n	8017b0a <__gethex+0x26a>
 8017b2e:	9801      	ldr	r0, [sp, #4]
 8017b30:	4621      	mov	r1, r4
 8017b32:	f7fd ff4b 	bl	80159cc <_Bfree>
 8017b36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b38:	2300      	movs	r3, #0
 8017b3a:	6013      	str	r3, [r2, #0]
 8017b3c:	2550      	movs	r5, #80	@ 0x50
 8017b3e:	e72b      	b.n	8017998 <__gethex+0xf8>
 8017b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d1f3      	bne.n	8017b2e <__gethex+0x28e>
 8017b46:	e7e0      	b.n	8017b0a <__gethex+0x26a>
 8017b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d1dd      	bne.n	8017b0a <__gethex+0x26a>
 8017b4e:	e7ee      	b.n	8017b2e <__gethex+0x28e>
 8017b50:	080193f0 	.word	0x080193f0
 8017b54:	08019289 	.word	0x08019289
 8017b58:	08019562 	.word	0x08019562
 8017b5c:	1e6f      	subs	r7, r5, #1
 8017b5e:	f1b9 0f00 	cmp.w	r9, #0
 8017b62:	d130      	bne.n	8017bc6 <__gethex+0x326>
 8017b64:	b127      	cbz	r7, 8017b70 <__gethex+0x2d0>
 8017b66:	4639      	mov	r1, r7
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f7fe fb80 	bl	801626e <__any_on>
 8017b6e:	4681      	mov	r9, r0
 8017b70:	117a      	asrs	r2, r7, #5
 8017b72:	2301      	movs	r3, #1
 8017b74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017b78:	f007 071f 	and.w	r7, r7, #31
 8017b7c:	40bb      	lsls	r3, r7
 8017b7e:	4213      	tst	r3, r2
 8017b80:	4629      	mov	r1, r5
 8017b82:	4620      	mov	r0, r4
 8017b84:	bf18      	it	ne
 8017b86:	f049 0902 	orrne.w	r9, r9, #2
 8017b8a:	f7ff fe21 	bl	80177d0 <rshift>
 8017b8e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017b92:	1b76      	subs	r6, r6, r5
 8017b94:	2502      	movs	r5, #2
 8017b96:	f1b9 0f00 	cmp.w	r9, #0
 8017b9a:	d047      	beq.n	8017c2c <__gethex+0x38c>
 8017b9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ba0:	2b02      	cmp	r3, #2
 8017ba2:	d015      	beq.n	8017bd0 <__gethex+0x330>
 8017ba4:	2b03      	cmp	r3, #3
 8017ba6:	d017      	beq.n	8017bd8 <__gethex+0x338>
 8017ba8:	2b01      	cmp	r3, #1
 8017baa:	d109      	bne.n	8017bc0 <__gethex+0x320>
 8017bac:	f019 0f02 	tst.w	r9, #2
 8017bb0:	d006      	beq.n	8017bc0 <__gethex+0x320>
 8017bb2:	f8da 3000 	ldr.w	r3, [sl]
 8017bb6:	ea49 0903 	orr.w	r9, r9, r3
 8017bba:	f019 0f01 	tst.w	r9, #1
 8017bbe:	d10e      	bne.n	8017bde <__gethex+0x33e>
 8017bc0:	f045 0510 	orr.w	r5, r5, #16
 8017bc4:	e032      	b.n	8017c2c <__gethex+0x38c>
 8017bc6:	f04f 0901 	mov.w	r9, #1
 8017bca:	e7d1      	b.n	8017b70 <__gethex+0x2d0>
 8017bcc:	2501      	movs	r5, #1
 8017bce:	e7e2      	b.n	8017b96 <__gethex+0x2f6>
 8017bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bd2:	f1c3 0301 	rsb	r3, r3, #1
 8017bd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d0f0      	beq.n	8017bc0 <__gethex+0x320>
 8017bde:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017be2:	f104 0314 	add.w	r3, r4, #20
 8017be6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017bea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017bee:	f04f 0c00 	mov.w	ip, #0
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017bfc:	d01b      	beq.n	8017c36 <__gethex+0x396>
 8017bfe:	3201      	adds	r2, #1
 8017c00:	6002      	str	r2, [r0, #0]
 8017c02:	2d02      	cmp	r5, #2
 8017c04:	f104 0314 	add.w	r3, r4, #20
 8017c08:	d13c      	bne.n	8017c84 <__gethex+0x3e4>
 8017c0a:	f8d8 2000 	ldr.w	r2, [r8]
 8017c0e:	3a01      	subs	r2, #1
 8017c10:	42b2      	cmp	r2, r6
 8017c12:	d109      	bne.n	8017c28 <__gethex+0x388>
 8017c14:	1171      	asrs	r1, r6, #5
 8017c16:	2201      	movs	r2, #1
 8017c18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017c1c:	f006 061f 	and.w	r6, r6, #31
 8017c20:	fa02 f606 	lsl.w	r6, r2, r6
 8017c24:	421e      	tst	r6, r3
 8017c26:	d13a      	bne.n	8017c9e <__gethex+0x3fe>
 8017c28:	f045 0520 	orr.w	r5, r5, #32
 8017c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c2e:	601c      	str	r4, [r3, #0]
 8017c30:	9b02      	ldr	r3, [sp, #8]
 8017c32:	601f      	str	r7, [r3, #0]
 8017c34:	e6b0      	b.n	8017998 <__gethex+0xf8>
 8017c36:	4299      	cmp	r1, r3
 8017c38:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c3c:	d8d9      	bhi.n	8017bf2 <__gethex+0x352>
 8017c3e:	68a3      	ldr	r3, [r4, #8]
 8017c40:	459b      	cmp	fp, r3
 8017c42:	db17      	blt.n	8017c74 <__gethex+0x3d4>
 8017c44:	6861      	ldr	r1, [r4, #4]
 8017c46:	9801      	ldr	r0, [sp, #4]
 8017c48:	3101      	adds	r1, #1
 8017c4a:	f7fd fe7f 	bl	801594c <_Balloc>
 8017c4e:	4681      	mov	r9, r0
 8017c50:	b918      	cbnz	r0, 8017c5a <__gethex+0x3ba>
 8017c52:	4b1a      	ldr	r3, [pc, #104]	@ (8017cbc <__gethex+0x41c>)
 8017c54:	4602      	mov	r2, r0
 8017c56:	2184      	movs	r1, #132	@ 0x84
 8017c58:	e6c5      	b.n	80179e6 <__gethex+0x146>
 8017c5a:	6922      	ldr	r2, [r4, #16]
 8017c5c:	3202      	adds	r2, #2
 8017c5e:	f104 010c 	add.w	r1, r4, #12
 8017c62:	0092      	lsls	r2, r2, #2
 8017c64:	300c      	adds	r0, #12
 8017c66:	f7fc ffc6 	bl	8014bf6 <memcpy>
 8017c6a:	4621      	mov	r1, r4
 8017c6c:	9801      	ldr	r0, [sp, #4]
 8017c6e:	f7fd fead 	bl	80159cc <_Bfree>
 8017c72:	464c      	mov	r4, r9
 8017c74:	6923      	ldr	r3, [r4, #16]
 8017c76:	1c5a      	adds	r2, r3, #1
 8017c78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c7c:	6122      	str	r2, [r4, #16]
 8017c7e:	2201      	movs	r2, #1
 8017c80:	615a      	str	r2, [r3, #20]
 8017c82:	e7be      	b.n	8017c02 <__gethex+0x362>
 8017c84:	6922      	ldr	r2, [r4, #16]
 8017c86:	455a      	cmp	r2, fp
 8017c88:	dd0b      	ble.n	8017ca2 <__gethex+0x402>
 8017c8a:	2101      	movs	r1, #1
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	f7ff fd9f 	bl	80177d0 <rshift>
 8017c92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c96:	3701      	adds	r7, #1
 8017c98:	42bb      	cmp	r3, r7
 8017c9a:	f6ff aee0 	blt.w	8017a5e <__gethex+0x1be>
 8017c9e:	2501      	movs	r5, #1
 8017ca0:	e7c2      	b.n	8017c28 <__gethex+0x388>
 8017ca2:	f016 061f 	ands.w	r6, r6, #31
 8017ca6:	d0fa      	beq.n	8017c9e <__gethex+0x3fe>
 8017ca8:	4453      	add	r3, sl
 8017caa:	f1c6 0620 	rsb	r6, r6, #32
 8017cae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017cb2:	f7fd ff3d 	bl	8015b30 <__hi0bits>
 8017cb6:	42b0      	cmp	r0, r6
 8017cb8:	dbe7      	blt.n	8017c8a <__gethex+0x3ea>
 8017cba:	e7f0      	b.n	8017c9e <__gethex+0x3fe>
 8017cbc:	08019289 	.word	0x08019289

08017cc0 <L_shift>:
 8017cc0:	f1c2 0208 	rsb	r2, r2, #8
 8017cc4:	0092      	lsls	r2, r2, #2
 8017cc6:	b570      	push	{r4, r5, r6, lr}
 8017cc8:	f1c2 0620 	rsb	r6, r2, #32
 8017ccc:	6843      	ldr	r3, [r0, #4]
 8017cce:	6804      	ldr	r4, [r0, #0]
 8017cd0:	fa03 f506 	lsl.w	r5, r3, r6
 8017cd4:	432c      	orrs	r4, r5
 8017cd6:	40d3      	lsrs	r3, r2
 8017cd8:	6004      	str	r4, [r0, #0]
 8017cda:	f840 3f04 	str.w	r3, [r0, #4]!
 8017cde:	4288      	cmp	r0, r1
 8017ce0:	d3f4      	bcc.n	8017ccc <L_shift+0xc>
 8017ce2:	bd70      	pop	{r4, r5, r6, pc}

08017ce4 <__match>:
 8017ce4:	b530      	push	{r4, r5, lr}
 8017ce6:	6803      	ldr	r3, [r0, #0]
 8017ce8:	3301      	adds	r3, #1
 8017cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cee:	b914      	cbnz	r4, 8017cf6 <__match+0x12>
 8017cf0:	6003      	str	r3, [r0, #0]
 8017cf2:	2001      	movs	r0, #1
 8017cf4:	bd30      	pop	{r4, r5, pc}
 8017cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cfa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017cfe:	2d19      	cmp	r5, #25
 8017d00:	bf98      	it	ls
 8017d02:	3220      	addls	r2, #32
 8017d04:	42a2      	cmp	r2, r4
 8017d06:	d0f0      	beq.n	8017cea <__match+0x6>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	e7f3      	b.n	8017cf4 <__match+0x10>

08017d0c <__hexnan>:
 8017d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d10:	680b      	ldr	r3, [r1, #0]
 8017d12:	6801      	ldr	r1, [r0, #0]
 8017d14:	115e      	asrs	r6, r3, #5
 8017d16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017d1a:	f013 031f 	ands.w	r3, r3, #31
 8017d1e:	b087      	sub	sp, #28
 8017d20:	bf18      	it	ne
 8017d22:	3604      	addne	r6, #4
 8017d24:	2500      	movs	r5, #0
 8017d26:	1f37      	subs	r7, r6, #4
 8017d28:	4682      	mov	sl, r0
 8017d2a:	4690      	mov	r8, r2
 8017d2c:	9301      	str	r3, [sp, #4]
 8017d2e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017d32:	46b9      	mov	r9, r7
 8017d34:	463c      	mov	r4, r7
 8017d36:	9502      	str	r5, [sp, #8]
 8017d38:	46ab      	mov	fp, r5
 8017d3a:	784a      	ldrb	r2, [r1, #1]
 8017d3c:	1c4b      	adds	r3, r1, #1
 8017d3e:	9303      	str	r3, [sp, #12]
 8017d40:	b342      	cbz	r2, 8017d94 <__hexnan+0x88>
 8017d42:	4610      	mov	r0, r2
 8017d44:	9105      	str	r1, [sp, #20]
 8017d46:	9204      	str	r2, [sp, #16]
 8017d48:	f7ff fd94 	bl	8017874 <__hexdig_fun>
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	d151      	bne.n	8017df4 <__hexnan+0xe8>
 8017d50:	9a04      	ldr	r2, [sp, #16]
 8017d52:	9905      	ldr	r1, [sp, #20]
 8017d54:	2a20      	cmp	r2, #32
 8017d56:	d818      	bhi.n	8017d8a <__hexnan+0x7e>
 8017d58:	9b02      	ldr	r3, [sp, #8]
 8017d5a:	459b      	cmp	fp, r3
 8017d5c:	dd13      	ble.n	8017d86 <__hexnan+0x7a>
 8017d5e:	454c      	cmp	r4, r9
 8017d60:	d206      	bcs.n	8017d70 <__hexnan+0x64>
 8017d62:	2d07      	cmp	r5, #7
 8017d64:	dc04      	bgt.n	8017d70 <__hexnan+0x64>
 8017d66:	462a      	mov	r2, r5
 8017d68:	4649      	mov	r1, r9
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f7ff ffa8 	bl	8017cc0 <L_shift>
 8017d70:	4544      	cmp	r4, r8
 8017d72:	d952      	bls.n	8017e1a <__hexnan+0x10e>
 8017d74:	2300      	movs	r3, #0
 8017d76:	f1a4 0904 	sub.w	r9, r4, #4
 8017d7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d7e:	f8cd b008 	str.w	fp, [sp, #8]
 8017d82:	464c      	mov	r4, r9
 8017d84:	461d      	mov	r5, r3
 8017d86:	9903      	ldr	r1, [sp, #12]
 8017d88:	e7d7      	b.n	8017d3a <__hexnan+0x2e>
 8017d8a:	2a29      	cmp	r2, #41	@ 0x29
 8017d8c:	d157      	bne.n	8017e3e <__hexnan+0x132>
 8017d8e:	3102      	adds	r1, #2
 8017d90:	f8ca 1000 	str.w	r1, [sl]
 8017d94:	f1bb 0f00 	cmp.w	fp, #0
 8017d98:	d051      	beq.n	8017e3e <__hexnan+0x132>
 8017d9a:	454c      	cmp	r4, r9
 8017d9c:	d206      	bcs.n	8017dac <__hexnan+0xa0>
 8017d9e:	2d07      	cmp	r5, #7
 8017da0:	dc04      	bgt.n	8017dac <__hexnan+0xa0>
 8017da2:	462a      	mov	r2, r5
 8017da4:	4649      	mov	r1, r9
 8017da6:	4620      	mov	r0, r4
 8017da8:	f7ff ff8a 	bl	8017cc0 <L_shift>
 8017dac:	4544      	cmp	r4, r8
 8017dae:	d936      	bls.n	8017e1e <__hexnan+0x112>
 8017db0:	f1a8 0204 	sub.w	r2, r8, #4
 8017db4:	4623      	mov	r3, r4
 8017db6:	f853 1b04 	ldr.w	r1, [r3], #4
 8017dba:	f842 1f04 	str.w	r1, [r2, #4]!
 8017dbe:	429f      	cmp	r7, r3
 8017dc0:	d2f9      	bcs.n	8017db6 <__hexnan+0xaa>
 8017dc2:	1b3b      	subs	r3, r7, r4
 8017dc4:	f023 0303 	bic.w	r3, r3, #3
 8017dc8:	3304      	adds	r3, #4
 8017dca:	3401      	adds	r4, #1
 8017dcc:	3e03      	subs	r6, #3
 8017dce:	42b4      	cmp	r4, r6
 8017dd0:	bf88      	it	hi
 8017dd2:	2304      	movhi	r3, #4
 8017dd4:	4443      	add	r3, r8
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	f843 2b04 	str.w	r2, [r3], #4
 8017ddc:	429f      	cmp	r7, r3
 8017dde:	d2fb      	bcs.n	8017dd8 <__hexnan+0xcc>
 8017de0:	683b      	ldr	r3, [r7, #0]
 8017de2:	b91b      	cbnz	r3, 8017dec <__hexnan+0xe0>
 8017de4:	4547      	cmp	r7, r8
 8017de6:	d128      	bne.n	8017e3a <__hexnan+0x12e>
 8017de8:	2301      	movs	r3, #1
 8017dea:	603b      	str	r3, [r7, #0]
 8017dec:	2005      	movs	r0, #5
 8017dee:	b007      	add	sp, #28
 8017df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df4:	3501      	adds	r5, #1
 8017df6:	2d08      	cmp	r5, #8
 8017df8:	f10b 0b01 	add.w	fp, fp, #1
 8017dfc:	dd06      	ble.n	8017e0c <__hexnan+0x100>
 8017dfe:	4544      	cmp	r4, r8
 8017e00:	d9c1      	bls.n	8017d86 <__hexnan+0x7a>
 8017e02:	2300      	movs	r3, #0
 8017e04:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e08:	2501      	movs	r5, #1
 8017e0a:	3c04      	subs	r4, #4
 8017e0c:	6822      	ldr	r2, [r4, #0]
 8017e0e:	f000 000f 	and.w	r0, r0, #15
 8017e12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e16:	6020      	str	r0, [r4, #0]
 8017e18:	e7b5      	b.n	8017d86 <__hexnan+0x7a>
 8017e1a:	2508      	movs	r5, #8
 8017e1c:	e7b3      	b.n	8017d86 <__hexnan+0x7a>
 8017e1e:	9b01      	ldr	r3, [sp, #4]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d0dd      	beq.n	8017de0 <__hexnan+0xd4>
 8017e24:	f1c3 0320 	rsb	r3, r3, #32
 8017e28:	f04f 32ff 	mov.w	r2, #4294967295
 8017e2c:	40da      	lsrs	r2, r3
 8017e2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017e32:	4013      	ands	r3, r2
 8017e34:	f846 3c04 	str.w	r3, [r6, #-4]
 8017e38:	e7d2      	b.n	8017de0 <__hexnan+0xd4>
 8017e3a:	3f04      	subs	r7, #4
 8017e3c:	e7d0      	b.n	8017de0 <__hexnan+0xd4>
 8017e3e:	2004      	movs	r0, #4
 8017e40:	e7d5      	b.n	8017dee <__hexnan+0xe2>

08017e42 <__ascii_mbtowc>:
 8017e42:	b082      	sub	sp, #8
 8017e44:	b901      	cbnz	r1, 8017e48 <__ascii_mbtowc+0x6>
 8017e46:	a901      	add	r1, sp, #4
 8017e48:	b142      	cbz	r2, 8017e5c <__ascii_mbtowc+0x1a>
 8017e4a:	b14b      	cbz	r3, 8017e60 <__ascii_mbtowc+0x1e>
 8017e4c:	7813      	ldrb	r3, [r2, #0]
 8017e4e:	600b      	str	r3, [r1, #0]
 8017e50:	7812      	ldrb	r2, [r2, #0]
 8017e52:	1e10      	subs	r0, r2, #0
 8017e54:	bf18      	it	ne
 8017e56:	2001      	movne	r0, #1
 8017e58:	b002      	add	sp, #8
 8017e5a:	4770      	bx	lr
 8017e5c:	4610      	mov	r0, r2
 8017e5e:	e7fb      	b.n	8017e58 <__ascii_mbtowc+0x16>
 8017e60:	f06f 0001 	mvn.w	r0, #1
 8017e64:	e7f8      	b.n	8017e58 <__ascii_mbtowc+0x16>

08017e66 <_realloc_r>:
 8017e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e6a:	4680      	mov	r8, r0
 8017e6c:	4615      	mov	r5, r2
 8017e6e:	460c      	mov	r4, r1
 8017e70:	b921      	cbnz	r1, 8017e7c <_realloc_r+0x16>
 8017e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e76:	4611      	mov	r1, r2
 8017e78:	f7fb bd7e 	b.w	8013978 <_malloc_r>
 8017e7c:	b92a      	cbnz	r2, 8017e8a <_realloc_r+0x24>
 8017e7e:	f7fd fd1b 	bl	80158b8 <_free_r>
 8017e82:	2400      	movs	r4, #0
 8017e84:	4620      	mov	r0, r4
 8017e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e8a:	f000 f8ab 	bl	8017fe4 <_malloc_usable_size_r>
 8017e8e:	4285      	cmp	r5, r0
 8017e90:	4606      	mov	r6, r0
 8017e92:	d802      	bhi.n	8017e9a <_realloc_r+0x34>
 8017e94:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017e98:	d8f4      	bhi.n	8017e84 <_realloc_r+0x1e>
 8017e9a:	4629      	mov	r1, r5
 8017e9c:	4640      	mov	r0, r8
 8017e9e:	f7fb fd6b 	bl	8013978 <_malloc_r>
 8017ea2:	4607      	mov	r7, r0
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	d0ec      	beq.n	8017e82 <_realloc_r+0x1c>
 8017ea8:	42b5      	cmp	r5, r6
 8017eaa:	462a      	mov	r2, r5
 8017eac:	4621      	mov	r1, r4
 8017eae:	bf28      	it	cs
 8017eb0:	4632      	movcs	r2, r6
 8017eb2:	f7fc fea0 	bl	8014bf6 <memcpy>
 8017eb6:	4621      	mov	r1, r4
 8017eb8:	4640      	mov	r0, r8
 8017eba:	f7fd fcfd 	bl	80158b8 <_free_r>
 8017ebe:	463c      	mov	r4, r7
 8017ec0:	e7e0      	b.n	8017e84 <_realloc_r+0x1e>

08017ec2 <__ascii_wctomb>:
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	4608      	mov	r0, r1
 8017ec6:	b141      	cbz	r1, 8017eda <__ascii_wctomb+0x18>
 8017ec8:	2aff      	cmp	r2, #255	@ 0xff
 8017eca:	d904      	bls.n	8017ed6 <__ascii_wctomb+0x14>
 8017ecc:	228a      	movs	r2, #138	@ 0x8a
 8017ece:	601a      	str	r2, [r3, #0]
 8017ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ed4:	4770      	bx	lr
 8017ed6:	700a      	strb	r2, [r1, #0]
 8017ed8:	2001      	movs	r0, #1
 8017eda:	4770      	bx	lr

08017edc <__swhatbuf_r>:
 8017edc:	b570      	push	{r4, r5, r6, lr}
 8017ede:	460c      	mov	r4, r1
 8017ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ee4:	2900      	cmp	r1, #0
 8017ee6:	b096      	sub	sp, #88	@ 0x58
 8017ee8:	4615      	mov	r5, r2
 8017eea:	461e      	mov	r6, r3
 8017eec:	da0d      	bge.n	8017f0a <__swhatbuf_r+0x2e>
 8017eee:	89a3      	ldrh	r3, [r4, #12]
 8017ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017ef4:	f04f 0100 	mov.w	r1, #0
 8017ef8:	bf14      	ite	ne
 8017efa:	2340      	movne	r3, #64	@ 0x40
 8017efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017f00:	2000      	movs	r0, #0
 8017f02:	6031      	str	r1, [r6, #0]
 8017f04:	602b      	str	r3, [r5, #0]
 8017f06:	b016      	add	sp, #88	@ 0x58
 8017f08:	bd70      	pop	{r4, r5, r6, pc}
 8017f0a:	466a      	mov	r2, sp
 8017f0c:	f000 f848 	bl	8017fa0 <_fstat_r>
 8017f10:	2800      	cmp	r0, #0
 8017f12:	dbec      	blt.n	8017eee <__swhatbuf_r+0x12>
 8017f14:	9901      	ldr	r1, [sp, #4]
 8017f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017f1e:	4259      	negs	r1, r3
 8017f20:	4159      	adcs	r1, r3
 8017f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017f26:	e7eb      	b.n	8017f00 <__swhatbuf_r+0x24>

08017f28 <__smakebuf_r>:
 8017f28:	898b      	ldrh	r3, [r1, #12]
 8017f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f2c:	079d      	lsls	r5, r3, #30
 8017f2e:	4606      	mov	r6, r0
 8017f30:	460c      	mov	r4, r1
 8017f32:	d507      	bpl.n	8017f44 <__smakebuf_r+0x1c>
 8017f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017f38:	6023      	str	r3, [r4, #0]
 8017f3a:	6123      	str	r3, [r4, #16]
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	6163      	str	r3, [r4, #20]
 8017f40:	b003      	add	sp, #12
 8017f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f44:	ab01      	add	r3, sp, #4
 8017f46:	466a      	mov	r2, sp
 8017f48:	f7ff ffc8 	bl	8017edc <__swhatbuf_r>
 8017f4c:	9f00      	ldr	r7, [sp, #0]
 8017f4e:	4605      	mov	r5, r0
 8017f50:	4639      	mov	r1, r7
 8017f52:	4630      	mov	r0, r6
 8017f54:	f7fb fd10 	bl	8013978 <_malloc_r>
 8017f58:	b948      	cbnz	r0, 8017f6e <__smakebuf_r+0x46>
 8017f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f5e:	059a      	lsls	r2, r3, #22
 8017f60:	d4ee      	bmi.n	8017f40 <__smakebuf_r+0x18>
 8017f62:	f023 0303 	bic.w	r3, r3, #3
 8017f66:	f043 0302 	orr.w	r3, r3, #2
 8017f6a:	81a3      	strh	r3, [r4, #12]
 8017f6c:	e7e2      	b.n	8017f34 <__smakebuf_r+0xc>
 8017f6e:	89a3      	ldrh	r3, [r4, #12]
 8017f70:	6020      	str	r0, [r4, #0]
 8017f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f76:	81a3      	strh	r3, [r4, #12]
 8017f78:	9b01      	ldr	r3, [sp, #4]
 8017f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017f7e:	b15b      	cbz	r3, 8017f98 <__smakebuf_r+0x70>
 8017f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f84:	4630      	mov	r0, r6
 8017f86:	f000 f81d 	bl	8017fc4 <_isatty_r>
 8017f8a:	b128      	cbz	r0, 8017f98 <__smakebuf_r+0x70>
 8017f8c:	89a3      	ldrh	r3, [r4, #12]
 8017f8e:	f023 0303 	bic.w	r3, r3, #3
 8017f92:	f043 0301 	orr.w	r3, r3, #1
 8017f96:	81a3      	strh	r3, [r4, #12]
 8017f98:	89a3      	ldrh	r3, [r4, #12]
 8017f9a:	431d      	orrs	r5, r3
 8017f9c:	81a5      	strh	r5, [r4, #12]
 8017f9e:	e7cf      	b.n	8017f40 <__smakebuf_r+0x18>

08017fa0 <_fstat_r>:
 8017fa0:	b538      	push	{r3, r4, r5, lr}
 8017fa2:	4d07      	ldr	r5, [pc, #28]	@ (8017fc0 <_fstat_r+0x20>)
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	4604      	mov	r4, r0
 8017fa8:	4608      	mov	r0, r1
 8017faa:	4611      	mov	r1, r2
 8017fac:	602b      	str	r3, [r5, #0]
 8017fae:	f7f1 fccd 	bl	800994c <_fstat>
 8017fb2:	1c43      	adds	r3, r0, #1
 8017fb4:	d102      	bne.n	8017fbc <_fstat_r+0x1c>
 8017fb6:	682b      	ldr	r3, [r5, #0]
 8017fb8:	b103      	cbz	r3, 8017fbc <_fstat_r+0x1c>
 8017fba:	6023      	str	r3, [r4, #0]
 8017fbc:	bd38      	pop	{r3, r4, r5, pc}
 8017fbe:	bf00      	nop
 8017fc0:	20000b08 	.word	0x20000b08

08017fc4 <_isatty_r>:
 8017fc4:	b538      	push	{r3, r4, r5, lr}
 8017fc6:	4d06      	ldr	r5, [pc, #24]	@ (8017fe0 <_isatty_r+0x1c>)
 8017fc8:	2300      	movs	r3, #0
 8017fca:	4604      	mov	r4, r0
 8017fcc:	4608      	mov	r0, r1
 8017fce:	602b      	str	r3, [r5, #0]
 8017fd0:	f7f1 fccc 	bl	800996c <_isatty>
 8017fd4:	1c43      	adds	r3, r0, #1
 8017fd6:	d102      	bne.n	8017fde <_isatty_r+0x1a>
 8017fd8:	682b      	ldr	r3, [r5, #0]
 8017fda:	b103      	cbz	r3, 8017fde <_isatty_r+0x1a>
 8017fdc:	6023      	str	r3, [r4, #0]
 8017fde:	bd38      	pop	{r3, r4, r5, pc}
 8017fe0:	20000b08 	.word	0x20000b08

08017fe4 <_malloc_usable_size_r>:
 8017fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fe8:	1f18      	subs	r0, r3, #4
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	bfbc      	itt	lt
 8017fee:	580b      	ldrlt	r3, [r1, r0]
 8017ff0:	18c0      	addlt	r0, r0, r3
 8017ff2:	4770      	bx	lr

08017ff4 <_init>:
 8017ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ff6:	bf00      	nop
 8017ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ffa:	bc08      	pop	{r3}
 8017ffc:	469e      	mov	lr, r3
 8017ffe:	4770      	bx	lr

08018000 <_fini>:
 8018000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018002:	bf00      	nop
 8018004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018006:	bc08      	pop	{r3}
 8018008:	469e      	mov	lr, r3
 801800a:	4770      	bx	lr
