
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e10  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08017ff0  08017ff0  00027ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195a4  080195a4  0003024c  2**0
                  CONTENTS
  4 .ARM          00000008  080195a4  080195a4  000295a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080195ac  080195ac  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080195ac  080195ac  000295ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080195bc  080195bc  000295bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  080195cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000250  08019818  00030250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08019818  00030af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00048c64  00000000  00000000  000302bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008bfd  00000000  00000000  00078f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a30  00000000  00000000  00081b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002102  00000000  00000000  00084550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033d32  00000000  00000000  00086652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000384d4  00000000  00000000  000ba384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001298ed  00000000  00000000  000f2858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cc40  00000000  00000000  0021c148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00228d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017fd8 	.word	0x08017fd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08017fd8 	.word	0x08017fd8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	08018a1c 	.word	0x08018a1c

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	08018a1c 	.word	0x08018a1c

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f012 fb6e 	bl	8013772 <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	609a      	str	r2, [r3, #8]
  _address = address;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	715a      	strb	r2, [r3, #5]
}
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08018a00 	.word	0x08018a00

080010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa5c 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f013 fc1c 	bl	801494a <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
 8001116:	8bfb      	ldrh	r3, [r7, #30]
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2306      	movs	r3, #6
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 fa05 	bl	8001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	b21a      	sxth	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001148:	7e3b      	ldrb	r3, [r7, #24]
 800114a:	b21a      	sxth	r2, r3
 800114c:	7e7b      	ldrb	r3, [r7, #25]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b08      	subs	r3, #8
 800115a:	2b26      	cmp	r3, #38	; 0x26
 800115c:	f200 8152 	bhi.w	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001385 	.word	0x08001385
 800116c:	08001405 	.word	0x08001405
 8001170:	08001405 	.word	0x08001405
 8001174:	08001405 	.word	0x08001405
 8001178:	08001405 	.word	0x08001405
 800117c:	08001405 	.word	0x08001405
 8001180:	08001205 	.word	0x08001205
 8001184:	08001405 	.word	0x08001405
 8001188:	08001405 	.word	0x08001405
 800118c:	08001405 	.word	0x08001405
 8001190:	08001405 	.word	0x08001405
 8001194:	08001405 	.word	0x08001405
 8001198:	08001285 	.word	0x08001285
 800119c:	08001405 	.word	0x08001405
 80011a0:	08001405 	.word	0x08001405
 80011a4:	08001405 	.word	0x08001405
 80011a8:	08001405 	.word	0x08001405
 80011ac:	08001405 	.word	0x08001405
 80011b0:	08001305 	.word	0x08001305
 80011b4:	08001405 	.word	0x08001405
 80011b8:	08001405 	.word	0x08001405
 80011bc:	08001405 	.word	0x08001405
 80011c0:	08001405 	.word	0x08001405
 80011c4:	08001405 	.word	0x08001405
 80011c8:	08001405 	.word	0x08001405
 80011cc:	08001405 	.word	0x08001405
 80011d0:	08001405 	.word	0x08001405
 80011d4:	08001405 	.word	0x08001405
 80011d8:	08001405 	.word	0x08001405
 80011dc:	08001405 	.word	0x08001405
 80011e0:	08001405 	.word	0x08001405
 80011e4:	08001405 	.word	0x08001405
 80011e8:	08001385 	.word	0x08001385
 80011ec:	08001405 	.word	0x08001405
 80011f0:	08001405 	.word	0x08001405
 80011f4:	08001405 	.word	0x08001405
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001405 	.word	0x08001405
 8001200:	08001385 	.word	0x08001385
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b3 	bl	8000574 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	2100      	movs	r1, #0
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9d9 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001228:	4603      	mov	r3, r0
 800122a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800122e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f99e 	bl	8000574 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800123e:	f7ff fb2d 	bl	800089c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	2101      	movs	r1, #1
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9c4 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001252:	4603      	mov	r3, r0
 8001254:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 8001258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f989 	bl	8000574 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001268:	f7ff fb18 	bl	800089c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	2102      	movs	r1, #2
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9af 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800127c:	4603      	mov	r3, r0
 800127e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001282:	e0bf      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f973 	bl	8000574 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f999 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f95e 	bl	8000574 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f984 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f949 	bl	8000574 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f96f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001302:	e07f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f933 	bl	8000574 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001314:	f7ff fac2 	bl	800089c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f959 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001328:	4603      	mov	r3, r0
 800132a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800132e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f91e 	bl	8000574 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	2101      	movs	r1, #1
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f944 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001352:	4603      	mov	r3, r0
 8001354:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f909 	bl	8000574 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001368:	f7ff fa98 	bl	800089c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	2102      	movs	r1, #2
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f92f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800137c:	4603      	mov	r3, r0
 800137e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001382:	e03f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001384:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f3 	bl	8000574 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001394:	f7ff fa82 	bl	800089c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f919 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8de 	bl	8000574 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f904 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c9 	bl	8000574 <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	2102      	movs	r1, #2
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f8ef 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001402:	bf00      	nop
  }

  return xyz;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	40300000 	.word	0x40300000
 8001414:	408c2000 	.word	0x408c2000
 8001418:	40590000 	.word	0x40590000

0800141c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f013 fa8d 	bl	801494a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220b      	movs	r2, #11
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001436:	4618      	mov	r0, r3
 8001438:	f013 fa8f 	bl	801495a <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2203      	movs	r2, #3
 8001454:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001470:	621a      	str	r2, [r3, #32]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08017ff0 	.word	0x08017ff0
 8001480:	3c23d70a 	.word	0x3c23d70a

08001484 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f013 fa59 	bl	801494a <memset>

  event->version   = sizeof(sensors_event_t);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2203      	movs	r2, #3
 80014aa:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014ac:	f009 f8ea 	bl	800a684 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	221a      	movs	r2, #26
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe15 	bl	80010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f853 	bl	8001576 <_ZN3imu6VectorILh3EE1xEv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84f 	bl	800158c <_ZN3imu6VectorILh3EE1yEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb9e 	bl	8000c38 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84c 	bl	80015a4 <_ZN3imu6VectorILh3EE1zEv>
 800150c:	4603      	mov	r3, r0
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb8f 	bl	8000c38 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61da      	str	r2, [r3, #28]

  return true;
 8001520:	2401      	movs	r4, #1
}
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81a 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800152c:	4623      	mov	r3, r4
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800154a:	7aba      	ldrb	r2, [r7, #10]
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f89b 	bl	800168c <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    {
    }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3310      	adds	r3, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2218      	movs	r2, #24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f013 f9bd 	bl	801494a <memset>
    }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd29 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08018a00 	.word	0x08018a00

0800161c <_ZN15Adafruit_BNO055D0Ev>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
 800162a:	2110      	movs	r1, #16
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f012 f8a0 	bl	8013772 <_ZdlPvj>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN3imu10QuaternionC1Ev+0x4c>)
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016b4:	f00a fb96 	bl	800bde4 <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016bc:	bf00      	nop
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016c0:	f00a fe4b 	bl	800c35a <HAL_I2C_GetState>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f4      	bne.n	80016be <I2C_n_byte_receive+0x32>

  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000320 	.word	0x20000320

080016e4 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016fe:	2229      	movs	r2, #41	; 0x29
 8001700:	2137      	movs	r1, #55	; 0x37
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001704:	f7ff fcd8 	bl	80010b8 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800170a:	f7ff ff97 	bl	800163c <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001710:	f7ff ff54 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	4293      	cmp	r3, r2
 8001722:	d105      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001726:	f7ff ff1b 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800172c:	f7ff ff64 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000026c 	.word	0x2000026c
 800173c:	20000280 	.word	0x20000280
 8001740:	200002a0 	.word	0x200002a0

08001744 <_GLOBAL__sub_I_bno>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffc9 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <_GLOBAL__sub_D_bno>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffc1 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001762:	bd80      	pop	{r7, pc}

08001764 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af02      	add	r7, sp, #8
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f00a f952 	bl	800ba20 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4910      	ldr	r1, [pc, #64]	; (80017c8 <as50_readAngle+0x64>)
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <as50_readAngle+0x68>)
 8001788:	f00d f8c2 	bl	800e910 <HAL_SPI_TransmitReceive>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10e      	bne.n	80017b0 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f00a f940 	bl	800ba20 <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017ae:	e006      	b.n	80017be <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f00a f931 	bl	800ba20 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000810 	.word	0x20000810

080017d0 <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
int at24_isConnected(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	2202      	movs	r2, #2
 80017d8:	21a0      	movs	r1, #160	; 0xa0
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <at24_isConnected+0x20>)
 80017dc:	f00a fc1c 	bl	800c018 <HAL_I2C_IsDeviceReady>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <at24_isConnected+0x1a>
    return true;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <at24_isConnected+0x1c>
  else
    return false;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000320 	.word	0x20000320

080017f4 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_write(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af04      	add	r7, sp, #16
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4603      	mov	r3, r0
 8001800:	81fb      	strh	r3, [r7, #14]
 8001802:	4613      	mov	r3, r2
 8001804:	737b      	strb	r3, [r7, #13]
  if (at24_lock == 1)
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <at24_write+0xc0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <at24_write+0x1e>
    return false;
 800180e:	2300      	movs	r3, #0
 8001810:	e04b      	b.n	80018aa <at24_write+0xb6>

  at24_lock = 1;
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <at24_write+0xc0>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 8001818:	f008 ff34 	bl	800a684 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  while (1)
  {
	#if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
	#endif
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 800181e:	89fb      	ldrh	r3, [r7, #14]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	b29b      	uxth	r3, r3
 8001826:	f1c3 0320 	rsb	r3, r3, #32
 800182a:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	b29b      	uxth	r3, r3
 8001830:	8afa      	ldrh	r2, [r7, #22]
 8001832:	429a      	cmp	r2, r3
 8001834:	d901      	bls.n	800183a <at24_write+0x46>
      w = len;
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 800183a:	89fa      	ldrh	r2, [r7, #14]
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	21a0      	movs	r1, #160	; 0xa0
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <at24_write+0xc4>)
 800184e:	f00a f9b5 	bl	800bbbc <HAL_I2C_Mem_Write>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d124      	bne.n	80018a2 <at24_write+0xae>
    #endif
    {
      at24_delay(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f008 ff1f 	bl	800a69c <HAL_Delay>
      len -= w;
 800185e:	8afb      	ldrh	r3, [r7, #22]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	7b7a      	ldrb	r2, [r7, #13]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	737b      	strb	r3, [r7, #13]
      data += w;
 8001868:	8afb      	ldrh	r3, [r7, #22]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
      address += w;
 8001870:	89fa      	ldrh	r2, [r7, #14]
 8001872:	8afb      	ldrh	r3, [r7, #22]
 8001874:	4413      	add	r3, r2
 8001876:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 8001878:	7b7b      	ldrb	r3, [r7, #13]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d104      	bne.n	8001888 <at24_write+0x94>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        at24_lock = 0;
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <at24_write+0xc0>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
        return true;
 8001884:	2301      	movs	r3, #1
 8001886:	e010      	b.n	80018aa <at24_write+0xb6>
      }
      if (HAL_GetTick() - startTime >= timeout)
 8001888:	f008 fefc 	bl	800a684 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8c2      	bhi.n	800181e <at24_write+0x2a>
      {
        at24_lock = 0;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <at24_write+0xc0>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
        return false;
 800189e:	2300      	movs	r3, #0
 80018a0:	e003      	b.n	80018aa <at24_write+0xb6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      at24_lock = 0;
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <at24_write+0xc0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
      return false;
 80018a8:	2300      	movs	r3, #0
    }
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002b8 	.word	0x200002b8
 80018b8:	20000320 	.word	0x20000320

080018bc <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_read(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af04      	add	r7, sp, #16
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4603      	mov	r3, r0
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	4613      	mov	r3, r2
 80018cc:	737b      	strb	r3, [r7, #13]
	at24_delay(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f008 fee4 	bl	800a69c <HAL_Delay>
  #if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
  #endif
  if (at24_lock == 1)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <at24_read+0x68>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <at24_read+0x24>
    return false;
 80018dc:	2300      	movs	r3, #0
 80018de:	e01c      	b.n	800191a <at24_read+0x5e>
  at24_lock = 1;
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <at24_read+0x68>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	89f9      	ldrh	r1, [r7, #14]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	9202      	str	r2, [sp, #8]
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2302      	movs	r3, #2
 80018f8:	460a      	mov	r2, r1
 80018fa:	21a0      	movs	r1, #160	; 0xa0
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <at24_read+0x6c>)
 80018fe:	f00a fa71 	bl	800bde4 <HAL_I2C_Mem_Read>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <at24_read+0x56>
  #endif
  {
    at24_lock = 0;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <at24_read+0x68>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
    return true;
 800190e:	2301      	movs	r3, #1
 8001910:	e003      	b.n	800191a <at24_read+0x5e>
  }
  else
  {
    at24_lock = 0;
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <at24_read+0x68>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    return false;
 8001918:	2300      	movs	r3, #0
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200002b8 	.word	0x200002b8
 8001928:	20000320 	.word	0x20000320

0800192c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_DMA_Init+0x60>)
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <MX_DMA_Init+0x60>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6493      	str	r3, [r2, #72]	; 0x48
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_DMA_Init+0x60>)
 8001940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_DMA_Init+0x60>)
 800194c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <MX_DMA_Init+0x60>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6493      	str	r3, [r2, #72]	; 0x48
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_DMA_Init+0x60>)
 8001958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	200b      	movs	r0, #11
 8001968:	f008 ff95 	bl	800a896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800196c:	200b      	movs	r0, #11
 800196e:	f008 ffac 	bl	800a8ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	200c      	movs	r0, #12
 8001978:	f008 ff8d 	bl	800a896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800197c:	200c      	movs	r0, #12
 800197e:	f008 ffa4 	bl	800a8ca <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000

08001990 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <MX_FDCAN1_Init+0x8c>)
 8001998:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019a6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019bc:	2200      	movs	r2, #0
 80019be:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019c2:	2204      	movs	r2, #4
 80019c4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019ce:	221d      	movs	r2, #29
 80019d0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019da:	2204      	movs	r2, #4
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019ec:	2202      	movs	r2, #2
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_FDCAN1_Init+0x88>)
 8001a04:	f009 fa04 	bl	800ae10 <HAL_FDCAN_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001a0e:	f000 fbe8 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002bc 	.word	0x200002bc
 8001a1c:	40006400 	.word	0x40006400

08001a20 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09e      	sub	sp, #120	; 0x78
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2254      	movs	r2, #84	; 0x54
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f012 ff82 	bl	801494a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_FDCAN_MspInit+0xac>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d138      	bne.n	8001ac2 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4618      	mov	r0, r3
 8001a62:	f00c fae7 	bl	800e034 <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a6c:	f000 fbb9 	bl	80021e2 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_FDCAN_MspInit+0xb4>)
 8001abe:	f009 fe2d 	bl	800b71c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3778      	adds	r7, #120	; 0x78
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40006400 	.word	0x40006400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	4a43      	ldr	r2, [pc, #268]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a3d      	ldr	r2, [pc, #244]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a37      	ldr	r2, [pc, #220]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <MX_GPIO_Init+0x140>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8001b66:	2200      	movs	r2, #0
 8001b68:	f649 3110 	movw	r1, #39696	; 0x9b10
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b70:	f009 ff56 	bl	800ba20 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2120      	movs	r1, #32
 8001b78:	4828      	ldr	r0, [pc, #160]	; (8001c1c <MX_GPIO_Init+0x144>)
 8001b7a:	f009 ff51 	bl	800ba20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2104      	movs	r1, #4
 8001b82:	4827      	ldr	r0, [pc, #156]	; (8001c20 <MX_GPIO_Init+0x148>)
 8001b84:	f009 ff4c 	bl	800ba20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4820      	ldr	r0, [pc, #128]	; (8001c1c <MX_GPIO_Init+0x144>)
 8001b9c:	f009 fdbe 	bl	800b71c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481a      	ldr	r0, [pc, #104]	; (8001c1c <MX_GPIO_Init+0x144>)
 8001bb4:	f009 fdb2 	bl	800b71c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8001bb8:	f649 3310 	movw	r3, #39696	; 0x9b10
 8001bbc:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f009 fda2 	bl	800b71c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <MX_GPIO_Init+0x144>)
 8001bf0:	f009 fd94 	bl	800b71c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_GPIO_Init+0x148>)
 8001c0c:	f009 fd86 	bl	800b71c <HAL_GPIO_Init>

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000c00 	.word	0x48000c00

08001c24 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <MX_I2C4_Init+0x78>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <MX_I2C4_Init+0x7c>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001c5e:	480e      	ldr	r0, [pc, #56]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c60:	f009 ff10 	bl	800ba84 <HAL_I2C_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001c6a:	f000 faba 	bl	80021e2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c72:	f00b fb65 	bl	800d340 <HAL_I2CEx_ConfigAnalogFilter>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001c7c:	f000 fab1 	bl	80021e2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001c80:	2100      	movs	r1, #0
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_I2C4_Init+0x74>)
 8001c84:	f00b fba7 	bl	800d3d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001c8e:	f000 faa8 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000320 	.word	0x20000320
 8001c9c:	40008400 	.word	0x40008400
 8001ca0:	00702991 	.word	0x00702991

08001ca4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0a0      	sub	sp, #128	; 0x80
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cbc:	f107 0318 	add.w	r3, r7, #24
 8001cc0:	2254      	movs	r2, #84	; 0x54
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f012 fe40 	bl	801494a <memset>
  if(i2cHandle->Instance==I2C4)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5e      	ldr	r2, [pc, #376]	; (8001e48 <HAL_I2C_MspInit+0x1a4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	f040 80b5 	bne.w	8001e40 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00c f9a5 	bl	800e034 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001cf0:	f000 fa77 	bl	80021e2 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf4:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	4a54      	ldr	r2, [pc, #336]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d00:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001d34:	2308      	movs	r3, #8
 8001d36:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4844      	ldr	r0, [pc, #272]	; (8001e50 <HAL_I2C_MspInit+0x1ac>)
 8001d40:	f009 fcec 	bl	800b71c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d48:	2312      	movs	r3, #18
 8001d4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001d54:	2303      	movs	r3, #3
 8001d56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	483d      	ldr	r0, [pc, #244]	; (8001e54 <HAL_I2C_MspInit+0x1b0>)
 8001d60:	f009 fcdc 	bl	800b71c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d64:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_I2C_MspInit+0x1a8>)
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001d7e:	4a37      	ldr	r2, [pc, #220]	; (8001e5c <HAL_I2C_MspInit+0x1b8>)
 8001d80:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001d84:	2216      	movs	r2, #22
 8001d86:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001db2:	4829      	ldr	r0, [pc, #164]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001db4:	f008 fda4 	bl	800a900 <HAL_DMA_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001dbe:	f000 fa10 	bl	80021e2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_I2C_MspInit+0x1b4>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001dd0:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_I2C_MspInit+0x1c0>)
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001dd6:	2217      	movs	r2, #23
 8001dd8:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001ddc:	2210      	movs	r2, #16
 8001dde:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001e04:	4816      	ldr	r0, [pc, #88]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001e06:	f008 fd7b 	bl	800a900 <HAL_DMA_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001e10:	f000 f9e7 	bl	80021e2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_I2C_MspInit+0x1bc>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2052      	movs	r0, #82	; 0x52
 8001e26:	f008 fd36 	bl	800a896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001e2a:	2052      	movs	r0, #82	; 0x52
 8001e2c:	f008 fd4d 	bl	800a8ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2053      	movs	r0, #83	; 0x53
 8001e36:	f008 fd2e 	bl	800a896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001e3a:	2053      	movs	r0, #83	; 0x53
 8001e3c:	f008 fd45 	bl	800a8ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001e40:	bf00      	nop
 8001e42:	3780      	adds	r7, #128	; 0x80
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40008400 	.word	0x40008400
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000400 	.word	0x48000400
 8001e58:	20000374 	.word	0x20000374
 8001e5c:	40020008 	.word	0x40020008
 8001e60:	200003d4 	.word	0x200003d4
 8001e64:	4002001c 	.word	0x4002001c

08001e68 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
	if (JOINT_N == 1)
	{
		mc->motor_type = 17;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2211      	movs	r2, #17
 8001e76:	701a      	strb	r2, [r3, #0]
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
	}

	switch(mc->motor_type)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e7e:	2b17      	cmp	r3, #23
 8001e80:	d019      	beq.n	8001eb6 <motor_config_assembler+0x4e>
 8001e82:	2b17      	cmp	r3, #23
 8001e84:	dc20      	bgt.n	8001ec8 <motor_config_assembler+0x60>
 8001e86:	2b0e      	cmp	r3, #14
 8001e88:	d002      	beq.n	8001e90 <motor_config_assembler+0x28>
 8001e8a:	2b11      	cmp	r3, #17
 8001e8c:	d00a      	beq.n	8001ea4 <motor_config_assembler+0x3c>
 8001e8e:	e01b      	b.n	8001ec8 <motor_config_assembler+0x60>
	{
	case 14:
		mc->max_irun_scaler = 8;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2208      	movs	r2, #8
 8001e94:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001e9c:	605a      	str	r2, [r3, #4]
		mc->init_irun = 0;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	725a      	strb	r2, [r3, #9]
	case 17:
		mc->max_irun_scaler = 12;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <motor_config_assembler+0x78>)
 8001eae:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	725a      	strb	r2, [r3, #9]
	case 23:
		mc->max_irun_scaler = 31;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	221f      	movs	r2, #31
 8001eba:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <motor_config_assembler+0x7c>)
 8001ec0:	605a      	str	r2, [r3, #4]
		mc->init_irun = 4;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	725a      	strb	r2, [r3, #9]
	}
	mc->direction = jc->direction;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	729a      	strb	r2, [r3, #10]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	4079999a 	.word	0x4079999a
 8001ee4:	41233333 	.word	0x41233333

08001ee8 <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	if (JOINT_N == 1)
	{
		jconf->motor_gear_ratio = 50;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <joint_config_assembler+0x8c>)
 8001ef6:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 3;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <joint_config_assembler+0x90>)
 8001efc:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001f7c <joint_config_assembler+0x94>
 8001f08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1a:	ee17 2a90 	vmov	r2, s15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]
		jconf->direction = -1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	22ff      	movs	r2, #255	; 0xff
 8001f26:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	3304      	adds	r3, #4
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	3304      	adds	r3, #4
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	809a      	strh	r2, [r3, #4]

}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	42480000 	.word	0x42480000
 8001f78:	40400000 	.word	0x40400000
 8001f7c:	47480000 	.word	0x47480000

08001f80 <joint_config_write>:




void joint_config_write(joint_config * jc, joint_config_address * jc_a)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8001f8a:	2364      	movs	r3, #100	; 0x64
 8001f8c:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 8001f8e:	f7ff fc1f 	bl	80017d0 <at24_isConnected>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d025      	beq.n	8001fe4 <joint_config_write+0x64>
	{
		at24_write(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b298      	uxth	r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 0118 	add.w	r1, r3, #24
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	f7ff fc25 	bl	80017f4 <at24_write>
		os_delay(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f008 fb76 	bl	800a69c <HAL_Delay>
		at24_write(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	b298      	uxth	r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f103 011c 	add.w	r1, r3, #28
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	f7ff fc18 	bl	80017f4 <at24_write>
		os_delay(1);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f008 fb69 	bl	800a69c <HAL_Delay>
		at24_write(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	b298      	uxth	r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f103 0120 	add.w	r1, r3, #32
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	f7ff fc0b 	bl	80017f4 <at24_write>
		os_delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f008 fb5c 	bl	800a69c <HAL_Delay>
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <joint_config_read>:

void joint_config_read(joint_config * jc, joint_config_address * jc_a)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 8001ffa:	f7ff fbe9 	bl	80017d0 <at24_isConnected>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d025      	beq.n	8002050 <joint_config_read+0x64>
		{
		at24_read(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b298      	uxth	r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 0118 	add.w	r1, r3, #24
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2204      	movs	r2, #4
 8002012:	f7ff fc53 	bl	80018bc <at24_read>
		os_delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f008 fb40 	bl	800a69c <HAL_Delay>
		at24_read(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3302      	adds	r3, #2
 8002020:	b298      	uxth	r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 011c 	add.w	r1, r3, #28
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2204      	movs	r2, #4
 800202c:	f7ff fc46 	bl	80018bc <at24_read>
		os_delay(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f008 fb33 	bl	800a69c <HAL_Delay>
		at24_read(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	b298      	uxth	r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 0120 	add.w	r1, r3, #32
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2204      	movs	r2, #4
 8002046:	f7ff fc39 	bl	80018bc <at24_read>
		os_delay(1);
 800204a:	2001      	movs	r0, #1
 800204c:	f008 fb26 	bl	800a69c <HAL_Delay>
		}
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b094      	sub	sp, #80	; 0x50
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205e:	f008 faac 	bl	800a5ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002062:	f000 f873 	bl	800214c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002066:	f7ff fd37 	bl	8001ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 800206a:	f7ff fc5f 	bl	800192c <MX_DMA_Init>
  MX_FDCAN1_Init();
 800206e:	f7ff fc8f 	bl	8001990 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8002072:	f7ff fdd7 	bl	8001c24 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8002076:	f008 f939 	bl	800a2ec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800207a:	f007 fa25 	bl	80094c8 <MX_SPI1_Init>
  MX_SPI3_Init();
 800207e:	f007 fa61 	bl	8009544 <MX_SPI3_Init>
  MX_TIM8_Init();
 8002082:	f007 fc7d 	bl	8009980 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 8002086:	482c      	ldr	r0, [pc, #176]	; (8002138 <main+0xe0>)
 8002088:	f005 f9ec 	bl	8007464 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 800208c:	482a      	ldr	r0, [pc, #168]	; (8002138 <main+0xe0>)
 800208e:	f005 f945 	bl	800731c <setup_cyphal>
  HAL_Delay(10);
 8002092:	200a      	movs	r0, #10
 8002094:	f008 fb02 	bl	800a69c <HAL_Delay>
  joint_config_assembler(&jc, &jc_a);
 8002098:	4928      	ldr	r1, [pc, #160]	; (800213c <main+0xe4>)
 800209a:	4829      	ldr	r0, [pc, #164]	; (8002140 <main+0xe8>)
 800209c:	f7ff ff24 	bl	8001ee8 <joint_config_assembler>
  motor_config_assembler(&mc, &jc);
 80020a0:	4927      	ldr	r1, [pc, #156]	; (8002140 <main+0xe8>)
 80020a2:	4828      	ldr	r0, [pc, #160]	; (8002144 <main+0xec>)
 80020a4:	f7ff fee0 	bl	8001e68 <motor_config_assembler>
  joint_config_read(&jc, &jc_a);
 80020a8:	4924      	ldr	r1, [pc, #144]	; (800213c <main+0xe4>)
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <main+0xe8>)
 80020ac:	f7ff ff9e 	bl	8001fec <joint_config_read>
  HAL_Delay(10);
 80020b0:	200a      	movs	r0, #10
 80020b2:	f008 faf3 	bl	800a69c <HAL_Delay>
  tmc5160_init(&mc);
 80020b6:	4823      	ldr	r0, [pc, #140]	; (8002144 <main+0xec>)
 80020b8:	f007 ff62 	bl	8009f80 <tmc5160_init>
  HAL_Delay(10);
 80020bc:	200a      	movs	r0, #10
 80020be:	f008 faed 	bl	800a69c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	647b      	str	r3, [r7, #68]	; 0x44


  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 80020c6:	f008 fadd 	bl	800a684 <HAL_GetTick>
 80020ca:	64f8      	str	r0, [r7, #76]	; 0x4c
  uint32_t last_js = HAL_GetTick();
 80020cc:	f008 fada 	bl	800a684 <HAL_GetTick>
 80020d0:	64b8      	str	r0, [r7, #72]	; 0x48

  vec_4ax linear = {0};
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
  //rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
  //IMU_setup();

  while (1)
  {
      uint32_t now = HAL_GetTick();
 80020fa:	f008 fac3 	bl	800a684 <HAL_GetTick>
 80020fe:	6438      	str	r0, [r7, #64]	; 0x40
      if ( (now - last_hbeat) >= 1000) {
 8002100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800210a:	d303      	bcc.n	8002114 <main+0xbc>
          last_hbeat = now;
 800210c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
          heartbeat();
 8002110:	f005 f8d4 	bl	80072bc <heartbeat>
      	  //imu_get_gyro(&gyro);
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      if ( (now - last_js) >= 100) {
 8002114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b63      	cmp	r3, #99	; 0x63
 800211c:	d908      	bls.n	8002130 <main+0xd8>
    	  last_js = now;
 800211e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
    	  send_JS(&jc);
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <main+0xe8>)
 8002124:	f005 f888 	bl	8007238 <send_JS>
    	  as50_readAngle(&enc_angle, 100);
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <main+0xf0>)
 800212c:	f7ff fb1a 	bl	8001764 <as50_readAngle>
      }
      cyphal_loop();
 8002130:	f005 f98a 	bl	8007448 <cyphal_loop>
  {
 8002134:	e7e1      	b.n	80020fa <main+0xa2>
 8002136:	bf00      	nop
 8002138:	200002bc 	.word	0x200002bc
 800213c:	20000464 	.word	0x20000464
 8002140:	20000440 	.word	0x20000440
 8002144:	20000434 	.word	0x20000434
 8002148:	2000046a 	.word	0x2000046a

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b094      	sub	sp, #80	; 0x50
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	2238      	movs	r2, #56	; 0x38
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f012 fbf5 	bl	801494a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800216e:	2000      	movs	r0, #0
 8002170:	f00b f97e 	bl	800d470 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002174:	2301      	movs	r3, #1
 8002176:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	2303      	movs	r3, #3
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002186:	2301      	movs	r3, #1
 8002188:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800218a:	2328      	movs	r3, #40	; 0x28
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002192:	2302      	movs	r3, #2
 8002194:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002196:	2302      	movs	r3, #2
 8002198:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	4618      	mov	r0, r3
 80021a0:	f00b fa1a 	bl	800d5d8 <HAL_RCC_OscConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0x62>
  {
    Error_Handler();
 80021aa:	f000 f81a 	bl	80021e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ae:	230f      	movs	r3, #15
 80021b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b2:	2303      	movs	r3, #3
 80021b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2104      	movs	r1, #4
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00b fd16 	bl	800dbfc <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80021d6:	f000 f804 	bl	80021e2 <Error_Handler>
  }
}
 80021da:	bf00      	nop
 80021dc:	3750      	adds	r7, #80	; 0x50
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e6:	b672      	cpsid	i
}
 80021e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ea:	e7fe      	b.n	80021ea <Error_Handler+0x8>

080021ec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d019      	beq.n	800227a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3308      	adds	r3, #8
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	330c      	adds	r3, #12
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
        }
    }
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	4798      	blx	r3
    }
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ffd4 	bl	80022ae <_ZNSt14_Function_baseD1Ev>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZNSt8functionIFvvEED1Ev>:
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ffc7 	bl	80022ae <_ZNSt14_Function_baseD1Ev>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f005 f9b0 	bl	80076a0 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3310      	adds	r3, #16
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f005 f9d5 	bl	80076f6 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	08018aec 	.word	0x08018aec

08002384 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800238e:	480d      	ldr	r0, [pc, #52]	; (80023c4 <_Z7alloc_fP14CanardInstancej+0x40>)
 8002390:	f005 f9dc 	bl	800774c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002394:	4603      	mov	r3, r0
 8002396:	f083 0301 	eor.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f011 fa2d 	bl	8013800 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <_Z7alloc_fP14CanardInstancej+0x40>)
 80023a8:	f005 f9e1 	bl	800776e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	6814      	ldr	r4, [r2, #0]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	47a0      	blx	r4
 80023ba:	4603      	mov	r3, r0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	2000099c 	.word	0x2000099c

080023c8 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80023d2:	480d      	ldr	r0, [pc, #52]	; (8002408 <_Z6free_fP14CanardInstancePv+0x40>)
 80023d4:	f005 f9ba 	bl	800774c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80023d8:	4603      	mov	r3, r0
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f011 fa0b 	bl	8013800 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <_Z6free_fP14CanardInstancePv+0x40>)
 80023ec:	f005 f9bf 	bl	800776e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	3204      	adds	r2, #4
 80023f6:	6814      	ldr	r4, [r2, #0]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	47a0      	blx	r4
 8002400:	bf00      	nop
}
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	2000099c 	.word	0x2000099c

0800240c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 800241a:	4a0c      	ldr	r2, [pc, #48]	; (800244c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	330c      	adds	r3, #12
 8002434:	6839      	ldr	r1, [r7, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f010 fed6 	bl	80131e8 <canardTxInit>
        utilities(utilities)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	08018cb0 	.word	0x08018cb0

08002450 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	460b      	mov	r3, r1
 800245e:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	7afa      	ldrb	r2, [r7, #11]
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3308      	adds	r3, #8
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f005 f997 	bl	80077a6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2248      	movs	r2, #72	; 0x48
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	f7ff ffb5 	bl	800240c <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	08018c8c 	.word	0x08018c8c

080024bc <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff42 	bl	8002358 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	08018b70 	.word	0x08018b70

080024e8 <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80024f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f6:	eef0 7ae7 	vabs.f32	s15, s15
 80024fa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800252c <_ZSt8isfinitef+0x44>
 80024fe:	eef4 7a47 	vcmp.f32	s15, s14
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	bf8c      	ite	hi
 8002508:	2301      	movhi	r3, #1
 800250a:	2300      	movls	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f083 0301 	eor.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	7f7fffff 	.word	0x7f7fffff

08002530 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d201      	bcs.n	8002546 <nunavutChooseMin+0x16>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	e000      	b.n	8002548 <nunavutChooseMin+0x18>
 8002546:	683b      	ldr	r3, [r7, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	6978      	ldr	r0, [r7, #20]
 800256a:	f7ff ffe1 	bl	8002530 <nunavutChooseMin>
 800256e:	4602      	mov	r2, r0
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8002576:	6939      	ldr	r1, [r7, #16]
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ffd9 	bl	8002530 <nunavutChooseMin>
 800257e:	4603      	mov	r3, r0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b092      	sub	sp, #72	; 0x48
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8002596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	2b00      	cmp	r3, #0
 800259e:	d145      	bne.n	800262c <nunavutCopyBits+0xa4>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d140      	bne.n	800262c <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 80025b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 80025c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025ca:	f012 f9a4 	bl	8014916 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 80025da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 808a 	beq.w	80026f8 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 80025e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e8:	4413      	add	r3, r2
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 80025ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f0:	4413      	add	r3, r2
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 80025f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025f8:	2201      	movs	r2, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260e:	43db      	mvns	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4013      	ands	r3, r2
 8002614:	b2da      	uxtb	r2, r3
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	7819      	ldrb	r1, [r3, #0]
 800261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800261e:	400b      	ands	r3, r1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b2da      	uxtb	r2, r3
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	701a      	strb	r2, [r3, #0]
        }
    }
 800262a:	e065      	b.n	80026f8 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 800263c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8002644:	e053      	b.n	80026ee <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8002646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8002650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 800265a:	7dfa      	ldrb	r2, [r7, #23]
 800265c:	7dbb      	ldrb	r3, [r7, #22]
 800265e:	429a      	cmp	r2, r3
 8002660:	d901      	bls.n	8002666 <nunavutCopyBits+0xde>
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	e000      	b.n	8002668 <nunavutCopyBits+0xe0>
 8002666:	7dbb      	ldrb	r3, [r7, #22]
 8002668:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 800266a:	7d7b      	ldrb	r3, [r7, #21]
 800266c:	f1c3 0008 	rsb	r0, r3, #8
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	4619      	mov	r1, r3
 8002678:	f7ff ff5a 	bl	8002530 <nunavutChooseMin>
 800267c:	4603      	mov	r3, r0
 800267e:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8002680:	7d3b      	ldrb	r3, [r7, #20]
 8002682:	2201      	movs	r2, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	7dbb      	ldrb	r3, [r7, #22]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8002692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	fa42 f303 	asr.w	r3, r2, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	7dbb      	ldrb	r3, [r7, #22]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80026b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	43db      	mvns	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4013      	ands	r3, r2
 80026c2:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80026c4:	7cba      	ldrb	r2, [r7, #18]
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	4013      	ands	r3, r2
 80026ca:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80026cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	7c79      	ldrb	r1, [r7, #17]
 80026d6:	7c3a      	ldrb	r2, [r7, #16]
 80026d8:	430a      	orrs	r2, r1
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80026de:	7d3b      	ldrb	r3, [r7, #20]
 80026e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e2:	4413      	add	r3, r2
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 80026e6:	7d3b      	ldrb	r3, [r7, #20]
 80026e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026ea:	4413      	add	r3, r2
 80026ec:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d8a7      	bhi.n	8002646 <nunavutCopyBits+0xbe>
        }

    }
}
 80026f6:	e000      	b.n	80026fa <nunavutCopyBits+0x172>
    }
 80026f8:	bf00      	nop
}
 80026fa:	bf00      	nop
 80026fc:	3748      	adds	r7, #72	; 0x48
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b088      	sub	sp, #32
 8002706:	af02      	add	r7, sp, #8
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff1d 	bl	8002554 <nunavutSaturateBufferFragmentBitLength>
 800271a:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	18d0      	adds	r0, r2, r3
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	3307      	adds	r3, #7
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	461a      	mov	r2, r3
 8002732:	2100      	movs	r1, #0
 8002734:	f012 f909 	bl	801494a <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	2100      	movs	r1, #0
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff ff20 	bl	8002588 <nunavutCopyBits>
}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	00da      	lsls	r2, r3, #3
 8002760:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	440b      	add	r3, r1
 8002768:	429a      	cmp	r2, r3
 800276a:	d202      	bcs.n	8002772 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800276c:	f06f 0302 	mvn.w	r3, #2
 8002770:	e010      	b.n	8002794 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8002772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002776:	2140      	movs	r1, #64	; 0x40
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fed9 	bl	8002530 <nunavutChooseMin>
 800277e:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f107 0320 	add.w	r3, r7, #32
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff fefb 	bl	8002588 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	2110      	movs	r1, #16
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff febe 	bl	8002530 <nunavutChooseMin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	68b8      	ldr	r0, [r7, #8]
 80027bc:	f7ff feca 	bl	8002554 <nunavutSaturateBufferFragmentBitLength>
 80027c0:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80027c6:	f107 0012 	add.w	r0, r7, #18
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	2100      	movs	r1, #0
 80027d4:	f7ff fed8 	bl	8002588 <nunavutCopyBits>
    return val;
 80027d8:	8a7b      	ldrh	r3, [r7, #18]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b088      	sub	sp, #32
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	2120      	movs	r1, #32
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fe9b 	bl	8002530 <nunavutChooseMin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68b8      	ldr	r0, [r7, #8]
 8002802:	f7ff fea7 	bl	8002554 <nunavutSaturateBufferFragmentBitLength>
 8002806:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 800280c:	f107 0010 	add.w	r0, r7, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	2100      	movs	r1, #0
 800281a:	f7ff feb5 	bl	8002588 <nunavutCopyBits>
    return val;
 800281e:	693b      	ldr	r3, [r7, #16]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8002828:	b480      	push	{r7}
 800282a:	b08b      	sub	sp, #44	; 0x2c
 800282c:	af00      	add	r7, sp, #0
 800282e:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <nunavutFloat16Pack+0xb8>)
 8002834:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8002836:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800283a:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 800283c:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8002840:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8002842:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8002846:	613b      	str	r3, [r7, #16]
    in.real = value;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002852:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4053      	eors	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	429a      	cmp	r2, r3
 8002866:	d313      	bcc.n	8002890 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8002872:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8002876:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002878:	e025      	b.n	80028c6 <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	429a      	cmp	r2, r3
 8002880:	d902      	bls.n	8002888 <nunavutFloat16Pack+0x60>
 8002882:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002886:	e001      	b.n	800288c <nunavutFloat16Pack+0x64>
 8002888:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800288c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800288e:	e01a      	b.n	80028c6 <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002896:	f023 030f 	bic.w	r3, r3, #15
 800289a:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 800289c:	ed97 7a03 	vldr	s14, [r7, #12]
 80028a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d901      	bls.n	80028c0 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	0b5b      	lsrs	r3, r3, #13
 80028c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028ce:	4313      	orrs	r3, r2
 80028d0:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 80028d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	372c      	adds	r7, #44	; 0x2c
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	fffff000 	.word	0xfffff000

080028e4 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 80028ee:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 80028f2:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 80028f4:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 80028f8:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	035a      	lsls	r2, r3, #13
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <nunavutFloat16Unpack+0x6c>)
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8002904:	ed97 7a03 	vldr	s14, [r7, #12]
 8002908:	edd7 7a05 	vldr	s15, [r7, #20]
 800290c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002910:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8002914:	ed97 7a03 	vldr	s14, [r7, #12]
 8002918:	edd7 7a04 	vldr	s15, [r7, #16]
 800291c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	db03      	blt.n	800292e <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 800292c:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
    return out.real;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	ee07 3a90 	vmov	s15, r3
}
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	0fffe000 	.word	0x0fffe000

08002954 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8002960:	2310      	movs	r3, #16
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff ff18 	bl	800279c <nunavutGetU16>
 800296c:	4603      	mov	r3, r0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ffb8 	bl	80028e4 <nunavutFloat16Unpack>
 8002974:	eef0 7a40 	vmov.f32	s15, s0
}
 8002978:	eeb0 0a67 	vmov.f32	s0, s15
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 800298e:	2320      	movs	r3, #32
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ff24 	bl	80027e2 <nunavutGetU32>
 800299a:	4603      	mov	r3, r0
 800299c:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	ee07 3a90 	vmov	s15, r3
}
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08c      	sub	sp, #48	; 0x30
 80029b2:	af04      	add	r7, sp, #16
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <uavcan_node_Health_1_0_serialize_+0x1e>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <uavcan_node_Health_1_0_serialize_+0x1e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80029cc:	f06f 0301 	mvn.w	r3, #1
 80029d0:	e048      	b.n	8002a64 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	2b07      	cmp	r3, #7
 80029de:	d802      	bhi.n	80029e6 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80029e0:	f06f 0302 	mvn.w	r3, #2
 80029e4:	e03e      	b.n	8002a64 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80029f0:	7efb      	ldrb	r3, [r7, #27]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d901      	bls.n	80029fa <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 80029f6:	2303      	movs	r3, #3
 80029f8:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4413      	add	r3, r2
 8002a02:	7efa      	ldrb	r2, [r7, #27]
 8002a04:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d021      	beq.n	8002a5a <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f1c3 0308 	rsb	r3, r3, #8
 8002a24:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9cd 2300 	strd	r2, r3, [sp]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	68b8      	ldr	r0, [r7, #8]
 8002a3c:	f7ff fe88 	bl	8002750 <nunavutSetUxx>
 8002a40:	4603      	mov	r3, r0
 8002a42:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002a44:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da02      	bge.n	8002a52 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002a4c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002a50:	e008      	b.n	8002a64 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a92:	f06f 0301 	mvn.w	r3, #1
 8002a96:	e030      	b.n	8002afa <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002aa0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d30a      	bcc.n	8002ad2 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	08db      	lsrs	r3, r3, #3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e002      	b.n	8002ad8 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3302      	adds	r3, #2
 8002adc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3307      	adds	r3, #7
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff fd20 	bl	8002530 <nunavutChooseMin>
 8002af0:	4603      	mov	r3, r0
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	08018a38 	.word	0x08018a38

08002b08 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af04      	add	r7, sp, #16
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b26:	f06f 0301 	mvn.w	r3, #1
 8002b2a:	e048      	b.n	8002bbe <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	2b07      	cmp	r3, #7
 8002b38:	d802      	bhi.n	8002b40 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002b3a:	f06f 0302 	mvn.w	r3, #2
 8002b3e:	e03e      	b.n	8002bbe <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002b4a:	7efb      	ldrb	r3, [r7, #27]
 8002b4c:	2b07      	cmp	r3, #7
 8002b4e:	d901      	bls.n	8002b54 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002b50:	2307      	movs	r3, #7
 8002b52:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08db      	lsrs	r3, r3, #3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	7efa      	ldrb	r2, [r7, #27]
 8002b5e:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3303      	adds	r3, #3
 8002b64:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d021      	beq.n	8002bb4 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f1c3 0308 	rsb	r3, r3, #8
 8002b7e:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9cd 2300 	strd	r2, r3, [sp]
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	6979      	ldr	r1, [r7, #20]
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f7ff fddb 	bl	8002750 <nunavutSetUxx>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002b9e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da02      	bge.n	8002bac <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002ba6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002baa:	e008      	b.n	8002bbe <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002bee:	f06f 0301 	mvn.w	r3, #1
 8002bf2:	e030      	b.n	8002c56 <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002bfc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3303      	adds	r3, #3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d30a      	bcc.n	8002c2e <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e002      	b.n	8002c34 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3303      	adds	r3, #3
 8002c38:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3307      	adds	r3, #7
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
 8002c42:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff fc72 	bl	8002530 <nunavutChooseMin>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	08018a38 	.word	0x08018a38

08002c64 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c82:	f06f 0301 	mvn.w	r3, #1
 8002c86:	e0cf      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	2b37      	cmp	r3, #55	; 0x37
 8002c94:	d802      	bhi.n	8002c9c <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002c96:	f06f 0302 	mvn.w	r3, #2
 8002c9a:	e0c5      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	08db      	lsrs	r3, r3, #3
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d021      	beq.n	8002d02 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f1c3 0308 	rsb	r3, r3, #8
 8002ccc:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002cce:	7ffb      	ldrb	r3, [r7, #31]
 8002cd0:	9302      	str	r3, [sp, #8]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9cd 2300 	strd	r2, r3, [sp]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68b8      	ldr	r0, [r7, #8]
 8002ce4:	f7ff fd34 	bl	8002750 <nunavutSetUxx>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002cec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da02      	bge.n	8002cfa <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002cf4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002cf8:	e096      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	4413      	add	r3, r2
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	4413      	add	r3, r2
 8002d12:	f107 0214 	add.w	r2, r7, #20
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7ff fe49 	bl	80029ae <uavcan_node_Health_1_0_serialize_>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002d20:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da02      	bge.n	8002d2e <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002d28:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d2c:	e07c      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	4413      	add	r3, r2
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d021      	beq.n	8002d86 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f1c3 0308 	rsb	r3, r3, #8
 8002d50:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002d52:	7f3b      	ldrb	r3, [r7, #28]
 8002d54:	9302      	str	r3, [sp, #8]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68b8      	ldr	r0, [r7, #8]
 8002d68:	f7ff fcf2 	bl	8002750 <nunavutSetUxx>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002d70:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da02      	bge.n	8002d7e <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002d78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d7c:	e054      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002d7e:	7f3b      	ldrb	r3, [r7, #28]
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	4413      	add	r3, r2
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002d86:	2301      	movs	r3, #1
 8002d88:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	f107 0210 	add.w	r2, r7, #16
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7ff feb4 	bl	8002b08 <uavcan_node_Mode_1_0_serialize_>
 8002da0:	4603      	mov	r3, r0
 8002da2:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002da4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da02      	bge.n	8002db2 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002dac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002db0:	e03a      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	4413      	add	r3, r2
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	7992      	ldrb	r2, [r2, #6]
 8002dc8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	3308      	adds	r3, #8
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d021      	beq.n	8002e1e <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f1c3 0308 	rsb	r3, r3, #8
 8002de8:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002dea:	7e7b      	ldrb	r3, [r7, #25]
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9cd 2300 	strd	r2, r3, [sp]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68b8      	ldr	r0, [r7, #8]
 8002e00:	f7ff fca6 	bl	8002750 <nunavutSetUxx>
 8002e04:	4603      	mov	r3, r0
 8002e06:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002e08:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da02      	bge.n	8002e16 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002e10:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e14:	e008      	b.n	8002e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002e16:	7e7b      	ldrb	r3, [r7, #25]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	4413      	add	r3, r2
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e56:	f06f 0301 	mvn.w	r3, #1
 8002e5a:	e089      	b.n	8002f70 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002e64:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002e76:	2320      	movs	r3, #32
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7c:	68b8      	ldr	r0, [r7, #8]
 8002e7e:	f7ff fcb0 	bl	80027e2 <nunavutGetU32>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3320      	adds	r3, #32
 8002e8c:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3307      	adds	r3, #7
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	08db      	lsrs	r3, r3, #3
 8002e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fb46 	bl	8002530 <nunavutChooseMin>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f107 0214 	add.w	r2, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f7ff fdd5 	bl	8002a6c <uavcan_node_Health_1_0_deserialize_>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002ec6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da02      	bge.n	8002ed4 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002ece:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ed2:	e04d      	b.n	8002f70 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3307      	adds	r3, #7
 8002ee2:	f023 0307 	bic.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fb1e 	bl	8002530 <nunavutChooseMin>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	4413      	add	r3, r2
 8002f08:	f107 0210 	add.w	r2, r7, #16
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff fe5b 	bl	8002bc8 <uavcan_node_Mode_1_0_deserialize_>
 8002f12:	4603      	mov	r3, r0
 8002f14:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002f16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da02      	bge.n	8002f24 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002f1e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f22:	e025      	b.n	8002f70 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3308      	adds	r3, #8
 8002f32:	6a3a      	ldr	r2, [r7, #32]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d307      	bcc.n	8002f48 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	08db      	lsrs	r3, r3, #3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	4413      	add	r3, r2
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	719a      	strb	r2, [r3, #6]
 8002f46:	e002      	b.n	8002f4e <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3308      	adds	r3, #8
 8002f52:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3307      	adds	r3, #7
 8002f58:	f023 0307 	bic.w	r3, r3, #7
 8002f5c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002f5e:	6a39      	ldr	r1, [r7, #32]
 8002f60:	69f8      	ldr	r0, [r7, #28]
 8002f62:	f7ff fae5 	bl	8002530 <nunavutChooseMin>
 8002f66:	4603      	mov	r3, r0
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	08018a38 	.word	0x08018a38

08002f7c <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f9a:	f06f 0301 	mvn.w	r3, #1
 8002f9e:	e041      	b.n	8003024 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	2b1f      	cmp	r3, #31
 8002fac:	d802      	bhi.n	8002fb4 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002fae:	f06f 0302 	mvn.w	r3, #2
 8002fb2:	e037      	b.n	8003024 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3320      	adds	r3, #32
 8002fca:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d021      	beq.n	800301a <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f1c3 0308 	rsb	r3, r3, #8
 8002fe4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	9302      	str	r3, [sp, #8]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	69b9      	ldr	r1, [r7, #24]
 8002ffa:	68b8      	ldr	r0, [r7, #8]
 8002ffc:	f7ff fba8 	bl	8002750 <nunavutSetUxx>
 8003000:	4603      	mov	r3, r0
 8003002:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003004:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da02      	bge.n	8003012 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 800300c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003010:	e008      	b.n	8003024 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003052:	f06f 0301 	mvn.w	r3, #1
 8003056:	e027      	b.n	80030a8 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8003060:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	69f9      	ldr	r1, [r7, #28]
 8003076:	68b8      	ldr	r0, [r7, #8]
 8003078:	f7ff fc83 	bl	8002982 <nunavutGetF32>
 800307c:	eef0 7a40 	vmov.f32	s15, s0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3320      	adds	r3, #32
 800308a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3307      	adds	r3, #7
 8003090:	f023 0307 	bic.w	r3, r3, #7
 8003094:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f7ff fa49 	bl	8002530 <nunavutChooseMin>
 800309e:	4603      	mov	r3, r0
 80030a0:	08da      	lsrs	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	08018a38 	.word	0x08018a38

080030b4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af04      	add	r7, sp, #16
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030d2:	f06f 0301 	mvn.w	r3, #1
 80030d6:	e041      	b.n	800315c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	2b1f      	cmp	r3, #31
 80030e4:	d802      	bhi.n	80030ec <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80030e6:	f06f 0302 	mvn.w	r3, #2
 80030ea:	e037      	b.n	800315c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4413      	add	r3, r2
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3320      	adds	r3, #32
 8003102:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	2b00      	cmp	r3, #0
 800310c:	d021      	beq.n	8003152 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f1c3 0308 	rsb	r3, r3, #8
 800311c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	9302      	str	r3, [sp, #8]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9cd 2300 	strd	r2, r3, [sp]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	68b8      	ldr	r0, [r7, #8]
 8003134:	f7ff fb0c 	bl	8002750 <nunavutSetUxx>
 8003138:	4603      	mov	r3, r0
 800313a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800313c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003140:	2b00      	cmp	r3, #0
 8003142:	da02      	bge.n	800314a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8003144:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003148:	e008      	b.n	800315c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	08da      	lsrs	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800318a:	f06f 0301 	mvn.w	r3, #1
 800318e:	e027      	b.n	80031e0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8003198:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	69f9      	ldr	r1, [r7, #28]
 80031ae:	68b8      	ldr	r0, [r7, #8]
 80031b0:	f7ff fbe7 	bl	8002982 <nunavutGetF32>
 80031b4:	eef0 7a40 	vmov.f32	s15, s0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3320      	adds	r3, #32
 80031c2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3307      	adds	r3, #7
 80031c8:	f023 0307 	bic.w	r3, r3, #7
 80031cc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	6978      	ldr	r0, [r7, #20]
 80031d2:	f7ff f9ad 	bl	8002530 <nunavutChooseMin>
 80031d6:	4603      	mov	r3, r0
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	08018a38 	.word	0x08018a38

080031ec <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af04      	add	r7, sp, #16
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800320a:	f06f 0301 	mvn.w	r3, #1
 800320e:	e041      	b.n	8003294 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	2b1f      	cmp	r3, #31
 800321c:	d802      	bhi.n	8003224 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800321e:	f06f 0302 	mvn.w	r3, #2
 8003222:	e037      	b.n	8003294 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	08db      	lsrs	r3, r3, #3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	4413      	add	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3320      	adds	r3, #32
 800323a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	2b00      	cmp	r3, #0
 8003244:	d021      	beq.n	800328a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f1c3 0308 	rsb	r3, r3, #8
 8003254:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9cd 2300 	strd	r2, r3, [sp]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	68b8      	ldr	r0, [r7, #8]
 800326c:	f7ff fa70 	bl	8002750 <nunavutSetUxx>
 8003270:	4603      	mov	r3, r0
 8003272:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003274:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003278:	2b00      	cmp	r3, #0
 800327a:	da02      	bge.n	8003282 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 800327c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003280:	e008      	b.n	8003294 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032c2:	f06f 0301 	mvn.w	r3, #1
 80032c6:	e027      	b.n	8003318 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 80032d0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	69f9      	ldr	r1, [r7, #28]
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f7ff fb4b 	bl	8002982 <nunavutGetF32>
 80032ec:	eef0 7a40 	vmov.f32	s15, s0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3320      	adds	r3, #32
 80032fa:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3307      	adds	r3, #7
 8003300:	f023 0307 	bic.w	r3, r3, #7
 8003304:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	6978      	ldr	r0, [r7, #20]
 800330a:	f7ff f911 	bl	8002530 <nunavutChooseMin>
 800330e:	4603      	mov	r3, r0
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	08018a38 	.word	0x08018a38

08003324 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b090      	sub	sp, #64	; 0x40
 8003328:	af04      	add	r7, sp, #16
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003342:	f06f 0301 	mvn.w	r3, #1
 8003346:	e0e4      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	2b5f      	cmp	r3, #95	; 0x5f
 8003354:	d802      	bhi.n	800335c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003356:	f06f 0302 	mvn.w	r3, #2
 800335a:	e0da      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 8003360:	2304      	movs	r3, #4
 8003362:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 8003364:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	f107 0218 	add.w	r2, r7, #24
 8003372:	4619      	mov	r1, r3
 8003374:	f7ff fe02 	bl	8002f7c <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 800337e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003382:	2b00      	cmp	r3, #0
 8003384:	da02      	bge.n	800338c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 8003386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800338a:	e0c2      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003392:	4413      	add	r3, r2
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	2b00      	cmp	r3, #0
 800339e:	d025      	beq.n	80033ec <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f1c3 0308 	rsb	r3, r3, #8
 80033ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80033b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9cd 2300 	strd	r2, r3, [sp]
 80033c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff f9c1 	bl	8002750 <nunavutSetUxx>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 80033d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da02      	bge.n	80033e2 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 80033dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80033e0:	e097      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 80033e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e8:	4413      	add	r3, r2
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 80033ec:	2304      	movs	r3, #4
 80033ee:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	4413      	add	r3, r2
 80033fc:	f107 0214 	add.w	r2, r7, #20
 8003400:	4619      	mov	r1, r3
 8003402:	f7ff fef3 	bl	80031ec <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 800340c:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	da02      	bge.n	800341a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8003414:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003418:	e07b      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003420:	4413      	add	r3, r2
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	2b00      	cmp	r3, #0
 800342c:	d025      	beq.n	800347a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f1c3 0308 	rsb	r3, r3, #8
 800343c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003444:	9302      	str	r3, [sp, #8]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9cd 2300 	strd	r2, r3, [sp]
 8003452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003456:	68b8      	ldr	r0, [r7, #8]
 8003458:	f7ff f97a 	bl	8002750 <nunavutSetUxx>
 800345c:	4603      	mov	r3, r0
 800345e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 8003462:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003466:	2b00      	cmp	r3, #0
 8003468:	da02      	bge.n	8003470 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 800346a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800346e:	e050      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 8003470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003476:	4413      	add	r3, r2
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 800347a:	2304      	movs	r3, #4
 800347c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4413      	add	r3, r2
 800348c:	f107 0210 	add.w	r2, r7, #16
 8003490:	4619      	mov	r1, r3
 8003492:	f7ff fe0f 	bl	80030b4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 800349c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da02      	bge.n	80034aa <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 80034a4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80034a8:	e033      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	4413      	add	r3, r2
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d024      	beq.n	8003508 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f1c3 0308 	rsb	r3, r3, #8
 80034cc:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80034d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9cd 2300 	strd	r2, r3, [sp]
 80034e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e6:	68b8      	ldr	r0, [r7, #8]
 80034e8:	f7ff f932 	bl	8002750 <nunavutSetUxx>
 80034ec:	4603      	mov	r3, r0
 80034ee:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 80034f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da02      	bge.n	80034fe <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 80034f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034fc:	e009      	b.n	8003512 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 80034fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003504:	4413      	add	r3, r2
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	08da      	lsrs	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3730      	adds	r7, #48	; 0x30
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d006      	beq.n	8003542 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003542:	f06f 0301 	mvn.w	r3, #1
 8003546:	e090      	b.n	800366a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8003550:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe ffe1 	bl	8002530 <nunavutChooseMin>
 800356e:	4602      	mov	r2, r0
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8003576:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	4413      	add	r3, r2
 8003580:	f107 021c 	add.w	r2, r7, #28
 8003584:	4619      	mov	r1, r3
 8003586:	f7ff fd51 	bl	800302c <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 800358a:	4603      	mov	r3, r0
 800358c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8003590:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003594:	2b00      	cmp	r3, #0
 8003596:	da02      	bge.n	800359e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8003598:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800359c:	e065      	b.n	800366a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	4413      	add	r3, r2
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	3307      	adds	r3, #7
 80035ac:	f023 0307 	bic.w	r3, r3, #7
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	08db      	lsrs	r3, r3, #3
 80035b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ffb9 	bl	8002530 <nunavutChooseMin>
 80035be:	4602      	mov	r2, r0
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4413      	add	r3, r2
 80035d2:	f107 0218 	add.w	r2, r7, #24
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7ff fe60 	bl	800329c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 80035e2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da02      	bge.n	80035f0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 80035ea:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80035ee:	e03c      	b.n	800366a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4413      	add	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	3307      	adds	r3, #7
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	08db      	lsrs	r3, r3, #3
 8003608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe ff90 	bl	8002530 <nunavutChooseMin>
 8003610:	4602      	mov	r2, r0
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	f107 0214 	add.w	r2, r7, #20
 800362a:	4619      	mov	r1, r3
 800362c:	f7ff fd9a 	bl	8003164 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8003636:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800363a:	2b00      	cmp	r3, #0
 800363c:	da02      	bge.n	8003644 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 800363e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003642:	e012      	b.n	800366a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	4413      	add	r3, r2
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	3307      	adds	r3, #7
 8003652:	f023 0307 	bic.w	r3, r3, #7
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800365c:	f7fe ff68 	bl	8002530 <nunavutChooseMin>
 8003660:	4603      	mov	r3, r0
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3730      	adds	r7, #48	; 0x30
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	08018a38 	.word	0x08018a38

08003678 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <uavcan_register_Name_1_0_deserialize_+0x26>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <uavcan_register_Name_1_0_deserialize_+0x26>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <uavcan_register_Name_1_0_deserialize_+0x2c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800369e:	f06f 0301 	mvn.w	r3, #1
 80036a2:	e04a      	b.n	800373a <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80036aa:	4b26      	ldr	r3, [pc, #152]	; (8003744 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 80036ac:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3308      	adds	r3, #8
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d309      	bcc.n	80036dc <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	08db      	lsrs	r3, r3, #3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4413      	add	r3, r2
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80036da:	e003      	b.n	80036e4 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3308      	adds	r3, #8
 80036e8:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80036f0:	2bff      	cmp	r3, #255	; 0xff
 80036f2:	d902      	bls.n	80036fa <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80036f4:	f06f 0309 	mvn.w	r3, #9
 80036f8:	e01f      	b.n	800373a <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	f7fe fff9 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	3307      	adds	r3, #7
 8003722:	f023 0307 	bic.w	r3, r3, #7
 8003726:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003728:	69b9      	ldr	r1, [r7, #24]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7fe ff00 	bl	8002530 <nunavutChooseMin>
 8003730:	4603      	mov	r3, r0
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	08018a38 	.word	0x08018a38

08003748 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	; 0x30
 800374c:	af04      	add	r7, sp, #16
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003766:	f06f 0301 	mvn.w	r3, #1
 800376a:	e05e      	b.n	800382a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800377a:	d202      	bcs.n	8003782 <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800377c:	f06f 0302 	mvn.w	r3, #2
 8003780:	e053      	b.n	800382a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003790:	d902      	bls.n	8003798 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003792:	f06f 0309 	mvn.w	r3, #9
 8003796:	e048      	b.n	800382a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	08db      	lsrs	r3, r3, #3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4413      	add	r3, r2
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80037a6:	8812      	ldrh	r2, [r2, #0]
 80037a8:	b292      	uxth	r2, r2
 80037aa:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3310      	adds	r3, #16
 80037b0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2100      	movs	r1, #0
 80037bc:	9100      	str	r1, [sp, #0]
 80037be:	69f9      	ldr	r1, [r7, #28]
 80037c0:	68b8      	ldr	r0, [r7, #8]
 80037c2:	f7fe fee1 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d021      	beq.n	8003820 <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f1c3 0308 	rsb	r3, r3, #8
 80037ea:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9cd 2300 	strd	r2, r3, [sp]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	68b8      	ldr	r0, [r7, #8]
 8003802:	f7fe ffa5 	bl	8002750 <nunavutSetUxx>
 8003806:	4603      	mov	r3, r0
 8003808:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800380a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800380e:	2b00      	cmp	r3, #0
 8003810:	da02      	bge.n	8003818 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 8003812:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003816:	e008      	b.n	800382a <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800385a:	f06f 0301 	mvn.w	r3, #1
 800385e:	e041      	b.n	80038e4 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003866:	4b21      	ldr	r3, [pc, #132]	; (80038ec <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 8003868:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800387a:	2310      	movs	r3, #16
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	69f9      	ldr	r1, [r7, #28]
 8003880:	68b8      	ldr	r0, [r7, #8]
 8003882:	f7fe ff8b 	bl	800279c <nunavutGetU16>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3310      	adds	r3, #16
 8003894:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	d902      	bls.n	80038a8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80038a2:	f06f 0309 	mvn.w	r3, #9
 80038a6:	e01d      	b.n	80038e4 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	f7fe ff23 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4413      	add	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3307      	adds	r3, #7
 80038cc:	f023 0307 	bic.w	r3, r3, #7
 80038d0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7fe fe2b 	bl	8002530 <nunavutChooseMin>
 80038da:	4603      	mov	r3, r0
 80038dc:	08da      	lsrs	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	08018a38 	.word	0x08018a38

080038f0 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	; 0x30
 80038f4:	af04      	add	r7, sp, #16
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800390e:	f06f 0301 	mvn.w	r3, #1
 8003912:	e05f      	b.n	80039d4 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	f640 0207 	movw	r2, #2055	; 0x807
 8003922:	4293      	cmp	r3, r2
 8003924:	d802      	bhi.n	800392c <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003926:	f06f 0302 	mvn.w	r3, #2
 800392a:	e053      	b.n	80039d4 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003936:	2b80      	cmp	r3, #128	; 0x80
 8003938:	d902      	bls.n	8003940 <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800393a:	f06f 0309 	mvn.w	r3, #9
 800393e:	e049      	b.n	80039d4 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4413      	add	r3, r2
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3308      	adds	r3, #8
 8003956:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800395e:	011a      	lsls	r2, r3, #4
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2100      	movs	r1, #0
 8003964:	9100      	str	r1, [sp, #0]
 8003966:	69f9      	ldr	r1, [r7, #28]
 8003968:	68b8      	ldr	r0, [r7, #8]
 800396a:	f7fe fe0d 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	2b00      	cmp	r3, #0
 8003984:	d021      	beq.n	80039ca <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f1c3 0308 	rsb	r3, r3, #8
 8003994:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9cd 2300 	strd	r2, r3, [sp]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	69b9      	ldr	r1, [r7, #24]
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	f7fe fed0 	bl	8002750 <nunavutSetUxx>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80039b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da02      	bge.n	80039c2 <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80039bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039c0:	e008      	b.n	80039d4 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	08da      	lsrs	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a02:	f06f 0301 	mvn.w	r3, #1
 8003a06:	e04a      	b.n	8003a9e <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 8003a10:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3308      	adds	r3, #8
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d309      	bcc.n	8003a40 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	4413      	add	r3, r2
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003a3e:	e003      	b.n	8003a48 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d902      	bls.n	8003a5e <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003a58:	f06f 0309 	mvn.w	r3, #9
 8003a5c:	e01f      	b.n	8003a9e <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	f7fe fe47 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4413      	add	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3307      	adds	r3, #7
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7fe fd4e 	bl	8002530 <nunavutChooseMin>
 8003a94:	4603      	mov	r3, r0
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08018a38 	.word	0x08018a38

08003aac <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af04      	add	r7, sp, #16
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003aca:	f06f 0301 	mvn.w	r3, #1
 8003ace:	e05f      	b.n	8003b90 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f640 0207 	movw	r2, #2055	; 0x807
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d802      	bhi.n	8003ae8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003ae2:	f06f 0302 	mvn.w	r3, #2
 8003ae6:	e053      	b.n	8003b90 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d902      	bls.n	8003afc <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003af6:	f06f 0309 	mvn.w	r3, #9
 8003afa:	e049      	b.n	8003b90 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	b2ca      	uxtb	r2, r1
 8003b0c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3308      	adds	r3, #8
 8003b12:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	9100      	str	r1, [sp, #0]
 8003b22:	69f9      	ldr	r1, [r7, #28]
 8003b24:	68b8      	ldr	r0, [r7, #8]
 8003b26:	f7fe fd2f 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d021      	beq.n	8003b86 <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f1c3 0308 	rsb	r3, r3, #8
 8003b50:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	9302      	str	r3, [sp, #8]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9cd 2300 	strd	r2, r3, [sp]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f7fe fdf2 	bl	8002750 <nunavutSetUxx>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003b70:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da02      	bge.n	8003b7e <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003b78:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003b7c:	e008      	b.n	8003b90 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	08da      	lsrs	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003bbe:	f06f 0301 	mvn.w	r3, #1
 8003bc2:	e04a      	b.n	8003c5a <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 8003bcc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3308      	adds	r3, #8
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d309      	bcc.n	8003bfc <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003bfa:	e003      	b.n	8003c04 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3308      	adds	r3, #8
 8003c08:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d902      	bls.n	8003c1a <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003c14:	f06f 0309 	mvn.w	r3, #9
 8003c18:	e01f      	b.n	8003c5a <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c22:	015b      	lsls	r3, r3, #5
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	f7fe fd69 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c36:	015b      	lsls	r3, r3, #5
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3307      	adds	r3, #7
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7fe fc70 	bl	8002530 <nunavutChooseMin>
 8003c50:	4603      	mov	r3, r0
 8003c52:	08da      	lsrs	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08018a38 	.word	0x08018a38

08003c68 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af04      	add	r7, sp, #16
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c86:	f06f 0301 	mvn.w	r3, #1
 8003c8a:	e05f      	b.n	8003d4c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	f640 0207 	movw	r2, #2055	; 0x807
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d802      	bhi.n	8003ca4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003c9e:	f06f 0302 	mvn.w	r3, #2
 8003ca2:	e053      	b.n	8003d4c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d902      	bls.n	8003cb8 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003cb2:	f06f 0309 	mvn.w	r3, #9
 8003cb6:	e049      	b.n	8003d4c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2ca      	uxtb	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cd6:	019a      	lsls	r2, r3, #6
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	9100      	str	r1, [sp, #0]
 8003cde:	69f9      	ldr	r1, [r7, #28]
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	f7fe fc51 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d021      	beq.n	8003d42 <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f1c3 0308 	rsb	r3, r3, #8
 8003d0c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	9302      	str	r3, [sp, #8]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f7fe fd14 	bl	8002750 <nunavutSetUxx>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003d2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da02      	bge.n	8003d3a <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003d34:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d38:	e008      	b.n	8003d4c <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d7a:	f06f 0301 	mvn.w	r3, #1
 8003d7e:	e04a      	b.n	8003e16 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003d88:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d309      	bcc.n	8003db8 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003db6:	e003      	b.n	8003dc0 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d902      	bls.n	8003dd6 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003dd0:	f06f 0309 	mvn.w	r3, #9
 8003dd4:	e01f      	b.n	8003e16 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	f7fe fc8b 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003df2:	019b      	lsls	r3, r3, #6
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4413      	add	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3307      	adds	r3, #7
 8003dfe:	f023 0307 	bic.w	r3, r3, #7
 8003e02:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7fe fb92 	bl	8002530 <nunavutChooseMin>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08018a38 	.word	0x08018a38

08003e24 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08c      	sub	sp, #48	; 0x30
 8003e28:	af04      	add	r7, sp, #16
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e42:	f06f 0301 	mvn.w	r3, #1
 8003e46:	e060      	b.n	8003f0a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003e56:	d202      	bcs.n	8003e5e <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003e58:	f06f 0302 	mvn.w	r3, #2
 8003e5c:	e055      	b.n	8003f0a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d902      	bls.n	8003e74 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e6e:	f06f 0309 	mvn.w	r3, #9
 8003e72:	e04a      	b.n	8003f0a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	b292      	uxth	r2, r2
 8003e86:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3310      	adds	r3, #16
 8003e8c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e94:	00da      	lsls	r2, r3, #3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	9100      	str	r1, [sp, #0]
 8003e9c:	69f9      	ldr	r1, [r7, #28]
 8003e9e:	68b8      	ldr	r0, [r7, #8]
 8003ea0:	f7fe fb72 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d021      	beq.n	8003f00 <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f1c3 0308 	rsb	r3, r3, #8
 8003eca:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9cd 2300 	strd	r2, r3, [sp]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f7fe fc35 	bl	8002750 <nunavutSetUxx>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003eea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da02      	bge.n	8003ef8 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003ef2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ef6:	e008      	b.n	8003f0a <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	08da      	lsrs	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003f3a:	f06f 0301 	mvn.w	r3, #1
 8003f3e:	e043      	b.n	8003fc8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003f48:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	69f9      	ldr	r1, [r7, #28]
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f7fe fc1b 	bl	800279c <nunavutGetU16>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	3310      	adds	r3, #16
 8003f74:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f80:	d902      	bls.n	8003f88 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f82:	f06f 0309 	mvn.w	r3, #9
 8003f86:	e01f      	b.n	8003fc8 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	f7fe fbb2 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4413      	add	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3307      	adds	r3, #7
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	6978      	ldr	r0, [r7, #20]
 8003fba:	f7fe fab9 	bl	8002530 <nunavutChooseMin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	08da      	lsrs	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	08018a38 	.word	0x08018a38

08003fd4 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af04      	add	r7, sp, #16
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ff2:	f06f 0301 	mvn.w	r3, #1
 8003ff6:	e05f      	b.n	80040b8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	f640 0207 	movw	r2, #2055	; 0x807
 8004006:	4293      	cmp	r3, r2
 8004008:	d802      	bhi.n	8004010 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800400a:	f06f 0302 	mvn.w	r3, #2
 800400e:	e053      	b.n	80040b8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d902      	bls.n	8004024 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800401e:	f06f 0309 	mvn.w	r3, #9
 8004022:	e049      	b.n	80040b8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	b2ca      	uxtb	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3308      	adds	r3, #8
 800403a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004042:	011a      	lsls	r2, r3, #4
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2100      	movs	r1, #0
 8004048:	9100      	str	r1, [sp, #0]
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	f7fe fa9b 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d021      	beq.n	80040ae <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f1c3 0308 	rsb	r3, r3, #8
 8004078:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9cd 2300 	strd	r2, r3, [sp]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f7fe fb5e 	bl	8002750 <nunavutSetUxx>
 8004094:	4603      	mov	r3, r0
 8004096:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004098:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800409c:	2b00      	cmp	r3, #0
 800409e:	da02      	bge.n	80040a6 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80040a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80040a4:	e008      	b.n	80040b8 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	08da      	lsrs	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80040e6:	f06f 0301 	mvn.w	r3, #1
 80040ea:	e04a      	b.n	8004182 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 80040f4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3308      	adds	r3, #8
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d309      	bcc.n	8004124 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	08db      	lsrs	r3, r3, #3
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004122:	e003      	b.n	800412c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3308      	adds	r3, #8
 8004130:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d902      	bls.n	8004142 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800413c:	f06f 0309 	mvn.w	r3, #9
 8004140:	e01f      	b.n	8004182 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	f7fe fad5 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4413      	add	r3, r2
 8004164:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3307      	adds	r3, #7
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7fe f9dc 	bl	8002530 <nunavutChooseMin>
 8004178:	4603      	mov	r3, r0
 800417a:	08da      	lsrs	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	08018a38 	.word	0x08018a38

08004190 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af04      	add	r7, sp, #16
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80041ae:	f06f 0301 	mvn.w	r3, #1
 80041b2:	e05f      	b.n	8004274 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	f640 0207 	movw	r2, #2055	; 0x807
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80041c6:	f06f 0302 	mvn.w	r3, #2
 80041ca:	e053      	b.n	8004274 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d902      	bls.n	80041e0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80041da:	f06f 0309 	mvn.w	r3, #9
 80041de:	e049      	b.n	8004274 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	b2ca      	uxtb	r2, r1
 80041f0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3308      	adds	r3, #8
 80041f6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2100      	movs	r1, #0
 8004204:	9100      	str	r1, [sp, #0]
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f7fe f9bd 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004214:	015b      	lsls	r3, r3, #5
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d021      	beq.n	800426a <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f1c3 0308 	rsb	r3, r3, #8
 8004234:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	9302      	str	r3, [sp, #8]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9cd 2300 	strd	r2, r3, [sp]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	68b8      	ldr	r0, [r7, #8]
 800424c:	f7fe fa80 	bl	8002750 <nunavutSetUxx>
 8004250:	4603      	mov	r3, r0
 8004252:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004254:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da02      	bge.n	8004262 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 800425c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004260:	e008      	b.n	8004274 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	08da      	lsrs	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80042a2:	f06f 0301 	mvn.w	r3, #1
 80042a6:	e04a      	b.n	800433e <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 80042b0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	3308      	adds	r3, #8
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d309      	bcc.n	80042e0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80042de:	e003      	b.n	80042e8 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3308      	adds	r3, #8
 80042ec:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d902      	bls.n	80042fe <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042f8:	f06f 0309 	mvn.w	r3, #9
 80042fc:	e01f      	b.n	800433e <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	f7fe f9f7 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3307      	adds	r3, #7
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7fe f8fe 	bl	8002530 <nunavutChooseMin>
 8004334:	4603      	mov	r3, r0
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	08018a38 	.word	0x08018a38

0800434c <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af04      	add	r7, sp, #16
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800436a:	f06f 0301 	mvn.w	r3, #1
 800436e:	e05f      	b.n	8004430 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	f640 0207 	movw	r2, #2055	; 0x807
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004382:	f06f 0302 	mvn.w	r3, #2
 8004386:	e053      	b.n	8004430 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004392:	2b20      	cmp	r3, #32
 8004394:	d902      	bls.n	800439c <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004396:	f06f 0309 	mvn.w	r3, #9
 800439a:	e049      	b.n	8004430 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4413      	add	r3, r2
 80043aa:	b2ca      	uxtb	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3308      	adds	r3, #8
 80043b2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043ba:	019a      	lsls	r2, r3, #6
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2100      	movs	r1, #0
 80043c0:	9100      	str	r1, [sp, #0]
 80043c2:	69f9      	ldr	r1, [r7, #28]
 80043c4:	68b8      	ldr	r0, [r7, #8]
 80043c6:	f7fe f8df 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d021      	beq.n	8004426 <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f1c3 0308 	rsb	r3, r3, #8
 80043f0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	9302      	str	r3, [sp, #8]
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	e9cd 2300 	strd	r2, r3, [sp]
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	68b8      	ldr	r0, [r7, #8]
 8004408:	f7fe f9a2 	bl	8002750 <nunavutSetUxx>
 800440c:	4603      	mov	r3, r0
 800440e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004410:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da02      	bge.n	800441e <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004418:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800441c:	e008      	b.n	8004430 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800445e:	f06f 0301 	mvn.w	r3, #1
 8004462:	e04a      	b.n	80044fa <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 800446c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	3308      	adds	r3, #8
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	429a      	cmp	r2, r3
 8004486:	d309      	bcc.n	800449c <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	08db      	lsrs	r3, r3, #3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800449a:	e003      	b.n	80044a4 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3308      	adds	r3, #8
 80044a8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d902      	bls.n	80044ba <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80044b4:	f06f 0309 	mvn.w	r3, #9
 80044b8:	e01f      	b.n	80044fa <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044c2:	019b      	lsls	r3, r3, #6
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	f7fe f919 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044d6:	019b      	lsls	r3, r3, #6
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3307      	adds	r3, #7
 80044e2:	f023 0307 	bic.w	r3, r3, #7
 80044e6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7fe f820 	bl	8002530 <nunavutChooseMin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	08018a38 	.word	0x08018a38

08004508 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08c      	sub	sp, #48	; 0x30
 800450c:	af04      	add	r7, sp, #16
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004526:	f06f 0301 	mvn.w	r3, #1
 800452a:	e060      	b.n	80045ee <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800453a:	d202      	bcs.n	8004542 <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800453c:	f06f 0302 	mvn.w	r3, #2
 8004540:	e055      	b.n	80045ee <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d902      	bls.n	8004558 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004552:	f06f 0309 	mvn.w	r3, #9
 8004556:	e04a      	b.n	80045ee <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	08db      	lsrs	r3, r3, #3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	4413      	add	r3, r2
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004566:	8812      	ldrh	r2, [r2, #0]
 8004568:	b292      	uxth	r2, r2
 800456a:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	3310      	adds	r3, #16
 8004570:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004578:	00da      	lsls	r2, r3, #3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2100      	movs	r1, #0
 800457e:	9100      	str	r1, [sp, #0]
 8004580:	69f9      	ldr	r1, [r7, #28]
 8004582:	68b8      	ldr	r0, [r7, #8]
 8004584:	f7fe f800 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	2b00      	cmp	r3, #0
 800459e:	d021      	beq.n	80045e4 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f1c3 0308 	rsb	r3, r3, #8
 80045ae:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	9302      	str	r3, [sp, #8]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9cd 2300 	strd	r2, r3, [sp]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	69b9      	ldr	r1, [r7, #24]
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f7fe f8c3 	bl	8002750 <nunavutSetUxx>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80045ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da02      	bge.n	80045dc <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 80045d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045da:	e008      	b.n	80045ee <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	08da      	lsrs	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800461e:	f06f 0301 	mvn.w	r3, #1
 8004622:	e043      	b.n	80046ac <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 800462c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800463e:	2310      	movs	r3, #16
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	69f9      	ldr	r1, [r7, #28]
 8004644:	68b8      	ldr	r0, [r7, #8]
 8004646:	f7fe f8a9 	bl	800279c <nunavutGetU16>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3310      	adds	r3, #16
 8004658:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004664:	d902      	bls.n	800466c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004666:	f06f 0309 	mvn.w	r3, #9
 800466a:	e01f      	b.n	80046ac <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	f7fe f840 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4413      	add	r3, r2
 800468e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3307      	adds	r3, #7
 8004694:	f023 0307 	bic.w	r3, r3, #7
 8004698:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	f7fd ff47 	bl	8002530 <nunavutChooseMin>
 80046a2:	4603      	mov	r3, r0
 80046a4:	08da      	lsrs	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08018a38 	.word	0x08018a38

080046b8 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	; 0x38
 80046bc:	af04      	add	r7, sp, #16
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80046d6:	f06f 0301 	mvn.w	r3, #1
 80046da:	e08b      	b.n	80047f4 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	f640 0207 	movw	r2, #2055	; 0x807
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d802      	bhi.n	80046f4 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80046ee:	f06f 0302 	mvn.w	r3, #2
 80046f2:	e07f      	b.n	80047f4 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d902      	bls.n	8004708 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004702:	f06f 0309 	mvn.w	r3, #9
 8004706:	e075      	b.n	80047f4 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4413      	add	r3, r2
 8004716:	b2ca      	uxtb	r2, r1
 8004718:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	3308      	adds	r3, #8
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004720:	2300      	movs	r3, #0
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	e034      	b.n	8004790 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 8004732:	ed97 0a07 	vldr	s0, [r7, #28]
 8004736:	f7fd fed7 	bl	80024e8 <_ZSt8isfinitef>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8004740:	edd7 7a07 	vldr	s15, [r7, #28]
 8004744:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80047fc <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 8004748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004750:	d501      	bpl.n	8004756 <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 8004752:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 8004754:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 8004756:	edd7 7a07 	vldr	s15, [r7, #28]
 800475a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004804 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 800475e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	dd01      	ble.n	800476c <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 800476a:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 800476c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004770:	f7fe f85a 	bl	8002828 <nunavutFloat16Pack>
 8004774:	4603      	mov	r3, r0
 8004776:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	08db      	lsrs	r3, r3, #3
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	4413      	add	r3, r2
 8004780:	8aba      	ldrh	r2, [r7, #20]
 8004782:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	3310      	adds	r3, #16
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	3301      	adds	r3, #1
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	429a      	cmp	r2, r3
 800479a:	d3c4      	bcc.n	8004726 <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d021      	beq.n	80047ea <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f1c3 0308 	rsb	r3, r3, #8
 80047b4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9cd 2300 	strd	r2, r3, [sp]
 80047c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c8:	69b9      	ldr	r1, [r7, #24]
 80047ca:	68b8      	ldr	r0, [r7, #8]
 80047cc:	f7fd ffc0 	bl	8002750 <nunavutSetUxx>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80047d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da02      	bge.n	80047e2 <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 80047dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80047e0:	e008      	b.n	80047f4 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	4413      	add	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	08da      	lsrs	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	c77fe000 	.word	0xc77fe000
 8004800:	c77fe000 	.word	0xc77fe000
 8004804:	477fe000 	.word	0x477fe000
 8004808:	477fe000 	.word	0x477fe000

0800480c <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004832:	f06f 0301 	mvn.w	r3, #1
 8004836:	e054      	b.n	80048e2 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800483e:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 8004840:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3308      	adds	r3, #8
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	429a      	cmp	r2, r3
 800485a:	d309      	bcc.n	8004870 <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	08db      	lsrs	r3, r3, #3
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4413      	add	r3, r2
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800486e:	e003      	b.n	8004878 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	3308      	adds	r3, #8
 800487c:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d902      	bls.n	800488e <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004888:	f06f 0309 	mvn.w	r3, #9
 800488c:	e029      	b.n	80048e2 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e012      	b.n	80048ba <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	6979      	ldr	r1, [r7, #20]
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	f7fe f85b 	bl	8002954 <nunavutGetF16>
 800489e:	eef0 7a40 	vmov.f32	s15, s0
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3310      	adds	r3, #16
 80048b2:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d3e6      	bcc.n	8004894 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3307      	adds	r3, #7
 80048ca:	f023 0307 	bic.w	r3, r3, #7
 80048ce:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80048d0:	6939      	ldr	r1, [r7, #16]
 80048d2:	69f8      	ldr	r0, [r7, #28]
 80048d4:	f7fd fe2c 	bl	8002530 <nunavutChooseMin>
 80048d8:	4603      	mov	r3, r0
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	08018a38 	.word	0x08018a38

080048f0 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af04      	add	r7, sp, #16
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800490e:	f06f 0301 	mvn.w	r3, #1
 8004912:	e05f      	b.n	80049d4 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	f640 0207 	movw	r2, #2055	; 0x807
 8004922:	4293      	cmp	r3, r2
 8004924:	d802      	bhi.n	800492c <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004926:	f06f 0302 	mvn.w	r3, #2
 800492a:	e053      	b.n	80049d4 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d902      	bls.n	8004940 <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800493a:	f06f 0309 	mvn.w	r3, #9
 800493e:	e049      	b.n	80049d4 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	b2ca      	uxtb	r2, r1
 8004950:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3308      	adds	r3, #8
 8004956:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2100      	movs	r1, #0
 8004964:	9100      	str	r1, [sp, #0]
 8004966:	69f9      	ldr	r1, [r7, #28]
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f7fd fe0d 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004974:	015b      	lsls	r3, r3, #5
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d021      	beq.n	80049ca <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f1c3 0308 	rsb	r3, r3, #8
 8004994:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9cd 2300 	strd	r2, r3, [sp]
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	68b8      	ldr	r0, [r7, #8]
 80049ac:	f7fd fed0 	bl	8002750 <nunavutSetUxx>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80049b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da02      	bge.n	80049c2 <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80049bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80049c0:	e008      	b.n	80049d4 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	08da      	lsrs	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d006      	beq.n	8004a02 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a02:	f06f 0301 	mvn.w	r3, #1
 8004a06:	e04a      	b.n	8004a9e <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004a0e:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 8004a10:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3308      	adds	r3, #8
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d309      	bcc.n	8004a40 <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	4413      	add	r3, r2
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a3e:	e003      	b.n	8004a48 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d902      	bls.n	8004a5e <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004a58:	f06f 0309 	mvn.w	r3, #9
 8004a5c:	e01f      	b.n	8004a9e <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a66:	015b      	lsls	r3, r3, #5
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	f7fd fe47 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a7a:	015b      	lsls	r3, r3, #5
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3307      	adds	r3, #7
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f7fd fd4e 	bl	8002530 <nunavutChooseMin>
 8004a94:	4603      	mov	r3, r0
 8004a96:	08da      	lsrs	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	08018a38 	.word	0x08018a38

08004aac <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004aca:	f06f 0301 	mvn.w	r3, #1
 8004ace:	e05f      	b.n	8004b90 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	f640 0207 	movw	r2, #2055	; 0x807
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d802      	bhi.n	8004ae8 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004ae2:	f06f 0302 	mvn.w	r3, #2
 8004ae6:	e053      	b.n	8004b90 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d902      	bls.n	8004afc <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004af6:	f06f 0309 	mvn.w	r3, #9
 8004afa:	e049      	b.n	8004b90 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	08db      	lsrs	r3, r3, #3
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	b2ca      	uxtb	r2, r1
 8004b0c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3308      	adds	r3, #8
 8004b12:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b1a:	019a      	lsls	r2, r3, #6
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	9100      	str	r1, [sp, #0]
 8004b22:	69f9      	ldr	r1, [r7, #28]
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	f7fd fd2f 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b30:	019b      	lsls	r3, r3, #6
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d021      	beq.n	8004b86 <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f1c3 0308 	rsb	r3, r3, #8
 8004b50:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	68b8      	ldr	r0, [r7, #8]
 8004b68:	f7fd fdf2 	bl	8002750 <nunavutSetUxx>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004b70:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	da02      	bge.n	8004b7e <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004b78:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004b7c:	e008      	b.n	8004b90 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	08da      	lsrs	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004bbe:	f06f 0301 	mvn.w	r3, #1
 8004bc2:	e04a      	b.n	8004c5a <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 8004bcc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3308      	adds	r3, #8
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d309      	bcc.n	8004bfc <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	4413      	add	r3, r2
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004bfa:	e003      	b.n	8004c04 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3308      	adds	r3, #8
 8004c08:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d902      	bls.n	8004c1a <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004c14:	f06f 0309 	mvn.w	r3, #9
 8004c18:	e01f      	b.n	8004c5a <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c22:	019b      	lsls	r3, r3, #6
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	f7fd fd69 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c36:	019b      	lsls	r3, r3, #6
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3307      	adds	r3, #7
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f7fd fc70 	bl	8002530 <nunavutChooseMin>
 8004c50:	4603      	mov	r3, r0
 8004c52:	08da      	lsrs	r2, r3, #3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08018a38 	.word	0x08018a38

08004c68 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004c86:	f06f 0301 	mvn.w	r3, #1
 8004c8a:	e003      	b.n	8004c94 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004cc6:	f06f 0301 	mvn.w	r3, #1
 8004cca:	e008      	b.n	8004cde <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8004cd4:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	08018a38 	.word	0x08018a38

08004cf0 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	; 0x30
 8004cf4:	af04      	add	r7, sp, #16
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d0e:	f06f 0301 	mvn.w	r3, #1
 8004d12:	e060      	b.n	8004dd6 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004d22:	d202      	bcs.n	8004d2a <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004d24:	f06f 0302 	mvn.w	r3, #2
 8004d28:	e055      	b.n	8004dd6 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d902      	bls.n	8004d40 <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004d3a:	f06f 0309 	mvn.w	r3, #9
 8004d3e:	e04a      	b.n	8004dd6 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4413      	add	r3, r2
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	b292      	uxth	r2, r2
 8004d52:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	3310      	adds	r3, #16
 8004d58:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d60:	00da      	lsls	r2, r3, #3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2100      	movs	r1, #0
 8004d66:	9100      	str	r1, [sp, #0]
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	68b8      	ldr	r0, [r7, #8]
 8004d6c:	f7fd fc0c 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d021      	beq.n	8004dcc <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f1c3 0308 	rsb	r3, r3, #8
 8004d96:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9cd 2300 	strd	r2, r3, [sp]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	68b8      	ldr	r0, [r7, #8]
 8004dae:	f7fd fccf 	bl	8002750 <nunavutSetUxx>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004db6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	da02      	bge.n	8004dc4 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004dbe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004dc2:	e008      	b.n	8004dd6 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	08da      	lsrs	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <uavcan_primitive_String_1_0_deserialize_+0x2c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004e06:	f06f 0301 	mvn.w	r3, #1
 8004e0a:	e043      	b.n	8004e94 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004e14:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004e26:	2310      	movs	r3, #16
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	69f9      	ldr	r1, [r7, #28]
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f7fd fcb5 	bl	800279c <nunavutGetU16>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3310      	adds	r3, #16
 8004e40:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4c:	d902      	bls.n	8004e54 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004e4e:	f06f 0309 	mvn.w	r3, #9
 8004e52:	e01f      	b.n	8004e94 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	f7fd fc4c 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4413      	add	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3307      	adds	r3, #7
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004e82:	69b9      	ldr	r1, [r7, #24]
 8004e84:	6978      	ldr	r0, [r7, #20]
 8004e86:	f7fd fb53 	bl	8002530 <nunavutChooseMin>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	08da      	lsrs	r2, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08018a38 	.word	0x08018a38

08004ea0 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004ebe:	f06f 0301 	mvn.w	r3, #1
 8004ec2:	e060      	b.n	8004f86 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004ed2:	d202      	bcs.n	8004eda <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004ed4:	f06f 0302 	mvn.w	r3, #2
 8004ed8:	e055      	b.n	8004f86 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee8:	d902      	bls.n	8004ef0 <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004eea:	f06f 0309 	mvn.w	r3, #9
 8004eee:	e04a      	b.n	8004f86 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	08db      	lsrs	r3, r3, #3
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004efe:	8812      	ldrh	r2, [r2, #0]
 8004f00:	b292      	uxth	r2, r2
 8004f02:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3310      	adds	r3, #16
 8004f08:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f10:	00da      	lsls	r2, r3, #3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2100      	movs	r1, #0
 8004f16:	9100      	str	r1, [sp, #0]
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	68b8      	ldr	r0, [r7, #8]
 8004f1c:	f7fd fb34 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d021      	beq.n	8004f7c <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f1c3 0308 	rsb	r3, r3, #8
 8004f46:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9cd 2300 	strd	r2, r3, [sp]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	69b9      	ldr	r1, [r7, #24]
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f7fd fbf7 	bl	8002750 <nunavutSetUxx>
 8004f62:	4603      	mov	r3, r0
 8004f64:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004f66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da02      	bge.n	8004f74 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004f6e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004f72:	e008      	b.n	8004f86 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	08da      	lsrs	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004fb6:	f06f 0301 	mvn.w	r3, #1
 8004fba:	e043      	b.n	8005044 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004fc2:	4b22      	ldr	r3, [pc, #136]	; (800504c <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 8004fc4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	69f9      	ldr	r1, [r7, #28]
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7fd fbdd 	bl	800279c <nunavutGetU16>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3310      	adds	r3, #16
 8004ff0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffc:	d902      	bls.n	8005004 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004ffe:	f06f 0309 	mvn.w	r3, #9
 8005002:	e01f      	b.n	8005044 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	f7fd fb74 	bl	8002702 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4413      	add	r3, r2
 8005026:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3307      	adds	r3, #7
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005032:	69b9      	ldr	r1, [r7, #24]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f7fd fa7b 	bl	8002530 <nunavutChooseMin>
 800503a:	4603      	mov	r3, r0
 800503c:	08da      	lsrs	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	08018a38 	.word	0x08018a38

08005050 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b09e      	sub	sp, #120	; 0x78
 8005054:	af04      	add	r7, sp, #16
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <uavcan_register_Value_1_0_serialize_+0x1e>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <uavcan_register_Value_1_0_serialize_+0x1e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800506e:	f06f 0301 	mvn.w	r3, #1
 8005072:	e248      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	663b      	str	r3, [r7, #96]	; 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 800507a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	f640 0217 	movw	r2, #2071	; 0x817
 8005082:	4293      	cmp	r3, r2
 8005084:	d802      	bhi.n	800508c <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005086:	f06f 0302 	mvn.w	r3, #2
 800508a:	e23c      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	667b      	str	r3, [r7, #100]	; 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8005090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	4413      	add	r3, r2
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 800509e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80050a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a2:	3308      	adds	r3, #8
 80050a4:	667b      	str	r3, [r7, #100]	; 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d11b      	bne.n	80050e8 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 80050b0:	2300      	movs	r3, #0
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 80050b4:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 80050b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b8:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050c2:	4619      	mov	r1, r3
 80050c4:	f7ff fdd0 	bl	8004c68 <uavcan_primitive_Empty_1_0_serialize_>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
        if (_err0_ < 0)
 80050ce:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	da02      	bge.n	80050dc <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 80050d6:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 80050da:	e214      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80050dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050e2:	4413      	add	r3, r2
 80050e4:	667b      	str	r3, [r7, #100]	; 0x64
 80050e6:	e1de      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d11c      	bne.n	800512c <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 80050f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80050f8:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 80050fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050fc:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4413      	add	r3, r2
 8005102:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005106:	4619      	mov	r1, r3
 8005108:	f7ff fdf2 	bl	8004cf0 <uavcan_primitive_String_1_0_serialize_>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (_err1_ < 0)
 8005112:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8005116:	2b00      	cmp	r3, #0
 8005118:	da02      	bge.n	8005120 <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 800511a:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800511e:	e1f2      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8005120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005126:	4413      	add	r3, r2
 8005128:	667b      	str	r3, [r7, #100]	; 0x64
 800512a:	e1bc      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005132:	2b02      	cmp	r3, #2
 8005134:	d11c      	bne.n	8005170 <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8005136:	f44f 7381 	mov.w	r3, #258	; 0x102
 800513a:	643b      	str	r3, [r7, #64]	; 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 800513c:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 800513e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005140:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800514a:	4619      	mov	r1, r3
 800514c:	f7ff fea8 	bl	8004ea0 <uavcan_primitive_Unstructured_1_0_serialize_>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (_err2_ < 0)
 8005156:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800515a:	2b00      	cmp	r3, #0
 800515c:	da02      	bge.n	8005164 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 800515e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005162:	e1d0      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8005164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800516a:	4413      	add	r3, r2
 800516c:	667b      	str	r3, [r7, #100]	; 0x64
 800516e:	e19a      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005176:	2b03      	cmp	r3, #3
 8005178:	d11c      	bne.n	80051b4 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 800517a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8005180:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 8005182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005184:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4413      	add	r3, r2
 800518a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800518e:	4619      	mov	r1, r3
 8005190:	f7fe fada 	bl	8003748 <uavcan_primitive_array_Bit_1_0_serialize_>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        if (_err3_ < 0)
 800519a:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da02      	bge.n	80051a8 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 80051a2:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 80051a6:	e1ae      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 80051a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051ae:	4413      	add	r3, r2
 80051b0:	667b      	str	r3, [r7, #100]	; 0x64
 80051b2:	e178      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d11c      	bne.n	80051f8 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 80051be:	f240 1301 	movw	r3, #257	; 0x101
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80051c4:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 80051c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c8:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80051d2:	4619      	mov	r1, r3
 80051d4:	f7fe fd48 	bl	8003c68 <uavcan_primitive_array_Integer64_1_0_serialize_>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if (_err4_ < 0)
 80051de:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	da02      	bge.n	80051ec <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 80051e6:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80051ea:	e18c      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051f2:	4413      	add	r3, r2
 80051f4:	667b      	str	r3, [r7, #100]	; 0x64
 80051f6:	e156      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d11c      	bne.n	800523c <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 8005202:	f240 1301 	movw	r3, #257	; 0x101
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8005208:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 800520a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520c:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4413      	add	r3, r2
 8005212:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005216:	4619      	mov	r1, r3
 8005218:	f7fe fc48 	bl	8003aac <uavcan_primitive_array_Integer32_1_0_serialize_>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        if (_err5_ < 0)
 8005222:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8005226:	2b00      	cmp	r3, #0
 8005228:	da02      	bge.n	8005230 <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 800522a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800522e:	e16a      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005236:	4413      	add	r3, r2
 8005238:	667b      	str	r3, [r7, #100]	; 0x64
 800523a:	e134      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005242:	2b06      	cmp	r3, #6
 8005244:	d11c      	bne.n	8005280 <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8005246:	f240 1301 	movw	r3, #257	; 0x101
 800524a:	633b      	str	r3, [r7, #48]	; 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 800524c:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 800524e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005250:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	4413      	add	r3, r2
 8005256:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800525a:	4619      	mov	r1, r3
 800525c:	f7fe fb48 	bl	80038f0 <uavcan_primitive_array_Integer16_1_0_serialize_>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (_err6_ < 0)
 8005266:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800526a:	2b00      	cmp	r3, #0
 800526c:	da02      	bge.n	8005274 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 800526e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005272:	e148      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800527a:	4413      	add	r3, r2
 800527c:	667b      	str	r3, [r7, #100]	; 0x64
 800527e:	e112      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005286:	2b07      	cmp	r3, #7
 8005288:	d11c      	bne.n	80052c4 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 800528a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8005290:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8005292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005294:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4413      	add	r3, r2
 800529a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800529e:	4619      	mov	r1, r3
 80052a0:	f7fe fdc0 	bl	8003e24 <uavcan_primitive_array_Integer8_1_0_serialize_>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
        if (_err7_ < 0)
 80052aa:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da02      	bge.n	80052b8 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 80052b2:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 80052b6:	e126      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052be:	4413      	add	r3, r2
 80052c0:	667b      	str	r3, [r7, #100]	; 0x64
 80052c2:	e0f0      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d11c      	bne.n	8005308 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 80052ce:	f240 1301 	movw	r3, #257	; 0x101
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 80052d4:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 80052d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d8:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052e2:	4619      	mov	r1, r3
 80052e4:	f7ff f832 	bl	800434c <uavcan_primitive_array_Natural64_1_0_serialize_>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (_err8_ < 0)
 80052ee:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da02      	bge.n	80052fc <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 80052f6:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80052fa:	e104      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005302:	4413      	add	r3, r2
 8005304:	667b      	str	r3, [r7, #100]	; 0x64
 8005306:	e0ce      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800530e:	2b09      	cmp	r3, #9
 8005310:	d11c      	bne.n	800534c <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8005312:	f240 1301 	movw	r3, #257	; 0x101
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8005318:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 800531a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531c:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4413      	add	r3, r2
 8005322:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005326:	4619      	mov	r1, r3
 8005328:	f7fe ff32 	bl	8004190 <uavcan_primitive_array_Natural32_1_0_serialize_>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        if (_err9_ < 0)
 8005332:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8005336:	2b00      	cmp	r3, #0
 8005338:	da02      	bge.n	8005340 <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 800533a:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 800533e:	e0e2      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005346:	4413      	add	r3, r2
 8005348:	667b      	str	r3, [r7, #100]	; 0x64
 800534a:	e0ac      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005352:	2b0a      	cmp	r3, #10
 8005354:	d11c      	bne.n	8005390 <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8005356:	f240 1301 	movw	r3, #257	; 0x101
 800535a:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 800535c:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 800535e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005360:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	f107 0220 	add.w	r2, r7, #32
 800536a:	4619      	mov	r1, r3
 800536c:	f7fe fe32 	bl	8003fd4 <uavcan_primitive_array_Natural16_1_0_serialize_>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if (_err10_ < 0)
 8005376:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 800537a:	2b00      	cmp	r3, #0
 800537c:	da02      	bge.n	8005384 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 800537e:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005382:	e0c0      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800538a:	4413      	add	r3, r2
 800538c:	667b      	str	r3, [r7, #100]	; 0x64
 800538e:	e08a      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005396:	2b0b      	cmp	r3, #11
 8005398:	d11c      	bne.n	80053d4 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 800539a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800539e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80053a0:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 80053a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a4:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4413      	add	r3, r2
 80053aa:	f107 021c 	add.w	r2, r7, #28
 80053ae:	4619      	mov	r1, r3
 80053b0:	f7ff f8aa 	bl	8004508 <uavcan_primitive_array_Natural8_1_0_serialize_>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (_err11_ < 0)
 80053ba:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	da02      	bge.n	80053c8 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 80053c2:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 80053c6:	e09e      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053ce:	4413      	add	r3, r2
 80053d0:	667b      	str	r3, [r7, #100]	; 0x64
 80053d2:	e068      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d11c      	bne.n	8005418 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 80053de:	f240 1301 	movw	r3, #257	; 0x101
 80053e2:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 80053e4:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 80053e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e8:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	f107 0218 	add.w	r2, r7, #24
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7ff fb5a 	bl	8004aac <uavcan_primitive_array_Real64_1_0_serialize_>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if (_err12_ < 0)
 80053fe:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8005402:	2b00      	cmp	r3, #0
 8005404:	da02      	bge.n	800540c <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8005406:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 800540a:	e07c      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005412:	4413      	add	r3, r2
 8005414:	667b      	str	r3, [r7, #100]	; 0x64
 8005416:	e046      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800541e:	2b0d      	cmp	r3, #13
 8005420:	d11c      	bne.n	800545c <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8005422:	f240 1301 	movw	r3, #257	; 0x101
 8005426:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8005428:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 800542a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800542c:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4413      	add	r3, r2
 8005432:	f107 0214 	add.w	r2, r7, #20
 8005436:	4619      	mov	r1, r3
 8005438:	f7ff fa5a 	bl	80048f0 <uavcan_primitive_array_Real32_1_0_serialize_>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (_err13_ < 0)
 8005442:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8005446:	2b00      	cmp	r3, #0
 8005448:	da02      	bge.n	8005450 <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 800544a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 800544e:	e05a      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005456:	4413      	add	r3, r2
 8005458:	667b      	str	r3, [r7, #100]	; 0x64
 800545a:	e024      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005462:	2b0e      	cmp	r3, #14
 8005464:	d11c      	bne.n	80054a0 <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8005466:	f240 1301 	movw	r3, #257	; 0x101
 800546a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 800546c:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 800546e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005470:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4413      	add	r3, r2
 8005476:	f107 0210 	add.w	r2, r7, #16
 800547a:	4619      	mov	r1, r3
 800547c:	f7ff f91c 	bl	80046b8 <uavcan_primitive_array_Real16_1_0_serialize_>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (_err14_ < 0)
 8005486:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800548a:	2b00      	cmp	r3, #0
 800548c:	da02      	bge.n	8005494 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 800548e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005492:	e038      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800549a:	4413      	add	r3, r2
 800549c:	667b      	str	r3, [r7, #100]	; 0x64
 800549e:	e002      	b.n	80054a6 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80054a0:	f06f 030a 	mvn.w	r3, #10
 80054a4:	e02f      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80054a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d025      	beq.n	80054fc <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80054b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f1c3 0308 	rsb	r3, r3, #8
 80054be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80054c2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9cd 2300 	strd	r2, r3, [sp]
 80054d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	f7fd f939 	bl	8002750 <nunavutSetUxx>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (_err15_ < 0)
 80054e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da02      	bge.n	80054f2 <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 80054ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80054f0:	e009      	b.n	8005506 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 80054f2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80054f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054f8:	4413      	add	r3, r2
 80054fa:	667b      	str	r3, [r7, #100]	; 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80054fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fe:	08da      	lsrs	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3768      	adds	r7, #104	; 0x68
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b09a      	sub	sp, #104	; 0x68
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <uavcan_register_Value_1_0_deserialize_+0x26>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <uavcan_register_Value_1_0_deserialize_+0x26>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <uavcan_register_Value_1_0_deserialize_+0x2c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005536:	f06f 0301 	mvn.w	r3, #1
 800553a:	e29b      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005542:	4bb0      	ldr	r3, [pc, #704]	; (8005804 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8005544:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800554c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	667b      	str	r3, [r7, #100]	; 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8005556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005558:	3308      	adds	r3, #8
 800555a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800555c:	429a      	cmp	r2, r3
 800555e:	d308      	bcc.n	8005572 <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	4413      	add	r3, r2
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8005570:	e003      	b.n	800557a <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 800557a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557c:	3308      	adds	r3, #8
 800557e:	667b      	str	r3, [r7, #100]	; 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005586:	2b00      	cmp	r3, #0
 8005588:	d123      	bne.n	80055d2 <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800558a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800558c:	08db      	lsrs	r3, r3, #3
 800558e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005590:	4618      	mov	r0, r3
 8005592:	f7fc ffcd 	bl	8002530 <nunavutChooseMin>
 8005596:	4602      	mov	r2, r0
 8005598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 800559e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4413      	add	r3, r2
 80055a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7ff fb77 	bl	8004ca0 <uavcan_primitive_Empty_1_0_deserialize_>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 80055b8:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da02      	bge.n	80055c6 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 80055c0:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80055c4:	e256      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055cc:	4413      	add	r3, r2
 80055ce:	667b      	str	r3, [r7, #100]	; 0x64
 80055d0:	e242      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d123      	bne.n	8005624 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fc ffa4 	bl	8002530 <nunavutChooseMin>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 80055f0:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 80055f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f4:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4413      	add	r3, r2
 80055fa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80055fe:	4619      	mov	r1, r3
 8005600:	f7ff fbee 	bl	8004de0 <uavcan_primitive_String_1_0_deserialize_>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 800560a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800560e:	2b00      	cmp	r3, #0
 8005610:	da02      	bge.n	8005618 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 8005612:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8005616:	e22d      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8005618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800561e:	4413      	add	r3, r2
 8005620:	667b      	str	r3, [r7, #100]	; 0x64
 8005622:	e219      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800562a:	2b02      	cmp	r3, #2
 800562c:	d123      	bne.n	8005676 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800562e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005630:	08db      	lsrs	r3, r3, #3
 8005632:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005634:	4618      	mov	r0, r3
 8005636:	f7fc ff7b 	bl	8002530 <nunavutChooseMin>
 800563a:	4602      	mov	r2, r0
 800563c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8005642:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8005644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005646:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	4413      	add	r3, r2
 800564c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005650:	4619      	mov	r1, r3
 8005652:	f7ff fc9d 	bl	8004f90 <uavcan_primitive_Unstructured_1_0_deserialize_>
 8005656:	4603      	mov	r3, r0
 8005658:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 800565c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005660:	2b00      	cmp	r3, #0
 8005662:	da02      	bge.n	800566a <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 8005664:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005668:	e204      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005670:	4413      	add	r3, r2
 8005672:	667b      	str	r3, [r7, #100]	; 0x64
 8005674:	e1f0      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800567c:	2b03      	cmp	r3, #3
 800567e:	d123      	bne.n	80056c8 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005682:	08db      	lsrs	r3, r3, #3
 8005684:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005686:	4618      	mov	r0, r3
 8005688:	f7fc ff52 	bl	8002530 <nunavutChooseMin>
 800568c:	4602      	mov	r2, r0
 800568e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8005694:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8005696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005698:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4413      	add	r3, r2
 800569e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056a2:	4619      	mov	r1, r3
 80056a4:	f7fe f8c6 	bl	8003834 <uavcan_primitive_array_Bit_1_0_deserialize_>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 80056ae:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da02      	bge.n	80056bc <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 80056b6:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80056ba:	e1db      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 80056bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056c2:	4413      	add	r3, r2
 80056c4:	667b      	str	r3, [r7, #100]	; 0x64
 80056c6:	e1c7      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d123      	bne.n	800571a <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80056d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fc ff29 	bl	8002530 <nunavutChooseMin>
 80056de:	4602      	mov	r2, r0
 80056e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 80056e6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ea:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4413      	add	r3, r2
 80056f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056f4:	4619      	mov	r1, r3
 80056f6:	f7fe fb2d 	bl	8003d54 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8005700:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8005704:	2b00      	cmp	r3, #0
 8005706:	da02      	bge.n	800570e <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8005708:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 800570c:	e1b2      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005714:	4413      	add	r3, r2
 8005716:	667b      	str	r3, [r7, #100]	; 0x64
 8005718:	e19e      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005720:	2b05      	cmp	r3, #5
 8005722:	d123      	bne.n	800576c <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005726:	08db      	lsrs	r3, r3, #3
 8005728:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800572a:	4618      	mov	r0, r3
 800572c:	f7fc ff00 	bl	8002530 <nunavutChooseMin>
 8005730:	4602      	mov	r2, r0
 8005732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8005738:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 800573a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800573c:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005746:	4619      	mov	r1, r3
 8005748:	f7fe fa26 	bl	8003b98 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8005752:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8005756:	2b00      	cmp	r3, #0
 8005758:	da02      	bge.n	8005760 <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 800575a:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800575e:	e189      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005766:	4413      	add	r3, r2
 8005768:	667b      	str	r3, [r7, #100]	; 0x64
 800576a:	e175      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005772:	2b06      	cmp	r3, #6
 8005774:	d123      	bne.n	80057be <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800577c:	4618      	mov	r0, r3
 800577e:	f7fc fed7 	bl	8002530 <nunavutChooseMin>
 8005782:	4602      	mov	r2, r0
 8005784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 800578a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	4413      	add	r3, r2
 8005794:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005798:	4619      	mov	r1, r3
 800579a:	f7fe f91f 	bl	80039dc <uavcan_primitive_array_Integer16_1_0_deserialize_>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 80057a4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da02      	bge.n	80057b2 <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 80057ac:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80057b0:	e160      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057b8:	4413      	add	r3, r2
 80057ba:	667b      	str	r3, [r7, #100]	; 0x64
 80057bc:	e14c      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80057c4:	2b07      	cmp	r3, #7
 80057c6:	d125      	bne.n	8005814 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80057c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ca:	08db      	lsrs	r3, r3, #3
 80057cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fc feae 	bl	8002530 <nunavutChooseMin>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 80057dc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 80057de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e0:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	4413      	add	r3, r2
 80057e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80057ea:	4619      	mov	r1, r3
 80057ec:	f7fe fb92 	bl	8003f14 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 80057f6:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da04      	bge.n	8005808 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 80057fe:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8005802:	e137      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
 8005804:	08018a38 	.word	0x08018a38
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800580e:	4413      	add	r3, r2
 8005810:	667b      	str	r3, [r7, #100]	; 0x64
 8005812:	e121      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800581a:	2b08      	cmp	r3, #8
 800581c:	d123      	bne.n	8005866 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800581e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005824:	4618      	mov	r0, r3
 8005826:	f7fc fe83 	bl	8002530 <nunavutChooseMin>
 800582a:	4602      	mov	r2, r0
 800582c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005832:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8005834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005836:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	4413      	add	r3, r2
 800583c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005840:	4619      	mov	r1, r3
 8005842:	f7fe fdf9 	bl	8004438 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 800584c:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005850:	2b00      	cmp	r3, #0
 8005852:	da02      	bge.n	800585a <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8005854:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005858:	e10c      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005860:	4413      	add	r3, r2
 8005862:	667b      	str	r3, [r7, #100]	; 0x64
 8005864:	e0f8      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800586c:	2b09      	cmp	r3, #9
 800586e:	d123      	bne.n	80058b8 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f7fc fe5a 	bl	8002530 <nunavutChooseMin>
 800587c:	4602      	mov	r2, r0
 800587e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8005884:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8005886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005888:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005892:	4619      	mov	r1, r3
 8005894:	f7fe fcf2 	bl	800427c <uavcan_primitive_array_Natural32_1_0_deserialize_>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 800589e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da02      	bge.n	80058ac <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 80058a6:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80058aa:	e0e3      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058b2:	4413      	add	r3, r2
 80058b4:	667b      	str	r3, [r7, #100]	; 0x64
 80058b6:	e0cf      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80058be:	2b0a      	cmp	r3, #10
 80058c0:	d123      	bne.n	800590a <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80058c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c4:	08db      	lsrs	r3, r3, #3
 80058c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fc fe31 	bl	8002530 <nunavutChooseMin>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80058d6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 80058d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058da:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	4413      	add	r3, r2
 80058e0:	f107 0220 	add.w	r2, r7, #32
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7fe fbeb 	bl	80040c0 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 80058f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da02      	bge.n	80058fe <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 80058f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058fc:	e0ba      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005904:	4413      	add	r3, r2
 8005906:	667b      	str	r3, [r7, #100]	; 0x64
 8005908:	e0a6      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005910:	2b0b      	cmp	r3, #11
 8005912:	d123      	bne.n	800595c <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800591a:	4618      	mov	r0, r3
 800591c:	f7fc fe08 	bl	8002530 <nunavutChooseMin>
 8005920:	4602      	mov	r2, r0
 8005922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005928:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 800592a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800592c:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	4413      	add	r3, r2
 8005932:	f107 021c 	add.w	r2, r7, #28
 8005936:	4619      	mov	r1, r3
 8005938:	f7fe fe5e 	bl	80045f8 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 8005942:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8005946:	2b00      	cmp	r3, #0
 8005948:	da02      	bge.n	8005950 <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 800594a:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800594e:	e091      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005956:	4413      	add	r3, r2
 8005958:	667b      	str	r3, [r7, #100]	; 0x64
 800595a:	e07d      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d123      	bne.n	80059ae <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800596c:	4618      	mov	r0, r3
 800596e:	f7fc fddf 	bl	8002530 <nunavutChooseMin>
 8005972:	4602      	mov	r2, r0
 8005974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 800597a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 800597c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597e:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4413      	add	r3, r2
 8005984:	f107 0218 	add.w	r2, r7, #24
 8005988:	4619      	mov	r1, r3
 800598a:	f7ff f905 	bl	8004b98 <uavcan_primitive_array_Real64_1_0_deserialize_>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 8005994:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005998:	2b00      	cmp	r3, #0
 800599a:	da02      	bge.n	80059a2 <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 800599c:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 80059a0:	e068      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059a8:	4413      	add	r3, r2
 80059aa:	667b      	str	r3, [r7, #100]	; 0x64
 80059ac:	e054      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80059b4:	2b0d      	cmp	r3, #13
 80059b6:	d123      	bne.n	8005a00 <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80059b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ba:	08db      	lsrs	r3, r3, #3
 80059bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fc fdb6 	bl	8002530 <nunavutChooseMin>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80059cc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 80059ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d0:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	f107 0214 	add.w	r2, r7, #20
 80059da:	4619      	mov	r1, r3
 80059dc:	f7fe fffe 	bl	80049dc <uavcan_primitive_array_Real32_1_0_deserialize_>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 80059e6:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da02      	bge.n	80059f4 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 80059ee:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80059f2:	e03f      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059fa:	4413      	add	r3, r2
 80059fc:	667b      	str	r3, [r7, #100]	; 0x64
 80059fe:	e02b      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005a06:	2b0e      	cmp	r3, #14
 8005a08:	d123      	bne.n	8005a52 <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fc fd8d 	bl	8002530 <nunavutChooseMin>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005a1e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 8005a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a22:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	4413      	add	r3, r2
 8005a28:	f107 0210 	add.w	r2, r7, #16
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f7fe feed 	bl	800480c <uavcan_primitive_array_Real16_1_0_deserialize_>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8005a38:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da02      	bge.n	8005a46 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 8005a40:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005a44:	e016      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a4c:	4413      	add	r3, r2
 8005a4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a50:	e002      	b.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8005a52:	f06f 030a 	mvn.w	r3, #10
 8005a56:	e00d      	b.n	8005a74 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a5a:	3307      	adds	r3, #7
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005a62:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005a64:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005a66:	f7fc fd63 	bl	8002530 <nunavutChooseMin>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	08da      	lsrs	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3768      	adds	r7, #104	; 0x68
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	; 0x30
 8005a80:	af04      	add	r7, sp, #16
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005a9a:	f06f 0301 	mvn.w	r3, #1
 8005a9e:	e043      	b.n	8005b28 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	2b37      	cmp	r3, #55	; 0x37
 8005aac:	d802      	bhi.n	8005ab4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005aae:	f06f 0302 	mvn.w	r3, #2
 8005ab2:	e039      	b.n	8005b28 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4413      	add	r3, r2
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	2207      	movs	r2, #7
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f00e ff26 	bl	8014916 <memmove>
        offset_bits += 56U;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3338      	adds	r3, #56	; 0x38
 8005ace:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d021      	beq.n	8005b1e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f1c3 0308 	rsb	r3, r3, #8
 8005ae8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9cd 2300 	strd	r2, r3, [sp]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	68b8      	ldr	r0, [r7, #8]
 8005b00:	f7fc fe26 	bl	8002750 <nunavutSetUxx>
 8005b04:	4603      	mov	r3, r0
 8005b06:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005b08:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da02      	bge.n	8005b16 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 8005b10:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005b14:	e008      	b.n	8005b28 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	08da      	lsrs	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005b56:	f06f 0301 	mvn.w	r3, #1
 8005b5a:	e065      	b.n	8005c28 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005b62:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005b64:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fc fcd7 	bl	8002530 <nunavutChooseMin>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005b8a:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4413      	add	r3, r2
 8005b94:	f107 0214 	add.w	r2, r7, #20
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f7fd fd6d 	bl	8003678 <uavcan_register_Name_1_0_deserialize_>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8005ba2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	da02      	bge.n	8005bb0 <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 8005baa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005bae:	e03b      	b.n	8005c28 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3307      	adds	r3, #7
 8005bbe:	f023 0307 	bic.w	r3, r3, #7
 8005bc2:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	08db      	lsrs	r3, r3, #3
 8005bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fc fcb0 	bl	8002530 <nunavutChooseMin>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4413      	add	r3, r2
 8005be6:	f107 0210 	add.w	r2, r7, #16
 8005bea:	4619      	mov	r1, r3
 8005bec:	f7ff fc90 	bl	8005510 <uavcan_register_Value_1_0_deserialize_>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8005bf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da02      	bge.n	8005c02 <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 8005bfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005c00:	e012      	b.n	8005c28 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	3307      	adds	r3, #7
 8005c10:	f023 0307 	bic.w	r3, r3, #7
 8005c14:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005c16:	6a39      	ldr	r1, [r7, #32]
 8005c18:	69f8      	ldr	r0, [r7, #28]
 8005c1a:	f7fc fc89 	bl	8002530 <nunavutChooseMin>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	08da      	lsrs	r2, r3, #3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	08018a38 	.word	0x08018a38

08005c34 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08e      	sub	sp, #56	; 0x38
 8005c38:	af04      	add	r7, sp, #16
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005c52:	f06f 0301 	mvn.w	r3, #1
 8005c56:	e0f0      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	f640 0257 	movw	r2, #2135	; 0x857
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d802      	bhi.n	8005c70 <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005c6a:	f06f 0302 	mvn.w	r3, #2
 8005c6e:	e0e4      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8005c74:	2307      	movs	r3, #7
 8005c76:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005c78:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	f107 0214 	add.w	r2, r7, #20
 8005c86:	4619      	mov	r1, r3
 8005c88:	f7ff fef8 	bl	8005a7c <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 8005c90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da02      	bge.n	8005c9e <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8005c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c9c:	e0cd      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	4413      	add	r3, r2
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	7a1b      	ldrb	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	e000      	b.n	8005cb6 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	7a5b      	ldrb	r3, [r3, #9]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	08db      	lsrs	r3, r3, #3
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	7819      	ldrb	r1, [r3, #0]
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	08db      	lsrs	r3, r3, #3
 8005cec:	68b8      	ldr	r0, [r7, #8]
 8005cee:	4403      	add	r3, r0
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e014      	b.n	8005d22 <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	7819      	ldrb	r1, [r3, #0]
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	2201      	movs	r2, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	08db      	lsrs	r3, r3, #3
 8005d18:	68b8      	ldr	r0, [r7, #8]
 8005d1a:	4403      	add	r3, r0
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	3301      	adds	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005d28:	2306      	movs	r3, #6
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9cd 2300 	strd	r2, r3, [sp]
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	6a39      	ldr	r1, [r7, #32]
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	f7fc fd07 	bl	8002750 <nunavutSetUxx>
 8005d42:	4603      	mov	r3, r0
 8005d44:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005d46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da02      	bge.n	8005d54 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8005d4e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005d52:	e072      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	3306      	adds	r3, #6
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d021      	beq.n	8005da8 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f1c3 0308 	rsb	r3, r3, #8
 8005d72:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005d74:	7f7b      	ldrb	r3, [r7, #29]
 8005d76:	9302      	str	r3, [sp, #8]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9cd 2300 	strd	r2, r3, [sp]
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	6a39      	ldr	r1, [r7, #32]
 8005d88:	68b8      	ldr	r0, [r7, #8]
 8005d8a:	f7fc fce1 	bl	8002750 <nunavutSetUxx>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005d92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da02      	bge.n	8005da0 <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005d9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005d9e:	e04c      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005da0:	7f7b      	ldrb	r3, [r7, #29]
 8005da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da4:	4413      	add	r3, r2
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005da8:	f240 1303 	movw	r3, #259	; 0x103
 8005dac:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f107 0210 	add.w	r2, r7, #16
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7ff f945 	bl	8005050 <uavcan_register_Value_1_0_serialize_>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 8005dca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da02      	bge.n	8005dd8 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8005dd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005dd6:	e030      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	4413      	add	r3, r2
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d021      	beq.n	8005e30 <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f1c3 0308 	rsb	r3, r3, #8
 8005dfa:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8005dfc:	7ebb      	ldrb	r3, [r7, #26]
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9cd 2300 	strd	r2, r3, [sp]
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	6a39      	ldr	r1, [r7, #32]
 8005e10:	68b8      	ldr	r0, [r7, #8]
 8005e12:	f7fc fc9d 	bl	8002750 <nunavutSetUxx>
 8005e16:	4603      	mov	r3, r0
 8005e18:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005e1a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da02      	bge.n	8005e28 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005e22:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005e26:	e008      	b.n	8005e3a <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005e28:	7ebb      	ldrb	r3, [r7, #26]
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	4413      	add	r3, r2
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	08da      	lsrs	r2, r3, #3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3728      	adds	r7, #40	; 0x28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b08c      	sub	sp, #48	; 0x30
 8005e46:	af04      	add	r7, sp, #16
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005e60:	f06f 0301 	mvn.w	r3, #1
 8005e64:	e04b      	b.n	8005efe <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	2b0f      	cmp	r3, #15
 8005e72:	d802      	bhi.n	8005e7a <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005e74:	f06f 0302 	mvn.w	r3, #2
 8005e78:	e041      	b.n	8005efe <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	08db      	lsrs	r3, r3, #3
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	4413      	add	r3, r2
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	7812      	ldrb	r2, [r2, #0]
 8005e8a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	4413      	add	r3, r2
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	7852      	ldrb	r2, [r2, #1]
 8005e9e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d021      	beq.n	8005ef4 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f1c3 0308 	rsb	r3, r3, #8
 8005ebe:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	9302      	str	r3, [sp, #8]
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9cd 2300 	strd	r2, r3, [sp]
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	68b8      	ldr	r0, [r7, #8]
 8005ed6:	f7fc fc3b 	bl	8002750 <nunavutSetUxx>
 8005eda:	4603      	mov	r3, r0
 8005edc:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005ede:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da02      	bge.n	8005eec <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 8005ee6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005eea:	e008      	b.n	8005efe <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	08da      	lsrs	r2, r3, #3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005f2e:	f06f 0301 	mvn.w	r3, #1
 8005f32:	e008      	b.n	8005f46 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005f3c:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	08018a38 	.word	0x08018a38

08005f58 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b090      	sub	sp, #64	; 0x40
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005f76:	f06f 0301 	mvn.w	r3, #1
 8005f7a:	e16b      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	f640 12c7 	movw	r2, #2503	; 0x9c7
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d802      	bhi.n	8005f94 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005f8e:	f06f 0302 	mvn.w	r3, #2
 8005f92:	e15f      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005f98:	2302      	movs	r3, #2
 8005f9a:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005f9c:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f107 0218 	add.w	r2, r7, #24
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7ff ff49 	bl	8005e42 <uavcan_node_Version_1_0_serialize_>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 8005fb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da02      	bge.n	8005fc4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 8005fbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fc2:	e147      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fca:	4413      	add	r3, r2
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d025      	beq.n	8006024 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f1c3 0308 	rsb	r3, r3, #8
 8005fe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005fea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fee:	9302      	str	r3, [sp, #8]
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8005ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006000:	68b8      	ldr	r0, [r7, #8]
 8006002:	f7fc fba5 	bl	8002750 <nunavutSetUxx>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 800600c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006010:	2b00      	cmp	r3, #0
 8006012:	da02      	bge.n	800601a <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8006014:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006018:	e11c      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 800601a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800601e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006020:	4413      	add	r3, r2
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8006024:	2302      	movs	r3, #2
 8006026:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4413      	add	r3, r2
 8006034:	f107 0214 	add.w	r2, r7, #20
 8006038:	4619      	mov	r1, r3
 800603a:	f7ff ff02 	bl	8005e42 <uavcan_node_Version_1_0_serialize_>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 8006044:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	da02      	bge.n	8006052 <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 800604c:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8006050:	e100      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006058:	4413      	add	r3, r2
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b00      	cmp	r3, #0
 8006064:	d025      	beq.n	80060b2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f1c3 0308 	rsb	r3, r3, #8
 8006074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8006078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800607c:	9302      	str	r3, [sp, #8]
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9cd 2300 	strd	r2, r3, [sp]
 800608a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7fc fb5e 	bl	8002750 <nunavutSetUxx>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 800609a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da02      	bge.n	80060a8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 80060a2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80060a6:	e0d5      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 80060a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ae:	4413      	add	r3, r2
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 80060b2:	2302      	movs	r3, #2
 80060b4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	f107 0210 	add.w	r2, r7, #16
 80060c6:	4619      	mov	r1, r3
 80060c8:	f7ff febb 	bl	8005e42 <uavcan_node_Version_1_0_serialize_>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 80060d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da02      	bge.n	80060e0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 80060da:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80060de:	e0b9      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e6:	4413      	add	r3, r2
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	08db      	lsrs	r3, r3, #3
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	18d0      	adds	r0, r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3308      	adds	r3, #8
 80060f6:	2208      	movs	r2, #8
 80060f8:	4619      	mov	r1, r3
 80060fa:	f00e fc0c 	bl	8014916 <memmove>
        offset_bits += 64U;
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	3340      	adds	r3, #64	; 0x40
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3310      	adds	r3, #16
 8006108:	2200      	movs	r2, #0
 800610a:	9200      	str	r2, [sp, #0]
 800610c:	2280      	movs	r2, #128	; 0x80
 800610e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006110:	68b8      	ldr	r0, [r7, #8]
 8006112:	f7fc fa39 	bl	8002588 <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	3380      	adds	r3, #128	; 0x80
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006120:	2b32      	cmp	r3, #50	; 0x32
 8006122:	d902      	bls.n	800612a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8006124:	f06f 0309 	mvn.w	r3, #9
 8006128:	e094      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	08db      	lsrs	r3, r3, #3
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	b2ca      	uxtb	r2, r1
 8006138:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	3308      	adds	r3, #8
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	00da      	lsls	r2, r3, #3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3320      	adds	r3, #32
 800614a:	2100      	movs	r1, #0
 800614c:	9100      	str	r1, [sp, #0]
 800614e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006150:	68b8      	ldr	r0, [r7, #8]
 8006152:	f7fc fa19 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615e:	4413      	add	r3, r2
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	2b01      	cmp	r3, #1
 8006168:	d902      	bls.n	8006170 <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800616a:	f06f 0309 	mvn.w	r3, #9
 800616e:	e071      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	4413      	add	r3, r2
 800617c:	b2ca      	uxtb	r2, r1
 800617e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	3308      	adds	r3, #8
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	019a      	lsls	r2, r3, #6
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3358      	adds	r3, #88	; 0x58
 8006190:	2100      	movs	r1, #0
 8006192:	9100      	str	r1, [sp, #0]
 8006194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006196:	68b8      	ldr	r0, [r7, #8]
 8006198:	f7fc f9f6 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a0:	019b      	lsls	r3, r3, #6
 80061a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a4:	4413      	add	r3, r2
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80061ae:	2bde      	cmp	r3, #222	; 0xde
 80061b0:	d902      	bls.n	80061b8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80061b2:	f06f 0309 	mvn.w	r3, #9
 80061b6:	e04d      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	b2ca      	uxtb	r2, r1
 80061c8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	3308      	adds	r3, #8
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80061d6:	00da      	lsls	r2, r3, #3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3368      	adds	r3, #104	; 0x68
 80061dc:	2100      	movs	r1, #0
 80061de:	9100      	str	r1, [sp, #0]
 80061e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e2:	68b8      	ldr	r0, [r7, #8]
 80061e4:	f7fc f9d0 	bl	8002588 <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f2:	4413      	add	r3, r2
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d024      	beq.n	800624a <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f1c3 0308 	rsb	r3, r3, #8
 800620e:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8006212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006216:	9302      	str	r3, [sp, #8]
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9cd 2300 	strd	r2, r3, [sp]
 8006224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006228:	68b8      	ldr	r0, [r7, #8]
 800622a:	f7fc fa91 	bl	8002750 <nunavutSetUxx>
 800622e:	4603      	mov	r3, r0
 8006230:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8006232:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da02      	bge.n	8006240 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 800623a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800623e:	e009      	b.n	8006254 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8006240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006246:	4413      	add	r3, r2
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	08da      	lsrs	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3730      	adds	r7, #48	; 0x30
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f001 facd 	bl	8007808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
      { }
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
 8006298:	f7fb ffa3 	bl	80021e2 <Error_Handler>
 800629c:	bf00      	nop
 800629e:	bd80      	pop	{r7, pc}

080062a0 <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 80062a0:	b5b0      	push	{r4, r5, r7, lr}
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	f004 f9ee 	bl	800a684 <HAL_GetTick>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	2200      	movs	r2, #0
 80062b4:	461c      	mov	r4, r3
 80062b6:	4615      	mov	r5, r2
 80062b8:	4622      	mov	r2, r4
 80062ba:	462b      	mov	r3, r5
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	bdb0      	pop	{r4, r5, r7, pc}

080062c2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1d1a      	adds	r2, r3, #4
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f001 fb04 	bl	80078ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff ffdf 	bl	80062c2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff ff9f 	bl	800625c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8006332:	687c      	ldr	r4, [r7, #4]
 8006334:	f107 0308 	add.w	r3, r7, #8
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ffd7 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	f641 5255 	movw	r2, #7509	; 0x1d55
 8006348:	4619      	mov	r1, r3
 800634a:	4620      	mov	r0, r4
 800634c:	f001 fae5 	bl	800791a <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff ffda 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800635a:	4a04      	ldr	r2, [pc, #16]	; (800636c <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}
 800636a:	bf00      	nop
 800636c:	08018ac0 	.word	0x08018ac0

08006370 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8006388:	b590      	push	{r4, r7, lr}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8006392:	687c      	ldr	r4, [r7, #4]
 8006394:	f107 0308 	add.w	r3, r7, #8
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff ffa7 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80063a0:	f107 0308 	add.w	r3, r7, #8
 80063a4:	f240 4261 	movw	r2, #1121	; 0x461
 80063a8:	4619      	mov	r1, r3
 80063aa:	4620      	mov	r0, r4
 80063ac:	f001 fad3 	bl	8007956 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80063b0:	f107 0308 	add.w	r3, r7, #8
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ffaa 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80063ba:	4a04      	ldr	r2, [pc, #16]	; (80063cc <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd90      	pop	{r4, r7, pc}
 80063ca:	bf00      	nop
 80063cc:	08018aa0 	.word	0x08018aa0

080063d0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
    {
    	if(js_in.angular_velocity.radian_per_second)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	edd3 7a01 	vldr	s15, [r3, #4]
 80063e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80063e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ea:	d012      	beq.n	8006412 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x42>
    	{
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80063ec:	2104      	movs	r1, #4
 80063ee:	4816      	ldr	r0, [pc, #88]	; (8006448 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x78>)
 80063f0:	f005 fb2e 	bl	800ba50 <HAL_GPIO_TogglePin>
    		tmc5160_move(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps));
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80063fa:	4b14      	ldr	r3, [pc, #80]	; (800644c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x7c>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4618      	mov	r0, r3
 8006400:	eeb0 0a67 	vmov.f32	s0, s15
 8006404:	f004 f884 	bl	800a510 <rad_to_steps>
 8006408:	4603      	mov	r3, r0
 800640a:	4618      	mov	r0, r3
 800640c:	f003 fba8 	bl	8009b60 <tmc5160_move>
//    	{
//
//    		pos_in = js_in.angular_position.radian;
//    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, 2560000)); //jc.full_steps
//    	}
    }
 8006410:	e016      	b.n	8006440 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x70>
    		js_in.angular_position.radian != steps_to_rads(tmc5160_position_read(), jc.full_steps);
 8006412:	f003 fd27 	bl	8009e64 <tmc5160_position_read>
 8006416:	4603      	mov	r3, r0
 8006418:	4a0c      	ldr	r2, [pc, #48]	; (800644c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x7c>)
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f004 f842 	bl	800a4a8 <steps_to_rads>
    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	edd3 7a00 	vldr	s15, [r3]
 800642a:	4b08      	ldr	r3, [pc, #32]	; (800644c <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x7c>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	eeb0 0a67 	vmov.f32	s0, s15
 8006434:	f004 f86c 	bl	800a510 <rad_to_steps>
 8006438:	4603      	mov	r3, r0
 800643a:	4618      	mov	r0, r3
 800643c:	f003 fb5c 	bl	8009af8 <tmc5160_position>
    }
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	48000c00 	.word	0x48000c00
 800644c:	20000440 	.word	0x20000440

08006450 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 800645a:	687c      	ldr	r4, [r7, #4]
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff ff43 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006468:	f107 0108 	add.w	r1, r7, #8
 800646c:	2302      	movs	r3, #2
 800646e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8006472:	4620      	mov	r0, r4
 8006474:	f001 fa9e 	bl	80079b4 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006478:	f107 0308 	add.w	r3, r7, #8
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff ff46 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006482:	4a04      	ldr	r2, [pc, #16]	; (8006494 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bd90      	pop	{r4, r7, pc}
 8006492:	bf00      	nop
 8006494:	08018a80 	.word	0x08018a80

08006498 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 8006498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800649c:	b0e7      	sub	sp, #412	; 0x19c
 800649e:	af06      	add	r7, sp, #24
 80064a0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80064a8:	6018      	str	r0, [r3, #0]
 80064aa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80064b2:	6019      	str	r1, [r3, #0]
 80064b4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80064bc:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 80064be:	466b      	mov	r3, sp
 80064c0:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 80064c2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80064ca:	4618      	mov	r0, r3
 80064cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80064d0:	461a      	mov	r2, r3
 80064d2:	2100      	movs	r1, #0
 80064d4:	f00e fa39 	bl	801494a <memset>
 80064d8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064dc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80064e0:	2201      	movs	r2, #1
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064e8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80064ec:	2201      	movs	r2, #1
 80064ee:	709a      	strb	r2, [r3, #2]
 80064f0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80064f4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80064f8:	2201      	movs	r2, #1
 80064fa:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 80064fc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006500:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006504:	2200      	movs	r2, #0
 8006506:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    node_info_response.software_image_crc.count = 0;
 800650a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800650e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006512:	2200      	movs	r2, #0
 8006514:	661a      	str	r2, [r3, #96]	; 0x60
    size_t name_len = 8;
 8006516:	2308      	movs	r3, #8
 8006518:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    char joint_name[name_len];
 800651c:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8006520:	460b      	mov	r3, r1
 8006522:	3b01      	subs	r3, #1
 8006524:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006528:	2300      	movs	r3, #0
 800652a:	4688      	mov	r8, r1
 800652c:	4699      	mov	r9, r3
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800653a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006542:	2300      	movs	r3, #0
 8006544:	460c      	mov	r4, r1
 8006546:	461d      	mov	r5, r3
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	00eb      	lsls	r3, r5, #3
 8006552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006556:	00e2      	lsls	r2, r4, #3
 8006558:	1dcb      	adds	r3, r1, #7
 800655a:	08db      	lsrs	r3, r3, #3
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	ebad 0d03 	sub.w	sp, sp, r3
 8006562:	ab06      	add	r3, sp, #24
 8006564:	3300      	adds	r3, #0
 8006566:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 800656a:	2201      	movs	r2, #1
 800656c:	4939      	ldr	r1, [pc, #228]	; (8006654 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 800656e:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8006572:	f00e f95d 	bl	8014830 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 8006576:	f107 0320 	add.w	r3, r7, #32
 800657a:	3320      	adds	r3, #32
 800657c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006580:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006584:	4618      	mov	r0, r3
 8006586:	f00e fac6 	bl	8014b16 <memcpy>
    node_info_response.name.count = name_len;
 800658a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800658e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006592:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006596:	655a      	str	r2, [r3, #84]	; 0x54
    uint32_t word0 = 1;
 8006598:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800659c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 80065a4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80065a8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80065ac:	2202      	movs	r2, #2
 80065ae:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 80065b0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80065b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80065b8:	2203      	movs	r2, #3
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80065c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80065c4:	681a      	ldr	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 80065c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80065ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80065ce:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 80065d0:	f107 0320 	add.w	r3, r7, #32
 80065d4:	3310      	adds	r3, #16
 80065d6:	3304      	adds	r3, #4
 80065d8:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80065dc:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 80065e4:	f107 0320 	add.w	r3, r7, #32
 80065e8:	3310      	adds	r3, #16
 80065ea:	3308      	adds	r3, #8
 80065ec:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80065f0:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 80065f8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80065fc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006600:	2201      	movs	r2, #1
 8006602:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8006604:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006608:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fa00 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006618:	4604      	mov	r4, r0
 800661a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800661e:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8006622:	f107 0020 	add.w	r0, r7, #32
 8006626:	2304      	movs	r3, #4
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006634:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	680b      	ldr	r3, [r1, #0]
 800663c:	4a07      	ldr	r2, [pc, #28]	; (800665c <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 800663e:	4601      	mov	r1, r0
 8006640:	4620      	mov	r0, r4
 8006642:	f001 f9f5 	bl	8007a30 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 8006646:	46b5      	mov	sp, r6
}
 8006648:	bf00      	nop
 800664a:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800664e:	46bd      	mov	sp, r7
 8006650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006654:	08018a30 	.word	0x08018a30
 8006658:	000f4240 	.word	0x000f4240
 800665c:	200004fc 	.word	0x200004fc

08006660 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 800666a:	687c      	ldr	r4, [r7, #4]
 800666c:	f107 0308 	add.w	r3, r7, #8
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fe3b 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006678:	f107 0108 	add.w	r1, r7, #8
 800667c:	2302      	movs	r3, #2
 800667e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006682:	4620      	mov	r0, r4
 8006684:	f001 fa1e 	bl	8007ac4 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006688:	f107 0308 	add.w	r3, r7, #8
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fe3e 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006692:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd90      	pop	{r4, r7, pc}
 80066a2:	bf00      	nop
 80066a4:	08018a60 	.word	0x08018a60

080066a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 80066a8:	b590      	push	{r4, r7, lr}
 80066aa:	f2ad 5d7c 	subw	sp, sp, #1404	; 0x57c
 80066ae:	af06      	add	r7, sp, #24
 80066b0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066b4:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80066b8:	6018      	str	r0, [r3, #0]
 80066ba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066be:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066c2:	6019      	str	r1, [r3, #0]
 80066c4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066c8:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80066cc:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 80066ce:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80066d6:	4618      	mov	r0, r3
 80066d8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80066dc:	461a      	mov	r2, r3
 80066de:	2100      	movs	r1, #0
 80066e0:	f00e f933 	bl	801494a <memset>

    register_access_response.timestamp.microsecond = micros_64();
 80066e4:	f7ff fddc 	bl	80062a0 <micros_64>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80066f0:	f5a1 710c 	sub.w	r1, r1, #560	; 0x230
 80066f4:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 80066f8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80066fc:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006700:	4618      	mov	r0, r3
 8006702:	f44f 7304 	mov.w	r3, #528	; 0x210
 8006706:	461a      	mov	r2, r3
 8006708:	2100      	movs	r1, #0
 800670a:	f00e f91e 	bl	801494a <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800671a:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 8006724:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006728:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2204      	movs	r2, #4
 8006730:	49ba      	ldr	r1, [pc, #744]	; (8006a1c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x374>)
 8006732:	4618      	mov	r0, r3
 8006734:	f00e f8df 	bl	80148f6 <memcmp>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d15c      	bne.n	80067f8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 800673e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006742:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800674c:	2b04      	cmp	r3, #4
 800674e:	d113      	bne.n	8006778 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006750:	2104      	movs	r1, #4
 8006752:	48b3      	ldr	r0, [pc, #716]	; (8006a20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x378>)
 8006754:	f005 f97c 	bl	800ba50 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 8006758:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800675c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8006766:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800676a:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 800676e:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8006772:	4618      	mov	r0, r3
 8006774:	f003 f9f4 	bl	8009b60 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 8006778:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800677c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006780:	2201      	movs	r2, #1
 8006782:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006784:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006788:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800678c:	2201      	movs	r2, #1
 800678e:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 8006790:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006794:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006798:	2204      	movs	r2, #4
 800679a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 800679e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067a2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80067a6:	4618      	mov	r0, r3
 80067a8:	f44f 7384 	mov.w	r3, #264	; 0x108
 80067ac:	461a      	mov	r2, r3
 80067ae:	2100      	movs	r1, #0
 80067b0:	f00e f8cb 	bl	801494a <memset>
        result.value.elements[0] = tv; //PZDC!!!
 80067b4:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80067c0:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 80067c4:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 80067c8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067cc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80067d0:	2201      	movs	r2, #1
 80067d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer64 = result;
 80067d6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067da:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80067de:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067e2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 80067ee:	461a      	mov	r2, r3
 80067f0:	f00e f991 	bl	8014b16 <memcpy>
 80067f4:	f000 bce3 	b.w	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 80067f8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80067fc:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2204      	movs	r2, #4
 8006804:	4987      	ldr	r1, [pc, #540]	; (8006a24 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x37c>)
 8006806:	4618      	mov	r0, r3
 8006808:	f00e f875 	bl	80148f6 <memcmp>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d158      	bne.n	80068c4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x21c>
		tmc5160_move(register_access_request.value.integer32.value.elements[0]);
 8006812:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006816:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006820:	4618      	mov	r0, r3
 8006822:	f003 f99d 	bl	8009b60 <tmc5160_move>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006826:	2104      	movs	r1, #4
 8006828:	487d      	ldr	r0, [pc, #500]	; (8006a20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x378>)
 800682a:	f005 f911 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800683a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 800683e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006842:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006846:	2201      	movs	r2, #1
 8006848:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800684a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800684e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006852:	2201      	movs	r2, #1
 8006854:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006856:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800685a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800685e:	2209      	movs	r2, #9
 8006860:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006864:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006868:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800686c:	4618      	mov	r0, r3
 800686e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006872:	461a      	mov	r2, r3
 8006874:	2100      	movs	r1, #0
 8006876:	f00e f868 	bl	801494a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 800687a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800687e:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006888:	461a      	mov	r2, r3
 800688a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800688e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006892:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006894:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006898:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800689c:	2201      	movs	r2, #1
 800689e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 80068a2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068a6:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80068aa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068ae:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80068b2:	4610      	mov	r0, r2
 80068b4:	4619      	mov	r1, r3
 80068b6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80068ba:	461a      	mov	r2, r3
 80068bc:	f00e f92b 	bl	8014b16 <memcpy>
 80068c0:	f000 bc7d 	b.w	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 80068c4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068c8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2203      	movs	r2, #3
 80068d0:	4955      	ldr	r1, [pc, #340]	; (8006a28 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x380>)
 80068d2:	4618      	mov	r0, r3
 80068d4:	f00e f80f 	bl	80148f6 <memcmp>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d150      	bne.n	8006980 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2d8>

		tmc5160_set_default_vel();
 80068de:	f003 f9b7 	bl	8009c50 <tmc5160_set_default_vel>
		tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 80068e2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80068e6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80068f0:	4618      	mov	r0, r3
 80068f2:	f003 f901 	bl	8009af8 <tmc5160_position>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80068f6:	2104      	movs	r1, #4
 80068f8:	4849      	ldr	r0, [pc, #292]	; (8006a20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x378>)
 80068fa:	f005 f8a9 	bl	800ba50 <HAL_GPIO_TogglePin>
		js_pos_v = tmc5160_position_read();
 80068fe:	f003 fab1 	bl	8009e64 <tmc5160_position_read>
 8006902:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
		//response
        register_access_response.persistent = true;
 8006906:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800690a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800690e:	2201      	movs	r2, #1
 8006910:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006912:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006916:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800691a:	2201      	movs	r2, #1
 800691c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 800691e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006922:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006926:	2209      	movs	r2, #9
 8006928:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 800692c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006930:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006934:	4618      	mov	r0, r3
 8006936:	f44f 7382 	mov.w	r3, #260	; 0x104
 800693a:	461a      	mov	r2, r3
 800693c:	2100      	movs	r1, #0
 800693e:	f00e f804 	bl	801494a <memset>
        result.value.elements[0] = js_pos_v;
 8006942:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006946:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800694a:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 800694e:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006950:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006954:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006958:	2201      	movs	r2, #1
 800695a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer32 = result;
 800695e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006962:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006966:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800696a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800696e:	4610      	mov	r0, r2
 8006970:	4619      	mov	r1, r3
 8006972:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006976:	461a      	mov	r2, r3
 8006978:	f00e f8cd 	bl	8014b16 <memcpy>
 800697c:	f000 bc1f 	b.w	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 8006980:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006984:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2207      	movs	r2, #7
 800698c:	4927      	ldr	r1, [pc, #156]	; (8006a2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x384>)
 800698e:	4618      	mov	r0, r3
 8006990:	f00d ffb1 	bl	80148f6 <memcmp>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d14c      	bne.n	8006a34 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x38c>
		//js_pos_v = enc_angle;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800699a:	2104      	movs	r1, #4
 800699c:	4820      	ldr	r0, [pc, #128]	; (8006a20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x378>)
 800699e:	f005 f857 	bl	800ba50 <HAL_GPIO_TogglePin>
		//tv = 0;
		//response
        register_access_response.persistent = true;
 80069a2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069a6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069aa:	2201      	movs	r2, #1
 80069ac:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80069ae:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069b2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069b6:	2201      	movs	r2, #1
 80069b8:	721a      	strb	r2, [r3, #8]
        value._tag_ = 10;
 80069ba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069be:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80069c2:	220a      	movs	r2, #10
 80069c4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural16_1_0 result = {};
 80069c8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069cc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069d0:	4618      	mov	r0, r3
 80069d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80069d6:	461a      	mov	r2, r3
 80069d8:	2100      	movs	r1, #0
 80069da:	f00d ffb6 	bl	801494a <memset>
        result.value.elements[0] = enc_angle;
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x388>)
 80069e0:	881a      	ldrh	r2, [r3, #0]
 80069e2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069e6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069ea:	801a      	strh	r2, [r3, #0]
        result.value.count = 1;
 80069ec:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069f0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80069f4:	2201      	movs	r2, #1
 80069f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural16 = result;
 80069fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80069fe:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006a02:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a06:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006a12:	461a      	mov	r2, r3
 8006a14:	f00e f87f 	bl	8014b16 <memcpy>
 8006a18:	e3d1      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
 8006a1a:	bf00      	nop
 8006a1c:	20000004 	.word	0x20000004
 8006a20:	48000c00 	.word	0x48000c00
 8006a24:	20000010 	.word	0x20000010
 8006a28:	20000018 	.word	0x20000018
 8006a2c:	20000020 	.word	0x20000020
 8006a30:	2000046a 	.word	0x2000046a
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 8006a34:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a38:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2203      	movs	r2, #3
 8006a40:	49c7      	ldr	r1, [pc, #796]	; (8006d60 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6b8>)
 8006a42:	4618      	mov	r0, r3
 8006a44:	f00d ff57 	bl	80148f6 <memcmp>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d156      	bne.n	8006afc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x454>
		tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 8006a4e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a52:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f993 3108 	ldrsb.w	r3, [r3, #264]	; 0x108
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f003 fb9f 	bl	800a1a0 <tmc5160_set_motor_direction>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006a62:	2104      	movs	r1, #4
 8006a64:	48bf      	ldr	r0, [pc, #764]	; (8006d64 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6bc>)
 8006a66:	f004 fff3 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006a76:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006a7a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a7e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a82:	2201      	movs	r2, #1
 8006a84:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006a86:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a8a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006a8e:	2201      	movs	r2, #1
 8006a90:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006a92:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006a96:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006a9a:	220b      	movs	r2, #11
 8006a9c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006aa0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006aa4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006aae:	461a      	mov	r2, r3
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	f00d ff4a 	bl	801494a <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006ab6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006aba:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f993 2108 	ldrsb.w	r2, [r3, #264]	; 0x108
 8006ac4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ac8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006acc:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006ace:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ad2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer8 = result;
 8006adc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ae0:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006ae4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ae8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006aec:	4610      	mov	r0, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006af4:	461a      	mov	r2, r3
 8006af6:	f00e f80e 	bl	8014b16 <memcpy>
 8006afa:	e360      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    	}
    else if (memcmp(register_access_request.name.name.elements, arm_reg_name, ARM_REG_NAME_LEN) == 0) {
 8006afc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b00:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2203      	movs	r2, #3
 8006b08:	4997      	ldr	r1, [pc, #604]	; (8006d68 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6c0>)
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f00d fef3 	bl	80148f6 <memcmp>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d15a      	bne.n	8006bcc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x524>
		if(register_access_request.value.integer8.value.elements[0])
 8006b16:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b1a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f993 3108 	ldrsb.w	r3, [r3, #264]	; 0x108
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x486>
		{
			tmc5160_arm();
 8006b28:	f003 fba2 	bl	800a270 <tmc5160_arm>
 8006b2c:	e001      	b.n	8006b32 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x48a>
		}
		else
		{
			tmc5160_disarm();
 8006b2e:	f003 fb93 	bl	800a258 <tmc5160_disarm>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006b32:	2104      	movs	r1, #4
 8006b34:	488b      	ldr	r0, [pc, #556]	; (8006d64 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6bc>)
 8006b36:	f004 ff8b 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006b46:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006b4a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b4e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b52:	2201      	movs	r2, #1
 8006b54:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006b56:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b5a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b5e:	2201      	movs	r2, #1
 8006b60:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006b62:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b66:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006b6a:	220b      	movs	r2, #11
 8006b6c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006b70:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b74:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2100      	movs	r1, #0
 8006b82:	f00d fee2 	bl	801494a <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006b86:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b8a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f993 2108 	ldrsb.w	r2, [r3, #264]	; 0x108
 8006b94:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006b98:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006b9c:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006b9e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ba2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer8 = result;
 8006bac:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bb0:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006bb4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bb8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f00d ffa6 	bl	8014b16 <memcpy>
 8006bca:	e2f8      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 8006bcc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006bd0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	4964      	ldr	r1, [pc, #400]	; (8006d6c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6c4>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f00d fe8b 	bl	80148f6 <memcmp>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d14f      	bne.n	8006c86 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x5de>
		//ENABLE CALIB
    	calib_move(&jc);
 8006be6:	4862      	ldr	r0, [pc, #392]	; (8006d70 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6c8>)
 8006be8:	f000 fcfc 	bl	80075e4 <calib_move>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006bec:	2104      	movs	r1, #4
 8006bee:	485d      	ldr	r0, [pc, #372]	; (8006d64 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6bc>)
 8006bf0:	f004 ff2e 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006c00:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006c04:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c08:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006c10:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c14:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006c18:	2201      	movs	r2, #1
 8006c1a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006c1c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c20:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006c24:	220b      	movs	r2, #11
 8006c26:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006c2a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c2e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c32:	4618      	mov	r0, r3
 8006c34:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f00d fe85 	bl	801494a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006c40:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c44:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 8006c4e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c52:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c56:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006c58:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c5c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c60:	2201      	movs	r2, #1
 8006c62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8006c66:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c6a:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006c6e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c72:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006c76:	4610      	mov	r0, r2
 8006c78:	4619      	mov	r1, r3
 8006c7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f00d ff49 	bl	8014b16 <memcpy>
 8006c84:	e29b      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8006c86:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006c8a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2209      	movs	r2, #9
 8006c92:	4938      	ldr	r1, [pc, #224]	; (8006d74 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6cc>)
 8006c94:	4618      	mov	r0, r3
 8006c96:	f00d fe2e 	bl	80148f6 <memcmp>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d16d      	bne.n	8006d7c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d4>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006ca0:	2104      	movs	r1, #4
 8006ca2:	4830      	ldr	r0, [pc, #192]	; (8006d64 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6bc>)
 8006ca4:	f004 fed4 	bl	800ba50 <HAL_GPIO_TogglePin>
		jc.upper_limit_enc = register_access_request.value.integer32.value.elements[0];
 8006ca8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cac:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cbe:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6c8>)
 8006cc0:	edc3 7a06 	vstr	s15, [r3, #24]
		joint_config_write(&jc, &jc_a);
 8006cc4:	492c      	ldr	r1, [pc, #176]	; (8006d78 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d0>)
 8006cc6:	482a      	ldr	r0, [pc, #168]	; (8006d70 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6c8>)
 8006cc8:	f7fb f95a 	bl	8001f80 <joint_config_write>
		tv = 0;
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006cd8:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8006cdc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ce0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006ce8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cec:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006cf4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006cf8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006cfc:	2209      	movs	r2, #9
 8006cfe:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006d02:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d06:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d10:	461a      	mov	r2, r3
 8006d12:	2100      	movs	r1, #0
 8006d14:	f00d fe19 	bl	801494a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006d18:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d1c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006d26:	461a      	mov	r2, r3
 8006d28:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d2c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d30:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006d32:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d36:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006d40:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d44:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006d48:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d4c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006d50:	4610      	mov	r0, r2
 8006d52:	4619      	mov	r1, r3
 8006d54:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f00d fedc 	bl	8014b16 <memcpy>
 8006d5e:	e22e      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
 8006d60:	2000001c 	.word	0x2000001c
 8006d64:	48000c00 	.word	0x48000c00
 8006d68:	2000000c 	.word	0x2000000c
 8006d6c:	20000028 	.word	0x20000028
 8006d70:	20000440 	.word	0x20000440
 8006d74:	20000030 	.word	0x20000030
 8006d78:	20000464 	.word	0x20000464
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8006d7c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006d80:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2209      	movs	r2, #9
 8006d88:	49d0      	ldr	r1, [pc, #832]	; (80070cc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa24>)
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f00d fdb3 	bl	80148f6 <memcmp>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d15f      	bne.n	8006e56 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7ae>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006d96:	2104      	movs	r1, #4
 8006d98:	48cd      	ldr	r0, [pc, #820]	; (80070d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa28>)
 8006d9a:	f004 fe59 	bl	800ba50 <HAL_GPIO_TogglePin>
		jc.lower_limit_enc = register_access_request.value.integer32.value.elements[0];
 8006d9e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006da2:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006db4:	4bc7      	ldr	r3, [pc, #796]	; (80070d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006db6:	edc3 7a07 	vstr	s15, [r3, #28]
		joint_config_write(&jc, &jc_a);
 8006dba:	49c7      	ldr	r1, [pc, #796]	; (80070d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 8006dbc:	48c5      	ldr	r0, [pc, #788]	; (80070d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006dbe:	f7fb f8df 	bl	8001f80 <joint_config_write>
		tv = 0;
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006dce:	e9c1 2300 	strd	r2, r3, [r1]
		register_access_response.persistent = true;
 8006dd2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dd6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006dda:	2201      	movs	r2, #1
 8006ddc:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006dde:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006de2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006de6:	2201      	movs	r2, #1
 8006de8:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006dea:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dee:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006df2:	2209      	movs	r2, #9
 8006df4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006df8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006dfc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e00:	4618      	mov	r0, r3
 8006e02:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006e06:	461a      	mov	r2, r3
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f00d fd9e 	bl	801494a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006e0e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e12:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e22:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e26:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006e28:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e2c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e30:	2201      	movs	r2, #1
 8006e32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006e36:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e3a:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006e3e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e42:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006e46:	4610      	mov	r0, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f00d fe61 	bl	8014b16 <memcpy>
 8006e54:	e1b3      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8006e56:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006e5a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	499e      	ldr	r1, [pc, #632]	; (80070dc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa34>)
 8006e64:	4618      	mov	r0, r3
 8006e66:	f00d fd46 	bl	80148f6 <memcmp>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d15d      	bne.n	8006f2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x884>
		tmc5160_set_zero();
 8006e70:	f003 f9ca 	bl	800a208 <tmc5160_set_zero>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006e74:	2104      	movs	r1, #4
 8006e76:	4896      	ldr	r0, [pc, #600]	; (80070d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa28>)
 8006e78:	f004 fdea 	bl	800ba50 <HAL_GPIO_TogglePin>
		jc.zero_enc = enc_angle;
 8006e7c:	4b98      	ldr	r3, [pc, #608]	; (80070e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa38>)
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	4b94      	ldr	r3, [pc, #592]	; (80070d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006e84:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8006e86:	4994      	ldr	r1, [pc, #592]	; (80070d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 8006e88:	4892      	ldr	r0, [pc, #584]	; (80070d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006e8a:	f7fb f879 	bl	8001f80 <joint_config_write>
		tv = 0;
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006e9a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8006e9e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ea2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006eaa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006eae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006eb6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006eba:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006ebe:	2209      	movs	r2, #9
 8006ec0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 8006ec4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ec8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f00d fd38 	bl	801494a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006eda:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ede:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7f9 fb33 	bl	8000554 <__aeabi_ui2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8006ef6:	f5a1 61aa 	sub.w	r1, r1, #1360	; 0x550
 8006efa:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8006efe:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f02:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006f06:	2201      	movs	r2, #1
 8006f08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.real64 = result;
 8006f0c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f10:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006f14:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f18:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006f24:	461a      	mov	r2, r3
 8006f26:	f00d fdf6 	bl	8014b16 <memcpy>
 8006f2a:	e148      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_value_zero_reg_name, SET_ENC_VALUE_ZERO_REG_NAME_LEN) == 0) {
 8006f2c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f30:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2212      	movs	r2, #18
 8006f38:	496a      	ldr	r1, [pc, #424]	; (80070e4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa3c>)
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f00d fcdb 	bl	80148f6 <memcmp>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d163      	bne.n	800700e <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x966>
		//SET ENCODER ZERO TODO
		jc.zero_enc = register_access_request.value.integer32.value.elements[0];
 8006f46:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f4a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b5f      	ldr	r3, [pc, #380]	; (80070d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006f58:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8006f5a:	495f      	ldr	r1, [pc, #380]	; (80070d8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa30>)
 8006f5c:	485d      	ldr	r0, [pc, #372]	; (80070d4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa2c>)
 8006f5e:	f7fb f80f 	bl	8001f80 <joint_config_write>
		tv = 0;
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006f6e:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006f72:	2104      	movs	r1, #4
 8006f74:	4856      	ldr	r0, [pc, #344]	; (80070d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa28>)
 8006f76:	f004 fd6b 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006f86:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006f8a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f8e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006f92:	2201      	movs	r2, #1
 8006f94:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006f96:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006f9a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006fa2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006fa6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006faa:	2209      	movs	r2, #9
 8006fac:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006fb0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006fb4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f00d fcc2 	bl	801494a <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006fc6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006fca:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006fda:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006fde:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006fe0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006fe4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		value.integer32 = result;
 8006fee:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ff2:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8006ff6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8006ffa:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8006ffe:	4610      	mov	r0, r2
 8007000:	4619      	mov	r1, r3
 8007002:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007006:	461a      	mov	r2, r3
 8007008:	f00d fd85 	bl	8014b16 <memcpy>
 800700c:	e0d7      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 800700e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007012:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2204      	movs	r2, #4
 800701a:	4933      	ldr	r1, [pc, #204]	; (80070e8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa40>)
 800701c:	4618      	mov	r0, r3
 800701e:	f00d fc6a 	bl	80148f6 <memcmp>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d163      	bne.n	80070f0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>
		//SET NAME FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8007028:	2104      	movs	r1, #4
 800702a:	4829      	ldr	r0, [pc, #164]	; (80070d0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa28>)
 800702c:	f004 fd10 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800703c:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8007040:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007044:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007048:	2201      	movs	r2, #1
 800704a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800704c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007050:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007054:	2201      	movs	r2, #1
 8007056:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 8007058:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800705c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_String_1_0 result = {};
 8007066:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800706a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800706e:	4618      	mov	r0, r3
 8007070:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007074:	461a      	mov	r2, r3
 8007076:	2100      	movs	r1, #0
 8007078:	f00d fc67 	bl	801494a <memset>

        char mystring[4] = "xyz";
 800707c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007080:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800708c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8007090:	681a      	ldr	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 8007092:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007096:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800709a:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 800709c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80070a0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80070a4:	2203      	movs	r2, #3
 80070a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value._string = result;
 80070aa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80070ae:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 80070b2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80070b6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80070c2:	461a      	mov	r2, r3
 80070c4:	f00d fd27 	bl	8014b16 <memcpy>
 80070c8:	e079      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
 80070ca:	bf00      	nop
 80070cc:	2000003c 	.word	0x2000003c
 80070d0:	48000c00 	.word	0x48000c00
 80070d4:	20000440 	.word	0x20000440
 80070d8:	20000464 	.word	0x20000464
 80070dc:	2000005c 	.word	0x2000005c
 80070e0:	2000046a 	.word	0x2000046a
 80070e4:	20000048 	.word	0x20000048
 80070e8:	20000068 	.word	0x20000068
 80070ec:	007a7978 	.word	0x007a7978
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 80070f0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80070f4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2204      	movs	r2, #4
 80070fc:	494a      	ldr	r1, [pc, #296]	; (8007228 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb80>)
 80070fe:	4618      	mov	r0, r3
 8007100:	f00d fbf9 	bl	80148f6 <memcmp>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d14c      	bne.n	80071a4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xafc>
		//SET TYPE OF MOTOR FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800710a:	2104      	movs	r1, #4
 800710c:	4847      	ldr	r0, [pc, #284]	; (800722c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb84>)
 800710e:	f004 fc9f 	bl	800ba50 <HAL_GPIO_TogglePin>
		tv = 0;
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800711e:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8007122:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007126:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800712a:	2201      	movs	r2, #1
 800712c:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800712e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007132:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007136:	2201      	movs	r2, #1
 8007138:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 800713a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800713e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8007142:	220b      	movs	r2, #11
 8007144:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8007148:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800714c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8007150:	4618      	mov	r0, r3
 8007152:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007156:	461a      	mov	r2, r3
 8007158:	2100      	movs	r1, #0
 800715a:	f00d fbf6 	bl	801494a <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 800715e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007162:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f893 2310 	ldrb.w	r2, [r3, #784]	; 0x310
 800716c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007170:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8007174:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8007176:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800717a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800717e:	2201      	movs	r2, #1
 8007180:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.natural8 = result;
 8007184:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007188:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 800718c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007190:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	f44f 7382 	mov.w	r3, #260	; 0x104
 800719c:	461a      	mov	r2, r3
 800719e:	f00d fcba 	bl	8014b16 <memcpy>
 80071a2:	e00c      	b.n	80071be <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb16>
    }
    else {
        value._tag_ = 0;
 80071a4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80071a8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 80071b2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80071b6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 80071be:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80071c2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80071c6:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80071ca:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80071ce:	3310      	adds	r3, #16
 80071d0:	4611      	mov	r1, r2
 80071d2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80071d6:	4618      	mov	r0, r3
 80071d8:	f00d fc9d 	bl	8014b16 <memcpy>

    interface->send_response<RegisterAccessResponse>(
 80071dc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80071e0:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fc14 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80071f0:	4604      	mov	r4, r0
 80071f2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80071f6:	f2a3 515c 	subw	r1, r3, #1372	; 0x55c
 80071fa:	f507 704c 	add.w	r0, r7, #816	; 0x330
 80071fe:	2304      	movs	r3, #4
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb88>)
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800720c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	680b      	ldr	r3, [r1, #0]
 8007214:	4a07      	ldr	r2, [pc, #28]	; (8007234 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb8c>)
 8007216:	4601      	mov	r1, r0
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fc85 	bl	8007b28 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 800721e:	bf00      	nop
 8007220:	f207 5764 	addw	r7, r7, #1380	; 0x564
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}
 8007228:	20000070 	.word	0x20000070
 800722c:	48000c00 	.word	0x48000c00
 8007230:	000f4240 	.word	0x000f4240
 8007234:	2000063c 	.word	0x2000063c

08007238 <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 8007238:	b580      	push	{r7, lr}
 800723a:	b08c      	sub	sp, #48	; 0x30
 800723c:	af06      	add	r7, sp, #24
 800723e:	6078      	str	r0, [r7, #4]
//	pos.radian = steps_to_rads(tmc5160_position_read(), jc->full_steps);
//	uavcan_si_unit_angular_velocity_Scalar_1_0 vel;
//	vel.radian_per_second = steps_to_rads(tmc5160_velocity_read(), jc->full_steps);
	reg_udral_physics_kinematics_rotation_Planar_0_1 js_msg =
	{
			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
 8007240:	f002 fe10 	bl	8009e64 <tmc5160_position_read>
 8007244:	4602      	mov	r2, r0
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f003 f92b 	bl	800a4a8 <steps_to_rads>
 8007252:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
			.angular_acceleration = eff_in
	};
 8007256:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
 800725a:	f002 fe3d 	bl	8009ed8 <tmc5160_velocity_read>
 800725e:	4602      	mov	r2, r0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4619      	mov	r1, r3
 8007266:	4610      	mov	r0, r2
 8007268:	f003 f91e 	bl	800a4a8 <steps_to_rads>
 800726c:	eef0 7a40 	vmov.f32	s15, s0
	};
 8007270:	edc7 7a04 	vstr	s15, [r7, #16]
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <send_JS+0x70>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 800727a:	480c      	ldr	r0, [pc, #48]	; (80072ac <send_JS+0x74>)
 800727c:	f000 fbcc 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007280:	f107 010c 	add.w	r1, r7, #12
 8007284:	2304      	movs	r3, #4
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <send_JS+0x78>)
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <send_JS+0x7c>)
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800729a:	4a07      	ldr	r2, [pc, #28]	; (80072b8 <send_JS+0x80>)
 800729c:	f000 fc8d 	bl	8007bba <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 80072a0:	bf00      	nop
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	2000046c 	.word	0x2000046c
 80072ac:	200004c8 	.word	0x200004c8
 80072b0:	000f4240 	.word	0x000f4240
 80072b4:	20000754 	.word	0x20000754
 80072b8:	20000748 	.word	0x20000748

080072bc <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 80072c2:	463b      	mov	r3, r7
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <heartbeat+0x4c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 80072d0:	480e      	ldr	r0, [pc, #56]	; (800730c <heartbeat+0x50>)
 80072d2:	f000 fba1 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80072d6:	4639      	mov	r1, r7
 80072d8:	2304      	movs	r3, #4
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <heartbeat+0x54>)
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <heartbeat+0x58>)
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	f641 5355 	movw	r3, #7509	; 0x1d55
 80072ee:	4a0a      	ldr	r2, [pc, #40]	; (8007318 <heartbeat+0x5c>)
 80072f0:	f000 fc82 	bl	8007bf8 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <heartbeat+0x4c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a03      	ldr	r2, [pc, #12]	; (8007308 <heartbeat+0x4c>)
 80072fc:	6013      	str	r3, [r2, #0]
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000760 	.word	0x20000760
 800730c:	200004c8 	.word	0x200004c8
 8007310:	000f4240 	.word	0x000f4240
 8007314:	2000075f 	.word	0x2000075f
 8007318:	20000758 	.word	0x20000758

0800731c <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 800731c:	b5b0      	push	{r4, r5, r7, lr}
 800731e:	b08e      	sub	sp, #56	; 0x38
 8007320:	af02      	add	r7, sp, #8
 8007322:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8007324:	4b41      	ldr	r3, [pc, #260]	; (800742c <setup_cyphal+0x110>)
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	2101      	movs	r1, #1
 8007330:	483f      	ldr	r0, [pc, #252]	; (8007430 <setup_cyphal+0x114>)
 8007332:	f000 fc80 	bl	8007c36 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8007336:	4602      	mov	r2, r0
 8007338:	f107 0308 	add.w	r3, r7, #8
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fca2 	bl	8007c88 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4619      	mov	r1, r3
 800734a:	483a      	ldr	r0, [pc, #232]	; (8007434 <setup_cyphal+0x118>)
 800734c:	f000 fcab 	bl	8007ca6 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8007350:	f107 0308 	add.w	r3, r7, #8
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe ffda 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 800735a:	f107 0310 	add.w	r3, r7, #16
 800735e:	4935      	ldr	r1, [pc, #212]	; (8007434 <setup_cyphal+0x118>)
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe ffc4 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007366:	f107 0510 	add.w	r5, r7, #16
 800736a:	f44f 700e 	mov.w	r0, #568	; 0x238
 800736e:	f00c fa02 	bl	8013776 <_Znwj>
 8007372:	4603      	mov	r3, r0
 8007374:	461c      	mov	r4, r3
 8007376:	4629      	mov	r1, r5
 8007378:	4620      	mov	r0, r4
 800737a:	f7fe ffd5 	bl	8006328 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800737e:	4b2e      	ldr	r3, [pc, #184]	; (8007438 <setup_cyphal+0x11c>)
 8007380:	601c      	str	r4, [r3, #0]
 8007382:	f107 0310 	add.w	r3, r7, #16
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe ffc1 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 800738c:	f107 0318 	add.w	r3, r7, #24
 8007390:	4928      	ldr	r1, [pc, #160]	; (8007434 <setup_cyphal+0x118>)
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe ffab 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007398:	f107 0518 	add.w	r5, r7, #24
 800739c:	f44f 700e 	mov.w	r0, #568	; 0x238
 80073a0:	f00c f9e9 	bl	8013776 <_Znwj>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461c      	mov	r4, r3
 80073a8:	4629      	mov	r1, r5
 80073aa:	4620      	mov	r0, r4
 80073ac:	f7fe ffec 	bl	8006388 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80073b0:	4b22      	ldr	r3, [pc, #136]	; (800743c <setup_cyphal+0x120>)
 80073b2:	601c      	str	r4, [r3, #0]
 80073b4:	f107 0318 	add.w	r3, r7, #24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe ffa8 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 80073be:	f107 0320 	add.w	r3, r7, #32
 80073c2:	491c      	ldr	r1, [pc, #112]	; (8007434 <setup_cyphal+0x118>)
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe ff92 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80073ca:	f107 0520 	add.w	r5, r7, #32
 80073ce:	f44f 700e 	mov.w	r0, #568	; 0x238
 80073d2:	f00c f9d0 	bl	8013776 <_Znwj>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461c      	mov	r4, r3
 80073da:	4629      	mov	r1, r5
 80073dc:	4620      	mov	r0, r4
 80073de:	f7ff f93f 	bl	8006660 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <setup_cyphal+0x124>)
 80073e4:	601c      	str	r4, [r3, #0]
 80073e6:	f107 0320 	add.w	r3, r7, #32
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe ff8f 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 80073f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073f4:	490f      	ldr	r1, [pc, #60]	; (8007434 <setup_cyphal+0x118>)
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe ff79 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80073fc:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8007400:	f44f 700e 	mov.w	r0, #568	; 0x238
 8007404:	f00c f9b7 	bl	8013776 <_Znwj>
 8007408:	4603      	mov	r3, r0
 800740a:	461c      	mov	r4, r3
 800740c:	4629      	mov	r1, r5
 800740e:	4620      	mov	r0, r4
 8007410:	f7ff f81e 	bl	8006450 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <setup_cyphal+0x128>)
 8007416:	601c      	str	r4, [r3, #0]
 8007418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe ff76 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8007422:	bf00      	nop
 8007424:	3730      	adds	r7, #48	; 0x30
 8007426:	46bd      	mov	sp, r7
 8007428:	bdb0      	pop	{r4, r5, r7, pc}
 800742a:	bf00      	nop
 800742c:	200004d0 	.word	0x200004d0
 8007430:	20000470 	.word	0x20000470
 8007434:	200004c8 	.word	0x200004c8
 8007438:	200004f0 	.word	0x200004f0
 800743c:	200004f4 	.word	0x200004f4
 8007440:	20000638 	.word	0x20000638
 8007444:	200004f8 	.word	0x200004f8

08007448 <cyphal_loop>:

void cyphal_loop() {
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
    interface->loop();
 800744c:	4804      	ldr	r0, [pc, #16]	; (8007460 <cyphal_loop+0x18>)
 800744e:	f000 fae3 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007452:	4603      	mov	r3, r0
 8007454:	4618      	mov	r0, r3
 8007456:	f009 fbcd 	bl	8010bf4 <_ZN15CyphalInterface4loopEv>
}
 800745a:	bf00      	nop
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200004c8 	.word	0x200004c8

08007464 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08c      	sub	sp, #48	; 0x30
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 800746c:	f107 0320 	add.w	r3, r7, #32
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f00c f930 	bl	80136d8 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//JS_SUB_PORT_ID //1121
 8007478:	f107 0318 	add.w	r3, r7, #24
 800747c:	f240 4161 	movw	r1, #1121	; 0x461
 8007480:	4618      	mov	r0, r3
 8007482:	f00c f909 	bl	8013698 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	f641 5155 	movw	r1, #7509	; 0x1d55
 800748e:	4618      	mov	r0, r3
 8007490:	f00c f902 	bl	8013698 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	f107 0218 	add.w	r2, r7, #24
 800749c:	f107 0120 	add.w	r1, r7, #32
 80074a0:	4618      	mov	r0, r3
 80074a2:	f00c f93b 	bl	801371c <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80074a6:	4b4c      	ldr	r3, [pc, #304]	; (80075d8 <cyphal_can_starter+0x174>)
 80074a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074ac:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 80074ae:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <cyphal_can_starter+0x174>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80074b4:	4b48      	ldr	r3, [pc, #288]	; (80075d8 <cyphal_can_starter+0x174>)
 80074b6:	2202      	movs	r2, #2
 80074b8:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80074ba:	4b47      	ldr	r3, [pc, #284]	; (80075d8 <cyphal_can_starter+0x174>)
 80074bc:	2201      	movs	r2, #1
 80074be:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	4a45      	ldr	r2, [pc, #276]	; (80075d8 <cyphal_can_starter+0x174>)
 80074c4:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	4a43      	ldr	r2, [pc, #268]	; (80075d8 <cyphal_can_starter+0x174>)
 80074ca:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80074cc:	4b43      	ldr	r3, [pc, #268]	; (80075dc <cyphal_can_starter+0x178>)
 80074ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074d2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 80074d4:	4b41      	ldr	r3, [pc, #260]	; (80075dc <cyphal_can_starter+0x178>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80074da:	4b40      	ldr	r3, [pc, #256]	; (80075dc <cyphal_can_starter+0x178>)
 80074dc:	2202      	movs	r2, #2
 80074de:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80074e0:	4b3e      	ldr	r3, [pc, #248]	; (80075dc <cyphal_can_starter+0x178>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	4a3c      	ldr	r2, [pc, #240]	; (80075dc <cyphal_can_starter+0x178>)
 80074ea:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4a3b      	ldr	r2, [pc, #236]	; (80075dc <cyphal_can_starter+0x178>)
 80074f0:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80074f2:	4b3b      	ldr	r3, [pc, #236]	; (80075e0 <cyphal_can_starter+0x17c>)
 80074f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074f8:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 80074fa:	4b39      	ldr	r3, [pc, #228]	; (80075e0 <cyphal_can_starter+0x17c>)
 80074fc:	2202      	movs	r2, #2
 80074fe:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007500:	4b37      	ldr	r3, [pc, #220]	; (80075e0 <cyphal_can_starter+0x17c>)
 8007502:	2202      	movs	r2, #2
 8007504:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007506:	4b36      	ldr	r3, [pc, #216]	; (80075e0 <cyphal_can_starter+0x17c>)
 8007508:	2201      	movs	r2, #1
 800750a:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	4a34      	ldr	r2, [pc, #208]	; (80075e0 <cyphal_can_starter+0x17c>)
 8007510:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	4a32      	ldr	r2, [pc, #200]	; (80075e0 <cyphal_can_starter+0x17c>)
 8007516:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 8007518:	2302      	movs	r3, #2
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	2302      	movs	r3, #2
 800751e:	2202      	movs	r2, #2
 8007520:	2102      	movs	r1, #2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f003 fe28 	bl	800b178 <HAL_FDCAN_ConfigGlobalFilter>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8007538:	f7fa fe53 	bl	80021e2 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 800753c:	4926      	ldr	r1, [pc, #152]	; (80075d8 <cyphal_can_starter+0x174>)
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f003 fdc0 	bl	800b0c4 <HAL_FDCAN_ConfigFilter>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf14      	ite	ne
 800754a:	2301      	movne	r3, #1
 800754c:	2300      	moveq	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8007554:	f7fa fe45 	bl	80021e2 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 8007558:	4920      	ldr	r1, [pc, #128]	; (80075dc <cyphal_can_starter+0x178>)
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f003 fdb2 	bl	800b0c4 <HAL_FDCAN_ConfigFilter>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <cyphal_can_starter+0x110>
	  Error_Handler();
 8007570:	f7fa fe37 	bl	80021e2 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8007574:	491a      	ldr	r1, [pc, #104]	; (80075e0 <cyphal_can_starter+0x17c>)
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f003 fda4 	bl	800b0c4 <HAL_FDCAN_ConfigFilter>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <cyphal_can_starter+0x12c>
	  Error_Handler();
 800758c:	f7fa fe29 	bl	80021e2 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8007590:	2200      	movs	r2, #0
 8007592:	2105      	movs	r1, #5
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f003 fe20 	bl	800b1da <HAL_FDCAN_ConfigTxDelayCompensation>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <cyphal_can_starter+0x14a>
	  Error_Handler();
 80075aa:	f7fa fe1a 	bl	80021e2 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f003 fe35 	bl	800b21e <HAL_FDCAN_EnableTxDelayCompensation>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <cyphal_can_starter+0x164>
	  Error_Handler();
 80075c4:	f7fa fe0d 	bl	80021e2 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f003 fe49 	bl	800b260 <HAL_FDCAN_Start>
}
 80075ce:	bf00      	nop
 80075d0:	3728      	adds	r7, #40	; 0x28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000794 	.word	0x20000794
 80075dc:	20000764 	.word	0x20000764
 80075e0:	2000077c 	.word	0x2000077c

080075e4 <calib_move>:


void calib_move(joint_config * jc)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	int8_t Kp = 100;
 80075ec:	2364      	movs	r3, #100	; 0x64
 80075ee:	74fb      	strb	r3, [r7, #19]
	uint32_t epsilon = 10;
 80075f0:	230a      	movs	r3, #10
 80075f2:	60fb      	str	r3, [r7, #12]
	uint32_t deviation = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
	deviation = jc->zero_enc - enc_angle;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	4a15      	ldr	r2, [pc, #84]	; (8007654 <calib_move+0x70>)
 80075fe:	8812      	ldrh	r2, [r2, #0]
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	617b      	str	r3, [r7, #20]
	while(deviation > epsilon)
 8007604:	e01a      	b.n	800763c <calib_move+0x58>
	{
		as50_readAngle(&enc_angle, 100);
 8007606:	2164      	movs	r1, #100	; 0x64
 8007608:	4812      	ldr	r0, [pc, #72]	; (8007654 <calib_move+0x70>)
 800760a:	f7fa f8ab 	bl	8001764 <as50_readAngle>
		deviation = jc->direction * (jc->zero_enc - enc_angle);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007614:	4619      	mov	r1, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	4a0e      	ldr	r2, [pc, #56]	; (8007654 <calib_move+0x70>)
 800761c:	8812      	ldrh	r2, [r2, #0]
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	617b      	str	r3, [r7, #20]
		tmc5160_move(deviation * Kp);
 8007626:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	4618      	mov	r0, r3
 8007632:	f002 fa95 	bl	8009b60 <tmc5160_move>
		HAL_Delay(1);
 8007636:	2001      	movs	r0, #1
 8007638:	f003 f830 	bl	800a69c <HAL_Delay>
	while(deviation > epsilon)
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	429a      	cmp	r2, r3
 8007642:	d8e0      	bhi.n	8007606 <calib_move+0x22>
	}
	tmc5160_stop();
 8007644:	f002 fe20 	bl	800a288 <tmc5160_stop>
	tmc5160_set_zero();
 8007648:	f002 fdde 	bl	800a208 <tmc5160_set_zero>
}
 800764c:	bf00      	nop
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	2000046a 	.word	0x2000046a

08007658 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
      { delete this; }
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3304      	adds	r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	461a      	mov	r2, r3
 8007686:	2300      	movs	r3, #0
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	6053      	str	r3, [r2, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	609a      	str	r2, [r3, #8]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	461a      	mov	r2, r3
 80076ae:	2300      	movs	r3, #0
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	6053      	str	r3, [r2, #4]
 80076b4:	6093      	str	r3, [r2, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff ffde 	bl	800767a <_ZNSt14_Function_baseC1Ev>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80076c4:	6838      	ldr	r0, [r7, #0]
 80076c6:	f000 fb21 	bl	8007d0c <_ZNKSt8functionIFyvEEcvbEv>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00d      	beq.n	80076ec <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	2202      	movs	r2, #2
 80076da:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	609a      	str	r2, [r3, #8]
	  }
      }
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	461a      	mov	r2, r3
 8007704:	2300      	movs	r3, #0
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	6053      	str	r3, [r2, #4]
 800770a:	6093      	str	r3, [r2, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff ffb3 	bl	800767a <_ZNSt14_Function_baseC1Ev>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800771a:	6838      	ldr	r0, [r7, #0]
 800771c:	f000 fb06 	bl	8007d2c <_ZNKSt8functionIFvvEEcvbEv>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00d      	beq.n	8007742 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	2202      	movs	r2, #2
 8007730:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	609a      	str	r2, [r3, #8]
      }
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 faf9 	bl	8007d4c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf14      	ite	ne
 8007760:	2301      	movne	r3, #1
 8007762:	2300      	moveq	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
	return get();
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fae8 	bl	8007d4c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 800777c:	4603      	mov	r3, r0
      }
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4611      	mov	r1, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fae5 	bl	8007d66 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ffe6 	bl	8007786 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fadd 	bl	8007d8e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 80077d4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fae2 	bl	8007da8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 80077e4:	4604      	mov	r4, r0
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 faeb 	bl	8007dc2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 80077ec:	4603      	mov	r3, r0
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4619      	mov	r1, r3
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 faf0 	bl	8007dd8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
      }
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	bd90      	pop	{r4, r7, pc}

08007808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fa fd00 	bl	8002222 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	6053      	str	r3, [r2, #4]
 8007840:	6093      	str	r3, [r2, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff ff18 	bl	800767a <_ZNSt14_Function_baseC1Ev>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8007850:	6838      	ldr	r0, [r7, #0]
 8007852:	f000 fad2 	bl	8007dfa <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00e      	beq.n	800787a <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 800785c:	687c      	ldr	r4, [r7, #4]
 800785e:	6838      	ldr	r0, [r7, #0]
 8007860:	f000 fadb 	bl	8007e1a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007864:	4603      	mov	r3, r0
 8007866:	4619      	mov	r1, r3
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fae1 	bl	8007e30 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a04      	ldr	r2, [pc, #16]	; (8007884 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8007872:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a04      	ldr	r2, [pc, #16]	; (8007888 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8007878:	609a      	str	r2, [r3, #8]
	    }
	}
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	bd90      	pop	{r4, r7, pc}
 8007884:	08007e55 	.word	0x08007e55
 8007888:	08007e79 	.word	0x08007e79

0800788c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	461a      	mov	r2, r3
 800789a:	2300      	movs	r3, #0
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	6053      	str	r3, [r2, #4]
 80078a0:	6093      	str	r3, [r2, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fee8 	bl	800767a <_ZNSt14_Function_baseC1Ev>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80078b0:	6838      	ldr	r0, [r7, #0]
 80078b2:	f000 fb00 	bl	8007eb6 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00e      	beq.n	80078da <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80078bc:	687c      	ldr	r4, [r7, #4]
 80078be:	6838      	ldr	r0, [r7, #0]
 80078c0:	f000 fb09 	bl	8007ed6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80078c4:	4603      	mov	r3, r0
 80078c6:	4619      	mov	r1, r3
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fb0f 	bl	8007eec <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 80078d2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a04      	ldr	r2, [pc, #16]	; (80078e8 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 80078d8:	609a      	str	r2, [r3, #8]
	}
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd90      	pop	{r4, r7, pc}
 80078e4:	08007f11 	.word	0x08007f11
 80078e8:	08007f2f 	.word	0x08007f2f

080078ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f7fa fc7a 	bl	8002204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800791a:	b580      	push	{r7, lr}
 800791c:	b086      	sub	sp, #24
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	4613      	mov	r3, r2
 8007926:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007928:	f107 0310 	add.w	r3, r7, #16
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fcdd 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	f107 0110 	add.w	r1, r7, #16
 800793a:	2300      	movs	r3, #0
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fb15 	bl	8007f6c <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007942:	f107 0310 	add.w	r3, r7, #16
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fce1 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007964:	f107 0310 	add.w	r3, r7, #16
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fcbf 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	f107 0110 	add.w	r1, r7, #16
 8007976:	2300      	movs	r3, #0
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fb29 	bl	8007fd0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800797e:	f107 0310 	add.w	r3, r7, #16
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fcc3 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	08018ae0 	.word	0x08018ae0

080079b4 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4611      	mov	r1, r2
 80079c0:	461a      	mov	r2, r3
 80079c2:	460b      	mov	r3, r1
 80079c4:	80fb      	strh	r3, [r7, #6]
 80079c6:	4613      	mov	r3, r2
 80079c8:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ffe1 	bl	8007994 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80079d2:	4a10      	ldr	r2, [pc, #64]	; (8007a14 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	797a      	ldrb	r2, [r7, #5]
 80079dc:	711a      	strb	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3308      	adds	r3, #8
 80079e2:	f44f 720a 	mov.w	r2, #552	; 0x228
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f00c ffae 	bl	801494a <memset>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fc79 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80079fc:	797a      	ldrb	r2, [r7, #5]
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	4619      	mov	r1, r3
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fb16 	bl	8008034 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	08018a90 	.word	0x08018a90

08007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fb25 	bl	8008070 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8007a26:	4603      	mov	r3, r0
      }
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8007a30:	b5b0      	push	{r4, r5, r7, lr}
 8007a32:	b08c      	sub	sp, #48	; 0x30
 8007a34:	af04      	add	r7, sp, #16
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007a3e:	f240 1339 	movw	r3, #313	; 0x139
 8007a42:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007a44:	f107 031c 	add.w	r3, r7, #28
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	68b8      	ldr	r0, [r7, #8]
 8007a4e:	f7fe fa83 	bl	8005f58 <uavcan_node_GetInfo_Response_1_0_serialize_>
 8007a52:	4603      	mov	r3, r0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	09db      	lsrs	r3, r3, #7
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	3310      	adds	r3, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fb0f 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007a6a:	f107 0314 	add.w	r3, r7, #20
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	809a      	strh	r2, [r3, #4]
 8007a74:	2301      	movs	r3, #1
 8007a76:	757b      	strb	r3, [r7, #21]
 8007a78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007a7c:	753b      	strb	r3, [r7, #20]
 8007a7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a80:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007a86:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007a8c:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fb0e 	bl	80080b4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a9c:	1884      	adds	r4, r0, r2
 8007a9e:	eb41 0503 	adc.w	r5, r1, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	9202      	str	r2, [sp, #8]
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f009 f82f 	bl	8010b18 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 8007aba:	bf00      	nop
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ac4 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	80fb      	strh	r3, [r7, #6]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff ff59 	bl	8007994 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007ae2:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	797a      	ldrb	r2, [r7, #5]
 8007aec:	711a      	strb	r2, [r3, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3308      	adds	r3, #8
 8007af2:	f44f 720a 	mov.w	r2, #552	; 0x228
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f00c ff26 	bl	801494a <memset>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fbf1 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007b0c:	797a      	ldrb	r2, [r7, #5]
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	4619      	mov	r1, r3
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fae7 	bl	80080e6 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	08018a70 	.word	0x08018a70

08007b28 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b08c      	sub	sp, #48	; 0x30
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007b36:	f240 130b 	movw	r3, #267	; 0x10b
 8007b3a:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007b3c:	f107 031c 	add.w	r3, r7, #28
 8007b40:	461a      	mov	r2, r3
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	68b8      	ldr	r0, [r7, #8]
 8007b46:	f7fe f875 	bl	8005c34 <uavcan_register_Access_Response_1_0_serialize_>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	09db      	lsrs	r3, r3, #7
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fa93 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b62:	f107 0314 	add.w	r3, r7, #20
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	809a      	strh	r2, [r3, #4]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	757b      	strb	r3, [r7, #21]
 8007b70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007b74:	753b      	strb	r3, [r7, #20]
 8007b76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b78:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b7e:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b84:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fa92 	bl	80080b4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b94:	1884      	adds	r4, r0, r2
 8007b96:	eb41 0503 	adc.w	r5, r1, r3
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	9202      	str	r2, [sp, #8]
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	f107 0314 	add.w	r3, r7, #20
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	4622      	mov	r2, r4
 8007baa:	462b      	mov	r3, r5
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f008 ffb3 	bl	8010b18 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 8007bb2:	bf00      	nop
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bdb0      	pop	{r4, r5, r7, pc}

08007bba <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b08a      	sub	sp, #40	; 0x28
 8007bbe:	af06      	add	r7, sp, #24
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007bc8:	8879      	ldrh	r1, [r7, #2]
 8007bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bd2:	23ff      	movs	r3, #255	; 0xff
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9302      	str	r3, [sp, #8]
 8007bda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	460b      	mov	r3, r1
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fa9a 	bl	8008124 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af06      	add	r7, sp, #24
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007c06:	8879      	ldrh	r1, [r7, #2]
 8007c08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c10:	23ff      	movs	r3, #255	; 0xff
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	2300      	movs	r3, #0
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	460b      	mov	r3, r1
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fac5 	bl	80081b8 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8007c36:	b590      	push	{r4, r7, lr}
 8007c38:	b08b      	sub	sp, #44	; 0x2c
 8007c3a:	af02      	add	r7, sp, #8
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	460b      	mov	r3, r1
 8007c44:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8007c46:	f107 030c 	add.w	r3, r7, #12
 8007c4a:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8007c4c:	7afa      	ldrb	r2, [r7, #11]
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	69f8      	ldr	r0, [r7, #28]
 8007c58:	f000 faf8 	bl	800824c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8007c5c:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	4619      	mov	r1, r3
 8007c68:	200c      	movs	r0, #12
 8007c6a:	f7fa fabf 	bl	80021ec <_ZnwjPv>
 8007c6e:	4604      	mov	r4, r0
 8007c70:	7af9      	ldrb	r1, [r7, #11]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7fa fbea 	bl	8002450 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8007c7c:	613c      	str	r4, [r7, #16]

        return interface;
 8007c7e:	693b      	ldr	r3, [r7, #16]
    }
 8007c80:	4618      	mov	r0, r3
 8007c82:	3724      	adds	r7, #36	; 0x24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}

08007c88 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fb26 	bl	80082e8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8007ca6:	b590      	push	{r4, r7, lr}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8007cb0:	687c      	ldr	r4, [r7, #4]
 8007cb2:	6838      	ldr	r0, [r7, #0]
 8007cb4:	f000 fb30 	bl	8008318 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fb36 	bl	800832e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8007cc2:	687b      	ldr	r3, [r7, #4]
      }
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd90      	pop	{r4, r7, pc}

08007ccc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
      { }
 8007cd4:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	08018b04 	.word	0x08018b04

08007cec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
      { }
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ffe9 	bl	8007ccc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007cfa:	210c      	movs	r1, #12
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f00b fd38 	bl	8013772 <_ZdlPvj>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fa fadc 	bl	80022d4 <_ZNKSt14_Function_base8_M_emptyEv>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f083 0301 	eor.w	r3, r3, #1
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fa facc 	bl	80022d4 <_ZNKSt14_Function_base8_M_emptyEv>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f083 0301 	eor.w	r3, r3, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fb08 	bl	800836c <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007d66:	b590      	push	{r4, r7, lr}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fb08 	bl	8008388 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007d78:	683c      	ldr	r4, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f807 	bl	8007d8e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007d80:	4603      	mov	r3, r0
 8007d82:	601c      	str	r4, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd90      	pop	{r4, r7, pc}

08007d8e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fb02 	bl	80083a2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fb02 	bl	80083bc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d004      	beq.n	8007df2 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	3218      	adds	r2, #24
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	4790      	blx	r2
      }
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bf14      	ite	ne
 8007e08:	2301      	movne	r3, #1
 8007e0a:	2300      	moveq	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007e3a:	6838      	ldr	r0, [r7, #0]
 8007e3c:	f7ff ffed 	bl	8007e1a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007e40:	4603      	mov	r3, r0
 8007e42:	4622      	mov	r2, r4
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fac5 	bl	80083d6 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd90      	pop	{r4, r7, pc}

08007e54 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fad2 	bl	8008406 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fade 	bl	8008426 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
      }
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d109      	bne.n	8007ea0 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007e8c:	68b8      	ldr	r0, [r7, #8]
 8007e8e:	f000 faba 	bl	8008406 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007e92:	4604      	mov	r4, r0
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fad9 	bl	800844c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	601c      	str	r4, [r3, #0]
	    break;
 8007e9e:	e005      	b.n	8007eac <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fadc 	bl	8008464 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007eac:	2300      	movs	r3, #0
      }
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd90      	pop	{r4, r7, pc}

08007eb6 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007ef6:	6838      	ldr	r0, [r7, #0]
 8007ef8:	f7ff ffed 	bl	8007ed6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007efc:	4603      	mov	r3, r0
 8007efe:	4622      	mov	r2, r4
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fae8 	bl	80084d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd90      	pop	{r4, r7, pc}

08007f10 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 faf5 	bl	8008508 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fb01 	bl	8008528 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8007f26:	bf00      	nop
      }
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007f2e:	b590      	push	{r4, r7, lr}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d109      	bne.n	8007f56 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007f42:	68b8      	ldr	r0, [r7, #8]
 8007f44:	f000 fae0 	bl	8008508 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fafc 	bl	8008548 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007f50:	4603      	mov	r3, r0
 8007f52:	601c      	str	r4, [r3, #0]
	    break;
 8007f54:	e005      	b.n	8007f62 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 faff 	bl	8008560 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007f62:	2300      	movs	r3, #0
      }
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd90      	pop	{r4, r7, pc}

08007f6c <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4611      	mov	r1, r2
 8007f78:	461a      	mov	r2, r3
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	80fb      	strh	r3, [r7, #6]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fd05 	bl	8007994 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007f8a:	4a10      	ldr	r2, [pc, #64]	; (8007fcc <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	797a      	ldrb	r2, [r7, #5]
 8007f94:	711a      	strb	r2, [r3, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f00c fcd2 	bl	801494a <memset>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe f99d 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007fb4:	797a      	ldrb	r2, [r7, #5]
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 fb0a 	bl	80085d4 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	08018ad0 	.word	0x08018ad0

08007fd0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	460b      	mov	r3, r1
 8007fe0:	80fb      	strh	r3, [r7, #6]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff fcd3 	bl	8007994 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007fee:	4a10      	ldr	r2, [pc, #64]	; (8008030 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	797a      	ldrb	r2, [r7, #5]
 8007ff8:	711a      	strb	r2, [r3, #4]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	f44f 720a 	mov.w	r2, #552	; 0x228
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f00c fca0 	bl	801494a <memset>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe f96b 	bl	80062ee <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8008018:	797a      	ldrb	r2, [r7, #5]
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	4619      	mov	r1, r3
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 faf6 	bl	8008610 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	08018ab0 	.word	0x08018ab0

08008034 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af02      	add	r7, sp, #8
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	807b      	strh	r3, [r7, #2]
 8008040:	4613      	mov	r3, r2
 8008042:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fce1 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3308      	adds	r3, #8
 800805a:	787a      	ldrb	r2, [r7, #1]
 800805c:	8879      	ldrh	r1, [r7, #2]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	2200      	movs	r2, #0
 8008064:	f008 fd92 	bl	8010b8c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fae7 	bl	800864c <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800807e:	4603      	mov	r3, r0
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4618      	mov	r0, r3
 8008094:	f7fa f91e 	bl	80022d4 <_ZNKSt14_Function_base8_M_emptyEv>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 800809e:	f00b fb7b 	bl	8013798 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	bf00      	nop
      }
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fa f908 	bl	80022d4 <_ZNKSt14_Function_base8_M_emptyEv>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 80080ca:	f00b fb65 	bl	8013798 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
      }
 80080dc:	4610      	mov	r0, r2
 80080de:	4619      	mov	r1, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af02      	add	r7, sp, #8
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	807b      	strh	r3, [r7, #2]
 80080f2:	4613      	mov	r3, r2
 80080f4:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff fc88 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3308      	adds	r3, #8
 800810c:	787a      	ldrb	r2, [r7, #1]
 800810e:	8879      	ldrh	r1, [r7, #2]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	4613      	mov	r3, r2
 8008114:	f240 2203 	movw	r2, #515	; 0x203
 8008118:	f008 fd38 	bl	8010b8c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8008124:	b5b0      	push	{r4, r5, r7, lr}
 8008126:	b08c      	sub	sp, #48	; 0x30
 8008128:	af04      	add	r7, sp, #16
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8008132:	230c      	movs	r3, #12
 8008134:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8008136:	f107 031c 	add.w	r3, r7, #28
 800813a:	461a      	mov	r2, r3
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f7fb f8f0 	bl	8003324 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 8008144:	4603      	mov	r3, r0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	09db      	lsrs	r3, r3, #7
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	3310      	adds	r3, #16
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff ff96 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 800815c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008160:	753b      	strb	r3, [r7, #20]
 8008162:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008166:	757b      	strb	r3, [r7, #21]
 8008168:	887b      	ldrh	r3, [r7, #2]
 800816a:	82fb      	strh	r3, [r7, #22]
 800816c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008170:	763b      	strb	r3, [r7, #24]
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ff99 	bl	80080b4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8008182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008186:	1884      	adds	r4, r0, r2
 8008188:	eb41 0503 	adc.w	r5, r1, r3
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	9202      	str	r2, [sp, #8]
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	f107 0314 	add.w	r3, r7, #20
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	4622      	mov	r2, r4
 800819c:	462b      	mov	r3, r5
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f008 fcba 	bl	8010b18 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	701a      	strb	r2, [r3, #0]
}
 80081b0:	bf00      	nop
 80081b2:	3720      	adds	r7, #32
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bdb0      	pop	{r4, r5, r7, pc}

080081b8 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	b08c      	sub	sp, #48	; 0x30
 80081bc:	af04      	add	r7, sp, #16
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80081c6:	2307      	movs	r3, #7
 80081c8:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80081ca:	f107 031c 	add.w	r3, r7, #28
 80081ce:	461a      	mov	r2, r3
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f7fa fd46 	bl	8002c64 <uavcan_node_Heartbeat_1_0_serialize_>
 80081d8:	4603      	mov	r3, r0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	09db      	lsrs	r3, r3, #7
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	3310      	adds	r3, #16
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff ff4c 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80081f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80081f4:	753b      	strb	r3, [r7, #20]
 80081f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081fa:	757b      	strb	r3, [r7, #21]
 80081fc:	887b      	ldrh	r3, [r7, #2]
 80081fe:	82fb      	strh	r3, [r7, #22]
 8008200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008204:	763b      	strb	r3, [r7, #24]
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff ff4f 	bl	80080b4 <_ZNKSt8functionIFyvEEclEv>
    push(
 8008216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800821a:	1884      	adds	r4, r0, r2
 800821c:	eb41 0503 	adc.w	r5, r1, r3
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	9202      	str	r2, [sp, #8]
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	4622      	mov	r2, r4
 8008230:	462b      	mov	r3, r5
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f008 fc70 	bl	8010b18 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	701a      	strb	r2, [r3, #0]
}
 8008244:	bf00      	nop
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bdb0      	pop	{r4, r5, r7, pc}

0800824c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 800824c:	b590      	push	{r4, r7, lr}
 800824e:	b089      	sub	sp, #36	; 0x24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4619      	mov	r1, r3
 8008266:	2008      	movs	r0, #8
 8008268:	f7f9 ffc0 	bl	80021ec <_ZnwjPv>
 800826c:	4604      	mov	r4, r0
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	4618      	mov	r0, r3
 800827a:	f7f8 f96b 	bl	8000554 <__aeabi_ui2d>
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	4b18      	ldr	r3, [pc, #96]	; (80082e4 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8008284:	f7f8 f9e0 	bl	8000648 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
 8008290:	f7f8 fcb2 	bl	8000bf8 <__aeabi_d2uiz>
 8008294:	4603      	mov	r3, r0
 8008296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008298:	4619      	mov	r1, r3
 800829a:	4620      	mov	r0, r4
 800829c:	f7fa f90e 	bl	80024bc <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 80082a0:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	3308      	adds	r3, #8
 80082a6:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	4619      	mov	r1, r3
 80082ac:	2044      	movs	r0, #68	; 0x44
 80082ae:	f7f9 ff9d 	bl	80021ec <_ZnwjPv>
 80082b2:	4604      	mov	r4, r0
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	4620      	mov	r0, r4
 80082bc:	f7fa f8e2 	bl	8002484 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 80082c0:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	79fa      	ldrb	r2, [r7, #7]
 80082c6:	69b9      	ldr	r1, [r7, #24]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f9cb 	bl	8008664 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]
        return ptr;
 80082d8:	693b      	ldr	r3, [r7, #16]
    }
 80082da:	4618      	mov	r0, r3
 80082dc:	3724      	adds	r7, #36	; 0x24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd90      	pop	{r4, r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40040000 	.word	0x40040000

080082e8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 80082e8:	b590      	push	{r4, r7, lr}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4622      	mov	r2, r4
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 f9f3 	bl	80086ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f9fe 	bl	800870a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bd90      	pop	{r4, r7, pc}

08008318 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8008338:	6838      	ldr	r0, [r7, #0]
 800833a:	f000 f9f1 	bl	8008720 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800833e:	4602      	mov	r2, r0
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f9f5 	bl	8008736 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800834c:	f107 0308 	add.w	r3, r7, #8
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fa0d 	bl	8008772 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8008358:	f107 0308 	add.w	r3, r7, #8
 800835c:	4618      	mov	r0, r3
 800835e:	f7fd ff7d 	bl	800625c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8008362:	687b      	ldr	r3, [r7, #4]
      }
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fa12 	bl	80087a0 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800837c:	4603      	mov	r3, r0
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fa11 	bl	80087ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fa14 	bl	80087da <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80083b2:	4603      	mov	r3, r0
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fa13 	bl	80087f2 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80083cc:	4603      	mov	r3, r0
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80083d6:	b590      	push	{r4, r7, lr}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80083e2:	68b8      	ldr	r0, [r7, #8]
 80083e4:	f7ff fd19 	bl	8007e1a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80083e8:	4604      	mov	r4, r0
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7f9 ff49 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 80083f0:	4603      	mov	r3, r0
 80083f2:	4619      	mov	r1, r3
 80083f4:	2004      	movs	r0, #4
 80083f6:	f7f9 fef9 	bl	80021ec <_ZnwjPv>
 80083fa:	4603      	mov	r3, r0
 80083fc:	601c      	str	r4, [r3, #0]
	  }
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}

08008406 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f9fb 	bl	800880a <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8008414:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fa03 	bl	8008822 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 800841c:	4603      	mov	r3, r0
	}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8008426:	b590      	push	{r4, r7, lr}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa02 	bl	8008838 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008434:	4603      	mov	r3, r0
 8008436:	4619      	mov	r1, r3
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fa08 	bl	800884e <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bd90      	pop	{r4, r7, pc}

0800844c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7f9 ff14 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 800845a:	4603      	mov	r3, r0
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	4613      	mov	r3, r2
 8008470:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d82a      	bhi.n	80084ce <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	08008491 	.word	0x08008491
 8008484:	0800849f 	.word	0x0800849f
 8008488:	080084b3 	.word	0x080084b3
 800848c:	080084c5 	.word	0x080084c5
	      __dest._M_access<const type_info*>() = nullptr;
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f9ee 	bl	8008872 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8008496:	4603      	mov	r3, r0
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
	      break;
 800849c:	e017      	b.n	80084ce <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800849e:	68b8      	ldr	r0, [r7, #8]
 80084a0:	f7ff ffb1 	bl	8008406 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80084a4:	4604      	mov	r4, r0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff ffd0 	bl	800844c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80084ac:	4603      	mov	r3, r0
 80084ae:	601c      	str	r4, [r3, #0]
	      break;
 80084b0:	e00d      	b.n	80084ce <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80084b2:	68b8      	ldr	r0, [r7, #8]
 80084b4:	f7ff ffa7 	bl	8008406 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80084b8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80084ba:	4619      	mov	r1, r3
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f9e4 	bl	800888a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80084c2:	e004      	b.n	80084ce <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80084c4:	4621      	mov	r1, r4
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f9f1 	bl	80088ae <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80084cc:	bf00      	nop
	  return false;
 80084ce:	2300      	movs	r3, #0
	}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd90      	pop	{r4, r7, pc}

080084d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80084e4:	68b8      	ldr	r0, [r7, #8]
 80084e6:	f7ff fcf6 	bl	8007ed6 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084ea:	4604      	mov	r4, r0
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7f9 fec8 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 80084f2:	4603      	mov	r3, r0
 80084f4:	4619      	mov	r1, r3
 80084f6:	2004      	movs	r0, #4
 80084f8:	f7f9 fe78 	bl	80021ec <_ZnwjPv>
 80084fc:	4603      	mov	r3, r0
 80084fe:	601c      	str	r4, [r3, #0]
	  }
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	bd90      	pop	{r4, r7, pc}

08008508 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9d8 	bl	80088c6 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8008516:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f9e0 	bl	80088de <_ZSt11__addressofIKPFvvEEPT_RS3_>
 800851e:	4603      	mov	r3, r0
	}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9df 	bl	80088f4 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008536:	4603      	mov	r3, r0
 8008538:	4619      	mov	r1, r3
 800853a:	4620      	mov	r0, r4
 800853c:	f000 f9e5 	bl	800890a <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	bd90      	pop	{r4, r7, pc}

08008548 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7f9 fe96 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 8008556:	4603      	mov	r3, r0
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	2b03      	cmp	r3, #3
 8008572:	d82a      	bhi.n	80085ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008574:	a201      	add	r2, pc, #4	; (adr r2, 800857c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8008576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857a:	bf00      	nop
 800857c:	0800858d 	.word	0x0800858d
 8008580:	0800859b 	.word	0x0800859b
 8008584:	080085af 	.word	0x080085af
 8008588:	080085c1 	.word	0x080085c1
	      __dest._M_access<const type_info*>() = nullptr;
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f970 	bl	8008872 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8008592:	4603      	mov	r3, r0
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]
	      break;
 8008598:	e017      	b.n	80085ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f7ff ffb4 	bl	8008508 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80085a0:	4604      	mov	r4, r0
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff ffd0 	bl	8008548 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 80085a8:	4603      	mov	r3, r0
 80085aa:	601c      	str	r4, [r3, #0]
	      break;
 80085ac:	e00d      	b.n	80085ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80085ae:	68b8      	ldr	r0, [r7, #8]
 80085b0:	f7ff ffaa 	bl	8008508 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80085b4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80085b6:	4619      	mov	r1, r3
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f9b5 	bl	8008928 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80085be:	e004      	b.n	80085ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80085c0:	4621      	mov	r1, r4
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f9c2 	bl	800894c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80085c8:	bf00      	nop
	  return false;
 80085ca:	2300      	movs	r3, #0
	}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd90      	pop	{r4, r7, pc}

080085d4 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af02      	add	r7, sp, #8
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	807b      	strh	r3, [r7, #2]
 80085e0:	4613      	mov	r3, r2
 80085e2:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fa11 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3308      	adds	r3, #8
 80085fa:	787a      	ldrb	r2, [r7, #1]
 80085fc:	8879      	ldrh	r1, [r7, #2]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	4613      	mov	r3, r2
 8008602:	220c      	movs	r2, #12
 8008604:	f008 fac2 	bl	8010b8c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
 800861c:	4613      	mov	r3, r2
 800861e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff f9f3 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3308      	adds	r3, #8
 8008636:	787a      	ldrb	r2, [r7, #1]
 8008638:	8879      	ldrh	r1, [r7, #2]
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	4613      	mov	r3, r2
 800863e:	220c      	movs	r2, #12
 8008640:	f008 faa4 	bl	8010b8c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8008664:	b5b0      	push	{r4, r5, r7, lr}
 8008666:	b08e      	sub	sp, #56	; 0x38
 8008668:	af00      	add	r7, sp, #0
 800866a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800866c:	62b9      	str	r1, [r7, #40]	; 0x28
 800866e:	4613      	mov	r3, r2
 8008670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8008674:	481a      	ldr	r0, [pc, #104]	; (80086e0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8008676:	f7ff f869 	bl	800774c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008684:	3310      	adds	r3, #16
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fcfe 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 800868c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f976 	bl	8008984 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8008698:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800869c:	4619      	mov	r1, r3
 800869e:	4810      	ldr	r0, [pc, #64]	; (80086e0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 80086a0:	f000 f9a1 	bl	80089e6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 80086a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f97a 	bl	80089a2 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80086ae:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80086b0:	463b      	mov	r3, r7
 80086b2:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80086b4:	490c      	ldr	r1, [pc, #48]	; (80086e8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80086b6:	4618      	mov	r0, r3
 80086b8:	f00a fd58 	bl	801316c <canardInit>
 80086bc:	3420      	adds	r4, #32
 80086be:	463d      	mov	r5, r7
 80086c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80086d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80086d6:	bf00      	nop
 80086d8:	3738      	adds	r7, #56	; 0x38
 80086da:	46bd      	mov	sp, r7
 80086dc:	bdb0      	pop	{r4, r5, r7, pc}
 80086de:	bf00      	nop
 80086e0:	2000099c 	.word	0x2000099c
 80086e4:	080023c9 	.word	0x080023c9
 80086e8:	08002385 	.word	0x08002385

080086ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 f9a4 	bl	8008a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
	{ }
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd fd93 	bl	8006278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	1d1a      	adds	r2, r3, #4
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	3304      	adds	r3, #4
 800875a:	4619      	mov	r1, r3
 800875c:	4610      	mov	r0, r2
 800875e:	f000 f98b 	bl	8008a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]
      }
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f998 	bl	8008ab8 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	3304      	adds	r3, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f000 f970 	bl	8008a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f9a3 	bl	8008af6 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80087b0:	4603      	mov	r3, r0
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9a3 	bl	8008b0e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 f9ab 	bl	8008b26 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f9ad 	bl	8008b42 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80087e8:	4603      	mov	r3, r0
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9ae 	bl	8008b5c <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008800:	4603      	mov	r3, r0
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7f9 fd40 	bl	8002298 <_ZNKSt9_Any_data9_M_accessEv>
 8008818:	4603      	mov	r3, r0
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	7138      	strb	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008858:	6838      	ldr	r0, [r7, #0]
 800885a:	f7ff ffed 	bl	8008838 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800885e:	4603      	mov	r3, r0
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4798      	blx	r3
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4610      	mov	r0, r2
 800886a:	4619      	mov	r1, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f9 fd01 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 8008880:	4603      	mov	r3, r0
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800888a:	b590      	push	{r4, r7, lr}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008894:	6838      	ldr	r0, [r7, #0]
 8008896:	f000 f96d 	bl	8008b74 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800889a:	4603      	mov	r3, r0
 800889c:	4622      	mov	r2, r4
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f972 	bl	8008b8a <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd90      	pop	{r4, r7, pc}

080088ae <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f97f 	bl	8008bbc <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7f9 fce2 	bl	8002298 <_ZNKSt9_Any_data9_M_accessEv>
 80088d4:	4603      	mov	r3, r0
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	7138      	strb	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008914:	6838      	ldr	r0, [r7, #0]
 8008916:	f7ff ffed 	bl	80088f4 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800891a:	4603      	mov	r3, r0
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4798      	blx	r3
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008932:	6838      	ldr	r0, [r7, #0]
 8008934:	f000 f94e 	bl	8008bd4 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008938:	4603      	mov	r3, r0
 800893a:	4622      	mov	r2, r4
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f953 	bl	8008bea <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	bd90      	pop	{r4, r7, pc}

0800894c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f960 	bl	8008c1c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f95d 	bl	8008c34 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff ffe6 	bl	8008964 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80089a2:	b590      	push	{r4, r7, lr}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f955 	bl	8008c5c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80089b2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00c      	beq.n	80089d6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f95a 	bl	8008c76 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80089c2:	4604      	mov	r4, r0
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f963 	bl	8008c90 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80089ca:	4603      	mov	r3, r0
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4619      	mov	r1, r3
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 f968 	bl	8008ca6 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
      }
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}

080089e6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80089f0:	6838      	ldr	r0, [r7, #0]
 80089f2:	f000 f97d 	bl	8008cf0 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80089f6:	4603      	mov	r3, r0
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f964 	bl	8008cc8 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8008a00:	6838      	ldr	r0, [r7, #0]
 8008a02:	f000 f938 	bl	8008c76 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8008a06:	4603      	mov	r3, r0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f98b 	bl	8008d24 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f107 030c 	add.w	r3, r7, #12
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f98f 	bl	8008d3a <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f974 	bl	8008d0a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8008a22:	687b      	ldr	r3, [r7, #4]
	}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3308      	adds	r3, #8
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fec3 	bl	80077c4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8008a58:	2010      	movs	r0, #16
 8008a5a:	f00a fe8c 	bl	8013776 <_Znwj>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461c      	mov	r4, r3
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f975 	bl	8008d54 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601c      	str	r4, [r3, #0]
	}
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}

08008a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]
      }
 8008a96:	bf00      	nop
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff ffed 	bl	8008aa2 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8008ace:	6838      	ldr	r0, [r7, #0]
 8008ad0:	f7ff ffe7 	bl	8008aa2 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8008adc:	f107 030c 	add.w	r3, r7, #12
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff ffde 	bl	8008aa2 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	601a      	str	r2, [r3, #0]
    }
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f93e 	bl	8008d80 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008b04:	4603      	mov	r3, r0
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f93f 	bl	8008d9a <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4618      	mov	r0, r3
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f92f 	bl	8008db0 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8008b52:	4603      	mov	r3, r0
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f92e 	bl	8008dc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008b8a:	b590      	push	{r4, r7, lr}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008b96:	68b8      	ldr	r0, [r7, #8]
 8008b98:	f7ff ffec 	bl	8008b74 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	681c      	ldr	r4, [r3, #0]
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7f9 fb6e 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	2004      	movs	r0, #4
 8008bac:	f7f9 fb1e 	bl	80021ec <_ZnwjPv>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	601c      	str	r4, [r3, #0]
	  }
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd90      	pop	{r4, r7, pc}

08008bbc <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7f9 fb5c 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008bea:	b590      	push	{r4, r7, lr}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008bf6:	68b8      	ldr	r0, [r7, #8]
 8008bf8:	f7ff ffec 	bl	8008bd4 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	681c      	ldr	r4, [r3, #0]
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7f9 fb3e 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 8008c06:	4603      	mov	r3, r0
 8008c08:	4619      	mov	r1, r3
 8008c0a:	2004      	movs	r0, #4
 8008c0c:	f7f9 faee 	bl	80021ec <_ZnwjPv>
 8008c10:	4603      	mov	r3, r0
 8008c12:	601c      	str	r4, [r3, #0]
	  }
 8008c14:	bf00      	nop
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}

08008c1c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7f9 fb2c 	bl	8002282 <_ZNSt9_Any_data9_M_accessEv>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 f8cc 	bl	8008dde <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8008c46:	683c      	ldr	r4, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f807 	bl	8008c5c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	601c      	str	r4, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f8c6 	bl	8008df8 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f8c6 	bl	8008e12 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008c86:	4603      	mov	r3, r0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	320c      	adds	r2, #12
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	4790      	blx	r2
      }
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8008cc8:	b590      	push	{r4, r7, lr}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8008cd2:	687c      	ldr	r4, [r7, #4]
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f8a8 	bl	8008e2c <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f8ad 	bl	8008e42 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd90      	pop	{r4, r7, pc}

08008cf0 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f8c1 	bl	8008e82 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8008d00:	4603      	mov	r3, r0
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f8c9 	bl	8008eac <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
	...

08008d54 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f8b1 	bl	8008ec8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8008d66:	4a05      	ldr	r2, [pc, #20]	; (8008d7c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	60da      	str	r2, [r3, #12]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	08018a44 	.word	0x08018a44

08008d80 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 f8b2 	bl	8008ef4 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8008d90:	4603      	mov	r3, r0
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f89b 	bl	8008f0a <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f899 	bl	8008f20 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f89c 	bl	8008f40 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f89b 	bl	8008f58 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008e22:	4603      	mov	r3, r0
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4618      	mov	r0, r3
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008e42:	b590      	push	{r4, r7, lr}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f88f 	bl	8008f70 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008e52:	4603      	mov	r3, r0
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008e58:	683c      	ldr	r4, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f888 	bl	8008f70 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008e60:	4603      	mov	r3, r0
 8008e62:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f81e 	bl	8008eac <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008e70:	4603      	mov	r3, r0
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f888 	bl	8008f8a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd90      	pop	{r4, r7, pc}

08008e82 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fee6 	bl	8008c5c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008e90:	4603      	mov	r3, r0
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fee0 	bl	8008c5c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
	return __p;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
      }
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f878 	bl	8008fac <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8008ed0:	4a07      	ldr	r2, [pc, #28]	; (8008ef0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	605a      	str	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	609a      	str	r2, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	08018b04 	.word	0x08018b04

08008ef4 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f84b 	bl	8008fc4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f853 	bl	8008fdc <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f855 	bl	8008ff8 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f856 	bl	8009012 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008f66:	4603      	mov	r3, r0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f855 	bl	800902a <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008f80:	4603      	mov	r3, r0
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	320c      	adds	r2, #12
 8008f9e:	6812      	ldr	r2, [r2, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	4790      	blx	r2
      }
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f845 	bl	8009044 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f845 	bl	800905c <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f835 	bl	8009072 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8009008:	4603      	mov	r3, r0
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f834 	bl	8009088 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8009020:	4603      	mov	r3, r0
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f833 	bl	80090a0 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800903a:	4603      	mov	r3, r0
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f833 	bl	80090b8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8009052:	4603      	mov	r3, r0
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4618      	mov	r0, r3
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f81d 	bl	80090d0 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8009096:	4603      	mov	r3, r0
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f81c 	bl	80090e6 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f81d 	bl	8009100 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 80090c6:	4603      	mov	r3, r0
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 f810 	bl	8009116 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 80090f6:	4603      	mov	r3, r0
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	4a05      	ldr	r2, [pc, #20]	; (800914c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fdc5 	bl	8007ccc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	08018a44 	.word	0x08018a44

08009150 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ffe7 	bl	800912c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800915e:	2110      	movs	r1, #16
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f00a fb06 	bl	8013772 <_ZdlPvj>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3310      	adds	r3, #16
 800917c:	4618      	mov	r0, r3
 800917e:	f7f9 f8c7 	bl	8002310 <_ZNSt8functionIFvvEED1Ev>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	f7f9 f8b6 	bl	80022f6 <_ZNSt8functionIFyvEED1Ev>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <_Z41__static_initialization_and_destruction_0ii>:

}
 8009194:	b580      	push	{r7, lr}
 8009196:	b08a      	sub	sp, #40	; 0x28
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d122      	bne.n	80091ea <_Z41__static_initialization_and_destruction_0ii+0x56>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d11d      	bne.n	80091ea <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	4917      	ldr	r1, [pc, #92]	; (8009210 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fb39 	bl	800782c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 80091ba:	f107 0318 	add.w	r3, r7, #24
 80091be:	4915      	ldr	r1, [pc, #84]	; (8009214 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fb63 	bl	800788c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 80091c6:	f107 0218 	add.w	r2, r7, #24
 80091ca:	f107 0308 	add.w	r3, r7, #8
 80091ce:	4619      	mov	r1, r3
 80091d0:	4811      	ldr	r0, [pc, #68]	; (8009218 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80091d2:	f7f9 f8aa 	bl	800232a <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 80091d6:	f107 0318 	add.w	r3, r7, #24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f9 f898 	bl	8002310 <_ZNSt8functionIFvvEED1Ev>
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7f9 f886 	bl	80022f6 <_ZNSt8functionIFyvEED1Ev>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d105      	bne.n	8009206 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80091fa:	4807      	ldr	r0, [pc, #28]	; (8009218 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80091fc:	f7ff ffb8 	bl	8009170 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8009200:	4806      	ldr	r0, [pc, #24]	; (800921c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009202:	f7fd f884 	bl	800630e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8009206:	bf00      	nop
 8009208:	3728      	adds	r7, #40	; 0x28
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	080062a1 	.word	0x080062a1
 8009214:	08006295 	.word	0x08006295
 8009218:	200004d0 	.word	0x200004d0
 800921c:	200004c8 	.word	0x200004c8

08009220 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68dc      	ldr	r4, [r3, #12]
 800922c:	2c00      	cmp	r4, #0
 800922e:	d006      	beq.n	800923e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff fbfb 	bl	8008a2c <_ZN15CyphalInterfaceD1Ev>
 8009236:	210c      	movs	r1, #12
 8009238:	4620      	mov	r0, r4
 800923a:	f00a fa9a 	bl	8013772 <_ZdlPvj>
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	bd90      	pop	{r4, r7, pc}

08009246 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
      { delete this; }
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff ff7b 	bl	8009150 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 800925a:	bf00      	nop
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 800926c:	2300      	movs	r3, #0
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 800927a:	b580      	push	{r7, lr}
 800927c:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8009280:	af00      	add	r7, sp, #0
 8009282:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009286:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800928a:	6018      	str	r0, [r3, #0]
 800928c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009290:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009294:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 8009296:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800929a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe fbb7 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80092aa:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80092ae:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80092b2:	f107 0108 	add.w	r1, r7, #8
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	f000 f874 	bl	80093a4 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80092bc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80092c0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3304      	adds	r3, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80092d0:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 80092d4:	f107 0108 	add.w	r1, r7, #8
 80092d8:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80092dc:	f5a0 7047 	sub.w	r0, r0, #796	; 0x31c
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	4798      	blx	r3
    }
 80092e6:	bf00      	nop
 80092e8:	f507 7748 	add.w	r7, r7, #800	; 0x320
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe fb89 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009306:	f107 030c 	add.w	r3, r7, #12
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4619      	mov	r1, r3
 800930e:	f000 f86a 	bl	80093e6 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3304      	adds	r3, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f107 010c 	add.w	r1, r7, #12
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
    }
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fb6b 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	f000 f86c 	bl	8009426 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3304      	adds	r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f107 010c 	add.w	r1, r7, #12
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
    }
 8009360:	bf00      	nop
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fb4d 	bl	8007a18 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800937e:	f107 0308 	add.w	r3, r7, #8
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4619      	mov	r1, r3
 8009386:	f000 f86e 	bl	8009466 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3304      	adds	r3, #4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f107 0108 	add.w	r1, r7, #8
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	4798      	blx	r3
    }
 800939c:	bf00      	nop
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 80093b0:	f240 2303 	movw	r3, #515	; 0x203
 80093b4:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	f107 0214 	add.w	r2, r7, #20
 80093be:	4619      	mov	r1, r3
 80093c0:	68b8      	ldr	r0, [r7, #8]
 80093c2:	f7fc fbb5 	bl	8005b30 <uavcan_register_Access_Request_1_0_deserialize_>
 80093c6:	4603      	mov	r3, r0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	09db      	lsrs	r3, r3, #7
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	3310      	adds	r3, #16
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fe55 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80093de:	bf00      	nop
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	f107 0214 	add.w	r2, r7, #20
 80093fe:	4619      	mov	r1, r3
 8009400:	68b8      	ldr	r0, [r7, #8]
 8009402:	f7fc fd81 	bl	8005f08 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 8009406:	4603      	mov	r3, r0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	09db      	lsrs	r3, r3, #7
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	3310      	adds	r3, #16
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fe35 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
}
 800941e:	bf00      	nop
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8009426:	b580      	push	{r7, lr}
 8009428:	b086      	sub	sp, #24
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009432:	230c      	movs	r3, #12
 8009434:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	f107 0214 	add.w	r2, r7, #20
 800943e:	4619      	mov	r1, r3
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	f7fa f86b 	bl	800351c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8009446:	4603      	mov	r3, r0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	09db      	lsrs	r3, r3, #7
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	3310      	adds	r3, #16
 8009458:	4618      	mov	r0, r3
 800945a:	f7fe fe15 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
}
 800945e:	bf00      	nop
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8009472:	230c      	movs	r3, #12
 8009474:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f107 0214 	add.w	r2, r7, #20
 800947e:	4619      	mov	r1, r3
 8009480:	68b8      	ldr	r0, [r7, #8]
 8009482:	f7f9 fcd5 	bl	8002e30 <uavcan_node_Heartbeat_1_0_deserialize_>
 8009486:	4603      	mov	r3, r0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	09db      	lsrs	r3, r3, #7
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	3310      	adds	r3, #16
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fdf5 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
}
 800949e:	bf00      	nop
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <_GLOBAL__sub_I_buffer>:
 80094a6:	b580      	push	{r7, lr}
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80094ae:	2001      	movs	r0, #1
 80094b0:	f7ff fe70 	bl	8009194 <_Z41__static_initialization_and_destruction_0ii>
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <_GLOBAL__sub_D_buffer>:
 80094b6:	b580      	push	{r7, lr}
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80094be:	2000      	movs	r0, #0
 80094c0:	f7ff fe68 	bl	8009194 <_Z41__static_initialization_and_destruction_0ii>
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80094cc:	4b1b      	ldr	r3, [pc, #108]	; (800953c <MX_SPI1_Init+0x74>)
 80094ce:	4a1c      	ldr	r2, [pc, #112]	; (8009540 <MX_SPI1_Init+0x78>)
 80094d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80094d2:	4b1a      	ldr	r3, [pc, #104]	; (800953c <MX_SPI1_Init+0x74>)
 80094d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80094d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80094da:	4b18      	ldr	r3, [pc, #96]	; (800953c <MX_SPI1_Init+0x74>)
 80094dc:	2200      	movs	r2, #0
 80094de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80094e0:	4b16      	ldr	r3, [pc, #88]	; (800953c <MX_SPI1_Init+0x74>)
 80094e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80094e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80094e8:	4b14      	ldr	r3, [pc, #80]	; (800953c <MX_SPI1_Init+0x74>)
 80094ea:	2202      	movs	r2, #2
 80094ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80094ee:	4b13      	ldr	r3, [pc, #76]	; (800953c <MX_SPI1_Init+0x74>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80094f4:	4b11      	ldr	r3, [pc, #68]	; (800953c <MX_SPI1_Init+0x74>)
 80094f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80094fc:	4b0f      	ldr	r3, [pc, #60]	; (800953c <MX_SPI1_Init+0x74>)
 80094fe:	2220      	movs	r2, #32
 8009500:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009502:	4b0e      	ldr	r3, [pc, #56]	; (800953c <MX_SPI1_Init+0x74>)
 8009504:	2200      	movs	r2, #0
 8009506:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009508:	4b0c      	ldr	r3, [pc, #48]	; (800953c <MX_SPI1_Init+0x74>)
 800950a:	2200      	movs	r2, #0
 800950c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800950e:	4b0b      	ldr	r3, [pc, #44]	; (800953c <MX_SPI1_Init+0x74>)
 8009510:	2200      	movs	r2, #0
 8009512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009514:	4b09      	ldr	r3, [pc, #36]	; (800953c <MX_SPI1_Init+0x74>)
 8009516:	2207      	movs	r2, #7
 8009518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800951a:	4b08      	ldr	r3, [pc, #32]	; (800953c <MX_SPI1_Init+0x74>)
 800951c:	2200      	movs	r2, #0
 800951e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009520:	4b06      	ldr	r3, [pc, #24]	; (800953c <MX_SPI1_Init+0x74>)
 8009522:	2200      	movs	r2, #0
 8009524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009526:	4805      	ldr	r0, [pc, #20]	; (800953c <MX_SPI1_Init+0x74>)
 8009528:	f004 ffd2 	bl	800e4d0 <HAL_SPI_Init>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009532:	f7f8 fe56 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009536:	bf00      	nop
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	200007ac 	.word	0x200007ac
 8009540:	40013000 	.word	0x40013000

08009544 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009548:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <MX_SPI3_Init+0x74>)
 800954a:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <MX_SPI3_Init+0x78>)
 800954c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800954e:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009554:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009556:	4b18      	ldr	r3, [pc, #96]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009558:	2200      	movs	r2, #0
 800955a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800955c:	4b16      	ldr	r3, [pc, #88]	; (80095b8 <MX_SPI3_Init+0x74>)
 800955e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009562:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009564:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009566:	2200      	movs	r2, #0
 8009568:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800956a:	4b13      	ldr	r3, [pc, #76]	; (80095b8 <MX_SPI3_Init+0x74>)
 800956c:	2201      	movs	r2, #1
 800956e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009570:	4b11      	ldr	r3, [pc, #68]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009576:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009578:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <MX_SPI3_Init+0x74>)
 800957a:	2218      	movs	r2, #24
 800957c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800957e:	4b0e      	ldr	r3, [pc, #56]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009580:	2200      	movs	r2, #0
 8009582:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009584:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009586:	2200      	movs	r2, #0
 8009588:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800958a:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <MX_SPI3_Init+0x74>)
 800958c:	2200      	movs	r2, #0
 800958e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009590:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009592:	2207      	movs	r2, #7
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009596:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <MX_SPI3_Init+0x74>)
 8009598:	2200      	movs	r2, #0
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800959c:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <MX_SPI3_Init+0x74>)
 800959e:	2200      	movs	r2, #0
 80095a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80095a2:	4805      	ldr	r0, [pc, #20]	; (80095b8 <MX_SPI3_Init+0x74>)
 80095a4:	f004 ff94 	bl	800e4d0 <HAL_SPI_Init>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80095ae:	f7f8 fe18 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000810 	.word	0x20000810
 80095bc:	40003c00 	.word	0x40003c00

080095c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08c      	sub	sp, #48	; 0x30
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095c8:	f107 031c 	add.w	r3, r7, #28
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	605a      	str	r2, [r3, #4]
 80095d2:	609a      	str	r2, [r3, #8]
 80095d4:	60da      	str	r2, [r3, #12]
 80095d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a33      	ldr	r2, [pc, #204]	; (80096ac <HAL_SPI_MspInit+0xec>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d131      	bne.n	8009646 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80095e2:	4b33      	ldr	r3, [pc, #204]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 80095e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e6:	4a32      	ldr	r2, [pc, #200]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 80095e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095ec:	6613      	str	r3, [r2, #96]	; 0x60
 80095ee:	4b30      	ldr	r3, [pc, #192]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 80095f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095fa:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 80095fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fe:	4a2c      	ldr	r2, [pc, #176]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009606:	4b2a      	ldr	r3, [pc, #168]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 8009608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009612:	23e0      	movs	r3, #224	; 0xe0
 8009614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009616:	2302      	movs	r3, #2
 8009618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800961a:	2300      	movs	r3, #0
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800961e:	2300      	movs	r3, #0
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009622:	2305      	movs	r3, #5
 8009624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009626:	f107 031c 	add.w	r3, r7, #28
 800962a:	4619      	mov	r1, r3
 800962c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009630:	f002 f874 	bl	800b71c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8009634:	2200      	movs	r2, #0
 8009636:	2100      	movs	r1, #0
 8009638:	2023      	movs	r0, #35	; 0x23
 800963a:	f001 f92c 	bl	800a896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800963e:	2023      	movs	r0, #35	; 0x23
 8009640:	f001 f943 	bl	800a8ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009644:	e02d      	b.n	80096a2 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <HAL_SPI_MspInit+0xf4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d128      	bne.n	80096a2 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009650:	4b17      	ldr	r3, [pc, #92]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 8009652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009654:	4a16      	ldr	r2, [pc, #88]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 8009656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800965a:	6593      	str	r3, [r2, #88]	; 0x58
 800965c:	4b14      	ldr	r3, [pc, #80]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 800965e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009664:	613b      	str	r3, [r7, #16]
 8009666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009668:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	4a10      	ldr	r2, [pc, #64]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 800966e:	f043 0304 	orr.w	r3, r3, #4
 8009672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <HAL_SPI_MspInit+0xf0>)
 8009676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009680:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009686:	2302      	movs	r3, #2
 8009688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968a:	2300      	movs	r3, #0
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800968e:	2300      	movs	r3, #0
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009692:	2306      	movs	r3, #6
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009696:	f107 031c 	add.w	r3, r7, #28
 800969a:	4619      	mov	r1, r3
 800969c:	4806      	ldr	r0, [pc, #24]	; (80096b8 <HAL_SPI_MspInit+0xf8>)
 800969e:	f002 f83d 	bl	800b71c <HAL_GPIO_Init>
}
 80096a2:	bf00      	nop
 80096a4:	3730      	adds	r7, #48	; 0x30
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	40013000 	.word	0x40013000
 80096b0:	40021000 	.word	0x40021000
 80096b4:	40003c00 	.word	0x40003c00
 80096b8:	48000800 	.word	0x48000800

080096bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096c2:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <HAL_MspInit+0x44>)
 80096c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c6:	4a0e      	ldr	r2, [pc, #56]	; (8009700 <HAL_MspInit+0x44>)
 80096c8:	f043 0301 	orr.w	r3, r3, #1
 80096cc:	6613      	str	r3, [r2, #96]	; 0x60
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <HAL_MspInit+0x44>)
 80096d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <HAL_MspInit+0x44>)
 80096dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096de:	4a08      	ldr	r2, [pc, #32]	; (8009700 <HAL_MspInit+0x44>)
 80096e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e4:	6593      	str	r3, [r2, #88]	; 0x58
 80096e6:	4b06      	ldr	r3, [pc, #24]	; (8009700 <HAL_MspInit+0x44>)
 80096e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80096f2:	f003 ff61 	bl	800d5b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40021000 	.word	0x40021000

08009704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009708:	e7fe      	b.n	8009708 <NMI_Handler+0x4>

0800970a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800970a:	b480      	push	{r7}
 800970c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800970e:	e7fe      	b.n	800970e <HardFault_Handler+0x4>

08009710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009714:	e7fe      	b.n	8009714 <MemManage_Handler+0x4>

08009716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009716:	b480      	push	{r7}
 8009718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800971a:	e7fe      	b.n	800971a <BusFault_Handler+0x4>

0800971c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009720:	e7fe      	b.n	8009720 <UsageFault_Handler+0x4>

08009722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009722:	b480      	push	{r7}
 8009724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009726:	bf00      	nop
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009734:	bf00      	nop
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800973e:	b480      	push	{r7}
 8009740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009742:	bf00      	nop
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009750:	f000 ff86 	bl	800a660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009754:	bf00      	nop
 8009756:	bd80      	pop	{r7, pc}

08009758 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 800975c:	4802      	ldr	r0, [pc, #8]	; (8009768 <DMA1_Channel1_IRQHandler+0x10>)
 800975e:	f001 fa37 	bl	800abd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000374 	.word	0x20000374

0800976c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8009770:	4802      	ldr	r0, [pc, #8]	; (800977c <DMA1_Channel2_IRQHandler+0x10>)
 8009772:	f001 fa2d 	bl	800abd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009776:	bf00      	nop
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200003d4 	.word	0x200003d4

08009780 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009784:	4802      	ldr	r0, [pc, #8]	; (8009790 <SPI1_IRQHandler+0x10>)
 8009786:	f005 fae5 	bl	800ed54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	200007ac 	.word	0x200007ac

08009794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009798:	4802      	ldr	r0, [pc, #8]	; (80097a4 <USART2_IRQHandler+0x10>)
 800979a:	f005 ff93 	bl	800f6c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800979e:	bf00      	nop
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200008c4 	.word	0x200008c4

080097a8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80097ac:	4802      	ldr	r0, [pc, #8]	; (80097b8 <I2C4_EV_IRQHandler+0x10>)
 80097ae:	f002 fd1f 	bl	800c1f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80097b2:	bf00      	nop
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000320 	.word	0x20000320

080097bc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80097c0:	4802      	ldr	r0, [pc, #8]	; (80097cc <I2C4_ER_IRQHandler+0x10>)
 80097c2:	f002 fd2f 	bl	800c224 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80097c6:	bf00      	nop
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000320 	.word	0x20000320

080097d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  return 1;
 80097d4:	2301      	movs	r3, #1
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <_kill>:

int _kill(int pid, int sig)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80097ea:	f00b f967 	bl	8014abc <__errno>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2216      	movs	r2, #22
 80097f2:	601a      	str	r2, [r3, #0]
  return -1;
 80097f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <_exit>:

void _exit (int status)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009808:	f04f 31ff 	mov.w	r1, #4294967295
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffe7 	bl	80097e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009812:	e7fe      	b.n	8009812 <_exit+0x12>

08009814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	e00a      	b.n	800983c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009826:	f3af 8000 	nop.w
 800982a:	4601      	mov	r1, r0
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	60ba      	str	r2, [r7, #8]
 8009832:	b2ca      	uxtb	r2, r1
 8009834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	3301      	adds	r3, #1
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	dbf0      	blt.n	8009826 <_read+0x12>
  }

  return len;
 8009844:	687b      	ldr	r3, [r7, #4]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e009      	b.n	8009874 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	60ba      	str	r2, [r7, #8]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	4618      	mov	r0, r3
 800986a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	3301      	adds	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	429a      	cmp	r2, r3
 800987a:	dbf1      	blt.n	8009860 <_write+0x12>
  }
  return len;
 800987c:	687b      	ldr	r3, [r7, #4]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <_close>:

int _close(int file)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800988e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80098ae:	605a      	str	r2, [r3, #4]
  return 0;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <_isatty>:

int _isatty(int file)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80098c6:	2301      	movs	r3, #1
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
	...

080098f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80098f8:	4a14      	ldr	r2, [pc, #80]	; (800994c <_sbrk+0x5c>)
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <_sbrk+0x60>)
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009904:	4b13      	ldr	r3, [pc, #76]	; (8009954 <_sbrk+0x64>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800990c:	4b11      	ldr	r3, [pc, #68]	; (8009954 <_sbrk+0x64>)
 800990e:	4a12      	ldr	r2, [pc, #72]	; (8009958 <_sbrk+0x68>)
 8009910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009912:	4b10      	ldr	r3, [pc, #64]	; (8009954 <_sbrk+0x64>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4413      	add	r3, r2
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	429a      	cmp	r2, r3
 800991e:	d207      	bcs.n	8009930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009920:	f00b f8cc 	bl	8014abc <__errno>
 8009924:	4603      	mov	r3, r0
 8009926:	220c      	movs	r2, #12
 8009928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800992a:	f04f 33ff 	mov.w	r3, #4294967295
 800992e:	e009      	b.n	8009944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009930:	4b08      	ldr	r3, [pc, #32]	; (8009954 <_sbrk+0x64>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <_sbrk+0x64>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4413      	add	r3, r2
 800993e:	4a05      	ldr	r2, [pc, #20]	; (8009954 <_sbrk+0x64>)
 8009940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20020000 	.word	0x20020000
 8009950:	00000400 	.word	0x00000400
 8009954:	20000874 	.word	0x20000874
 8009958:	20000af0 	.word	0x20000af0

0800995c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009960:	4b06      	ldr	r3, [pc, #24]	; (800997c <SystemInit+0x20>)
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009966:	4a05      	ldr	r2, [pc, #20]	; (800997c <SystemInit+0x20>)
 8009968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800996c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009970:	bf00      	nop
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	e000ed00 	.word	0xe000ed00

08009980 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08c      	sub	sp, #48	; 0x30
 8009984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009986:	f107 030c 	add.w	r3, r7, #12
 800998a:	2224      	movs	r2, #36	; 0x24
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f00a ffdb 	bl	801494a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009994:	463b      	mov	r3, r7
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	605a      	str	r2, [r3, #4]
 800999c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800999e:	4b23      	ldr	r3, [pc, #140]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099a0:	4a23      	ldr	r2, [pc, #140]	; (8009a30 <MX_TIM8_Init+0xb0>)
 80099a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80099a4:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099aa:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80099b0:	4b1e      	ldr	r3, [pc, #120]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099b8:	4b1c      	ldr	r3, [pc, #112]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80099be:	4b1b      	ldr	r3, [pc, #108]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099c4:	4b19      	ldr	r3, [pc, #100]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80099ca:	2301      	movs	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80099d2:	2301      	movs	r3, #1
 80099d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80099de:	2300      	movs	r3, #0
 80099e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80099e2:	2301      	movs	r3, #1
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80099e6:	2300      	movs	r3, #0
 80099e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80099ee:	f107 030c 	add.w	r3, r7, #12
 80099f2:	4619      	mov	r1, r3
 80099f4:	480d      	ldr	r0, [pc, #52]	; (8009a2c <MX_TIM8_Init+0xac>)
 80099f6:	f005 fc25 	bl	800f244 <HAL_TIM_Encoder_Init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8009a00:	f7f8 fbef 	bl	80021e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a04:	2300      	movs	r3, #0
 8009a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009a10:	463b      	mov	r3, r7
 8009a12:	4619      	mov	r1, r3
 8009a14:	4805      	ldr	r0, [pc, #20]	; (8009a2c <MX_TIM8_Init+0xac>)
 8009a16:	f005 fd6f 	bl	800f4f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8009a20:	f7f8 fbdf 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009a24:	bf00      	nop
 8009a26:	3730      	adds	r7, #48	; 0x30
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20000878 	.word	0x20000878
 8009a30:	40013400 	.word	0x40013400

08009a34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08a      	sub	sp, #40	; 0x28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a3c:	f107 0314 	add.w	r3, r7, #20
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	609a      	str	r2, [r3, #8]
 8009a48:	60da      	str	r2, [r3, #12]
 8009a4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a25      	ldr	r2, [pc, #148]	; (8009ae8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d143      	bne.n	8009ade <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009a56:	4b25      	ldr	r3, [pc, #148]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5a:	4a24      	ldr	r2, [pc, #144]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a60:	6613      	str	r3, [r2, #96]	; 0x60
 8009a62:	4b22      	ldr	r3, [pc, #136]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a6e:	4b1f      	ldr	r3, [pc, #124]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a72:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a74:	f043 0304 	orr.w	r3, r3, #4
 8009a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a7a:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a86:	4b19      	ldr	r3, [pc, #100]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	4a18      	ldr	r2, [pc, #96]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <HAL_TIM_Encoder_MspInit+0xb8>)
 8009a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	60bb      	str	r3, [r7, #8]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009a9e:	2380      	movs	r3, #128	; 0x80
 8009aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009aae:	2304      	movs	r3, #4
 8009ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ab2:	f107 0314 	add.w	r3, r7, #20
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	480d      	ldr	r0, [pc, #52]	; (8009af0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8009aba:	f001 fe2f 	bl	800b71c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aca:	2300      	movs	r3, #0
 8009acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8009ace:	2305      	movs	r3, #5
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ad2:	f107 0314 	add.w	r3, r7, #20
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4806      	ldr	r0, [pc, #24]	; (8009af4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8009ada:	f001 fe1f 	bl	800b71c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009ade:	bf00      	nop
 8009ae0:	3728      	adds	r7, #40	; 0x28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	40013400 	.word	0x40013400
 8009aec:	40021000 	.word	0x40021000
 8009af0:	48000800 	.word	0x48000800
 8009af4:	48000400 	.word	0x48000400

08009af8 <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]
 8009b04:	2300      	movs	r3, #0
 8009b06:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 8009b08:	23a0      	movs	r3, #160	; 0xa0
 8009b0a:	723b      	strb	r3, [r7, #8]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	727b      	strb	r3, [r7, #9]
 8009b10:	2300      	movs	r3, #0
 8009b12:	72bb      	strb	r3, [r7, #10]
 8009b14:	2300      	movs	r3, #0
 8009b16:	72fb      	strb	r3, [r7, #11]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009b1c:	f107 0308 	add.w	r3, r7, #8
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 f949 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 8009b26:	23ad      	movs	r3, #173	; 0xad
 8009b28:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	0e1b      	lsrs	r3, r3, #24
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	141b      	asrs	r3, r3, #16
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	121b      	asrs	r3, r3, #8
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009b48:	f107 0308 	add.w	r3, r7, #8
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 f933 	bl	8009db8 <tmc5160_write>
}
 8009b52:	bf00      	nop
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	0000      	movs	r0, r0
 8009b5c:	0000      	movs	r0, r0
	...

08009b60 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7f6 fd03 	bl	8000574 <__aeabi_i2d>
 8009b6e:	a336      	add	r3, pc, #216	; (adr r3, 8009c48 <tmc5160_move+0xe8>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 fd68 	bl	8000648 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	4619      	mov	r1, r3
 8009b80:	f7f7 f812 	bl	8000ba8 <__aeabi_d2iz>
 8009b84:	4603      	mov	r3, r0
 8009b86:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	105b      	asrs	r3, r3, #1
 8009b94:	617b      	str	r3, [r7, #20]

	if (vel < 0) //select positive or negative mode depending on vel sign
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	da0f      	bge.n	8009bbc <tmc5160_move+0x5c>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8009b9c:	23a0      	movs	r3, #160	; 0xa0
 8009b9e:	733b      	strb	r3, [r7, #12]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	737b      	strb	r3, [r7, #13]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
 8009bac:	2302      	movs	r3, #2
 8009bae:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8009bb0:	f107 030c 	add.w	r3, r7, #12
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f8ff 	bl	8009db8 <tmc5160_write>
 8009bba:	e00e      	b.n	8009bda <tmc5160_move+0x7a>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8009bbc:	23a0      	movs	r3, #160	; 0xa0
 8009bbe:	733b      	strb	r3, [r7, #12]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	737b      	strb	r3, [r7, #13]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
 8009bcc:	2301      	movs	r3, #1
 8009bce:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8009bd0:	f107 030c 	add.w	r3, r7, #12
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f8ef 	bl	8009db8 <tmc5160_write>
	}

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009bda:	23a5      	movs	r3, #165	; 0xa5
 8009bdc:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	0e1b      	lsrs	r3, r3, #24
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	141b      	asrs	r3, r3, #16
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	121b      	asrs	r3, r3, #8
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 f8d9 	bl	8009db8 <tmc5160_write>

	vel = abs(vel);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfb8      	it	lt
 8009c0c:	425b      	neglt	r3, r3
 8009c0e:	607b      	str	r3, [r7, #4]
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009c10:	23a7      	movs	r3, #167	; 0xa7
 8009c12:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0e1b      	lsrs	r3, r3, #24
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	141b      	asrs	r3, r3, #16
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	121b      	asrs	r3, r3, #8
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009c32:	f107 030c 	add.w	r3, r7, #12
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f8be 	bl	8009db8 <tmc5160_write>
}
 8009c3c:	bf00      	nop
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	f3af 8000 	nop.w
 8009c48:	77ffebde 	.word	0x77ffebde
 8009c4c:	3ff65e9f 	.word	0x3ff65e9f

08009c50 <tmc5160_set_default_vel>:

void tmc5160_set_default_vel()
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009c56:	2300      	movs	r3, #0
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	713b      	strb	r3, [r7, #4]

	tmc5160_velocity(1000000); //initial vel config
 8009c5e:	482d      	ldr	r0, [pc, #180]	; (8009d14 <tmc5160_set_default_vel+0xc4>)
 8009c60:	f000 f85a 	bl	8009d18 <tmc5160_velocity>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009c64:	23a3      	movs	r3, #163	; 0xa3
 8009c66:	703b      	strb	r3, [r7, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	707b      	strb	r3, [r7, #1]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	70bb      	strb	r3, [r7, #2]
 8009c70:	2300      	movs	r3, #0
 8009c72:	70fb      	strb	r3, [r7, #3]
 8009c74:	230a      	movs	r3, #10
 8009c76:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009c78:	463b      	mov	r3, r7
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f89c 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8009c80:	23a4      	movs	r3, #164	; 0xa4
 8009c82:	703b      	strb	r3, [r7, #0]
 8009c84:	2300      	movs	r3, #0
 8009c86:	707b      	strb	r3, [r7, #1]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	70bb      	strb	r3, [r7, #2]
 8009c8c:	236e      	movs	r3, #110	; 0x6e
 8009c8e:	70fb      	strb	r3, [r7, #3]
 8009c90:	2320      	movs	r3, #32
 8009c92:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009c94:	463b      	mov	r3, r7
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f88e 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8009c9c:	23a6      	movs	r3, #166	; 0xa6
 8009c9e:	703b      	strb	r3, [r7, #0]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	707b      	strb	r3, [r7, #1]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	70bb      	strb	r3, [r7, #2]
 8009ca8:	2323      	movs	r3, #35	; 0x23
 8009caa:	70fb      	strb	r3, [r7, #3]
 8009cac:	2388      	movs	r3, #136	; 0x88
 8009cae:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009cb0:	463b      	mov	r3, r7
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f880 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 8009cb8:	23a8      	movs	r3, #168	; 0xa8
 8009cba:	703b      	strb	r3, [r7, #0]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	707b      	strb	r3, [r7, #1]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	70bb      	strb	r3, [r7, #2]
 8009cc4:	2323      	movs	r3, #35	; 0x23
 8009cc6:	70fb      	strb	r3, [r7, #3]
 8009cc8:	2388      	movs	r3, #136	; 0x88
 8009cca:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009ccc:	463b      	mov	r3, r7
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f872 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 8009cd4:	23aa      	movs	r3, #170	; 0xaa
 8009cd6:	703b      	strb	r3, [r7, #0]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	707b      	strb	r3, [r7, #1]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	70bb      	strb	r3, [r7, #2]
 8009ce0:	236e      	movs	r3, #110	; 0x6e
 8009ce2:	70fb      	strb	r3, [r7, #3]
 8009ce4:	2320      	movs	r3, #32
 8009ce6:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009ce8:	463b      	mov	r3, r7
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 f864 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8009cf0:	23ab      	movs	r3, #171	; 0xab
 8009cf2:	703b      	strb	r3, [r7, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	707b      	strb	r3, [r7, #1]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	70bb      	strb	r3, [r7, #2]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	70fb      	strb	r3, [r7, #3]
 8009d00:	230a      	movs	r3, #10
 8009d02:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d04:	463b      	mov	r3, r7
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f856 	bl	8009db8 <tmc5160_write>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	000f4240 	.word	0x000f4240

08009d18 <tmc5160_velocity>:

void tmc5160_velocity(uint32_t vel)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7f6 fc17 	bl	8000554 <__aeabi_ui2d>
 8009d26:	a322      	add	r3, pc, #136	; (adr r3, 8009db0 <tmc5160_velocity+0x98>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f7f6 fc8c 	bl	8000648 <__aeabi_dmul>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4610      	mov	r0, r2
 8009d36:	4619      	mov	r1, r3
 8009d38:	f7f6 ff5e 	bl	8000bf8 <__aeabi_d2uiz>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	2300      	movs	r3, #0
 8009d46:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	085b      	lsrs	r3, r3, #1
 8009d4c:	617b      	str	r3, [r7, #20]

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009d4e:	23a5      	movs	r3, #165	; 0xa5
 8009d50:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	0e1b      	lsrs	r3, r3, #24
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	0c1b      	lsrs	r3, r3, #16
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	0a1b      	lsrs	r3, r3, #8
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009d70:	f107 030c 	add.w	r3, r7, #12
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 f81f 	bl	8009db8 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009d7a:	23a7      	movs	r3, #167	; 0xa7
 8009d7c:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	0e1b      	lsrs	r3, r3, #24
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	0a1b      	lsrs	r3, r3, #8
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009d9c:	f107 030c 	add.w	r3, r7, #12
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f809 	bl	8009db8 <tmc5160_write>

}
 8009da6:	bf00      	nop
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	77ffebde 	.word	0x77ffebde
 8009db4:	3ff65e9f 	.word	0x3ff65e9f

08009db8 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2110      	movs	r1, #16
 8009dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009dc8:	f001 fe2a 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd0:	2205      	movs	r2, #5
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	4806      	ldr	r0, [pc, #24]	; (8009df0 <tmc5160_write+0x38>)
 8009dd6:	f004 fc26 	bl	800e626 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2110      	movs	r1, #16
 8009dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009de2:	f001 fe1d 	bl	800ba20 <HAL_GPIO_WritePin>
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	200007ac 	.word	0x200007ac

08009df4 <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2110      	movs	r1, #16
 8009e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e06:	f001 fe0b 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2305      	movs	r3, #5
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	4812      	ldr	r0, [pc, #72]	; (8009e60 <tmc5160_read+0x6c>)
 8009e18:	f004 fd7a 	bl	800e910 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	2110      	movs	r1, #16
 8009e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e24:	f001 fdfc 	bl	800ba20 <HAL_GPIO_WritePin>
	nop();
 8009e28:	bf00      	nop
	nop();
 8009e2a:	bf00      	nop
	nop();
 8009e2c:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2110      	movs	r1, #16
 8009e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e36:	f001 fdf3 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	2305      	movs	r3, #5
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	4806      	ldr	r0, [pc, #24]	; (8009e60 <tmc5160_read+0x6c>)
 8009e48:	f004 fd62 	bl	800e910 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	2110      	movs	r1, #16
 8009e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e54:	f001 fde4 	bl	800ba20 <HAL_GPIO_WritePin>
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200007ac 	.word	0x200007ac

08009e64 <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 8009e72:	2300      	movs	r3, #0
 8009e74:	607b      	str	r3, [r7, #4]
 8009e76:	2300      	movs	r3, #0
 8009e78:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 8009e7a:	2321      	movs	r3, #33	; 0x21
 8009e7c:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 8009e7e:	1d3a      	adds	r2, r7, #4
 8009e80:	f107 030c 	add.w	r3, r7, #12
 8009e84:	4611      	mov	r1, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff ffb4 	bl	8009df4 <tmc5160_read>

	int32_t response = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8009e90:	797b      	ldrb	r3, [r7, #5]
 8009e92:	461a      	mov	r2, r3
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8009ea0:	79bb      	ldrb	r3, [r7, #6]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8009ec0:	7a3b      	ldrb	r3, [r7, #8]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]

	return response;
 8009eca:	697b      	ldr	r3, [r7, #20]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	0000      	movs	r0, r0
	...

08009ed8 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	603b      	str	r3, [r7, #0]
 8009eea:	2300      	movs	r3, #0
 8009eec:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 8009eee:	2322      	movs	r3, #34	; 0x22
 8009ef0:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8009ef2:	463a      	mov	r2, r7
 8009ef4:	f107 0308 	add.w	r3, r7, #8
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff ff7a 	bl	8009df4 <tmc5160_read>

	int32_t response = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 8009f04:	787b      	ldrb	r3, [r7, #1]
 8009f06:	461a      	mov	r2, r3
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 8009f14:	78bb      	ldrb	r3, [r7, #2]
 8009f16:	461a      	mov	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	021b      	lsls	r3, r3, #8
 8009f22:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	461a      	mov	r2, r3
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 8009f34:	793b      	ldrb	r3, [r7, #4]
 8009f36:	461a      	mov	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 8009f42:	2118      	movs	r1, #24
 8009f44:	6978      	ldr	r0, [r7, #20]
 8009f46:	f000 fa7d 	bl	800a444 <sign_extend_bits_to_32>
 8009f4a:	6138      	str	r0, [r7, #16]

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009f4c:	6938      	ldr	r0, [r7, #16]
 8009f4e:	f7f6 fb11 	bl	8000574 <__aeabi_i2d>
 8009f52:	a309      	add	r3, pc, #36	; (adr r3, 8009f78 <tmc5160_velocity_read+0xa0>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f7f6 fca0 	bl	800089c <__aeabi_ddiv>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4610      	mov	r0, r2
 8009f62:	4619      	mov	r1, r3
 8009f64:	f7f6 fe20 	bl	8000ba8 <__aeabi_d2iz>
 8009f68:	4603      	mov	r3, r0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	f3af 8000 	nop.w
 8009f78:	77ffebde 	.word	0x77ffebde
 8009f7c:	3ff65e9f 	.word	0x3ff65e9f

08009f80 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2120      	movs	r1, #32
 8009f8c:	4882      	ldr	r0, [pc, #520]	; (800a198 <tmc5160_init+0x218>)
 8009f8e:	f001 fd47 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 8009f92:	2201      	movs	r2, #1
 8009f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f9c:	f001 fd40 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009faa:	f001 fd39 	bl	800ba20 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009fae:	2201      	movs	r2, #1
 8009fb0:	2110      	movs	r1, #16
 8009fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fb6:	f001 fd33 	bl	800ba20 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fc4:	f001 fd2c 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fd2:	f001 fd25 	bl	800ba20 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009fd6:	2064      	movs	r0, #100	; 0x64
 8009fd8:	f000 fb60 	bl	800a69c <HAL_Delay>

	uint8_t WData[5] = {0};
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60bb      	str	r3, [r7, #8]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8009fe4:	23ec      	movs	r3, #236	; 0xec
 8009fe6:	723b      	strb	r3, [r7, #8]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	727b      	strb	r3, [r7, #9]
 8009fec:	2300      	movs	r3, #0
 8009fee:	72bb      	strb	r3, [r7, #10]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	72fb      	strb	r3, [r7, #11]
 8009ff4:	23c3      	movs	r3, #195	; 0xc3
 8009ff6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009ff8:	f107 0308 	add.w	r3, r7, #8
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff fedb 	bl	8009db8 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 800a002:	2390      	movs	r3, #144	; 0x90
 800a004:	723b      	strb	r3, [r7, #8]
 800a006:	2300      	movs	r3, #0
 800a008:	727b      	strb	r3, [r7, #9]
 800a00a:	2300      	movs	r3, #0
 800a00c:	72bb      	strb	r3, [r7, #10]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	72fb      	strb	r3, [r7, #11]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a022:	f107 0308 	add.w	r3, r7, #8
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff fec6 	bl	8009db8 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800a02c:	2391      	movs	r3, #145	; 0x91
 800a02e:	723b      	strb	r3, [r7, #8]
 800a030:	2300      	movs	r3, #0
 800a032:	727b      	strb	r3, [r7, #9]
 800a034:	2300      	movs	r3, #0
 800a036:	72bb      	strb	r3, [r7, #10]
 800a038:	2300      	movs	r3, #0
 800a03a:	72fb      	strb	r3, [r7, #11]
 800a03c:	230a      	movs	r3, #10
 800a03e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a040:	f107 0308 	add.w	r3, r7, #8
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff feb7 	bl	8009db8 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 800a04a:	23f0      	movs	r3, #240	; 0xf0
 800a04c:	723b      	strb	r3, [r7, #8]
 800a04e:	23c4      	movs	r3, #196	; 0xc4
 800a050:	727b      	strb	r3, [r7, #9]
 800a052:	230d      	movs	r3, #13
 800a054:	72bb      	strb	r3, [r7, #10]
 800a056:	2300      	movs	r3, #0
 800a058:	72fb      	strb	r3, [r7, #11]
 800a05a:	231e      	movs	r3, #30
 800a05c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a05e:	f107 0308 	add.w	r3, r7, #8
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff fea8 	bl	8009db8 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a068:	2380      	movs	r3, #128	; 0x80
 800a06a:	723b      	strb	r3, [r7, #8]
 800a06c:	2300      	movs	r3, #0
 800a06e:	727b      	strb	r3, [r7, #9]
 800a070:	2300      	movs	r3, #0
 800a072:	72bb      	strb	r3, [r7, #10]
 800a074:	2300      	movs	r3, #0
 800a076:	72fb      	strb	r3, [r7, #11]
 800a078:	2304      	movs	r3, #4
 800a07a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff fe99 	bl	8009db8 <tmc5160_write>

	tmc5160_velocity(1000000); //initial vel config
 800a086:	4845      	ldr	r0, [pc, #276]	; (800a19c <tmc5160_init+0x21c>)
 800a088:	f7ff fe46 	bl	8009d18 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 800a08c:	2393      	movs	r3, #147	; 0x93
 800a08e:	723b      	strb	r3, [r7, #8]
 800a090:	2300      	movs	r3, #0
 800a092:	727b      	strb	r3, [r7, #9]
 800a094:	2300      	movs	r3, #0
 800a096:	72bb      	strb	r3, [r7, #10]
 800a098:	2300      	movs	r3, #0
 800a09a:	72fb      	strb	r3, [r7, #11]
 800a09c:	23c8      	movs	r3, #200	; 0xc8
 800a09e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0a0:	f107 0308 	add.w	r3, r7, #8
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fe87 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 800a0aa:	23a0      	movs	r3, #160	; 0xa0
 800a0ac:	723b      	strb	r3, [r7, #8]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	727b      	strb	r3, [r7, #9]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	72bb      	strb	r3, [r7, #10]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	72fb      	strb	r3, [r7, #11]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0be:	f107 0308 	add.w	r3, r7, #8
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff fe78 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800a0c8:	23a3      	movs	r3, #163	; 0xa3
 800a0ca:	723b      	strb	r3, [r7, #8]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	727b      	strb	r3, [r7, #9]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	72bb      	strb	r3, [r7, #10]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	72fb      	strb	r3, [r7, #11]
 800a0d8:	230a      	movs	r3, #10
 800a0da:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0dc:	f107 0308 	add.w	r3, r7, #8
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7ff fe69 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 800a0e6:	23a4      	movs	r3, #164	; 0xa4
 800a0e8:	723b      	strb	r3, [r7, #8]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	727b      	strb	r3, [r7, #9]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	72bb      	strb	r3, [r7, #10]
 800a0f2:	236e      	movs	r3, #110	; 0x6e
 800a0f4:	72fb      	strb	r3, [r7, #11]
 800a0f6:	2320      	movs	r3, #32
 800a0f8:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0fa:	f107 0308 	add.w	r3, r7, #8
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff fe5a 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 800a104:	23a6      	movs	r3, #166	; 0xa6
 800a106:	723b      	strb	r3, [r7, #8]
 800a108:	2300      	movs	r3, #0
 800a10a:	727b      	strb	r3, [r7, #9]
 800a10c:	2300      	movs	r3, #0
 800a10e:	72bb      	strb	r3, [r7, #10]
 800a110:	2323      	movs	r3, #35	; 0x23
 800a112:	72fb      	strb	r3, [r7, #11]
 800a114:	2388      	movs	r3, #136	; 0x88
 800a116:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a118:	f107 0308 	add.w	r3, r7, #8
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff fe4b 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 800a122:	23a8      	movs	r3, #168	; 0xa8
 800a124:	723b      	strb	r3, [r7, #8]
 800a126:	2300      	movs	r3, #0
 800a128:	727b      	strb	r3, [r7, #9]
 800a12a:	2300      	movs	r3, #0
 800a12c:	72bb      	strb	r3, [r7, #10]
 800a12e:	2323      	movs	r3, #35	; 0x23
 800a130:	72fb      	strb	r3, [r7, #11]
 800a132:	2388      	movs	r3, #136	; 0x88
 800a134:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a136:	f107 0308 	add.w	r3, r7, #8
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fe3c 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 800a140:	23aa      	movs	r3, #170	; 0xaa
 800a142:	723b      	strb	r3, [r7, #8]
 800a144:	2300      	movs	r3, #0
 800a146:	727b      	strb	r3, [r7, #9]
 800a148:	2300      	movs	r3, #0
 800a14a:	72bb      	strb	r3, [r7, #10]
 800a14c:	236e      	movs	r3, #110	; 0x6e
 800a14e:	72fb      	strb	r3, [r7, #11]
 800a150:	2320      	movs	r3, #32
 800a152:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a154:	f107 0308 	add.w	r3, r7, #8
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff fe2d 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 800a15e:	23ab      	movs	r3, #171	; 0xab
 800a160:	723b      	strb	r3, [r7, #8]
 800a162:	2300      	movs	r3, #0
 800a164:	727b      	strb	r3, [r7, #9]
 800a166:	2300      	movs	r3, #0
 800a168:	72bb      	strb	r3, [r7, #10]
 800a16a:	2300      	movs	r3, #0
 800a16c:	72fb      	strb	r3, [r7, #11]
 800a16e:	230a      	movs	r3, #10
 800a170:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fe1e 	bl	8009db8 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f80c 	bl	800a1a0 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 800a188:	2064      	movs	r0, #100	; 0x64
 800a18a:	f000 fa87 	bl	800a69c <HAL_Delay>
}
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	48000800 	.word	0x48000800
 800a19c:	000f4240 	.word	0x000f4240

0800a1a0 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 800a1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	dc13      	bgt.n	800a1da <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	613b      	str	r3, [r7, #16]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a1ba:	2380      	movs	r3, #128	; 0x80
 800a1bc:	743b      	strb	r3, [r7, #16]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	747b      	strb	r3, [r7, #17]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	74bb      	strb	r3, [r7, #18]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	74fb      	strb	r3, [r7, #19]
 800a1ca:	2314      	movs	r3, #20
 800a1cc:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 800a1ce:	f107 0310 	add.w	r3, r7, #16
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fdf0 	bl	8009db8 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 800a1d8:	e012      	b.n	800a200 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	723b      	strb	r3, [r7, #8]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	727b      	strb	r3, [r7, #9]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	72bb      	strb	r3, [r7, #10]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	72fb      	strb	r3, [r7, #11]
 800a1f2:	2304      	movs	r3, #4
 800a1f4:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff fddc 	bl	8009db8 <tmc5160_write>
}
 800a200:	bf00      	nop
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a20e:	2300      	movs	r3, #0
 800a210:	603b      	str	r3, [r7, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	713b      	strb	r3, [r7, #4]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 800a216:	23a0      	movs	r3, #160	; 0xa0
 800a218:	703b      	strb	r3, [r7, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	707b      	strb	r3, [r7, #1]
 800a21e:	2300      	movs	r3, #0
 800a220:	70bb      	strb	r3, [r7, #2]
 800a222:	2300      	movs	r3, #0
 800a224:	70fb      	strb	r3, [r7, #3]
 800a226:	2303      	movs	r3, #3
 800a228:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a22a:	463b      	mov	r3, r7
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff fdc3 	bl	8009db8 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 800a232:	23a1      	movs	r3, #161	; 0xa1
 800a234:	703b      	strb	r3, [r7, #0]
 800a236:	2300      	movs	r3, #0
 800a238:	707b      	strb	r3, [r7, #1]
 800a23a:	2300      	movs	r3, #0
 800a23c:	70bb      	strb	r3, [r7, #2]
 800a23e:	2300      	movs	r3, #0
 800a240:	70fb      	strb	r3, [r7, #3]
 800a242:	2300      	movs	r3, #0
 800a244:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a246:	463b      	mov	r3, r7
 800a248:	4618      	mov	r0, r3
 800a24a:	f7ff fdb5 	bl	8009db8 <tmc5160_write>
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <tmc5160_disarm>:

void tmc5160_disarm()
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //DRV SLEEP 0 for power on, 1 for power off
 800a25c:	2201      	movs	r2, #1
 800a25e:	2120      	movs	r1, #32
 800a260:	4802      	ldr	r0, [pc, #8]	; (800a26c <tmc5160_disarm+0x14>)
 800a262:	f001 fbdd 	bl	800ba20 <HAL_GPIO_WritePin>
}
 800a266:	bf00      	nop
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	48000800 	.word	0x48000800

0800a270 <tmc5160_arm>:

void tmc5160_arm()
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a274:	2200      	movs	r2, #0
 800a276:	2120      	movs	r1, #32
 800a278:	4802      	ldr	r0, [pc, #8]	; (800a284 <tmc5160_arm+0x14>)
 800a27a:	f001 fbd1 	bl	800ba20 <HAL_GPIO_WritePin>
}
 800a27e:	bf00      	nop
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	48000800 	.word	0x48000800

0800a288 <tmc5160_stop>:

void tmc5160_stop()
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	2300      	movs	r3, #0
 800a294:	723b      	strb	r3, [r7, #8]
	uint32_t pos = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Start acceleration = 10 (Near start)
 800a29a:	23a3      	movs	r3, #163	; 0xa3
 800a29c:	713b      	strb	r3, [r7, #4]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	717b      	strb	r3, [r7, #5]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	71bb      	strb	r3, [r7, #6]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	71fb      	strb	r3, [r7, #7]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a2ae:	1d3b      	adds	r3, r7, #4
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fd81 	bl	8009db8 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00;
 800a2b6:	23a7      	movs	r3, #167	; 0xa7
 800a2b8:	713b      	strb	r3, [r7, #4]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	717b      	strb	r3, [r7, #5]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	71bb      	strb	r3, [r7, #6]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	71fb      	strb	r3, [r7, #7]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a2ca:	1d3b      	adds	r3, r7, #4
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fd73 	bl	8009db8 <tmc5160_write>

	pos = tmc5160_position_read();
 800a2d2:	f7ff fdc7 	bl	8009e64 <tmc5160_position_read>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	60fb      	str	r3, [r7, #12]
	tmc5160_position(pos);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fc0b 	bl	8009af8 <tmc5160_position>
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a2f0:	4b22      	ldr	r3, [pc, #136]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a2f2:	4a23      	ldr	r2, [pc, #140]	; (800a380 <MX_USART2_UART_Init+0x94>)
 800a2f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a2f6:	4b21      	ldr	r3, [pc, #132]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a2f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a2fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a2fe:	4b1f      	ldr	r3, [pc, #124]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a300:	2200      	movs	r2, #0
 800a302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a304:	4b1d      	ldr	r3, [pc, #116]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a306:	2200      	movs	r2, #0
 800a308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a30a:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a310:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a312:	220c      	movs	r2, #12
 800a314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a316:	4b19      	ldr	r3, [pc, #100]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a318:	2200      	movs	r2, #0
 800a31a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a31c:	4b17      	ldr	r3, [pc, #92]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a31e:	2200      	movs	r2, #0
 800a320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a322:	4b16      	ldr	r3, [pc, #88]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a324:	2200      	movs	r2, #0
 800a326:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a328:	4b14      	ldr	r3, [pc, #80]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a330:	2200      	movs	r2, #0
 800a332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a334:	4811      	ldr	r0, [pc, #68]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a336:	f005 f975 	bl	800f624 <HAL_UART_Init>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a340:	f7f7 ff4f 	bl	80021e2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a344:	2100      	movs	r1, #0
 800a346:	480d      	ldr	r0, [pc, #52]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a348:	f006 fab3 	bl	80108b2 <HAL_UARTEx_SetTxFifoThreshold>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a352:	f7f7 ff46 	bl	80021e2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a356:	2100      	movs	r1, #0
 800a358:	4808      	ldr	r0, [pc, #32]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a35a:	f006 fae8 	bl	801092e <HAL_UARTEx_SetRxFifoThreshold>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a364:	f7f7 ff3d 	bl	80021e2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a368:	4804      	ldr	r0, [pc, #16]	; (800a37c <MX_USART2_UART_Init+0x90>)
 800a36a:	f006 fa69 	bl	8010840 <HAL_UARTEx_DisableFifoMode>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a374:	f7f7 ff35 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	200008c4 	.word	0x200008c4
 800a380:	40004400 	.word	0x40004400

0800a384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b09e      	sub	sp, #120	; 0x78
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a38c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a39c:	f107 0310 	add.w	r3, r7, #16
 800a3a0:	2254      	movs	r2, #84	; 0x54
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f00a fad0 	bl	801494a <memset>
  if(uartHandle->Instance==USART2)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a23      	ldr	r2, [pc, #140]	; (800a43c <HAL_UART_MspInit+0xb8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d13e      	bne.n	800a432 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3bc:	f107 0310 	add.w	r3, r7, #16
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f003 fe37 	bl	800e034 <HAL_RCCEx_PeriphCLKConfig>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a3cc:	f7f7 ff09 	bl	80021e2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a3d0:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <HAL_UART_MspInit+0xbc>)
 800a3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d4:	4a1a      	ldr	r2, [pc, #104]	; (800a440 <HAL_UART_MspInit+0xbc>)
 800a3d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3da:	6593      	str	r3, [r2, #88]	; 0x58
 800a3dc:	4b18      	ldr	r3, [pc, #96]	; (800a440 <HAL_UART_MspInit+0xbc>)
 800a3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3e8:	4b15      	ldr	r3, [pc, #84]	; (800a440 <HAL_UART_MspInit+0xbc>)
 800a3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ec:	4a14      	ldr	r2, [pc, #80]	; (800a440 <HAL_UART_MspInit+0xbc>)
 800a3ee:	f043 0301 	orr.w	r3, r3, #1
 800a3f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3f4:	4b12      	ldr	r3, [pc, #72]	; (800a440 <HAL_UART_MspInit+0xbc>)
 800a3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	60bb      	str	r3, [r7, #8]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a400:	230c      	movs	r3, #12
 800a402:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a404:	2302      	movs	r3, #2
 800a406:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a40c:	2300      	movs	r3, #0
 800a40e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a410:	2307      	movs	r3, #7
 800a412:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a414:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a418:	4619      	mov	r1, r3
 800a41a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a41e:	f001 f97d 	bl	800b71c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a422:	2200      	movs	r2, #0
 800a424:	2100      	movs	r1, #0
 800a426:	2026      	movs	r0, #38	; 0x26
 800a428:	f000 fa35 	bl	800a896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a42c:	2026      	movs	r0, #38	; 0x26
 800a42e:	f000 fa4c 	bl	800a8ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a432:	bf00      	nop
 800a434:	3778      	adds	r7, #120	; 0x78
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	40004400 	.word	0x40004400
 800a440:	40021000 	.word	0x40021000

0800a444 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	3b01      	subs	r3, #1
 800a458:	2201      	movs	r2, #1
 800a45a:	fa02 f303 	lsl.w	r3, r2, r3
 800a45e:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4013      	ands	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d010      	beq.n	800a494 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 800a476:	23ff      	movs	r3, #255	; 0xff
 800a478:	60bb      	str	r3, [r7, #8]
		res |= x;
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	fa02 f303 	lsl.w	r3, r2, r3
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
		return res;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	e000      	b.n	800a496 <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 800a494:	687b      	ldr	r3, [r7, #4]
}
 800a496:	4618      	mov	r0, r3
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	0000      	movs	r0, r0
 800a4a4:	0000      	movs	r0, r0
	...

0800a4a8 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
	float rads = 0;
 800a4b2:	f04f 0300 	mov.w	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a4d0:	ee16 0a90 	vmov	r0, s13
 800a4d4:	f7f6 f860 	bl	8000598 <__aeabi_f2d>
 800a4d8:	a30b      	add	r3, pc, #44	; (adr r3, 800a508 <steps_to_rads+0x60>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f6 f8b3 	bl	8000648 <__aeabi_dmul>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f7f6 fba5 	bl	8000c38 <__aeabi_d2f>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	60fb      	str	r3, [r7, #12]
	return rads;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	ee07 3a90 	vmov	s15, r3
}
 800a4f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	f3af 8000 	nop.w
 800a508:	54442d18 	.word	0x54442d18
 800a50c:	401921fb 	.word	0x401921fb

0800a510 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	ed87 0a01 	vstr	s0, [r7, #4]
 800a51a:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	ee07 3a90 	vmov	s15, r3
 800a526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a52a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a532:	ee17 0a90 	vmov	r0, s15
 800a536:	f7f6 f82f 	bl	8000598 <__aeabi_f2d>
 800a53a:	a309      	add	r3, pc, #36	; (adr r3, 800a560 <rad_to_steps+0x50>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f6 f9ac 	bl	800089c <__aeabi_ddiv>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4610      	mov	r0, r2
 800a54a:	4619      	mov	r1, r3
 800a54c:	f7f6 fb2c 	bl	8000ba8 <__aeabi_d2iz>
 800a550:	4603      	mov	r3, r0
 800a552:	60fb      	str	r3, [r7, #12]
	return steps;
 800a554:	68fb      	ldr	r3, [r7, #12]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	54442d18 	.word	0x54442d18
 800a564:	401921fb 	.word	0x401921fb

0800a568 <Reset_Handler>:
 800a568:	480d      	ldr	r0, [pc, #52]	; (800a5a0 <LoopForever+0x2>)
 800a56a:	4685      	mov	sp, r0
 800a56c:	f7ff f9f6 	bl	800995c <SystemInit>
 800a570:	480c      	ldr	r0, [pc, #48]	; (800a5a4 <LoopForever+0x6>)
 800a572:	490d      	ldr	r1, [pc, #52]	; (800a5a8 <LoopForever+0xa>)
 800a574:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <LoopForever+0xe>)
 800a576:	2300      	movs	r3, #0
 800a578:	e002      	b.n	800a580 <LoopCopyDataInit>

0800a57a <CopyDataInit>:
 800a57a:	58d4      	ldr	r4, [r2, r3]
 800a57c:	50c4      	str	r4, [r0, r3]
 800a57e:	3304      	adds	r3, #4

0800a580 <LoopCopyDataInit>:
 800a580:	18c4      	adds	r4, r0, r3
 800a582:	428c      	cmp	r4, r1
 800a584:	d3f9      	bcc.n	800a57a <CopyDataInit>
 800a586:	4a0a      	ldr	r2, [pc, #40]	; (800a5b0 <LoopForever+0x12>)
 800a588:	4c0a      	ldr	r4, [pc, #40]	; (800a5b4 <LoopForever+0x16>)
 800a58a:	2300      	movs	r3, #0
 800a58c:	e001      	b.n	800a592 <LoopFillZerobss>

0800a58e <FillZerobss>:
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	3204      	adds	r2, #4

0800a592 <LoopFillZerobss>:
 800a592:	42a2      	cmp	r2, r4
 800a594:	d3fb      	bcc.n	800a58e <FillZerobss>
 800a596:	f00a fa97 	bl	8014ac8 <__libc_init_array>
 800a59a:	f7f7 fd5d 	bl	8002058 <main>

0800a59e <LoopForever>:
 800a59e:	e7fe      	b.n	800a59e <LoopForever>
 800a5a0:	20020000 	.word	0x20020000
 800a5a4:	20000000 	.word	0x20000000
 800a5a8:	2000024c 	.word	0x2000024c
 800a5ac:	080195cc 	.word	0x080195cc
 800a5b0:	20000250 	.word	0x20000250
 800a5b4:	20000af0 	.word	0x20000af0

0800a5b8 <ADC1_2_IRQHandler>:
 800a5b8:	e7fe      	b.n	800a5b8 <ADC1_2_IRQHandler>

0800a5ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5c4:	2003      	movs	r0, #3
 800a5c6:	f000 f95b 	bl	800a880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5ca:	200f      	movs	r0, #15
 800a5cc:	f000 f80e 	bl	800a5ec <HAL_InitTick>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	71fb      	strb	r3, [r7, #7]
 800a5da:	e001      	b.n	800a5e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a5dc:	f7ff f86e 	bl	80096bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a5e0:	79fb      	ldrb	r3, [r7, #7]

}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a5f8:	4b16      	ldr	r3, [pc, #88]	; (800a654 <HAL_InitTick+0x68>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d022      	beq.n	800a646 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a600:	4b15      	ldr	r3, [pc, #84]	; (800a658 <HAL_InitTick+0x6c>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b13      	ldr	r3, [pc, #76]	; (800a654 <HAL_InitTick+0x68>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a60c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a610:	fbb2 f3f3 	udiv	r3, r2, r3
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f966 	bl	800a8e6 <HAL_SYSTICK_Config>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10f      	bne.n	800a640 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b0f      	cmp	r3, #15
 800a624:	d809      	bhi.n	800a63a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a626:	2200      	movs	r2, #0
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	f04f 30ff 	mov.w	r0, #4294967295
 800a62e:	f000 f932 	bl	800a896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a632:	4a0a      	ldr	r2, [pc, #40]	; (800a65c <HAL_InitTick+0x70>)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	e007      	b.n	800a64a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	73fb      	strb	r3, [r7, #15]
 800a63e:	e004      	b.n	800a64a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	73fb      	strb	r3, [r7, #15]
 800a644:	e001      	b.n	800a64a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000080 	.word	0x20000080
 800a658:	20000078 	.word	0x20000078
 800a65c:	2000007c 	.word	0x2000007c

0800a660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a660:	b480      	push	{r7}
 800a662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <HAL_IncTick+0x1c>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <HAL_IncTick+0x20>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4413      	add	r3, r2
 800a66e:	4a03      	ldr	r2, [pc, #12]	; (800a67c <HAL_IncTick+0x1c>)
 800a670:	6013      	str	r3, [r2, #0]
}
 800a672:	bf00      	nop
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	20000958 	.word	0x20000958
 800a680:	20000080 	.word	0x20000080

0800a684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
  return uwTick;
 800a688:	4b03      	ldr	r3, [pc, #12]	; (800a698 <HAL_GetTick+0x14>)
 800a68a:	681b      	ldr	r3, [r3, #0]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000958 	.word	0x20000958

0800a69c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a6a4:	f7ff ffee 	bl	800a684 <HAL_GetTick>
 800a6a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b4:	d004      	beq.n	800a6c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <HAL_Delay+0x40>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a6c0:	bf00      	nop
 800a6c2:	f7ff ffdf 	bl	800a684 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d8f7      	bhi.n	800a6c2 <HAL_Delay+0x26>
  {
  }
}
 800a6d2:	bf00      	nop
 800a6d4:	bf00      	nop
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20000080 	.word	0x20000080

0800a6e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <__NVIC_SetPriorityGrouping+0x44>)
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a70c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a712:	4a04      	ldr	r2, [pc, #16]	; (800a724 <__NVIC_SetPriorityGrouping+0x44>)
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	60d3      	str	r3, [r2, #12]
}
 800a718:	bf00      	nop
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	e000ed00 	.word	0xe000ed00

0800a728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a72c:	4b04      	ldr	r3, [pc, #16]	; (800a740 <__NVIC_GetPriorityGrouping+0x18>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	f003 0307 	and.w	r3, r3, #7
}
 800a736:	4618      	mov	r0, r3
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	e000ed00 	.word	0xe000ed00

0800a744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a752:	2b00      	cmp	r3, #0
 800a754:	db0b      	blt.n	800a76e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	f003 021f 	and.w	r2, r3, #31
 800a75c:	4907      	ldr	r1, [pc, #28]	; (800a77c <__NVIC_EnableIRQ+0x38>)
 800a75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	2001      	movs	r0, #1
 800a766:	fa00 f202 	lsl.w	r2, r0, r2
 800a76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	e000e100 	.word	0xe000e100

0800a780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	6039      	str	r1, [r7, #0]
 800a78a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a78c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a790:	2b00      	cmp	r3, #0
 800a792:	db0a      	blt.n	800a7aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	b2da      	uxtb	r2, r3
 800a798:	490c      	ldr	r1, [pc, #48]	; (800a7cc <__NVIC_SetPriority+0x4c>)
 800a79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79e:	0112      	lsls	r2, r2, #4
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a7a8:	e00a      	b.n	800a7c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	4908      	ldr	r1, [pc, #32]	; (800a7d0 <__NVIC_SetPriority+0x50>)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	f003 030f 	and.w	r3, r3, #15
 800a7b6:	3b04      	subs	r3, #4
 800a7b8:	0112      	lsls	r2, r2, #4
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	440b      	add	r3, r1
 800a7be:	761a      	strb	r2, [r3, #24]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	e000e100 	.word	0xe000e100
 800a7d0:	e000ed00 	.word	0xe000ed00

0800a7d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b089      	sub	sp, #36	; 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	f1c3 0307 	rsb	r3, r3, #7
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	bf28      	it	cs
 800a7f2:	2304      	movcs	r3, #4
 800a7f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	2b06      	cmp	r3, #6
 800a7fc:	d902      	bls.n	800a804 <NVIC_EncodePriority+0x30>
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	3b03      	subs	r3, #3
 800a802:	e000      	b.n	800a806 <NVIC_EncodePriority+0x32>
 800a804:	2300      	movs	r3, #0
 800a806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a808:	f04f 32ff 	mov.w	r2, #4294967295
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	43da      	mvns	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	401a      	ands	r2, r3
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a81c:	f04f 31ff 	mov.w	r1, #4294967295
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	fa01 f303 	lsl.w	r3, r1, r3
 800a826:	43d9      	mvns	r1, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a82c:	4313      	orrs	r3, r2
         );
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3724      	adds	r7, #36	; 0x24
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
	...

0800a83c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3b01      	subs	r3, #1
 800a848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a84c:	d301      	bcc.n	800a852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a84e:	2301      	movs	r3, #1
 800a850:	e00f      	b.n	800a872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a852:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <SysTick_Config+0x40>)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3b01      	subs	r3, #1
 800a858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a85a:	210f      	movs	r1, #15
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	f7ff ff8e 	bl	800a780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <SysTick_Config+0x40>)
 800a866:	2200      	movs	r2, #0
 800a868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a86a:	4b04      	ldr	r3, [pc, #16]	; (800a87c <SysTick_Config+0x40>)
 800a86c:	2207      	movs	r2, #7
 800a86e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	e000e010 	.word	0xe000e010

0800a880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff ff29 	bl	800a6e0 <__NVIC_SetPriorityGrouping>
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	4603      	mov	r3, r0
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a8a4:	f7ff ff40 	bl	800a728 <__NVIC_GetPriorityGrouping>
 800a8a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	6978      	ldr	r0, [r7, #20]
 800a8b0:	f7ff ff90 	bl	800a7d4 <NVIC_EncodePriority>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff ff5f 	bl	800a780 <__NVIC_SetPriority>
}
 800a8c2:	bf00      	nop
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff ff33 	bl	800a744 <__NVIC_EnableIRQ>
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff ffa4 	bl	800a83c <SysTick_Config>
 800a8f4:	4603      	mov	r3, r0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e08d      	b.n	800aa2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	4b47      	ldr	r3, [pc, #284]	; (800aa38 <HAL_DMA_Init+0x138>)
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d80f      	bhi.n	800a93e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	4b45      	ldr	r3, [pc, #276]	; (800aa3c <HAL_DMA_Init+0x13c>)
 800a926:	4413      	add	r3, r2
 800a928:	4a45      	ldr	r2, [pc, #276]	; (800aa40 <HAL_DMA_Init+0x140>)
 800a92a:	fba2 2303 	umull	r2, r3, r2, r3
 800a92e:	091b      	lsrs	r3, r3, #4
 800a930:	009a      	lsls	r2, r3, #2
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a42      	ldr	r2, [pc, #264]	; (800aa44 <HAL_DMA_Init+0x144>)
 800a93a:	641a      	str	r2, [r3, #64]	; 0x40
 800a93c:	e00e      	b.n	800a95c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	4b40      	ldr	r3, [pc, #256]	; (800aa48 <HAL_DMA_Init+0x148>)
 800a946:	4413      	add	r3, r2
 800a948:	4a3d      	ldr	r2, [pc, #244]	; (800aa40 <HAL_DMA_Init+0x140>)
 800a94a:	fba2 2303 	umull	r2, r3, r2, r3
 800a94e:	091b      	lsrs	r3, r3, #4
 800a950:	009a      	lsls	r2, r3, #2
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a3c      	ldr	r2, [pc, #240]	; (800aa4c <HAL_DMA_Init+0x14c>)
 800a95a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a98c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f9cc 	bl	800ad4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9bc:	d102      	bne.n	800a9c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9cc:	b2d2      	uxtb	r2, r2
 800a9ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a9d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d010      	beq.n	800aa04 <HAL_DMA_Init+0x104>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d80c      	bhi.n	800aa04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f9ec 	bl	800adc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa00:	605a      	str	r2, [r3, #4]
 800aa02:	e008      	b.n	800aa16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	40020407 	.word	0x40020407
 800aa3c:	bffdfff8 	.word	0xbffdfff8
 800aa40:	cccccccd 	.word	0xcccccccd
 800aa44:	40020000 	.word	0x40020000
 800aa48:	bffdfbf8 	.word	0xbffdfbf8
 800aa4c:	40020400 	.word	0x40020400

0800aa50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d005      	beq.n	800aa74 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	73fb      	strb	r3, [r7, #15]
 800aa72:	e037      	b.n	800aae4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 020e 	bic.w	r2, r2, #14
 800aa82:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa92:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 0201 	bic.w	r2, r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa8:	f003 021f 	and.w	r2, r3, #31
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab0:	2101      	movs	r1, #1
 800aab2:	fa01 f202 	lsl.w	r2, r1, r2
 800aab6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aac0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00c      	beq.n	800aae4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aad8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aae2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d00d      	beq.n	800ab36 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	73fb      	strb	r3, [r7, #15]
 800ab34:	e047      	b.n	800abc6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 020e 	bic.w	r2, r2, #14
 800ab44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 0201 	bic.w	r2, r2, #1
 800ab54:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6a:	f003 021f 	and.w	r2, r3, #31
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	2101      	movs	r1, #1
 800ab74:	fa01 f202 	lsl.w	r2, r1, r2
 800ab78:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ab82:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00c      	beq.n	800aba6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aba4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
    }
  }
  return status;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abec:	f003 031f 	and.w	r3, r3, #31
 800abf0:	2204      	movs	r2, #4
 800abf2:	409a      	lsls	r2, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4013      	ands	r3, r2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d026      	beq.n	800ac4a <HAL_DMA_IRQHandler+0x7a>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d021      	beq.n	800ac4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0320 	and.w	r3, r3, #32
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d107      	bne.n	800ac24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 0204 	bic.w	r2, r2, #4
 800ac22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac28:	f003 021f 	and.w	r2, r3, #31
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac30:	2104      	movs	r1, #4
 800ac32:	fa01 f202 	lsl.w	r2, r1, r2
 800ac36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d071      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ac48:	e06c      	b.n	800ad24 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	f003 031f 	and.w	r3, r3, #31
 800ac52:	2202      	movs	r2, #2
 800ac54:	409a      	lsls	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d02e      	beq.n	800acbc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d029      	beq.n	800acbc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10b      	bne.n	800ac8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 020a 	bic.w	r2, r2, #10
 800ac84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac92:	f003 021f 	and.w	r2, r3, #31
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	fa01 f202 	lsl.w	r2, r1, r2
 800aca0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d038      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800acba:	e033      	b.n	800ad24 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc0:	f003 031f 	and.w	r3, r3, #31
 800acc4:	2208      	movs	r2, #8
 800acc6:	409a      	lsls	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4013      	ands	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d02a      	beq.n	800ad26 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f003 0308 	and.w	r3, r3, #8
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d025      	beq.n	800ad26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f022 020e 	bic.w	r2, r2, #14
 800ace8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acee:	f003 021f 	and.w	r2, r3, #31
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	2101      	movs	r1, #1
 800acf8:	fa01 f202 	lsl.w	r2, r1, r2
 800acfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d004      	beq.n	800ad26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
}
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ad3c:	b2db      	uxtb	r3, r3
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
	...

0800ad4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d802      	bhi.n	800ad66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ad60:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	e001      	b.n	800ad6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ad66:	4b15      	ldr	r3, [pc, #84]	; (800adbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ad68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	3b08      	subs	r3, #8
 800ad76:	4a12      	ldr	r2, [pc, #72]	; (800adc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ad78:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7c:	091b      	lsrs	r3, r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad84:	089b      	lsrs	r3, r3, #2
 800ad86:	009a      	lsls	r2, r3, #2
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a0b      	ldr	r2, [pc, #44]	; (800adc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ad96:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f003 031f 	and.w	r3, r3, #31
 800ad9e:	2201      	movs	r2, #1
 800ada0:	409a      	lsls	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	40020407 	.word	0x40020407
 800adb8:	40020800 	.word	0x40020800
 800adbc:	40020820 	.word	0x40020820
 800adc0:	cccccccd 	.word	0xcccccccd
 800adc4:	40020880 	.word	0x40020880

0800adc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	461a      	mov	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a08      	ldr	r2, [pc, #32]	; (800ae0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800adea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3b01      	subs	r3, #1
 800adf0:	f003 031f 	and.w	r3, r3, #31
 800adf4:	2201      	movs	r2, #1
 800adf6:	409a      	lsls	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	1000823f 	.word	0x1000823f
 800ae0c:	40020940 	.word	0x40020940

0800ae10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e147      	b.n	800b0b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7f6 fdf2 	bl	8001a20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	699a      	ldr	r2, [r3, #24]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 0210 	bic.w	r2, r2, #16
 800ae4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae4c:	f7ff fc1a 	bl	800a684 <HAL_GetTick>
 800ae50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800ae52:	e012      	b.n	800ae7a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800ae54:	f7ff fc16 	bl	800a684 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b0a      	cmp	r3, #10
 800ae60:	d90b      	bls.n	800ae7a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae66:	f043 0201 	orr.w	r2, r3, #1
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2203      	movs	r2, #3
 800ae72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e11b      	b.n	800b0b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d0e5      	beq.n	800ae54 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699a      	ldr	r2, [r3, #24]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0201 	orr.w	r2, r2, #1
 800ae96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae98:	f7ff fbf4 	bl	800a684 <HAL_GetTick>
 800ae9c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800ae9e:	e012      	b.n	800aec6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800aea0:	f7ff fbf0 	bl	800a684 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b0a      	cmp	r3, #10
 800aeac:	d90b      	bls.n	800aec6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb2:	f043 0201 	orr.w	r2, r3, #1
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2203      	movs	r2, #3
 800aebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e0f5      	b.n	800b0b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0e5      	beq.n	800aea0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0202 	orr.w	r2, r2, #2
 800aee2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a74      	ldr	r2, [pc, #464]	; (800b0bc <HAL_FDCAN_Init+0x2ac>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d103      	bne.n	800aef6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800aeee:	4a74      	ldr	r2, [pc, #464]	; (800b0c0 <HAL_FDCAN_Init+0x2b0>)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	7c1b      	ldrb	r3, [r3, #16]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d108      	bne.n	800af10 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699a      	ldr	r2, [r3, #24]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af0c:	619a      	str	r2, [r3, #24]
 800af0e:	e007      	b.n	800af20 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	699a      	ldr	r2, [r3, #24]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af1e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	7c5b      	ldrb	r3, [r3, #17]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d108      	bne.n	800af3a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	699a      	ldr	r2, [r3, #24]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af36:	619a      	str	r2, [r3, #24]
 800af38:	e007      	b.n	800af4a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	699a      	ldr	r2, [r3, #24]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af48:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	7c9b      	ldrb	r3, [r3, #18]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d108      	bne.n	800af64 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	699a      	ldr	r2, [r3, #24]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af60:	619a      	str	r2, [r3, #24]
 800af62:	e007      	b.n	800af74 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	699a      	ldr	r2, [r3, #24]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af72:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	699a      	ldr	r2, [r3, #24]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800af98:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	691a      	ldr	r2, [r3, #16]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0210 	bic.w	r2, r2, #16
 800afa8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d108      	bne.n	800afc4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	699a      	ldr	r2, [r3, #24]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f042 0204 	orr.w	r2, r2, #4
 800afc0:	619a      	str	r2, [r3, #24]
 800afc2:	e02c      	b.n	800b01e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d028      	beq.n	800b01e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d01c      	beq.n	800b00e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800afe2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691a      	ldr	r2, [r3, #16]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f042 0210 	orr.w	r2, r2, #16
 800aff2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d110      	bne.n	800b01e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699a      	ldr	r2, [r3, #24]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f042 0220 	orr.w	r2, r2, #32
 800b00a:	619a      	str	r2, [r3, #24]
 800b00c:	e007      	b.n	800b01e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0220 	orr.w	r2, r2, #32
 800b01c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	3b01      	subs	r3, #1
 800b024:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b02e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b036:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	3b01      	subs	r3, #1
 800b040:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b046:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b048:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b052:	d115      	bne.n	800b080 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b058:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	3b01      	subs	r3, #1
 800b060:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b062:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b068:	3b01      	subs	r3, #1
 800b06a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b06c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	3b01      	subs	r3, #1
 800b076:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b07c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b07e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa58 	bl	800b54c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40006400 	.word	0x40006400
 800b0c0:	40006500 	.word	0x40006500

0800b0c4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b0d4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d002      	beq.n	800b0e2 <HAL_FDCAN_ConfigFilter+0x1e>
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d13d      	bne.n	800b15e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d119      	bne.n	800b11e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b0f6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800b0fe:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	e01d      	b.n	800b15a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	075a      	lsls	r2, r3, #29
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	079a      	lsls	r2, r3, #30
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	4413      	add	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3304      	adds	r3, #4
 800b152:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e006      	b.n	800b16c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b162:	f043 0202 	orr.w	r2, r3, #2
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
  }
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	371c      	adds	r7, #28
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d116      	bne.n	800b1c0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b19a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	011a      	lsls	r2, r3, #4
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	e006      	b.n	800b1ce <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1c4:	f043 0204 	orr.w	r2, r3, #4
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
  }
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b085      	sub	sp, #20
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d108      	bne.n	800b204 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	0219      	lsls	r1, r3, #8
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	e006      	b.n	800b212 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b208:	f043 0204 	orr.w	r2, r3, #4
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
  }
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d109      	bne.n	800b246 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68da      	ldr	r2, [r3, #12]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b240:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	e006      	b.n	800b254 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b24a:	f043 0204 	orr.w	r2, r3, #4
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
  }
}
 800b254:	4618      	mov	r0, r3
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b01      	cmp	r3, #1
 800b272:	d110      	bne.n	800b296 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2202      	movs	r2, #2
 800b278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699a      	ldr	r2, [r3, #24]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f022 0201 	bic.w	r2, r2, #1
 800b28a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	e006      	b.n	800b2a4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b29a:	f043 0204 	orr.w	r2, r3, #4
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
  }
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d12c      	bne.n	800b322 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b2d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d007      	beq.n	800b2e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e023      	b.n	800b330 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b2f0:	0c1b      	lsrs	r3, r3, #16
 800b2f2:	f003 0303 	and.w	r3, r3, #3
 800b2f6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f990 	bl	800b624 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2101      	movs	r1, #1
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	fa01 f202 	lsl.w	r2, r1, r2
 800b310:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800b314:	2201      	movs	r2, #1
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	409a      	lsls	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	e006      	b.n	800b330 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b326:	f043 0208 	orr.w	r2, r3, #8
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
  }
}
 800b330:	4618      	mov	r0, r3
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800b338:	b480      	push	{r7}
 800b33a:	b08b      	sub	sp, #44	; 0x2c
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b34c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800b34e:	7efb      	ldrb	r3, [r7, #27]
 800b350:	2b02      	cmp	r3, #2
 800b352:	f040 80bc 	bne.w	800b4ce <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b40      	cmp	r3, #64	; 0x40
 800b35a:	d121      	bne.n	800b3a0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b364:	f003 030f 	and.w	r3, r3, #15
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d107      	bne.n	800b37c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b370:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e0af      	b.n	800b4dc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b384:	0a1b      	lsrs	r3, r3, #8
 800b386:	f003 0303 	and.w	r3, r3, #3
 800b38a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	4613      	mov	r3, r2
 800b394:	00db      	lsls	r3, r3, #3
 800b396:	4413      	add	r3, r2
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	440b      	add	r3, r1
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
 800b39e:	e020      	b.n	800b3e2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3a8:	f003 030f 	and.w	r3, r3, #15
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d107      	bne.n	800b3c0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e08d      	b.n	800b4dc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3c8:	0a1b      	lsrs	r3, r3, #8
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	4413      	add	r3, r2
 800b3dc:	00db      	lsls	r3, r3, #3
 800b3de:	440b      	add	r3, r1
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d107      	bne.n	800b406 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	0c9b      	lsrs	r3, r3, #18
 800b3fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e005      	b.n	800b412 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	3304      	adds	r3, #4
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	b29a      	uxth	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	0e1b      	lsrs	r3, r3, #24
 800b464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	0fda      	lsrs	r2, r3, #31
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	3304      	adds	r3, #4
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b480:	2300      	movs	r3, #0
 800b482:	623b      	str	r3, [r7, #32]
 800b484:	e00a      	b.n	800b49c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	441a      	add	r2, r3
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	440b      	add	r3, r1
 800b492:	7812      	ldrb	r2, [r2, #0]
 800b494:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	3301      	adds	r3, #1
 800b49a:	623b      	str	r3, [r7, #32]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	0c1b      	lsrs	r3, r3, #16
 800b4a2:	4a11      	ldr	r2, [pc, #68]	; (800b4e8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800b4a4:	5cd3      	ldrb	r3, [r2, r3]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d3eb      	bcc.n	800b486 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2b40      	cmp	r3, #64	; 0x40
 800b4b2:	d105      	bne.n	800b4c0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	69fa      	ldr	r2, [r7, #28]
 800b4ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b4be:	e004      	b.n	800b4ca <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e006      	b.n	800b4dc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4d2:	f043 0208 	orr.w	r2, r3, #8
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
  }
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	372c      	adds	r7, #44	; 0x2c
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	08018b30 	.word	0x08018b30

0800b4ec <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b40      	cmp	r3, #64	; 0x40
 800b4fa:	d107      	bne.n	800b50c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b504:	f003 030f 	and.w	r3, r3, #15
 800b508:	60fb      	str	r3, [r7, #12]
 800b50a:	e006      	b.n	800b51a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b514:	f003 030f 	and.w	r3, r3, #15
 800b518:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800b51a:	68fb      	ldr	r3, [r7, #12]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b538:	f003 0307 	and.w	r3, r3, #7
 800b53c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800b53e:	68fb      	ldr	r3, [r7, #12]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800b554:	4b30      	ldr	r3, [pc, #192]	; (800b618 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800b556:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a2f      	ldr	r2, [pc, #188]	; (800b61c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d103      	bne.n	800b56a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b568:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a2c      	ldr	r2, [pc, #176]	; (800b620 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d103      	bne.n	800b57c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800b57a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b58a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b592:	041a      	lsls	r2, r3, #16
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	061a      	lsls	r2, r3, #24
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e005      	b.n	800b5fe <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	429a      	cmp	r2, r3
 800b608:	d3f3      	bcc.n	800b5f2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	4000a400 	.word	0x4000a400
 800b61c:	40006800 	.word	0x40006800
 800b620:	40006c00 	.word	0x40006c00

0800b624 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800b624:	b480      	push	{r7}
 800b626:	b089      	sub	sp, #36	; 0x24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b642:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b64a:	4313      	orrs	r3, r2
 800b64c:	61fb      	str	r3, [r7, #28]
 800b64e:	e00a      	b.n	800b666 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b658:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b65e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b664:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b670:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b676:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b67c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b682:	4313      	orrs	r3, r2
 800b684:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4613      	mov	r3, r2
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	4413      	add	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	440b      	add	r3, r1
 800b696:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	69fa      	ldr	r2, [r7, #28]
 800b69c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	e020      	b.n	800b6f8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	3303      	adds	r3, #3
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	4413      	add	r3, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	3302      	adds	r3, #2
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	440b      	add	r3, r1
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b6ce:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	440b      	add	r3, r1
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b6dc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	440a      	add	r2, r1
 800b6e4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b6e6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	0c1b      	lsrs	r3, r3, #16
 800b6fe:	4a06      	ldr	r2, [pc, #24]	; (800b718 <FDCAN_CopyMessageToRAM+0xf4>)
 800b700:	5cd3      	ldrb	r3, [r2, r3]
 800b702:	461a      	mov	r2, r3
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	4293      	cmp	r3, r2
 800b708:	d3d5      	bcc.n	800b6b6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800b70a:	bf00      	nop
 800b70c:	bf00      	nop
 800b70e:	3724      	adds	r7, #36	; 0x24
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	08018b30 	.word	0x08018b30

0800b71c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b72a:	e15a      	b.n	800b9e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	2101      	movs	r1, #1
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	fa01 f303 	lsl.w	r3, r1, r3
 800b738:	4013      	ands	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 814c 	beq.w	800b9dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f003 0303 	and.w	r3, r3, #3
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d005      	beq.n	800b75c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d130      	bne.n	800b7be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	2203      	movs	r2, #3
 800b768:	fa02 f303 	lsl.w	r3, r2, r3
 800b76c:	43db      	mvns	r3, r3
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	4013      	ands	r3, r2
 800b772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	fa02 f303 	lsl.w	r3, r2, r3
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	4313      	orrs	r3, r2
 800b784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b792:	2201      	movs	r2, #1
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	fa02 f303 	lsl.w	r3, r2, r3
 800b79a:	43db      	mvns	r3, r3
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	4013      	ands	r3, r2
 800b7a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	091b      	lsrs	r3, r3, #4
 800b7a8:	f003 0201 	and.w	r2, r3, #1
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d017      	beq.n	800b7fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	2203      	movs	r2, #3
 800b7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7da:	43db      	mvns	r3, r3
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	689a      	ldr	r2, [r3, #8]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	2b02      	cmp	r3, #2
 800b804:	d123      	bne.n	800b84e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	08da      	lsrs	r2, r3, #3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3208      	adds	r2, #8
 800b80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	220f      	movs	r2, #15
 800b81e:	fa02 f303 	lsl.w	r3, r2, r3
 800b822:	43db      	mvns	r3, r3
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4013      	ands	r3, r2
 800b828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	691a      	ldr	r2, [r3, #16]
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	fa02 f303 	lsl.w	r3, r2, r3
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	08da      	lsrs	r2, r3, #3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3208      	adds	r2, #8
 800b848:	6939      	ldr	r1, [r7, #16]
 800b84a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	2203      	movs	r2, #3
 800b85a:	fa02 f303 	lsl.w	r3, r2, r3
 800b85e:	43db      	mvns	r3, r3
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	4013      	ands	r3, r2
 800b864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	f003 0203 	and.w	r2, r3, #3
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	4313      	orrs	r3, r2
 800b87a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 80a6 	beq.w	800b9dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b890:	4b5b      	ldr	r3, [pc, #364]	; (800ba00 <HAL_GPIO_Init+0x2e4>)
 800b892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b894:	4a5a      	ldr	r2, [pc, #360]	; (800ba00 <HAL_GPIO_Init+0x2e4>)
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	6613      	str	r3, [r2, #96]	; 0x60
 800b89c:	4b58      	ldr	r3, [pc, #352]	; (800ba00 <HAL_GPIO_Init+0x2e4>)
 800b89e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	60bb      	str	r3, [r7, #8]
 800b8a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b8a8:	4a56      	ldr	r2, [pc, #344]	; (800ba04 <HAL_GPIO_Init+0x2e8>)
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	089b      	lsrs	r3, r3, #2
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f003 0303 	and.w	r3, r3, #3
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	220f      	movs	r2, #15
 800b8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c4:	43db      	mvns	r3, r3
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b8d2:	d01f      	beq.n	800b914 <HAL_GPIO_Init+0x1f8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a4c      	ldr	r2, [pc, #304]	; (800ba08 <HAL_GPIO_Init+0x2ec>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d019      	beq.n	800b910 <HAL_GPIO_Init+0x1f4>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a4b      	ldr	r2, [pc, #300]	; (800ba0c <HAL_GPIO_Init+0x2f0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d013      	beq.n	800b90c <HAL_GPIO_Init+0x1f0>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a4a      	ldr	r2, [pc, #296]	; (800ba10 <HAL_GPIO_Init+0x2f4>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d00d      	beq.n	800b908 <HAL_GPIO_Init+0x1ec>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a49      	ldr	r2, [pc, #292]	; (800ba14 <HAL_GPIO_Init+0x2f8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d007      	beq.n	800b904 <HAL_GPIO_Init+0x1e8>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a48      	ldr	r2, [pc, #288]	; (800ba18 <HAL_GPIO_Init+0x2fc>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d101      	bne.n	800b900 <HAL_GPIO_Init+0x1e4>
 800b8fc:	2305      	movs	r3, #5
 800b8fe:	e00a      	b.n	800b916 <HAL_GPIO_Init+0x1fa>
 800b900:	2306      	movs	r3, #6
 800b902:	e008      	b.n	800b916 <HAL_GPIO_Init+0x1fa>
 800b904:	2304      	movs	r3, #4
 800b906:	e006      	b.n	800b916 <HAL_GPIO_Init+0x1fa>
 800b908:	2303      	movs	r3, #3
 800b90a:	e004      	b.n	800b916 <HAL_GPIO_Init+0x1fa>
 800b90c:	2302      	movs	r3, #2
 800b90e:	e002      	b.n	800b916 <HAL_GPIO_Init+0x1fa>
 800b910:	2301      	movs	r3, #1
 800b912:	e000      	b.n	800b916 <HAL_GPIO_Init+0x1fa>
 800b914:	2300      	movs	r3, #0
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	f002 0203 	and.w	r2, r2, #3
 800b91c:	0092      	lsls	r2, r2, #2
 800b91e:	4093      	lsls	r3, r2
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4313      	orrs	r3, r2
 800b924:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b926:	4937      	ldr	r1, [pc, #220]	; (800ba04 <HAL_GPIO_Init+0x2e8>)
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	089b      	lsrs	r3, r3, #2
 800b92c:	3302      	adds	r3, #2
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b934:	4b39      	ldr	r3, [pc, #228]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	43db      	mvns	r3, r3
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	4013      	ands	r3, r2
 800b942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	4313      	orrs	r3, r2
 800b956:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b958:	4a30      	ldr	r2, [pc, #192]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b95e:	4b2f      	ldr	r3, [pc, #188]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	43db      	mvns	r3, r3
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	4013      	ands	r3, r2
 800b96c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b982:	4a26      	ldr	r2, [pc, #152]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b988:	4b24      	ldr	r3, [pc, #144]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	43db      	mvns	r3, r3
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	4013      	ands	r3, r2
 800b996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b9ac:	4a1b      	ldr	r2, [pc, #108]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	43db      	mvns	r3, r3
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b9d6:	4a11      	ldr	r2, [pc, #68]	; (800ba1c <HAL_GPIO_Init+0x300>)
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f47f ae9d 	bne.w	800b72c <HAL_GPIO_Init+0x10>
  }
}
 800b9f2:	bf00      	nop
 800b9f4:	bf00      	nop
 800b9f6:	371c      	adds	r7, #28
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	40021000 	.word	0x40021000
 800ba04:	40010000 	.word	0x40010000
 800ba08:	48000400 	.word	0x48000400
 800ba0c:	48000800 	.word	0x48000800
 800ba10:	48000c00 	.word	0x48000c00
 800ba14:	48001000 	.word	0x48001000
 800ba18:	48001400 	.word	0x48001400
 800ba1c:	40010400 	.word	0x40010400

0800ba20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	807b      	strh	r3, [r7, #2]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ba30:	787b      	ldrb	r3, [r7, #1]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ba36:	887a      	ldrh	r2, [r7, #2]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ba3c:	e002      	b.n	800ba44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ba3e:	887a      	ldrh	r2, [r7, #2]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ba62:	887a      	ldrh	r2, [r7, #2]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4013      	ands	r3, r2
 800ba68:	041a      	lsls	r2, r3, #16
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	43d9      	mvns	r1, r3
 800ba6e:	887b      	ldrh	r3, [r7, #2]
 800ba70:	400b      	ands	r3, r1
 800ba72:	431a      	orrs	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	619a      	str	r2, [r3, #24]
}
 800ba78:	bf00      	nop
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e08d      	b.n	800bbb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7f6 f8fa 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2224      	movs	r2, #36	; 0x24
 800bab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f022 0201 	bic.w	r2, r2, #1
 800bac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689a      	ldr	r2, [r3, #8]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d107      	bne.n	800bafe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bafa:	609a      	str	r2, [r3, #8]
 800bafc:	e006      	b.n	800bb0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689a      	ldr	r2, [r3, #8]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bb0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d108      	bne.n	800bb26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685a      	ldr	r2, [r3, #4]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb22:	605a      	str	r2, [r3, #4]
 800bb24:	e007      	b.n	800bb36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bb44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691a      	ldr	r2, [r3, #16]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	69d9      	ldr	r1, [r3, #28]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a1a      	ldr	r2, [r3, #32]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	430a      	orrs	r2, r1
 800bb82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 0201 	orr.w	r2, r2, #1
 800bb92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af02      	add	r7, sp, #8
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	461a      	mov	r2, r3
 800bbca:	4603      	mov	r3, r0
 800bbcc:	817b      	strh	r3, [r7, #10]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	813b      	strh	r3, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b20      	cmp	r3, #32
 800bbe0:	f040 80f9 	bne.w	800bdd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <HAL_I2C_Mem_Write+0x34>
 800bbea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d105      	bne.n	800bbfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e0ed      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_I2C_Mem_Write+0x4e>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e0e6      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bc12:	f7fe fd37 	bl	800a684 <HAL_GetTick>
 800bc16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	2319      	movs	r3, #25
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f001 f938 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e0d1      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2221      	movs	r2, #33	; 0x21
 800bc38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2240      	movs	r2, #64	; 0x40
 800bc40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6a3a      	ldr	r2, [r7, #32]
 800bc4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bc5c:	88f8      	ldrh	r0, [r7, #6]
 800bc5e:	893a      	ldrh	r2, [r7, #8]
 800bc60:	8979      	ldrh	r1, [r7, #10]
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 fc7b 	bl	800c568 <I2C_RequestMemoryWrite>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d005      	beq.n	800bc84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e0a9      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	2bff      	cmp	r3, #255	; 0xff
 800bc8c:	d90e      	bls.n	800bcac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	22ff      	movs	r2, #255	; 0xff
 800bc92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	8979      	ldrh	r1, [r7, #10]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f001 fabb 	bl	800d220 <I2C_TransferConfig>
 800bcaa:	e00f      	b.n	800bccc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	8979      	ldrh	r1, [r7, #10]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f001 faaa 	bl	800d220 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f001 f93b 	bl	800cf4c <I2C_WaitOnTXISFlagUntilTimeout>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e07b      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	781a      	ldrb	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d034      	beq.n	800bd84 <HAL_I2C_Mem_Write+0x1c8>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d130      	bne.n	800bd84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2180      	movs	r1, #128	; 0x80
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f001 f8b4 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e04d      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	2bff      	cmp	r3, #255	; 0xff
 800bd44:	d90e      	bls.n	800bd64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	22ff      	movs	r2, #255	; 0xff
 800bd4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	8979      	ldrh	r1, [r7, #10]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f001 fa5f 	bl	800d220 <I2C_TransferConfig>
 800bd62:	e00f      	b.n	800bd84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	8979      	ldrh	r1, [r7, #10]
 800bd76:	2300      	movs	r3, #0
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f001 fa4e 	bl	800d220 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d19e      	bne.n	800bccc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f001 f921 	bl	800cfda <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e01a      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2220      	movs	r2, #32
 800bda8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6859      	ldr	r1, [r3, #4]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <HAL_I2C_Mem_Write+0x224>)
 800bdb6:	400b      	ands	r3, r1
 800bdb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e000      	b.n	800bdd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bdd6:	2302      	movs	r3, #2
  }
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	fe00e800 	.word	0xfe00e800

0800bde4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	4608      	mov	r0, r1
 800bdee:	4611      	mov	r1, r2
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	817b      	strh	r3, [r7, #10]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	813b      	strh	r3, [r7, #8]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b20      	cmp	r3, #32
 800be08:	f040 80fd 	bne.w	800c006 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <HAL_I2C_Mem_Read+0x34>
 800be12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e0f1      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d101      	bne.n	800be32 <HAL_I2C_Mem_Read+0x4e>
 800be2e:	2302      	movs	r3, #2
 800be30:	e0ea      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800be3a:	f7fe fc23 	bl	800a684 <HAL_GetTick>
 800be3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	2319      	movs	r3, #25
 800be46:	2201      	movs	r2, #1
 800be48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f001 f824 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e0d5      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2222      	movs	r2, #34	; 0x22
 800be60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2240      	movs	r2, #64	; 0x40
 800be68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6a3a      	ldr	r2, [r7, #32]
 800be76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800be84:	88f8      	ldrh	r0, [r7, #6]
 800be86:	893a      	ldrh	r2, [r7, #8]
 800be88:	8979      	ldrh	r1, [r7, #10]
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	4603      	mov	r3, r0
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f000 fbbb 	bl	800c610 <I2C_RequestMemoryRead>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d005      	beq.n	800beac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e0ad      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	2bff      	cmp	r3, #255	; 0xff
 800beb4:	d90e      	bls.n	800bed4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	22ff      	movs	r2, #255	; 0xff
 800beba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	8979      	ldrh	r1, [r7, #10]
 800bec4:	4b52      	ldr	r3, [pc, #328]	; (800c010 <HAL_I2C_Mem_Read+0x22c>)
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f001 f9a7 	bl	800d220 <I2C_TransferConfig>
 800bed2:	e00f      	b.n	800bef4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bed8:	b29a      	uxth	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	8979      	ldrh	r1, [r7, #10]
 800bee6:	4b4a      	ldr	r3, [pc, #296]	; (800c010 <HAL_I2C_Mem_Read+0x22c>)
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f001 f996 	bl	800d220 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	2200      	movs	r2, #0
 800befc:	2104      	movs	r1, #4
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 ffcb 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e07c      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	b2d2      	uxtb	r2, r2
 800bf1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf20:	1c5a      	adds	r2, r3, #1
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d034      	beq.n	800bfb4 <HAL_I2C_Mem_Read+0x1d0>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d130      	bne.n	800bfb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2180      	movs	r1, #128	; 0x80
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 ff9c 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e04d      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	2bff      	cmp	r3, #255	; 0xff
 800bf74:	d90e      	bls.n	800bf94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	22ff      	movs	r2, #255	; 0xff
 800bf7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	8979      	ldrh	r1, [r7, #10]
 800bf84:	2300      	movs	r3, #0
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f001 f947 	bl	800d220 <I2C_TransferConfig>
 800bf92:	e00f      	b.n	800bfb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	8979      	ldrh	r1, [r7, #10]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f001 f936 	bl	800d220 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d19a      	bne.n	800bef4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f001 f809 	bl	800cfda <I2C_WaitOnSTOPFlagUntilTimeout>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e01a      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6859      	ldr	r1, [r3, #4]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <HAL_I2C_Mem_Read+0x230>)
 800bfe6:	400b      	ands	r3, r1
 800bfe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2220      	movs	r2, #32
 800bfee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	e000      	b.n	800c008 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c006:	2302      	movs	r3, #2
  }
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	80002400 	.word	0x80002400
 800c014:	fe00e800 	.word	0xfe00e800

0800c018 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	460b      	mov	r3, r1
 800c026:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800c028:	2300      	movs	r3, #0
 800c02a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b20      	cmp	r3, #32
 800c036:	f040 80d6 	bne.w	800c1e6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c048:	d101      	bne.n	800c04e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800c04a:	2302      	movs	r3, #2
 800c04c:	e0cc      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c054:	2b01      	cmp	r3, #1
 800c056:	d101      	bne.n	800c05c <HAL_I2C_IsDeviceReady+0x44>
 800c058:	2302      	movs	r3, #2
 800c05a:	e0c5      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2224      	movs	r2, #36	; 0x24
 800c068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d107      	bne.n	800c08a <HAL_I2C_IsDeviceReady+0x72>
 800c07a:	897b      	ldrh	r3, [r7, #10]
 800c07c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c084:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c088:	e006      	b.n	800c098 <HAL_I2C_IsDeviceReady+0x80>
 800c08a:	897b      	ldrh	r3, [r7, #10]
 800c08c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c094:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	6812      	ldr	r2, [r2, #0]
 800c09c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800c09e:	f7fe faf1 	bl	800a684 <HAL_GetTick>
 800c0a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b20      	cmp	r3, #32
 800c0b0:	bf0c      	ite	eq
 800c0b2:	2301      	moveq	r3, #1
 800c0b4:	2300      	movne	r3, #0
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	f003 0310 	and.w	r3, r3, #16
 800c0c4:	2b10      	cmp	r3, #16
 800c0c6:	bf0c      	ite	eq
 800c0c8:	2301      	moveq	r3, #1
 800c0ca:	2300      	movne	r3, #0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c0d0:	e034      	b.n	800c13c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d8:	d01a      	beq.n	800c110 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c0da:	f7fe fad3 	bl	800a684 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d302      	bcc.n	800c0f0 <HAL_I2C_IsDeviceReady+0xd8>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10f      	bne.n	800c110 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2220      	movs	r2, #32
 800c0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fc:	f043 0220 	orr.w	r2, r3, #32
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e06b      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	f003 0320 	and.w	r3, r3, #32
 800c11a:	2b20      	cmp	r3, #32
 800c11c:	bf0c      	ite	eq
 800c11e:	2301      	moveq	r3, #1
 800c120:	2300      	movne	r3, #0
 800c122:	b2db      	uxtb	r3, r3
 800c124:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	f003 0310 	and.w	r3, r3, #16
 800c130:	2b10      	cmp	r3, #16
 800c132:	bf0c      	ite	eq
 800c134:	2301      	moveq	r3, #1
 800c136:	2300      	movne	r3, #0
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c13c:	7ffb      	ldrb	r3, [r7, #31]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d102      	bne.n	800c148 <HAL_I2C_IsDeviceReady+0x130>
 800c142:	7fbb      	ldrb	r3, [r7, #30]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0c4      	beq.n	800c0d2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	f003 0310 	and.w	r3, r3, #16
 800c152:	2b10      	cmp	r3, #16
 800c154:	d01a      	beq.n	800c18c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	2200      	movs	r2, #0
 800c15e:	2120      	movs	r1, #32
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 fe9a 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e03b      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2220      	movs	r2, #32
 800c176:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	e02d      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2200      	movs	r2, #0
 800c194:	2120      	movs	r1, #32
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f000 fe7f 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e020      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2210      	movs	r2, #16
 800c1ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	f63f af56 	bhi.w	800c072 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d2:	f043 0220 	orr.w	r2, r3, #32
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800c1e6:	2302      	movs	r3, #2
  }
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	699b      	ldr	r3, [r3, #24]
 800c1fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	68f9      	ldr	r1, [r7, #12]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	4798      	blx	r3
  }
}
 800c21c:	bf00      	nop
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00f      	beq.n	800c266 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00a      	beq.n	800c266 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c254:	f043 0201 	orr.w	r2, r3, #1
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c264:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00f      	beq.n	800c290 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27e:	f043 0208 	orr.w	r2, r3, #8
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c28e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00f      	beq.n	800c2ba <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00a      	beq.n	800c2ba <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a8:	f043 0202 	orr.w	r2, r3, #2
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f003 030b 	and.w	r3, r3, #11
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800c2ca:	68f9      	ldr	r1, [r7, #12]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fc8b 	bl	800cbe8 <I2C_ITError>
  }
}
 800c2d2:	bf00      	nop
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b083      	sub	sp, #12
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c2f6:	bf00      	nop
 800c2f8:	370c      	adds	r7, #12
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
 800c30e:	4613      	mov	r3, r2
 800c310:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c312:	bf00      	nop
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c33a:	bf00      	nop
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c34e:	bf00      	nop
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c368:	b2db      	uxtb	r3, r3
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c386:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c392:	2b01      	cmp	r3, #1
 800c394:	d101      	bne.n	800c39a <I2C_Slave_ISR_IT+0x24>
 800c396:	2302      	movs	r3, #2
 800c398:	e0e2      	b.n	800c560 <I2C_Slave_ISR_IT+0x1ea>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f003 0320 	and.w	r3, r3, #32
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d009      	beq.n	800c3c0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d004      	beq.n	800c3c0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c3b6:	6939      	ldr	r1, [r7, #16]
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 fa5d 	bl	800c878 <I2C_ITSlaveCplt>
 800c3be:	e0ca      	b.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f003 0310 	and.w	r3, r3, #16
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d04b      	beq.n	800c462 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d046      	beq.n	800c462 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d128      	bne.n	800c430 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b28      	cmp	r3, #40	; 0x28
 800c3e8:	d108      	bne.n	800c3fc <I2C_Slave_ISR_IT+0x86>
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3f0:	d104      	bne.n	800c3fc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c3f2:	6939      	ldr	r1, [r7, #16]
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 fba3 	bl	800cb40 <I2C_ITListenCplt>
 800c3fa:	e031      	b.n	800c460 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b29      	cmp	r3, #41	; 0x29
 800c406:	d10e      	bne.n	800c426 <I2C_Slave_ISR_IT+0xb0>
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c40e:	d00a      	beq.n	800c426 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2210      	movs	r2, #16
 800c416:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 fcfc 	bl	800ce16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f000 f9ce 	bl	800c7c0 <I2C_ITSlaveSeqCplt>
 800c424:	e01c      	b.n	800c460 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2210      	movs	r2, #16
 800c42c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c42e:	e08f      	b.n	800c550 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2210      	movs	r2, #16
 800c436:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c43c:	f043 0204 	orr.w	r2, r3, #4
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <I2C_Slave_ISR_IT+0xdc>
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c450:	d17e      	bne.n	800c550 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	4619      	mov	r1, r3
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fbc5 	bl	800cbe8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c45e:	e077      	b.n	800c550 <I2C_Slave_ISR_IT+0x1da>
 800c460:	e076      	b.n	800c550 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	f003 0304 	and.w	r3, r3, #4
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d02f      	beq.n	800c4cc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c472:	2b00      	cmp	r3, #0
 800c474:	d02a      	beq.n	800c4cc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d018      	beq.n	800c4b2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48a:	b2d2      	uxtb	r2, r2
 800c48c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c49c:	3b01      	subs	r3, #1
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d14b      	bne.n	800c554 <I2C_Slave_ISR_IT+0x1de>
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4c2:	d047      	beq.n	800c554 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f000 f97b 	bl	800c7c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c4ca:	e043      	b.n	800c554 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	f003 0308 	and.w	r3, r3, #8
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d009      	beq.n	800c4ea <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d004      	beq.n	800c4ea <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c4e0:	6939      	ldr	r1, [r7, #16]
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 f8e8 	bl	800c6b8 <I2C_ITAddrCplt>
 800c4e8:	e035      	b.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f003 0302 	and.w	r3, r3, #2
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d030      	beq.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d02b      	beq.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c502:	b29b      	uxth	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	d018      	beq.n	800c53a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	781a      	ldrb	r2, [r3, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c522:	b29b      	uxth	r3, r3
 800c524:	3b01      	subs	r3, #1
 800c526:	b29a      	uxth	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c530:	3b01      	subs	r3, #1
 800c532:	b29a      	uxth	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	851a      	strh	r2, [r3, #40]	; 0x28
 800c538:	e00d      	b.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c540:	d002      	beq.n	800c548 <I2C_Slave_ISR_IT+0x1d2>
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d106      	bne.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	f000 f939 	bl	800c7c0 <I2C_ITSlaveSeqCplt>
 800c54e:	e002      	b.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800c550:	bf00      	nop
 800c552:	e000      	b.n	800c556 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800c554:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	4608      	mov	r0, r1
 800c572:	4611      	mov	r1, r2
 800c574:	461a      	mov	r2, r3
 800c576:	4603      	mov	r3, r0
 800c578:	817b      	strh	r3, [r7, #10]
 800c57a:	460b      	mov	r3, r1
 800c57c:	813b      	strh	r3, [r7, #8]
 800c57e:	4613      	mov	r3, r2
 800c580:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c582:	88fb      	ldrh	r3, [r7, #6]
 800c584:	b2da      	uxtb	r2, r3
 800c586:	8979      	ldrh	r1, [r7, #10]
 800c588:	4b20      	ldr	r3, [pc, #128]	; (800c60c <I2C_RequestMemoryWrite+0xa4>)
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f000 fe45 	bl	800d220 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	69b9      	ldr	r1, [r7, #24]
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f000 fcd6 	bl	800cf4c <I2C_WaitOnTXISFlagUntilTimeout>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e02c      	b.n	800c604 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d105      	bne.n	800c5bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5b0:	893b      	ldrh	r3, [r7, #8]
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	629a      	str	r2, [r3, #40]	; 0x28
 800c5ba:	e015      	b.n	800c5e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c5bc:	893b      	ldrh	r3, [r7, #8]
 800c5be:	0a1b      	lsrs	r3, r3, #8
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5ca:	69fa      	ldr	r2, [r7, #28]
 800c5cc:	69b9      	ldr	r1, [r7, #24]
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 fcbc 	bl	800cf4c <I2C_WaitOnTXISFlagUntilTimeout>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e012      	b.n	800c604 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5de:	893b      	ldrh	r3, [r7, #8]
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2180      	movs	r1, #128	; 0x80
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f000 fc51 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	80002000 	.word	0x80002000

0800c610 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af02      	add	r7, sp, #8
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	4608      	mov	r0, r1
 800c61a:	4611      	mov	r1, r2
 800c61c:	461a      	mov	r2, r3
 800c61e:	4603      	mov	r3, r0
 800c620:	817b      	strh	r3, [r7, #10]
 800c622:	460b      	mov	r3, r1
 800c624:	813b      	strh	r3, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c62a:	88fb      	ldrh	r3, [r7, #6]
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	8979      	ldrh	r1, [r7, #10]
 800c630:	4b20      	ldr	r3, [pc, #128]	; (800c6b4 <I2C_RequestMemoryRead+0xa4>)
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	2300      	movs	r3, #0
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f000 fdf2 	bl	800d220 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	69b9      	ldr	r1, [r7, #24]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 fc83 	bl	800cf4c <I2C_WaitOnTXISFlagUntilTimeout>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e02c      	b.n	800c6aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d105      	bne.n	800c662 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c656:	893b      	ldrh	r3, [r7, #8]
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	629a      	str	r2, [r3, #40]	; 0x28
 800c660:	e015      	b.n	800c68e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c662:	893b      	ldrh	r3, [r7, #8]
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	b29b      	uxth	r3, r3
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c670:	69fa      	ldr	r2, [r7, #28]
 800c672:	69b9      	ldr	r1, [r7, #24]
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f000 fc69 	bl	800cf4c <I2C_WaitOnTXISFlagUntilTimeout>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e012      	b.n	800c6aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c684:	893b      	ldrh	r3, [r7, #8]
 800c686:	b2da      	uxtb	r2, r3
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	2200      	movs	r2, #0
 800c696:	2140      	movs	r1, #64	; 0x40
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f000 fbfe 	bl	800ce9a <I2C_WaitOnFlagUntilTimeout>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e000      	b.n	800c6aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	80002000 	.word	0x80002000

0800c6b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c6ce:	2b28      	cmp	r3, #40	; 0x28
 800c6d0:	d16a      	bne.n	800c7a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	0c1b      	lsrs	r3, r3, #16
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	0c1b      	lsrs	r3, r3, #16
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c6f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	b29b      	uxth	r3, r3
 800c708:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c70c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d138      	bne.n	800c788 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c716:	897b      	ldrh	r3, [r7, #10]
 800c718:	09db      	lsrs	r3, r3, #7
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	89bb      	ldrh	r3, [r7, #12]
 800c71e:	4053      	eors	r3, r2
 800c720:	b29b      	uxth	r3, r3
 800c722:	f003 0306 	and.w	r3, r3, #6
 800c726:	2b00      	cmp	r3, #0
 800c728:	d11c      	bne.n	800c764 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c72a:	897b      	ldrh	r3, [r7, #10]
 800c72c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d13b      	bne.n	800c7b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2208      	movs	r2, #8
 800c74c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c756:	89ba      	ldrh	r2, [r7, #12]
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff fdd0 	bl	800c302 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c762:	e029      	b.n	800c7b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c764:	893b      	ldrh	r3, [r7, #8]
 800c766:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fd89 	bl	800d284 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c77a:	89ba      	ldrh	r2, [r7, #12]
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fdbe 	bl	800c302 <HAL_I2C_AddrCallback>
}
 800c786:	e017      	b.n	800c7b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fd79 	bl	800d284 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c79a:	89ba      	ldrh	r2, [r7, #12]
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff fdae 	bl	800c302 <HAL_I2C_AddrCallback>
}
 800c7a6:	e007      	b.n	800c7b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2208      	movs	r2, #8
 800c7ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c7b8:	bf00      	nop
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d008      	beq.n	800c7f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	e00c      	b.n	800c80e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d007      	beq.n	800c80e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c80c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b29      	cmp	r3, #41	; 0x29
 800c818:	d112      	bne.n	800c840 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2228      	movs	r2, #40	; 0x28
 800c81e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2221      	movs	r2, #33	; 0x21
 800c826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c828:	2101      	movs	r1, #1
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fd2a 	bl	800d284 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff fd4e 	bl	800c2da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c83e:	e017      	b.n	800c870 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b2a      	cmp	r3, #42	; 0x2a
 800c84a:	d111      	bne.n	800c870 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2228      	movs	r2, #40	; 0x28
 800c850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2222      	movs	r2, #34	; 0x22
 800c858:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c85a:	2102      	movs	r1, #2
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fd11 	bl	800d284 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff fd3f 	bl	800c2ee <HAL_I2C_SlaveRxCpltCallback>
}
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c89a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2220      	movs	r2, #32
 800c8a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	2b21      	cmp	r3, #33	; 0x21
 800c8a8:	d002      	beq.n	800c8b0 <I2C_ITSlaveCplt+0x38>
 800c8aa:	7afb      	ldrb	r3, [r7, #11]
 800c8ac:	2b29      	cmp	r3, #41	; 0x29
 800c8ae:	d108      	bne.n	800c8c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c8b0:	f248 0101 	movw	r1, #32769	; 0x8001
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fce5 	bl	800d284 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2221      	movs	r2, #33	; 0x21
 800c8be:	631a      	str	r2, [r3, #48]	; 0x30
 800c8c0:	e019      	b.n	800c8f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c8c2:	7afb      	ldrb	r3, [r7, #11]
 800c8c4:	2b22      	cmp	r3, #34	; 0x22
 800c8c6:	d002      	beq.n	800c8ce <I2C_ITSlaveCplt+0x56>
 800c8c8:	7afb      	ldrb	r3, [r7, #11]
 800c8ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c8cc:	d108      	bne.n	800c8e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c8ce:	f248 0102 	movw	r1, #32770	; 0x8002
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fcd6 	bl	800d284 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2222      	movs	r2, #34	; 0x22
 800c8dc:	631a      	str	r2, [r3, #48]	; 0x30
 800c8de:	e00a      	b.n	800c8f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c8e0:	7afb      	ldrb	r3, [r7, #11]
 800c8e2:	2b28      	cmp	r3, #40	; 0x28
 800c8e4:	d107      	bne.n	800c8f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c8e6:	f248 0103 	movw	r1, #32771	; 0x8003
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fcca 	bl	800d284 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c904:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6859      	ldr	r1, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	4b89      	ldr	r3, [pc, #548]	; (800cb38 <I2C_ITSlaveCplt+0x2c0>)
 800c912:	400b      	ands	r3, r1
 800c914:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa7d 	bl	800ce16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d013      	beq.n	800c94e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c934:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d01f      	beq.n	800c97e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	b29a      	uxth	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c94c:	e017      	b.n	800c97e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c954:	2b00      	cmp	r3, #0
 800c956:	d012      	beq.n	800c97e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c966:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d006      	beq.n	800c97e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	b29a      	uxth	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f003 0304 	and.w	r3, r3, #4
 800c984:	2b00      	cmp	r3, #0
 800c986:	d020      	beq.n	800c9ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f023 0304 	bic.w	r3, r3, #4
 800c98e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99a:	b2d2      	uxtb	r2, r2
 800c99c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00c      	beq.n	800c9ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d005      	beq.n	800c9e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d8:	f043 0204 	orr.w	r2, r3, #4
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f003 0310 	and.w	r3, r3, #16
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d049      	beq.n	800ca7e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d044      	beq.n	800ca7e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d128      	bne.n	800ca50 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b28      	cmp	r3, #40	; 0x28
 800ca08:	d108      	bne.n	800ca1c <I2C_ITSlaveCplt+0x1a4>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca10:	d104      	bne.n	800ca1c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ca12:	6979      	ldr	r1, [r7, #20]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f893 	bl	800cb40 <I2C_ITListenCplt>
 800ca1a:	e030      	b.n	800ca7e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b29      	cmp	r3, #41	; 0x29
 800ca26:	d10e      	bne.n	800ca46 <I2C_ITSlaveCplt+0x1ce>
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ca2e:	d00a      	beq.n	800ca46 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2210      	movs	r2, #16
 800ca36:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f9ec 	bl	800ce16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff febe 	bl	800c7c0 <I2C_ITSlaveSeqCplt>
 800ca44:	e01b      	b.n	800ca7e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2210      	movs	r2, #16
 800ca4c:	61da      	str	r2, [r3, #28]
 800ca4e:	e016      	b.n	800ca7e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2210      	movs	r2, #16
 800ca56:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca5c:	f043 0204 	orr.w	r2, r3, #4
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <I2C_ITSlaveCplt+0x1fa>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca70:	d105      	bne.n	800ca7e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f8b5 	bl	800cbe8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d010      	beq.n	800cab6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f8a4 	bl	800cbe8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b28      	cmp	r3, #40	; 0x28
 800caaa:	d141      	bne.n	800cb30 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800caac:	6979      	ldr	r1, [r7, #20]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f846 	bl	800cb40 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cab4:	e03c      	b.n	800cb30 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cabe:	d014      	beq.n	800caea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7ff fe7d 	bl	800c7c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a1c      	ldr	r2, [pc, #112]	; (800cb3c <I2C_ITSlaveCplt+0x2c4>)
 800caca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2220      	movs	r2, #32
 800cad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff fc1b 	bl	800c31e <HAL_I2C_ListenCpltCallback>
}
 800cae8:	e022      	b.n	800cb30 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b22      	cmp	r3, #34	; 0x22
 800caf4:	d10e      	bne.n	800cb14 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2220      	movs	r2, #32
 800cafa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff fbee 	bl	800c2ee <HAL_I2C_SlaveRxCpltCallback>
}
 800cb12:	e00d      	b.n	800cb30 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2220      	movs	r2, #32
 800cb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff fbd5 	bl	800c2da <HAL_I2C_SlaveTxCpltCallback>
}
 800cb30:	bf00      	nop
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	fe00e800 	.word	0xfe00e800
 800cb3c:	ffff0000 	.word	0xffff0000

0800cb40 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a25      	ldr	r2, [pc, #148]	; (800cbe4 <I2C_ITListenCplt+0xa4>)
 800cb4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d022      	beq.n	800cbbc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	b2d2      	uxtb	r2, r2
 800cb82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	1c5a      	adds	r2, r3, #1
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d012      	beq.n	800cbbc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbb4:	f043 0204 	orr.w	r2, r3, #4
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cbbc:	f248 0103 	movw	r1, #32771	; 0x8003
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fb5f 	bl	800d284 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2210      	movs	r2, #16
 800cbcc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff fba1 	bl	800c31e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	ffff0000 	.word	0xffff0000

0800cbe8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbf8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a6d      	ldr	r2, [pc, #436]	; (800cdbc <I2C_ITError+0x1d4>)
 800cc06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	431a      	orrs	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	2b28      	cmp	r3, #40	; 0x28
 800cc1e:	d005      	beq.n	800cc2c <I2C_ITError+0x44>
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	2b29      	cmp	r3, #41	; 0x29
 800cc24:	d002      	beq.n	800cc2c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
 800cc28:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2a:	d10b      	bne.n	800cc44 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cc2c:	2103      	movs	r1, #3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fb28 	bl	800d284 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2228      	movs	r2, #40	; 0x28
 800cc38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a60      	ldr	r2, [pc, #384]	; (800cdc0 <I2C_ITError+0x1d8>)
 800cc40:	635a      	str	r2, [r3, #52]	; 0x34
 800cc42:	e030      	b.n	800cca6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cc44:	f248 0103 	movw	r1, #32771	; 0x8003
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fb1b 	bl	800d284 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f8e1 	bl	800ce16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b60      	cmp	r3, #96	; 0x60
 800cc5e:	d01f      	beq.n	800cca0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2220      	movs	r2, #32
 800cc64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	f003 0320 	and.w	r3, r3, #32
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d114      	bne.n	800cca0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	f003 0310 	and.w	r3, r3, #16
 800cc80:	2b10      	cmp	r3, #16
 800cc82:	d109      	bne.n	800cc98 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2210      	movs	r2, #16
 800cc8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc90:	f043 0204 	orr.w	r2, r3, #4
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d039      	beq.n	800cd28 <I2C_ITError+0x140>
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b11      	cmp	r3, #17
 800ccb8:	d002      	beq.n	800ccc0 <I2C_ITError+0xd8>
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b21      	cmp	r3, #33	; 0x21
 800ccbe:	d133      	bne.n	800cd28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccce:	d107      	bne.n	800cce0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fe f822 	bl	800ad2e <HAL_DMA_GetState>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d017      	beq.n	800cd20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf4:	4a33      	ldr	r2, [pc, #204]	; (800cdc4 <I2C_ITError+0x1dc>)
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fd fefc 	bl	800ab02 <HAL_DMA_Abort_IT>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d04d      	beq.n	800cdac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cd1e:	e045      	b.n	800cdac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f851 	bl	800cdc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cd26:	e041      	b.n	800cdac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d039      	beq.n	800cda4 <I2C_ITError+0x1bc>
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	2b12      	cmp	r3, #18
 800cd34:	d002      	beq.n	800cd3c <I2C_ITError+0x154>
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b22      	cmp	r3, #34	; 0x22
 800cd3a:	d133      	bne.n	800cda4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd4a:	d107      	bne.n	800cd5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fd ffe4 	bl	800ad2e <HAL_DMA_GetState>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d017      	beq.n	800cd9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd70:	4a14      	ldr	r2, [pc, #80]	; (800cdc4 <I2C_ITError+0x1dc>)
 800cd72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fd febe 	bl	800ab02 <HAL_DMA_Abort_IT>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d011      	beq.n	800cdb0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cd96:	4610      	mov	r0, r2
 800cd98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cd9a:	e009      	b.n	800cdb0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f813 	bl	800cdc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cda2:	e005      	b.n	800cdb0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f80f 	bl	800cdc8 <I2C_TreatErrorCallback>
  }
}
 800cdaa:	e002      	b.n	800cdb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cdac:	bf00      	nop
 800cdae:	e000      	b.n	800cdb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cdb0:	bf00      	nop
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	ffff0000 	.word	0xffff0000
 800cdc0:	0800c377 	.word	0x0800c377
 800cdc4:	0800ce5f 	.word	0x0800ce5f

0800cdc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b60      	cmp	r3, #96	; 0x60
 800cdda:	d10e      	bne.n	800cdfa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2220      	movs	r2, #32
 800cde0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff faa7 	bl	800c346 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cdf8:	e009      	b.n	800ce0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fa92 	bl	800c332 <HAL_I2C_ErrorCallback>
}
 800ce0e:	bf00      	nop
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ce16:	b480      	push	{r7}
 800ce18:	b083      	sub	sp, #12
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	f003 0302 	and.w	r3, r3, #2
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d103      	bne.n	800ce34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2200      	movs	r2, #0
 800ce32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	699b      	ldr	r3, [r3, #24]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d007      	beq.n	800ce52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	699a      	ldr	r2, [r3, #24]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f042 0201 	orr.w	r2, r2, #1
 800ce50:	619a      	str	r2, [r3, #24]
  }
}
 800ce52:	bf00      	nop
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b084      	sub	sp, #16
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d003      	beq.n	800ce7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce78:	2200      	movs	r2, #0
 800ce7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce88:	2200      	movs	r2, #0
 800ce8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff ff9b 	bl	800cdc8 <I2C_TreatErrorCallback>
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	603b      	str	r3, [r7, #0]
 800cea6:	4613      	mov	r3, r2
 800cea8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ceaa:	e03b      	b.n	800cf24 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ceac:	69ba      	ldr	r2, [r7, #24]
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f000 f8d5 	bl	800d060 <I2C_IsErrorOccurred>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d001      	beq.n	800cec0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e041      	b.n	800cf44 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec6:	d02d      	beq.n	800cf24 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cec8:	f7fd fbdc 	bl	800a684 <HAL_GetTick>
 800cecc:	4602      	mov	r2, r0
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d302      	bcc.n	800cede <I2C_WaitOnFlagUntilTimeout+0x44>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d122      	bne.n	800cf24 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	699a      	ldr	r2, [r3, #24]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	4013      	ands	r3, r2
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	bf0c      	ite	eq
 800ceee:	2301      	moveq	r3, #1
 800cef0:	2300      	movne	r3, #0
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	461a      	mov	r2, r3
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d113      	bne.n	800cf24 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf00:	f043 0220 	orr.w	r2, r3, #32
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2220      	movs	r2, #32
 800cf0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e00f      	b.n	800cf44 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	bf0c      	ite	eq
 800cf34:	2301      	moveq	r3, #1
 800cf36:	2300      	movne	r3, #0
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	79fb      	ldrb	r3, [r7, #7]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d0b4      	beq.n	800ceac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cf58:	e033      	b.n	800cfc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f000 f87e 	bl	800d060 <I2C_IsErrorOccurred>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d001      	beq.n	800cf6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e031      	b.n	800cfd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf74:	d025      	beq.n	800cfc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf76:	f7fd fb85 	bl	800a684 <HAL_GetTick>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d302      	bcc.n	800cf8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d11a      	bne.n	800cfc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	699b      	ldr	r3, [r3, #24]
 800cf92:	f003 0302 	and.w	r3, r3, #2
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d013      	beq.n	800cfc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf9e:	f043 0220 	orr.w	r2, r3, #32
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2220      	movs	r2, #32
 800cfaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e007      	b.n	800cfd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d1c4      	bne.n	800cf5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	60b9      	str	r1, [r7, #8]
 800cfe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfe6:	e02f      	b.n	800d048 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	68b9      	ldr	r1, [r7, #8]
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f837 	bl	800d060 <I2C_IsErrorOccurred>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e02d      	b.n	800d058 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cffc:	f7fd fb42 	bl	800a684 <HAL_GetTick>
 800d000:	4602      	mov	r2, r0
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d302      	bcc.n	800d012 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d11a      	bne.n	800d048 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	f003 0320 	and.w	r3, r3, #32
 800d01c:	2b20      	cmp	r3, #32
 800d01e:	d013      	beq.n	800d048 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d024:	f043 0220 	orr.w	r2, r3, #32
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2220      	movs	r2, #32
 800d030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	e007      	b.n	800d058 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	f003 0320 	and.w	r3, r3, #32
 800d052:	2b20      	cmp	r3, #32
 800d054:	d1c8      	bne.n	800cfe8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b08a      	sub	sp, #40	; 0x28
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d07a:	2300      	movs	r3, #0
 800d07c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	f003 0310 	and.w	r3, r3, #16
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d068      	beq.n	800d15e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2210      	movs	r2, #16
 800d092:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d094:	e049      	b.n	800d12a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09c:	d045      	beq.n	800d12a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d09e:	f7fd faf1 	bl	800a684 <HAL_GetTick>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	1ad3      	subs	r3, r2, r3
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d302      	bcc.n	800d0b4 <I2C_IsErrorOccurred+0x54>
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d13a      	bne.n	800d12a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0d6:	d121      	bne.n	800d11c <I2C_IsErrorOccurred+0xbc>
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0de:	d01d      	beq.n	800d11c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d0e0:	7cfb      	ldrb	r3, [r7, #19]
 800d0e2:	2b20      	cmp	r3, #32
 800d0e4:	d01a      	beq.n	800d11c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d0f6:	f7fd fac5 	bl	800a684 <HAL_GetTick>
 800d0fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0fc:	e00e      	b.n	800d11c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d0fe:	f7fd fac1 	bl	800a684 <HAL_GetTick>
 800d102:	4602      	mov	r2, r0
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	2b19      	cmp	r3, #25
 800d10a:	d907      	bls.n	800d11c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	f043 0320 	orr.w	r3, r3, #32
 800d112:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800d11a:	e006      	b.n	800d12a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b20      	cmp	r3, #32
 800d128:	d1e9      	bne.n	800d0fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	f003 0320 	and.w	r3, r3, #32
 800d134:	2b20      	cmp	r3, #32
 800d136:	d003      	beq.n	800d140 <I2C_IsErrorOccurred+0xe0>
 800d138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d0aa      	beq.n	800d096 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d144:	2b00      	cmp	r3, #0
 800d146:	d103      	bne.n	800d150 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2220      	movs	r2, #32
 800d14e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	f043 0304 	orr.w	r3, r3, #4
 800d156:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	699b      	ldr	r3, [r3, #24]
 800d164:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00b      	beq.n	800d188 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	f043 0301 	orr.w	r3, r3, #1
 800d176:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d180:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00b      	beq.n	800d1aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	f043 0308 	orr.w	r3, r3, #8
 800d198:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00b      	beq.n	800d1cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	f043 0302 	orr.w	r3, r3, #2
 800d1ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01c      	beq.n	800d20e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7ff fe1e 	bl	800ce16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6859      	ldr	r1, [r3, #4]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	4b0d      	ldr	r3, [pc, #52]	; (800d21c <I2C_IsErrorOccurred+0x1bc>)
 800d1e6:	400b      	ands	r3, r1
 800d1e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	431a      	orrs	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2220      	movs	r2, #32
 800d1fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d20e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d212:	4618      	mov	r0, r3
 800d214:	3728      	adds	r7, #40	; 0x28
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	fe00e800 	.word	0xfe00e800

0800d220 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d220:	b480      	push	{r7}
 800d222:	b087      	sub	sp, #28
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	607b      	str	r3, [r7, #4]
 800d22a:	460b      	mov	r3, r1
 800d22c:	817b      	strh	r3, [r7, #10]
 800d22e:	4613      	mov	r3, r2
 800d230:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d232:	897b      	ldrh	r3, [r7, #10]
 800d234:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d238:	7a7b      	ldrb	r3, [r7, #9]
 800d23a:	041b      	lsls	r3, r3, #16
 800d23c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d240:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	4313      	orrs	r3, r2
 800d24a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d24e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	0d5b      	lsrs	r3, r3, #21
 800d25a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d25e:	4b08      	ldr	r3, [pc, #32]	; (800d280 <I2C_TransferConfig+0x60>)
 800d260:	430b      	orrs	r3, r1
 800d262:	43db      	mvns	r3, r3
 800d264:	ea02 0103 	and.w	r1, r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	430a      	orrs	r2, r1
 800d270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d272:	bf00      	nop
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	03ff63ff 	.word	0x03ff63ff

0800d284 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d294:	887b      	ldrh	r3, [r7, #2]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00f      	beq.n	800d2be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d2a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d2b2:	2b28      	cmp	r3, #40	; 0x28
 800d2b4:	d003      	beq.n	800d2be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d2bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d2be:	887b      	ldrh	r3, [r7, #2]
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00f      	beq.n	800d2e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d2ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d2dc:	2b28      	cmp	r3, #40	; 0x28
 800d2de:	d003      	beq.n	800d2e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d2e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d2e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	da03      	bge.n	800d2f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d2f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d2f8:	887b      	ldrh	r3, [r7, #2]
 800d2fa:	2b10      	cmp	r3, #16
 800d2fc:	d103      	bne.n	800d306 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d304:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d306:	887b      	ldrh	r3, [r7, #2]
 800d308:	2b20      	cmp	r3, #32
 800d30a:	d103      	bne.n	800d314 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f043 0320 	orr.w	r3, r3, #32
 800d312:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d314:	887b      	ldrh	r3, [r7, #2]
 800d316:	2b40      	cmp	r3, #64	; 0x40
 800d318:	d103      	bne.n	800d322 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d320:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6819      	ldr	r1, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	43da      	mvns	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	400a      	ands	r2, r1
 800d332:	601a      	str	r2, [r3, #0]
}
 800d334:	bf00      	nop
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d350:	b2db      	uxtb	r3, r3
 800d352:	2b20      	cmp	r3, #32
 800d354:	d138      	bne.n	800d3c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d101      	bne.n	800d364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d360:	2302      	movs	r3, #2
 800d362:	e032      	b.n	800d3ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2224      	movs	r2, #36	; 0x24
 800d370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f022 0201 	bic.w	r2, r2, #1
 800d382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6819      	ldr	r1, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	430a      	orrs	r2, r1
 800d3a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0201 	orr.w	r2, r2, #1
 800d3b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e000      	b.n	800d3ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d3c8:	2302      	movs	r3, #2
  }
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b085      	sub	sp, #20
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b20      	cmp	r3, #32
 800d3ea:	d139      	bne.n	800d460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d101      	bne.n	800d3fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	e033      	b.n	800d462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2224      	movs	r2, #36	; 0x24
 800d406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f022 0201 	bic.w	r2, r2, #1
 800d418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	021b      	lsls	r3, r3, #8
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f042 0201 	orr.w	r2, r2, #1
 800d44a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2220      	movs	r2, #32
 800d450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	e000      	b.n	800d462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d460:	2302      	movs	r3, #2
  }
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
	...

0800d470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d141      	bne.n	800d502 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d47e:	4b4b      	ldr	r3, [pc, #300]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d48a:	d131      	bne.n	800d4f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d48c:	4b47      	ldr	r3, [pc, #284]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d492:	4a46      	ldr	r2, [pc, #280]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d49c:	4b43      	ldr	r3, [pc, #268]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d4a4:	4a41      	ldr	r2, [pc, #260]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d4ac:	4b40      	ldr	r3, [pc, #256]	; (800d5b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2232      	movs	r2, #50	; 0x32
 800d4b2:	fb02 f303 	mul.w	r3, r2, r3
 800d4b6:	4a3f      	ldr	r2, [pc, #252]	; (800d5b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4bc:	0c9b      	lsrs	r3, r3, #18
 800d4be:	3301      	adds	r3, #1
 800d4c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d4c2:	e002      	b.n	800d4ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d4ca:	4b38      	ldr	r3, [pc, #224]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4d6:	d102      	bne.n	800d4de <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1f2      	bne.n	800d4c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d4de:	4b33      	ldr	r3, [pc, #204]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4ea:	d158      	bne.n	800d59e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e057      	b.n	800d5a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d4f0:	4b2e      	ldr	r3, [pc, #184]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4f6:	4a2d      	ldr	r2, [pc, #180]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d500:	e04d      	b.n	800d59e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d508:	d141      	bne.n	800d58e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d50a:	4b28      	ldr	r3, [pc, #160]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d516:	d131      	bne.n	800d57c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d518:	4b24      	ldr	r3, [pc, #144]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d51e:	4a23      	ldr	r2, [pc, #140]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d528:	4b20      	ldr	r3, [pc, #128]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d530:	4a1e      	ldr	r2, [pc, #120]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d538:	4b1d      	ldr	r3, [pc, #116]	; (800d5b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2232      	movs	r2, #50	; 0x32
 800d53e:	fb02 f303 	mul.w	r3, r2, r3
 800d542:	4a1c      	ldr	r2, [pc, #112]	; (800d5b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d544:	fba2 2303 	umull	r2, r3, r2, r3
 800d548:	0c9b      	lsrs	r3, r3, #18
 800d54a:	3301      	adds	r3, #1
 800d54c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d54e:	e002      	b.n	800d556 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3b01      	subs	r3, #1
 800d554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d556:	4b15      	ldr	r3, [pc, #84]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d562:	d102      	bne.n	800d56a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1f2      	bne.n	800d550 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d56a:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d56c:	695b      	ldr	r3, [r3, #20]
 800d56e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d576:	d112      	bne.n	800d59e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d578:	2303      	movs	r3, #3
 800d57a:	e011      	b.n	800d5a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d57c:	4b0b      	ldr	r3, [pc, #44]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d582:	4a0a      	ldr	r2, [pc, #40]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d58c:	e007      	b.n	800d59e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d58e:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d596:	4a05      	ldr	r2, [pc, #20]	; (800d5ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d59c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3714      	adds	r7, #20
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	40007000 	.word	0x40007000
 800d5b0:	20000078 	.word	0x20000078
 800d5b4:	431bde83 	.word	0x431bde83

0800d5b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d5bc:	4b05      	ldr	r3, [pc, #20]	; (800d5d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	4a04      	ldr	r2, [pc, #16]	; (800d5d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d5c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5c6:	6093      	str	r3, [r2, #8]
}
 800d5c8:	bf00      	nop
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	40007000 	.word	0x40007000

0800d5d8 <HAL_RCC_OscConfig>:
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b088      	sub	sp, #32
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d101      	bne.n	800d5ea <HAL_RCC_OscConfig+0x12>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e2fe      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 0301 	and.w	r3, r3, #1
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d075      	beq.n	800d6e2 <HAL_RCC_OscConfig+0x10a>
 800d5f6:	4b97      	ldr	r3, [pc, #604]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f003 030c 	and.w	r3, r3, #12
 800d5fe:	61bb      	str	r3, [r7, #24]
 800d600:	4b94      	ldr	r3, [pc, #592]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	f003 0303 	and.w	r3, r3, #3
 800d608:	617b      	str	r3, [r7, #20]
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2b0c      	cmp	r3, #12
 800d60e:	d102      	bne.n	800d616 <HAL_RCC_OscConfig+0x3e>
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2b03      	cmp	r3, #3
 800d614:	d002      	beq.n	800d61c <HAL_RCC_OscConfig+0x44>
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b08      	cmp	r3, #8
 800d61a:	d10b      	bne.n	800d634 <HAL_RCC_OscConfig+0x5c>
 800d61c:	4b8d      	ldr	r3, [pc, #564]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d05b      	beq.n	800d6e0 <HAL_RCC_OscConfig+0x108>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d157      	bne.n	800d6e0 <HAL_RCC_OscConfig+0x108>
 800d630:	2301      	movs	r3, #1
 800d632:	e2d9      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d63c:	d106      	bne.n	800d64c <HAL_RCC_OscConfig+0x74>
 800d63e:	4b85      	ldr	r3, [pc, #532]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a84      	ldr	r2, [pc, #528]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	e01d      	b.n	800d688 <HAL_RCC_OscConfig+0xb0>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d654:	d10c      	bne.n	800d670 <HAL_RCC_OscConfig+0x98>
 800d656:	4b7f      	ldr	r3, [pc, #508]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a7e      	ldr	r2, [pc, #504]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d65c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	4b7c      	ldr	r3, [pc, #496]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a7b      	ldr	r2, [pc, #492]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d66c:	6013      	str	r3, [r2, #0]
 800d66e:	e00b      	b.n	800d688 <HAL_RCC_OscConfig+0xb0>
 800d670:	4b78      	ldr	r3, [pc, #480]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a77      	ldr	r2, [pc, #476]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	4b75      	ldr	r3, [pc, #468]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a74      	ldr	r2, [pc, #464]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d013      	beq.n	800d6b8 <HAL_RCC_OscConfig+0xe0>
 800d690:	f7fc fff8 	bl	800a684 <HAL_GetTick>
 800d694:	6138      	str	r0, [r7, #16]
 800d696:	e008      	b.n	800d6aa <HAL_RCC_OscConfig+0xd2>
 800d698:	f7fc fff4 	bl	800a684 <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	2b64      	cmp	r3, #100	; 0x64
 800d6a4:	d901      	bls.n	800d6aa <HAL_RCC_OscConfig+0xd2>
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e29e      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d6aa:	4b6a      	ldr	r3, [pc, #424]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0f0      	beq.n	800d698 <HAL_RCC_OscConfig+0xc0>
 800d6b6:	e014      	b.n	800d6e2 <HAL_RCC_OscConfig+0x10a>
 800d6b8:	f7fc ffe4 	bl	800a684 <HAL_GetTick>
 800d6bc:	6138      	str	r0, [r7, #16]
 800d6be:	e008      	b.n	800d6d2 <HAL_RCC_OscConfig+0xfa>
 800d6c0:	f7fc ffe0 	bl	800a684 <HAL_GetTick>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	2b64      	cmp	r3, #100	; 0x64
 800d6cc:	d901      	bls.n	800d6d2 <HAL_RCC_OscConfig+0xfa>
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e28a      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d6d2:	4b60      	ldr	r3, [pc, #384]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1f0      	bne.n	800d6c0 <HAL_RCC_OscConfig+0xe8>
 800d6de:	e000      	b.n	800d6e2 <HAL_RCC_OscConfig+0x10a>
 800d6e0:	bf00      	nop
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f003 0302 	and.w	r3, r3, #2
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d075      	beq.n	800d7da <HAL_RCC_OscConfig+0x202>
 800d6ee:	4b59      	ldr	r3, [pc, #356]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	f003 030c 	and.w	r3, r3, #12
 800d6f6:	61bb      	str	r3, [r7, #24]
 800d6f8:	4b56      	ldr	r3, [pc, #344]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f003 0303 	and.w	r3, r3, #3
 800d700:	617b      	str	r3, [r7, #20]
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2b0c      	cmp	r3, #12
 800d706:	d102      	bne.n	800d70e <HAL_RCC_OscConfig+0x136>
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d002      	beq.n	800d714 <HAL_RCC_OscConfig+0x13c>
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	2b04      	cmp	r3, #4
 800d712:	d11f      	bne.n	800d754 <HAL_RCC_OscConfig+0x17c>
 800d714:	4b4f      	ldr	r3, [pc, #316]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d005      	beq.n	800d72c <HAL_RCC_OscConfig+0x154>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <HAL_RCC_OscConfig+0x154>
 800d728:	2301      	movs	r3, #1
 800d72a:	e25d      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d72c:	4b49      	ldr	r3, [pc, #292]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	691b      	ldr	r3, [r3, #16]
 800d738:	061b      	lsls	r3, r3, #24
 800d73a:	4946      	ldr	r1, [pc, #280]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d73c:	4313      	orrs	r3, r2
 800d73e:	604b      	str	r3, [r1, #4]
 800d740:	4b45      	ldr	r3, [pc, #276]	; (800d858 <HAL_RCC_OscConfig+0x280>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4618      	mov	r0, r3
 800d746:	f7fc ff51 	bl	800a5ec <HAL_InitTick>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d043      	beq.n	800d7d8 <HAL_RCC_OscConfig+0x200>
 800d750:	2301      	movs	r3, #1
 800d752:	e249      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d023      	beq.n	800d7a4 <HAL_RCC_OscConfig+0x1cc>
 800d75c:	4b3d      	ldr	r3, [pc, #244]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a3c      	ldr	r2, [pc, #240]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	f7fc ff8c 	bl	800a684 <HAL_GetTick>
 800d76c:	6138      	str	r0, [r7, #16]
 800d76e:	e008      	b.n	800d782 <HAL_RCC_OscConfig+0x1aa>
 800d770:	f7fc ff88 	bl	800a684 <HAL_GetTick>
 800d774:	4602      	mov	r2, r0
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d901      	bls.n	800d782 <HAL_RCC_OscConfig+0x1aa>
 800d77e:	2303      	movs	r3, #3
 800d780:	e232      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d782:	4b34      	ldr	r3, [pc, #208]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d0f0      	beq.n	800d770 <HAL_RCC_OscConfig+0x198>
 800d78e:	4b31      	ldr	r3, [pc, #196]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	061b      	lsls	r3, r3, #24
 800d79c:	492d      	ldr	r1, [pc, #180]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	604b      	str	r3, [r1, #4]
 800d7a2:	e01a      	b.n	800d7da <HAL_RCC_OscConfig+0x202>
 800d7a4:	4b2b      	ldr	r3, [pc, #172]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a2a      	ldr	r2, [pc, #168]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d7aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	f7fc ff68 	bl	800a684 <HAL_GetTick>
 800d7b4:	6138      	str	r0, [r7, #16]
 800d7b6:	e008      	b.n	800d7ca <HAL_RCC_OscConfig+0x1f2>
 800d7b8:	f7fc ff64 	bl	800a684 <HAL_GetTick>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d901      	bls.n	800d7ca <HAL_RCC_OscConfig+0x1f2>
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	e20e      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d7ca:	4b22      	ldr	r3, [pc, #136]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1f0      	bne.n	800d7b8 <HAL_RCC_OscConfig+0x1e0>
 800d7d6:	e000      	b.n	800d7da <HAL_RCC_OscConfig+0x202>
 800d7d8:	bf00      	nop
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f003 0308 	and.w	r3, r3, #8
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d041      	beq.n	800d86a <HAL_RCC_OscConfig+0x292>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	695b      	ldr	r3, [r3, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d01c      	beq.n	800d828 <HAL_RCC_OscConfig+0x250>
 800d7ee:	4b19      	ldr	r3, [pc, #100]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d7f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7f4:	4a17      	ldr	r2, [pc, #92]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d7f6:	f043 0301 	orr.w	r3, r3, #1
 800d7fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d7fe:	f7fc ff41 	bl	800a684 <HAL_GetTick>
 800d802:	6138      	str	r0, [r7, #16]
 800d804:	e008      	b.n	800d818 <HAL_RCC_OscConfig+0x240>
 800d806:	f7fc ff3d 	bl	800a684 <HAL_GetTick>
 800d80a:	4602      	mov	r2, r0
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	2b02      	cmp	r3, #2
 800d812:	d901      	bls.n	800d818 <HAL_RCC_OscConfig+0x240>
 800d814:	2303      	movs	r3, #3
 800d816:	e1e7      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d818:	4b0e      	ldr	r3, [pc, #56]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d81a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d81e:	f003 0302 	and.w	r3, r3, #2
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0ef      	beq.n	800d806 <HAL_RCC_OscConfig+0x22e>
 800d826:	e020      	b.n	800d86a <HAL_RCC_OscConfig+0x292>
 800d828:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d82a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d82e:	4a09      	ldr	r2, [pc, #36]	; (800d854 <HAL_RCC_OscConfig+0x27c>)
 800d830:	f023 0301 	bic.w	r3, r3, #1
 800d834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d838:	f7fc ff24 	bl	800a684 <HAL_GetTick>
 800d83c:	6138      	str	r0, [r7, #16]
 800d83e:	e00d      	b.n	800d85c <HAL_RCC_OscConfig+0x284>
 800d840:	f7fc ff20 	bl	800a684 <HAL_GetTick>
 800d844:	4602      	mov	r2, r0
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	d906      	bls.n	800d85c <HAL_RCC_OscConfig+0x284>
 800d84e:	2303      	movs	r3, #3
 800d850:	e1ca      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d852:	bf00      	nop
 800d854:	40021000 	.word	0x40021000
 800d858:	2000007c 	.word	0x2000007c
 800d85c:	4b8c      	ldr	r3, [pc, #560]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d85e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d862:	f003 0302 	and.w	r3, r3, #2
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1ea      	bne.n	800d840 <HAL_RCC_OscConfig+0x268>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 0304 	and.w	r3, r3, #4
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 80a6 	beq.w	800d9c4 <HAL_RCC_OscConfig+0x3ec>
 800d878:	2300      	movs	r3, #0
 800d87a:	77fb      	strb	r3, [r7, #31]
 800d87c:	4b84      	ldr	r3, [pc, #528]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d101      	bne.n	800d88c <HAL_RCC_OscConfig+0x2b4>
 800d888:	2301      	movs	r3, #1
 800d88a:	e000      	b.n	800d88e <HAL_RCC_OscConfig+0x2b6>
 800d88c:	2300      	movs	r3, #0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00d      	beq.n	800d8ae <HAL_RCC_OscConfig+0x2d6>
 800d892:	4b7f      	ldr	r3, [pc, #508]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d896:	4a7e      	ldr	r2, [pc, #504]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d89c:	6593      	str	r3, [r2, #88]	; 0x58
 800d89e:	4b7c      	ldr	r3, [pc, #496]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	77fb      	strb	r3, [r7, #31]
 800d8ae:	4b79      	ldr	r3, [pc, #484]	; (800da94 <HAL_RCC_OscConfig+0x4bc>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d118      	bne.n	800d8ec <HAL_RCC_OscConfig+0x314>
 800d8ba:	4b76      	ldr	r3, [pc, #472]	; (800da94 <HAL_RCC_OscConfig+0x4bc>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a75      	ldr	r2, [pc, #468]	; (800da94 <HAL_RCC_OscConfig+0x4bc>)
 800d8c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	f7fc fedd 	bl	800a684 <HAL_GetTick>
 800d8ca:	6138      	str	r0, [r7, #16]
 800d8cc:	e008      	b.n	800d8e0 <HAL_RCC_OscConfig+0x308>
 800d8ce:	f7fc fed9 	bl	800a684 <HAL_GetTick>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d901      	bls.n	800d8e0 <HAL_RCC_OscConfig+0x308>
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e183      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d8e0:	4b6c      	ldr	r3, [pc, #432]	; (800da94 <HAL_RCC_OscConfig+0x4bc>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0f0      	beq.n	800d8ce <HAL_RCC_OscConfig+0x2f6>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d108      	bne.n	800d906 <HAL_RCC_OscConfig+0x32e>
 800d8f4:	4b66      	ldr	r3, [pc, #408]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8fa:	4a65      	ldr	r2, [pc, #404]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d8fc:	f043 0301 	orr.w	r3, r3, #1
 800d900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d904:	e024      	b.n	800d950 <HAL_RCC_OscConfig+0x378>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	2b05      	cmp	r3, #5
 800d90c:	d110      	bne.n	800d930 <HAL_RCC_OscConfig+0x358>
 800d90e:	4b60      	ldr	r3, [pc, #384]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d914:	4a5e      	ldr	r2, [pc, #376]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d916:	f043 0304 	orr.w	r3, r3, #4
 800d91a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d91e:	4b5c      	ldr	r3, [pc, #368]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d924:	4a5a      	ldr	r2, [pc, #360]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d92e:	e00f      	b.n	800d950 <HAL_RCC_OscConfig+0x378>
 800d930:	4b57      	ldr	r3, [pc, #348]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d936:	4a56      	ldr	r2, [pc, #344]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d938:	f023 0301 	bic.w	r3, r3, #1
 800d93c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d940:	4b53      	ldr	r3, [pc, #332]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d946:	4a52      	ldr	r2, [pc, #328]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d948:	f023 0304 	bic.w	r3, r3, #4
 800d94c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d016      	beq.n	800d986 <HAL_RCC_OscConfig+0x3ae>
 800d958:	f7fc fe94 	bl	800a684 <HAL_GetTick>
 800d95c:	6138      	str	r0, [r7, #16]
 800d95e:	e00a      	b.n	800d976 <HAL_RCC_OscConfig+0x39e>
 800d960:	f7fc fe90 	bl	800a684 <HAL_GetTick>
 800d964:	4602      	mov	r2, r0
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d96e:	4293      	cmp	r3, r2
 800d970:	d901      	bls.n	800d976 <HAL_RCC_OscConfig+0x39e>
 800d972:	2303      	movs	r3, #3
 800d974:	e138      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d976:	4b46      	ldr	r3, [pc, #280]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	2b00      	cmp	r3, #0
 800d982:	d0ed      	beq.n	800d960 <HAL_RCC_OscConfig+0x388>
 800d984:	e015      	b.n	800d9b2 <HAL_RCC_OscConfig+0x3da>
 800d986:	f7fc fe7d 	bl	800a684 <HAL_GetTick>
 800d98a:	6138      	str	r0, [r7, #16]
 800d98c:	e00a      	b.n	800d9a4 <HAL_RCC_OscConfig+0x3cc>
 800d98e:	f7fc fe79 	bl	800a684 <HAL_GetTick>
 800d992:	4602      	mov	r2, r0
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	f241 3288 	movw	r2, #5000	; 0x1388
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d901      	bls.n	800d9a4 <HAL_RCC_OscConfig+0x3cc>
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e121      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800d9a4:	4b3a      	ldr	r3, [pc, #232]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9aa:	f003 0302 	and.w	r3, r3, #2
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1ed      	bne.n	800d98e <HAL_RCC_OscConfig+0x3b6>
 800d9b2:	7ffb      	ldrb	r3, [r7, #31]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d105      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x3ec>
 800d9b8:	4b35      	ldr	r3, [pc, #212]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9bc:	4a34      	ldr	r2, [pc, #208]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d9be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9c2:	6593      	str	r3, [r2, #88]	; 0x58
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f003 0320 	and.w	r3, r3, #32
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d03c      	beq.n	800da4a <HAL_RCC_OscConfig+0x472>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01c      	beq.n	800da12 <HAL_RCC_OscConfig+0x43a>
 800d9d8:	4b2d      	ldr	r3, [pc, #180]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d9da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d9de:	4a2c      	ldr	r2, [pc, #176]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800d9e0:	f043 0301 	orr.w	r3, r3, #1
 800d9e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800d9e8:	f7fc fe4c 	bl	800a684 <HAL_GetTick>
 800d9ec:	6138      	str	r0, [r7, #16]
 800d9ee:	e008      	b.n	800da02 <HAL_RCC_OscConfig+0x42a>
 800d9f0:	f7fc fe48 	bl	800a684 <HAL_GetTick>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	1ad3      	subs	r3, r2, r3
 800d9fa:	2b02      	cmp	r3, #2
 800d9fc:	d901      	bls.n	800da02 <HAL_RCC_OscConfig+0x42a>
 800d9fe:	2303      	movs	r3, #3
 800da00:	e0f2      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800da02:	4b23      	ldr	r3, [pc, #140]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da08:	f003 0302 	and.w	r3, r3, #2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d0ef      	beq.n	800d9f0 <HAL_RCC_OscConfig+0x418>
 800da10:	e01b      	b.n	800da4a <HAL_RCC_OscConfig+0x472>
 800da12:	4b1f      	ldr	r3, [pc, #124]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da18:	4a1d      	ldr	r2, [pc, #116]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da1a:	f023 0301 	bic.w	r3, r3, #1
 800da1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800da22:	f7fc fe2f 	bl	800a684 <HAL_GetTick>
 800da26:	6138      	str	r0, [r7, #16]
 800da28:	e008      	b.n	800da3c <HAL_RCC_OscConfig+0x464>
 800da2a:	f7fc fe2b 	bl	800a684 <HAL_GetTick>
 800da2e:	4602      	mov	r2, r0
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	2b02      	cmp	r3, #2
 800da36:	d901      	bls.n	800da3c <HAL_RCC_OscConfig+0x464>
 800da38:	2303      	movs	r3, #3
 800da3a:	e0d5      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800da3c:	4b14      	ldr	r3, [pc, #80]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da42:	f003 0302 	and.w	r3, r3, #2
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ef      	bne.n	800da2a <HAL_RCC_OscConfig+0x452>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f000 80c9 	beq.w	800dbe6 <HAL_RCC_OscConfig+0x60e>
 800da54:	4b0e      	ldr	r3, [pc, #56]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	f003 030c 	and.w	r3, r3, #12
 800da5c:	2b0c      	cmp	r3, #12
 800da5e:	f000 8083 	beq.w	800db68 <HAL_RCC_OscConfig+0x590>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	2b02      	cmp	r3, #2
 800da68:	d15e      	bne.n	800db28 <HAL_RCC_OscConfig+0x550>
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a08      	ldr	r2, [pc, #32]	; (800da90 <HAL_RCC_OscConfig+0x4b8>)
 800da70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	f7fc fe05 	bl	800a684 <HAL_GetTick>
 800da7a:	6138      	str	r0, [r7, #16]
 800da7c:	e00c      	b.n	800da98 <HAL_RCC_OscConfig+0x4c0>
 800da7e:	f7fc fe01 	bl	800a684 <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d905      	bls.n	800da98 <HAL_RCC_OscConfig+0x4c0>
 800da8c:	2303      	movs	r3, #3
 800da8e:	e0ab      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800da90:	40021000 	.word	0x40021000
 800da94:	40007000 	.word	0x40007000
 800da98:	4b55      	ldr	r3, [pc, #340]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ec      	bne.n	800da7e <HAL_RCC_OscConfig+0x4a6>
 800daa4:	4b52      	ldr	r3, [pc, #328]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800daa6:	68da      	ldr	r2, [r3, #12]
 800daa8:	4b52      	ldr	r3, [pc, #328]	; (800dbf4 <HAL_RCC_OscConfig+0x61c>)
 800daaa:	4013      	ands	r3, r2
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	6a11      	ldr	r1, [r2, #32]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dab4:	3a01      	subs	r2, #1
 800dab6:	0112      	lsls	r2, r2, #4
 800dab8:	4311      	orrs	r1, r2
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dabe:	0212      	lsls	r2, r2, #8
 800dac0:	4311      	orrs	r1, r2
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dac6:	0852      	lsrs	r2, r2, #1
 800dac8:	3a01      	subs	r2, #1
 800daca:	0552      	lsls	r2, r2, #21
 800dacc:	4311      	orrs	r1, r2
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dad2:	0852      	lsrs	r2, r2, #1
 800dad4:	3a01      	subs	r2, #1
 800dad6:	0652      	lsls	r2, r2, #25
 800dad8:	4311      	orrs	r1, r2
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dade:	06d2      	lsls	r2, r2, #27
 800dae0:	430a      	orrs	r2, r1
 800dae2:	4943      	ldr	r1, [pc, #268]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800dae4:	4313      	orrs	r3, r2
 800dae6:	60cb      	str	r3, [r1, #12]
 800dae8:	4b41      	ldr	r3, [pc, #260]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a40      	ldr	r2, [pc, #256]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800daee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	4b3e      	ldr	r3, [pc, #248]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	4a3d      	ldr	r2, [pc, #244]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800dafa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dafe:	60d3      	str	r3, [r2, #12]
 800db00:	f7fc fdc0 	bl	800a684 <HAL_GetTick>
 800db04:	6138      	str	r0, [r7, #16]
 800db06:	e008      	b.n	800db1a <HAL_RCC_OscConfig+0x542>
 800db08:	f7fc fdbc 	bl	800a684 <HAL_GetTick>
 800db0c:	4602      	mov	r2, r0
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	2b02      	cmp	r3, #2
 800db14:	d901      	bls.n	800db1a <HAL_RCC_OscConfig+0x542>
 800db16:	2303      	movs	r3, #3
 800db18:	e066      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800db1a:	4b35      	ldr	r3, [pc, #212]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0f0      	beq.n	800db08 <HAL_RCC_OscConfig+0x530>
 800db26:	e05e      	b.n	800dbe6 <HAL_RCC_OscConfig+0x60e>
 800db28:	4b31      	ldr	r3, [pc, #196]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a30      	ldr	r2, [pc, #192]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db32:	6013      	str	r3, [r2, #0]
 800db34:	f7fc fda6 	bl	800a684 <HAL_GetTick>
 800db38:	6138      	str	r0, [r7, #16]
 800db3a:	e008      	b.n	800db4e <HAL_RCC_OscConfig+0x576>
 800db3c:	f7fc fda2 	bl	800a684 <HAL_GetTick>
 800db40:	4602      	mov	r2, r0
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	2b02      	cmp	r3, #2
 800db48:	d901      	bls.n	800db4e <HAL_RCC_OscConfig+0x576>
 800db4a:	2303      	movs	r3, #3
 800db4c:	e04c      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800db4e:	4b28      	ldr	r3, [pc, #160]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1f0      	bne.n	800db3c <HAL_RCC_OscConfig+0x564>
 800db5a:	4b25      	ldr	r3, [pc, #148]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db5c:	68da      	ldr	r2, [r3, #12]
 800db5e:	4924      	ldr	r1, [pc, #144]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db60:	4b25      	ldr	r3, [pc, #148]	; (800dbf8 <HAL_RCC_OscConfig+0x620>)
 800db62:	4013      	ands	r3, r2
 800db64:	60cb      	str	r3, [r1, #12]
 800db66:	e03e      	b.n	800dbe6 <HAL_RCC_OscConfig+0x60e>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	69db      	ldr	r3, [r3, #28]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d101      	bne.n	800db74 <HAL_RCC_OscConfig+0x59c>
 800db70:	2301      	movs	r3, #1
 800db72:	e039      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800db74:	4b1e      	ldr	r3, [pc, #120]	; (800dbf0 <HAL_RCC_OscConfig+0x618>)
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f003 0203 	and.w	r2, r3, #3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a1b      	ldr	r3, [r3, #32]
 800db84:	429a      	cmp	r2, r3
 800db86:	d12c      	bne.n	800dbe2 <HAL_RCC_OscConfig+0x60a>
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	3b01      	subs	r3, #1
 800db94:	011b      	lsls	r3, r3, #4
 800db96:	429a      	cmp	r2, r3
 800db98:	d123      	bne.n	800dbe2 <HAL_RCC_OscConfig+0x60a>
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba4:	021b      	lsls	r3, r3, #8
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d11b      	bne.n	800dbe2 <HAL_RCC_OscConfig+0x60a>
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	06db      	lsls	r3, r3, #27
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d113      	bne.n	800dbe2 <HAL_RCC_OscConfig+0x60a>
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc4:	085b      	lsrs	r3, r3, #1
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	055b      	lsls	r3, r3, #21
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d109      	bne.n	800dbe2 <HAL_RCC_OscConfig+0x60a>
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd8:	085b      	lsrs	r3, r3, #1
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	065b      	lsls	r3, r3, #25
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d001      	beq.n	800dbe6 <HAL_RCC_OscConfig+0x60e>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <HAL_RCC_OscConfig+0x610>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3720      	adds	r7, #32
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	40021000 	.word	0x40021000
 800dbf4:	019f800c 	.word	0x019f800c
 800dbf8:	feeefffc 	.word	0xfeeefffc

0800dbfc <HAL_RCC_ClockConfig>:
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
 800dc06:	2300      	movs	r3, #0
 800dc08:	617b      	str	r3, [r7, #20]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <HAL_RCC_ClockConfig+0x18>
 800dc10:	2301      	movs	r3, #1
 800dc12:	e11e      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800dc14:	4b91      	ldr	r3, [pc, #580]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 030f 	and.w	r3, r3, #15
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d910      	bls.n	800dc44 <HAL_RCC_ClockConfig+0x48>
 800dc22:	4b8e      	ldr	r3, [pc, #568]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f023 020f 	bic.w	r2, r3, #15
 800dc2a:	498c      	ldr	r1, [pc, #560]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	600b      	str	r3, [r1, #0]
 800dc32:	4b8a      	ldr	r3, [pc, #552]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 030f 	and.w	r3, r3, #15
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d001      	beq.n	800dc44 <HAL_RCC_ClockConfig+0x48>
 800dc40:	2301      	movs	r3, #1
 800dc42:	e106      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0301 	and.w	r3, r3, #1
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d073      	beq.n	800dd38 <HAL_RCC_ClockConfig+0x13c>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d129      	bne.n	800dcac <HAL_RCC_ClockConfig+0xb0>
 800dc58:	4b81      	ldr	r3, [pc, #516]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <HAL_RCC_ClockConfig+0x6c>
 800dc64:	2301      	movs	r3, #1
 800dc66:	e0f4      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800dc68:	f000 f99e 	bl	800dfa8 <RCC_GetSysClockFreqFromPLLSource>
 800dc6c:	6138      	str	r0, [r7, #16]
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	4a7c      	ldr	r2, [pc, #496]	; (800de64 <HAL_RCC_ClockConfig+0x268>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d93f      	bls.n	800dcf6 <HAL_RCC_ClockConfig+0xfa>
 800dc76:	4b7a      	ldr	r3, [pc, #488]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <HAL_RCC_ClockConfig+0x9a>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f003 0302 	and.w	r3, r3, #2
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d033      	beq.n	800dcf6 <HAL_RCC_ClockConfig+0xfa>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d12f      	bne.n	800dcf6 <HAL_RCC_ClockConfig+0xfa>
 800dc96:	4b72      	ldr	r3, [pc, #456]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc9e:	4a70      	ldr	r2, [pc, #448]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca4:	6093      	str	r3, [r2, #8]
 800dca6:	2380      	movs	r3, #128	; 0x80
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	e024      	b.n	800dcf6 <HAL_RCC_ClockConfig+0xfa>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d107      	bne.n	800dcc4 <HAL_RCC_ClockConfig+0xc8>
 800dcb4:	4b6a      	ldr	r3, [pc, #424]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d109      	bne.n	800dcd4 <HAL_RCC_ClockConfig+0xd8>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e0c6      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800dcc4:	4b66      	ldr	r3, [pc, #408]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <HAL_RCC_ClockConfig+0xd8>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e0be      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800dcd4:	f000 f8ce 	bl	800de74 <HAL_RCC_GetSysClockFreq>
 800dcd8:	6138      	str	r0, [r7, #16]
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	4a61      	ldr	r2, [pc, #388]	; (800de64 <HAL_RCC_ClockConfig+0x268>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d909      	bls.n	800dcf6 <HAL_RCC_ClockConfig+0xfa>
 800dce2:	4b5f      	ldr	r3, [pc, #380]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dcea:	4a5d      	ldr	r2, [pc, #372]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dcec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf0:	6093      	str	r3, [r2, #8]
 800dcf2:	2380      	movs	r3, #128	; 0x80
 800dcf4:	617b      	str	r3, [r7, #20]
 800dcf6:	4b5a      	ldr	r3, [pc, #360]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	f023 0203 	bic.w	r2, r3, #3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	4957      	ldr	r1, [pc, #348]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd04:	4313      	orrs	r3, r2
 800dd06:	608b      	str	r3, [r1, #8]
 800dd08:	f7fc fcbc 	bl	800a684 <HAL_GetTick>
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	e00a      	b.n	800dd26 <HAL_RCC_ClockConfig+0x12a>
 800dd10:	f7fc fcb8 	bl	800a684 <HAL_GetTick>
 800dd14:	4602      	mov	r2, r0
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d901      	bls.n	800dd26 <HAL_RCC_ClockConfig+0x12a>
 800dd22:	2303      	movs	r3, #3
 800dd24:	e095      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800dd26:	4b4e      	ldr	r3, [pc, #312]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	f003 020c 	and.w	r2, r3, #12
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d1eb      	bne.n	800dd10 <HAL_RCC_ClockConfig+0x114>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d023      	beq.n	800dd8c <HAL_RCC_ClockConfig+0x190>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0304 	and.w	r3, r3, #4
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d005      	beq.n	800dd5c <HAL_RCC_ClockConfig+0x160>
 800dd50:	4b43      	ldr	r3, [pc, #268]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	4a42      	ldr	r2, [pc, #264]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800dd5a:	6093      	str	r3, [r2, #8]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 0308 	and.w	r3, r3, #8
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d007      	beq.n	800dd78 <HAL_RCC_ClockConfig+0x17c>
 800dd68:	4b3d      	ldr	r3, [pc, #244]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd70:	4a3b      	ldr	r2, [pc, #236]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800dd76:	6093      	str	r3, [r2, #8]
 800dd78:	4b39      	ldr	r3, [pc, #228]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	4936      	ldr	r1, [pc, #216]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd86:	4313      	orrs	r3, r2
 800dd88:	608b      	str	r3, [r1, #8]
 800dd8a:	e008      	b.n	800dd9e <HAL_RCC_ClockConfig+0x1a2>
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	2b80      	cmp	r3, #128	; 0x80
 800dd90:	d105      	bne.n	800dd9e <HAL_RCC_ClockConfig+0x1a2>
 800dd92:	4b33      	ldr	r3, [pc, #204]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	4a32      	ldr	r2, [pc, #200]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800dd98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd9c:	6093      	str	r3, [r2, #8]
 800dd9e:	4b2f      	ldr	r3, [pc, #188]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 030f 	and.w	r3, r3, #15
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d21d      	bcs.n	800dde8 <HAL_RCC_ClockConfig+0x1ec>
 800ddac:	4b2b      	ldr	r3, [pc, #172]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f023 020f 	bic.w	r2, r3, #15
 800ddb4:	4929      	ldr	r1, [pc, #164]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	600b      	str	r3, [r1, #0]
 800ddbc:	f7fc fc62 	bl	800a684 <HAL_GetTick>
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	e00a      	b.n	800ddda <HAL_RCC_ClockConfig+0x1de>
 800ddc4:	f7fc fc5e 	bl	800a684 <HAL_GetTick>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d901      	bls.n	800ddda <HAL_RCC_ClockConfig+0x1de>
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	e03b      	b.n	800de52 <HAL_RCC_ClockConfig+0x256>
 800ddda:	4b20      	ldr	r3, [pc, #128]	; (800de5c <HAL_RCC_ClockConfig+0x260>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f003 030f 	and.w	r3, r3, #15
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d1ed      	bne.n	800ddc4 <HAL_RCC_ClockConfig+0x1c8>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d008      	beq.n	800de06 <HAL_RCC_ClockConfig+0x20a>
 800ddf4:	4b1a      	ldr	r3, [pc, #104]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	4917      	ldr	r1, [pc, #92]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800de02:	4313      	orrs	r3, r2
 800de04:	608b      	str	r3, [r1, #8]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d009      	beq.n	800de26 <HAL_RCC_ClockConfig+0x22a>
 800de12:	4b13      	ldr	r3, [pc, #76]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	490f      	ldr	r1, [pc, #60]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800de22:	4313      	orrs	r3, r2
 800de24:	608b      	str	r3, [r1, #8]
 800de26:	f000 f825 	bl	800de74 <HAL_RCC_GetSysClockFreq>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4b0c      	ldr	r3, [pc, #48]	; (800de60 <HAL_RCC_ClockConfig+0x264>)
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	091b      	lsrs	r3, r3, #4
 800de32:	f003 030f 	and.w	r3, r3, #15
 800de36:	490c      	ldr	r1, [pc, #48]	; (800de68 <HAL_RCC_ClockConfig+0x26c>)
 800de38:	5ccb      	ldrb	r3, [r1, r3]
 800de3a:	f003 031f 	and.w	r3, r3, #31
 800de3e:	fa22 f303 	lsr.w	r3, r2, r3
 800de42:	4a0a      	ldr	r2, [pc, #40]	; (800de6c <HAL_RCC_ClockConfig+0x270>)
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <HAL_RCC_ClockConfig+0x274>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fc fbce 	bl	800a5ec <HAL_InitTick>
 800de50:	4603      	mov	r3, r0
 800de52:	4618      	mov	r0, r3
 800de54:	3718      	adds	r7, #24
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	40022000 	.word	0x40022000
 800de60:	40021000 	.word	0x40021000
 800de64:	04c4b400 	.word	0x04c4b400
 800de68:	08018b18 	.word	0x08018b18
 800de6c:	20000078 	.word	0x20000078
 800de70:	2000007c 	.word	0x2000007c

0800de74 <HAL_RCC_GetSysClockFreq>:
 800de74:	b480      	push	{r7}
 800de76:	b087      	sub	sp, #28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	4b2c      	ldr	r3, [pc, #176]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	f003 030c 	and.w	r3, r3, #12
 800de82:	2b04      	cmp	r3, #4
 800de84:	d102      	bne.n	800de8c <HAL_RCC_GetSysClockFreq+0x18>
 800de86:	4b2a      	ldr	r3, [pc, #168]	; (800df30 <HAL_RCC_GetSysClockFreq+0xbc>)
 800de88:	613b      	str	r3, [r7, #16]
 800de8a:	e047      	b.n	800df1c <HAL_RCC_GetSysClockFreq+0xa8>
 800de8c:	4b27      	ldr	r3, [pc, #156]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f003 030c 	and.w	r3, r3, #12
 800de94:	2b08      	cmp	r3, #8
 800de96:	d102      	bne.n	800de9e <HAL_RCC_GetSysClockFreq+0x2a>
 800de98:	4b26      	ldr	r3, [pc, #152]	; (800df34 <HAL_RCC_GetSysClockFreq+0xc0>)
 800de9a:	613b      	str	r3, [r7, #16]
 800de9c:	e03e      	b.n	800df1c <HAL_RCC_GetSysClockFreq+0xa8>
 800de9e:	4b23      	ldr	r3, [pc, #140]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	f003 030c 	and.w	r3, r3, #12
 800dea6:	2b0c      	cmp	r3, #12
 800dea8:	d136      	bne.n	800df18 <HAL_RCC_GetSysClockFreq+0xa4>
 800deaa:	4b20      	ldr	r3, [pc, #128]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	f003 0303 	and.w	r3, r3, #3
 800deb2:	60fb      	str	r3, [r7, #12]
 800deb4:	4b1d      	ldr	r3, [pc, #116]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	091b      	lsrs	r3, r3, #4
 800deba:	f003 030f 	and.w	r3, r3, #15
 800debe:	3301      	adds	r3, #1
 800dec0:	60bb      	str	r3, [r7, #8]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d10c      	bne.n	800dee2 <HAL_RCC_GetSysClockFreq+0x6e>
 800dec8:	4a1a      	ldr	r2, [pc, #104]	; (800df34 <HAL_RCC_GetSysClockFreq+0xc0>)
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded0:	4a16      	ldr	r2, [pc, #88]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ded2:	68d2      	ldr	r2, [r2, #12]
 800ded4:	0a12      	lsrs	r2, r2, #8
 800ded6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800deda:	fb02 f303 	mul.w	r3, r2, r3
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	e00c      	b.n	800defc <HAL_RCC_GetSysClockFreq+0x88>
 800dee2:	4a13      	ldr	r2, [pc, #76]	; (800df30 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deea:	4a10      	ldr	r2, [pc, #64]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800deec:	68d2      	ldr	r2, [r2, #12]
 800deee:	0a12      	lsrs	r2, r2, #8
 800def0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800def4:	fb02 f303 	mul.w	r3, r2, r3
 800def8:	617b      	str	r3, [r7, #20]
 800defa:	bf00      	nop
 800defc:	4b0b      	ldr	r3, [pc, #44]	; (800df2c <HAL_RCC_GetSysClockFreq+0xb8>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	0e5b      	lsrs	r3, r3, #25
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	3301      	adds	r3, #1
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	607b      	str	r3, [r7, #4]
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	fbb2 f3f3 	udiv	r3, r2, r3
 800df14:	613b      	str	r3, [r7, #16]
 800df16:	e001      	b.n	800df1c <HAL_RCC_GetSysClockFreq+0xa8>
 800df18:	2300      	movs	r3, #0
 800df1a:	613b      	str	r3, [r7, #16]
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	4618      	mov	r0, r3
 800df20:	371c      	adds	r7, #28
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	40021000 	.word	0x40021000
 800df30:	00f42400 	.word	0x00f42400
 800df34:	007a1200 	.word	0x007a1200

0800df38 <HAL_RCC_GetHCLKFreq>:
 800df38:	b480      	push	{r7}
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	4b03      	ldr	r3, [pc, #12]	; (800df4c <HAL_RCC_GetHCLKFreq+0x14>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	20000078 	.word	0x20000078

0800df50 <HAL_RCC_GetPCLK1Freq>:
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
 800df54:	f7ff fff0 	bl	800df38 <HAL_RCC_GetHCLKFreq>
 800df58:	4602      	mov	r2, r0
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	0a1b      	lsrs	r3, r3, #8
 800df60:	f003 0307 	and.w	r3, r3, #7
 800df64:	4904      	ldr	r1, [pc, #16]	; (800df78 <HAL_RCC_GetPCLK1Freq+0x28>)
 800df66:	5ccb      	ldrb	r3, [r1, r3]
 800df68:	f003 031f 	and.w	r3, r3, #31
 800df6c:	fa22 f303 	lsr.w	r3, r2, r3
 800df70:	4618      	mov	r0, r3
 800df72:	bd80      	pop	{r7, pc}
 800df74:	40021000 	.word	0x40021000
 800df78:	08018b28 	.word	0x08018b28

0800df7c <HAL_RCC_GetPCLK2Freq>:
 800df7c:	b580      	push	{r7, lr}
 800df7e:	af00      	add	r7, sp, #0
 800df80:	f7ff ffda 	bl	800df38 <HAL_RCC_GetHCLKFreq>
 800df84:	4602      	mov	r2, r0
 800df86:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	0adb      	lsrs	r3, r3, #11
 800df8c:	f003 0307 	and.w	r3, r3, #7
 800df90:	4904      	ldr	r1, [pc, #16]	; (800dfa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800df92:	5ccb      	ldrb	r3, [r1, r3]
 800df94:	f003 031f 	and.w	r3, r3, #31
 800df98:	fa22 f303 	lsr.w	r3, r2, r3
 800df9c:	4618      	mov	r0, r3
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	40021000 	.word	0x40021000
 800dfa4:	08018b28 	.word	0x08018b28

0800dfa8 <RCC_GetSysClockFreqFromPLLSource>:
 800dfa8:	b480      	push	{r7}
 800dfaa:	b087      	sub	sp, #28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	4b1e      	ldr	r3, [pc, #120]	; (800e028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f003 0303 	and.w	r3, r3, #3
 800dfb6:	613b      	str	r3, [r7, #16]
 800dfb8:	4b1b      	ldr	r3, [pc, #108]	; (800e028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	091b      	lsrs	r3, r3, #4
 800dfbe:	f003 030f 	and.w	r3, r3, #15
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	2b03      	cmp	r3, #3
 800dfca:	d10c      	bne.n	800dfe6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
 800dfcc:	4a17      	ldr	r2, [pc, #92]	; (800e02c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd4:	4a14      	ldr	r2, [pc, #80]	; (800e028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dfd6:	68d2      	ldr	r2, [r2, #12]
 800dfd8:	0a12      	lsrs	r2, r2, #8
 800dfda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfde:	fb02 f303 	mul.w	r3, r2, r3
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	e00c      	b.n	800e000 <RCC_GetSysClockFreqFromPLLSource+0x58>
 800dfe6:	4a12      	ldr	r2, [pc, #72]	; (800e030 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfee:	4a0e      	ldr	r2, [pc, #56]	; (800e028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dff0:	68d2      	ldr	r2, [r2, #12]
 800dff2:	0a12      	lsrs	r2, r2, #8
 800dff4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dff8:	fb02 f303 	mul.w	r3, r2, r3
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	bf00      	nop
 800e000:	4b09      	ldr	r3, [pc, #36]	; (800e028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	0e5b      	lsrs	r3, r3, #25
 800e006:	f003 0303 	and.w	r3, r3, #3
 800e00a:	3301      	adds	r3, #1
 800e00c:	005b      	lsls	r3, r3, #1
 800e00e:	60bb      	str	r3, [r7, #8]
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	fbb2 f3f3 	udiv	r3, r2, r3
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4618      	mov	r0, r3
 800e01e:	371c      	adds	r7, #28
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	40021000 	.word	0x40021000
 800e02c:	007a1200 	.word	0x007a1200
 800e030:	00f42400 	.word	0x00f42400

0800e034 <HAL_RCCEx_PeriphCLKConfig>:
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	2300      	movs	r3, #0
 800e03e:	74fb      	strb	r3, [r7, #19]
 800e040:	2300      	movs	r3, #0
 800e042:	74bb      	strb	r3, [r7, #18]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f000 8098 	beq.w	800e182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800e052:	2300      	movs	r3, #0
 800e054:	747b      	strb	r3, [r7, #17]
 800e056:	4b43      	ldr	r3, [pc, #268]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e05a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10d      	bne.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800e062:	4b40      	ldr	r3, [pc, #256]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e066:	4a3f      	ldr	r2, [pc, #252]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e06c:	6593      	str	r3, [r2, #88]	; 0x58
 800e06e:	4b3d      	ldr	r3, [pc, #244]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e076:	60bb      	str	r3, [r7, #8]
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2301      	movs	r3, #1
 800e07c:	747b      	strb	r3, [r7, #17]
 800e07e:	4b3a      	ldr	r3, [pc, #232]	; (800e168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a39      	ldr	r2, [pc, #228]	; (800e168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e088:	6013      	str	r3, [r2, #0]
 800e08a:	f7fc fafb 	bl	800a684 <HAL_GetTick>
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	e009      	b.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800e092:	f7fc faf7 	bl	800a684 <HAL_GetTick>
 800e096:	4602      	mov	r2, r0
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	2b02      	cmp	r3, #2
 800e09e:	d902      	bls.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	74fb      	strb	r3, [r7, #19]
 800e0a4:	e005      	b.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800e0a6:	4b30      	ldr	r3, [pc, #192]	; (800e168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0ef      	beq.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800e0b2:	7cfb      	ldrb	r3, [r7, #19]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d159      	bne.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0x138>
 800e0b8:	4b2a      	ldr	r3, [pc, #168]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0c2:	617b      	str	r3, [r7, #20]
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d01e      	beq.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d019      	beq.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e0d4:	4b23      	ldr	r3, [pc, #140]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	4b20      	ldr	r3, [pc, #128]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0e6:	4a1f      	ldr	r2, [pc, #124]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e0f0:	4b1c      	ldr	r3, [pc, #112]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0f6:	4a1b      	ldr	r2, [pc, #108]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e100:	4a18      	ldr	r2, [pc, #96]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d016      	beq.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800e112:	f7fc fab7 	bl	800a684 <HAL_GetTick>
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	e00b      	b.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e11a:	f7fc fab3 	bl	800a684 <HAL_GetTick>
 800e11e:	4602      	mov	r2, r0
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	f241 3288 	movw	r2, #5000	; 0x1388
 800e128:	4293      	cmp	r3, r2
 800e12a:	d902      	bls.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e12c:	2303      	movs	r3, #3
 800e12e:	74fb      	strb	r3, [r7, #19]
 800e130:	e006      	b.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800e132:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e138:	f003 0302 	and.w	r3, r3, #2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d0ec      	beq.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800e140:	7cfb      	ldrb	r3, [r7, #19]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10b      	bne.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800e146:	4b07      	ldr	r3, [pc, #28]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e14c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e154:	4903      	ldr	r1, [pc, #12]	; (800e164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e156:	4313      	orrs	r3, r2
 800e158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e15c:	e008      	b.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e15e:	7cfb      	ldrb	r3, [r7, #19]
 800e160:	74bb      	strb	r3, [r7, #18]
 800e162:	e005      	b.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e164:	40021000 	.word	0x40021000
 800e168:	40007000 	.word	0x40007000
 800e16c:	7cfb      	ldrb	r3, [r7, #19]
 800e16e:	74bb      	strb	r3, [r7, #18]
 800e170:	7c7b      	ldrb	r3, [r7, #17]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d105      	bne.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800e176:	4ba7      	ldr	r3, [pc, #668]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e17a:	4aa6      	ldr	r2, [pc, #664]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e17c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e180:	6593      	str	r3, [r2, #88]	; 0x58
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00a      	beq.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800e18e:	4ba1      	ldr	r3, [pc, #644]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e194:	f023 0203 	bic.w	r2, r3, #3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	499d      	ldr	r1, [pc, #628]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f003 0302 	and.w	r3, r3, #2
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00a      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e1b0:	4b98      	ldr	r3, [pc, #608]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1b6:	f023 020c 	bic.w	r2, r3, #12
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	4995      	ldr	r1, [pc, #596]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f003 0304 	and.w	r3, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800e1d2:	4b90      	ldr	r3, [pc, #576]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	498c      	ldr	r1, [pc, #560]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f003 0308 	and.w	r3, r3, #8
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00a      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800e1f4:	4b87      	ldr	r3, [pc, #540]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	4984      	ldr	r1, [pc, #528]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e204:	4313      	orrs	r3, r2
 800e206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0310 	and.w	r3, r3, #16
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00a      	beq.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800e216:	4b7f      	ldr	r3, [pc, #508]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e21c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	497b      	ldr	r1, [pc, #492]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e226:	4313      	orrs	r3, r2
 800e228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f003 0320 	and.w	r3, r3, #32
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00a      	beq.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800e238:	4b76      	ldr	r3, [pc, #472]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e23e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	4973      	ldr	r1, [pc, #460]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e248:	4313      	orrs	r3, r2
 800e24a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00a      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800e25a:	4b6e      	ldr	r3, [pc, #440]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e260:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	496a      	ldr	r1, [pc, #424]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e26a:	4313      	orrs	r3, r2
 800e26c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00a      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e27c:	4b65      	ldr	r3, [pc, #404]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e282:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	4962      	ldr	r1, [pc, #392]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e28c:	4313      	orrs	r3, r2
 800e28e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00a      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800e29e:	4b5d      	ldr	r3, [pc, #372]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	4959      	ldr	r1, [pc, #356]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800e2c0:	4b54      	ldr	r3, [pc, #336]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e2c6:	f023 0203 	bic.w	r2, r3, #3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ce:	4951      	ldr	r1, [pc, #324]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800e2e2:	4b4c      	ldr	r3, [pc, #304]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f0:	4948      	ldr	r1, [pc, #288]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e300:	2b00      	cmp	r3, #0
 800e302:	d015      	beq.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800e304:	4b43      	ldr	r3, [pc, #268]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e30a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	4940      	ldr	r1, [pc, #256]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e314:	4313      	orrs	r3, r2
 800e316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e322:	d105      	bne.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800e324:	4b3b      	ldr	r3, [pc, #236]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	4a3a      	ldr	r2, [pc, #232]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e32a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e32e:	60d3      	str	r3, [r2, #12]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d015      	beq.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800e33c:	4b35      	ldr	r3, [pc, #212]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34a:	4932      	ldr	r1, [pc, #200]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e34c:	4313      	orrs	r3, r2
 800e34e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e35a:	d105      	bne.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800e35c:	4b2d      	ldr	r3, [pc, #180]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	4a2c      	ldr	r2, [pc, #176]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e366:	60d3      	str	r3, [r2, #12]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d015      	beq.n	800e3a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800e374:	4b27      	ldr	r3, [pc, #156]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e37a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e382:	4924      	ldr	r1, [pc, #144]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e384:	4313      	orrs	r3, r2
 800e386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e392:	d105      	bne.n	800e3a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800e394:	4b1f      	ldr	r3, [pc, #124]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	4a1e      	ldr	r2, [pc, #120]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e39a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e39e:	60d3      	str	r3, [r2, #12]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d015      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800e3ac:	4b19      	ldr	r3, [pc, #100]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ba:	4916      	ldr	r1, [pc, #88]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3ca:	d105      	bne.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800e3cc:	4b11      	ldr	r3, [pc, #68]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	4a10      	ldr	r2, [pc, #64]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3d6:	60d3      	str	r3, [r2, #12]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d019      	beq.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e3e4:	4b0b      	ldr	r3, [pc, #44]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f2:	4908      	ldr	r1, [pc, #32]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e402:	d109      	bne.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e404:	4b03      	ldr	r3, [pc, #12]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	4a02      	ldr	r2, [pc, #8]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e40a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e40e:	60d3      	str	r3, [r2, #12]
 800e410:	e002      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e412:	bf00      	nop
 800e414:	40021000 	.word	0x40021000
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d015      	beq.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e424:	4b29      	ldr	r3, [pc, #164]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e42a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e432:	4926      	ldr	r1, [pc, #152]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e434:	4313      	orrs	r3, r2
 800e436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e43e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e442:	d105      	bne.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e444:	4b21      	ldr	r3, [pc, #132]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	4a20      	ldr	r2, [pc, #128]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e44a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e44e:	60d3      	str	r3, [r2, #12]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d015      	beq.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800e45c:	4b1b      	ldr	r3, [pc, #108]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e462:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e46a:	4918      	ldr	r1, [pc, #96]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e46c:	4313      	orrs	r3, r2
 800e46e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e47a:	d105      	bne.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x454>
 800e47c:	4b13      	ldr	r3, [pc, #76]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	4a12      	ldr	r2, [pc, #72]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e486:	60d3      	str	r3, [r2, #12]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d015      	beq.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e494:	4b0d      	ldr	r3, [pc, #52]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e49a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4a2:	490a      	ldr	r1, [pc, #40]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4b2:	d105      	bne.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	4a04      	ldr	r2, [pc, #16]	; (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4be:	60d3      	str	r3, [r2, #12]
 800e4c0:	7cbb      	ldrb	r3, [r7, #18]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	40021000 	.word	0x40021000

0800e4d0 <HAL_SPI_Init>:
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <HAL_SPI_Init+0x12>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e09d      	b.n	800e61e <HAL_SPI_Init+0x14e>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d108      	bne.n	800e4fc <HAL_SPI_Init+0x2c>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4f2:	d009      	beq.n	800e508 <HAL_SPI_Init+0x38>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	61da      	str	r2, [r3, #28]
 800e4fa:	e005      	b.n	800e508 <HAL_SPI_Init+0x38>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	611a      	str	r2, [r3, #16]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	615a      	str	r2, [r3, #20]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	629a      	str	r2, [r3, #40]	; 0x28
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d106      	bne.n	800e528 <HAL_SPI_Init+0x58>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7fb f84c 	bl	80095c0 <HAL_SPI_MspInit>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2202      	movs	r2, #2
 800e52c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e53e:	601a      	str	r2, [r3, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e548:	d902      	bls.n	800e550 <HAL_SPI_Init+0x80>
 800e54a:	2300      	movs	r3, #0
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	e002      	b.n	800e556 <HAL_SPI_Init+0x86>
 800e550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e55e:	d007      	beq.n	800e570 <HAL_SPI_Init+0xa0>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e568:	d002      	beq.n	800e570 <HAL_SPI_Init+0xa0>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	629a      	str	r2, [r3, #40]	; 0x28
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e580:	431a      	orrs	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	f003 0302 	and.w	r3, r3, #2
 800e58a:	431a      	orrs	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	f003 0301 	and.w	r3, r3, #1
 800e594:	431a      	orrs	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	699b      	ldr	r3, [r3, #24]
 800e59a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e59e:	431a      	orrs	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5a8:	431a      	orrs	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a1b      	ldr	r3, [r3, #32]
 800e5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b2:	ea42 0103 	orr.w	r1, r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	601a      	str	r2, [r3, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	0c1b      	lsrs	r3, r3, #16
 800e5cc:	f003 0204 	and.w	r2, r3, #4
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	f003 0310 	and.w	r3, r3, #16
 800e5d8:	431a      	orrs	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5de:	f003 0308 	and.w	r3, r3, #8
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e5ec:	ea42 0103 	orr.w	r1, r2, r3
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	605a      	str	r2, [r3, #4]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69da      	ldr	r2, [r3, #28]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e60c:	61da      	str	r2, [r3, #28]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	661a      	str	r2, [r3, #96]	; 0x60
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e61c:	2300      	movs	r3, #0
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <HAL_SPI_Transmit>:
 800e626:	b580      	push	{r7, lr}
 800e628:	b088      	sub	sp, #32
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	603b      	str	r3, [r7, #0]
 800e632:	4613      	mov	r3, r2
 800e634:	80fb      	strh	r3, [r7, #6]
 800e636:	2300      	movs	r3, #0
 800e638:	77fb      	strb	r3, [r7, #31]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e640:	2b01      	cmp	r3, #1
 800e642:	d101      	bne.n	800e648 <HAL_SPI_Transmit+0x22>
 800e644:	2302      	movs	r3, #2
 800e646:	e15f      	b.n	800e908 <HAL_SPI_Transmit+0x2e2>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e650:	f7fc f818 	bl	800a684 <HAL_GetTick>
 800e654:	61b8      	str	r0, [r7, #24]
 800e656:	88fb      	ldrh	r3, [r7, #6]
 800e658:	82fb      	strh	r3, [r7, #22]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e660:	b2db      	uxtb	r3, r3
 800e662:	2b01      	cmp	r3, #1
 800e664:	d002      	beq.n	800e66c <HAL_SPI_Transmit+0x46>
 800e666:	2302      	movs	r3, #2
 800e668:	77fb      	strb	r3, [r7, #31]
 800e66a:	e148      	b.n	800e8fe <HAL_SPI_Transmit+0x2d8>
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d002      	beq.n	800e678 <HAL_SPI_Transmit+0x52>
 800e672:	88fb      	ldrh	r3, [r7, #6]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d102      	bne.n	800e67e <HAL_SPI_Transmit+0x58>
 800e678:	2301      	movs	r3, #1
 800e67a:	77fb      	strb	r3, [r7, #31]
 800e67c:	e13f      	b.n	800e8fe <HAL_SPI_Transmit+0x2d8>
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2203      	movs	r2, #3
 800e682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	661a      	str	r2, [r3, #96]	; 0x60
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	639a      	str	r2, [r3, #56]	; 0x38
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	88fa      	ldrh	r2, [r7, #6]
 800e696:	879a      	strh	r2, [r3, #60]	; 0x3c
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	88fa      	ldrh	r2, [r7, #6]
 800e69c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	641a      	str	r2, [r3, #64]	; 0x40
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	651a      	str	r2, [r3, #80]	; 0x50
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	64da      	str	r2, [r3, #76]	; 0x4c
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6c8:	d10f      	bne.n	800e6ea <HAL_SPI_Transmit+0xc4>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6d8:	601a      	str	r2, [r3, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f4:	2b40      	cmp	r3, #64	; 0x40
 800e6f6:	d007      	beq.n	800e708 <HAL_SPI_Transmit+0xe2>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e710:	d94f      	bls.n	800e7b2 <HAL_SPI_Transmit+0x18c>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <HAL_SPI_Transmit+0xfa>
 800e71a:	8afb      	ldrh	r3, [r7, #22]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d142      	bne.n	800e7a6 <HAL_SPI_Transmit+0x180>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e724:	881a      	ldrh	r2, [r3, #0]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	60da      	str	r2, [r3, #12]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e730:	1c9a      	adds	r2, r3, #2
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	639a      	str	r2, [r3, #56]	; 0x38
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	3b01      	subs	r3, #1
 800e73e:	b29a      	uxth	r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e744:	e02f      	b.n	800e7a6 <HAL_SPI_Transmit+0x180>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f003 0302 	and.w	r3, r3, #2
 800e750:	2b02      	cmp	r3, #2
 800e752:	d112      	bne.n	800e77a <HAL_SPI_Transmit+0x154>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e758:	881a      	ldrh	r2, [r3, #0]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60da      	str	r2, [r3, #12]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e764:	1c9a      	adds	r2, r3, #2
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	639a      	str	r2, [r3, #56]	; 0x38
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e76e:	b29b      	uxth	r3, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	b29a      	uxth	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e778:	e015      	b.n	800e7a6 <HAL_SPI_Transmit+0x180>
 800e77a:	f7fb ff83 	bl	800a684 <HAL_GetTick>
 800e77e:	4602      	mov	r2, r0
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d803      	bhi.n	800e792 <HAL_SPI_Transmit+0x16c>
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e790:	d102      	bne.n	800e798 <HAL_SPI_Transmit+0x172>
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <HAL_SPI_Transmit+0x180>
 800e798:	2303      	movs	r3, #3
 800e79a:	77fb      	strb	r3, [r7, #31]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e7a4:	e0ab      	b.n	800e8fe <HAL_SPI_Transmit+0x2d8>
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1ca      	bne.n	800e746 <HAL_SPI_Transmit+0x120>
 800e7b0:	e080      	b.n	800e8b4 <HAL_SPI_Transmit+0x28e>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <HAL_SPI_Transmit+0x19a>
 800e7ba:	8afb      	ldrh	r3, [r7, #22]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d174      	bne.n	800e8aa <HAL_SPI_Transmit+0x284>
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d912      	bls.n	800e7f0 <HAL_SPI_Transmit+0x1ca>
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ce:	881a      	ldrh	r2, [r3, #0]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	60da      	str	r2, [r3, #12]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7da:	1c9a      	adds	r2, r3, #2
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	639a      	str	r2, [r3, #56]	; 0x38
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	3b02      	subs	r3, #2
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e7ee:	e05c      	b.n	800e8aa <HAL_SPI_Transmit+0x284>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	330c      	adds	r3, #12
 800e7fa:	7812      	ldrb	r2, [r2, #0]
 800e7fc:	701a      	strb	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	639a      	str	r2, [r3, #56]	; 0x38
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	3b01      	subs	r3, #1
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e816:	e048      	b.n	800e8aa <HAL_SPI_Transmit+0x284>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	f003 0302 	and.w	r3, r3, #2
 800e822:	2b02      	cmp	r3, #2
 800e824:	d12b      	bne.n	800e87e <HAL_SPI_Transmit+0x258>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d912      	bls.n	800e856 <HAL_SPI_Transmit+0x230>
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e834:	881a      	ldrh	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	60da      	str	r2, [r3, #12]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e840:	1c9a      	adds	r2, r3, #2
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	639a      	str	r2, [r3, #56]	; 0x38
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	3b02      	subs	r3, #2
 800e84e:	b29a      	uxth	r2, r3
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e854:	e029      	b.n	800e8aa <HAL_SPI_Transmit+0x284>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	330c      	adds	r3, #12
 800e860:	7812      	ldrb	r2, [r2, #0]
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	639a      	str	r2, [r3, #56]	; 0x38
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e872:	b29b      	uxth	r3, r3
 800e874:	3b01      	subs	r3, #1
 800e876:	b29a      	uxth	r2, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e87c:	e015      	b.n	800e8aa <HAL_SPI_Transmit+0x284>
 800e87e:	f7fb ff01 	bl	800a684 <HAL_GetTick>
 800e882:	4602      	mov	r2, r0
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d803      	bhi.n	800e896 <HAL_SPI_Transmit+0x270>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e894:	d102      	bne.n	800e89c <HAL_SPI_Transmit+0x276>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d106      	bne.n	800e8aa <HAL_SPI_Transmit+0x284>
 800e89c:	2303      	movs	r3, #3
 800e89e:	77fb      	strb	r3, [r7, #31]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e8a8:	e029      	b.n	800e8fe <HAL_SPI_Transmit+0x2d8>
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1b1      	bne.n	800e818 <HAL_SPI_Transmit+0x1f2>
 800e8b4:	69ba      	ldr	r2, [r7, #24]
 800e8b6:	6839      	ldr	r1, [r7, #0]
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f000 fc7d 	bl	800f1b8 <SPI_EndRxTxTransaction>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <HAL_SPI_Transmit+0x2a4>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2220      	movs	r2, #32
 800e8c8:	661a      	str	r2, [r3, #96]	; 0x60
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d10a      	bne.n	800e8e8 <HAL_SPI_Transmit+0x2c2>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	613b      	str	r3, [r7, #16]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	613b      	str	r3, [r7, #16]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	613b      	str	r3, [r7, #16]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <HAL_SPI_Transmit+0x2d0>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	77fb      	strb	r3, [r7, #31]
 800e8f4:	e003      	b.n	800e8fe <HAL_SPI_Transmit+0x2d8>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e906:	7ffb      	ldrb	r3, [r7, #31]
 800e908:	4618      	mov	r0, r3
 800e90a:	3720      	adds	r7, #32
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <HAL_SPI_TransmitReceive>:
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	; 0x28
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
 800e91c:	807b      	strh	r3, [r7, #2]
 800e91e:	2301      	movs	r3, #1
 800e920:	627b      	str	r3, [r7, #36]	; 0x24
 800e922:	2300      	movs	r3, #0
 800e924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d101      	bne.n	800e936 <HAL_SPI_TransmitReceive+0x26>
 800e932:	2302      	movs	r3, #2
 800e934:	e20a      	b.n	800ed4c <HAL_SPI_TransmitReceive+0x43c>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e93e:	f7fb fea1 	bl	800a684 <HAL_GetTick>
 800e942:	61f8      	str	r0, [r7, #28]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e94a:	76fb      	strb	r3, [r7, #27]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	617b      	str	r3, [r7, #20]
 800e952:	887b      	ldrh	r3, [r7, #2]
 800e954:	827b      	strh	r3, [r7, #18]
 800e956:	887b      	ldrh	r3, [r7, #2]
 800e958:	823b      	strh	r3, [r7, #16]
 800e95a:	7efb      	ldrb	r3, [r7, #27]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d00e      	beq.n	800e97e <HAL_SPI_TransmitReceive+0x6e>
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e966:	d106      	bne.n	800e976 <HAL_SPI_TransmitReceive+0x66>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d102      	bne.n	800e976 <HAL_SPI_TransmitReceive+0x66>
 800e970:	7efb      	ldrb	r3, [r7, #27]
 800e972:	2b04      	cmp	r3, #4
 800e974:	d003      	beq.n	800e97e <HAL_SPI_TransmitReceive+0x6e>
 800e976:	2302      	movs	r3, #2
 800e978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e97c:	e1e0      	b.n	800ed40 <HAL_SPI_TransmitReceive+0x430>
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <HAL_SPI_TransmitReceive+0x80>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <HAL_SPI_TransmitReceive+0x80>
 800e98a:	887b      	ldrh	r3, [r7, #2]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d103      	bne.n	800e998 <HAL_SPI_TransmitReceive+0x88>
 800e990:	2301      	movs	r3, #1
 800e992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e996:	e1d3      	b.n	800ed40 <HAL_SPI_TransmitReceive+0x430>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b04      	cmp	r3, #4
 800e9a2:	d003      	beq.n	800e9ac <HAL_SPI_TransmitReceive+0x9c>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2205      	movs	r2, #5
 800e9a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	661a      	str	r2, [r3, #96]	; 0x60
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	641a      	str	r2, [r3, #64]	; 0x40
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	887a      	ldrh	r2, [r7, #2]
 800e9bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	887a      	ldrh	r2, [r7, #2]
 800e9c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	639a      	str	r2, [r3, #56]	; 0x38
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	887a      	ldrh	r2, [r7, #2]
 800e9d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	887a      	ldrh	r2, [r7, #2]
 800e9d8:	879a      	strh	r2, [r3, #60]	; 0x3c
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	64da      	str	r2, [r3, #76]	; 0x4c
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	651a      	str	r2, [r3, #80]	; 0x50
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e9ee:	d802      	bhi.n	800e9f6 <HAL_SPI_TransmitReceive+0xe6>
 800e9f0:	8a3b      	ldrh	r3, [r7, #16]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d908      	bls.n	800ea08 <HAL_SPI_TransmitReceive+0xf8>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ea04:	605a      	str	r2, [r3, #4]
 800ea06:	e007      	b.n	800ea18 <HAL_SPI_TransmitReceive+0x108>
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea16:	605a      	str	r2, [r3, #4]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea22:	2b40      	cmp	r3, #64	; 0x40
 800ea24:	d007      	beq.n	800ea36 <HAL_SPI_TransmitReceive+0x126>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea3e:	f240 8081 	bls.w	800eb44 <HAL_SPI_TransmitReceive+0x234>
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <HAL_SPI_TransmitReceive+0x140>
 800ea4a:	8a7b      	ldrh	r3, [r7, #18]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d16d      	bne.n	800eb2c <HAL_SPI_TransmitReceive+0x21c>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea54:	881a      	ldrh	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	60da      	str	r2, [r3, #12]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea60:	1c9a      	adds	r2, r3, #2
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	639a      	str	r2, [r3, #56]	; 0x38
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea74:	e05a      	b.n	800eb2c <HAL_SPI_TransmitReceive+0x21c>
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f003 0302 	and.w	r3, r3, #2
 800ea80:	2b02      	cmp	r3, #2
 800ea82:	d11b      	bne.n	800eabc <HAL_SPI_TransmitReceive+0x1ac>
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d016      	beq.n	800eabc <HAL_SPI_TransmitReceive+0x1ac>
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d113      	bne.n	800eabc <HAL_SPI_TransmitReceive+0x1ac>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea98:	881a      	ldrh	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	60da      	str	r2, [r3, #12]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa4:	1c9a      	adds	r2, r3, #2
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	639a      	str	r2, [r3, #56]	; 0x38
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eab8:	2300      	movs	r3, #0
 800eaba:	627b      	str	r3, [r7, #36]	; 0x24
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	f003 0301 	and.w	r3, r3, #1
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d11c      	bne.n	800eb04 <HAL_SPI_TransmitReceive+0x1f4>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d016      	beq.n	800eb04 <HAL_SPI_TransmitReceive+0x1f4>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68da      	ldr	r2, [r3, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae0:	b292      	uxth	r2, r2
 800eae2:	801a      	strh	r2, [r3, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae8:	1c9a      	adds	r2, r3, #2
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	641a      	str	r2, [r3, #64]	; 0x40
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800eb00:	2301      	movs	r3, #1
 800eb02:	627b      	str	r3, [r7, #36]	; 0x24
 800eb04:	f7fb fdbe 	bl	800a684 <HAL_GetTick>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d80b      	bhi.n	800eb2c <HAL_SPI_TransmitReceive+0x21c>
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1a:	d007      	beq.n	800eb2c <HAL_SPI_TransmitReceive+0x21c>
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2201      	movs	r2, #1
 800eb26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800eb2a:	e109      	b.n	800ed40 <HAL_SPI_TransmitReceive+0x430>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d19f      	bne.n	800ea76 <HAL_SPI_TransmitReceive+0x166>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d199      	bne.n	800ea76 <HAL_SPI_TransmitReceive+0x166>
 800eb42:	e0e3      	b.n	800ed0c <HAL_SPI_TransmitReceive+0x3fc>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d003      	beq.n	800eb54 <HAL_SPI_TransmitReceive+0x244>
 800eb4c:	8a7b      	ldrh	r3, [r7, #18]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	f040 80cf 	bne.w	800ecf2 <HAL_SPI_TransmitReceive+0x3e2>
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d912      	bls.n	800eb84 <HAL_SPI_TransmitReceive+0x274>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	881a      	ldrh	r2, [r3, #0]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	60da      	str	r2, [r3, #12]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	1c9a      	adds	r2, r3, #2
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	639a      	str	r2, [r3, #56]	; 0x38
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	3b02      	subs	r3, #2
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb82:	e0b6      	b.n	800ecf2 <HAL_SPI_TransmitReceive+0x3e2>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	330c      	adds	r3, #12
 800eb8e:	7812      	ldrb	r2, [r2, #0]
 800eb90:	701a      	strb	r2, [r3, #0]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb96:	1c5a      	adds	r2, r3, #1
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	639a      	str	r2, [r3, #56]	; 0x38
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	3b01      	subs	r3, #1
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebaa:	e0a2      	b.n	800ecf2 <HAL_SPI_TransmitReceive+0x3e2>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f003 0302 	and.w	r3, r3, #2
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	d134      	bne.n	800ec24 <HAL_SPI_TransmitReceive+0x314>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d02f      	beq.n	800ec24 <HAL_SPI_TransmitReceive+0x314>
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	d12c      	bne.n	800ec24 <HAL_SPI_TransmitReceive+0x314>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d912      	bls.n	800ebfa <HAL_SPI_TransmitReceive+0x2ea>
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd8:	881a      	ldrh	r2, [r3, #0]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	60da      	str	r2, [r3, #12]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe4:	1c9a      	adds	r2, r3, #2
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	639a      	str	r2, [r3, #56]	; 0x38
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	3b02      	subs	r3, #2
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebf8:	e012      	b.n	800ec20 <HAL_SPI_TransmitReceive+0x310>
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	330c      	adds	r3, #12
 800ec04:	7812      	ldrb	r2, [r2, #0]
 800ec06:	701a      	strb	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	639a      	str	r2, [r3, #56]	; 0x38
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec20:	2300      	movs	r3, #0
 800ec22:	627b      	str	r3, [r7, #36]	; 0x24
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d148      	bne.n	800ecc4 <HAL_SPI_TransmitReceive+0x3b4>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d042      	beq.n	800ecc4 <HAL_SPI_TransmitReceive+0x3b4>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d923      	bls.n	800ec92 <HAL_SPI_TransmitReceive+0x382>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68da      	ldr	r2, [r3, #12]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec54:	b292      	uxth	r2, r2
 800ec56:	801a      	strh	r2, [r3, #0]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5c:	1c9a      	adds	r2, r3, #2
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	641a      	str	r2, [r3, #64]	; 0x40
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	3b02      	subs	r3, #2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d81f      	bhi.n	800ecc0 <HAL_SPI_TransmitReceive+0x3b0>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ec8e:	605a      	str	r2, [r3, #4]
 800ec90:	e016      	b.n	800ecc0 <HAL_SPI_TransmitReceive+0x3b0>
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f103 020c 	add.w	r2, r3, #12
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec9e:	7812      	ldrb	r2, [r2, #0]
 800eca0:	b2d2      	uxtb	r2, r2
 800eca2:	701a      	strb	r2, [r3, #0]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca8:	1c5a      	adds	r2, r3, #1
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	641a      	str	r2, [r3, #64]	; 0x40
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc4:	f7fb fcde 	bl	800a684 <HAL_GetTick>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d803      	bhi.n	800ecdc <HAL_SPI_TransmitReceive+0x3cc>
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecda:	d102      	bne.n	800ece2 <HAL_SPI_TransmitReceive+0x3d2>
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d107      	bne.n	800ecf2 <HAL_SPI_TransmitReceive+0x3e2>
 800ece2:	2303      	movs	r3, #3
 800ece4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800ecf0:	e026      	b.n	800ed40 <HAL_SPI_TransmitReceive+0x430>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f47f af57 	bne.w	800ebac <HAL_SPI_TransmitReceive+0x29c>
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	f47f af50 	bne.w	800ebac <HAL_SPI_TransmitReceive+0x29c>
 800ed0c:	69fa      	ldr	r2, [r7, #28]
 800ed0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f000 fa51 	bl	800f1b8 <SPI_EndRxTxTransaction>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d005      	beq.n	800ed28 <HAL_SPI_TransmitReceive+0x418>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2220      	movs	r2, #32
 800ed26:	661a      	str	r2, [r3, #96]	; 0x60
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d003      	beq.n	800ed38 <HAL_SPI_TransmitReceive+0x428>
 800ed30:	2301      	movs	r3, #1
 800ed32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed36:	e003      	b.n	800ed40 <HAL_SPI_TransmitReceive+0x430>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800ed48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3728      	adds	r7, #40	; 0x28
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <HAL_SPI_IRQHandler>:
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b088      	sub	sp, #32
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	61fb      	str	r3, [r7, #28]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	61bb      	str	r3, [r7, #24]
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10e      	bne.n	800ed94 <HAL_SPI_IRQHandler+0x40>
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <HAL_SPI_IRQHandler+0x40>
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d004      	beq.n	800ed94 <HAL_SPI_IRQHandler+0x40>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	4798      	blx	r3
 800ed92:	e0ce      	b.n	800ef32 <HAL_SPI_IRQHandler+0x1de>
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	f003 0302 	and.w	r3, r3, #2
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d009      	beq.n	800edb2 <HAL_SPI_IRQHandler+0x5e>
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d004      	beq.n	800edb2 <HAL_SPI_IRQHandler+0x5e>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	4798      	blx	r3
 800edb0:	e0bf      	b.n	800ef32 <HAL_SPI_IRQHandler+0x1de>
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	f003 0320 	and.w	r3, r3, #32
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d10a      	bne.n	800edd2 <HAL_SPI_IRQHandler+0x7e>
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d105      	bne.n	800edd2 <HAL_SPI_IRQHandler+0x7e>
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 80b0 	beq.w	800ef32 <HAL_SPI_IRQHandler+0x1de>
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	f003 0320 	and.w	r3, r3, #32
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 80aa 	beq.w	800ef32 <HAL_SPI_IRQHandler+0x1de>
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d023      	beq.n	800ee30 <HAL_SPI_IRQHandler+0xdc>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d011      	beq.n	800ee18 <HAL_SPI_IRQHandler+0xc4>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edf8:	f043 0204 	orr.w	r2, r3, #4
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	661a      	str	r2, [r3, #96]	; 0x60
 800ee00:	2300      	movs	r3, #0
 800ee02:	617b      	str	r3, [r7, #20]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	e00b      	b.n	800ee30 <HAL_SPI_IRQHandler+0xdc>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	613b      	str	r3, [r7, #16]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	613b      	str	r3, [r7, #16]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	613b      	str	r3, [r7, #16]
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	e080      	b.n	800ef32 <HAL_SPI_IRQHandler+0x1de>
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	f003 0320 	and.w	r3, r3, #32
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d014      	beq.n	800ee64 <HAL_SPI_IRQHandler+0x110>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee3e:	f043 0201 	orr.w	r2, r3, #1
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	661a      	str	r2, [r3, #96]	; 0x60
 800ee46:	2300      	movs	r3, #0
 800ee48:	60fb      	str	r3, [r7, #12]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	60fb      	str	r3, [r7, #12]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00c      	beq.n	800ee88 <HAL_SPI_IRQHandler+0x134>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee72:	f043 0208 	orr.w	r2, r3, #8
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	661a      	str	r2, [r3, #96]	; 0x60
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	60bb      	str	r3, [r7, #8]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	60bb      	str	r3, [r7, #8]
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d04f      	beq.n	800ef30 <HAL_SPI_IRQHandler+0x1dc>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ee9e:	605a      	str	r2, [r3, #4]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	f003 0302 	and.w	r3, r3, #2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d104      	bne.n	800eebc <HAL_SPI_IRQHandler+0x168>
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d034      	beq.n	800ef26 <HAL_SPI_IRQHandler+0x1d2>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f022 0203 	bic.w	r2, r2, #3
 800eeca:	605a      	str	r2, [r3, #4]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d011      	beq.n	800eef8 <HAL_SPI_IRQHandler+0x1a4>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eed8:	4a17      	ldr	r2, [pc, #92]	; (800ef38 <HAL_SPI_IRQHandler+0x1e4>)
 800eeda:	639a      	str	r2, [r3, #56]	; 0x38
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fb fe0e 	bl	800ab02 <HAL_DMA_Abort_IT>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d005      	beq.n	800eef8 <HAL_SPI_IRQHandler+0x1a4>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	661a      	str	r2, [r3, #96]	; 0x60
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d016      	beq.n	800ef2e <HAL_SPI_IRQHandler+0x1da>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef04:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <HAL_SPI_IRQHandler+0x1e4>)
 800ef06:	639a      	str	r2, [r3, #56]	; 0x38
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fb fdf8 	bl	800ab02 <HAL_DMA_Abort_IT>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00a      	beq.n	800ef2e <HAL_SPI_IRQHandler+0x1da>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	661a      	str	r2, [r3, #96]	; 0x60
 800ef24:	e003      	b.n	800ef2e <HAL_SPI_IRQHandler+0x1da>
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f808 	bl	800ef3c <HAL_SPI_ErrorCallback>
 800ef2c:	e000      	b.n	800ef30 <HAL_SPI_IRQHandler+0x1dc>
 800ef2e:	bf00      	nop
 800ef30:	bf00      	nop
 800ef32:	3720      	adds	r7, #32
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	0800ef51 	.word	0x0800ef51

0800ef3c <HAL_SPI_ErrorCallback>:
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <SPI_DMAAbortOnError>:
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7ff ffe5 	bl	800ef3c <HAL_SPI_ErrorCallback>
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
	...

0800ef7c <SPI_WaitFlagStateUntilTimeout>:
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b088      	sub	sp, #32
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	603b      	str	r3, [r7, #0]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	71fb      	strb	r3, [r7, #7]
 800ef8c:	f7fb fb7a 	bl	800a684 <HAL_GetTick>
 800ef90:	4602      	mov	r2, r0
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	1a9b      	subs	r3, r3, r2
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	4413      	add	r3, r2
 800ef9a:	61fb      	str	r3, [r7, #28]
 800ef9c:	f7fb fb72 	bl	800a684 <HAL_GetTick>
 800efa0:	61b8      	str	r0, [r7, #24]
 800efa2:	4b39      	ldr	r3, [pc, #228]	; (800f088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	015b      	lsls	r3, r3, #5
 800efa8:	0d1b      	lsrs	r3, r3, #20
 800efaa:	69fa      	ldr	r2, [r7, #28]
 800efac:	fb02 f303 	mul.w	r3, r2, r3
 800efb0:	617b      	str	r3, [r7, #20]
 800efb2:	e054      	b.n	800f05e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efba:	d050      	beq.n	800f05e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800efbc:	f7fb fb62 	bl	800a684 <HAL_GetTick>
 800efc0:	4602      	mov	r2, r0
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	69fa      	ldr	r2, [r7, #28]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d902      	bls.n	800efd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d13d      	bne.n	800f04e <SPI_WaitFlagStateUntilTimeout+0xd2>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800efe0:	605a      	str	r2, [r3, #4]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efea:	d111      	bne.n	800f010 <SPI_WaitFlagStateUntilTimeout+0x94>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eff4:	d004      	beq.n	800f000 <SPI_WaitFlagStateUntilTimeout+0x84>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	689b      	ldr	r3, [r3, #8]
 800effa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800effe:	d107      	bne.n	800f010 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f018:	d10f      	bne.n	800f03a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f04a:	2303      	movs	r3, #3
 800f04c:	e017      	b.n	800f07e <SPI_WaitFlagStateUntilTimeout+0x102>
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800f054:	2300      	movs	r3, #0
 800f056:	61fb      	str	r3, [r7, #28]
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	3b01      	subs	r3, #1
 800f05c:	617b      	str	r3, [r7, #20]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689a      	ldr	r2, [r3, #8]
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	4013      	ands	r3, r2
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	bf0c      	ite	eq
 800f06e:	2301      	moveq	r3, #1
 800f070:	2300      	movne	r3, #0
 800f072:	b2db      	uxtb	r3, r3
 800f074:	461a      	mov	r2, r3
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d19b      	bne.n	800efb4 <SPI_WaitFlagStateUntilTimeout+0x38>
 800f07c:	2300      	movs	r3, #0
 800f07e:	4618      	mov	r0, r3
 800f080:	3720      	adds	r7, #32
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	20000078 	.word	0x20000078

0800f08c <SPI_WaitFifoStateUntilTimeout>:
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08a      	sub	sp, #40	; 0x28
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
 800f098:	603b      	str	r3, [r7, #0]
 800f09a:	2300      	movs	r3, #0
 800f09c:	75fb      	strb	r3, [r7, #23]
 800f09e:	f7fb faf1 	bl	800a684 <HAL_GetTick>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ae:	f7fb fae9 	bl	800a684 <HAL_GetTick>
 800f0b2:	6238      	str	r0, [r7, #32]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	330c      	adds	r3, #12
 800f0ba:	61fb      	str	r3, [r7, #28]
 800f0bc:	4b3d      	ldr	r3, [pc, #244]	; (800f1b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	00da      	lsls	r2, r3, #3
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	0d1b      	lsrs	r3, r3, #20
 800f0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ce:	fb02 f303 	mul.w	r3, r2, r3
 800f0d2:	61bb      	str	r3, [r7, #24]
 800f0d4:	e060      	b.n	800f198 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f0dc:	d107      	bne.n	800f0ee <SPI_WaitFifoStateUntilTimeout+0x62>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d104      	bne.n	800f0ee <SPI_WaitFifoStateUntilTimeout+0x62>
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	75fb      	strb	r3, [r7, #23]
 800f0ec:	7dfb      	ldrb	r3, [r7, #23]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f4:	d050      	beq.n	800f198 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800f0f6:	f7fb fac5 	bl	800a684 <HAL_GetTick>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f102:	429a      	cmp	r2, r3
 800f104:	d902      	bls.n	800f10c <SPI_WaitFifoStateUntilTimeout+0x80>
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d13d      	bne.n	800f188 <SPI_WaitFifoStateUntilTimeout+0xfc>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f11a:	605a      	str	r2, [r3, #4]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f124:	d111      	bne.n	800f14a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f12e:	d004      	beq.n	800f13a <SPI_WaitFifoStateUntilTimeout+0xae>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f138:	d107      	bne.n	800f14a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f148:	601a      	str	r2, [r3, #0]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f14e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f152:	d10f      	bne.n	800f174 <SPI_WaitFifoStateUntilTimeout+0xe8>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f162:	601a      	str	r2, [r3, #0]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f172:	601a      	str	r2, [r3, #0]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f184:	2303      	movs	r3, #3
 800f186:	e010      	b.n	800f1aa <SPI_WaitFifoStateUntilTimeout+0x11e>
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <SPI_WaitFifoStateUntilTimeout+0x106>
 800f18e:	2300      	movs	r3, #0
 800f190:	627b      	str	r3, [r7, #36]	; 0x24
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	3b01      	subs	r3, #1
 800f196:	61bb      	str	r3, [r7, #24]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	689a      	ldr	r2, [r3, #8]
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d196      	bne.n	800f0d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3728      	adds	r7, #40	; 0x28
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20000078 	.word	0x20000078

0800f1b8 <SPI_EndRxTxTransaction>:
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af02      	add	r7, sp, #8
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f7ff ff5b 	bl	800f08c <SPI_WaitFifoStateUntilTimeout>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d007      	beq.n	800f1ec <SPI_EndRxTxTransaction+0x34>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1e0:	f043 0220 	orr.w	r2, r3, #32
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	661a      	str	r2, [r3, #96]	; 0x60
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	e027      	b.n	800f23c <SPI_EndRxTxTransaction+0x84>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2180      	movs	r1, #128	; 0x80
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f7ff fec0 	bl	800ef7c <SPI_WaitFlagStateUntilTimeout>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <SPI_EndRxTxTransaction+0x5a>
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f206:	f043 0220 	orr.w	r2, r3, #32
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	661a      	str	r2, [r3, #96]	; 0x60
 800f20e:	2303      	movs	r3, #3
 800f210:	e014      	b.n	800f23c <SPI_EndRxTxTransaction+0x84>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	2200      	movs	r2, #0
 800f21a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f7ff ff34 	bl	800f08c <SPI_WaitFifoStateUntilTimeout>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d007      	beq.n	800f23a <SPI_EndRxTxTransaction+0x82>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f22e:	f043 0220 	orr.w	r2, r3, #32
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	661a      	str	r2, [r3, #96]	; 0x60
 800f236:	2303      	movs	r3, #3
 800f238:	e000      	b.n	800f23c <SPI_EndRxTxTransaction+0x84>
 800f23a:	2300      	movs	r3, #0
 800f23c:	4618      	mov	r0, r3
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <HAL_TIM_Encoder_Init>:
 800f244:	b580      	push	{r7, lr}
 800f246:	b086      	sub	sp, #24
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d101      	bne.n	800f258 <HAL_TIM_Encoder_Init+0x14>
 800f254:	2301      	movs	r3, #1
 800f256:	e097      	b.n	800f388 <HAL_TIM_Encoder_Init+0x144>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d106      	bne.n	800f272 <HAL_TIM_Encoder_Init+0x2e>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7fa fbe1 	bl	8009a34 <HAL_TIM_Encoder_MspInit>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2202      	movs	r2, #2
 800f276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	6812      	ldr	r2, [r2, #0]
 800f284:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800f288:	f023 0307 	bic.w	r3, r3, #7
 800f28c:	6093      	str	r3, [r2, #8]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	3304      	adds	r3, #4
 800f296:	4619      	mov	r1, r3
 800f298:	4610      	mov	r0, r2
 800f29a:	f000 f879 	bl	800f390 <TIM_Base_SetConfig>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	617b      	str	r3, [r7, #20]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	613b      	str	r3, [r7, #16]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6a1b      	ldr	r3, [r3, #32]
 800f2b4:	60fb      	str	r3, [r7, #12]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	617b      	str	r3, [r7, #20]
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2c6:	f023 0303 	bic.w	r3, r3, #3
 800f2ca:	613b      	str	r3, [r7, #16]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	689a      	ldr	r2, [r3, #8]
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	021b      	lsls	r3, r3, #8
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	613b      	str	r3, [r7, #16]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f2e4:	f023 030c 	bic.w	r3, r3, #12
 800f2e8:	613b      	str	r3, [r7, #16]
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f2f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f2f4:	613b      	str	r3, [r7, #16]
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	68da      	ldr	r2, [r3, #12]
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	69db      	ldr	r3, [r3, #28]
 800f2fe:	021b      	lsls	r3, r3, #8
 800f300:	4313      	orrs	r3, r2
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	4313      	orrs	r3, r2
 800f306:	613b      	str	r3, [r7, #16]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	011a      	lsls	r2, r3, #4
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	6a1b      	ldr	r3, [r3, #32]
 800f312:	031b      	lsls	r3, r3, #12
 800f314:	4313      	orrs	r3, r2
 800f316:	693a      	ldr	r2, [r7, #16]
 800f318:	4313      	orrs	r3, r2
 800f31a:	613b      	str	r3, [r7, #16]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f32a:	60fb      	str	r3, [r7, #12]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685a      	ldr	r2, [r3, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	695b      	ldr	r3, [r3, #20]
 800f334:	011b      	lsls	r3, r3, #4
 800f336:	4313      	orrs	r3, r2
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	4313      	orrs	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	609a      	str	r2, [r3, #8]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	619a      	str	r2, [r3, #24]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	621a      	str	r2, [r3, #32]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2201      	movs	r2, #1
 800f35a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2201      	movs	r2, #1
 800f37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2201      	movs	r2, #1
 800f382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f386:	2300      	movs	r3, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	3718      	adds	r7, #24
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <TIM_Base_SetConfig>:
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	60fb      	str	r3, [r7, #12]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a4c      	ldr	r2, [pc, #304]	; (800f4d4 <TIM_Base_SetConfig+0x144>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d017      	beq.n	800f3d8 <TIM_Base_SetConfig+0x48>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3ae:	d013      	beq.n	800f3d8 <TIM_Base_SetConfig+0x48>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a49      	ldr	r2, [pc, #292]	; (800f4d8 <TIM_Base_SetConfig+0x148>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d00f      	beq.n	800f3d8 <TIM_Base_SetConfig+0x48>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4a48      	ldr	r2, [pc, #288]	; (800f4dc <TIM_Base_SetConfig+0x14c>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d00b      	beq.n	800f3d8 <TIM_Base_SetConfig+0x48>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a47      	ldr	r2, [pc, #284]	; (800f4e0 <TIM_Base_SetConfig+0x150>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d007      	beq.n	800f3d8 <TIM_Base_SetConfig+0x48>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a46      	ldr	r2, [pc, #280]	; (800f4e4 <TIM_Base_SetConfig+0x154>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d003      	beq.n	800f3d8 <TIM_Base_SetConfig+0x48>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a45      	ldr	r2, [pc, #276]	; (800f4e8 <TIM_Base_SetConfig+0x158>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d108      	bne.n	800f3ea <TIM_Base_SetConfig+0x5a>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	60fb      	str	r3, [r7, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4a39      	ldr	r2, [pc, #228]	; (800f4d4 <TIM_Base_SetConfig+0x144>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d023      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3f8:	d01f      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a36      	ldr	r2, [pc, #216]	; (800f4d8 <TIM_Base_SetConfig+0x148>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d01b      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a35      	ldr	r2, [pc, #212]	; (800f4dc <TIM_Base_SetConfig+0x14c>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d017      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4a34      	ldr	r2, [pc, #208]	; (800f4e0 <TIM_Base_SetConfig+0x150>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d013      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4a33      	ldr	r2, [pc, #204]	; (800f4e4 <TIM_Base_SetConfig+0x154>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d00f      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4a33      	ldr	r2, [pc, #204]	; (800f4ec <TIM_Base_SetConfig+0x15c>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d00b      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4a32      	ldr	r2, [pc, #200]	; (800f4f0 <TIM_Base_SetConfig+0x160>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d007      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4a31      	ldr	r2, [pc, #196]	; (800f4f4 <TIM_Base_SetConfig+0x164>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d003      	beq.n	800f43a <TIM_Base_SetConfig+0xaa>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	4a2c      	ldr	r2, [pc, #176]	; (800f4e8 <TIM_Base_SetConfig+0x158>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d108      	bne.n	800f44c <TIM_Base_SetConfig+0xbc>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	4313      	orrs	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	4313      	orrs	r3, r2
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	601a      	str	r2, [r3, #0]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	689a      	ldr	r2, [r3, #8]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	62da      	str	r2, [r3, #44]	; 0x2c
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	629a      	str	r2, [r3, #40]	; 0x28
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4a18      	ldr	r2, [pc, #96]	; (800f4d4 <TIM_Base_SetConfig+0x144>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d013      	beq.n	800f4a0 <TIM_Base_SetConfig+0x110>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a1a      	ldr	r2, [pc, #104]	; (800f4e4 <TIM_Base_SetConfig+0x154>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d00f      	beq.n	800f4a0 <TIM_Base_SetConfig+0x110>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a1a      	ldr	r2, [pc, #104]	; (800f4ec <TIM_Base_SetConfig+0x15c>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d00b      	beq.n	800f4a0 <TIM_Base_SetConfig+0x110>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a19      	ldr	r2, [pc, #100]	; (800f4f0 <TIM_Base_SetConfig+0x160>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d007      	beq.n	800f4a0 <TIM_Base_SetConfig+0x110>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a18      	ldr	r2, [pc, #96]	; (800f4f4 <TIM_Base_SetConfig+0x164>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d003      	beq.n	800f4a0 <TIM_Base_SetConfig+0x110>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a13      	ldr	r2, [pc, #76]	; (800f4e8 <TIM_Base_SetConfig+0x158>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d103      	bne.n	800f4a8 <TIM_Base_SetConfig+0x118>
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	691a      	ldr	r2, [r3, #16]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	631a      	str	r2, [r3, #48]	; 0x30
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	615a      	str	r2, [r3, #20]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d105      	bne.n	800f4c6 <TIM_Base_SetConfig+0x136>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	f023 0201 	bic.w	r2, r3, #1
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	611a      	str	r2, [r3, #16]
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	40012c00 	.word	0x40012c00
 800f4d8:	40000400 	.word	0x40000400
 800f4dc:	40000800 	.word	0x40000800
 800f4e0:	40000c00 	.word	0x40000c00
 800f4e4:	40013400 	.word	0x40013400
 800f4e8:	40015000 	.word	0x40015000
 800f4ec:	40014000 	.word	0x40014000
 800f4f0:	40014400 	.word	0x40014400
 800f4f4:	40014800 	.word	0x40014800

0800f4f8 <HAL_TIMEx_MasterConfigSynchronization>:
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d101      	bne.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f50c:	2302      	movs	r3, #2
 800f50e:	e074      	b.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2202      	movs	r2, #2
 800f51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	60fb      	str	r3, [r7, #12]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	60bb      	str	r3, [r7, #8]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a34      	ldr	r2, [pc, #208]	; (800f608 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d009      	beq.n	800f54e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a33      	ldr	r2, [pc, #204]	; (800f60c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d004      	beq.n	800f54e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a31      	ldr	r2, [pc, #196]	; (800f610 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d108      	bne.n	800f560 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f554:	60fb      	str	r3, [r7, #12]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	4313      	orrs	r3, r2
 800f55e:	60fb      	str	r3, [r7, #12]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f56a:	60fb      	str	r3, [r7, #12]
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68fa      	ldr	r2, [r7, #12]
 800f572:	4313      	orrs	r3, r2
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	605a      	str	r2, [r3, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a21      	ldr	r2, [pc, #132]	; (800f608 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d022      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f590:	d01d      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a1f      	ldr	r2, [pc, #124]	; (800f614 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d018      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a1d      	ldr	r2, [pc, #116]	; (800f618 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d013      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a1c      	ldr	r2, [pc, #112]	; (800f61c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d00e      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a15      	ldr	r2, [pc, #84]	; (800f60c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d009      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a18      	ldr	r2, [pc, #96]	; (800f620 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d004      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4a11      	ldr	r2, [pc, #68]	; (800f610 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d10c      	bne.n	800f5e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5d4:	60bb      	str	r3, [r7, #8]
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	60bb      	str	r3, [r7, #8]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	609a      	str	r2, [r3, #8]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	40012c00 	.word	0x40012c00
 800f60c:	40013400 	.word	0x40013400
 800f610:	40015000 	.word	0x40015000
 800f614:	40000400 	.word	0x40000400
 800f618:	40000800 	.word	0x40000800
 800f61c:	40000c00 	.word	0x40000c00
 800f620:	40014000 	.word	0x40014000

0800f624 <HAL_UART_Init>:
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <HAL_UART_Init+0x12>
 800f632:	2301      	movs	r3, #1
 800f634:	e042      	b.n	800f6bc <HAL_UART_Init+0x98>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d106      	bne.n	800f64e <HAL_UART_Init+0x2a>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7fa fe9b 	bl	800a384 <HAL_UART_MspInit>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2224      	movs	r2, #36	; 0x24
 800f652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f022 0201 	bic.w	r2, r2, #1
 800f664:	601a      	str	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d002      	beq.n	800f674 <HAL_UART_Init+0x50>
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fe68 	bl	8010344 <UART_AdvFeatureConfig>
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fb69 	bl	800fd4c <UART_SetConfig>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d101      	bne.n	800f684 <HAL_UART_Init+0x60>
 800f680:	2301      	movs	r3, #1
 800f682:	e01b      	b.n	800f6bc <HAL_UART_Init+0x98>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f692:	605a      	str	r2, [r3, #4]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	689a      	ldr	r2, [r3, #8]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f6a2:	609a      	str	r2, [r3, #8]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f042 0201 	orr.w	r2, r2, #1
 800f6b2:	601a      	str	r2, [r3, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fee7 	bl	8010488 <UART_CheckIdleState>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <HAL_UART_IRQHandler>:
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b0ba      	sub	sp, #232	; 0xe8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	69db      	ldr	r3, [r3, #28]
 800f6d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f6ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800f6f2:	4013      	ands	r3, r2
 800f6f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f6f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d11b      	bne.n	800f738 <HAL_UART_IRQHandler+0x74>
 800f700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f704:	f003 0320 	and.w	r3, r3, #32
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d015      	beq.n	800f738 <HAL_UART_IRQHandler+0x74>
 800f70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f710:	f003 0320 	and.w	r3, r3, #32
 800f714:	2b00      	cmp	r3, #0
 800f716:	d105      	bne.n	800f724 <HAL_UART_IRQHandler+0x60>
 800f718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f71c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f720:	2b00      	cmp	r3, #0
 800f722:	d009      	beq.n	800f738 <HAL_UART_IRQHandler+0x74>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f000 82e3 	beq.w	800fcf4 <HAL_UART_IRQHandler+0x630>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	4798      	blx	r3
 800f736:	e2dd      	b.n	800fcf4 <HAL_UART_IRQHandler+0x630>
 800f738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 8123 	beq.w	800f988 <HAL_UART_IRQHandler+0x2c4>
 800f742:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f746:	4b8d      	ldr	r3, [pc, #564]	; (800f97c <HAL_UART_IRQHandler+0x2b8>)
 800f748:	4013      	ands	r3, r2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d106      	bne.n	800f75c <HAL_UART_IRQHandler+0x98>
 800f74e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f752:	4b8b      	ldr	r3, [pc, #556]	; (800f980 <HAL_UART_IRQHandler+0x2bc>)
 800f754:	4013      	ands	r3, r2
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8116 	beq.w	800f988 <HAL_UART_IRQHandler+0x2c4>
 800f75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f760:	f003 0301 	and.w	r3, r3, #1
 800f764:	2b00      	cmp	r3, #0
 800f766:	d011      	beq.n	800f78c <HAL_UART_IRQHandler+0xc8>
 800f768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00b      	beq.n	800f78c <HAL_UART_IRQHandler+0xc8>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2201      	movs	r2, #1
 800f77a:	621a      	str	r2, [r3, #32]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f782:	f043 0201 	orr.w	r2, r3, #1
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f790:	f003 0302 	and.w	r3, r3, #2
 800f794:	2b00      	cmp	r3, #0
 800f796:	d011      	beq.n	800f7bc <HAL_UART_IRQHandler+0xf8>
 800f798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00b      	beq.n	800f7bc <HAL_UART_IRQHandler+0xf8>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2202      	movs	r2, #2
 800f7aa:	621a      	str	r2, [r3, #32]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7b2:	f043 0204 	orr.w	r2, r3, #4
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7c0:	f003 0304 	and.w	r3, r3, #4
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d011      	beq.n	800f7ec <HAL_UART_IRQHandler+0x128>
 800f7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7cc:	f003 0301 	and.w	r3, r3, #1
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00b      	beq.n	800f7ec <HAL_UART_IRQHandler+0x128>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2204      	movs	r2, #4
 800f7da:	621a      	str	r2, [r3, #32]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7e2:	f043 0202 	orr.w	r2, r3, #2
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7f0:	f003 0308 	and.w	r3, r3, #8
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d017      	beq.n	800f828 <HAL_UART_IRQHandler+0x164>
 800f7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7fc:	f003 0320 	and.w	r3, r3, #32
 800f800:	2b00      	cmp	r3, #0
 800f802:	d105      	bne.n	800f810 <HAL_UART_IRQHandler+0x14c>
 800f804:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f808:	4b5c      	ldr	r3, [pc, #368]	; (800f97c <HAL_UART_IRQHandler+0x2b8>)
 800f80a:	4013      	ands	r3, r2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00b      	beq.n	800f828 <HAL_UART_IRQHandler+0x164>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2208      	movs	r2, #8
 800f816:	621a      	str	r2, [r3, #32]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f81e:	f043 0208 	orr.w	r2, r3, #8
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f82c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f830:	2b00      	cmp	r3, #0
 800f832:	d012      	beq.n	800f85a <HAL_UART_IRQHandler+0x196>
 800f834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d00c      	beq.n	800f85a <HAL_UART_IRQHandler+0x196>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f848:	621a      	str	r2, [r3, #32]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f850:	f043 0220 	orr.w	r2, r3, #32
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f860:	2b00      	cmp	r3, #0
 800f862:	f000 8249 	beq.w	800fcf8 <HAL_UART_IRQHandler+0x634>
 800f866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f86a:	f003 0320 	and.w	r3, r3, #32
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d013      	beq.n	800f89a <HAL_UART_IRQHandler+0x1d6>
 800f872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f876:	f003 0320 	and.w	r3, r3, #32
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d105      	bne.n	800f88a <HAL_UART_IRQHandler+0x1c6>
 800f87e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f886:	2b00      	cmp	r3, #0
 800f888:	d007      	beq.n	800f89a <HAL_UART_IRQHandler+0x1d6>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d003      	beq.n	800f89a <HAL_UART_IRQHandler+0x1d6>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	4798      	blx	r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8ae:	2b40      	cmp	r3, #64	; 0x40
 800f8b0:	d005      	beq.n	800f8be <HAL_UART_IRQHandler+0x1fa>
 800f8b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f8b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d054      	beq.n	800f968 <HAL_UART_IRQHandler+0x2a4>
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fef9 	bl	80106b6 <UART_EndRxTransfer>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8ce:	2b40      	cmp	r3, #64	; 0x40
 800f8d0:	d146      	bne.n	800f960 <HAL_UART_IRQHandler+0x29c>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3308      	adds	r3, #8
 800f8d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f8dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8e0:	e853 3f00 	ldrex	r3, [r3]
 800f8e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f8e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f8ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f8fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f90a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f90e:	e841 2300 	strex	r3, r2, [r1]
 800f912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1d9      	bne.n	800f8d2 <HAL_UART_IRQHandler+0x20e>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f924:	2b00      	cmp	r3, #0
 800f926:	d017      	beq.n	800f958 <HAL_UART_IRQHandler+0x294>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f92e:	4a15      	ldr	r2, [pc, #84]	; (800f984 <HAL_UART_IRQHandler+0x2c0>)
 800f930:	639a      	str	r2, [r3, #56]	; 0x38
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fb f8e2 	bl	800ab02 <HAL_DMA_Abort_IT>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d019      	beq.n	800f978 <HAL_UART_IRQHandler+0x2b4>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f952:	4610      	mov	r0, r2
 800f954:	4798      	blx	r3
 800f956:	e00f      	b.n	800f978 <HAL_UART_IRQHandler+0x2b4>
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f9e1 	bl	800fd20 <HAL_UART_ErrorCallback>
 800f95e:	e00b      	b.n	800f978 <HAL_UART_IRQHandler+0x2b4>
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f9dd 	bl	800fd20 <HAL_UART_ErrorCallback>
 800f966:	e007      	b.n	800f978 <HAL_UART_IRQHandler+0x2b4>
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 f9d9 	bl	800fd20 <HAL_UART_ErrorCallback>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f976:	e1bf      	b.n	800fcf8 <HAL_UART_IRQHandler+0x634>
 800f978:	bf00      	nop
 800f97a:	e1bd      	b.n	800fcf8 <HAL_UART_IRQHandler+0x634>
 800f97c:	10000001 	.word	0x10000001
 800f980:	04000120 	.word	0x04000120
 800f984:	08010783 	.word	0x08010783
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	f040 8153 	bne.w	800fc38 <HAL_UART_IRQHandler+0x574>
 800f992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f996:	f003 0310 	and.w	r3, r3, #16
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f000 814c 	beq.w	800fc38 <HAL_UART_IRQHandler+0x574>
 800f9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9a4:	f003 0310 	and.w	r3, r3, #16
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 8145 	beq.w	800fc38 <HAL_UART_IRQHandler+0x574>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2210      	movs	r2, #16
 800f9b4:	621a      	str	r2, [r3, #32]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c0:	2b40      	cmp	r3, #64	; 0x40
 800f9c2:	f040 80bb 	bne.w	800fb3c <HAL_UART_IRQHandler+0x478>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f9d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f000 818f 	beq.w	800fcfc <HAL_UART_IRQHandler+0x638>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	f080 8187 	bcs.w	800fcfc <HAL_UART_IRQHandler+0x638>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f9f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f003 0320 	and.w	r3, r3, #32
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f040 8087 	bne.w	800fb1a <HAL_UART_IRQHandler+0x456>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fa14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa18:	e853 3f00 	ldrex	r3, [r3]
 800fa1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	461a      	mov	r2, r3
 800fa32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fa3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fa3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fa42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fa46:	e841 2300 	strex	r3, r2, [r1]
 800fa4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d1da      	bne.n	800fa0c <HAL_UART_IRQHandler+0x348>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	3308      	adds	r3, #8
 800fa5c:	677b      	str	r3, [r7, #116]	; 0x74
 800fa5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa60:	e853 3f00 	ldrex	r3, [r3]
 800fa64:	673b      	str	r3, [r7, #112]	; 0x70
 800fa66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa68:	f023 0301 	bic.w	r3, r3, #1
 800fa6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3308      	adds	r3, #8
 800fa76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fa7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fa7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fa82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa86:	e841 2300 	strex	r3, r2, [r1]
 800fa8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1e1      	bne.n	800fa56 <HAL_UART_IRQHandler+0x392>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	663b      	str	r3, [r7, #96]	; 0x60
 800fa9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa9c:	e853 3f00 	ldrex	r3, [r3]
 800faa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800faa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	3308      	adds	r3, #8
 800fab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fab8:	66bb      	str	r3, [r7, #104]	; 0x68
 800faba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fabc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fabe:	e841 2300 	strex	r3, r2, [r1]
 800fac2:	667b      	str	r3, [r7, #100]	; 0x64
 800fac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e3      	bne.n	800fa92 <HAL_UART_IRQHandler+0x3ce>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2220      	movs	r2, #32
 800face:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	66da      	str	r2, [r3, #108]	; 0x6c
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fae0:	e853 3f00 	ldrex	r3, [r3]
 800fae4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fae8:	f023 0310 	bic.w	r3, r3, #16
 800faec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	461a      	mov	r2, r3
 800faf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fafa:	65bb      	str	r3, [r7, #88]	; 0x58
 800fafc:	657a      	str	r2, [r7, #84]	; 0x54
 800fafe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb02:	e841 2300 	strex	r3, r2, [r1]
 800fb06:	653b      	str	r3, [r7, #80]	; 0x50
 800fb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1e4      	bne.n	800fad8 <HAL_UART_IRQHandler+0x414>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fa ff9b 	bl	800aa50 <HAL_DMA_Abort>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	671a      	str	r2, [r3, #112]	; 0x70
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	1ad3      	subs	r3, r2, r3
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4619      	mov	r1, r3
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f8fd 	bl	800fd34 <HAL_UARTEx_RxEventCallback>
 800fb3a:	e0df      	b.n	800fcfc <HAL_UART_IRQHandler+0x638>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f000 80d1 	beq.w	800fd00 <HAL_UART_IRQHandler+0x63c>
 800fb5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f000 80cc 	beq.w	800fd00 <HAL_UART_IRQHandler+0x63c>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb70:	e853 3f00 	ldrex	r3, [r3]
 800fb74:	637b      	str	r3, [r7, #52]	; 0x34
 800fb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	461a      	mov	r2, r3
 800fb86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fb8a:	647b      	str	r3, [r7, #68]	; 0x44
 800fb8c:	643a      	str	r2, [r7, #64]	; 0x40
 800fb8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb92:	e841 2300 	strex	r3, r2, [r1]
 800fb96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1e4      	bne.n	800fb68 <HAL_UART_IRQHandler+0x4a4>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	3308      	adds	r3, #8
 800fba4:	627b      	str	r3, [r7, #36]	; 0x24
 800fba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba8:	e853 3f00 	ldrex	r3, [r3]
 800fbac:	623b      	str	r3, [r7, #32]
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fbb4:	f023 0301 	bic.w	r3, r3, #1
 800fbb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3308      	adds	r3, #8
 800fbc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fbc6:	633a      	str	r2, [r7, #48]	; 0x30
 800fbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbce:	e841 2300 	strex	r3, r2, [r1]
 800fbd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d1e1      	bne.n	800fb9e <HAL_UART_IRQHandler+0x4da>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2220      	movs	r2, #32
 800fbde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	66da      	str	r2, [r3, #108]	; 0x6c
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	675a      	str	r2, [r3, #116]	; 0x74
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	613b      	str	r3, [r7, #16]
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	e853 3f00 	ldrex	r3, [r3]
 800fbfa:	60fb      	str	r3, [r7, #12]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f023 0310 	bic.w	r3, r3, #16
 800fc02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fc10:	61fb      	str	r3, [r7, #28]
 800fc12:	61ba      	str	r2, [r7, #24]
 800fc14:	69b9      	ldr	r1, [r7, #24]
 800fc16:	69fa      	ldr	r2, [r7, #28]
 800fc18:	e841 2300 	strex	r3, r2, [r1]
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1e4      	bne.n	800fbee <HAL_UART_IRQHandler+0x52a>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2202      	movs	r2, #2
 800fc28:	671a      	str	r2, [r3, #112]	; 0x70
 800fc2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f87f 	bl	800fd34 <HAL_UARTEx_RxEventCallback>
 800fc36:	e063      	b.n	800fd00 <HAL_UART_IRQHandler+0x63c>
 800fc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00e      	beq.n	800fc62 <HAL_UART_IRQHandler+0x59e>
 800fc44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d008      	beq.n	800fc62 <HAL_UART_IRQHandler+0x59e>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fc58:	621a      	str	r2, [r3, #32]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fdd2 	bl	8010804 <HAL_UARTEx_WakeupCallback>
 800fc60:	e051      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d014      	beq.n	800fc98 <HAL_UART_IRQHandler+0x5d4>
 800fc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d105      	bne.n	800fc86 <HAL_UART_IRQHandler+0x5c2>
 800fc7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d008      	beq.n	800fc98 <HAL_UART_IRQHandler+0x5d4>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d03a      	beq.n	800fd04 <HAL_UART_IRQHandler+0x640>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	4798      	blx	r3
 800fc96:	e035      	b.n	800fd04 <HAL_UART_IRQHandler+0x640>
 800fc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d009      	beq.n	800fcb8 <HAL_UART_IRQHandler+0x5f4>
 800fca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <HAL_UART_IRQHandler+0x5f4>
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 fd7c 	bl	80107ae <UART_EndTransmit_IT>
 800fcb6:	e026      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fcb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d009      	beq.n	800fcd8 <HAL_UART_IRQHandler+0x614>
 800fcc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fcc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d003      	beq.n	800fcd8 <HAL_UART_IRQHandler+0x614>
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fdab 	bl	801082c <HAL_UARTEx_TxFifoEmptyCallback>
 800fcd6:	e016      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fcd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d010      	beq.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	da0c      	bge.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 fd93 	bl	8010818 <HAL_UARTEx_RxFifoFullCallback>
 800fcf2:	e008      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fcf4:	bf00      	nop
 800fcf6:	e006      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fcf8:	bf00      	nop
 800fcfa:	e004      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fcfc:	bf00      	nop
 800fcfe:	e002      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fd00:	bf00      	nop
 800fd02:	e000      	b.n	800fd06 <HAL_UART_IRQHandler+0x642>
 800fd04:	bf00      	nop
 800fd06:	37e8      	adds	r7, #232	; 0xe8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <HAL_UART_TxCpltCallback>:
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	bf00      	nop
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <HAL_UART_ErrorCallback>:
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	bf00      	nop
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <HAL_UARTEx_RxEventCallback>:
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	807b      	strh	r3, [r7, #2]
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <UART_SetConfig>:
 800fd4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd50:	b08c      	sub	sp, #48	; 0x30
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6178      	str	r0, [r7, #20]
 800fd56:	2300      	movs	r3, #0
 800fd58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	689a      	ldr	r2, [r3, #8]
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	431a      	orrs	r2, r3
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	69db      	ldr	r3, [r3, #28]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	4baa      	ldr	r3, [pc, #680]	; (8010024 <UART_SetConfig+0x2d8>)
 800fd7c:	4013      	ands	r3, r2
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	6812      	ldr	r2, [r2, #0]
 800fd82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd84:	430b      	orrs	r3, r1
 800fd86:	6013      	str	r3, [r2, #0]
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	430a      	orrs	r2, r1
 800fd9c:	605a      	str	r2, [r3, #4]
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	699b      	ldr	r3, [r3, #24]
 800fda2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a9f      	ldr	r2, [pc, #636]	; (8010028 <UART_SetConfig+0x2dc>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d004      	beq.n	800fdb8 <UART_SetConfig+0x6c>
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	6a1b      	ldr	r3, [r3, #32]
 800fdb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800fdc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	6812      	ldr	r2, [r2, #0]
 800fdca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdcc:	430b      	orrs	r3, r1
 800fdce:	6093      	str	r3, [r2, #8]
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd6:	f023 010f 	bic.w	r1, r3, #15
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	430a      	orrs	r2, r1
 800fde4:	62da      	str	r2, [r3, #44]	; 0x2c
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4a90      	ldr	r2, [pc, #576]	; (801002c <UART_SetConfig+0x2e0>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d125      	bne.n	800fe3c <UART_SetConfig+0xf0>
 800fdf0:	4b8f      	ldr	r3, [pc, #572]	; (8010030 <UART_SetConfig+0x2e4>)
 800fdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdf6:	f003 0303 	and.w	r3, r3, #3
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	d81a      	bhi.n	800fe34 <UART_SetConfig+0xe8>
 800fdfe:	a201      	add	r2, pc, #4	; (adr r2, 800fe04 <UART_SetConfig+0xb8>)
 800fe00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe04:	0800fe15 	.word	0x0800fe15
 800fe08:	0800fe25 	.word	0x0800fe25
 800fe0c:	0800fe1d 	.word	0x0800fe1d
 800fe10:	0800fe2d 	.word	0x0800fe2d
 800fe14:	2301      	movs	r3, #1
 800fe16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe1a:	e116      	b.n	801004a <UART_SetConfig+0x2fe>
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe22:	e112      	b.n	801004a <UART_SetConfig+0x2fe>
 800fe24:	2304      	movs	r3, #4
 800fe26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe2a:	e10e      	b.n	801004a <UART_SetConfig+0x2fe>
 800fe2c:	2308      	movs	r3, #8
 800fe2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe32:	e10a      	b.n	801004a <UART_SetConfig+0x2fe>
 800fe34:	2310      	movs	r3, #16
 800fe36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe3a:	e106      	b.n	801004a <UART_SetConfig+0x2fe>
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a7c      	ldr	r2, [pc, #496]	; (8010034 <UART_SetConfig+0x2e8>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d138      	bne.n	800feb8 <UART_SetConfig+0x16c>
 800fe46:	4b7a      	ldr	r3, [pc, #488]	; (8010030 <UART_SetConfig+0x2e4>)
 800fe48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe4c:	f003 030c 	and.w	r3, r3, #12
 800fe50:	2b0c      	cmp	r3, #12
 800fe52:	d82d      	bhi.n	800feb0 <UART_SetConfig+0x164>
 800fe54:	a201      	add	r2, pc, #4	; (adr r2, 800fe5c <UART_SetConfig+0x110>)
 800fe56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5a:	bf00      	nop
 800fe5c:	0800fe91 	.word	0x0800fe91
 800fe60:	0800feb1 	.word	0x0800feb1
 800fe64:	0800feb1 	.word	0x0800feb1
 800fe68:	0800feb1 	.word	0x0800feb1
 800fe6c:	0800fea1 	.word	0x0800fea1
 800fe70:	0800feb1 	.word	0x0800feb1
 800fe74:	0800feb1 	.word	0x0800feb1
 800fe78:	0800feb1 	.word	0x0800feb1
 800fe7c:	0800fe99 	.word	0x0800fe99
 800fe80:	0800feb1 	.word	0x0800feb1
 800fe84:	0800feb1 	.word	0x0800feb1
 800fe88:	0800feb1 	.word	0x0800feb1
 800fe8c:	0800fea9 	.word	0x0800fea9
 800fe90:	2300      	movs	r3, #0
 800fe92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe96:	e0d8      	b.n	801004a <UART_SetConfig+0x2fe>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe9e:	e0d4      	b.n	801004a <UART_SetConfig+0x2fe>
 800fea0:	2304      	movs	r3, #4
 800fea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fea6:	e0d0      	b.n	801004a <UART_SetConfig+0x2fe>
 800fea8:	2308      	movs	r3, #8
 800feaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feae:	e0cc      	b.n	801004a <UART_SetConfig+0x2fe>
 800feb0:	2310      	movs	r3, #16
 800feb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feb6:	e0c8      	b.n	801004a <UART_SetConfig+0x2fe>
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a5e      	ldr	r2, [pc, #376]	; (8010038 <UART_SetConfig+0x2ec>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d125      	bne.n	800ff0e <UART_SetConfig+0x1c2>
 800fec2:	4b5b      	ldr	r3, [pc, #364]	; (8010030 <UART_SetConfig+0x2e4>)
 800fec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fecc:	2b30      	cmp	r3, #48	; 0x30
 800fece:	d016      	beq.n	800fefe <UART_SetConfig+0x1b2>
 800fed0:	2b30      	cmp	r3, #48	; 0x30
 800fed2:	d818      	bhi.n	800ff06 <UART_SetConfig+0x1ba>
 800fed4:	2b20      	cmp	r3, #32
 800fed6:	d00a      	beq.n	800feee <UART_SetConfig+0x1a2>
 800fed8:	2b20      	cmp	r3, #32
 800feda:	d814      	bhi.n	800ff06 <UART_SetConfig+0x1ba>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d002      	beq.n	800fee6 <UART_SetConfig+0x19a>
 800fee0:	2b10      	cmp	r3, #16
 800fee2:	d008      	beq.n	800fef6 <UART_SetConfig+0x1aa>
 800fee4:	e00f      	b.n	800ff06 <UART_SetConfig+0x1ba>
 800fee6:	2300      	movs	r3, #0
 800fee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feec:	e0ad      	b.n	801004a <UART_SetConfig+0x2fe>
 800feee:	2302      	movs	r3, #2
 800fef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fef4:	e0a9      	b.n	801004a <UART_SetConfig+0x2fe>
 800fef6:	2304      	movs	r3, #4
 800fef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fefc:	e0a5      	b.n	801004a <UART_SetConfig+0x2fe>
 800fefe:	2308      	movs	r3, #8
 800ff00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff04:	e0a1      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff06:	2310      	movs	r3, #16
 800ff08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff0c:	e09d      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4a4a      	ldr	r2, [pc, #296]	; (801003c <UART_SetConfig+0x2f0>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d125      	bne.n	800ff64 <UART_SetConfig+0x218>
 800ff18:	4b45      	ldr	r3, [pc, #276]	; (8010030 <UART_SetConfig+0x2e4>)
 800ff1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ff22:	2bc0      	cmp	r3, #192	; 0xc0
 800ff24:	d016      	beq.n	800ff54 <UART_SetConfig+0x208>
 800ff26:	2bc0      	cmp	r3, #192	; 0xc0
 800ff28:	d818      	bhi.n	800ff5c <UART_SetConfig+0x210>
 800ff2a:	2b80      	cmp	r3, #128	; 0x80
 800ff2c:	d00a      	beq.n	800ff44 <UART_SetConfig+0x1f8>
 800ff2e:	2b80      	cmp	r3, #128	; 0x80
 800ff30:	d814      	bhi.n	800ff5c <UART_SetConfig+0x210>
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <UART_SetConfig+0x1f0>
 800ff36:	2b40      	cmp	r3, #64	; 0x40
 800ff38:	d008      	beq.n	800ff4c <UART_SetConfig+0x200>
 800ff3a:	e00f      	b.n	800ff5c <UART_SetConfig+0x210>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff42:	e082      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff44:	2302      	movs	r3, #2
 800ff46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff4a:	e07e      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff4c:	2304      	movs	r3, #4
 800ff4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff52:	e07a      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff54:	2308      	movs	r3, #8
 800ff56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff5a:	e076      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff5c:	2310      	movs	r3, #16
 800ff5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff62:	e072      	b.n	801004a <UART_SetConfig+0x2fe>
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4a35      	ldr	r2, [pc, #212]	; (8010040 <UART_SetConfig+0x2f4>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d12a      	bne.n	800ffc4 <UART_SetConfig+0x278>
 800ff6e:	4b30      	ldr	r3, [pc, #192]	; (8010030 <UART_SetConfig+0x2e4>)
 800ff70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff7c:	d01a      	beq.n	800ffb4 <UART_SetConfig+0x268>
 800ff7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff82:	d81b      	bhi.n	800ffbc <UART_SetConfig+0x270>
 800ff84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff88:	d00c      	beq.n	800ffa4 <UART_SetConfig+0x258>
 800ff8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff8e:	d815      	bhi.n	800ffbc <UART_SetConfig+0x270>
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d003      	beq.n	800ff9c <UART_SetConfig+0x250>
 800ff94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff98:	d008      	beq.n	800ffac <UART_SetConfig+0x260>
 800ff9a:	e00f      	b.n	800ffbc <UART_SetConfig+0x270>
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffa2:	e052      	b.n	801004a <UART_SetConfig+0x2fe>
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffaa:	e04e      	b.n	801004a <UART_SetConfig+0x2fe>
 800ffac:	2304      	movs	r3, #4
 800ffae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffb2:	e04a      	b.n	801004a <UART_SetConfig+0x2fe>
 800ffb4:	2308      	movs	r3, #8
 800ffb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffba:	e046      	b.n	801004a <UART_SetConfig+0x2fe>
 800ffbc:	2310      	movs	r3, #16
 800ffbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffc2:	e042      	b.n	801004a <UART_SetConfig+0x2fe>
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a17      	ldr	r2, [pc, #92]	; (8010028 <UART_SetConfig+0x2dc>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d13a      	bne.n	8010044 <UART_SetConfig+0x2f8>
 800ffce:	4b18      	ldr	r3, [pc, #96]	; (8010030 <UART_SetConfig+0x2e4>)
 800ffd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ffd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ffdc:	d01a      	beq.n	8010014 <UART_SetConfig+0x2c8>
 800ffde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ffe2:	d81b      	bhi.n	801001c <UART_SetConfig+0x2d0>
 800ffe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ffe8:	d00c      	beq.n	8010004 <UART_SetConfig+0x2b8>
 800ffea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ffee:	d815      	bhi.n	801001c <UART_SetConfig+0x2d0>
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d003      	beq.n	800fffc <UART_SetConfig+0x2b0>
 800fff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fff8:	d008      	beq.n	801000c <UART_SetConfig+0x2c0>
 800fffa:	e00f      	b.n	801001c <UART_SetConfig+0x2d0>
 800fffc:	2300      	movs	r3, #0
 800fffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010002:	e022      	b.n	801004a <UART_SetConfig+0x2fe>
 8010004:	2302      	movs	r3, #2
 8010006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801000a:	e01e      	b.n	801004a <UART_SetConfig+0x2fe>
 801000c:	2304      	movs	r3, #4
 801000e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010012:	e01a      	b.n	801004a <UART_SetConfig+0x2fe>
 8010014:	2308      	movs	r3, #8
 8010016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801001a:	e016      	b.n	801004a <UART_SetConfig+0x2fe>
 801001c:	2310      	movs	r3, #16
 801001e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010022:	e012      	b.n	801004a <UART_SetConfig+0x2fe>
 8010024:	cfff69f3 	.word	0xcfff69f3
 8010028:	40008000 	.word	0x40008000
 801002c:	40013800 	.word	0x40013800
 8010030:	40021000 	.word	0x40021000
 8010034:	40004400 	.word	0x40004400
 8010038:	40004800 	.word	0x40004800
 801003c:	40004c00 	.word	0x40004c00
 8010040:	40005000 	.word	0x40005000
 8010044:	2310      	movs	r3, #16
 8010046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4aae      	ldr	r2, [pc, #696]	; (8010308 <UART_SetConfig+0x5bc>)
 8010050:	4293      	cmp	r3, r2
 8010052:	f040 8097 	bne.w	8010184 <UART_SetConfig+0x438>
 8010056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801005a:	2b08      	cmp	r3, #8
 801005c:	d823      	bhi.n	80100a6 <UART_SetConfig+0x35a>
 801005e:	a201      	add	r2, pc, #4	; (adr r2, 8010064 <UART_SetConfig+0x318>)
 8010060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010064:	08010089 	.word	0x08010089
 8010068:	080100a7 	.word	0x080100a7
 801006c:	08010091 	.word	0x08010091
 8010070:	080100a7 	.word	0x080100a7
 8010074:	08010097 	.word	0x08010097
 8010078:	080100a7 	.word	0x080100a7
 801007c:	080100a7 	.word	0x080100a7
 8010080:	080100a7 	.word	0x080100a7
 8010084:	0801009f 	.word	0x0801009f
 8010088:	f7fd ff62 	bl	800df50 <HAL_RCC_GetPCLK1Freq>
 801008c:	6278      	str	r0, [r7, #36]	; 0x24
 801008e:	e010      	b.n	80100b2 <UART_SetConfig+0x366>
 8010090:	4b9e      	ldr	r3, [pc, #632]	; (801030c <UART_SetConfig+0x5c0>)
 8010092:	627b      	str	r3, [r7, #36]	; 0x24
 8010094:	e00d      	b.n	80100b2 <UART_SetConfig+0x366>
 8010096:	f7fd feed 	bl	800de74 <HAL_RCC_GetSysClockFreq>
 801009a:	6278      	str	r0, [r7, #36]	; 0x24
 801009c:	e009      	b.n	80100b2 <UART_SetConfig+0x366>
 801009e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100a2:	627b      	str	r3, [r7, #36]	; 0x24
 80100a4:	e005      	b.n	80100b2 <UART_SetConfig+0x366>
 80100a6:	2300      	movs	r3, #0
 80100a8:	627b      	str	r3, [r7, #36]	; 0x24
 80100aa:	2301      	movs	r3, #1
 80100ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80100b0:	bf00      	nop
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f000 8130 	beq.w	801031a <UART_SetConfig+0x5ce>
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100be:	4a94      	ldr	r2, [pc, #592]	; (8010310 <UART_SetConfig+0x5c4>)
 80100c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100c4:	461a      	mov	r2, r3
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80100cc:	61bb      	str	r3, [r7, #24]
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	685a      	ldr	r2, [r3, #4]
 80100d2:	4613      	mov	r3, r2
 80100d4:	005b      	lsls	r3, r3, #1
 80100d6:	4413      	add	r3, r2
 80100d8:	69ba      	ldr	r2, [r7, #24]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d305      	bcc.n	80100ea <UART_SetConfig+0x39e>
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	031b      	lsls	r3, r3, #12
 80100e4:	69ba      	ldr	r2, [r7, #24]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d903      	bls.n	80100f2 <UART_SetConfig+0x3a6>
 80100ea:	2301      	movs	r3, #1
 80100ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80100f0:	e113      	b.n	801031a <UART_SetConfig+0x5ce>
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f4:	2200      	movs	r2, #0
 80100f6:	60bb      	str	r3, [r7, #8]
 80100f8:	60fa      	str	r2, [r7, #12]
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fe:	4a84      	ldr	r2, [pc, #528]	; (8010310 <UART_SetConfig+0x5c4>)
 8010100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010104:	b29b      	uxth	r3, r3
 8010106:	2200      	movs	r2, #0
 8010108:	603b      	str	r3, [r7, #0]
 801010a:	607a      	str	r2, [r7, #4]
 801010c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010114:	f7f0 fde0 	bl	8000cd8 <__aeabi_uldivmod>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4610      	mov	r0, r2
 801011e:	4619      	mov	r1, r3
 8010120:	f04f 0200 	mov.w	r2, #0
 8010124:	f04f 0300 	mov.w	r3, #0
 8010128:	020b      	lsls	r3, r1, #8
 801012a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801012e:	0202      	lsls	r2, r0, #8
 8010130:	6979      	ldr	r1, [r7, #20]
 8010132:	6849      	ldr	r1, [r1, #4]
 8010134:	0849      	lsrs	r1, r1, #1
 8010136:	2000      	movs	r0, #0
 8010138:	460c      	mov	r4, r1
 801013a:	4605      	mov	r5, r0
 801013c:	eb12 0804 	adds.w	r8, r2, r4
 8010140:	eb43 0905 	adc.w	r9, r3, r5
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	469a      	mov	sl, r3
 801014c:	4693      	mov	fp, r2
 801014e:	4652      	mov	r2, sl
 8010150:	465b      	mov	r3, fp
 8010152:	4640      	mov	r0, r8
 8010154:	4649      	mov	r1, r9
 8010156:	f7f0 fdbf 	bl	8000cd8 <__aeabi_uldivmod>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	4613      	mov	r3, r2
 8010160:	623b      	str	r3, [r7, #32]
 8010162:	6a3b      	ldr	r3, [r7, #32]
 8010164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010168:	d308      	bcc.n	801017c <UART_SetConfig+0x430>
 801016a:	6a3b      	ldr	r3, [r7, #32]
 801016c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010170:	d204      	bcs.n	801017c <UART_SetConfig+0x430>
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6a3a      	ldr	r2, [r7, #32]
 8010178:	60da      	str	r2, [r3, #12]
 801017a:	e0ce      	b.n	801031a <UART_SetConfig+0x5ce>
 801017c:	2301      	movs	r3, #1
 801017e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010182:	e0ca      	b.n	801031a <UART_SetConfig+0x5ce>
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	69db      	ldr	r3, [r3, #28]
 8010188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801018c:	d166      	bne.n	801025c <UART_SetConfig+0x510>
 801018e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010192:	2b08      	cmp	r3, #8
 8010194:	d827      	bhi.n	80101e6 <UART_SetConfig+0x49a>
 8010196:	a201      	add	r2, pc, #4	; (adr r2, 801019c <UART_SetConfig+0x450>)
 8010198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019c:	080101c1 	.word	0x080101c1
 80101a0:	080101c9 	.word	0x080101c9
 80101a4:	080101d1 	.word	0x080101d1
 80101a8:	080101e7 	.word	0x080101e7
 80101ac:	080101d7 	.word	0x080101d7
 80101b0:	080101e7 	.word	0x080101e7
 80101b4:	080101e7 	.word	0x080101e7
 80101b8:	080101e7 	.word	0x080101e7
 80101bc:	080101df 	.word	0x080101df
 80101c0:	f7fd fec6 	bl	800df50 <HAL_RCC_GetPCLK1Freq>
 80101c4:	6278      	str	r0, [r7, #36]	; 0x24
 80101c6:	e014      	b.n	80101f2 <UART_SetConfig+0x4a6>
 80101c8:	f7fd fed8 	bl	800df7c <HAL_RCC_GetPCLK2Freq>
 80101cc:	6278      	str	r0, [r7, #36]	; 0x24
 80101ce:	e010      	b.n	80101f2 <UART_SetConfig+0x4a6>
 80101d0:	4b4e      	ldr	r3, [pc, #312]	; (801030c <UART_SetConfig+0x5c0>)
 80101d2:	627b      	str	r3, [r7, #36]	; 0x24
 80101d4:	e00d      	b.n	80101f2 <UART_SetConfig+0x4a6>
 80101d6:	f7fd fe4d 	bl	800de74 <HAL_RCC_GetSysClockFreq>
 80101da:	6278      	str	r0, [r7, #36]	; 0x24
 80101dc:	e009      	b.n	80101f2 <UART_SetConfig+0x4a6>
 80101de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
 80101e4:	e005      	b.n	80101f2 <UART_SetConfig+0x4a6>
 80101e6:	2300      	movs	r3, #0
 80101e8:	627b      	str	r3, [r7, #36]	; 0x24
 80101ea:	2301      	movs	r3, #1
 80101ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80101f0:	bf00      	nop
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 8090 	beq.w	801031a <UART_SetConfig+0x5ce>
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fe:	4a44      	ldr	r2, [pc, #272]	; (8010310 <UART_SetConfig+0x5c4>)
 8010200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010204:	461a      	mov	r2, r3
 8010206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010208:	fbb3 f3f2 	udiv	r3, r3, r2
 801020c:	005a      	lsls	r2, r3, #1
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	085b      	lsrs	r3, r3, #1
 8010214:	441a      	add	r2, r3
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	fbb2 f3f3 	udiv	r3, r2, r3
 801021e:	623b      	str	r3, [r7, #32]
 8010220:	6a3b      	ldr	r3, [r7, #32]
 8010222:	2b0f      	cmp	r3, #15
 8010224:	d916      	bls.n	8010254 <UART_SetConfig+0x508>
 8010226:	6a3b      	ldr	r3, [r7, #32]
 8010228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801022c:	d212      	bcs.n	8010254 <UART_SetConfig+0x508>
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	b29b      	uxth	r3, r3
 8010232:	f023 030f 	bic.w	r3, r3, #15
 8010236:	83fb      	strh	r3, [r7, #30]
 8010238:	6a3b      	ldr	r3, [r7, #32]
 801023a:	085b      	lsrs	r3, r3, #1
 801023c:	b29b      	uxth	r3, r3
 801023e:	f003 0307 	and.w	r3, r3, #7
 8010242:	b29a      	uxth	r2, r3
 8010244:	8bfb      	ldrh	r3, [r7, #30]
 8010246:	4313      	orrs	r3, r2
 8010248:	83fb      	strh	r3, [r7, #30]
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	8bfa      	ldrh	r2, [r7, #30]
 8010250:	60da      	str	r2, [r3, #12]
 8010252:	e062      	b.n	801031a <UART_SetConfig+0x5ce>
 8010254:	2301      	movs	r3, #1
 8010256:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801025a:	e05e      	b.n	801031a <UART_SetConfig+0x5ce>
 801025c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010260:	2b08      	cmp	r3, #8
 8010262:	d828      	bhi.n	80102b6 <UART_SetConfig+0x56a>
 8010264:	a201      	add	r2, pc, #4	; (adr r2, 801026c <UART_SetConfig+0x520>)
 8010266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801026a:	bf00      	nop
 801026c:	08010291 	.word	0x08010291
 8010270:	08010299 	.word	0x08010299
 8010274:	080102a1 	.word	0x080102a1
 8010278:	080102b7 	.word	0x080102b7
 801027c:	080102a7 	.word	0x080102a7
 8010280:	080102b7 	.word	0x080102b7
 8010284:	080102b7 	.word	0x080102b7
 8010288:	080102b7 	.word	0x080102b7
 801028c:	080102af 	.word	0x080102af
 8010290:	f7fd fe5e 	bl	800df50 <HAL_RCC_GetPCLK1Freq>
 8010294:	6278      	str	r0, [r7, #36]	; 0x24
 8010296:	e014      	b.n	80102c2 <UART_SetConfig+0x576>
 8010298:	f7fd fe70 	bl	800df7c <HAL_RCC_GetPCLK2Freq>
 801029c:	6278      	str	r0, [r7, #36]	; 0x24
 801029e:	e010      	b.n	80102c2 <UART_SetConfig+0x576>
 80102a0:	4b1a      	ldr	r3, [pc, #104]	; (801030c <UART_SetConfig+0x5c0>)
 80102a2:	627b      	str	r3, [r7, #36]	; 0x24
 80102a4:	e00d      	b.n	80102c2 <UART_SetConfig+0x576>
 80102a6:	f7fd fde5 	bl	800de74 <HAL_RCC_GetSysClockFreq>
 80102aa:	6278      	str	r0, [r7, #36]	; 0x24
 80102ac:	e009      	b.n	80102c2 <UART_SetConfig+0x576>
 80102ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
 80102b4:	e005      	b.n	80102c2 <UART_SetConfig+0x576>
 80102b6:	2300      	movs	r3, #0
 80102b8:	627b      	str	r3, [r7, #36]	; 0x24
 80102ba:	2301      	movs	r3, #1
 80102bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80102c0:	bf00      	nop
 80102c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d028      	beq.n	801031a <UART_SetConfig+0x5ce>
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102cc:	4a10      	ldr	r2, [pc, #64]	; (8010310 <UART_SetConfig+0x5c4>)
 80102ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102d2:	461a      	mov	r2, r3
 80102d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	085b      	lsrs	r3, r3, #1
 80102e0:	441a      	add	r2, r3
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ea:	623b      	str	r3, [r7, #32]
 80102ec:	6a3b      	ldr	r3, [r7, #32]
 80102ee:	2b0f      	cmp	r3, #15
 80102f0:	d910      	bls.n	8010314 <UART_SetConfig+0x5c8>
 80102f2:	6a3b      	ldr	r3, [r7, #32]
 80102f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102f8:	d20c      	bcs.n	8010314 <UART_SetConfig+0x5c8>
 80102fa:	6a3b      	ldr	r3, [r7, #32]
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	60da      	str	r2, [r3, #12]
 8010304:	e009      	b.n	801031a <UART_SetConfig+0x5ce>
 8010306:	bf00      	nop
 8010308:	40008000 	.word	0x40008000
 801030c:	00f42400 	.word	0x00f42400
 8010310:	08018b40 	.word	0x08018b40
 8010314:	2301      	movs	r3, #1
 8010316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	2201      	movs	r2, #1
 801031e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	2201      	movs	r2, #1
 8010326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2200      	movs	r2, #0
 801032e:	675a      	str	r2, [r3, #116]	; 0x74
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	2200      	movs	r2, #0
 8010334:	679a      	str	r2, [r3, #120]	; 0x78
 8010336:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801033a:	4618      	mov	r0, r3
 801033c:	3730      	adds	r7, #48	; 0x30
 801033e:	46bd      	mov	sp, r7
 8010340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010344 <UART_AdvFeatureConfig>:
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010350:	f003 0308 	and.w	r3, r3, #8
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00a      	beq.n	801036e <UART_AdvFeatureConfig+0x2a>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	430a      	orrs	r2, r1
 801036c:	605a      	str	r2, [r3, #4]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00a      	beq.n	8010390 <UART_AdvFeatureConfig+0x4c>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	430a      	orrs	r2, r1
 801038e:	605a      	str	r2, [r3, #4]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010394:	f003 0302 	and.w	r3, r3, #2
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00a      	beq.n	80103b2 <UART_AdvFeatureConfig+0x6e>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	430a      	orrs	r2, r1
 80103b0:	605a      	str	r2, [r3, #4]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b6:	f003 0304 	and.w	r3, r3, #4
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00a      	beq.n	80103d4 <UART_AdvFeatureConfig+0x90>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	430a      	orrs	r2, r1
 80103d2:	605a      	str	r2, [r3, #4]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	f003 0310 	and.w	r3, r3, #16
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00a      	beq.n	80103f6 <UART_AdvFeatureConfig+0xb2>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	430a      	orrs	r2, r1
 80103f4:	609a      	str	r2, [r3, #8]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103fa:	f003 0320 	and.w	r3, r3, #32
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00a      	beq.n	8010418 <UART_AdvFeatureConfig+0xd4>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	430a      	orrs	r2, r1
 8010416:	609a      	str	r2, [r3, #8]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801041c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010420:	2b00      	cmp	r3, #0
 8010422:	d01a      	beq.n	801045a <UART_AdvFeatureConfig+0x116>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	430a      	orrs	r2, r1
 8010438:	605a      	str	r2, [r3, #4]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010442:	d10a      	bne.n	801045a <UART_AdvFeatureConfig+0x116>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	430a      	orrs	r2, r1
 8010458:	605a      	str	r2, [r3, #4]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00a      	beq.n	801047c <UART_AdvFeatureConfig+0x138>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	430a      	orrs	r2, r1
 801047a:	605a      	str	r2, [r3, #4]
 801047c:	bf00      	nop
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <UART_CheckIdleState>:
 8010488:	b580      	push	{r7, lr}
 801048a:	b098      	sub	sp, #96	; 0x60
 801048c:	af02      	add	r7, sp, #8
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8010498:	f7fa f8f4 	bl	800a684 <HAL_GetTick>
 801049c:	6578      	str	r0, [r7, #84]	; 0x54
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f003 0308 	and.w	r3, r3, #8
 80104a8:	2b08      	cmp	r3, #8
 80104aa:	d12f      	bne.n	801050c <UART_CheckIdleState+0x84>
 80104ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104b4:	2200      	movs	r2, #0
 80104b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 f88e 	bl	80105dc <UART_WaitOnFlagUntilTimeout>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d022      	beq.n	801050c <UART_CheckIdleState+0x84>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80104cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ce:	e853 3f00 	ldrex	r3, [r3]
 80104d2:	637b      	str	r3, [r7, #52]	; 0x34
 80104d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104da:	653b      	str	r3, [r7, #80]	; 0x50
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	461a      	mov	r2, r3
 80104e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104e4:	647b      	str	r3, [r7, #68]	; 0x44
 80104e6:	643a      	str	r2, [r7, #64]	; 0x40
 80104e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80104ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104ec:	e841 2300 	strex	r3, r2, [r1]
 80104f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1e6      	bne.n	80104c6 <UART_CheckIdleState+0x3e>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2220      	movs	r2, #32
 80104fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8010508:	2303      	movs	r3, #3
 801050a:	e063      	b.n	80105d4 <UART_CheckIdleState+0x14c>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f003 0304 	and.w	r3, r3, #4
 8010516:	2b04      	cmp	r3, #4
 8010518:	d149      	bne.n	80105ae <UART_CheckIdleState+0x126>
 801051a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010522:	2200      	movs	r2, #0
 8010524:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 f857 	bl	80105dc <UART_WaitOnFlagUntilTimeout>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d03c      	beq.n	80105ae <UART_CheckIdleState+0x126>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
 801053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053c:	e853 3f00 	ldrex	r3, [r3]
 8010540:	623b      	str	r3, [r7, #32]
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010548:	64fb      	str	r3, [r7, #76]	; 0x4c
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010552:	633b      	str	r3, [r7, #48]	; 0x30
 8010554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e6      	bne.n	8010534 <UART_CheckIdleState+0xac>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3308      	adds	r3, #8
 801056c:	613b      	str	r3, [r7, #16]
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	e853 3f00 	ldrex	r3, [r3]
 8010574:	60fb      	str	r3, [r7, #12]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f023 0301 	bic.w	r3, r3, #1
 801057c:	64bb      	str	r3, [r7, #72]	; 0x48
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	3308      	adds	r3, #8
 8010584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010586:	61fa      	str	r2, [r7, #28]
 8010588:	61bb      	str	r3, [r7, #24]
 801058a:	69b9      	ldr	r1, [r7, #24]
 801058c:	69fa      	ldr	r2, [r7, #28]
 801058e:	e841 2300 	strex	r3, r2, [r1]
 8010592:	617b      	str	r3, [r7, #20]
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1e5      	bne.n	8010566 <UART_CheckIdleState+0xde>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2220      	movs	r2, #32
 801059e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80105aa:	2303      	movs	r3, #3
 80105ac:	e012      	b.n	80105d4 <UART_CheckIdleState+0x14c>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2220      	movs	r2, #32
 80105b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2220      	movs	r2, #32
 80105ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	671a      	str	r2, [r3, #112]	; 0x70
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80105d2:	2300      	movs	r3, #0
 80105d4:	4618      	mov	r0, r3
 80105d6:	3758      	adds	r7, #88	; 0x58
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <UART_WaitOnFlagUntilTimeout>:
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	603b      	str	r3, [r7, #0]
 80105e8:	4613      	mov	r3, r2
 80105ea:	71fb      	strb	r3, [r7, #7]
 80105ec:	e04f      	b.n	801068e <UART_WaitOnFlagUntilTimeout+0xb2>
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f4:	d04b      	beq.n	801068e <UART_WaitOnFlagUntilTimeout+0xb2>
 80105f6:	f7fa f845 	bl	800a684 <HAL_GetTick>
 80105fa:	4602      	mov	r2, r0
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	69ba      	ldr	r2, [r7, #24]
 8010602:	429a      	cmp	r2, r3
 8010604:	d302      	bcc.n	801060c <UART_WaitOnFlagUntilTimeout+0x30>
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d101      	bne.n	8010610 <UART_WaitOnFlagUntilTimeout+0x34>
 801060c:	2303      	movs	r3, #3
 801060e:	e04e      	b.n	80106ae <UART_WaitOnFlagUntilTimeout+0xd2>
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f003 0304 	and.w	r3, r3, #4
 801061a:	2b00      	cmp	r3, #0
 801061c:	d037      	beq.n	801068e <UART_WaitOnFlagUntilTimeout+0xb2>
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	2b80      	cmp	r3, #128	; 0x80
 8010622:	d034      	beq.n	801068e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2b40      	cmp	r3, #64	; 0x40
 8010628:	d031      	beq.n	801068e <UART_WaitOnFlagUntilTimeout+0xb2>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	69db      	ldr	r3, [r3, #28]
 8010630:	f003 0308 	and.w	r3, r3, #8
 8010634:	2b08      	cmp	r3, #8
 8010636:	d110      	bne.n	801065a <UART_WaitOnFlagUntilTimeout+0x7e>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2208      	movs	r2, #8
 801063e:	621a      	str	r2, [r3, #32]
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f000 f838 	bl	80106b6 <UART_EndRxTransfer>
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2208      	movs	r2, #8
 801064a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2200      	movs	r2, #0
 8010652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8010656:	2301      	movs	r3, #1
 8010658:	e029      	b.n	80106ae <UART_WaitOnFlagUntilTimeout+0xd2>
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	69db      	ldr	r3, [r3, #28]
 8010660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010668:	d111      	bne.n	801068e <UART_WaitOnFlagUntilTimeout+0xb2>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010672:	621a      	str	r2, [r3, #32]
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 f81e 	bl	80106b6 <UART_EndRxTransfer>
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2220      	movs	r2, #32
 801067e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2200      	movs	r2, #0
 8010686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 801068a:	2303      	movs	r3, #3
 801068c:	e00f      	b.n	80106ae <UART_WaitOnFlagUntilTimeout+0xd2>
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	69da      	ldr	r2, [r3, #28]
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	4013      	ands	r3, r2
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	429a      	cmp	r2, r3
 801069c:	bf0c      	ite	eq
 801069e:	2301      	moveq	r3, #1
 80106a0:	2300      	movne	r3, #0
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	461a      	mov	r2, r3
 80106a6:	79fb      	ldrb	r3, [r7, #7]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d0a0      	beq.n	80105ee <UART_WaitOnFlagUntilTimeout+0x12>
 80106ac:	2300      	movs	r3, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <UART_EndRxTransfer>:
 80106b6:	b480      	push	{r7}
 80106b8:	b095      	sub	sp, #84	; 0x54
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	637b      	str	r3, [r7, #52]	; 0x34
 80106c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c6:	e853 3f00 	ldrex	r3, [r3]
 80106ca:	633b      	str	r3, [r7, #48]	; 0x30
 80106cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106dc:	643b      	str	r3, [r7, #64]	; 0x40
 80106de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80106e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106e4:	e841 2300 	strex	r3, r2, [r1]
 80106e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e6      	bne.n	80106be <UART_EndRxTransfer+0x8>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	3308      	adds	r3, #8
 80106f6:	623b      	str	r3, [r7, #32]
 80106f8:	6a3b      	ldr	r3, [r7, #32]
 80106fa:	e853 3f00 	ldrex	r3, [r3]
 80106fe:	61fb      	str	r3, [r7, #28]
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010706:	f023 0301 	bic.w	r3, r3, #1
 801070a:	64bb      	str	r3, [r7, #72]	; 0x48
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3308      	adds	r3, #8
 8010712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010716:	62bb      	str	r3, [r7, #40]	; 0x28
 8010718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801071a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801071c:	e841 2300 	strex	r3, r2, [r1]
 8010720:	627b      	str	r3, [r7, #36]	; 0x24
 8010722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010724:	2b00      	cmp	r3, #0
 8010726:	d1e3      	bne.n	80106f0 <UART_EndRxTransfer+0x3a>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801072c:	2b01      	cmp	r3, #1
 801072e:	d118      	bne.n	8010762 <UART_EndRxTransfer+0xac>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	60fb      	str	r3, [r7, #12]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	e853 3f00 	ldrex	r3, [r3]
 801073c:	60bb      	str	r3, [r7, #8]
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	f023 0310 	bic.w	r3, r3, #16
 8010744:	647b      	str	r3, [r7, #68]	; 0x44
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	461a      	mov	r2, r3
 801074c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801074e:	61bb      	str	r3, [r7, #24]
 8010750:	617a      	str	r2, [r7, #20]
 8010752:	6979      	ldr	r1, [r7, #20]
 8010754:	69ba      	ldr	r2, [r7, #24]
 8010756:	e841 2300 	strex	r3, r2, [r1]
 801075a:	613b      	str	r3, [r7, #16]
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d1e6      	bne.n	8010730 <UART_EndRxTransfer+0x7a>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2220      	movs	r2, #32
 8010766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	675a      	str	r2, [r3, #116]	; 0x74
 8010776:	bf00      	nop
 8010778:	3754      	adds	r7, #84	; 0x54
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr

08010782 <UART_DMAAbortOnError>:
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078e:	60fb      	str	r3, [r7, #12]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f7ff fabd 	bl	800fd20 <HAL_UART_ErrorCallback>
 80107a6:	bf00      	nop
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <UART_EndTransmit_IT>:
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b088      	sub	sp, #32
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	60fb      	str	r3, [r7, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	e853 3f00 	ldrex	r3, [r3]
 80107c2:	60bb      	str	r3, [r7, #8]
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107ca:	61fb      	str	r3, [r7, #28]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	461a      	mov	r2, r3
 80107d2:	69fb      	ldr	r3, [r7, #28]
 80107d4:	61bb      	str	r3, [r7, #24]
 80107d6:	617a      	str	r2, [r7, #20]
 80107d8:	6979      	ldr	r1, [r7, #20]
 80107da:	69ba      	ldr	r2, [r7, #24]
 80107dc:	e841 2300 	strex	r3, r2, [r1]
 80107e0:	613b      	str	r3, [r7, #16]
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1e6      	bne.n	80107b6 <UART_EndTransmit_IT+0x8>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2220      	movs	r2, #32
 80107ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	679a      	str	r2, [r3, #120]	; 0x78
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7ff fa88 	bl	800fd0c <HAL_UART_TxCpltCallback>
 80107fc:	bf00      	nop
 80107fe:	3720      	adds	r7, #32
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <HAL_UARTEx_WakeupCallback>:
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	bf00      	nop
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <HAL_UARTEx_RxFifoFullCallback>:
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr

0801082c <HAL_UARTEx_TxFifoEmptyCallback>:
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	bf00      	nop
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <HAL_UARTEx_DisableFifoMode>:
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801084e:	2b01      	cmp	r3, #1
 8010850:	d101      	bne.n	8010856 <HAL_UARTEx_DisableFifoMode+0x16>
 8010852:	2302      	movs	r3, #2
 8010854:	e027      	b.n	80108a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2224      	movs	r2, #36	; 0x24
 8010862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	60fb      	str	r3, [r7, #12]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f022 0201 	bic.w	r2, r2, #1
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010884:	60fb      	str	r3, [r7, #12]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	665a      	str	r2, [r3, #100]	; 0x64
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	601a      	str	r2, [r3, #0]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2220      	movs	r2, #32
 8010898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80108a4:	2300      	movs	r3, #0
 80108a6:	4618      	mov	r0, r3
 80108a8:	3714      	adds	r7, #20
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <HAL_UARTEx_SetTxFifoThreshold>:
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	6039      	str	r1, [r7, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d101      	bne.n	80108ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108c6:	2302      	movs	r3, #2
 80108c8:	e02d      	b.n	8010926 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2201      	movs	r2, #1
 80108ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2224      	movs	r2, #36	; 0x24
 80108d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f022 0201 	bic.w	r2, r2, #1
 80108f0:	601a      	str	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	430a      	orrs	r2, r1
 8010904:	609a      	str	r2, [r3, #8]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f850 	bl	80109ac <UARTEx_SetNbDataToProcess>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2220      	movs	r2, #32
 8010918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8010924:	2300      	movs	r3, #0
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <HAL_UARTEx_SetRxFifoThreshold>:
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
 8010936:	6039      	str	r1, [r7, #0]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801093e:	2b01      	cmp	r3, #1
 8010940:	d101      	bne.n	8010946 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010942:	2302      	movs	r3, #2
 8010944:	e02d      	b.n	80109a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2224      	movs	r2, #36	; 0x24
 8010952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60fb      	str	r3, [r7, #12]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f022 0201 	bic.w	r2, r2, #1
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	430a      	orrs	r2, r1
 8010980:	609a      	str	r2, [r3, #8]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 f812 	bl	80109ac <UARTEx_SetNbDataToProcess>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	601a      	str	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2220      	movs	r2, #32
 8010994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80109a0:	2300      	movs	r3, #0
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
	...

080109ac <UARTEx_SetNbDataToProcess>:
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d108      	bne.n	80109ce <UARTEx_SetNbDataToProcess+0x22>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80109cc:	e031      	b.n	8010a32 <UARTEx_SetNbDataToProcess+0x86>
 80109ce:	2308      	movs	r3, #8
 80109d0:	73fb      	strb	r3, [r7, #15]
 80109d2:	2308      	movs	r3, #8
 80109d4:	73bb      	strb	r3, [r7, #14]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	0e5b      	lsrs	r3, r3, #25
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	f003 0307 	and.w	r3, r3, #7
 80109e4:	737b      	strb	r3, [r7, #13]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	0f5b      	lsrs	r3, r3, #29
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	f003 0307 	and.w	r3, r3, #7
 80109f4:	733b      	strb	r3, [r7, #12]
 80109f6:	7bbb      	ldrb	r3, [r7, #14]
 80109f8:	7b3a      	ldrb	r2, [r7, #12]
 80109fa:	4911      	ldr	r1, [pc, #68]	; (8010a40 <UARTEx_SetNbDataToProcess+0x94>)
 80109fc:	5c8a      	ldrb	r2, [r1, r2]
 80109fe:	fb02 f303 	mul.w	r3, r2, r3
 8010a02:	7b3a      	ldrb	r2, [r7, #12]
 8010a04:	490f      	ldr	r1, [pc, #60]	; (8010a44 <UARTEx_SetNbDataToProcess+0x98>)
 8010a06:	5c8a      	ldrb	r2, [r1, r2]
 8010a08:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	7b7a      	ldrb	r2, [r7, #13]
 8010a18:	4909      	ldr	r1, [pc, #36]	; (8010a40 <UARTEx_SetNbDataToProcess+0x94>)
 8010a1a:	5c8a      	ldrb	r2, [r1, r2]
 8010a1c:	fb02 f303 	mul.w	r3, r2, r3
 8010a20:	7b7a      	ldrb	r2, [r7, #13]
 8010a22:	4908      	ldr	r1, [pc, #32]	; (8010a44 <UARTEx_SetNbDataToProcess+0x98>)
 8010a24:	5c8a      	ldrb	r2, [r1, r2]
 8010a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010a32:	bf00      	nop
 8010a34:	3714      	adds	r7, #20
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	08018b58 	.word	0x08018b58
 8010a44:	08018b60 	.word	0x08018b60

08010a48 <_ZN17AbstractAllocatorD1Ev>:
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	4a04      	ldr	r2, [pc, #16]	; (8010a64 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	08018aec 	.word	0x08018aec

08010a68 <_ZN17AbstractAllocatorD0Ev>:
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ffe9 	bl	8010a48 <_ZN17AbstractAllocatorD1Ev>
 8010a76:	2108      	movs	r1, #8
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f002 fe7a 	bl	8013772 <_ZdlPvj>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f002 fec5 	bl	8013824 <malloc>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	617b      	str	r3, [r7, #20]
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d105      	bne.n	8010ab0 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	3310      	adds	r3, #16
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7f7 faec 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3718      	adds	r7, #24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <_ZN15SystemAllocator4freeEP14CanardInstancePv>:
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	60f8      	str	r0, [r7, #12]
 8010ac2:	60b9      	str	r1, [r7, #8]
 8010ac4:	607a      	str	r2, [r7, #4]
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f002 feb4 	bl	8013834 <free>
 8010acc:	bf00      	nop
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <_ZN15SystemAllocatorD1Ev>:
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	4a05      	ldr	r2, [pc, #20]	; (8010af4 <_ZN15SystemAllocatorD1Ev+0x20>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff ffaf 	bl	8010a48 <_ZN17AbstractAllocatorD1Ev>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	08018b70 	.word	0x08018b70

08010af8 <_ZN15SystemAllocatorD0Ev>:
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7ff ffe7 	bl	8010ad4 <_ZN15SystemAllocatorD1Ev>
 8010b06:	2108      	movs	r1, #8
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f002 fe32 	bl	8013772 <_ZdlPvj>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
 8010b18:	b590      	push	{r4, r7, lr}
 8010b1a:	b08b      	sub	sp, #44	; 0x2c
 8010b1c:	af04      	add	r7, sp, #16
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	e9c7 2300 	strd	r2, r3, [r7]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	3308      	adds	r3, #8
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f876 	bl	8010c1a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	f103 040c 	add.w	r4, r3, #12
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3308      	adds	r3, #8
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f000 f86e 	bl	8010c1a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	f103 0120 	add.w	r1, r3, #32
 8010b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b46:	9302      	str	r3, [sp, #8]
 8010b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b54:	4620      	mov	r0, r4
 8010b56:	f002 fb65 	bl	8013224 <canardTxPush>
 8010b5a:	6178      	str	r0, [r7, #20]
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	f113 0f03 	cmn.w	r3, #3
 8010b62:	d106      	bne.n	8010b72 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	3310      	adds	r3, #16
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7f7 fa8c 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
 8010b70:	e008      	b.n	8010b84 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	da05      	bge.n	8010b84 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	3310      	adds	r3, #16
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7f7 fa82 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
 8010b84:	371c      	adds	r7, #28
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd90      	pop	{r4, r7, pc}
	...

08010b8c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
 8010b8c:	b590      	push	{r4, r7, lr}
 8010b8e:	b089      	sub	sp, #36	; 0x24
 8010b90:	af04      	add	r7, sp, #16
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	607a      	str	r2, [r7, #4]
 8010b96:	461a      	mov	r2, r3
 8010b98:	460b      	mov	r3, r1
 8010b9a:	817b      	strh	r3, [r7, #10]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	727b      	strb	r3, [r7, #9]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	3308      	adds	r3, #8
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f000 f838 	bl	8010c1a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010baa:	4603      	mov	r3, r0
 8010bac:	f103 0020 	add.w	r0, r3, #32
 8010bb0:	897c      	ldrh	r4, [r7, #10]
 8010bb2:	7a79      	ldrb	r1, [r7, #9]
 8010bb4:	6a3b      	ldr	r3, [r7, #32]
 8010bb6:	9302      	str	r3, [sp, #8]
 8010bb8:	4a0d      	ldr	r2, [pc, #52]	; (8010bf0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 8010bba:	f04f 0300 	mov.w	r3, #0
 8010bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4622      	mov	r2, r4
 8010bc6:	f002 fc7d 	bl	80134c4 <canardRxSubscribe>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	bf14      	ite	ne
 8010bd0:	2301      	movne	r3, #1
 8010bd2:	2300      	moveq	r3, #0
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d005      	beq.n	8010be6 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	3310      	adds	r3, #16
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f7 fa51 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
 8010be6:	bf00      	nop
 8010be8:	3714      	adds	r7, #20
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd90      	pop	{r4, r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	001e8480 	.word	0x001e8480

08010bf4 <_ZN15CyphalInterface4loopEv>:
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	3308      	adds	r3, #8
 8010c00:	4618      	mov	r0, r3
 8010c02:	f000 f80a 	bl	8010c1a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010c06:	4603      	mov	r3, r0
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	3208      	adds	r2, #8
 8010c0c:	6812      	ldr	r2, [r2, #0]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	4790      	blx	r2
 8010c12:	bf00      	nop
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b082      	sub	sp, #8
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 f805 	bl	8010c32 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b082      	sub	sp, #8
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f000 f805 	bl	8010c4c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8010c42:	4603      	mov	r3, r0
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 f806 	bl	8010c68 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f000 f805 	bl	8010c82 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 f805 	bl	8010c9a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010c90:	4603      	mov	r3, r0
 8010c92:	4618      	mov	r0, r3
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b082      	sub	sp, #8
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f000 f805 	bl	8010cb4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 8010caa:	4603      	mov	r3, r0
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <_Z16fdcan_dlc_to_lenm>:
 8010cca:	b480      	push	{r7}
 8010ccc:	b085      	sub	sp, #20
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	0c1b      	lsrs	r3, r3, #16
 8010cd6:	73fb      	strb	r3, [r7, #15]
 8010cd8:	7bfb      	ldrb	r3, [r7, #15]
 8010cda:	2b08      	cmp	r3, #8
 8010cdc:	d801      	bhi.n	8010ce2 <_Z16fdcan_dlc_to_lenm+0x18>
 8010cde:	7bfb      	ldrb	r3, [r7, #15]
 8010ce0:	e009      	b.n	8010cf6 <_Z16fdcan_dlc_to_lenm+0x2c>
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	2b0c      	cmp	r3, #12
 8010ce6:	d803      	bhi.n	8010cf0 <_Z16fdcan_dlc_to_lenm+0x26>
 8010ce8:	7bfb      	ldrb	r3, [r7, #15]
 8010cea:	3b06      	subs	r3, #6
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	e002      	b.n	8010cf6 <_Z16fdcan_dlc_to_lenm+0x2c>
 8010cf0:	7bfb      	ldrb	r3, [r7, #15]
 8010cf2:	3b0b      	subs	r3, #11
 8010cf4:	011b      	lsls	r3, r3, #4
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3714      	adds	r7, #20
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr
	...

08010d04 <_ZL12delay_cyclest>:
 8010d04:	f1a0 0308 	sub.w	r3, r0, #8
 8010d08:	4a07      	ldr	r2, [pc, #28]	; (8010d28 <_ZL12delay_cyclest+0x24>)
 8010d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8010d0e:	17db      	asrs	r3, r3, #31
 8010d10:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8010d14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8010d18:	d004      	beq.n	8010d24 <_ZL12delay_cyclest+0x20>
 8010d1a:	bf00      	nop
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8010d22:	d1fa      	bne.n	8010d1a <_ZL12delay_cyclest+0x16>
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop
 8010d28:	66666667 	.word	0x66666667

08010d2c <_ZN5G4CAN10len_to_dlcEj>:
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
 8010d36:	4a05      	ldr	r2, [pc, #20]	; (8010d4c <_ZN5G4CAN10len_to_dlcEj+0x20>)
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop
 8010d4c:	08018b80 	.word	0x08018b80

08010d50 <_ZN5G4CAN10dlc_to_lenEm>:
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
 8010d5a:	6838      	ldr	r0, [r7, #0]
 8010d5c:	f7ff ffb5 	bl	8010cca <_Z16fdcan_dlc_to_lenm>
 8010d60:	4603      	mov	r3, r0
 8010d62:	4618      	mov	r0, r3
 8010d64:	3708      	adds	r7, #8
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <_ZN5G4CAN8can_loopEv>:
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b086      	sub	sp, #24
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
 8010d72:	e017      	b.n	8010da4 <_ZN5G4CAN8can_loopEv+0x3a>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	330c      	adds	r3, #12
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f107 0208 	add.w	r2, r7, #8
 8010d80:	4611      	mov	r1, r2
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	4798      	blx	r3
 8010d86:	4603      	mov	r3, r0
 8010d88:	75fb      	strb	r3, [r7, #23]
 8010d8a:	7dfb      	ldrb	r3, [r7, #23]
 8010d8c:	f083 0301 	eor.w	r3, r3, #1
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d115      	bne.n	8010dc2 <_ZN5G4CAN8can_loopEv+0x58>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f107 0208 	add.w	r2, r7, #8
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 f904 	bl	8010fac <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da8:	2140      	movs	r1, #64	; 0x40
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fa fb9e 	bl	800b4ec <HAL_FDCAN_GetRxFifoFillLevel>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	bf14      	ite	ne
 8010db6:	2301      	movne	r3, #1
 8010db8:	2300      	moveq	r3, #0
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d1d9      	bne.n	8010d74 <_ZN5G4CAN8can_loopEv+0xa>
 8010dc0:	e000      	b.n	8010dc4 <_ZN5G4CAN8can_loopEv+0x5a>
 8010dc2:	bf00      	nop
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f000 f944 	bl	8011054 <_ZN19AbstractCANProvider17process_canard_txEv>
 8010dcc:	bf00      	nop
 8010dce:	3718      	adds	r7, #24
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <_ZN5G4CAN10read_frameEP11CanardFrame>:
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08e      	sub	sp, #56	; 0x38
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
 8010dde:	f04f 33ff 	mov.w	r3, #4294967295
 8010de2:	637b      	str	r3, [r7, #52]	; 0x34
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010de8:	2140      	movs	r1, #64	; 0x40
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fa fb7e 	bl	800b4ec <HAL_FDCAN_GetRxFifoFillLevel>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	bf14      	ite	ne
 8010df6:	2301      	movne	r3, #1
 8010df8:	2300      	moveq	r3, #0
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
 8010e00:	2340      	movs	r3, #64	; 0x40
 8010e02:	637b      	str	r3, [r7, #52]	; 0x34
 8010e04:	e00f      	b.n	8010e26 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0a:	2141      	movs	r1, #65	; 0x41
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fa fb6d 	bl	800b4ec <HAL_FDCAN_GetRxFifoFillLevel>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	bf14      	ite	ne
 8010e18:	2301      	movne	r3, #1
 8010e1a:	2300      	moveq	r3, #0
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d001      	beq.n	8010e26 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
 8010e22:	2341      	movs	r3, #65	; 0x41
 8010e24:	637b      	str	r3, [r7, #52]	; 0x34
 8010e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e2c:	d101      	bne.n	8010e32 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	e02e      	b.n	8010e90 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
 8010e32:	f107 030c 	add.w	r3, r7, #12
 8010e36:	2228      	movs	r2, #40	; 0x28
 8010e38:	2100      	movs	r1, #0
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f003 fd85 	bl	801494a <memset>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010e44:	f107 020c 	add.w	r2, r7, #12
 8010e48:	4b13      	ldr	r3, [pc, #76]	; (8010e98 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010e4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e4c:	f7fa fa74 	bl	800b338 <HAL_FDCAN_GetRxMessage>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	bf14      	ite	ne
 8010e56:	2301      	movne	r3, #1
 8010e58:	2300      	moveq	r3, #0
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d005      	beq.n	8010e6c <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e64:	3310      	adds	r3, #16
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f7 f90e 	bl	8008088 <_ZNKSt8functionIFvvEEclEv>
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	601a      	str	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3304      	adds	r3, #4
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	69ba      	ldr	r2, [r7, #24]
 8010e7c:	4611      	mov	r1, r2
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	4798      	blx	r3
 8010e82:	4602      	mov	r2, r0
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	605a      	str	r2, [r3, #4]
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	4a03      	ldr	r2, [pc, #12]	; (8010e98 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010e8c:	609a      	str	r2, [r3, #8]
 8010e8e:	2301      	movs	r3, #1
 8010e90:	4618      	mov	r0, r3
 8010e92:	3738      	adds	r7, #56	; 0x38
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	2000095c 	.word	0x2000095c

08010e9c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b08c      	sub	sp, #48	; 0x30
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	6a1b      	ldr	r3, [r3, #32]
 8010eaa:	60bb      	str	r3, [r7, #8]
 8010eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010eb0:	60fb      	str	r3, [r7, #12]
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	613b      	str	r3, [r7, #16]
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eba:	4a2a      	ldr	r2, [pc, #168]	; (8010f64 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 8010ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ec0:	617b      	str	r3, [r7, #20]
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	61bb      	str	r3, [r7, #24]
 8010ec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010eca:	61fb      	str	r3, [r7, #28]
 8010ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ed0:	623b      	str	r3, [r7, #32]
 8010ed2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8010ed8:	2300      	movs	r3, #0
 8010eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8010edc:	2300      	movs	r3, #0
 8010ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ee0:	e006      	b.n	8010ef0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
 8010ee2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8010ee6:	f7ff ff0d 	bl	8010d04 <_ZL12delay_cyclest>
 8010eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eec:	3301      	adds	r3, #1
 8010eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fa fb17 	bl	800b528 <HAL_FDCAN_GetTxFifoFreeLevel>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d004      	beq.n	8010f0a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	2b02      	cmp	r3, #2
 8010f04:	dc01      	bgt.n	8010f0a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010f06:	2301      	movs	r3, #1
 8010f08:	e000      	b.n	8010f0c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1e8      	bne.n	8010ee2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fa fb07 	bl	800b528 <HAL_FDCAN_GetTxFifoFreeLevel>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b03      	cmp	r3, #3
 8010f1e:	bf14      	ite	ne
 8010f20:	2301      	movne	r3, #1
 8010f22:	2300      	moveq	r3, #0
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d002      	beq.n	8010f30 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
 8010f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2e:	e014      	b.n	8010f5a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f38:	f107 0308 	add.w	r3, r7, #8
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	f7fa f9b7 	bl	800b2b0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	bf14      	ite	ne
 8010f48:	2301      	movne	r3, #1
 8010f4a:	2300      	moveq	r3, #0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d002      	beq.n	8010f58 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
 8010f52:	f04f 33ff 	mov.w	r3, #4294967295
 8010f56:	e000      	b.n	8010f5a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3730      	adds	r7, #48	; 0x30
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	08018b80 	.word	0x08018b80

08010f68 <_ZN5G4CAND1Ev>:
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	4a05      	ldr	r2, [pc, #20]	; (8010f88 <_ZN5G4CAND1Ev+0x20>)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	601a      	str	r2, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f000 f8b1 	bl	80110e0 <_ZN19AbstractCANProviderD1Ev>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	08018c8c 	.word	0x08018c8c

08010f8c <_ZN5G4CAND0Ev>:
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff ffe7 	bl	8010f68 <_ZN5G4CAND1Ev>
 8010f9a:	2144      	movs	r1, #68	; 0x44
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f002 fbe8 	bl	8013772 <_ZdlPvj>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
 8010fac:	b590      	push	{r4, r7, lr}
 8010fae:	b091      	sub	sp, #68	; 0x44
 8010fb0:	af04      	add	r7, sp, #16
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
 8010fb6:	f107 0310 	add.w	r3, r7, #16
 8010fba:	2200      	movs	r2, #0
 8010fbc:	601a      	str	r2, [r3, #0]
 8010fbe:	605a      	str	r2, [r3, #4]
 8010fc0:	609a      	str	r2, [r3, #8]
 8010fc2:	60da      	str	r2, [r3, #12]
 8010fc4:	611a      	str	r2, [r3, #16]
 8010fc6:	615a      	str	r2, [r3, #20]
 8010fc8:	2300      	movs	r3, #0
 8010fca:	60fb      	str	r3, [r7, #12]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f103 0420 	add.w	r4, r3, #32
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7f7 f86c 	bl	80080b4 <_ZNKSt8functionIFyvEEclEv>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	f107 010c 	add.w	r1, r7, #12
 8010fe4:	9103      	str	r1, [sp, #12]
 8010fe6:	f107 0110 	add.w	r1, r7, #16
 8010fea:	9102      	str	r1, [sp, #8]
 8010fec:	2100      	movs	r1, #0
 8010fee:	9101      	str	r1, [sp, #4]
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	9100      	str	r1, [sp, #0]
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	f002 f9d5 	bl	80133a4 <canardRxAccept>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011000:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011004:	2b01      	cmp	r3, #1
 8011006:	d10e      	bne.n	8011026 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6a1b      	ldr	r3, [r3, #32]
 801100c:	62bb      	str	r3, [r7, #40]	; 0x28
 801100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011010:	2b00      	cmp	r3, #0
 8011012:	d010      	beq.n	8011036 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 8011014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f107 0210 	add.w	r2, r7, #16
 801101e:	4611      	mov	r1, r2
 8011020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011022:	4798      	blx	r3
 8011024:	e007      	b.n	8011036 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
 8011026:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00e      	beq.n	801104c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 801102e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011032:	2b01      	cmp	r3, #1
 8011034:	dc0a      	bgt.n	801104c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	2b00      	cmp	r3, #0
 801103a:	d008      	beq.n	801104e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	3220      	adds	r2, #32
 8011044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011046:	4610      	mov	r0, r2
 8011048:	4798      	blx	r3
 801104a:	e000      	b.n	801104e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
 801104c:	bf00      	nop
 801104e:	3734      	adds	r7, #52	; 0x34
 8011050:	46bd      	mov	sp, r7
 8011052:	bd90      	pop	{r4, r7, pc}

08011054 <_ZN19AbstractCANProvider17process_canard_txEv>:
 8011054:	b5b0      	push	{r4, r5, r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	e036      	b.n	80110cc <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	330c      	adds	r3, #12
 8011062:	4618      	mov	r0, r3
 8011064:	f002 f968 	bl	8013338 <canardTxPeek>
 8011068:	60f8      	str	r0, [r7, #12]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8011070:	4313      	orrs	r3, r2
 8011072:	d00c      	beq.n	801108e <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801107e:	4618      	mov	r0, r3
 8011080:	f7f7 f818 	bl	80080b4 <_ZNKSt8functionIFyvEEclEv>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	42a2      	cmp	r2, r4
 801108a:	41ab      	sbcs	r3, r5
 801108c:	d201      	bcs.n	8011092 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 801108e:	2301      	movs	r3, #1
 8011090:	e000      	b.n	8011094 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 8011092:	2300      	movs	r3, #0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d00a      	beq.n	80110ae <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	3310      	adds	r3, #16
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	68f9      	ldr	r1, [r7, #12]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	4798      	blx	r3
 80110a6:	60b8      	str	r0, [r7, #8]
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	db13      	blt.n	80110d6 <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f103 0520 	add.w	r5, r3, #32
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	330c      	adds	r3, #12
 80110bc:	68f9      	ldr	r1, [r7, #12]
 80110be:	4618      	mov	r0, r3
 80110c0:	f002 f94f 	bl	8013362 <canardTxPop>
 80110c4:	4603      	mov	r3, r0
 80110c6:	4619      	mov	r1, r3
 80110c8:	4628      	mov	r0, r5
 80110ca:	47a0      	blx	r4
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	695b      	ldr	r3, [r3, #20]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1c4      	bne.n	801105e <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
 80110d4:	e000      	b.n	80110d8 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
 80110d6:	bf00      	nop
 80110d8:	bf00      	nop
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bdb0      	pop	{r4, r5, r7, pc}

080110e0 <_ZN19AbstractCANProviderD1Ev>:
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	4a04      	ldr	r2, [pc, #16]	; (80110fc <_ZN19AbstractCANProviderD1Ev+0x1c>)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	601a      	str	r2, [r3, #0]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4618      	mov	r0, r3
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	08018cb0 	.word	0x08018cb0

08011100 <_Z41__static_initialization_and_destruction_0ii>:
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d107      	bne.n	8011120 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011116:	4293      	cmp	r3, r2
 8011118:	d102      	bne.n	8011120 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801111a:	4803      	ldr	r0, [pc, #12]	; (8011128 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801111c:	f000 f806 	bl	801112c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	2000099c 	.word	0x2000099c

0801112c <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
 801112c:	b590      	push	{r4, r7, lr}
 801112e:	b085      	sub	sp, #20
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	4618      	mov	r0, r3
 8011138:	f7f7 ff1a 	bl	8008f70 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 801113c:	60f8      	str	r0, [r7, #12]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d00c      	beq.n	8011160 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f7f7 fddf 	bl	8008d0a <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 801114c:	4604      	mov	r4, r0
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f7f7 fe6c 	bl	8008e2c <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8011154:	4603      	mov	r3, r0
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4619      	mov	r1, r3
 801115a:	4620      	mov	r0, r4
 801115c:	f7f7 ff15 	bl	8008f8a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2200      	movs	r2, #0
 8011164:	601a      	str	r2, [r3, #0]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4618      	mov	r0, r3
 801116a:	3714      	adds	r7, #20
 801116c:	46bd      	mov	sp, r7
 801116e:	bd90      	pop	{r4, r7, pc}

08011170 <_GLOBAL__sub_I_queue>:
 8011170:	b580      	push	{r7, lr}
 8011172:	af00      	add	r7, sp, #0
 8011174:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011178:	2001      	movs	r0, #1
 801117a:	f7ff ffc1 	bl	8011100 <_Z41__static_initialization_and_destruction_0ii>
 801117e:	bd80      	pop	{r7, pc}

08011180 <_GLOBAL__sub_D_queue>:
 8011180:	b580      	push	{r7, lr}
 8011182:	af00      	add	r7, sp, #0
 8011184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011188:	2000      	movs	r0, #0
 801118a:	f7ff ffb9 	bl	8011100 <_Z41__static_initialization_and_destruction_0ii>
 801118e:	bd80      	pop	{r7, pc}

08011190 <cavlFindExtremum>:
 8011190:	b480      	push	{r7}
 8011192:	b085      	sub	sp, #20
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	460b      	mov	r3, r1
 801119a:	70fb      	strb	r3, [r7, #3]
 801119c:	2300      	movs	r3, #0
 801119e:	60fb      	str	r3, [r7, #12]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	60bb      	str	r3, [r7, #8]
 80111a4:	e007      	b.n	80111b6 <cavlFindExtremum+0x26>
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	60fb      	str	r3, [r7, #12]
 80111aa:	78fb      	ldrb	r3, [r7, #3]
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	4413      	add	r3, r2
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	60bb      	str	r3, [r7, #8]
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d1f4      	bne.n	80111a6 <cavlFindExtremum+0x16>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	4618      	mov	r0, r3
 80111c0:	3714      	adds	r7, #20
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr
	...

080111cc <cavlPrivateRotate>:
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	460b      	mov	r3, r1
 80111d6:	70fb      	strb	r3, [r7, #3]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d014      	beq.n	8011208 <cavlPrivateRotate+0x3c>
 80111de:	78fb      	ldrb	r3, [r7, #3]
 80111e0:	f083 0301 	eor.w	r3, r3, #1
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	4413      	add	r3, r2
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00a      	beq.n	8011208 <cavlPrivateRotate+0x3c>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80111f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111fc:	db04      	blt.n	8011208 <cavlPrivateRotate+0x3c>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011204:	2b01      	cmp	r3, #1
 8011206:	dd05      	ble.n	8011214 <cavlPrivateRotate+0x48>
 8011208:	4b2a      	ldr	r3, [pc, #168]	; (80112b4 <cavlPrivateRotate+0xe8>)
 801120a:	4a2b      	ldr	r2, [pc, #172]	; (80112b8 <cavlPrivateRotate+0xec>)
 801120c:	2162      	movs	r1, #98	; 0x62
 801120e:	482b      	ldr	r0, [pc, #172]	; (80112bc <cavlPrivateRotate+0xf0>)
 8011210:	f002 fad8 	bl	80137c4 <__assert_func>
 8011214:	78fb      	ldrb	r3, [r7, #3]
 8011216:	f083 0301 	eor.w	r3, r3, #1
 801121a:	b2db      	uxtb	r3, r3
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	60fb      	str	r3, [r7, #12]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00e      	beq.n	801124c <cavlPrivateRotate+0x80>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	4299      	cmp	r1, r3
 801123c:	bf0c      	ite	eq
 801123e:	2301      	moveq	r3, #1
 8011240:	2300      	movne	r3, #0
 8011242:	b2db      	uxtb	r3, r3
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	4413      	add	r3, r2
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	605a      	str	r2, [r3, #4]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	601a      	str	r2, [r3, #0]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	68fa      	ldr	r2, [r7, #12]
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	78fb      	ldrb	r3, [r7, #3]
 801125c:	78fa      	ldrb	r2, [r7, #3]
 801125e:	f082 0201 	eor.w	r2, r2, #1
 8011262:	b2d2      	uxtb	r2, r2
 8011264:	4610      	mov	r0, r2
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	4413      	add	r3, r2
 801126c:	685a      	ldr	r2, [r3, #4]
 801126e:	6879      	ldr	r1, [r7, #4]
 8011270:	0083      	lsls	r3, r0, #2
 8011272:	440b      	add	r3, r1
 8011274:	605a      	str	r2, [r3, #4]
 8011276:	78fb      	ldrb	r3, [r7, #3]
 8011278:	f083 0301 	eor.w	r3, r3, #1
 801127c:	b2db      	uxtb	r3, r3
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	009b      	lsls	r3, r3, #2
 8011282:	4413      	add	r3, r2
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d009      	beq.n	801129e <cavlPrivateRotate+0xd2>
 801128a:	78fb      	ldrb	r3, [r7, #3]
 801128c:	f083 0301 	eor.w	r3, r3, #1
 8011290:	b2db      	uxtb	r3, r3
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	78fb      	ldrb	r3, [r7, #3]
 80112a0:	68fa      	ldr	r2, [r7, #12]
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	4413      	add	r3, r2
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	605a      	str	r2, [r3, #4]
 80112aa:	bf00      	nop
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	08017ff8 	.word	0x08017ff8
 80112b8:	08019038 	.word	0x08019038
 80112bc:	08018040 	.word	0x08018040

080112c0 <cavlPrivateAdjustBalance>:
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	460b      	mov	r3, r1
 80112ca:	70fb      	strb	r3, [r7, #3]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d00a      	beq.n	80112e8 <cavlPrivateAdjustBalance+0x28>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112dc:	db04      	blt.n	80112e8 <cavlPrivateAdjustBalance+0x28>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	dd05      	ble.n	80112f4 <cavlPrivateAdjustBalance+0x34>
 80112e8:	4b61      	ldr	r3, [pc, #388]	; (8011470 <cavlPrivateAdjustBalance+0x1b0>)
 80112ea:	4a62      	ldr	r2, [pc, #392]	; (8011474 <cavlPrivateAdjustBalance+0x1b4>)
 80112ec:	2177      	movs	r1, #119	; 0x77
 80112ee:	4862      	ldr	r0, [pc, #392]	; (8011478 <cavlPrivateAdjustBalance+0x1b8>)
 80112f0:	f002 fa68 	bl	80137c4 <__assert_func>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	617b      	str	r3, [r7, #20]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	78fa      	ldrb	r2, [r7, #3]
 8011302:	2a00      	cmp	r2, #0
 8011304:	d001      	beq.n	801130a <cavlPrivateAdjustBalance+0x4a>
 8011306:	2201      	movs	r2, #1
 8011308:	e000      	b.n	801130c <cavlPrivateAdjustBalance+0x4c>
 801130a:	22ff      	movs	r2, #255	; 0xff
 801130c:	4413      	add	r3, r2
 801130e:	b2db      	uxtb	r3, r3
 8011310:	74fb      	strb	r3, [r7, #19]
 8011312:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131a:	db04      	blt.n	8011326 <cavlPrivateAdjustBalance+0x66>
 801131c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011320:	2b01      	cmp	r3, #1
 8011322:	f340 809c 	ble.w	801145e <cavlPrivateAdjustBalance+0x19e>
 8011326:	7cfb      	ldrb	r3, [r7, #19]
 8011328:	09db      	lsrs	r3, r3, #7
 801132a:	74bb      	strb	r3, [r7, #18]
 801132c:	7cbb      	ldrb	r3, [r7, #18]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <cavlPrivateAdjustBalance+0x76>
 8011332:	2301      	movs	r3, #1
 8011334:	e001      	b.n	801133a <cavlPrivateAdjustBalance+0x7a>
 8011336:	f04f 33ff 	mov.w	r3, #4294967295
 801133a:	747b      	strb	r3, [r7, #17]
 801133c:	7cbb      	ldrb	r3, [r7, #18]
 801133e:	f083 0301 	eor.w	r3, r3, #1
 8011342:	b2db      	uxtb	r3, r3
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4413      	add	r3, r2
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	60fb      	str	r3, [r7, #12]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d105      	bne.n	8011360 <cavlPrivateAdjustBalance+0xa0>
 8011354:	4b49      	ldr	r3, [pc, #292]	; (801147c <cavlPrivateAdjustBalance+0x1bc>)
 8011356:	4a47      	ldr	r2, [pc, #284]	; (8011474 <cavlPrivateAdjustBalance+0x1b4>)
 8011358:	217f      	movs	r1, #127	; 0x7f
 801135a:	4847      	ldr	r0, [pc, #284]	; (8011478 <cavlPrivateAdjustBalance+0x1b8>)
 801135c:	f002 fa32 	bl	80137c4 <__assert_func>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011366:	461a      	mov	r2, r3
 8011368:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801136c:	fb02 f303 	mul.w	r3, r2, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	dc1c      	bgt.n	80113ae <cavlPrivateAdjustBalance+0xee>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	617b      	str	r3, [r7, #20]
 8011378:	7cbb      	ldrb	r3, [r7, #18]
 801137a:	4619      	mov	r1, r3
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ff ff25 	bl	80111cc <cavlPrivateRotate>
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d109      	bne.n	80113a0 <cavlPrivateAdjustBalance+0xe0>
 801138c:	7c7b      	ldrb	r3, [r7, #17]
 801138e:	425b      	negs	r3, r3
 8011390:	b2db      	uxtb	r3, r3
 8011392:	b25a      	sxtb	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	731a      	strb	r2, [r3, #12]
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	7c7a      	ldrb	r2, [r7, #17]
 801139c:	731a      	strb	r2, [r3, #12]
 801139e:	e061      	b.n	8011464 <cavlPrivateAdjustBalance+0x1a4>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	731a      	strb	r2, [r3, #12]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2200      	movs	r2, #0
 80113aa:	731a      	strb	r2, [r3, #12]
 80113ac:	e05a      	b.n	8011464 <cavlPrivateAdjustBalance+0x1a4>
 80113ae:	7cbb      	ldrb	r3, [r7, #18]
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	4413      	add	r3, r2
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	60bb      	str	r3, [r7, #8]
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d105      	bne.n	80113cc <cavlPrivateAdjustBalance+0x10c>
 80113c0:	4b2f      	ldr	r3, [pc, #188]	; (8011480 <cavlPrivateAdjustBalance+0x1c0>)
 80113c2:	4a2c      	ldr	r2, [pc, #176]	; (8011474 <cavlPrivateAdjustBalance+0x1b4>)
 80113c4:	2192      	movs	r1, #146	; 0x92
 80113c6:	482c      	ldr	r0, [pc, #176]	; (8011478 <cavlPrivateAdjustBalance+0x1b8>)
 80113c8:	f002 f9fc 	bl	80137c4 <__assert_func>
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	617b      	str	r3, [r7, #20]
 80113d0:	7cbb      	ldrb	r3, [r7, #18]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	bf14      	ite	ne
 80113d6:	2301      	movne	r3, #1
 80113d8:	2300      	moveq	r3, #0
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	f083 0301 	eor.w	r3, r3, #1
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	f003 0301 	and.w	r3, r3, #1
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	4619      	mov	r1, r3
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7ff feee 	bl	80111cc <cavlPrivateRotate>
 80113f0:	7cbb      	ldrb	r3, [r7, #18]
 80113f2:	4619      	mov	r1, r3
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7ff fee9 	bl	80111cc <cavlPrivateRotate>
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011400:	461a      	mov	r2, r3
 8011402:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011406:	fb02 f303 	mul.w	r3, r2, r3
 801140a:	2b00      	cmp	r3, #0
 801140c:	da09      	bge.n	8011422 <cavlPrivateAdjustBalance+0x162>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	7c7a      	ldrb	r2, [r7, #17]
 8011412:	731a      	strb	r2, [r3, #12]
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	2200      	movs	r2, #0
 8011418:	731a      	strb	r2, [r3, #12]
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	731a      	strb	r2, [r3, #12]
 8011420:	e020      	b.n	8011464 <cavlPrivateAdjustBalance+0x1a4>
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011428:	461a      	mov	r2, r3
 801142a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801142e:	fb02 f303 	mul.w	r3, r2, r3
 8011432:	2b00      	cmp	r3, #0
 8011434:	dd0c      	ble.n	8011450 <cavlPrivateAdjustBalance+0x190>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	731a      	strb	r2, [r3, #12]
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	2200      	movs	r2, #0
 8011440:	731a      	strb	r2, [r3, #12]
 8011442:	7c7b      	ldrb	r3, [r7, #17]
 8011444:	425b      	negs	r3, r3
 8011446:	b2db      	uxtb	r3, r3
 8011448:	b25a      	sxtb	r2, r3
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	731a      	strb	r2, [r3, #12]
 801144e:	e009      	b.n	8011464 <cavlPrivateAdjustBalance+0x1a4>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	731a      	strb	r2, [r3, #12]
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2200      	movs	r2, #0
 801145a:	731a      	strb	r2, [r3, #12]
 801145c:	e002      	b.n	8011464 <cavlPrivateAdjustBalance+0x1a4>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	7cfa      	ldrb	r2, [r7, #19]
 8011462:	731a      	strb	r2, [r3, #12]
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	0801806c 	.word	0x0801806c
 8011474:	0801901c 	.word	0x0801901c
 8011478:	08018040 	.word	0x08018040
 801147c:	0801809c 	.word	0x0801809c
 8011480:	080180a8 	.word	0x080180a8

08011484 <cavlPrivateRetraceOnGrowth>:
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d004      	beq.n	801149c <cavlPrivateRetraceOnGrowth+0x18>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d005      	beq.n	80114a8 <cavlPrivateRetraceOnGrowth+0x24>
 801149c:	4b23      	ldr	r3, [pc, #140]	; (801152c <cavlPrivateRetraceOnGrowth+0xa8>)
 801149e:	4a24      	ldr	r2, [pc, #144]	; (8011530 <cavlPrivateRetraceOnGrowth+0xac>)
 80114a0:	21b5      	movs	r1, #181	; 0xb5
 80114a2:	4824      	ldr	r0, [pc, #144]	; (8011534 <cavlPrivateRetraceOnGrowth+0xb0>)
 80114a4:	f002 f98e 	bl	80137c4 <__assert_func>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	617b      	str	r3, [r7, #20]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	613b      	str	r3, [r7, #16]
 80114b2:	e023      	b.n	80114fc <cavlPrivateRetraceOnGrowth+0x78>
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	689b      	ldr	r3, [r3, #8]
 80114b8:	697a      	ldr	r2, [r7, #20]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	bf0c      	ite	eq
 80114be:	2301      	moveq	r3, #1
 80114c0:	2300      	movne	r3, #0
 80114c2:	73fb      	strb	r3, [r7, #15]
 80114c4:	7bfb      	ldrb	r3, [r7, #15]
 80114c6:	693a      	ldr	r2, [r7, #16]
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	4413      	add	r3, r2
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d005      	beq.n	80114e0 <cavlPrivateRetraceOnGrowth+0x5c>
 80114d4:	4b18      	ldr	r3, [pc, #96]	; (8011538 <cavlPrivateRetraceOnGrowth+0xb4>)
 80114d6:	4a16      	ldr	r2, [pc, #88]	; (8011530 <cavlPrivateRetraceOnGrowth+0xac>)
 80114d8:	21bb      	movs	r1, #187	; 0xbb
 80114da:	4816      	ldr	r0, [pc, #88]	; (8011534 <cavlPrivateRetraceOnGrowth+0xb0>)
 80114dc:	f002 f972 	bl	80137c4 <__assert_func>
 80114e0:	7bfb      	ldrb	r3, [r7, #15]
 80114e2:	4619      	mov	r1, r3
 80114e4:	6938      	ldr	r0, [r7, #16]
 80114e6:	f7ff feeb 	bl	80112c0 <cavlPrivateAdjustBalance>
 80114ea:	6178      	str	r0, [r7, #20]
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	613b      	str	r3, [r7, #16]
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d003      	beq.n	8011504 <cavlPrivateRetraceOnGrowth+0x80>
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1d8      	bne.n	80114b4 <cavlPrivateRetraceOnGrowth+0x30>
 8011502:	e000      	b.n	8011506 <cavlPrivateRetraceOnGrowth+0x82>
 8011504:	bf00      	nop
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d105      	bne.n	8011518 <cavlPrivateRetraceOnGrowth+0x94>
 801150c:	4b0b      	ldr	r3, [pc, #44]	; (801153c <cavlPrivateRetraceOnGrowth+0xb8>)
 801150e:	4a08      	ldr	r2, [pc, #32]	; (8011530 <cavlPrivateRetraceOnGrowth+0xac>)
 8011510:	21c3      	movs	r1, #195	; 0xc3
 8011512:	4808      	ldr	r0, [pc, #32]	; (8011534 <cavlPrivateRetraceOnGrowth+0xb0>)
 8011514:	f002 f956 	bl	80137c4 <__assert_func>
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d101      	bne.n	8011522 <cavlPrivateRetraceOnGrowth+0x9e>
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	e000      	b.n	8011524 <cavlPrivateRetraceOnGrowth+0xa0>
 8011522:	2300      	movs	r3, #0
 8011524:	4618      	mov	r0, r3
 8011526:	3718      	adds	r7, #24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	080180b4 	.word	0x080180b4
 8011530:	08019000 	.word	0x08019000
 8011534:	08018040 	.word	0x08018040
 8011538:	080180d8 	.word	0x080180d8
 801153c:	080180e8 	.word	0x080180e8

08011540 <cavlSearch>:
 8011540:	b580      	push	{r7, lr}
 8011542:	b08a      	sub	sp, #40	; 0x28
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
 801154e:	2300      	movs	r3, #0
 8011550:	627b      	str	r3, [r7, #36]	; 0x24
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d065      	beq.n	8011624 <cavlSearch+0xe4>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d062      	beq.n	8011624 <cavlSearch+0xe4>
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	623b      	str	r3, [r7, #32]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	61fb      	str	r3, [r7, #28]
 8011568:	e02f      	b.n	80115ca <cavlSearch+0x8a>
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	681a      	ldr	r2, [r3, #0]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4611      	mov	r1, r2
 8011572:	68b8      	ldr	r0, [r7, #8]
 8011574:	4798      	blx	r3
 8011576:	4603      	mov	r3, r0
 8011578:	76fb      	strb	r3, [r7, #27]
 801157a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d103      	bne.n	801158a <cavlSearch+0x4a>
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	627b      	str	r3, [r7, #36]	; 0x24
 8011588:	e023      	b.n	80115d2 <cavlSearch+0x92>
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	623b      	str	r3, [r7, #32]
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011598:	2b00      	cmp	r3, #0
 801159a:	bfcc      	ite	gt
 801159c:	2301      	movgt	r3, #1
 801159e:	2300      	movle	r3, #0
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	4413      	add	r3, r2
 80115a6:	3304      	adds	r3, #4
 80115a8:	61fb      	str	r3, [r7, #28]
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00b      	beq.n	80115ca <cavlSearch+0x8a>
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	6a3a      	ldr	r2, [r7, #32]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d005      	beq.n	80115ca <cavlSearch+0x8a>
 80115be:	4b1c      	ldr	r3, [pc, #112]	; (8011630 <cavlSearch+0xf0>)
 80115c0:	4a1c      	ldr	r2, [pc, #112]	; (8011634 <cavlSearch+0xf4>)
 80115c2:	21db      	movs	r1, #219	; 0xdb
 80115c4:	481c      	ldr	r0, [pc, #112]	; (8011638 <cavlSearch+0xf8>)
 80115c6:	f002 f8fd 	bl	80137c4 <__assert_func>
 80115ca:	69fb      	ldr	r3, [r7, #28]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1cb      	bne.n	801156a <cavlSearch+0x2a>
 80115d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d125      	bne.n	8011624 <cavlSearch+0xe4>
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d004      	beq.n	80115e8 <cavlSearch+0xa8>
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	68b8      	ldr	r0, [r7, #8]
 80115e2:	4798      	blx	r3
 80115e4:	4603      	mov	r3, r0
 80115e6:	e000      	b.n	80115ea <cavlSearch+0xaa>
 80115e8:	2300      	movs	r3, #0
 80115ea:	627b      	str	r3, [r7, #36]	; 0x24
 80115ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d018      	beq.n	8011624 <cavlSearch+0xe4>
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115f6:	601a      	str	r2, [r3, #0]
 80115f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fa:	2200      	movs	r2, #0
 80115fc:	605a      	str	r2, [r3, #4]
 80115fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011600:	2200      	movs	r2, #0
 8011602:	609a      	str	r2, [r3, #8]
 8011604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011606:	6a3a      	ldr	r2, [r7, #32]
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160c:	2200      	movs	r2, #0
 801160e:	731a      	strb	r2, [r3, #12]
 8011610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011612:	f7ff ff37 	bl	8011484 <cavlPrivateRetraceOnGrowth>
 8011616:	6178      	str	r0, [r7, #20]
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d002      	beq.n	8011624 <cavlSearch+0xe4>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	697a      	ldr	r2, [r7, #20]
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011626:	4618      	mov	r0, r3
 8011628:	3728      	adds	r7, #40	; 0x28
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	080180f4 	.word	0x080180f4
 8011634:	08018ff4 	.word	0x08018ff4
 8011638:	08018040 	.word	0x08018040

0801163c <cavlRemove>:
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 8116 	beq.w	801187a <cavlRemove+0x23e>
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	f000 8112 	beq.w	801187a <cavlRemove+0x23e>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d105      	bne.n	801166a <cavlRemove+0x2e>
 801165e:	4b89      	ldr	r3, [pc, #548]	; (8011884 <cavlRemove+0x248>)
 8011660:	4a89      	ldr	r2, [pc, #548]	; (8011888 <cavlRemove+0x24c>)
 8011662:	21f6      	movs	r1, #246	; 0xf6
 8011664:	4889      	ldr	r0, [pc, #548]	; (801188c <cavlRemove+0x250>)
 8011666:	f002 f8ad 	bl	80137c4 <__assert_func>
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d10a      	bne.n	8011688 <cavlRemove+0x4c>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	683a      	ldr	r2, [r7, #0]
 8011678:	429a      	cmp	r2, r3
 801167a:	d005      	beq.n	8011688 <cavlRemove+0x4c>
 801167c:	4b84      	ldr	r3, [pc, #528]	; (8011890 <cavlRemove+0x254>)
 801167e:	4a82      	ldr	r2, [pc, #520]	; (8011888 <cavlRemove+0x24c>)
 8011680:	21f7      	movs	r1, #247	; 0xf7
 8011682:	4882      	ldr	r0, [pc, #520]	; (801188c <cavlRemove+0x250>)
 8011684:	f002 f89e 	bl	80137c4 <__assert_func>
 8011688:	2300      	movs	r3, #0
 801168a:	61fb      	str	r3, [r7, #28]
 801168c:	2300      	movs	r3, #0
 801168e:	76fb      	strb	r3, [r7, #27]
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d073      	beq.n	8011780 <cavlRemove+0x144>
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d06f      	beq.n	8011780 <cavlRemove+0x144>
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	2100      	movs	r1, #0
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ff fd72 	bl	8011190 <cavlFindExtremum>
 80116ac:	6178      	str	r0, [r7, #20]
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d007      	beq.n	80116c4 <cavlRemove+0x88>
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d103      	bne.n	80116c4 <cavlRemove+0x88>
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d105      	bne.n	80116d0 <cavlRemove+0x94>
 80116c4:	4b73      	ldr	r3, [pc, #460]	; (8011894 <cavlRemove+0x258>)
 80116c6:	4a70      	ldr	r2, [pc, #448]	; (8011888 <cavlRemove+0x24c>)
 80116c8:	21ff      	movs	r1, #255	; 0xff
 80116ca:	4870      	ldr	r0, [pc, #448]	; (801188c <cavlRemove+0x250>)
 80116cc:	f002 f87a 	bl	80137c4 <__assert_func>
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	731a      	strb	r2, [r3, #12]
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	685a      	ldr	r2, [r3, #4]
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	605a      	str	r2, [r3, #4]
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	601a      	str	r2, [r3, #0]
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	683a      	ldr	r2, [r7, #0]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d025      	beq.n	8011740 <cavlRemove+0x104>
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	61fb      	str	r3, [r7, #28]
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	697a      	ldr	r2, [r7, #20]
 8011700:	429a      	cmp	r2, r3
 8011702:	d006      	beq.n	8011712 <cavlRemove+0xd6>
 8011704:	4b64      	ldr	r3, [pc, #400]	; (8011898 <cavlRemove+0x25c>)
 8011706:	4a60      	ldr	r2, [pc, #384]	; (8011888 <cavlRemove+0x24c>)
 8011708:	f44f 7183 	mov.w	r1, #262	; 0x106
 801170c:	485f      	ldr	r0, [pc, #380]	; (801188c <cavlRemove+0x250>)
 801170e:	f002 f859 	bl	80137c4 <__assert_func>
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	689a      	ldr	r2, [r3, #8]
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	605a      	str	r2, [r3, #4]
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d003      	beq.n	801172a <cavlRemove+0xee>
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	69fa      	ldr	r2, [r7, #28]
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	689a      	ldr	r2, [r3, #8]
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	609a      	str	r2, [r3, #8]
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	601a      	str	r2, [r3, #0]
 801173a:	2300      	movs	r3, #0
 801173c:	76fb      	strb	r3, [r7, #27]
 801173e:	e003      	b.n	8011748 <cavlRemove+0x10c>
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	61fb      	str	r3, [r7, #28]
 8011744:	2301      	movs	r3, #1
 8011746:	76fb      	strb	r3, [r7, #27]
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d00f      	beq.n	8011778 <cavlRemove+0x13c>
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	6839      	ldr	r1, [r7, #0]
 8011764:	4299      	cmp	r1, r3
 8011766:	bf0c      	ite	eq
 8011768:	2301      	moveq	r3, #1
 801176a:	2300      	movne	r3, #0
 801176c:	b2db      	uxtb	r3, r3
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4413      	add	r3, r2
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	605a      	str	r2, [r3, #4]
 8011776:	e046      	b.n	8011806 <cavlRemove+0x1ca>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	601a      	str	r2, [r3, #0]
 801177e:	e042      	b.n	8011806 <cavlRemove+0x1ca>
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	61fb      	str	r3, [r7, #28]
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	689b      	ldr	r3, [r3, #8]
 801178a:	2b00      	cmp	r3, #0
 801178c:	bf14      	ite	ne
 801178e:	2301      	movne	r3, #1
 8011790:	2300      	moveq	r3, #0
 8011792:	74fb      	strb	r3, [r7, #19]
 8011794:	7cfb      	ldrb	r3, [r7, #19]
 8011796:	683a      	ldr	r2, [r7, #0]
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4413      	add	r3, r2
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d006      	beq.n	80117b0 <cavlRemove+0x174>
 80117a2:	7cfb      	ldrb	r3, [r7, #19]
 80117a4:	683a      	ldr	r2, [r7, #0]
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	4413      	add	r3, r2
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	69fa      	ldr	r2, [r7, #28]
 80117ae:	601a      	str	r2, [r3, #0]
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d020      	beq.n	80117f8 <cavlRemove+0x1bc>
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	683a      	ldr	r2, [r7, #0]
 80117bc:	429a      	cmp	r2, r3
 80117be:	bf0c      	ite	eq
 80117c0:	2301      	moveq	r3, #1
 80117c2:	2300      	movne	r3, #0
 80117c4:	76fb      	strb	r3, [r7, #27]
 80117c6:	7cfb      	ldrb	r3, [r7, #19]
 80117c8:	7ef8      	ldrb	r0, [r7, #27]
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	685a      	ldr	r2, [r3, #4]
 80117d2:	69f9      	ldr	r1, [r7, #28]
 80117d4:	0083      	lsls	r3, r0, #2
 80117d6:	440b      	add	r3, r1
 80117d8:	605a      	str	r2, [r3, #4]
 80117da:	7efb      	ldrb	r3, [r7, #27]
 80117dc:	69fa      	ldr	r2, [r7, #28]
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4413      	add	r3, r2
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00e      	beq.n	8011806 <cavlRemove+0x1ca>
 80117e8:	7efb      	ldrb	r3, [r7, #27]
 80117ea:	69fa      	ldr	r2, [r7, #28]
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	4413      	add	r3, r2
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	69fa      	ldr	r2, [r7, #28]
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	e006      	b.n	8011806 <cavlRemove+0x1ca>
 80117f8:	7cfb      	ldrb	r3, [r7, #19]
 80117fa:	683a      	ldr	r2, [r7, #0]
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4413      	add	r3, r2
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	601a      	str	r2, [r3, #0]
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d036      	beq.n	801187a <cavlRemove+0x23e>
 801180c:	2300      	movs	r3, #0
 801180e:	60fb      	str	r3, [r7, #12]
 8011810:	7efb      	ldrb	r3, [r7, #27]
 8011812:	2b00      	cmp	r3, #0
 8011814:	bf14      	ite	ne
 8011816:	2301      	movne	r3, #1
 8011818:	2300      	moveq	r3, #0
 801181a:	b2db      	uxtb	r3, r3
 801181c:	f083 0301 	eor.w	r3, r3, #1
 8011820:	b2db      	uxtb	r3, r3
 8011822:	f003 0301 	and.w	r3, r3, #1
 8011826:	b2db      	uxtb	r3, r3
 8011828:	4619      	mov	r1, r3
 801182a:	69f8      	ldr	r0, [r7, #28]
 801182c:	f7ff fd48 	bl	80112c0 <cavlPrivateAdjustBalance>
 8011830:	60f8      	str	r0, [r7, #12]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	61fb      	str	r3, [r7, #28]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d10b      	bne.n	801185a <cavlRemove+0x21e>
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d008      	beq.n	801185a <cavlRemove+0x21e>
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	429a      	cmp	r2, r3
 8011850:	bf0c      	ite	eq
 8011852:	2301      	moveq	r3, #1
 8011854:	2300      	movne	r3, #0
 8011856:	76fb      	strb	r3, [r7, #27]
 8011858:	e7da      	b.n	8011810 <cavlRemove+0x1d4>
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d10c      	bne.n	801187a <cavlRemove+0x23e>
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d106      	bne.n	8011874 <cavlRemove+0x238>
 8011866:	4b0d      	ldr	r3, [pc, #52]	; (801189c <cavlRemove+0x260>)
 8011868:	4a07      	ldr	r2, [pc, #28]	; (8011888 <cavlRemove+0x24c>)
 801186a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801186e:	4807      	ldr	r0, [pc, #28]	; (801188c <cavlRemove+0x250>)
 8011870:	f001 ffa8 	bl	80137c4 <__assert_func>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	601a      	str	r2, [r3, #0]
 801187a:	bf00      	nop
 801187c:	3720      	adds	r7, #32
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	08018118 	.word	0x08018118
 8011888:	0801907c 	.word	0x0801907c
 801188c:	08018040 	.word	0x08018040
 8011890:	08018128 	.word	0x08018128
 8011894:	08018150 	.word	0x08018150
 8011898:	08018188 	.word	0x08018188
 801189c:	080180e8 	.word	0x080180e8

080118a0 <avlTrivialFactory>:
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4618      	mov	r0, r3
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr
	...

080118b8 <crcAddByte>:
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	4603      	mov	r3, r0
 80118c0:	460a      	mov	r2, r1
 80118c2:	80fb      	strh	r3, [r7, #6]
 80118c4:	4613      	mov	r3, r2
 80118c6:	717b      	strb	r3, [r7, #5]
 80118c8:	88fb      	ldrh	r3, [r7, #6]
 80118ca:	021b      	lsls	r3, r3, #8
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	88fb      	ldrh	r3, [r7, #6]
 80118d0:	0a1b      	lsrs	r3, r3, #8
 80118d2:	b299      	uxth	r1, r3
 80118d4:	797b      	ldrb	r3, [r7, #5]
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	404b      	eors	r3, r1
 80118da:	b29b      	uxth	r3, r3
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	4905      	ldr	r1, [pc, #20]	; (80118f4 <crcAddByte+0x3c>)
 80118e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80118e4:	4053      	eors	r3, r2
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	4618      	mov	r0, r3
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr
 80118f4:	08018ccc 	.word	0x08018ccc

080118f8 <crcAdd>:
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b088      	sub	sp, #32
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
 8011904:	81fb      	strh	r3, [r7, #14]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d108      	bne.n	801191e <crcAdd+0x26>
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d005      	beq.n	801191e <crcAdd+0x26>
 8011912:	4b12      	ldr	r3, [pc, #72]	; (801195c <crcAdd+0x64>)
 8011914:	4a12      	ldr	r2, [pc, #72]	; (8011960 <crcAdd+0x68>)
 8011916:	2185      	movs	r1, #133	; 0x85
 8011918:	4812      	ldr	r0, [pc, #72]	; (8011964 <crcAdd+0x6c>)
 801191a:	f001 ff53 	bl	80137c4 <__assert_func>
 801191e:	89fb      	ldrh	r3, [r7, #14]
 8011920:	83fb      	strh	r3, [r7, #30]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	61bb      	str	r3, [r7, #24]
 8011926:	2300      	movs	r3, #0
 8011928:	617b      	str	r3, [r7, #20]
 801192a:	e00e      	b.n	801194a <crcAdd+0x52>
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	781a      	ldrb	r2, [r3, #0]
 8011930:	8bfb      	ldrh	r3, [r7, #30]
 8011932:	4611      	mov	r1, r2
 8011934:	4618      	mov	r0, r3
 8011936:	f7ff ffbf 	bl	80118b8 <crcAddByte>
 801193a:	4603      	mov	r3, r0
 801193c:	83fb      	strh	r3, [r7, #30]
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	3301      	adds	r3, #1
 8011942:	61bb      	str	r3, [r7, #24]
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	3301      	adds	r3, #1
 8011948:	617b      	str	r3, [r7, #20]
 801194a:	697a      	ldr	r2, [r7, #20]
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	429a      	cmp	r2, r3
 8011950:	d3ec      	bcc.n	801192c <crcAdd+0x34>
 8011952:	8bfb      	ldrh	r3, [r7, #30]
 8011954:	4618      	mov	r0, r3
 8011956:	3720      	adds	r7, #32
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	08018198 	.word	0x08018198
 8011960:	08018f48 	.word	0x08018f48
 8011964:	080181c0 	.word	0x080181c0

08011968 <txMakeMessageSessionSpecifier>:
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	4603      	mov	r3, r0
 8011970:	460a      	mov	r2, r1
 8011972:	80fb      	strh	r3, [r7, #6]
 8011974:	4613      	mov	r3, r2
 8011976:	717b      	strb	r3, [r7, #5]
 8011978:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801197c:	2b00      	cmp	r3, #0
 801197e:	da05      	bge.n	801198c <txMakeMessageSessionSpecifier+0x24>
 8011980:	4b0e      	ldr	r3, [pc, #56]	; (80119bc <txMakeMessageSessionSpecifier+0x54>)
 8011982:	4a0f      	ldr	r2, [pc, #60]	; (80119c0 <txMakeMessageSessionSpecifier+0x58>)
 8011984:	21ac      	movs	r1, #172	; 0xac
 8011986:	480f      	ldr	r0, [pc, #60]	; (80119c4 <txMakeMessageSessionSpecifier+0x5c>)
 8011988:	f001 ff1c 	bl	80137c4 <__assert_func>
 801198c:	88fb      	ldrh	r3, [r7, #6]
 801198e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011992:	d305      	bcc.n	80119a0 <txMakeMessageSessionSpecifier+0x38>
 8011994:	4b0c      	ldr	r3, [pc, #48]	; (80119c8 <txMakeMessageSessionSpecifier+0x60>)
 8011996:	4a0a      	ldr	r2, [pc, #40]	; (80119c0 <txMakeMessageSessionSpecifier+0x58>)
 8011998:	21ad      	movs	r1, #173	; 0xad
 801199a:	480a      	ldr	r0, [pc, #40]	; (80119c4 <txMakeMessageSessionSpecifier+0x5c>)
 801199c:	f001 ff12 	bl	80137c4 <__assert_func>
 80119a0:	88fb      	ldrh	r3, [r7, #6]
 80119a2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	60fb      	str	r3, [r7, #12]
 80119aa:	797a      	ldrb	r2, [r7, #5]
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	021b      	lsls	r3, r3, #8
 80119b0:	4313      	orrs	r3, r2
 80119b2:	4618      	mov	r0, r3
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	080181f0 	.word	0x080181f0
 80119c0:	08018f50 	.word	0x08018f50
 80119c4:	080181c0 	.word	0x080181c0
 80119c8:	08018204 	.word	0x08018204

080119cc <txMakeServiceSessionSpecifier>:
 80119cc:	b590      	push	{r4, r7, lr}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	4604      	mov	r4, r0
 80119d4:	4608      	mov	r0, r1
 80119d6:	4611      	mov	r1, r2
 80119d8:	461a      	mov	r2, r3
 80119da:	4623      	mov	r3, r4
 80119dc:	80fb      	strh	r3, [r7, #6]
 80119de:	4603      	mov	r3, r0
 80119e0:	717b      	strb	r3, [r7, #5]
 80119e2:	460b      	mov	r3, r1
 80119e4:	713b      	strb	r3, [r7, #4]
 80119e6:	4613      	mov	r3, r2
 80119e8:	70fb      	strb	r3, [r7, #3]
 80119ea:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	da05      	bge.n	80119fe <txMakeServiceSessionSpecifier+0x32>
 80119f2:	4b17      	ldr	r3, [pc, #92]	; (8011a50 <txMakeServiceSessionSpecifier+0x84>)
 80119f4:	4a17      	ldr	r2, [pc, #92]	; (8011a54 <txMakeServiceSessionSpecifier+0x88>)
 80119f6:	21b7      	movs	r1, #183	; 0xb7
 80119f8:	4817      	ldr	r0, [pc, #92]	; (8011a58 <txMakeServiceSessionSpecifier+0x8c>)
 80119fa:	f001 fee3 	bl	80137c4 <__assert_func>
 80119fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	da05      	bge.n	8011a12 <txMakeServiceSessionSpecifier+0x46>
 8011a06:	4b15      	ldr	r3, [pc, #84]	; (8011a5c <txMakeServiceSessionSpecifier+0x90>)
 8011a08:	4a12      	ldr	r2, [pc, #72]	; (8011a54 <txMakeServiceSessionSpecifier+0x88>)
 8011a0a:	21b8      	movs	r1, #184	; 0xb8
 8011a0c:	4812      	ldr	r0, [pc, #72]	; (8011a58 <txMakeServiceSessionSpecifier+0x8c>)
 8011a0e:	f001 fed9 	bl	80137c4 <__assert_func>
 8011a12:	88fb      	ldrh	r3, [r7, #6]
 8011a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a18:	d305      	bcc.n	8011a26 <txMakeServiceSessionSpecifier+0x5a>
 8011a1a:	4b11      	ldr	r3, [pc, #68]	; (8011a60 <txMakeServiceSessionSpecifier+0x94>)
 8011a1c:	4a0d      	ldr	r2, [pc, #52]	; (8011a54 <txMakeServiceSessionSpecifier+0x88>)
 8011a1e:	21b9      	movs	r1, #185	; 0xb9
 8011a20:	480d      	ldr	r0, [pc, #52]	; (8011a58 <txMakeServiceSessionSpecifier+0x8c>)
 8011a22:	f001 fecf 	bl	80137c4 <__assert_func>
 8011a26:	793a      	ldrb	r2, [r7, #4]
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	01db      	lsls	r3, r3, #7
 8011a2c:	431a      	orrs	r2, r3
 8011a2e:	88fb      	ldrh	r3, [r7, #6]
 8011a30:	039b      	lsls	r3, r3, #14
 8011a32:	4313      	orrs	r3, r2
 8011a34:	797a      	ldrb	r2, [r7, #5]
 8011a36:	2a00      	cmp	r2, #0
 8011a38:	d002      	beq.n	8011a40 <txMakeServiceSessionSpecifier+0x74>
 8011a3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011a3e:	e000      	b.n	8011a42 <txMakeServiceSessionSpecifier+0x76>
 8011a40:	2200      	movs	r2, #0
 8011a42:	4313      	orrs	r3, r2
 8011a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011a48:	4618      	mov	r0, r3
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd90      	pop	{r4, r7, pc}
 8011a50:	080181f0 	.word	0x080181f0
 8011a54:	08018f70 	.word	0x08018f70
 8011a58:	080181c0 	.word	0x080181c0
 8011a5c:	08018218 	.word	0x08018218
 8011a60:	0801822c 	.word	0x0801822c

08011a64 <adjustPresentationLayerMTU>:
 8011a64:	b480      	push	{r7}
 8011a66:	b085      	sub	sp, #20
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	2340      	movs	r3, #64	; 0x40
 8011a6e:	60bb      	str	r3, [r7, #8]
 8011a70:	2300      	movs	r3, #0
 8011a72:	60fb      	str	r3, [r7, #12]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b07      	cmp	r3, #7
 8011a78:	d802      	bhi.n	8011a80 <adjustPresentationLayerMTU+0x1c>
 8011a7a:	2308      	movs	r3, #8
 8011a7c:	60fb      	str	r3, [r7, #12]
 8011a7e:	e014      	b.n	8011aaa <adjustPresentationLayerMTU+0x46>
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d808      	bhi.n	8011a9a <adjustPresentationLayerMTU+0x36>
 8011a88:	4a0c      	ldr	r2, [pc, #48]	; (8011abc <adjustPresentationLayerMTU+0x58>)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	461a      	mov	r2, r3
 8011a92:	4b0b      	ldr	r3, [pc, #44]	; (8011ac0 <adjustPresentationLayerMTU+0x5c>)
 8011a94:	5c9b      	ldrb	r3, [r3, r2]
 8011a96:	60fb      	str	r3, [r7, #12]
 8011a98:	e007      	b.n	8011aaa <adjustPresentationLayerMTU+0x46>
 8011a9a:	4a08      	ldr	r2, [pc, #32]	; (8011abc <adjustPresentationLayerMTU+0x58>)
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	4b06      	ldr	r3, [pc, #24]	; (8011ac0 <adjustPresentationLayerMTU+0x5c>)
 8011aa6:	5c9b      	ldrb	r3, [r3, r2]
 8011aa8:	60fb      	str	r3, [r7, #12]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	3b01      	subs	r3, #1
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3714      	adds	r7, #20
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	08018edc 	.word	0x08018edc
 8011ac0:	08018ecc 	.word	0x08018ecc

08011ac4 <txMakeCANID>:
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08a      	sub	sp, #40	; 0x28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	70fb      	strb	r3, [r7, #3]
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d105      	bne.n	8011ae4 <txMakeCANID+0x20>
 8011ad8:	4b60      	ldr	r3, [pc, #384]	; (8011c5c <txMakeCANID+0x198>)
 8011ada:	4a61      	ldr	r2, [pc, #388]	; (8011c60 <txMakeCANID+0x19c>)
 8011adc:	21d9      	movs	r1, #217	; 0xd9
 8011ade:	4861      	ldr	r0, [pc, #388]	; (8011c64 <txMakeCANID+0x1a0>)
 8011ae0:	f001 fe70 	bl	80137c4 <__assert_func>
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d105      	bne.n	8011af6 <txMakeCANID+0x32>
 8011aea:	4b5f      	ldr	r3, [pc, #380]	; (8011c68 <txMakeCANID+0x1a4>)
 8011aec:	4a5c      	ldr	r2, [pc, #368]	; (8011c60 <txMakeCANID+0x19c>)
 8011aee:	21da      	movs	r1, #218	; 0xda
 8011af0:	485c      	ldr	r0, [pc, #368]	; (8011c64 <txMakeCANID+0x1a0>)
 8011af2:	f001 fe67 	bl	80137c4 <__assert_func>
 8011af6:	f06f 0301 	mvn.w	r3, #1
 8011afa:	627b      	str	r3, [r7, #36]	; 0x24
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	785b      	ldrb	r3, [r3, #1]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d157      	bne.n	8011bb4 <txMakeCANID+0xf0>
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	791b      	ldrb	r3, [r3, #4]
 8011b08:	2bff      	cmp	r3, #255	; 0xff
 8011b0a:	d153      	bne.n	8011bb4 <txMakeCANID+0xf0>
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	885b      	ldrh	r3, [r3, #2]
 8011b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b14:	d24e      	bcs.n	8011bb4 <txMakeCANID+0xf0>
 8011b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	db11      	blt.n	8011b42 <txMakeCANID+0x7e>
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	885b      	ldrh	r3, [r3, #2]
 8011b22:	78fa      	ldrb	r2, [r7, #3]
 8011b24:	4611      	mov	r1, r2
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7ff ff1e 	bl	8011968 <txMakeMessageSessionSpecifier>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	da75      	bge.n	8011c22 <txMakeCANID+0x15e>
 8011b36:	4b4d      	ldr	r3, [pc, #308]	; (8011c6c <txMakeCANID+0x1a8>)
 8011b38:	4a49      	ldr	r2, [pc, #292]	; (8011c60 <txMakeCANID+0x19c>)
 8011b3a:	21e2      	movs	r1, #226	; 0xe2
 8011b3c:	4849      	ldr	r0, [pc, #292]	; (8011c64 <txMakeCANID+0x1a0>)
 8011b3e:	f001 fe41 	bl	80137c4 <__assert_func>
 8011b42:	68ba      	ldr	r2, [r7, #8]
 8011b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d830      	bhi.n	8011bac <txMakeCANID+0xe8>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d108      	bne.n	8011b62 <txMakeCANID+0x9e>
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d005      	beq.n	8011b62 <txMakeCANID+0x9e>
 8011b56:	4b46      	ldr	r3, [pc, #280]	; (8011c70 <txMakeCANID+0x1ac>)
 8011b58:	4a41      	ldr	r2, [pc, #260]	; (8011c60 <txMakeCANID+0x19c>)
 8011b5a:	21e6      	movs	r1, #230	; 0xe6
 8011b5c:	4841      	ldr	r0, [pc, #260]	; (8011c64 <txMakeCANID+0x1a0>)
 8011b5e:	f001 fe31 	bl	80137c4 <__assert_func>
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	68b9      	ldr	r1, [r7, #8]
 8011b66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011b6a:	f7ff fec5 	bl	80118f8 <crcAdd>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	885b      	ldrh	r3, [r3, #2]
 8011b7e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8011b82:	4611      	mov	r1, r2
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7ff feef 	bl	8011968 <txMakeMessageSessionSpecifier>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011b90:	61fb      	str	r3, [r7, #28]
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b98:	d305      	bcc.n	8011ba6 <txMakeCANID+0xe2>
 8011b9a:	4b36      	ldr	r3, [pc, #216]	; (8011c74 <txMakeCANID+0x1b0>)
 8011b9c:	4a30      	ldr	r2, [pc, #192]	; (8011c60 <txMakeCANID+0x19c>)
 8011b9e:	21e9      	movs	r1, #233	; 0xe9
 8011ba0:	4830      	ldr	r0, [pc, #192]	; (8011c64 <txMakeCANID+0x1a0>)
 8011ba2:	f001 fe0f 	bl	80137c4 <__assert_func>
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8011baa:	e03a      	b.n	8011c22 <txMakeCANID+0x15e>
 8011bac:	f06f 0301 	mvn.w	r3, #1
 8011bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8011bb2:	e036      	b.n	8011c22 <txMakeCANID+0x15e>
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	785b      	ldrb	r3, [r3, #1]
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d003      	beq.n	8011bc4 <txMakeCANID+0x100>
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	785b      	ldrb	r3, [r3, #1]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d12a      	bne.n	8011c1a <txMakeCANID+0x156>
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	791b      	ldrb	r3, [r3, #4]
 8011bc8:	b25b      	sxtb	r3, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	db25      	blt.n	8011c1a <txMakeCANID+0x156>
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	885b      	ldrh	r3, [r3, #2]
 8011bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bd6:	d220      	bcs.n	8011c1a <txMakeCANID+0x156>
 8011bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	db18      	blt.n	8011c12 <txMakeCANID+0x14e>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	8858      	ldrh	r0, [r3, #2]
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	785b      	ldrb	r3, [r3, #1]
 8011be8:	2b02      	cmp	r3, #2
 8011bea:	bf0c      	ite	eq
 8011bec:	2301      	moveq	r3, #1
 8011bee:	2300      	movne	r3, #0
 8011bf0:	b2d9      	uxtb	r1, r3
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	791b      	ldrb	r3, [r3, #4]
 8011bf6:	78fa      	ldrb	r2, [r7, #3]
 8011bf8:	f7ff fee8 	bl	80119cc <txMakeServiceSessionSpecifier>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8011c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	da0f      	bge.n	8011c26 <txMakeCANID+0x162>
 8011c06:	4b19      	ldr	r3, [pc, #100]	; (8011c6c <txMakeCANID+0x1a8>)
 8011c08:	4a15      	ldr	r2, [pc, #84]	; (8011c60 <txMakeCANID+0x19c>)
 8011c0a:	21fa      	movs	r1, #250	; 0xfa
 8011c0c:	4815      	ldr	r0, [pc, #84]	; (8011c64 <txMakeCANID+0x1a0>)
 8011c0e:	f001 fdd9 	bl	80137c4 <__assert_func>
 8011c12:	f06f 0301 	mvn.w	r3, #1
 8011c16:	627b      	str	r3, [r7, #36]	; 0x24
 8011c18:	e005      	b.n	8011c26 <txMakeCANID+0x162>
 8011c1a:	f06f 0301 	mvn.w	r3, #1
 8011c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8011c20:	e002      	b.n	8011c28 <txMakeCANID+0x164>
 8011c22:	bf00      	nop
 8011c24:	e000      	b.n	8011c28 <txMakeCANID+0x164>
 8011c26:	bf00      	nop
 8011c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	db10      	blt.n	8011c50 <txMakeCANID+0x18c>
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	61bb      	str	r3, [r7, #24]
 8011c34:	69bb      	ldr	r3, [r7, #24]
 8011c36:	2b07      	cmp	r3, #7
 8011c38:	d807      	bhi.n	8011c4a <txMakeCANID+0x186>
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	069a      	lsls	r2, r3, #26
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c40:	4313      	orrs	r3, r2
 8011c42:	617b      	str	r3, [r7, #20]
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	627b      	str	r3, [r7, #36]	; 0x24
 8011c48:	e002      	b.n	8011c50 <txMakeCANID+0x18c>
 8011c4a:	f06f 0301 	mvn.w	r3, #1
 8011c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8011c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c52:	4618      	mov	r0, r3
 8011c54:	3728      	adds	r7, #40	; 0x28
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	08018240 	.word	0x08018240
 8011c60:	08018f3c 	.word	0x08018f3c
 8011c64:	080181c0 	.word	0x080181c0
 8011c68:	08018254 	.word	0x08018254
 8011c6c:	08018270 	.word	0x08018270
 8011c70:	0801827c 	.word	0x0801827c
 8011c74:	080182b0 	.word	0x080182b0

08011c78 <txMakeTailByte>:
 8011c78:	b590      	push	{r4, r7, lr}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	4604      	mov	r4, r0
 8011c80:	4608      	mov	r0, r1
 8011c82:	4611      	mov	r1, r2
 8011c84:	461a      	mov	r2, r3
 8011c86:	4623      	mov	r3, r4
 8011c88:	71fb      	strb	r3, [r7, #7]
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	71bb      	strb	r3, [r7, #6]
 8011c8e:	460b      	mov	r3, r1
 8011c90:	717b      	strb	r3, [r7, #5]
 8011c92:	4613      	mov	r3, r2
 8011c94:	713b      	strb	r3, [r7, #4]
 8011c96:	79fb      	ldrb	r3, [r7, #7]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d009      	beq.n	8011cb0 <txMakeTailByte+0x38>
 8011c9c:	797b      	ldrb	r3, [r7, #5]
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d006      	beq.n	8011cb0 <txMakeTailByte+0x38>
 8011ca2:	4b13      	ldr	r3, [pc, #76]	; (8011cf0 <txMakeTailByte+0x78>)
 8011ca4:	4a13      	ldr	r2, [pc, #76]	; (8011cf4 <txMakeTailByte+0x7c>)
 8011ca6:	f240 111b 	movw	r1, #283	; 0x11b
 8011caa:	4813      	ldr	r0, [pc, #76]	; (8011cf8 <txMakeTailByte+0x80>)
 8011cac:	f001 fd8a 	bl	80137c4 <__assert_func>
 8011cb0:	79fb      	ldrb	r3, [r7, #7]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <txMakeTailByte+0x42>
 8011cb6:	2280      	movs	r2, #128	; 0x80
 8011cb8:	e000      	b.n	8011cbc <txMakeTailByte+0x44>
 8011cba:	2200      	movs	r2, #0
 8011cbc:	79bb      	ldrb	r3, [r7, #6]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d001      	beq.n	8011cc6 <txMakeTailByte+0x4e>
 8011cc2:	2340      	movs	r3, #64	; 0x40
 8011cc4:	e000      	b.n	8011cc8 <txMakeTailByte+0x50>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	797a      	ldrb	r2, [r7, #5]
 8011cce:	2a00      	cmp	r2, #0
 8011cd0:	d001      	beq.n	8011cd6 <txMakeTailByte+0x5e>
 8011cd2:	2220      	movs	r2, #32
 8011cd4:	e000      	b.n	8011cd8 <txMakeTailByte+0x60>
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	b2da      	uxtb	r2, r3
 8011cdc:	793b      	ldrb	r3, [r7, #4]
 8011cde:	f003 031f 	and.w	r3, r3, #31
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	4618      	mov	r0, r3
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd90      	pop	{r4, r7, pc}
 8011cf0:	080182cc 	.word	0x080182cc
 8011cf4:	08018fe4 	.word	0x08018fe4
 8011cf8:	080181c0 	.word	0x080181c0

08011cfc <txRoundFramePayloadSizeUp>:
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b40      	cmp	r3, #64	; 0x40
 8011d08:	d906      	bls.n	8011d18 <txRoundFramePayloadSizeUp+0x1c>
 8011d0a:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <txRoundFramePayloadSizeUp+0x4c>)
 8011d0c:	4a0f      	ldr	r2, [pc, #60]	; (8011d4c <txRoundFramePayloadSizeUp+0x50>)
 8011d0e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8011d12:	480f      	ldr	r0, [pc, #60]	; (8011d50 <txRoundFramePayloadSizeUp+0x54>)
 8011d14:	f001 fd56 	bl	80137c4 <__assert_func>
 8011d18:	4a0e      	ldr	r2, [pc, #56]	; (8011d54 <txRoundFramePayloadSizeUp+0x58>)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	60fb      	str	r3, [r7, #12]
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2b0f      	cmp	r3, #15
 8011d26:	d906      	bls.n	8011d36 <txRoundFramePayloadSizeUp+0x3a>
 8011d28:	4b0b      	ldr	r3, [pc, #44]	; (8011d58 <txRoundFramePayloadSizeUp+0x5c>)
 8011d2a:	4a08      	ldr	r2, [pc, #32]	; (8011d4c <txRoundFramePayloadSizeUp+0x50>)
 8011d2c:	f240 1127 	movw	r1, #295	; 0x127
 8011d30:	4807      	ldr	r0, [pc, #28]	; (8011d50 <txRoundFramePayloadSizeUp+0x54>)
 8011d32:	f001 fd47 	bl	80137c4 <__assert_func>
 8011d36:	4a09      	ldr	r2, [pc, #36]	; (8011d5c <txRoundFramePayloadSizeUp+0x60>)
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	080182f4 	.word	0x080182f4
 8011d4c:	08018fb4 	.word	0x08018fb4
 8011d50:	080181c0 	.word	0x080181c0
 8011d54:	08018edc 	.word	0x08018edc
 8011d58:	0801833c 	.word	0x0801833c
 8011d5c:	08018ecc 	.word	0x08018ecc

08011d60 <txAllocateQueueItem>:
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b086      	sub	sp, #24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	e9c7 2300 	strd	r2, r3, [r7]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d106      	bne.n	8011d82 <txAllocateQueueItem+0x22>
 8011d74:	4b1f      	ldr	r3, [pc, #124]	; (8011df4 <txAllocateQueueItem+0x94>)
 8011d76:	4a20      	ldr	r2, [pc, #128]	; (8011df8 <txAllocateQueueItem+0x98>)
 8011d78:	f240 1131 	movw	r1, #305	; 0x131
 8011d7c:	481f      	ldr	r0, [pc, #124]	; (8011dfc <txAllocateQueueItem+0x9c>)
 8011d7e:	f001 fd21 	bl	80137c4 <__assert_func>
 8011d82:	6a3b      	ldr	r3, [r7, #32]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <txAllocateQueueItem+0x36>
 8011d88:	4b1d      	ldr	r3, [pc, #116]	; (8011e00 <txAllocateQueueItem+0xa0>)
 8011d8a:	4a1b      	ldr	r2, [pc, #108]	; (8011df8 <txAllocateQueueItem+0x98>)
 8011d8c:	f44f 7199 	mov.w	r1, #306	; 0x132
 8011d90:	481a      	ldr	r0, [pc, #104]	; (8011dfc <txAllocateQueueItem+0x9c>)
 8011d92:	f001 fd17 	bl	80137c4 <__assert_func>
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	689b      	ldr	r3, [r3, #8]
 8011d9a:	6a3a      	ldr	r2, [r7, #32]
 8011d9c:	3230      	adds	r2, #48	; 0x30
 8011d9e:	4611      	mov	r1, r2
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	4798      	blx	r3
 8011da4:	6178      	str	r0, [r7, #20]
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d01e      	beq.n	8011dea <txAllocateQueueItem+0x8a>
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	2200      	movs	r2, #0
 8011db0:	601a      	str	r2, [r3, #0]
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	2200      	movs	r2, #0
 8011db6:	605a      	str	r2, [r3, #4]
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	609a      	str	r2, [r3, #8]
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	731a      	strb	r2, [r3, #12]
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	611a      	str	r2, [r3, #16]
 8011dca:	6979      	ldr	r1, [r7, #20]
 8011dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011dd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	6a3a      	ldr	r2, [r7, #32]
 8011dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	629a      	str	r2, [r3, #40]	; 0x28
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	68ba      	ldr	r2, [r7, #8]
 8011de8:	621a      	str	r2, [r3, #32]
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	4618      	mov	r0, r3
 8011dee:	3718      	adds	r7, #24
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	08018384 	.word	0x08018384
 8011df8:	08018fd0 	.word	0x08018fd0
 8011dfc:	080181c0 	.word	0x080181c0
 8011e00:	08018398 	.word	0x08018398

08011e04 <txAVLPredicate>:
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	60fb      	str	r3, [r7, #12]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	60bb      	str	r3, [r7, #8]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <txAVLPredicate+0x1e>
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d106      	bne.n	8011e30 <txAVLPredicate+0x2c>
 8011e22:	4b0a      	ldr	r3, [pc, #40]	; (8011e4c <txAVLPredicate+0x48>)
 8011e24:	4a0a      	ldr	r2, [pc, #40]	; (8011e50 <txAVLPredicate+0x4c>)
 8011e26:	f240 114d 	movw	r1, #333	; 0x14d
 8011e2a:	480a      	ldr	r0, [pc, #40]	; (8011e54 <txAVLPredicate+0x50>)
 8011e2c:	f001 fcca 	bl	80137c4 <__assert_func>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6a1a      	ldr	r2, [r3, #32]
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	6a1b      	ldr	r3, [r3, #32]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d301      	bcc.n	8011e40 <txAVLPredicate+0x3c>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e001      	b.n	8011e44 <txAVLPredicate+0x40>
 8011e40:	f04f 33ff 	mov.w	r3, #4294967295
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	080183ac 	.word	0x080183ac
 8011e50:	08018fa4 	.word	0x08018fa4
 8011e54:	080181c0 	.word	0x080181c0

08011e58 <txPushSingleFrame>:
 8011e58:	b590      	push	{r4, r7, lr}
 8011e5a:	b08d      	sub	sp, #52	; 0x34
 8011e5c:	af02      	add	r7, sp, #8
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	e9c7 2300 	strd	r2, r3, [r7]
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d106      	bne.n	8011e7a <txPushSingleFrame+0x22>
 8011e6c:	4b5c      	ldr	r3, [pc, #368]	; (8011fe0 <txPushSingleFrame+0x188>)
 8011e6e:	4a5d      	ldr	r2, [pc, #372]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011e70:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8011e74:	485c      	ldr	r0, [pc, #368]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011e76:	f001 fca5 	bl	80137c4 <__assert_func>
 8011e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d109      	bne.n	8011e94 <txPushSingleFrame+0x3c>
 8011e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d006      	beq.n	8011e94 <txPushSingleFrame+0x3c>
 8011e86:	4b59      	ldr	r3, [pc, #356]	; (8011fec <txPushSingleFrame+0x194>)
 8011e88:	4a56      	ldr	r2, [pc, #344]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011e8a:	f240 115b 	movw	r1, #347	; 0x15b
 8011e8e:	4856      	ldr	r0, [pc, #344]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011e90:	f001 fc98 	bl	80137c4 <__assert_func>
 8011e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e96:	3301      	adds	r3, #1
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff ff2f 	bl	8011cfc <txRoundFramePayloadSizeUp>
 8011e9e:	6238      	str	r0, [r7, #32]
 8011ea0:	6a3a      	ldr	r2, [r7, #32]
 8011ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d806      	bhi.n	8011eb6 <txPushSingleFrame+0x5e>
 8011ea8:	4b51      	ldr	r3, [pc, #324]	; (8011ff0 <txPushSingleFrame+0x198>)
 8011eaa:	4a4e      	ldr	r2, [pc, #312]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011eac:	f240 115d 	movw	r1, #349	; 0x15d
 8011eb0:	484d      	ldr	r0, [pc, #308]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011eb2:	f001 fc87 	bl	80137c4 <__assert_func>
 8011eb6:	6a3a      	ldr	r2, [r7, #32]
 8011eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eba:	1ad3      	subs	r3, r2, r3
 8011ebc:	3b01      	subs	r3, #1
 8011ebe:	61fb      	str	r3, [r7, #28]
 8011ec0:	69fa      	ldr	r2, [r7, #28]
 8011ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ec4:	4413      	add	r3, r2
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	6a3a      	ldr	r2, [r7, #32]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d006      	beq.n	8011edc <txPushSingleFrame+0x84>
 8011ece:	4b49      	ldr	r3, [pc, #292]	; (8011ff4 <txPushSingleFrame+0x19c>)
 8011ed0:	4a44      	ldr	r2, [pc, #272]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011ed2:	f240 115f 	movw	r1, #351	; 0x15f
 8011ed6:	4844      	ldr	r0, [pc, #272]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011ed8:	f001 fc74 	bl	80137c4 <__assert_func>
 8011edc:	2300      	movs	r3, #0
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	689a      	ldr	r2, [r3, #8]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d209      	bcs.n	8011f00 <txPushSingleFrame+0xa8>
 8011eec:	6a3b      	ldr	r3, [r7, #32]
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ef6:	68b8      	ldr	r0, [r7, #8]
 8011ef8:	f7ff ff32 	bl	8011d60 <txAllocateQueueItem>
 8011efc:	4603      	mov	r3, r0
 8011efe:	e000      	b.n	8011f02 <txPushSingleFrame+0xaa>
 8011f00:	2300      	movs	r3, #0
 8011f02:	61bb      	str	r3, [r7, #24]
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d054      	beq.n	8011fb4 <txPushSingleFrame+0x15c>
 8011f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d010      	beq.n	8011f32 <txPushSingleFrame+0xda>
 8011f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <txPushSingleFrame+0xcc>
 8011f16:	4b38      	ldr	r3, [pc, #224]	; (8011ff8 <txPushSingleFrame+0x1a0>)
 8011f18:	4a32      	ldr	r2, [pc, #200]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011f1a:	f240 1167 	movw	r1, #359	; 0x167
 8011f1e:	4832      	ldr	r0, [pc, #200]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011f20:	f001 fc50 	bl	80137c4 <__assert_func>
 8011f24:	69bb      	ldr	r3, [r7, #24]
 8011f26:	3330      	adds	r3, #48	; 0x30
 8011f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f002 fdf2 	bl	8014b16 <memcpy>
 8011f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f34:	3330      	adds	r3, #48	; 0x30
 8011f36:	69ba      	ldr	r2, [r7, #24]
 8011f38:	4413      	add	r3, r2
 8011f3a:	69fa      	ldr	r2, [r7, #28]
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f002 fd03 	bl	801494a <memset>
 8011f44:	6a3b      	ldr	r3, [r7, #32]
 8011f46:	1e5c      	subs	r4, r3, #1
 8011f48:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	2101      	movs	r1, #1
 8011f50:	2001      	movs	r0, #1
 8011f52:	f7ff fe91 	bl	8011c78 <txMakeTailByte>
 8011f56:	4603      	mov	r3, r0
 8011f58:	461a      	mov	r2, r3
 8011f5a:	69bb      	ldr	r3, [r7, #24]
 8011f5c:	4423      	add	r3, r4
 8011f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f103 000c 	add.w	r0, r3, #12
 8011f68:	69b9      	ldr	r1, [r7, #24]
 8011f6a:	4b24      	ldr	r3, [pc, #144]	; (8011ffc <txPushSingleFrame+0x1a4>)
 8011f6c:	4a24      	ldr	r2, [pc, #144]	; (8012000 <txPushSingleFrame+0x1a8>)
 8011f6e:	f7ff fae7 	bl	8011540 <cavlSearch>
 8011f72:	6178      	str	r0, [r7, #20]
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	697a      	ldr	r2, [r7, #20]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d006      	beq.n	8011f8a <txPushSingleFrame+0x132>
 8011f7c:	4b21      	ldr	r3, [pc, #132]	; (8012004 <txPushSingleFrame+0x1ac>)
 8011f7e:	4a19      	ldr	r2, [pc, #100]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011f80:	f240 1173 	movw	r1, #371	; 0x173
 8011f84:	4818      	ldr	r0, [pc, #96]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011f86:	f001 fc1d 	bl	80137c4 <__assert_func>
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	689b      	ldr	r3, [r3, #8]
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	609a      	str	r2, [r3, #8]
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	689a      	ldr	r2, [r3, #8]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d906      	bls.n	8011fae <txPushSingleFrame+0x156>
 8011fa0:	4b19      	ldr	r3, [pc, #100]	; (8012008 <txPushSingleFrame+0x1b0>)
 8011fa2:	4a10      	ldr	r2, [pc, #64]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011fa4:	f240 1175 	movw	r1, #373	; 0x175
 8011fa8:	480f      	ldr	r0, [pc, #60]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011faa:	f001 fc0b 	bl	80137c4 <__assert_func>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8011fb2:	e002      	b.n	8011fba <txPushSingleFrame+0x162>
 8011fb4:	f06f 0302 	mvn.w	r3, #2
 8011fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	db09      	blt.n	8011fd4 <txPushSingleFrame+0x17c>
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	d006      	beq.n	8011fd4 <txPushSingleFrame+0x17c>
 8011fc6:	4b11      	ldr	r3, [pc, #68]	; (801200c <txPushSingleFrame+0x1b4>)
 8011fc8:	4a06      	ldr	r2, [pc, #24]	; (8011fe4 <txPushSingleFrame+0x18c>)
 8011fca:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8011fce:	4806      	ldr	r0, [pc, #24]	; (8011fe8 <txPushSingleFrame+0x190>)
 8011fd0:	f001 fbf8 	bl	80137c4 <__assert_func>
 8011fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	372c      	adds	r7, #44	; 0x2c
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd90      	pop	{r4, r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	08018384 	.word	0x08018384
 8011fe4:	08018f90 	.word	0x08018f90
 8011fe8:	080181c0 	.word	0x080181c0
 8011fec:	080183e0 	.word	0x080183e0
 8011ff0:	08018410 	.word	0x08018410
 8011ff4:	08018434 	.word	0x08018434
 8011ff8:	08018470 	.word	0x08018470
 8011ffc:	080118a1 	.word	0x080118a1
 8012000:	08011e05 	.word	0x08011e05
 8012004:	08018488 	.word	0x08018488
 8012008:	080184a0 	.word	0x080184a0
 801200c:	080184bc 	.word	0x080184bc

08012010 <txGenerateMultiFrameChain>:
 8012010:	b590      	push	{r4, r7, lr}
 8012012:	b093      	sub	sp, #76	; 0x4c
 8012014:	af02      	add	r7, sp, #8
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d106      	bne.n	8012030 <txGenerateMultiFrameChain+0x20>
 8012022:	4b93      	ldr	r3, [pc, #588]	; (8012270 <txGenerateMultiFrameChain+0x260>)
 8012024:	4a93      	ldr	r2, [pc, #588]	; (8012274 <txGenerateMultiFrameChain+0x264>)
 8012026:	f240 1189 	movw	r1, #393	; 0x189
 801202a:	4893      	ldr	r0, [pc, #588]	; (8012278 <txGenerateMultiFrameChain+0x268>)
 801202c:	f001 fbca 	bl	80137c4 <__assert_func>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d106      	bne.n	8012044 <txGenerateMultiFrameChain+0x34>
 8012036:	4b91      	ldr	r3, [pc, #580]	; (801227c <txGenerateMultiFrameChain+0x26c>)
 8012038:	4a8e      	ldr	r2, [pc, #568]	; (8012274 <txGenerateMultiFrameChain+0x264>)
 801203a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801203e:	488e      	ldr	r0, [pc, #568]	; (8012278 <txGenerateMultiFrameChain+0x268>)
 8012040:	f001 fbc0 	bl	80137c4 <__assert_func>
 8012044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	429a      	cmp	r2, r3
 801204a:	d806      	bhi.n	801205a <txGenerateMultiFrameChain+0x4a>
 801204c:	4b8c      	ldr	r3, [pc, #560]	; (8012280 <txGenerateMultiFrameChain+0x270>)
 801204e:	4a89      	ldr	r2, [pc, #548]	; (8012274 <txGenerateMultiFrameChain+0x264>)
 8012050:	f240 118b 	movw	r1, #395	; 0x18b
 8012054:	4888      	ldr	r0, [pc, #544]	; (8012278 <txGenerateMultiFrameChain+0x268>)
 8012056:	f001 fbb5 	bl	80137c4 <__assert_func>
 801205a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801205c:	2b00      	cmp	r3, #0
 801205e:	d106      	bne.n	801206e <txGenerateMultiFrameChain+0x5e>
 8012060:	4b88      	ldr	r3, [pc, #544]	; (8012284 <txGenerateMultiFrameChain+0x274>)
 8012062:	4a84      	ldr	r2, [pc, #528]	; (8012274 <txGenerateMultiFrameChain+0x264>)
 8012064:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8012068:	4883      	ldr	r0, [pc, #524]	; (8012278 <txGenerateMultiFrameChain+0x268>)
 801206a:	f001 fbab 	bl	80137c4 <__assert_func>
 801206e:	2300      	movs	r3, #0
 8012070:	613b      	str	r3, [r7, #16]
 8012072:	2300      	movs	r3, #0
 8012074:	617b      	str	r3, [r7, #20]
 8012076:	2300      	movs	r3, #0
 8012078:	61bb      	str	r3, [r7, #24]
 801207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801207c:	3302      	adds	r3, #2
 801207e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012080:	2300      	movs	r3, #0
 8012082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012084:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012086:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012088:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801208c:	f7ff fc34 	bl	80118f8 <crcAdd>
 8012090:	4603      	mov	r3, r0
 8012092:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012094:	2301      	movs	r3, #1
 8012096:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 801209a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801209c:	637b      	str	r3, [r7, #52]	; 0x34
 801209e:	e0d4      	b.n	801224a <txGenerateMultiFrameChain+0x23a>
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	3301      	adds	r3, #1
 80120a4:	61bb      	str	r3, [r7, #24]
 80120a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120aa:	1ad3      	subs	r3, r2, r3
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d908      	bls.n	80120c4 <txGenerateMultiFrameChain+0xb4>
 80120b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	3301      	adds	r3, #1
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7ff fe1e 	bl	8011cfc <txRoundFramePayloadSizeUp>
 80120c0:	4603      	mov	r3, r0
 80120c2:	e001      	b.n	80120c8 <txGenerateMultiFrameChain+0xb8>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	3301      	adds	r3, #1
 80120c8:	627b      	str	r3, [r7, #36]	; 0x24
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	9300      	str	r3, [sp, #0]
 80120ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80120d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80120d4:	68b8      	ldr	r0, [r7, #8]
 80120d6:	f7ff fe43 	bl	8011d60 <txAllocateQueueItem>
 80120da:	6238      	str	r0, [r7, #32]
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d102      	bne.n	80120e8 <txGenerateMultiFrameChain+0xd8>
 80120e2:	6a3b      	ldr	r3, [r7, #32]
 80120e4:	613b      	str	r3, [r7, #16]
 80120e6:	e002      	b.n	80120ee <txGenerateMultiFrameChain+0xde>
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	6a3a      	ldr	r2, [r7, #32]
 80120ec:	611a      	str	r2, [r3, #16]
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	617b      	str	r3, [r7, #20]
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	f000 80ae 	beq.w	8012256 <txGenerateMultiFrameChain+0x246>
 80120fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fc:	3b01      	subs	r3, #1
 80120fe:	61fb      	str	r3, [r7, #28]
 8012100:	2300      	movs	r3, #0
 8012102:	633b      	str	r3, [r7, #48]	; 0x30
 8012104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012108:	429a      	cmp	r2, r3
 801210a:	d21c      	bcs.n	8012146 <txGenerateMultiFrameChain+0x136>
 801210c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012110:	1ad3      	subs	r3, r2, r3
 8012112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	429a      	cmp	r2, r3
 801211a:	d901      	bls.n	8012120 <txGenerateMultiFrameChain+0x110>
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	3330      	adds	r3, #48	; 0x30
 8012124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012128:	4618      	mov	r0, r3
 801212a:	f002 fcf4 	bl	8014b16 <memcpy>
 801212e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012132:	4413      	add	r3, r2
 8012134:	633b      	str	r3, [r7, #48]	; 0x30
 8012136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213a:	4413      	add	r3, r2
 801213c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801213e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012142:	4413      	add	r3, r2
 8012144:	637b      	str	r3, [r7, #52]	; 0x34
 8012146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801214a:	429a      	cmp	r2, r3
 801214c:	d343      	bcc.n	80121d6 <txGenerateMultiFrameChain+0x1c6>
 801214e:	e00f      	b.n	8012170 <txGenerateMultiFrameChain+0x160>
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	4413      	add	r3, r2
 8012156:	3330      	adds	r3, #48	; 0x30
 8012158:	2200      	movs	r2, #0
 801215a:	701a      	strb	r2, [r3, #0]
 801215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215e:	3301      	adds	r3, #1
 8012160:	633b      	str	r3, [r7, #48]	; 0x30
 8012162:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012164:	2100      	movs	r1, #0
 8012166:	4618      	mov	r0, r3
 8012168:	f7ff fba6 	bl	80118b8 <crcAddByte>
 801216c:	4603      	mov	r3, r0
 801216e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012172:	3302      	adds	r3, #2
 8012174:	69fa      	ldr	r2, [r7, #28]
 8012176:	429a      	cmp	r2, r3
 8012178:	d8ea      	bhi.n	8012150 <txGenerateMultiFrameChain+0x140>
 801217a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	429a      	cmp	r2, r3
 8012180:	d213      	bcs.n	80121aa <txGenerateMultiFrameChain+0x19a>
 8012182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012186:	429a      	cmp	r2, r3
 8012188:	d10f      	bne.n	80121aa <txGenerateMultiFrameChain+0x19a>
 801218a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801218c:	0a1b      	lsrs	r3, r3, #8
 801218e:	b29b      	uxth	r3, r3
 8012190:	697a      	ldr	r2, [r7, #20]
 8012192:	b2d9      	uxtb	r1, r3
 8012194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012196:	4413      	add	r3, r2
 8012198:	3330      	adds	r3, #48	; 0x30
 801219a:	460a      	mov	r2, r1
 801219c:	701a      	strb	r2, [r3, #0]
 801219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a0:	3301      	adds	r3, #1
 80121a2:	633b      	str	r3, [r7, #48]	; 0x30
 80121a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121a6:	3301      	adds	r3, #1
 80121a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d211      	bcs.n	80121d6 <txGenerateMultiFrameChain+0x1c6>
 80121b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d90d      	bls.n	80121d6 <txGenerateMultiFrameChain+0x1c6>
 80121ba:	697a      	ldr	r2, [r7, #20]
 80121bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121be:	b2d9      	uxtb	r1, r3
 80121c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c2:	4413      	add	r3, r2
 80121c4:	3330      	adds	r3, #48	; 0x30
 80121c6:	460a      	mov	r2, r1
 80121c8:	701a      	strb	r2, [r3, #0]
 80121ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121cc:	3301      	adds	r3, #1
 80121ce:	633b      	str	r3, [r7, #48]	; 0x30
 80121d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d2:	3301      	adds	r3, #1
 80121d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d8:	1c5a      	adds	r2, r3, #1
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121de:	429a      	cmp	r2, r3
 80121e0:	d006      	beq.n	80121f0 <txGenerateMultiFrameChain+0x1e0>
 80121e2:	4b29      	ldr	r3, [pc, #164]	; (8012288 <txGenerateMultiFrameChain+0x278>)
 80121e4:	4a23      	ldr	r2, [pc, #140]	; (8012274 <txGenerateMultiFrameChain+0x264>)
 80121e6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80121ea:	4823      	ldr	r0, [pc, #140]	; (8012278 <txGenerateMultiFrameChain+0x268>)
 80121ec:	f001 faea 	bl	80137c4 <__assert_func>
 80121f0:	693a      	ldr	r2, [r7, #16]
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	bf0c      	ite	eq
 80121f8:	2301      	moveq	r3, #1
 80121fa:	2300      	movne	r3, #0
 80121fc:	b2d8      	uxtb	r0, r3
 80121fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012202:	429a      	cmp	r2, r3
 8012204:	bf2c      	ite	cs
 8012206:	2301      	movcs	r3, #1
 8012208:	2300      	movcc	r3, #0
 801220a:	b2d9      	uxtb	r1, r3
 801220c:	697c      	ldr	r4, [r7, #20]
 801220e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8012212:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8012216:	f7ff fd2f 	bl	8011c78 <txMakeTailByte>
 801221a:	4603      	mov	r3, r0
 801221c:	461a      	mov	r2, r3
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	4423      	add	r3, r4
 8012222:	3330      	adds	r3, #48	; 0x30
 8012224:	701a      	strb	r2, [r3, #0]
 8012226:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801222a:	2b00      	cmp	r3, #0
 801222c:	bf14      	ite	ne
 801222e:	2301      	movne	r3, #1
 8012230:	2300      	moveq	r3, #0
 8012232:	b2db      	uxtb	r3, r3
 8012234:	f083 0301 	eor.w	r3, r3, #1
 8012238:	b2db      	uxtb	r3, r3
 801223a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 801223e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 801224a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224e:	429a      	cmp	r2, r3
 8012250:	f4ff af26 	bcc.w	80120a0 <txGenerateMultiFrameChain+0x90>
 8012254:	e000      	b.n	8012258 <txGenerateMultiFrameChain+0x248>
 8012256:	bf00      	nop
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	461c      	mov	r4, r3
 801225c:	f107 0310 	add.w	r3, r7, #16
 8012260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	3744      	adds	r7, #68	; 0x44
 801226c:	46bd      	mov	sp, r7
 801226e:	bd90      	pop	{r4, r7, pc}
 8012270:	08018384 	.word	0x08018384
 8012274:	08019060 	.word	0x08019060
 8012278:	080181c0 	.word	0x080181c0
 801227c:	080184d4 	.word	0x080184d4
 8012280:	080184f0 	.word	0x080184f0
 8012284:	08018470 	.word	0x08018470
 8012288:	08018518 	.word	0x08018518

0801228c <txPushMultiFrame>:
 801228c:	b580      	push	{r7, lr}
 801228e:	b094      	sub	sp, #80	; 0x50
 8012290:	af06      	add	r7, sp, #24
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <txPushMultiFrame+0x18>
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d106      	bne.n	80122b2 <txPushMultiFrame+0x26>
 80122a4:	4b65      	ldr	r3, [pc, #404]	; (801243c <txPushMultiFrame+0x1b0>)
 80122a6:	4a66      	ldr	r2, [pc, #408]	; (8012440 <txPushMultiFrame+0x1b4>)
 80122a8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80122ac:	4865      	ldr	r0, [pc, #404]	; (8012444 <txPushMultiFrame+0x1b8>)
 80122ae:	f001 fa89 	bl	80137c4 <__assert_func>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d106      	bne.n	80122c6 <txPushMultiFrame+0x3a>
 80122b8:	4b63      	ldr	r3, [pc, #396]	; (8012448 <txPushMultiFrame+0x1bc>)
 80122ba:	4a61      	ldr	r2, [pc, #388]	; (8012440 <txPushMultiFrame+0x1b4>)
 80122bc:	f240 11ed 	movw	r1, #493	; 0x1ed
 80122c0:	4860      	ldr	r0, [pc, #384]	; (8012444 <txPushMultiFrame+0x1b8>)
 80122c2:	f001 fa7f 	bl	80137c4 <__assert_func>
 80122c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d806      	bhi.n	80122dc <txPushMultiFrame+0x50>
 80122ce:	4b5f      	ldr	r3, [pc, #380]	; (801244c <txPushMultiFrame+0x1c0>)
 80122d0:	4a5b      	ldr	r2, [pc, #364]	; (8012440 <txPushMultiFrame+0x1b4>)
 80122d2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 80122d6:	485b      	ldr	r0, [pc, #364]	; (8012444 <txPushMultiFrame+0x1b8>)
 80122d8:	f001 fa74 	bl	80137c4 <__assert_func>
 80122dc:	2300      	movs	r3, #0
 80122de:	637b      	str	r3, [r7, #52]	; 0x34
 80122e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e2:	3302      	adds	r3, #2
 80122e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80122e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	4413      	add	r3, r2
 80122ec:	1e5a      	subs	r2, r3, #1
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
 80122f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	d806      	bhi.n	801230a <txPushMultiFrame+0x7e>
 80122fc:	4b54      	ldr	r3, [pc, #336]	; (8012450 <txPushMultiFrame+0x1c4>)
 80122fe:	4a50      	ldr	r2, [pc, #320]	; (8012440 <txPushMultiFrame+0x1b4>)
 8012300:	f240 11f3 	movw	r1, #499	; 0x1f3
 8012304:	484f      	ldr	r0, [pc, #316]	; (8012444 <txPushMultiFrame+0x1b8>)
 8012306:	f001 fa5d 	bl	80137c4 <__assert_func>
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	689a      	ldr	r2, [r3, #8]
 801230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012310:	441a      	add	r2, r3
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	429a      	cmp	r2, r3
 8012318:	d87b      	bhi.n	8012412 <txPushMultiFrame+0x186>
 801231a:	f107 0010 	add.w	r0, r7, #16
 801231e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012320:	9305      	str	r3, [sp, #20]
 8012322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012324:	9304      	str	r3, [sp, #16]
 8012326:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801232a:	9303      	str	r3, [sp, #12]
 801232c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801232e:	9302      	str	r3, [sp, #8]
 8012330:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012334:	e9cd 2300 	strd	r2, r3, [sp]
 8012338:	687a      	ldr	r2, [r7, #4]
 801233a:	68b9      	ldr	r1, [r7, #8]
 801233c:	f7ff fe68 	bl	8012010 <txGenerateMultiFrameChain>
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d051      	beq.n	80123ea <txPushMultiFrame+0x15e>
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	633b      	str	r3, [r7, #48]	; 0x30
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f103 000c 	add.w	r0, r3, #12
 8012350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012352:	4b40      	ldr	r3, [pc, #256]	; (8012454 <txPushMultiFrame+0x1c8>)
 8012354:	4a40      	ldr	r2, [pc, #256]	; (8012458 <txPushMultiFrame+0x1cc>)
 8012356:	f7ff f8f3 	bl	8011540 <cavlSearch>
 801235a:	61f8      	str	r0, [r7, #28]
 801235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235e:	69fa      	ldr	r2, [r7, #28]
 8012360:	429a      	cmp	r2, r3
 8012362:	d006      	beq.n	8012372 <txPushMultiFrame+0xe6>
 8012364:	4b3d      	ldr	r3, [pc, #244]	; (801245c <txPushMultiFrame+0x1d0>)
 8012366:	4a36      	ldr	r2, [pc, #216]	; (8012440 <txPushMultiFrame+0x1b4>)
 8012368:	f240 2105 	movw	r1, #517	; 0x205
 801236c:	4835      	ldr	r0, [pc, #212]	; (8012444 <txPushMultiFrame+0x1b8>)
 801236e:	f001 fa29 	bl	80137c4 <__assert_func>
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d106      	bne.n	8012388 <txPushMultiFrame+0xfc>
 801237a:	4b39      	ldr	r3, [pc, #228]	; (8012460 <txPushMultiFrame+0x1d4>)
 801237c:	4a30      	ldr	r2, [pc, #192]	; (8012440 <txPushMultiFrame+0x1b4>)
 801237e:	f240 2106 	movw	r1, #518	; 0x206
 8012382:	4830      	ldr	r0, [pc, #192]	; (8012444 <txPushMultiFrame+0x1b8>)
 8012384:	f001 fa1e 	bl	80137c4 <__assert_func>
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	691b      	ldr	r3, [r3, #16]
 801238c:	633b      	str	r3, [r7, #48]	; 0x30
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	2b00      	cmp	r3, #0
 8012392:	d1da      	bne.n	801234a <txPushMultiFrame+0xbe>
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012398:	429a      	cmp	r2, r3
 801239a:	d006      	beq.n	80123aa <txPushMultiFrame+0x11e>
 801239c:	4b31      	ldr	r3, [pc, #196]	; (8012464 <txPushMultiFrame+0x1d8>)
 801239e:	4a28      	ldr	r2, [pc, #160]	; (8012440 <txPushMultiFrame+0x1b4>)
 80123a0:	f240 2109 	movw	r1, #521	; 0x209
 80123a4:	4827      	ldr	r0, [pc, #156]	; (8012444 <txPushMultiFrame+0x1b8>)
 80123a6:	f001 fa0d 	bl	80137c4 <__assert_func>
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	689a      	ldr	r2, [r3, #8]
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	441a      	add	r2, r3
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	609a      	str	r2, [r3, #8]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	689a      	ldr	r2, [r3, #8]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d906      	bls.n	80123d0 <txPushMultiFrame+0x144>
 80123c2:	4b29      	ldr	r3, [pc, #164]	; (8012468 <txPushMultiFrame+0x1dc>)
 80123c4:	4a1e      	ldr	r2, [pc, #120]	; (8012440 <txPushMultiFrame+0x1b4>)
 80123c6:	f240 210b 	movw	r1, #523	; 0x20b
 80123ca:	481e      	ldr	r0, [pc, #120]	; (8012444 <txPushMultiFrame+0x1b8>)
 80123cc:	f001 f9fa 	bl	80137c4 <__assert_func>
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	da06      	bge.n	80123e4 <txPushMultiFrame+0x158>
 80123d6:	4b25      	ldr	r3, [pc, #148]	; (801246c <txPushMultiFrame+0x1e0>)
 80123d8:	4a19      	ldr	r2, [pc, #100]	; (8012440 <txPushMultiFrame+0x1b4>)
 80123da:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80123de:	4819      	ldr	r0, [pc, #100]	; (8012444 <txPushMultiFrame+0x1b8>)
 80123e0:	f001 f9f0 	bl	80137c4 <__assert_func>
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	637b      	str	r3, [r7, #52]	; 0x34
 80123e8:	e016      	b.n	8012418 <txPushMultiFrame+0x18c>
 80123ea:	f06f 0302 	mvn.w	r3, #2
 80123ee:	637b      	str	r3, [r7, #52]	; 0x34
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123f4:	e009      	b.n	801240a <txPushMultiFrame+0x17e>
 80123f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f8:	691b      	ldr	r3, [r3, #16]
 80123fa:	623b      	str	r3, [r7, #32]
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012402:	68b8      	ldr	r0, [r7, #8]
 8012404:	4798      	blx	r3
 8012406:	6a3b      	ldr	r3, [r7, #32]
 8012408:	62fb      	str	r3, [r7, #44]	; 0x2c
 801240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1f2      	bne.n	80123f6 <txPushMultiFrame+0x16a>
 8012410:	e002      	b.n	8012418 <txPushMultiFrame+0x18c>
 8012412:	f06f 0302 	mvn.w	r3, #2
 8012416:	637b      	str	r3, [r7, #52]	; 0x34
 8012418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241a:	2b00      	cmp	r3, #0
 801241c:	db09      	blt.n	8012432 <txPushMultiFrame+0x1a6>
 801241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012420:	2b01      	cmp	r3, #1
 8012422:	dc06      	bgt.n	8012432 <txPushMultiFrame+0x1a6>
 8012424:	4b12      	ldr	r3, [pc, #72]	; (8012470 <txPushMultiFrame+0x1e4>)
 8012426:	4a06      	ldr	r2, [pc, #24]	; (8012440 <txPushMultiFrame+0x1b4>)
 8012428:	f240 211f 	movw	r1, #543	; 0x21f
 801242c:	4805      	ldr	r0, [pc, #20]	; (8012444 <txPushMultiFrame+0x1b8>)
 801242e:	f001 f9c9 	bl	80137c4 <__assert_func>
 8012432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012434:	4618      	mov	r0, r3
 8012436:	3738      	adds	r7, #56	; 0x38
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	08018554 	.word	0x08018554
 8012440:	0801904c 	.word	0x0801904c
 8012444:	080181c0 	.word	0x080181c0
 8012448:	080184d4 	.word	0x080184d4
 801244c:	080184f0 	.word	0x080184f0
 8012450:	08018584 	.word	0x08018584
 8012454:	080118a1 	.word	0x080118a1
 8012458:	08011e05 	.word	0x08011e05
 801245c:	08018594 	.word	0x08018594
 8012460:	080185a8 	.word	0x080185a8
 8012464:	080185c4 	.word	0x080185c4
 8012468:	080184a0 	.word	0x080184a0
 801246c:	080185dc 	.word	0x080185dc
 8012470:	08018600 	.word	0x08018600

08012474 <rxTryParseFrame>:
 8012474:	b580      	push	{r7, lr}
 8012476:	b088      	sub	sp, #32
 8012478:	af00      	add	r7, sp, #0
 801247a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
 8012480:	603b      	str	r3, [r7, #0]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d106      	bne.n	8012496 <rxTryParseFrame+0x22>
 8012488:	4b96      	ldr	r3, [pc, #600]	; (80126e4 <rxTryParseFrame+0x270>)
 801248a:	4a97      	ldr	r2, [pc, #604]	; (80126e8 <rxTryParseFrame+0x274>)
 801248c:	f240 214e 	movw	r1, #590	; 0x24e
 8012490:	4896      	ldr	r0, [pc, #600]	; (80126ec <rxTryParseFrame+0x278>)
 8012492:	f001 f997 	bl	80137c4 <__assert_func>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801249e:	d306      	bcc.n	80124ae <rxTryParseFrame+0x3a>
 80124a0:	4b93      	ldr	r3, [pc, #588]	; (80126f0 <rxTryParseFrame+0x27c>)
 80124a2:	4a91      	ldr	r2, [pc, #580]	; (80126e8 <rxTryParseFrame+0x274>)
 80124a4:	f240 214f 	movw	r1, #591	; 0x24f
 80124a8:	4890      	ldr	r0, [pc, #576]	; (80126ec <rxTryParseFrame+0x278>)
 80124aa:	f001 f98b 	bl	80137c4 <__assert_func>
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d106      	bne.n	80124c2 <rxTryParseFrame+0x4e>
 80124b4:	4b8f      	ldr	r3, [pc, #572]	; (80126f4 <rxTryParseFrame+0x280>)
 80124b6:	4a8c      	ldr	r2, [pc, #560]	; (80126e8 <rxTryParseFrame+0x274>)
 80124b8:	f44f 7114 	mov.w	r1, #592	; 0x250
 80124bc:	488b      	ldr	r0, [pc, #556]	; (80126ec <rxTryParseFrame+0x278>)
 80124be:	f001 f981 	bl	80137c4 <__assert_func>
 80124c2:	2300      	movs	r3, #0
 80124c4:	77fb      	strb	r3, [r7, #31]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	f000 8105 	beq.w	80126da <rxTryParseFrame+0x266>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	689b      	ldr	r3, [r3, #8]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <rxTryParseFrame+0x72>
 80124d8:	4b87      	ldr	r3, [pc, #540]	; (80126f8 <rxTryParseFrame+0x284>)
 80124da:	4a83      	ldr	r2, [pc, #524]	; (80126e8 <rxTryParseFrame+0x274>)
 80124dc:	f44f 7115 	mov.w	r1, #596	; 0x254
 80124e0:	4882      	ldr	r0, [pc, #520]	; (80126ec <rxTryParseFrame+0x278>)
 80124e2:	f001 f96f 	bl	80137c4 <__assert_func>
 80124e6:	6839      	ldr	r1, [r7, #0]
 80124e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80124ec:	e9c1 2300 	strd	r2, r3, [r1]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	61bb      	str	r3, [r7, #24]
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	0e9b      	lsrs	r3, r3, #26
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	f003 0307 	and.w	r3, r3, #7
 8012500:	b2da      	uxtb	r2, r3
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	721a      	strb	r2, [r3, #8]
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	b2db      	uxtb	r3, r3
 801250a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801250e:	b2da      	uxtb	r2, r3
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	731a      	strb	r2, [r3, #12]
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801251a:	2b00      	cmp	r3, #0
 801251c:	d128      	bne.n	8012570 <rxTryParseFrame+0xfc>
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	2200      	movs	r2, #0
 8012522:	725a      	strb	r2, [r3, #9]
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	0a1b      	lsrs	r3, r3, #8
 8012528:	b29b      	uxth	r3, r3
 801252a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801252e:	b29a      	uxth	r2, r3
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	815a      	strh	r2, [r3, #10]
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <rxTryParseFrame+0xd0>
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	22ff      	movs	r2, #255	; 0xff
 8012542:	731a      	strb	r2, [r3, #12]
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	22ff      	movs	r2, #255	; 0xff
 8012548:	735a      	strb	r2, [r3, #13]
 801254a:	69bb      	ldr	r3, [r7, #24]
 801254c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012550:	2b00      	cmp	r3, #0
 8012552:	d106      	bne.n	8012562 <rxTryParseFrame+0xee>
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801255a:	2b00      	cmp	r3, #0
 801255c:	d101      	bne.n	8012562 <rxTryParseFrame+0xee>
 801255e:	2301      	movs	r3, #1
 8012560:	e000      	b.n	8012564 <rxTryParseFrame+0xf0>
 8012562:	2300      	movs	r3, #0
 8012564:	77fb      	strb	r3, [r7, #31]
 8012566:	7ffb      	ldrb	r3, [r7, #31]
 8012568:	f003 0301 	and.w	r3, r3, #1
 801256c:	77fb      	strb	r3, [r7, #31]
 801256e:	e02c      	b.n	80125ca <rxTryParseFrame+0x156>
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <rxTryParseFrame+0x10a>
 801257a:	2202      	movs	r2, #2
 801257c:	e000      	b.n	8012580 <rxTryParseFrame+0x10c>
 801257e:	2201      	movs	r2, #1
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	725a      	strb	r2, [r3, #9]
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	0b9b      	lsrs	r3, r3, #14
 8012588:	b29b      	uxth	r3, r3
 801258a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801258e:	b29a      	uxth	r2, r3
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	815a      	strh	r2, [r3, #10]
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	09db      	lsrs	r3, r3, #7
 8012598:	b2db      	uxtb	r3, r3
 801259a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801259e:	b2da      	uxtb	r2, r3
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	735a      	strb	r2, [r3, #13]
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d107      	bne.n	80125be <rxTryParseFrame+0x14a>
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	7b1a      	ldrb	r2, [r3, #12]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	7b5b      	ldrb	r3, [r3, #13]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d001      	beq.n	80125be <rxTryParseFrame+0x14a>
 80125ba:	2301      	movs	r3, #1
 80125bc:	e000      	b.n	80125c0 <rxTryParseFrame+0x14c>
 80125be:	2300      	movs	r3, #0
 80125c0:	77fb      	strb	r3, [r7, #31]
 80125c2:	7ffb      	ldrb	r3, [r7, #31]
 80125c4:	f003 0301 	and.w	r3, r3, #1
 80125c8:	77fb      	strb	r3, [r7, #31]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	1e5a      	subs	r2, r3, #1
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	615a      	str	r2, [r3, #20]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	689a      	ldr	r2, [r3, #8]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	619a      	str	r2, [r3, #24]
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	699a      	ldr	r2, [r3, #24]
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	695b      	ldr	r3, [r3, #20]
 80125e4:	4413      	add	r3, r2
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	75fb      	strb	r3, [r7, #23]
 80125ea:	7dfb      	ldrb	r3, [r7, #23]
 80125ec:	f003 031f 	and.w	r3, r3, #31
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	739a      	strb	r2, [r3, #14]
 80125f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	09db      	lsrs	r3, r3, #7
 80125fe:	b2da      	uxtb	r2, r3
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	73da      	strb	r2, [r3, #15]
 8012604:	7dfb      	ldrb	r3, [r7, #23]
 8012606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801260a:	2b00      	cmp	r3, #0
 801260c:	bf14      	ite	ne
 801260e:	2301      	movne	r3, #1
 8012610:	2300      	moveq	r3, #0
 8012612:	b2da      	uxtb	r2, r3
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	741a      	strb	r2, [r3, #16]
 8012618:	7dfb      	ldrb	r3, [r7, #23]
 801261a:	f003 0320 	and.w	r3, r3, #32
 801261e:	2b00      	cmp	r3, #0
 8012620:	bf14      	ite	ne
 8012622:	2301      	movne	r3, #1
 8012624:	2300      	moveq	r3, #0
 8012626:	b2da      	uxtb	r2, r3
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	745a      	strb	r2, [r3, #17]
 801262c:	7ffb      	ldrb	r3, [r7, #31]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d00c      	beq.n	801264c <rxTryParseFrame+0x1d8>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	7bdb      	ldrb	r3, [r3, #15]
 8012636:	f083 0301 	eor.w	r3, r3, #1
 801263a:	b2db      	uxtb	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	d103      	bne.n	8012648 <rxTryParseFrame+0x1d4>
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	7c5b      	ldrb	r3, [r3, #17]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d001      	beq.n	801264c <rxTryParseFrame+0x1d8>
 8012648:	2301      	movs	r3, #1
 801264a:	e000      	b.n	801264e <rxTryParseFrame+0x1da>
 801264c:	2300      	movs	r3, #0
 801264e:	77fb      	strb	r3, [r7, #31]
 8012650:	7ffb      	ldrb	r3, [r7, #31]
 8012652:	f003 0301 	and.w	r3, r3, #1
 8012656:	77fb      	strb	r3, [r7, #31]
 8012658:	7ffb      	ldrb	r3, [r7, #31]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00d      	beq.n	801267a <rxTryParseFrame+0x206>
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	7bdb      	ldrb	r3, [r3, #15]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d003      	beq.n	801266e <rxTryParseFrame+0x1fa>
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	7c1b      	ldrb	r3, [r3, #16]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d103      	bne.n	8012676 <rxTryParseFrame+0x202>
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	7b1b      	ldrb	r3, [r3, #12]
 8012672:	2bff      	cmp	r3, #255	; 0xff
 8012674:	d001      	beq.n	801267a <rxTryParseFrame+0x206>
 8012676:	2301      	movs	r3, #1
 8012678:	e000      	b.n	801267c <rxTryParseFrame+0x208>
 801267a:	2300      	movs	r3, #0
 801267c:	77fb      	strb	r3, [r7, #31]
 801267e:	7ffb      	ldrb	r3, [r7, #31]
 8012680:	f003 0301 	and.w	r3, r3, #1
 8012684:	77fb      	strb	r3, [r7, #31]
 8012686:	7ffb      	ldrb	r3, [r7, #31]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d009      	beq.n	80126a0 <rxTryParseFrame+0x22c>
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	695b      	ldr	r3, [r3, #20]
 8012690:	2b06      	cmp	r3, #6
 8012692:	d803      	bhi.n	801269c <rxTryParseFrame+0x228>
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	7c1b      	ldrb	r3, [r3, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d001      	beq.n	80126a0 <rxTryParseFrame+0x22c>
 801269c:	2301      	movs	r3, #1
 801269e:	e000      	b.n	80126a2 <rxTryParseFrame+0x22e>
 80126a0:	2300      	movs	r3, #0
 80126a2:	77fb      	strb	r3, [r7, #31]
 80126a4:	7ffb      	ldrb	r3, [r7, #31]
 80126a6:	f003 0301 	and.w	r3, r3, #1
 80126aa:	77fb      	strb	r3, [r7, #31]
 80126ac:	7ffb      	ldrb	r3, [r7, #31]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d00d      	beq.n	80126ce <rxTryParseFrame+0x25a>
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	695b      	ldr	r3, [r3, #20]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d107      	bne.n	80126ca <rxTryParseFrame+0x256>
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	7bdb      	ldrb	r3, [r3, #15]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d005      	beq.n	80126ce <rxTryParseFrame+0x25a>
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	7c1b      	ldrb	r3, [r3, #16]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <rxTryParseFrame+0x25a>
 80126ca:	2301      	movs	r3, #1
 80126cc:	e000      	b.n	80126d0 <rxTryParseFrame+0x25c>
 80126ce:	2300      	movs	r3, #0
 80126d0:	77fb      	strb	r3, [r7, #31]
 80126d2:	7ffb      	ldrb	r3, [r7, #31]
 80126d4:	f003 0301 	and.w	r3, r3, #1
 80126d8:	77fb      	strb	r3, [r7, #31]
 80126da:	7ffb      	ldrb	r3, [r7, #31]
 80126dc:	4618      	mov	r0, r3
 80126de:	3720      	adds	r7, #32
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	08018618 	.word	0x08018618
 80126e8:	0801909c 	.word	0x0801909c
 80126ec:	080181c0 	.word	0x080181c0
 80126f0:	08018630 	.word	0x08018630
 80126f4:	08018660 	.word	0x08018660
 80126f8:	08018674 	.word	0x08018674

080126fc <rxInitTransferMetadataFromFrame>:
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d106      	bne.n	801271a <rxInitTransferMetadataFromFrame+0x1e>
 801270c:	4b19      	ldr	r3, [pc, #100]	; (8012774 <rxInitTransferMetadataFromFrame+0x78>)
 801270e:	4a1a      	ldr	r2, [pc, #104]	; (8012778 <rxInitTransferMetadataFromFrame+0x7c>)
 8012710:	f240 218f 	movw	r1, #655	; 0x28f
 8012714:	4819      	ldr	r0, [pc, #100]	; (801277c <rxInitTransferMetadataFromFrame+0x80>)
 8012716:	f001 f855 	bl	80137c4 <__assert_func>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	699b      	ldr	r3, [r3, #24]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <rxInitTransferMetadataFromFrame+0x34>
 8012722:	4b17      	ldr	r3, [pc, #92]	; (8012780 <rxInitTransferMetadataFromFrame+0x84>)
 8012724:	4a14      	ldr	r2, [pc, #80]	; (8012778 <rxInitTransferMetadataFromFrame+0x7c>)
 8012726:	f44f 7124 	mov.w	r1, #656	; 0x290
 801272a:	4814      	ldr	r0, [pc, #80]	; (801277c <rxInitTransferMetadataFromFrame+0x80>)
 801272c:	f001 f84a 	bl	80137c4 <__assert_func>
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d106      	bne.n	8012744 <rxInitTransferMetadataFromFrame+0x48>
 8012736:	4b13      	ldr	r3, [pc, #76]	; (8012784 <rxInitTransferMetadataFromFrame+0x88>)
 8012738:	4a0f      	ldr	r2, [pc, #60]	; (8012778 <rxInitTransferMetadataFromFrame+0x7c>)
 801273a:	f240 2191 	movw	r1, #657	; 0x291
 801273e:	480f      	ldr	r0, [pc, #60]	; (801277c <rxInitTransferMetadataFromFrame+0x80>)
 8012740:	f001 f840 	bl	80137c4 <__assert_func>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	7a1a      	ldrb	r2, [r3, #8]
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	701a      	strb	r2, [r3, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	7a5a      	ldrb	r2, [r3, #9]
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	705a      	strb	r2, [r3, #1]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	895a      	ldrh	r2, [r3, #10]
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	805a      	strh	r2, [r3, #2]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	7b1a      	ldrb	r2, [r3, #12]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	711a      	strb	r2, [r3, #4]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	7b9a      	ldrb	r2, [r3, #14]
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	715a      	strb	r2, [r3, #5]
 801276c:	bf00      	nop
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	08018618 	.word	0x08018618
 8012778:	08019130 	.word	0x08019130
 801277c:	080181c0 	.word	0x080181c0
 8012780:	08018674 	.word	0x08018674
 8012784:	08018694 	.word	0x08018694

08012788 <rxComputeTransferIDDifference>:
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	4603      	mov	r3, r0
 8012790:	460a      	mov	r2, r1
 8012792:	71fb      	strb	r3, [r7, #7]
 8012794:	4613      	mov	r3, r2
 8012796:	71bb      	strb	r3, [r7, #6]
 8012798:	79fb      	ldrb	r3, [r7, #7]
 801279a:	2b1f      	cmp	r3, #31
 801279c:	d906      	bls.n	80127ac <rxComputeTransferIDDifference+0x24>
 801279e:	4b15      	ldr	r3, [pc, #84]	; (80127f4 <rxComputeTransferIDDifference+0x6c>)
 80127a0:	4a15      	ldr	r2, [pc, #84]	; (80127f8 <rxComputeTransferIDDifference+0x70>)
 80127a2:	f44f 7127 	mov.w	r1, #668	; 0x29c
 80127a6:	4815      	ldr	r0, [pc, #84]	; (80127fc <rxComputeTransferIDDifference+0x74>)
 80127a8:	f001 f80c 	bl	80137c4 <__assert_func>
 80127ac:	79bb      	ldrb	r3, [r7, #6]
 80127ae:	2b1f      	cmp	r3, #31
 80127b0:	d906      	bls.n	80127c0 <rxComputeTransferIDDifference+0x38>
 80127b2:	4b13      	ldr	r3, [pc, #76]	; (8012800 <rxComputeTransferIDDifference+0x78>)
 80127b4:	4a10      	ldr	r2, [pc, #64]	; (80127f8 <rxComputeTransferIDDifference+0x70>)
 80127b6:	f240 219d 	movw	r1, #669	; 0x29d
 80127ba:	4810      	ldr	r0, [pc, #64]	; (80127fc <rxComputeTransferIDDifference+0x74>)
 80127bc:	f001 f802 	bl	80137c4 <__assert_func>
 80127c0:	79fb      	ldrb	r3, [r7, #7]
 80127c2:	b29a      	uxth	r2, r3
 80127c4:	79bb      	ldrb	r3, [r7, #6]
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	81fb      	strh	r3, [r7, #14]
 80127ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	da07      	bge.n	80127e6 <rxComputeTransferIDDifference+0x5e>
 80127d6:	2320      	movs	r3, #32
 80127d8:	737b      	strb	r3, [r7, #13]
 80127da:	7b7b      	ldrb	r3, [r7, #13]
 80127dc:	b29a      	uxth	r2, r3
 80127de:	89fb      	ldrh	r3, [r7, #14]
 80127e0:	4413      	add	r3, r2
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	81fb      	strh	r3, [r7, #14]
 80127e6:	89fb      	ldrh	r3, [r7, #14]
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	080186b0 	.word	0x080186b0
 80127f8:	080190cc 	.word	0x080190cc
 80127fc:	080181c0 	.word	0x080181c0
 8012800:	080186c8 	.word	0x080186c8

08012804 <rxSessionWritePayload>:
 8012804:	b580      	push	{r7, lr}
 8012806:	b086      	sub	sp, #24
 8012808:	af00      	add	r7, sp, #0
 801280a:	60f8      	str	r0, [r7, #12]
 801280c:	60b9      	str	r1, [r7, #8]
 801280e:	607a      	str	r2, [r7, #4]
 8012810:	603b      	str	r3, [r7, #0]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d106      	bne.n	8012826 <rxSessionWritePayload+0x22>
 8012818:	4b67      	ldr	r3, [pc, #412]	; (80129b8 <rxSessionWritePayload+0x1b4>)
 801281a:	4a68      	ldr	r2, [pc, #416]	; (80129bc <rxSessionWritePayload+0x1b8>)
 801281c:	f240 21ad 	movw	r1, #685	; 0x2ad
 8012820:	4867      	ldr	r0, [pc, #412]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012822:	f000 ffcf 	bl	80137c4 <__assert_func>
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d106      	bne.n	801283a <rxSessionWritePayload+0x36>
 801282c:	4b65      	ldr	r3, [pc, #404]	; (80129c4 <rxSessionWritePayload+0x1c0>)
 801282e:	4a63      	ldr	r2, [pc, #396]	; (80129bc <rxSessionWritePayload+0x1b8>)
 8012830:	f240 21ae 	movw	r1, #686	; 0x2ae
 8012834:	4862      	ldr	r0, [pc, #392]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012836:	f000 ffc5 	bl	80137c4 <__assert_func>
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d109      	bne.n	8012854 <rxSessionWritePayload+0x50>
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d006      	beq.n	8012854 <rxSessionWritePayload+0x50>
 8012846:	4b60      	ldr	r3, [pc, #384]	; (80129c8 <rxSessionWritePayload+0x1c4>)
 8012848:	4a5c      	ldr	r2, [pc, #368]	; (80129bc <rxSessionWritePayload+0x1b8>)
 801284a:	f240 21af 	movw	r1, #687	; 0x2af
 801284e:	485c      	ldr	r0, [pc, #368]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012850:	f000 ffb8 	bl	80137c4 <__assert_func>
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	429a      	cmp	r2, r3
 801285c:	d206      	bcs.n	801286c <rxSessionWritePayload+0x68>
 801285e:	4b5b      	ldr	r3, [pc, #364]	; (80129cc <rxSessionWritePayload+0x1c8>)
 8012860:	4a56      	ldr	r2, [pc, #344]	; (80129bc <rxSessionWritePayload+0x1b8>)
 8012862:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8012866:	4856      	ldr	r0, [pc, #344]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012868:	f000 ffac 	bl	80137c4 <__assert_func>
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	68da      	ldr	r2, [r3, #12]
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	689b      	ldr	r3, [r3, #8]
 8012874:	429a      	cmp	r2, r3
 8012876:	d906      	bls.n	8012886 <rxSessionWritePayload+0x82>
 8012878:	4b55      	ldr	r3, [pc, #340]	; (80129d0 <rxSessionWritePayload+0x1cc>)
 801287a:	4a50      	ldr	r2, [pc, #320]	; (80129bc <rxSessionWritePayload+0x1b8>)
 801287c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8012880:	484f      	ldr	r0, [pc, #316]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012882:	f000 ff9f 	bl	80137c4 <__assert_func>
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	689a      	ldr	r2, [r3, #8]
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	441a      	add	r2, r3
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	609a      	str	r2, [r3, #8]
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	691b      	ldr	r3, [r3, #16]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d115      	bne.n	80128c6 <rxSessionWritePayload+0xc2>
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d012      	beq.n	80128c6 <rxSessionWritePayload+0xc2>
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d006      	beq.n	80128b6 <rxSessionWritePayload+0xb2>
 80128a8:	4b4a      	ldr	r3, [pc, #296]	; (80129d4 <rxSessionWritePayload+0x1d0>)
 80128aa:	4a44      	ldr	r2, [pc, #272]	; (80129bc <rxSessionWritePayload+0x1b8>)
 80128ac:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80128b0:	4843      	ldr	r0, [pc, #268]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 80128b2:	f000 ff87 	bl	80137c4 <__assert_func>
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	689b      	ldr	r3, [r3, #8]
 80128ba:	6879      	ldr	r1, [r7, #4]
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	4798      	blx	r3
 80128c0:	4602      	mov	r2, r0
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	611a      	str	r2, [r3, #16]
 80128c6:	2300      	movs	r3, #0
 80128c8:	75fb      	strb	r3, [r7, #23]
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	691b      	ldr	r3, [r3, #16]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d04e      	beq.n	8012970 <rxSessionWritePayload+0x16c>
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	613b      	str	r3, [r7, #16]
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	68da      	ldr	r2, [r3, #12]
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	4413      	add	r3, r2
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d229      	bcs.n	8012938 <rxSessionWritePayload+0x134>
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d206      	bcs.n	80128fc <rxSessionWritePayload+0xf8>
 80128ee:	4b37      	ldr	r3, [pc, #220]	; (80129cc <rxSessionWritePayload+0x1c8>)
 80128f0:	4a32      	ldr	r2, [pc, #200]	; (80129bc <rxSessionWritePayload+0x1b8>)
 80128f2:	f240 21c3 	movw	r1, #707	; 0x2c3
 80128f6:	4832      	ldr	r0, [pc, #200]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 80128f8:	f000 ff64 	bl	80137c4 <__assert_func>
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	1ad3      	subs	r3, r2, r3
 8012904:	613b      	str	r3, [r7, #16]
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	68da      	ldr	r2, [r3, #12]
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	4413      	add	r3, r2
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	429a      	cmp	r2, r3
 8012912:	d006      	beq.n	8012922 <rxSessionWritePayload+0x11e>
 8012914:	4b30      	ldr	r3, [pc, #192]	; (80129d8 <rxSessionWritePayload+0x1d4>)
 8012916:	4a29      	ldr	r2, [pc, #164]	; (80129bc <rxSessionWritePayload+0x1b8>)
 8012918:	f240 21c5 	movw	r1, #709	; 0x2c5
 801291c:	4828      	ldr	r0, [pc, #160]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 801291e:	f000 ff51 	bl	80137c4 <__assert_func>
 8012922:	693a      	ldr	r2, [r7, #16]
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	429a      	cmp	r2, r3
 8012928:	d306      	bcc.n	8012938 <rxSessionWritePayload+0x134>
 801292a:	4b2c      	ldr	r3, [pc, #176]	; (80129dc <rxSessionWritePayload+0x1d8>)
 801292c:	4a23      	ldr	r2, [pc, #140]	; (80129bc <rxSessionWritePayload+0x1b8>)
 801292e:	f240 21c6 	movw	r1, #710	; 0x2c6
 8012932:	4823      	ldr	r0, [pc, #140]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012934:	f000 ff46 	bl	80137c4 <__assert_func>
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	691a      	ldr	r2, [r3, #16]
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	68db      	ldr	r3, [r3, #12]
 8012940:	4413      	add	r3, r2
 8012942:	693a      	ldr	r2, [r7, #16]
 8012944:	6a39      	ldr	r1, [r7, #32]
 8012946:	4618      	mov	r0, r3
 8012948:	f002 f8e5 	bl	8014b16 <memcpy>
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	68da      	ldr	r2, [r3, #12]
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	441a      	add	r2, r3
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	60da      	str	r2, [r3, #12]
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	429a      	cmp	r2, r3
 8012960:	d219      	bcs.n	8012996 <rxSessionWritePayload+0x192>
 8012962:	4b1a      	ldr	r3, [pc, #104]	; (80129cc <rxSessionWritePayload+0x1c8>)
 8012964:	4a15      	ldr	r2, [pc, #84]	; (80129bc <rxSessionWritePayload+0x1b8>)
 8012966:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801296a:	4815      	ldr	r0, [pc, #84]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 801296c:	f000 ff2a 	bl	80137c4 <__assert_func>
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d006      	beq.n	8012986 <rxSessionWritePayload+0x182>
 8012978:	4b16      	ldr	r3, [pc, #88]	; (80129d4 <rxSessionWritePayload+0x1d0>)
 801297a:	4a10      	ldr	r2, [pc, #64]	; (80129bc <rxSessionWritePayload+0x1b8>)
 801297c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8012980:	480f      	ldr	r0, [pc, #60]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 8012982:	f000 ff1f 	bl	80137c4 <__assert_func>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d002      	beq.n	8012992 <rxSessionWritePayload+0x18e>
 801298c:	f06f 0302 	mvn.w	r3, #2
 8012990:	e000      	b.n	8012994 <rxSessionWritePayload+0x190>
 8012992:	2300      	movs	r3, #0
 8012994:	75fb      	strb	r3, [r7, #23]
 8012996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801299a:	2b00      	cmp	r3, #0
 801299c:	dd06      	ble.n	80129ac <rxSessionWritePayload+0x1a8>
 801299e:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <rxSessionWritePayload+0x1dc>)
 80129a0:	4a06      	ldr	r2, [pc, #24]	; (80129bc <rxSessionWritePayload+0x1b8>)
 80129a2:	f240 21d7 	movw	r1, #727	; 0x2d7
 80129a6:	4806      	ldr	r0, [pc, #24]	; (80129c0 <rxSessionWritePayload+0x1bc>)
 80129a8:	f000 ff0c 	bl	80137c4 <__assert_func>
 80129ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80129b0:	4618      	mov	r0, r3
 80129b2:	3718      	adds	r7, #24
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	08018384 	.word	0x08018384
 80129bc:	08019118 	.word	0x08019118
 80129c0:	080181c0 	.word	0x080181c0
 80129c4:	080186e0 	.word	0x080186e0
 80129c8:	0801827c 	.word	0x0801827c
 80129cc:	080186f4 	.word	0x080186f4
 80129d0:	08018710 	.word	0x08018710
 80129d4:	08018740 	.word	0x08018740
 80129d8:	08018758 	.word	0x08018758
 80129dc:	08018788 	.word	0x08018788
 80129e0:	080187a8 	.word	0x080187a8

080129e4 <rxSessionRestart>:
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	6039      	str	r1, [r7, #0]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d106      	bne.n	8012a02 <rxSessionRestart+0x1e>
 80129f4:	4b1a      	ldr	r3, [pc, #104]	; (8012a60 <rxSessionRestart+0x7c>)
 80129f6:	4a1b      	ldr	r2, [pc, #108]	; (8012a64 <rxSessionRestart+0x80>)
 80129f8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80129fc:	481a      	ldr	r0, [pc, #104]	; (8012a68 <rxSessionRestart+0x84>)
 80129fe:	f000 fee1 	bl	80137c4 <__assert_func>
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d106      	bne.n	8012a16 <rxSessionRestart+0x32>
 8012a08:	4b18      	ldr	r3, [pc, #96]	; (8012a6c <rxSessionRestart+0x88>)
 8012a0a:	4a16      	ldr	r2, [pc, #88]	; (8012a64 <rxSessionRestart+0x80>)
 8012a0c:	f240 21de 	movw	r1, #734	; 0x2de
 8012a10:	4815      	ldr	r0, [pc, #84]	; (8012a68 <rxSessionRestart+0x84>)
 8012a12:	f000 fed7 	bl	80137c4 <__assert_func>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	683a      	ldr	r2, [r7, #0]
 8012a1c:	6912      	ldr	r2, [r2, #16]
 8012a1e:	4611      	mov	r1, r2
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	4798      	blx	r3
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	2200      	movs	r2, #0
 8012a28:	609a      	str	r2, [r3, #8]
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	60da      	str	r2, [r3, #12]
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	2200      	movs	r2, #0
 8012a34:	611a      	str	r2, [r3, #16]
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a3c:	829a      	strh	r2, [r3, #20]
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	7d9b      	ldrb	r3, [r3, #22]
 8012a42:	3301      	adds	r3, #1
 8012a44:	b2db      	uxtb	r3, r3
 8012a46:	f003 031f 	and.w	r3, r3, #31
 8012a4a:	b2da      	uxtb	r2, r3
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	759a      	strb	r2, [r3, #22]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	2201      	movs	r2, #1
 8012a54:	761a      	strb	r2, [r3, #24]
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	08018384 	.word	0x08018384
 8012a64:	080190ec 	.word	0x080190ec
 8012a68:	080181c0 	.word	0x080181c0
 8012a6c:	080186e0 	.word	0x080186e0

08012a70 <rxSessionAcceptFrame>:
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b088      	sub	sp, #32
 8012a74:	af02      	add	r7, sp, #8
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
 8012a7c:	603b      	str	r3, [r7, #0]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <rxSessionAcceptFrame+0x22>
 8012a84:	4b81      	ldr	r3, [pc, #516]	; (8012c8c <rxSessionAcceptFrame+0x21c>)
 8012a86:	4a82      	ldr	r2, [pc, #520]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012a88:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012a8c:	4881      	ldr	r0, [pc, #516]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012a8e:	f000 fe99 	bl	80137c4 <__assert_func>
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d106      	bne.n	8012aa6 <rxSessionAcceptFrame+0x36>
 8012a98:	4b7f      	ldr	r3, [pc, #508]	; (8012c98 <rxSessionAcceptFrame+0x228>)
 8012a9a:	4a7d      	ldr	r2, [pc, #500]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012a9c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8012aa0:	487c      	ldr	r0, [pc, #496]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012aa2:	f000 fe8f 	bl	80137c4 <__assert_func>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d106      	bne.n	8012aba <rxSessionAcceptFrame+0x4a>
 8012aac:	4b7b      	ldr	r3, [pc, #492]	; (8012c9c <rxSessionAcceptFrame+0x22c>)
 8012aae:	4a78      	ldr	r2, [pc, #480]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012ab0:	f240 21f1 	movw	r1, #753	; 0x2f1
 8012ab4:	4877      	ldr	r0, [pc, #476]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012ab6:	f000 fe85 	bl	80137c4 <__assert_func>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d106      	bne.n	8012ad0 <rxSessionAcceptFrame+0x60>
 8012ac2:	4b77      	ldr	r3, [pc, #476]	; (8012ca0 <rxSessionAcceptFrame+0x230>)
 8012ac4:	4a72      	ldr	r2, [pc, #456]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012ac6:	f240 21f2 	movw	r1, #754	; 0x2f2
 8012aca:	4872      	ldr	r0, [pc, #456]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012acc:	f000 fe7a 	bl	80137c4 <__assert_func>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	7b9b      	ldrb	r3, [r3, #14]
 8012ad4:	2b1f      	cmp	r3, #31
 8012ad6:	d906      	bls.n	8012ae6 <rxSessionAcceptFrame+0x76>
 8012ad8:	4b72      	ldr	r3, [pc, #456]	; (8012ca4 <rxSessionAcceptFrame+0x234>)
 8012ada:	4a6d      	ldr	r2, [pc, #436]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012adc:	f240 21f3 	movw	r1, #755	; 0x2f3
 8012ae0:	486c      	ldr	r0, [pc, #432]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012ae2:	f000 fe6f 	bl	80137c4 <__assert_func>
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d106      	bne.n	8012afa <rxSessionAcceptFrame+0x8a>
 8012aec:	4b6e      	ldr	r3, [pc, #440]	; (8012ca8 <rxSessionAcceptFrame+0x238>)
 8012aee:	4a68      	ldr	r2, [pc, #416]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012af0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8012af4:	4867      	ldr	r0, [pc, #412]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012af6:	f000 fe65 	bl	80137c4 <__assert_func>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	7bdb      	ldrb	r3, [r3, #15]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d005      	beq.n	8012b0e <rxSessionAcceptFrame+0x9e>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b08:	68b9      	ldr	r1, [r7, #8]
 8012b0a:	e9c1 2300 	strd	r2, r3, [r1]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	7bdb      	ldrb	r3, [r3, #15]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d005      	beq.n	8012b22 <rxSessionAcceptFrame+0xb2>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	7c1b      	ldrb	r3, [r3, #16]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d001      	beq.n	8012b22 <rxSessionAcceptFrame+0xb2>
 8012b1e:	2301      	movs	r3, #1
 8012b20:	e000      	b.n	8012b24 <rxSessionAcceptFrame+0xb4>
 8012b22:	2300      	movs	r3, #0
 8012b24:	75bb      	strb	r3, [r7, #22]
 8012b26:	7dbb      	ldrb	r3, [r7, #22]
 8012b28:	f003 0301 	and.w	r3, r3, #1
 8012b2c:	75bb      	strb	r3, [r7, #22]
 8012b2e:	7dbb      	ldrb	r3, [r7, #22]
 8012b30:	f083 0301 	eor.w	r3, r3, #1
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00c      	beq.n	8012b54 <rxSessionAcceptFrame+0xe4>
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	8a98      	ldrh	r0, [r3, #20]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6959      	ldr	r1, [r3, #20]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	699b      	ldr	r3, [r3, #24]
 8012b46:	461a      	mov	r2, r3
 8012b48:	f7fe fed6 	bl	80118f8 <crcAdd>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	461a      	mov	r2, r3
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	829a      	strh	r2, [r3, #20]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	695a      	ldr	r2, [r3, #20]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	683a      	ldr	r2, [r7, #0]
 8012b62:	68b9      	ldr	r1, [r7, #8]
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f7ff fe4d 	bl	8012804 <rxSessionWritePayload>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	75fb      	strb	r3, [r7, #23]
 8012b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	da10      	bge.n	8012b98 <rxSessionAcceptFrame+0x128>
 8012b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012b7a:	f113 0f03 	cmn.w	r3, #3
 8012b7e:	d006      	beq.n	8012b8e <rxSessionAcceptFrame+0x11e>
 8012b80:	4b4a      	ldr	r3, [pc, #296]	; (8012cac <rxSessionAcceptFrame+0x23c>)
 8012b82:	4a43      	ldr	r2, [pc, #268]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012b84:	f240 3106 	movw	r1, #774	; 0x306
 8012b88:	4842      	ldr	r0, [pc, #264]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012b8a:	f000 fe1b 	bl	80137c4 <__assert_func>
 8012b8e:	68b9      	ldr	r1, [r7, #8]
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f7ff ff27 	bl	80129e4 <rxSessionRestart>
 8012b96:	e072      	b.n	8012c7e <rxSessionAcceptFrame+0x20e>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	7c1b      	ldrb	r3, [r3, #16]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d05f      	beq.n	8012c60 <rxSessionAcceptFrame+0x1f0>
 8012ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d006      	beq.n	8012bb6 <rxSessionAcceptFrame+0x146>
 8012ba8:	4b41      	ldr	r3, [pc, #260]	; (8012cb0 <rxSessionAcceptFrame+0x240>)
 8012baa:	4a39      	ldr	r2, [pc, #228]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012bac:	f240 310b 	movw	r1, #779	; 0x30b
 8012bb0:	4838      	ldr	r0, [pc, #224]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012bb2:	f000 fe07 	bl	80137c4 <__assert_func>
 8012bb6:	7dbb      	ldrb	r3, [r7, #22]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d103      	bne.n	8012bc4 <rxSessionAcceptFrame+0x154>
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	8a9b      	ldrh	r3, [r3, #20]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d148      	bne.n	8012c56 <rxSessionAcceptFrame+0x1e6>
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	75fb      	strb	r3, [r7, #23]
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	4619      	mov	r1, r3
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff fd95 	bl	80126fc <rxInitTransferMetadataFromFrame>
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd8:	6a39      	ldr	r1, [r7, #32]
 8012bda:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	68da      	ldr	r2, [r3, #12]
 8012be2:	6a3b      	ldr	r3, [r7, #32]
 8012be4:	611a      	str	r2, [r3, #16]
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	691a      	ldr	r2, [r3, #16]
 8012bea:	6a3b      	ldr	r3, [r7, #32]
 8012bec:	615a      	str	r2, [r3, #20]
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	689a      	ldr	r2, [r3, #8]
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d206      	bcs.n	8012c08 <rxSessionAcceptFrame+0x198>
 8012bfa:	4b2e      	ldr	r3, [pc, #184]	; (8012cb4 <rxSessionAcceptFrame+0x244>)
 8012bfc:	4a24      	ldr	r2, [pc, #144]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012bfe:	f240 3115 	movw	r1, #789	; 0x315
 8012c02:	4824      	ldr	r0, [pc, #144]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012c04:	f000 fdde 	bl	80137c4 <__assert_func>
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	689a      	ldr	r2, [r3, #8]
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	1ad3      	subs	r3, r2, r3
 8012c12:	613b      	str	r3, [r7, #16]
 8012c14:	7dbb      	ldrb	r3, [r7, #22]
 8012c16:	f083 0301 	eor.w	r3, r3, #1
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d017      	beq.n	8012c50 <rxSessionAcceptFrame+0x1e0>
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d814      	bhi.n	8012c50 <rxSessionAcceptFrame+0x1e0>
 8012c26:	6a3b      	ldr	r3, [r7, #32]
 8012c28:	691a      	ldr	r2, [r3, #16]
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	f1c3 0302 	rsb	r3, r3, #2
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d206      	bcs.n	8012c42 <rxSessionAcceptFrame+0x1d2>
 8012c34:	4b20      	ldr	r3, [pc, #128]	; (8012cb8 <rxSessionAcceptFrame+0x248>)
 8012c36:	4a16      	ldr	r2, [pc, #88]	; (8012c90 <rxSessionAcceptFrame+0x220>)
 8012c38:	f240 3119 	movw	r1, #793	; 0x319
 8012c3c:	4815      	ldr	r0, [pc, #84]	; (8012c94 <rxSessionAcceptFrame+0x224>)
 8012c3e:	f000 fdc1 	bl	80137c4 <__assert_func>
 8012c42:	6a3b      	ldr	r3, [r7, #32]
 8012c44:	691a      	ldr	r2, [r3, #16]
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	4413      	add	r3, r2
 8012c4a:	1e9a      	subs	r2, r3, #2
 8012c4c:	6a3b      	ldr	r3, [r7, #32]
 8012c4e:	611a      	str	r2, [r3, #16]
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	2200      	movs	r2, #0
 8012c54:	611a      	str	r2, [r3, #16]
 8012c56:	68b9      	ldr	r1, [r7, #8]
 8012c58:	68f8      	ldr	r0, [r7, #12]
 8012c5a:	f7ff fec3 	bl	80129e4 <rxSessionRestart>
 8012c5e:	e00e      	b.n	8012c7e <rxSessionAcceptFrame+0x20e>
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	7e1b      	ldrb	r3, [r3, #24]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	bf14      	ite	ne
 8012c68:	2301      	movne	r3, #1
 8012c6a:	2300      	moveq	r3, #0
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	f083 0301 	eor.w	r3, r3, #1
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	f003 0301 	and.w	r3, r3, #1
 8012c78:	b2da      	uxtb	r2, r3
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	761a      	strb	r2, [r3, #24]
 8012c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c82:	4618      	mov	r0, r3
 8012c84:	3718      	adds	r7, #24
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	08018384 	.word	0x08018384
 8012c90:	08019100 	.word	0x08019100
 8012c94:	080181c0 	.word	0x080181c0
 8012c98:	080186e0 	.word	0x080186e0
 8012c9c:	08018618 	.word	0x08018618
 8012ca0:	08018674 	.word	0x08018674
 8012ca4:	080187b4 	.word	0x080187b4
 8012ca8:	08018694 	.word	0x08018694
 8012cac:	080187dc 	.word	0x080187dc
 8012cb0:	080187e8 	.word	0x080187e8
 8012cb4:	080187f4 	.word	0x080187f4
 8012cb8:	08018824 	.word	0x08018824

08012cbc <rxSessionUpdate>:
 8012cbc:	b5b0      	push	{r4, r5, r7, lr}
 8012cbe:	b088      	sub	sp, #32
 8012cc0:	af02      	add	r7, sp, #8
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	70fb      	strb	r3, [r7, #3]
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d106      	bne.n	8012cde <rxSessionUpdate+0x22>
 8012cd0:	4b6d      	ldr	r3, [pc, #436]	; (8012e88 <rxSessionUpdate+0x1cc>)
 8012cd2:	4a6e      	ldr	r2, [pc, #440]	; (8012e8c <rxSessionUpdate+0x1d0>)
 8012cd4:	f240 3137 	movw	r1, #823	; 0x337
 8012cd8:	486d      	ldr	r0, [pc, #436]	; (8012e90 <rxSessionUpdate+0x1d4>)
 8012cda:	f000 fd73 	bl	80137c4 <__assert_func>
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d106      	bne.n	8012cf2 <rxSessionUpdate+0x36>
 8012ce4:	4b6b      	ldr	r3, [pc, #428]	; (8012e94 <rxSessionUpdate+0x1d8>)
 8012ce6:	4a69      	ldr	r2, [pc, #420]	; (8012e8c <rxSessionUpdate+0x1d0>)
 8012ce8:	f44f 714e 	mov.w	r1, #824	; 0x338
 8012cec:	4868      	ldr	r0, [pc, #416]	; (8012e90 <rxSessionUpdate+0x1d4>)
 8012cee:	f000 fd69 	bl	80137c4 <__assert_func>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d106      	bne.n	8012d06 <rxSessionUpdate+0x4a>
 8012cf8:	4b67      	ldr	r3, [pc, #412]	; (8012e98 <rxSessionUpdate+0x1dc>)
 8012cfa:	4a64      	ldr	r2, [pc, #400]	; (8012e8c <rxSessionUpdate+0x1d0>)
 8012cfc:	f240 3139 	movw	r1, #825	; 0x339
 8012d00:	4863      	ldr	r0, [pc, #396]	; (8012e90 <rxSessionUpdate+0x1d4>)
 8012d02:	f000 fd5f 	bl	80137c4 <__assert_func>
 8012d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d106      	bne.n	8012d1a <rxSessionUpdate+0x5e>
 8012d0c:	4b63      	ldr	r3, [pc, #396]	; (8012e9c <rxSessionUpdate+0x1e0>)
 8012d0e:	4a5f      	ldr	r2, [pc, #380]	; (8012e8c <rxSessionUpdate+0x1d0>)
 8012d10:	f240 313a 	movw	r1, #826	; 0x33a
 8012d14:	485e      	ldr	r0, [pc, #376]	; (8012e90 <rxSessionUpdate+0x1d4>)
 8012d16:	f000 fd55 	bl	80137c4 <__assert_func>
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	7d9b      	ldrb	r3, [r3, #22]
 8012d1e:	2b1f      	cmp	r3, #31
 8012d20:	d906      	bls.n	8012d30 <rxSessionUpdate+0x74>
 8012d22:	4b5f      	ldr	r3, [pc, #380]	; (8012ea0 <rxSessionUpdate+0x1e4>)
 8012d24:	4a59      	ldr	r2, [pc, #356]	; (8012e8c <rxSessionUpdate+0x1d0>)
 8012d26:	f240 313b 	movw	r1, #827	; 0x33b
 8012d2a:	4859      	ldr	r0, [pc, #356]	; (8012e90 <rxSessionUpdate+0x1d4>)
 8012d2c:	f000 fd4a 	bl	80137c4 <__assert_func>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	7b9b      	ldrb	r3, [r3, #14]
 8012d34:	2b1f      	cmp	r3, #31
 8012d36:	d906      	bls.n	8012d46 <rxSessionUpdate+0x8a>
 8012d38:	4b5a      	ldr	r3, [pc, #360]	; (8012ea4 <rxSessionUpdate+0x1e8>)
 8012d3a:	4a54      	ldr	r2, [pc, #336]	; (8012e8c <rxSessionUpdate+0x1d0>)
 8012d3c:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8012d40:	4853      	ldr	r0, [pc, #332]	; (8012e90 <rxSessionUpdate+0x1d4>)
 8012d42:	f000 fd3f 	bl	80137c4 <__assert_func>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d52:	4290      	cmp	r0, r2
 8012d54:	eb71 0303 	sbcs.w	r3, r1, r3
 8012d58:	d20f      	bcs.n	8012d7a <rxSessionUpdate+0xbe>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d66:	1a84      	subs	r4, r0, r2
 8012d68:	eb61 0503 	sbc.w	r5, r1, r3
 8012d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012d70:	42a2      	cmp	r2, r4
 8012d72:	41ab      	sbcs	r3, r5
 8012d74:	d201      	bcs.n	8012d7a <rxSessionUpdate+0xbe>
 8012d76:	2301      	movs	r3, #1
 8012d78:	e000      	b.n	8012d7c <rxSessionUpdate+0xc0>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	75bb      	strb	r3, [r7, #22]
 8012d7e:	7dbb      	ldrb	r3, [r7, #22]
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	75bb      	strb	r3, [r7, #22]
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	7d9a      	ldrb	r2, [r3, #22]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	7b9b      	ldrb	r3, [r3, #14]
 8012d8e:	4619      	mov	r1, r3
 8012d90:	4610      	mov	r0, r2
 8012d92:	f7ff fcf9 	bl	8012788 <rxComputeTransferIDDifference>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	bf8c      	ite	hi
 8012d9c:	2301      	movhi	r3, #1
 8012d9e:	2300      	movls	r3, #0
 8012da0:	757b      	strb	r3, [r7, #21]
 8012da2:	7dbb      	ldrb	r3, [r7, #22]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d10b      	bne.n	8012dc0 <rxSessionUpdate+0x104>
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	7ddb      	ldrb	r3, [r3, #23]
 8012dac:	78fa      	ldrb	r2, [r7, #3]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d108      	bne.n	8012dc4 <rxSessionUpdate+0x108>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	7bdb      	ldrb	r3, [r3, #15]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d004      	beq.n	8012dc4 <rxSessionUpdate+0x108>
 8012dba:	7d7b      	ldrb	r3, [r7, #21]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d001      	beq.n	8012dc4 <rxSessionUpdate+0x108>
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	e000      	b.n	8012dc6 <rxSessionUpdate+0x10a>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	753b      	strb	r3, [r7, #20]
 8012dc8:	7d3b      	ldrb	r3, [r7, #20]
 8012dca:	f003 0301 	and.w	r3, r3, #1
 8012dce:	753b      	strb	r3, [r7, #20]
 8012dd0:	7d3b      	ldrb	r3, [r7, #20]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d013      	beq.n	8012dfe <rxSessionUpdate+0x142>
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	609a      	str	r2, [r3, #8]
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	2200      	movs	r2, #0
 8012de0:	60da      	str	r2, [r3, #12]
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012de8:	829a      	strh	r2, [r3, #20]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	7b9a      	ldrb	r2, [r3, #14]
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	759a      	strb	r2, [r3, #22]
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2201      	movs	r2, #1
 8012df6:	761a      	strb	r2, [r3, #24]
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	78fa      	ldrb	r2, [r7, #3]
 8012dfc:	75da      	strb	r2, [r3, #23]
 8012dfe:	2300      	movs	r3, #0
 8012e00:	75fb      	strb	r3, [r7, #23]
 8012e02:	7d3b      	ldrb	r3, [r7, #20]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d00b      	beq.n	8012e20 <rxSessionUpdate+0x164>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	7bdb      	ldrb	r3, [r3, #15]
 8012e0c:	f083 0301 	eor.w	r3, r3, #1
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d004      	beq.n	8012e20 <rxSessionUpdate+0x164>
 8012e16:	68b9      	ldr	r1, [r7, #8]
 8012e18:	68f8      	ldr	r0, [r7, #12]
 8012e1a:	f7ff fde3 	bl	80129e4 <rxSessionRestart>
 8012e1e:	e02c      	b.n	8012e7a <rxSessionUpdate+0x1be>
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	7ddb      	ldrb	r3, [r3, #23]
 8012e24:	78fa      	ldrb	r2, [r7, #3]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	bf0c      	ite	eq
 8012e2a:	2301      	moveq	r3, #1
 8012e2c:	2300      	movne	r3, #0
 8012e2e:	74fb      	strb	r3, [r7, #19]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	7c5a      	ldrb	r2, [r3, #17]
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	7e1b      	ldrb	r3, [r3, #24]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	bf0c      	ite	eq
 8012e3c:	2301      	moveq	r3, #1
 8012e3e:	2300      	movne	r3, #0
 8012e40:	74bb      	strb	r3, [r7, #18]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	7b9a      	ldrb	r2, [r3, #14]
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	7d9b      	ldrb	r3, [r3, #22]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	bf0c      	ite	eq
 8012e4e:	2301      	moveq	r3, #1
 8012e50:	2300      	movne	r3, #0
 8012e52:	747b      	strb	r3, [r7, #17]
 8012e54:	7cfb      	ldrb	r3, [r7, #19]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00f      	beq.n	8012e7a <rxSessionUpdate+0x1be>
 8012e5a:	7cbb      	ldrb	r3, [r7, #18]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00c      	beq.n	8012e7a <rxSessionUpdate+0x1be>
 8012e60:	7c7b      	ldrb	r3, [r7, #17]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d009      	beq.n	8012e7a <rxSessionUpdate+0x1be>
 8012e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	68b9      	ldr	r1, [r7, #8]
 8012e70:	68f8      	ldr	r0, [r7, #12]
 8012e72:	f7ff fdfd 	bl	8012a70 <rxSessionAcceptFrame>
 8012e76:	4603      	mov	r3, r0
 8012e78:	75fb      	strb	r3, [r7, #23]
 8012e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3718      	adds	r7, #24
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bdb0      	pop	{r4, r5, r7, pc}
 8012e86:	bf00      	nop
 8012e88:	08018384 	.word	0x08018384
 8012e8c:	080190bc 	.word	0x080190bc
 8012e90:	080181c0 	.word	0x080181c0
 8012e94:	080186e0 	.word	0x080186e0
 8012e98:	08018618 	.word	0x08018618
 8012e9c:	08018694 	.word	0x08018694
 8012ea0:	0801885c 	.word	0x0801885c
 8012ea4:	080187b4 	.word	0x080187b4

08012ea8 <rxAcceptFrame>:
 8012ea8:	b5b0      	push	{r4, r5, r7, lr}
 8012eaa:	b08c      	sub	sp, #48	; 0x30
 8012eac:	af04      	add	r7, sp, #16
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
 8012eb4:	70fb      	strb	r3, [r7, #3]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d106      	bne.n	8012eca <rxAcceptFrame+0x22>
 8012ebc:	4b85      	ldr	r3, [pc, #532]	; (80130d4 <rxAcceptFrame+0x22c>)
 8012ebe:	4a86      	ldr	r2, [pc, #536]	; (80130d8 <rxAcceptFrame+0x230>)
 8012ec0:	f44f 715a 	mov.w	r1, #872	; 0x368
 8012ec4:	4885      	ldr	r0, [pc, #532]	; (80130dc <rxAcceptFrame+0x234>)
 8012ec6:	f000 fc7d 	bl	80137c4 <__assert_func>
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d106      	bne.n	8012ede <rxAcceptFrame+0x36>
 8012ed0:	4b83      	ldr	r3, [pc, #524]	; (80130e0 <rxAcceptFrame+0x238>)
 8012ed2:	4a81      	ldr	r2, [pc, #516]	; (80130d8 <rxAcceptFrame+0x230>)
 8012ed4:	f240 3169 	movw	r1, #873	; 0x369
 8012ed8:	4880      	ldr	r0, [pc, #512]	; (80130dc <rxAcceptFrame+0x234>)
 8012eda:	f000 fc73 	bl	80137c4 <__assert_func>
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	8b9a      	ldrh	r2, [r3, #28]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	895b      	ldrh	r3, [r3, #10]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d006      	beq.n	8012ef8 <rxAcceptFrame+0x50>
 8012eea:	4b7e      	ldr	r3, [pc, #504]	; (80130e4 <rxAcceptFrame+0x23c>)
 8012eec:	4a7a      	ldr	r2, [pc, #488]	; (80130d8 <rxAcceptFrame+0x230>)
 8012eee:	f240 316a 	movw	r1, #874	; 0x36a
 8012ef2:	487a      	ldr	r0, [pc, #488]	; (80130dc <rxAcceptFrame+0x234>)
 8012ef4:	f000 fc66 	bl	80137c4 <__assert_func>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <rxAcceptFrame+0x64>
 8012efe:	4b7a      	ldr	r3, [pc, #488]	; (80130e8 <rxAcceptFrame+0x240>)
 8012f00:	4a75      	ldr	r2, [pc, #468]	; (80130d8 <rxAcceptFrame+0x230>)
 8012f02:	f240 316b 	movw	r1, #875	; 0x36b
 8012f06:	4875      	ldr	r0, [pc, #468]	; (80130dc <rxAcceptFrame+0x234>)
 8012f08:	f000 fc5c 	bl	80137c4 <__assert_func>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	699b      	ldr	r3, [r3, #24]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d106      	bne.n	8012f22 <rxAcceptFrame+0x7a>
 8012f14:	4b75      	ldr	r3, [pc, #468]	; (80130ec <rxAcceptFrame+0x244>)
 8012f16:	4a70      	ldr	r2, [pc, #448]	; (80130d8 <rxAcceptFrame+0x230>)
 8012f18:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8012f1c:	486f      	ldr	r0, [pc, #444]	; (80130dc <rxAcceptFrame+0x234>)
 8012f1e:	f000 fc51 	bl	80137c4 <__assert_func>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	7b9b      	ldrb	r3, [r3, #14]
 8012f26:	2b1f      	cmp	r3, #31
 8012f28:	d906      	bls.n	8012f38 <rxAcceptFrame+0x90>
 8012f2a:	4b71      	ldr	r3, [pc, #452]	; (80130f0 <rxAcceptFrame+0x248>)
 8012f2c:	4a6a      	ldr	r2, [pc, #424]	; (80130d8 <rxAcceptFrame+0x230>)
 8012f2e:	f240 316d 	movw	r1, #877	; 0x36d
 8012f32:	486a      	ldr	r0, [pc, #424]	; (80130dc <rxAcceptFrame+0x234>)
 8012f34:	f000 fc46 	bl	80137c4 <__assert_func>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	7b5b      	ldrb	r3, [r3, #13]
 8012f3c:	2bff      	cmp	r3, #255	; 0xff
 8012f3e:	d00c      	beq.n	8012f5a <rxAcceptFrame+0xb2>
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	791a      	ldrb	r2, [r3, #4]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	7b5b      	ldrb	r3, [r3, #13]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d006      	beq.n	8012f5a <rxAcceptFrame+0xb2>
 8012f4c:	4b69      	ldr	r3, [pc, #420]	; (80130f4 <rxAcceptFrame+0x24c>)
 8012f4e:	4a62      	ldr	r2, [pc, #392]	; (80130d8 <rxAcceptFrame+0x230>)
 8012f50:	f240 316e 	movw	r1, #878	; 0x36e
 8012f54:	4861      	ldr	r0, [pc, #388]	; (80130dc <rxAcceptFrame+0x234>)
 8012f56:	f000 fc35 	bl	80137c4 <__assert_func>
 8012f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d106      	bne.n	8012f6e <rxAcceptFrame+0xc6>
 8012f60:	4b65      	ldr	r3, [pc, #404]	; (80130f8 <rxAcceptFrame+0x250>)
 8012f62:	4a5d      	ldr	r2, [pc, #372]	; (80130d8 <rxAcceptFrame+0x230>)
 8012f64:	f240 316f 	movw	r1, #879	; 0x36f
 8012f68:	485c      	ldr	r0, [pc, #368]	; (80130dc <rxAcceptFrame+0x234>)
 8012f6a:	f000 fc2b 	bl	80137c4 <__assert_func>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	77fb      	strb	r3, [r7, #31]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	7b1b      	ldrb	r3, [r3, #12]
 8012f76:	b25b      	sxtb	r3, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	db6c      	blt.n	8013056 <rxAcceptFrame+0x1ae>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	7b1b      	ldrb	r3, [r3, #12]
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	3308      	adds	r3, #8
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	4413      	add	r3, r2
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d134      	bne.n	8012ff8 <rxAcceptFrame+0x150>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	7bdb      	ldrb	r3, [r3, #15]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d030      	beq.n	8012ff8 <rxAcceptFrame+0x150>
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	2120      	movs	r1, #32
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	4798      	blx	r3
 8012fa0:	6138      	str	r0, [r7, #16]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	7b1b      	ldrb	r3, [r3, #12]
 8012fa6:	68ba      	ldr	r2, [r7, #8]
 8012fa8:	3308      	adds	r3, #8
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	4413      	add	r3, r2
 8012fae:	693a      	ldr	r2, [r7, #16]
 8012fb0:	605a      	str	r2, [r3, #4]
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d01d      	beq.n	8012ff4 <rxAcceptFrame+0x14c>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	6939      	ldr	r1, [r7, #16]
 8012fc0:	e9c1 2300 	strd	r2, r3, [r1]
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	609a      	str	r2, [r3, #8]
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	60da      	str	r2, [r3, #12]
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	611a      	str	r2, [r3, #16]
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fdc:	829a      	strh	r2, [r3, #20]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	7b9a      	ldrb	r2, [r3, #14]
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	759a      	strb	r2, [r3, #22]
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	78fa      	ldrb	r2, [r7, #3]
 8012fea:	75da      	strb	r2, [r3, #23]
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	761a      	strb	r2, [r3, #24]
 8012ff2:	e001      	b.n	8012ff8 <rxAcceptFrame+0x150>
 8012ff4:	23fd      	movs	r3, #253	; 0xfd
 8012ff6:	77fb      	strb	r3, [r7, #31]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	7b1b      	ldrb	r3, [r3, #12]
 8012ffc:	68ba      	ldr	r2, [r7, #8]
 8012ffe:	3308      	adds	r3, #8
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d05e      	beq.n	80130c8 <rxAcceptFrame+0x220>
 801300a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d006      	beq.n	8013020 <rxAcceptFrame+0x178>
 8013012:	4b3a      	ldr	r3, [pc, #232]	; (80130fc <rxAcceptFrame+0x254>)
 8013014:	4a30      	ldr	r2, [pc, #192]	; (80130d8 <rxAcceptFrame+0x230>)
 8013016:	f240 318e 	movw	r1, #910	; 0x38e
 801301a:	4830      	ldr	r0, [pc, #192]	; (80130dc <rxAcceptFrame+0x234>)
 801301c:	f000 fbd2 	bl	80137c4 <__assert_func>
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	7b1b      	ldrb	r3, [r3, #12]
 8013024:	68ba      	ldr	r2, [r7, #8]
 8013026:	3308      	adds	r3, #8
 8013028:	009b      	lsls	r3, r3, #2
 801302a:	4413      	add	r3, r2
 801302c:	685c      	ldr	r4, [r3, #4]
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013034:	68b9      	ldr	r1, [r7, #8]
 8013036:	6989      	ldr	r1, [r1, #24]
 8013038:	78fd      	ldrb	r5, [r7, #3]
 801303a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801303c:	9003      	str	r0, [sp, #12]
 801303e:	9102      	str	r1, [sp, #8]
 8013040:	e9cd 2300 	strd	r2, r3, [sp]
 8013044:	462b      	mov	r3, r5
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	4621      	mov	r1, r4
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f7ff fe36 	bl	8012cbc <rxSessionUpdate>
 8013050:	4603      	mov	r3, r0
 8013052:	77fb      	strb	r3, [r7, #31]
 8013054:	e038      	b.n	80130c8 <rxAcceptFrame+0x220>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	7b1b      	ldrb	r3, [r3, #12]
 801305a:	2bff      	cmp	r3, #255	; 0xff
 801305c:	d006      	beq.n	801306c <rxAcceptFrame+0x1c4>
 801305e:	4b28      	ldr	r3, [pc, #160]	; (8013100 <rxAcceptFrame+0x258>)
 8013060:	4a1d      	ldr	r2, [pc, #116]	; (80130d8 <rxAcceptFrame+0x230>)
 8013062:	f240 319a 	movw	r1, #922	; 0x39a
 8013066:	481d      	ldr	r0, [pc, #116]	; (80130dc <rxAcceptFrame+0x234>)
 8013068:	f000 fbac 	bl	80137c4 <__assert_func>
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	695a      	ldr	r2, [r3, #20]
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	699b      	ldr	r3, [r3, #24]
 8013074:	4293      	cmp	r3, r2
 8013076:	bf28      	it	cs
 8013078:	4613      	movcs	r3, r2
 801307a:	61bb      	str	r3, [r7, #24]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	689b      	ldr	r3, [r3, #8]
 8013080:	69b9      	ldr	r1, [r7, #24]
 8013082:	68f8      	ldr	r0, [r7, #12]
 8013084:	4798      	blx	r3
 8013086:	6178      	str	r0, [r7, #20]
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d01a      	beq.n	80130c4 <rxAcceptFrame+0x21c>
 801308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013090:	4619      	mov	r1, r3
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7ff fb32 	bl	80126fc <rxInitTransferMetadataFromFrame>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80130a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80130a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a6:	69ba      	ldr	r2, [r7, #24]
 80130a8:	611a      	str	r2, [r3, #16]
 80130aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	615a      	str	r2, [r3, #20]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	699b      	ldr	r3, [r3, #24]
 80130b4:	69ba      	ldr	r2, [r7, #24]
 80130b6:	4619      	mov	r1, r3
 80130b8:	6978      	ldr	r0, [r7, #20]
 80130ba:	f001 fd2c 	bl	8014b16 <memcpy>
 80130be:	2301      	movs	r3, #1
 80130c0:	77fb      	strb	r3, [r7, #31]
 80130c2:	e001      	b.n	80130c8 <rxAcceptFrame+0x220>
 80130c4:	23fd      	movs	r3, #253	; 0xfd
 80130c6:	77fb      	strb	r3, [r7, #31]
 80130c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130cc:	4618      	mov	r0, r3
 80130ce:	3720      	adds	r7, #32
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bdb0      	pop	{r4, r5, r7, pc}
 80130d4:	08018384 	.word	0x08018384
 80130d8:	080190ac 	.word	0x080190ac
 80130dc:	080181c0 	.word	0x080181c0
 80130e0:	08018884 	.word	0x08018884
 80130e4:	080188a0 	.word	0x080188a0
 80130e8:	08018618 	.word	0x08018618
 80130ec:	08018674 	.word	0x08018674
 80130f0:	080187b4 	.word	0x080187b4
 80130f4:	080188c8 	.word	0x080188c8
 80130f8:	08018694 	.word	0x08018694
 80130fc:	08018920 	.word	0x08018920
 8013100:	0801892c 	.word	0x0801892c

08013104 <rxSubscriptionPredicateOnPortID>:
 8013104:	b480      	push	{r7}
 8013106:	b085      	sub	sp, #20
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	881b      	ldrh	r3, [r3, #0]
 8013112:	81fb      	strh	r3, [r7, #14]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	8b9b      	ldrh	r3, [r3, #28]
 8013118:	81bb      	strh	r3, [r7, #12]
 801311a:	89fa      	ldrh	r2, [r7, #14]
 801311c:	89bb      	ldrh	r3, [r7, #12]
 801311e:	429a      	cmp	r2, r3
 8013120:	d00a      	beq.n	8013138 <rxSubscriptionPredicateOnPortID+0x34>
 8013122:	89fa      	ldrh	r2, [r7, #14]
 8013124:	89bb      	ldrh	r3, [r7, #12]
 8013126:	429a      	cmp	r2, r3
 8013128:	bf8c      	ite	hi
 801312a:	2301      	movhi	r3, #1
 801312c:	2300      	movls	r3, #0
 801312e:	b2db      	uxtb	r3, r3
 8013130:	461a      	mov	r2, r3
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <rxSubscriptionPredicateOnPortID+0x44>)
 8013134:	569b      	ldrsb	r3, [r3, r2]
 8013136:	e000      	b.n	801313a <rxSubscriptionPredicateOnPortID+0x36>
 8013138:	2300      	movs	r3, #0
 801313a:	4618      	mov	r0, r3
 801313c:	3714      	adds	r7, #20
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop
 8013148:	08019098 	.word	0x08019098

0801314c <rxSubscriptionPredicateOnStruct>:
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	331c      	adds	r3, #28
 801315a:	6839      	ldr	r1, [r7, #0]
 801315c:	4618      	mov	r0, r3
 801315e:	f7ff ffd1 	bl	8013104 <rxSubscriptionPredicateOnPortID>
 8013162:	4603      	mov	r3, r0
 8013164:	4618      	mov	r0, r3
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <canardInit>:
 801316c:	b5b0      	push	{r4, r5, r7, lr}
 801316e:	b08c      	sub	sp, #48	; 0x30
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d106      	bne.n	801318c <canardInit+0x20>
 801317e:	4b16      	ldr	r3, [pc, #88]	; (80131d8 <canardInit+0x6c>)
 8013180:	4a16      	ldr	r2, [pc, #88]	; (80131dc <canardInit+0x70>)
 8013182:	f240 31d6 	movw	r1, #982	; 0x3d6
 8013186:	4816      	ldr	r0, [pc, #88]	; (80131e0 <canardInit+0x74>)
 8013188:	f000 fb1c 	bl	80137c4 <__assert_func>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d106      	bne.n	80131a0 <canardInit+0x34>
 8013192:	4b14      	ldr	r3, [pc, #80]	; (80131e4 <canardInit+0x78>)
 8013194:	4a11      	ldr	r2, [pc, #68]	; (80131dc <canardInit+0x70>)
 8013196:	f240 31d7 	movw	r1, #983	; 0x3d7
 801319a:	4811      	ldr	r0, [pc, #68]	; (80131e0 <canardInit+0x74>)
 801319c:	f000 fb12 	bl	80137c4 <__assert_func>
 80131a0:	2300      	movs	r3, #0
 80131a2:	617b      	str	r3, [r7, #20]
 80131a4:	23ff      	movs	r3, #255	; 0xff
 80131a6:	763b      	strb	r3, [r7, #24]
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	61fb      	str	r3, [r7, #28]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	623b      	str	r3, [r7, #32]
 80131b0:	2300      	movs	r3, #0
 80131b2:	627b      	str	r3, [r7, #36]	; 0x24
 80131b4:	2300      	movs	r3, #0
 80131b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80131b8:	2300      	movs	r3, #0
 80131ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	461d      	mov	r5, r3
 80131c0:	f107 0414 	add.w	r4, r7, #20
 80131c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80131c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80131cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	3730      	adds	r7, #48	; 0x30
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bdb0      	pop	{r4, r5, r7, pc}
 80131d8:	0801894c 	.word	0x0801894c
 80131dc:	08018f20 	.word	0x08018f20
 80131e0:	080181c0 	.word	0x080181c0
 80131e4:	0801896c 	.word	0x0801896c

080131e8 <canardTxInit>:
 80131e8:	b4b0      	push	{r4, r5, r7}
 80131ea:	b08b      	sub	sp, #44	; 0x2c
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	617b      	str	r3, [r7, #20]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	61bb      	str	r3, [r7, #24]
 80131fc:	2300      	movs	r3, #0
 80131fe:	61fb      	str	r3, [r7, #28]
 8013200:	2300      	movs	r3, #0
 8013202:	623b      	str	r3, [r7, #32]
 8013204:	2300      	movs	r3, #0
 8013206:	627b      	str	r3, [r7, #36]	; 0x24
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	461d      	mov	r5, r3
 801320c:	f107 0414 	add.w	r4, r7, #20
 8013210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013214:	6823      	ldr	r3, [r4, #0]
 8013216:	602b      	str	r3, [r5, #0]
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	372c      	adds	r7, #44	; 0x2c
 801321c:	46bd      	mov	sp, r7
 801321e:	bcb0      	pop	{r4, r5, r7}
 8013220:	4770      	bx	lr
	...

08013224 <canardTxPush>:
 8013224:	b580      	push	{r7, lr}
 8013226:	b08e      	sub	sp, #56	; 0x38
 8013228:	af06      	add	r7, sp, #24
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	e9c7 2300 	strd	r2, r3, [r7]
 8013232:	f06f 0301 	mvn.w	r3, #1
 8013236:	61fb      	str	r3, [r7, #28]
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d062      	beq.n	8013304 <canardTxPush+0xe0>
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d05f      	beq.n	8013304 <canardTxPush+0xe0>
 8013244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013246:	2b00      	cmp	r3, #0
 8013248:	d05c      	beq.n	8013304 <canardTxPush+0xe0>
 801324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324c:	2b00      	cmp	r3, #0
 801324e:	d102      	bne.n	8013256 <canardTxPush+0x32>
 8013250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013252:	2b00      	cmp	r3, #0
 8013254:	d156      	bne.n	8013304 <canardTxPush+0xe0>
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	4618      	mov	r0, r3
 801325c:	f7fe fc02 	bl	8011a64 <adjustPresentationLayerMTU>
 8013260:	61b8      	str	r0, [r7, #24]
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	791a      	ldrb	r2, [r3, #4]
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	4613      	mov	r3, r2
 801326c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801326e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013272:	f7fe fc27 	bl	8011ac4 <txMakeCANID>
 8013276:	6178      	str	r0, [r7, #20]
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	2b00      	cmp	r3, #0
 801327c:	db40      	blt.n	8013300 <canardTxPush+0xdc>
 801327e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	429a      	cmp	r2, r3
 8013284:	d81c      	bhi.n	80132c0 <canardTxPush+0x9c>
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801328a:	7952      	ldrb	r2, [r2, #5]
 801328c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801328e:	9103      	str	r1, [sp, #12]
 8013290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013292:	9102      	str	r1, [sp, #8]
 8013294:	9201      	str	r2, [sp, #4]
 8013296:	9300      	str	r3, [sp, #0]
 8013298:	e9d7 2300 	ldrd	r2, r3, [r7]
 801329c:	68b9      	ldr	r1, [r7, #8]
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f7fe fdda 	bl	8011e58 <txPushSingleFrame>
 80132a4:	61f8      	str	r0, [r7, #28]
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	db2b      	blt.n	8013304 <canardTxPush+0xe0>
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d028      	beq.n	8013304 <canardTxPush+0xe0>
 80132b2:	4b1c      	ldr	r3, [pc, #112]	; (8013324 <canardTxPush+0x100>)
 80132b4:	4a1c      	ldr	r2, [pc, #112]	; (8013328 <canardTxPush+0x104>)
 80132b6:	f240 4105 	movw	r1, #1029	; 0x405
 80132ba:	481c      	ldr	r0, [pc, #112]	; (801332c <canardTxPush+0x108>)
 80132bc:	f000 fa82 	bl	80137c4 <__assert_func>
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132c4:	7952      	ldrb	r2, [r2, #5]
 80132c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80132c8:	9105      	str	r1, [sp, #20]
 80132ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132cc:	9104      	str	r1, [sp, #16]
 80132ce:	9203      	str	r2, [sp, #12]
 80132d0:	9302      	str	r3, [sp, #8]
 80132d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132d6:	e9cd 2300 	strd	r2, r3, [sp]
 80132da:	69ba      	ldr	r2, [r7, #24]
 80132dc:	68b9      	ldr	r1, [r7, #8]
 80132de:	68f8      	ldr	r0, [r7, #12]
 80132e0:	f7fe ffd4 	bl	801228c <txPushMultiFrame>
 80132e4:	61f8      	str	r0, [r7, #28]
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	db0b      	blt.n	8013304 <canardTxPush+0xe0>
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	dc08      	bgt.n	8013304 <canardTxPush+0xe0>
 80132f2:	4b0f      	ldr	r3, [pc, #60]	; (8013330 <canardTxPush+0x10c>)
 80132f4:	4a0c      	ldr	r2, [pc, #48]	; (8013328 <canardTxPush+0x104>)
 80132f6:	f240 4111 	movw	r1, #1041	; 0x411
 80132fa:	480c      	ldr	r0, [pc, #48]	; (801332c <canardTxPush+0x108>)
 80132fc:	f000 fa62 	bl	80137c4 <__assert_func>
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	61fb      	str	r3, [r7, #28]
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d106      	bne.n	8013318 <canardTxPush+0xf4>
 801330a:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <canardTxPush+0x110>)
 801330c:	4a06      	ldr	r2, [pc, #24]	; (8013328 <canardTxPush+0x104>)
 801330e:	f240 4119 	movw	r1, #1049	; 0x419
 8013312:	4806      	ldr	r0, [pc, #24]	; (801332c <canardTxPush+0x108>)
 8013314:	f000 fa56 	bl	80137c4 <__assert_func>
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	4618      	mov	r0, r3
 801331c:	3720      	adds	r7, #32
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	080184bc 	.word	0x080184bc
 8013328:	08018f2c 	.word	0x08018f2c
 801332c:	080181c0 	.word	0x080181c0
 8013330:	08018600 	.word	0x08018600
 8013334:	08018988 	.word	0x08018988

08013338 <canardTxPeek>:
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	2300      	movs	r3, #0
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d006      	beq.n	8013358 <canardTxPeek+0x20>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	2100      	movs	r1, #0
 8013350:	4618      	mov	r0, r3
 8013352:	f7fd ff1d 	bl	8011190 <cavlFindExtremum>
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <canardTxPop>:
 8013362:	b580      	push	{r7, lr}
 8013364:	b084      	sub	sp, #16
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	6039      	str	r1, [r7, #0]
 801336c:	2300      	movs	r3, #0
 801336e:	60fb      	str	r3, [r7, #12]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d010      	beq.n	8013398 <canardTxPop+0x36>
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d00d      	beq.n	8013398 <canardTxPop+0x36>
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	60fb      	str	r3, [r7, #12]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	330c      	adds	r3, #12
 8013384:	683a      	ldr	r2, [r7, #0]
 8013386:	4611      	mov	r1, r2
 8013388:	4618      	mov	r0, r3
 801338a:	f7fe f957 	bl	801163c <cavlRemove>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	1e5a      	subs	r2, r3, #1
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	609a      	str	r2, [r3, #8]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	4618      	mov	r0, r3
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
	...

080133a4 <canardRxAccept>:
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b090      	sub	sp, #64	; 0x40
 80133a8:	af02      	add	r7, sp, #8
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	e9c7 2300 	strd	r2, r3, [r7]
 80133b0:	23fe      	movs	r3, #254	; 0xfe
 80133b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d068      	beq.n	801348e <canardRxAccept+0xea>
 80133bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d065      	beq.n	801348e <canardRxAccept+0xea>
 80133c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d062      	beq.n	801348e <canardRxAccept+0xea>
 80133c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80133d0:	d25d      	bcs.n	801348e <canardRxAccept+0xea>
 80133d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133d4:	689b      	ldr	r3, [r3, #8]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d103      	bne.n	80133e2 <canardRxAccept+0x3e>
 80133da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d155      	bne.n	801348e <canardRxAccept+0xea>
 80133e2:	f107 0310 	add.w	r3, r7, #16
 80133e6:	2220      	movs	r2, #32
 80133e8:	2100      	movs	r1, #0
 80133ea:	4618      	mov	r0, r3
 80133ec:	f001 faad 	bl	801494a <memset>
 80133f0:	f107 0310 	add.w	r3, r7, #16
 80133f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80133fa:	f7ff f83b 	bl	8012474 <rxTryParseFrame>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d041      	beq.n	8013488 <canardRxAccept+0xe4>
 8013404:	7f7b      	ldrb	r3, [r7, #29]
 8013406:	2bff      	cmp	r3, #255	; 0xff
 8013408:	d004      	beq.n	8013414 <canardRxAccept+0x70>
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	791a      	ldrb	r2, [r3, #4]
 801340e:	7f7b      	ldrb	r3, [r7, #29]
 8013410:	429a      	cmp	r2, r3
 8013412:	d135      	bne.n	8013480 <canardRxAccept+0xdc>
 8013414:	7e7b      	ldrb	r3, [r7, #25]
 8013416:	3304      	adds	r3, #4
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	68fa      	ldr	r2, [r7, #12]
 801341c:	18d0      	adds	r0, r2, r3
 801341e:	f107 0310 	add.w	r3, r7, #16
 8013422:	f103 010a 	add.w	r1, r3, #10
 8013426:	2300      	movs	r3, #0
 8013428:	4a21      	ldr	r2, [pc, #132]	; (80134b0 <canardRxAccept+0x10c>)
 801342a:	f7fe f889 	bl	8011540 <cavlSearch>
 801342e:	6338      	str	r0, [r7, #48]	; 0x30
 8013430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013432:	2b00      	cmp	r3, #0
 8013434:	d002      	beq.n	801343c <canardRxAccept+0x98>
 8013436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801343a:	601a      	str	r2, [r3, #0]
 801343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801343e:	2b00      	cmp	r3, #0
 8013440:	d01a      	beq.n	8013478 <canardRxAccept+0xd4>
 8013442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013444:	8b9a      	ldrh	r2, [r3, #28]
 8013446:	8b7b      	ldrh	r3, [r7, #26]
 8013448:	429a      	cmp	r2, r3
 801344a:	d006      	beq.n	801345a <canardRxAccept+0xb6>
 801344c:	4b19      	ldr	r3, [pc, #100]	; (80134b4 <canardRxAccept+0x110>)
 801344e:	4a1a      	ldr	r2, [pc, #104]	; (80134b8 <canardRxAccept+0x114>)
 8013450:	f240 415a 	movw	r1, #1114	; 0x45a
 8013454:	4819      	ldr	r0, [pc, #100]	; (80134bc <canardRxAccept+0x118>)
 8013456:	f000 f9b5 	bl	80137c4 <__assert_func>
 801345a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 801345e:	f107 0210 	add.w	r2, r7, #16
 8013462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013464:	9300      	str	r3, [sp, #0]
 8013466:	460b      	mov	r3, r1
 8013468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f7ff fd1c 	bl	8012ea8 <rxAcceptFrame>
 8013470:	4603      	mov	r3, r0
 8013472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013476:	e00a      	b.n	801348e <canardRxAccept+0xea>
 8013478:	2300      	movs	r3, #0
 801347a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801347e:	e006      	b.n	801348e <canardRxAccept+0xea>
 8013480:	2300      	movs	r3, #0
 8013482:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013486:	e002      	b.n	801348e <canardRxAccept+0xea>
 8013488:	2300      	movs	r3, #0
 801348a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801348e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8013492:	2b01      	cmp	r3, #1
 8013494:	dd06      	ble.n	80134a4 <canardRxAccept+0x100>
 8013496:	4b0a      	ldr	r3, [pc, #40]	; (80134c0 <canardRxAccept+0x11c>)
 8013498:	4a07      	ldr	r2, [pc, #28]	; (80134b8 <canardRxAccept+0x114>)
 801349a:	f240 416c 	movw	r1, #1132	; 0x46c
 801349e:	4807      	ldr	r0, [pc, #28]	; (80134bc <canardRxAccept+0x118>)
 80134a0:	f000 f990 	bl	80137c4 <__assert_func>
 80134a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80134a8:	4618      	mov	r0, r3
 80134aa:	3738      	adds	r7, #56	; 0x38
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	08013105 	.word	0x08013105
 80134b4:	08018994 	.word	0x08018994
 80134b8:	08019088 	.word	0x08019088
 80134bc:	080181c0 	.word	0x080181c0
 80134c0:	080189b4 	.word	0x080189b4

080134c4 <canardRxSubscribe>:
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b088      	sub	sp, #32
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	607b      	str	r3, [r7, #4]
 80134ce:	460b      	mov	r3, r1
 80134d0:	72fb      	strb	r3, [r7, #11]
 80134d2:	4613      	mov	r3, r2
 80134d4:	813b      	strh	r3, [r7, #8]
 80134d6:	23fe      	movs	r3, #254	; 0xfe
 80134d8:	77fb      	strb	r3, [r7, #31]
 80134da:	7afb      	ldrb	r3, [r7, #11]
 80134dc:	617b      	str	r3, [r7, #20]
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d04a      	beq.n	801357a <canardRxSubscribe+0xb6>
 80134e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d047      	beq.n	801357a <canardRxSubscribe+0xb6>
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	2b02      	cmp	r3, #2
 80134ee:	d844      	bhi.n	801357a <canardRxSubscribe+0xb6>
 80134f0:	893a      	ldrh	r2, [r7, #8]
 80134f2:	7afb      	ldrb	r3, [r7, #11]
 80134f4:	4619      	mov	r1, r3
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f000 f850 	bl	801359c <canardRxUnsubscribe>
 80134fc:	4603      	mov	r3, r0
 80134fe:	77fb      	strb	r3, [r7, #31]
 8013500:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013504:	2b00      	cmp	r3, #0
 8013506:	db38      	blt.n	801357a <canardRxSubscribe+0xb6>
 8013508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801350a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801350e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	619a      	str	r2, [r3, #24]
 8013518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351a:	893a      	ldrh	r2, [r7, #8]
 801351c:	839a      	strh	r2, [r3, #28]
 801351e:	2300      	movs	r3, #0
 8013520:	61bb      	str	r3, [r7, #24]
 8013522:	e009      	b.n	8013538 <canardRxSubscribe+0x74>
 8013524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	3308      	adds	r3, #8
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	4413      	add	r3, r2
 801352e:	2200      	movs	r2, #0
 8013530:	605a      	str	r2, [r3, #4]
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	3301      	adds	r3, #1
 8013536:	61bb      	str	r3, [r7, #24]
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	2b7f      	cmp	r3, #127	; 0x7f
 801353c:	d9f2      	bls.n	8013524 <canardRxSubscribe+0x60>
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	3304      	adds	r3, #4
 8013542:	009b      	lsls	r3, r3, #2
 8013544:	68fa      	ldr	r2, [r7, #12]
 8013546:	18d0      	adds	r0, r2, r3
 8013548:	4b0f      	ldr	r3, [pc, #60]	; (8013588 <canardRxSubscribe+0xc4>)
 801354a:	4a10      	ldr	r2, [pc, #64]	; (801358c <canardRxSubscribe+0xc8>)
 801354c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801354e:	f7fd fff7 	bl	8011540 <cavlSearch>
 8013552:	6138      	str	r0, [r7, #16]
 8013554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013556:	693a      	ldr	r2, [r7, #16]
 8013558:	429a      	cmp	r2, r3
 801355a:	d006      	beq.n	801356a <canardRxSubscribe+0xa6>
 801355c:	4b0c      	ldr	r3, [pc, #48]	; (8013590 <canardRxSubscribe+0xcc>)
 801355e:	4a0d      	ldr	r2, [pc, #52]	; (8013594 <canardRxSubscribe+0xd0>)
 8013560:	f44f 6192 	mov.w	r1, #1168	; 0x490
 8013564:	480c      	ldr	r0, [pc, #48]	; (8013598 <canardRxSubscribe+0xd4>)
 8013566:	f000 f92d 	bl	80137c4 <__assert_func>
 801356a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801356e:	2b00      	cmp	r3, #0
 8013570:	bfd4      	ite	le
 8013572:	2301      	movle	r3, #1
 8013574:	2300      	movgt	r3, #0
 8013576:	b2db      	uxtb	r3, r3
 8013578:	77fb      	strb	r3, [r7, #31]
 801357a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801357e:	4618      	mov	r0, r3
 8013580:	3720      	adds	r7, #32
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	080118a1 	.word	0x080118a1
 801358c:	0801314d 	.word	0x0801314d
 8013590:	080189c0 	.word	0x080189c0
 8013594:	08019150 	.word	0x08019150
 8013598:	080181c0 	.word	0x080181c0

0801359c <canardRxUnsubscribe>:
 801359c:	b580      	push	{r7, lr}
 801359e:	b088      	sub	sp, #32
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	460b      	mov	r3, r1
 80135a6:	70fb      	strb	r3, [r7, #3]
 80135a8:	4613      	mov	r3, r2
 80135aa:	803b      	strh	r3, [r7, #0]
 80135ac:	23fe      	movs	r3, #254	; 0xfe
 80135ae:	77fb      	strb	r3, [r7, #31]
 80135b0:	78fb      	ldrb	r3, [r7, #3]
 80135b2:	617b      	str	r3, [r7, #20]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d05f      	beq.n	801367a <canardRxUnsubscribe+0xde>
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	2b02      	cmp	r3, #2
 80135be:	d85c      	bhi.n	801367a <canardRxUnsubscribe+0xde>
 80135c0:	883b      	ldrh	r3, [r7, #0]
 80135c2:	81fb      	strh	r3, [r7, #14]
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	3304      	adds	r3, #4
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	18d0      	adds	r0, r2, r3
 80135ce:	f107 010e 	add.w	r1, r7, #14
 80135d2:	2300      	movs	r3, #0
 80135d4:	4a2c      	ldr	r2, [pc, #176]	; (8013688 <canardRxUnsubscribe+0xec>)
 80135d6:	f7fd ffb3 	bl	8011540 <cavlSearch>
 80135da:	6138      	str	r0, [r7, #16]
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d049      	beq.n	8013676 <canardRxUnsubscribe+0xda>
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	3304      	adds	r3, #4
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	4413      	add	r3, r2
 80135ec:	693a      	ldr	r2, [r7, #16]
 80135ee:	4611      	mov	r1, r2
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7fe f823 	bl	801163c <cavlRemove>
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	8b9b      	ldrh	r3, [r3, #28]
 80135fa:	883a      	ldrh	r2, [r7, #0]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d006      	beq.n	801360e <canardRxUnsubscribe+0x72>
 8013600:	4b22      	ldr	r3, [pc, #136]	; (801368c <canardRxUnsubscribe+0xf0>)
 8013602:	4a23      	ldr	r2, [pc, #140]	; (8013690 <canardRxUnsubscribe+0xf4>)
 8013604:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8013608:	4822      	ldr	r0, [pc, #136]	; (8013694 <canardRxUnsubscribe+0xf8>)
 801360a:	f000 f8db 	bl	80137c4 <__assert_func>
 801360e:	2301      	movs	r3, #1
 8013610:	77fb      	strb	r3, [r7, #31]
 8013612:	2300      	movs	r3, #0
 8013614:	61bb      	str	r3, [r7, #24]
 8013616:	e02a      	b.n	801366e <canardRxUnsubscribe+0xd2>
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	68da      	ldr	r2, [r3, #12]
 801361c:	6939      	ldr	r1, [r7, #16]
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	3308      	adds	r3, #8
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	440b      	add	r3, r1
 8013626:	685b      	ldr	r3, [r3, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d007      	beq.n	801363c <canardRxUnsubscribe+0xa0>
 801362c:	6939      	ldr	r1, [r7, #16]
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	3308      	adds	r3, #8
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	440b      	add	r3, r1
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	e000      	b.n	801363e <canardRxUnsubscribe+0xa2>
 801363c:	2300      	movs	r3, #0
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	4790      	blx	r2
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	68da      	ldr	r2, [r3, #12]
 8013648:	6939      	ldr	r1, [r7, #16]
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	3308      	adds	r3, #8
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	440b      	add	r3, r1
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	4619      	mov	r1, r3
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	4790      	blx	r2
 801365a:	693a      	ldr	r2, [r7, #16]
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	3308      	adds	r3, #8
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	4413      	add	r3, r2
 8013664:	2200      	movs	r2, #0
 8013666:	605a      	str	r2, [r3, #4]
 8013668:	69bb      	ldr	r3, [r7, #24]
 801366a:	3301      	adds	r3, #1
 801366c:	61bb      	str	r3, [r7, #24]
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	2b7f      	cmp	r3, #127	; 0x7f
 8013672:	d9d1      	bls.n	8013618 <canardRxUnsubscribe+0x7c>
 8013674:	e001      	b.n	801367a <canardRxUnsubscribe+0xde>
 8013676:	2300      	movs	r3, #0
 8013678:	77fb      	strb	r3, [r7, #31]
 801367a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801367e:	4618      	mov	r0, r3
 8013680:	3720      	adds	r7, #32
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	08013105 	.word	0x08013105
 801368c:	080189e0 	.word	0x080189e0
 8013690:	08019164 	.word	0x08019164
 8013694:	080181c0 	.word	0x080181c0

08013698 <canardMakeFilterForSubject>:
 8013698:	b480      	push	{r7}
 801369a:	b085      	sub	sp, #20
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	807b      	strh	r3, [r7, #2]
 80136a4:	f107 0308 	add.w	r3, r7, #8
 80136a8:	2200      	movs	r2, #0
 80136aa:	601a      	str	r2, [r3, #0]
 80136ac:	605a      	str	r2, [r3, #4]
 80136ae:	887b      	ldrh	r3, [r7, #2]
 80136b0:	021b      	lsls	r3, r3, #8
 80136b2:	60bb      	str	r3, [r7, #8]
 80136b4:	4b07      	ldr	r3, [pc, #28]	; (80136d4 <canardMakeFilterForSubject+0x3c>)
 80136b6:	60fb      	str	r3, [r7, #12]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	461a      	mov	r2, r3
 80136bc:	f107 0308 	add.w	r3, r7, #8
 80136c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80136c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	3714      	adds	r7, #20
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr
 80136d4:	021fff80 	.word	0x021fff80

080136d8 <canardMakeFilterForServices>:
 80136d8:	b480      	push	{r7}
 80136da:	b085      	sub	sp, #20
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	460b      	mov	r3, r1
 80136e2:	70fb      	strb	r3, [r7, #3]
 80136e4:	f107 0308 	add.w	r3, r7, #8
 80136e8:	2200      	movs	r2, #0
 80136ea:	601a      	str	r2, [r3, #0]
 80136ec:	605a      	str	r2, [r3, #4]
 80136ee:	78fb      	ldrb	r3, [r7, #3]
 80136f0:	01db      	lsls	r3, r3, #7
 80136f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80136f6:	60bb      	str	r3, [r7, #8]
 80136f8:	4b07      	ldr	r3, [pc, #28]	; (8013718 <canardMakeFilterForServices+0x40>)
 80136fa:	60fb      	str	r3, [r7, #12]
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	461a      	mov	r2, r3
 8013700:	f107 0308 	add.w	r3, r7, #8
 8013704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013708:	e882 0003 	stmia.w	r2, {r0, r1}
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	3714      	adds	r7, #20
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr
 8013718:	02803f80 	.word	0x02803f80

0801371c <canardConsolidateFilters>:
 801371c:	b480      	push	{r7}
 801371e:	b087      	sub	sp, #28
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	f107 0310 	add.w	r3, r7, #16
 801372c:	2200      	movs	r2, #0
 801372e:	601a      	str	r2, [r3, #0]
 8013730:	605a      	str	r2, [r3, #4]
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	685a      	ldr	r2, [r3, #4]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	401a      	ands	r2, r3
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	6819      	ldr	r1, [r3, #0]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	404b      	eors	r3, r1
 8013746:	43db      	mvns	r3, r3
 8013748:	4013      	ands	r3, r2
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	4013      	ands	r3, r2
 8013754:	613b      	str	r3, [r7, #16]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	461a      	mov	r2, r3
 801375a:	f107 0310 	add.w	r3, r7, #16
 801375e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013762:	e882 0003 	stmia.w	r2, {r0, r1}
 8013766:	68f8      	ldr	r0, [r7, #12]
 8013768:	371c      	adds	r7, #28
 801376a:	46bd      	mov	sp, r7
 801376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013770:	4770      	bx	lr

08013772 <_ZdlPvj>:
 8013772:	f000 b814 	b.w	801379e <_ZdlPv>

08013776 <_Znwj>:
 8013776:	2801      	cmp	r0, #1
 8013778:	bf38      	it	cc
 801377a:	2001      	movcc	r0, #1
 801377c:	b510      	push	{r4, lr}
 801377e:	4604      	mov	r4, r0
 8013780:	4620      	mov	r0, r4
 8013782:	f000 f84f 	bl	8013824 <malloc>
 8013786:	b100      	cbz	r0, 801378a <_Znwj+0x14>
 8013788:	bd10      	pop	{r4, pc}
 801378a:	f000 f80b 	bl	80137a4 <_ZSt15get_new_handlerv>
 801378e:	b908      	cbnz	r0, 8013794 <_Znwj+0x1e>
 8013790:	f000 f810 	bl	80137b4 <abort>
 8013794:	4780      	blx	r0
 8013796:	e7f3      	b.n	8013780 <_Znwj+0xa>

08013798 <_ZSt25__throw_bad_function_callv>:
 8013798:	b508      	push	{r3, lr}
 801379a:	f000 f80b 	bl	80137b4 <abort>

0801379e <_ZdlPv>:
 801379e:	f000 b849 	b.w	8013834 <free>
	...

080137a4 <_ZSt15get_new_handlerv>:
 80137a4:	4b02      	ldr	r3, [pc, #8]	; (80137b0 <_ZSt15get_new_handlerv+0xc>)
 80137a6:	6818      	ldr	r0, [r3, #0]
 80137a8:	f3bf 8f5b 	dmb	ish
 80137ac:	4770      	bx	lr
 80137ae:	bf00      	nop
 80137b0:	200009a0 	.word	0x200009a0

080137b4 <abort>:
 80137b4:	b508      	push	{r3, lr}
 80137b6:	2006      	movs	r0, #6
 80137b8:	f001 f90a 	bl	80149d0 <raise>
 80137bc:	2001      	movs	r0, #1
 80137be:	f7f6 f81f 	bl	8009800 <_exit>
	...

080137c4 <__assert_func>:
 80137c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137c6:	4614      	mov	r4, r2
 80137c8:	461a      	mov	r2, r3
 80137ca:	4b09      	ldr	r3, [pc, #36]	; (80137f0 <__assert_func+0x2c>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	4605      	mov	r5, r0
 80137d0:	68d8      	ldr	r0, [r3, #12]
 80137d2:	b14c      	cbz	r4, 80137e8 <__assert_func+0x24>
 80137d4:	4b07      	ldr	r3, [pc, #28]	; (80137f4 <__assert_func+0x30>)
 80137d6:	9100      	str	r1, [sp, #0]
 80137d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137dc:	4906      	ldr	r1, [pc, #24]	; (80137f8 <__assert_func+0x34>)
 80137de:	462b      	mov	r3, r5
 80137e0:	f000 fff6 	bl	80147d0 <fiprintf>
 80137e4:	f7ff ffe6 	bl	80137b4 <abort>
 80137e8:	4b04      	ldr	r3, [pc, #16]	; (80137fc <__assert_func+0x38>)
 80137ea:	461c      	mov	r4, r3
 80137ec:	e7f3      	b.n	80137d6 <__assert_func+0x12>
 80137ee:	bf00      	nop
 80137f0:	200000dc 	.word	0x200000dc
 80137f4:	08019178 	.word	0x08019178
 80137f8:	08019185 	.word	0x08019185
 80137fc:	080191b3 	.word	0x080191b3

08013800 <exit>:
 8013800:	b508      	push	{r3, lr}
 8013802:	4b06      	ldr	r3, [pc, #24]	; (801381c <exit+0x1c>)
 8013804:	4604      	mov	r4, r0
 8013806:	b113      	cbz	r3, 801380e <exit+0xe>
 8013808:	2100      	movs	r1, #0
 801380a:	f3af 8000 	nop.w
 801380e:	4b04      	ldr	r3, [pc, #16]	; (8013820 <exit+0x20>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	b103      	cbz	r3, 8013816 <exit+0x16>
 8013814:	4798      	blx	r3
 8013816:	4620      	mov	r0, r4
 8013818:	f7f5 fff2 	bl	8009800 <_exit>
 801381c:	00000000 	.word	0x00000000
 8013820:	20000ae4 	.word	0x20000ae4

08013824 <malloc>:
 8013824:	4b02      	ldr	r3, [pc, #8]	; (8013830 <malloc+0xc>)
 8013826:	4601      	mov	r1, r0
 8013828:	6818      	ldr	r0, [r3, #0]
 801382a:	f000 b82b 	b.w	8013884 <_malloc_r>
 801382e:	bf00      	nop
 8013830:	200000dc 	.word	0x200000dc

08013834 <free>:
 8013834:	4b02      	ldr	r3, [pc, #8]	; (8013840 <free+0xc>)
 8013836:	4601      	mov	r1, r0
 8013838:	6818      	ldr	r0, [r3, #0]
 801383a:	f001 bffb 	b.w	8015834 <_free_r>
 801383e:	bf00      	nop
 8013840:	200000dc 	.word	0x200000dc

08013844 <sbrk_aligned>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	4e0e      	ldr	r6, [pc, #56]	; (8013880 <sbrk_aligned+0x3c>)
 8013848:	460c      	mov	r4, r1
 801384a:	6831      	ldr	r1, [r6, #0]
 801384c:	4605      	mov	r5, r0
 801384e:	b911      	cbnz	r1, 8013856 <sbrk_aligned+0x12>
 8013850:	f001 f912 	bl	8014a78 <_sbrk_r>
 8013854:	6030      	str	r0, [r6, #0]
 8013856:	4621      	mov	r1, r4
 8013858:	4628      	mov	r0, r5
 801385a:	f001 f90d 	bl	8014a78 <_sbrk_r>
 801385e:	1c43      	adds	r3, r0, #1
 8013860:	d00a      	beq.n	8013878 <sbrk_aligned+0x34>
 8013862:	1cc4      	adds	r4, r0, #3
 8013864:	f024 0403 	bic.w	r4, r4, #3
 8013868:	42a0      	cmp	r0, r4
 801386a:	d007      	beq.n	801387c <sbrk_aligned+0x38>
 801386c:	1a21      	subs	r1, r4, r0
 801386e:	4628      	mov	r0, r5
 8013870:	f001 f902 	bl	8014a78 <_sbrk_r>
 8013874:	3001      	adds	r0, #1
 8013876:	d101      	bne.n	801387c <sbrk_aligned+0x38>
 8013878:	f04f 34ff 	mov.w	r4, #4294967295
 801387c:	4620      	mov	r0, r4
 801387e:	bd70      	pop	{r4, r5, r6, pc}
 8013880:	200009a8 	.word	0x200009a8

08013884 <_malloc_r>:
 8013884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013888:	1ccd      	adds	r5, r1, #3
 801388a:	f025 0503 	bic.w	r5, r5, #3
 801388e:	3508      	adds	r5, #8
 8013890:	2d0c      	cmp	r5, #12
 8013892:	bf38      	it	cc
 8013894:	250c      	movcc	r5, #12
 8013896:	2d00      	cmp	r5, #0
 8013898:	4607      	mov	r7, r0
 801389a:	db01      	blt.n	80138a0 <_malloc_r+0x1c>
 801389c:	42a9      	cmp	r1, r5
 801389e:	d905      	bls.n	80138ac <_malloc_r+0x28>
 80138a0:	230c      	movs	r3, #12
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	2600      	movs	r6, #0
 80138a6:	4630      	mov	r0, r6
 80138a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013980 <_malloc_r+0xfc>
 80138b0:	f000 f868 	bl	8013984 <__malloc_lock>
 80138b4:	f8d8 3000 	ldr.w	r3, [r8]
 80138b8:	461c      	mov	r4, r3
 80138ba:	bb5c      	cbnz	r4, 8013914 <_malloc_r+0x90>
 80138bc:	4629      	mov	r1, r5
 80138be:	4638      	mov	r0, r7
 80138c0:	f7ff ffc0 	bl	8013844 <sbrk_aligned>
 80138c4:	1c43      	adds	r3, r0, #1
 80138c6:	4604      	mov	r4, r0
 80138c8:	d155      	bne.n	8013976 <_malloc_r+0xf2>
 80138ca:	f8d8 4000 	ldr.w	r4, [r8]
 80138ce:	4626      	mov	r6, r4
 80138d0:	2e00      	cmp	r6, #0
 80138d2:	d145      	bne.n	8013960 <_malloc_r+0xdc>
 80138d4:	2c00      	cmp	r4, #0
 80138d6:	d048      	beq.n	801396a <_malloc_r+0xe6>
 80138d8:	6823      	ldr	r3, [r4, #0]
 80138da:	4631      	mov	r1, r6
 80138dc:	4638      	mov	r0, r7
 80138de:	eb04 0903 	add.w	r9, r4, r3
 80138e2:	f001 f8c9 	bl	8014a78 <_sbrk_r>
 80138e6:	4581      	cmp	r9, r0
 80138e8:	d13f      	bne.n	801396a <_malloc_r+0xe6>
 80138ea:	6821      	ldr	r1, [r4, #0]
 80138ec:	1a6d      	subs	r5, r5, r1
 80138ee:	4629      	mov	r1, r5
 80138f0:	4638      	mov	r0, r7
 80138f2:	f7ff ffa7 	bl	8013844 <sbrk_aligned>
 80138f6:	3001      	adds	r0, #1
 80138f8:	d037      	beq.n	801396a <_malloc_r+0xe6>
 80138fa:	6823      	ldr	r3, [r4, #0]
 80138fc:	442b      	add	r3, r5
 80138fe:	6023      	str	r3, [r4, #0]
 8013900:	f8d8 3000 	ldr.w	r3, [r8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d038      	beq.n	801397a <_malloc_r+0xf6>
 8013908:	685a      	ldr	r2, [r3, #4]
 801390a:	42a2      	cmp	r2, r4
 801390c:	d12b      	bne.n	8013966 <_malloc_r+0xe2>
 801390e:	2200      	movs	r2, #0
 8013910:	605a      	str	r2, [r3, #4]
 8013912:	e00f      	b.n	8013934 <_malloc_r+0xb0>
 8013914:	6822      	ldr	r2, [r4, #0]
 8013916:	1b52      	subs	r2, r2, r5
 8013918:	d41f      	bmi.n	801395a <_malloc_r+0xd6>
 801391a:	2a0b      	cmp	r2, #11
 801391c:	d917      	bls.n	801394e <_malloc_r+0xca>
 801391e:	1961      	adds	r1, r4, r5
 8013920:	42a3      	cmp	r3, r4
 8013922:	6025      	str	r5, [r4, #0]
 8013924:	bf18      	it	ne
 8013926:	6059      	strne	r1, [r3, #4]
 8013928:	6863      	ldr	r3, [r4, #4]
 801392a:	bf08      	it	eq
 801392c:	f8c8 1000 	streq.w	r1, [r8]
 8013930:	5162      	str	r2, [r4, r5]
 8013932:	604b      	str	r3, [r1, #4]
 8013934:	4638      	mov	r0, r7
 8013936:	f104 060b 	add.w	r6, r4, #11
 801393a:	f000 f829 	bl	8013990 <__malloc_unlock>
 801393e:	f026 0607 	bic.w	r6, r6, #7
 8013942:	1d23      	adds	r3, r4, #4
 8013944:	1af2      	subs	r2, r6, r3
 8013946:	d0ae      	beq.n	80138a6 <_malloc_r+0x22>
 8013948:	1b9b      	subs	r3, r3, r6
 801394a:	50a3      	str	r3, [r4, r2]
 801394c:	e7ab      	b.n	80138a6 <_malloc_r+0x22>
 801394e:	42a3      	cmp	r3, r4
 8013950:	6862      	ldr	r2, [r4, #4]
 8013952:	d1dd      	bne.n	8013910 <_malloc_r+0x8c>
 8013954:	f8c8 2000 	str.w	r2, [r8]
 8013958:	e7ec      	b.n	8013934 <_malloc_r+0xb0>
 801395a:	4623      	mov	r3, r4
 801395c:	6864      	ldr	r4, [r4, #4]
 801395e:	e7ac      	b.n	80138ba <_malloc_r+0x36>
 8013960:	4634      	mov	r4, r6
 8013962:	6876      	ldr	r6, [r6, #4]
 8013964:	e7b4      	b.n	80138d0 <_malloc_r+0x4c>
 8013966:	4613      	mov	r3, r2
 8013968:	e7cc      	b.n	8013904 <_malloc_r+0x80>
 801396a:	230c      	movs	r3, #12
 801396c:	603b      	str	r3, [r7, #0]
 801396e:	4638      	mov	r0, r7
 8013970:	f000 f80e 	bl	8013990 <__malloc_unlock>
 8013974:	e797      	b.n	80138a6 <_malloc_r+0x22>
 8013976:	6025      	str	r5, [r4, #0]
 8013978:	e7dc      	b.n	8013934 <_malloc_r+0xb0>
 801397a:	605b      	str	r3, [r3, #4]
 801397c:	deff      	udf	#255	; 0xff
 801397e:	bf00      	nop
 8013980:	200009a4 	.word	0x200009a4

08013984 <__malloc_lock>:
 8013984:	4801      	ldr	r0, [pc, #4]	; (801398c <__malloc_lock+0x8>)
 8013986:	f001 b8c4 	b.w	8014b12 <__retarget_lock_acquire_recursive>
 801398a:	bf00      	nop
 801398c:	20000aec 	.word	0x20000aec

08013990 <__malloc_unlock>:
 8013990:	4801      	ldr	r0, [pc, #4]	; (8013998 <__malloc_unlock+0x8>)
 8013992:	f001 b8bf 	b.w	8014b14 <__retarget_lock_release_recursive>
 8013996:	bf00      	nop
 8013998:	20000aec 	.word	0x20000aec

0801399c <__cvt>:
 801399c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139a0:	ec55 4b10 	vmov	r4, r5, d0
 80139a4:	2d00      	cmp	r5, #0
 80139a6:	460e      	mov	r6, r1
 80139a8:	4619      	mov	r1, r3
 80139aa:	462b      	mov	r3, r5
 80139ac:	bfbb      	ittet	lt
 80139ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80139b2:	461d      	movlt	r5, r3
 80139b4:	2300      	movge	r3, #0
 80139b6:	232d      	movlt	r3, #45	; 0x2d
 80139b8:	700b      	strb	r3, [r1, #0]
 80139ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80139c0:	4691      	mov	r9, r2
 80139c2:	f023 0820 	bic.w	r8, r3, #32
 80139c6:	bfbc      	itt	lt
 80139c8:	4622      	movlt	r2, r4
 80139ca:	4614      	movlt	r4, r2
 80139cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80139d0:	d005      	beq.n	80139de <__cvt+0x42>
 80139d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80139d6:	d100      	bne.n	80139da <__cvt+0x3e>
 80139d8:	3601      	adds	r6, #1
 80139da:	2102      	movs	r1, #2
 80139dc:	e000      	b.n	80139e0 <__cvt+0x44>
 80139de:	2103      	movs	r1, #3
 80139e0:	ab03      	add	r3, sp, #12
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	ab02      	add	r3, sp, #8
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	ec45 4b10 	vmov	d0, r4, r5
 80139ec:	4653      	mov	r3, sl
 80139ee:	4632      	mov	r2, r6
 80139f0:	f001 f92e 	bl	8014c50 <_dtoa_r>
 80139f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80139f8:	4607      	mov	r7, r0
 80139fa:	d102      	bne.n	8013a02 <__cvt+0x66>
 80139fc:	f019 0f01 	tst.w	r9, #1
 8013a00:	d022      	beq.n	8013a48 <__cvt+0xac>
 8013a02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013a06:	eb07 0906 	add.w	r9, r7, r6
 8013a0a:	d110      	bne.n	8013a2e <__cvt+0x92>
 8013a0c:	783b      	ldrb	r3, [r7, #0]
 8013a0e:	2b30      	cmp	r3, #48	; 0x30
 8013a10:	d10a      	bne.n	8013a28 <__cvt+0x8c>
 8013a12:	2200      	movs	r2, #0
 8013a14:	2300      	movs	r3, #0
 8013a16:	4620      	mov	r0, r4
 8013a18:	4629      	mov	r1, r5
 8013a1a:	f7ed f87d 	bl	8000b18 <__aeabi_dcmpeq>
 8013a1e:	b918      	cbnz	r0, 8013a28 <__cvt+0x8c>
 8013a20:	f1c6 0601 	rsb	r6, r6, #1
 8013a24:	f8ca 6000 	str.w	r6, [sl]
 8013a28:	f8da 3000 	ldr.w	r3, [sl]
 8013a2c:	4499      	add	r9, r3
 8013a2e:	2200      	movs	r2, #0
 8013a30:	2300      	movs	r3, #0
 8013a32:	4620      	mov	r0, r4
 8013a34:	4629      	mov	r1, r5
 8013a36:	f7ed f86f 	bl	8000b18 <__aeabi_dcmpeq>
 8013a3a:	b108      	cbz	r0, 8013a40 <__cvt+0xa4>
 8013a3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013a40:	2230      	movs	r2, #48	; 0x30
 8013a42:	9b03      	ldr	r3, [sp, #12]
 8013a44:	454b      	cmp	r3, r9
 8013a46:	d307      	bcc.n	8013a58 <__cvt+0xbc>
 8013a48:	9b03      	ldr	r3, [sp, #12]
 8013a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a4c:	1bdb      	subs	r3, r3, r7
 8013a4e:	4638      	mov	r0, r7
 8013a50:	6013      	str	r3, [r2, #0]
 8013a52:	b004      	add	sp, #16
 8013a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a58:	1c59      	adds	r1, r3, #1
 8013a5a:	9103      	str	r1, [sp, #12]
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	e7f0      	b.n	8013a42 <__cvt+0xa6>

08013a60 <__exponent>:
 8013a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a62:	4603      	mov	r3, r0
 8013a64:	2900      	cmp	r1, #0
 8013a66:	bfb8      	it	lt
 8013a68:	4249      	neglt	r1, r1
 8013a6a:	f803 2b02 	strb.w	r2, [r3], #2
 8013a6e:	bfb4      	ite	lt
 8013a70:	222d      	movlt	r2, #45	; 0x2d
 8013a72:	222b      	movge	r2, #43	; 0x2b
 8013a74:	2909      	cmp	r1, #9
 8013a76:	7042      	strb	r2, [r0, #1]
 8013a78:	dd2a      	ble.n	8013ad0 <__exponent+0x70>
 8013a7a:	f10d 0207 	add.w	r2, sp, #7
 8013a7e:	4617      	mov	r7, r2
 8013a80:	260a      	movs	r6, #10
 8013a82:	4694      	mov	ip, r2
 8013a84:	fb91 f5f6 	sdiv	r5, r1, r6
 8013a88:	fb06 1415 	mls	r4, r6, r5, r1
 8013a8c:	3430      	adds	r4, #48	; 0x30
 8013a8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013a92:	460c      	mov	r4, r1
 8013a94:	2c63      	cmp	r4, #99	; 0x63
 8013a96:	f102 32ff 	add.w	r2, r2, #4294967295
 8013a9a:	4629      	mov	r1, r5
 8013a9c:	dcf1      	bgt.n	8013a82 <__exponent+0x22>
 8013a9e:	3130      	adds	r1, #48	; 0x30
 8013aa0:	f1ac 0402 	sub.w	r4, ip, #2
 8013aa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013aa8:	1c41      	adds	r1, r0, #1
 8013aaa:	4622      	mov	r2, r4
 8013aac:	42ba      	cmp	r2, r7
 8013aae:	d30a      	bcc.n	8013ac6 <__exponent+0x66>
 8013ab0:	f10d 0209 	add.w	r2, sp, #9
 8013ab4:	eba2 020c 	sub.w	r2, r2, ip
 8013ab8:	42bc      	cmp	r4, r7
 8013aba:	bf88      	it	hi
 8013abc:	2200      	movhi	r2, #0
 8013abe:	4413      	add	r3, r2
 8013ac0:	1a18      	subs	r0, r3, r0
 8013ac2:	b003      	add	sp, #12
 8013ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ac6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013aca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013ace:	e7ed      	b.n	8013aac <__exponent+0x4c>
 8013ad0:	2330      	movs	r3, #48	; 0x30
 8013ad2:	3130      	adds	r1, #48	; 0x30
 8013ad4:	7083      	strb	r3, [r0, #2]
 8013ad6:	70c1      	strb	r1, [r0, #3]
 8013ad8:	1d03      	adds	r3, r0, #4
 8013ada:	e7f1      	b.n	8013ac0 <__exponent+0x60>

08013adc <_printf_float>:
 8013adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae0:	ed2d 8b02 	vpush	{d8}
 8013ae4:	b08d      	sub	sp, #52	; 0x34
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013aec:	4616      	mov	r6, r2
 8013aee:	461f      	mov	r7, r3
 8013af0:	4605      	mov	r5, r0
 8013af2:	f000 ff75 	bl	80149e0 <_localeconv_r>
 8013af6:	f8d0 a000 	ldr.w	sl, [r0]
 8013afa:	4650      	mov	r0, sl
 8013afc:	f7ec fbe0 	bl	80002c0 <strlen>
 8013b00:	2300      	movs	r3, #0
 8013b02:	930a      	str	r3, [sp, #40]	; 0x28
 8013b04:	6823      	ldr	r3, [r4, #0]
 8013b06:	9305      	str	r3, [sp, #20]
 8013b08:	f8d8 3000 	ldr.w	r3, [r8]
 8013b0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013b10:	3307      	adds	r3, #7
 8013b12:	f023 0307 	bic.w	r3, r3, #7
 8013b16:	f103 0208 	add.w	r2, r3, #8
 8013b1a:	f8c8 2000 	str.w	r2, [r8]
 8013b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013b26:	9307      	str	r3, [sp, #28]
 8013b28:	f8cd 8018 	str.w	r8, [sp, #24]
 8013b2c:	ee08 0a10 	vmov	s16, r0
 8013b30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013b34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b38:	4b9e      	ldr	r3, [pc, #632]	; (8013db4 <_printf_float+0x2d8>)
 8013b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b3e:	f7ed f81d 	bl	8000b7c <__aeabi_dcmpun>
 8013b42:	bb88      	cbnz	r0, 8013ba8 <_printf_float+0xcc>
 8013b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b48:	4b9a      	ldr	r3, [pc, #616]	; (8013db4 <_printf_float+0x2d8>)
 8013b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b4e:	f7ec fff7 	bl	8000b40 <__aeabi_dcmple>
 8013b52:	bb48      	cbnz	r0, 8013ba8 <_printf_float+0xcc>
 8013b54:	2200      	movs	r2, #0
 8013b56:	2300      	movs	r3, #0
 8013b58:	4640      	mov	r0, r8
 8013b5a:	4649      	mov	r1, r9
 8013b5c:	f7ec ffe6 	bl	8000b2c <__aeabi_dcmplt>
 8013b60:	b110      	cbz	r0, 8013b68 <_printf_float+0x8c>
 8013b62:	232d      	movs	r3, #45	; 0x2d
 8013b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b68:	4a93      	ldr	r2, [pc, #588]	; (8013db8 <_printf_float+0x2dc>)
 8013b6a:	4b94      	ldr	r3, [pc, #592]	; (8013dbc <_printf_float+0x2e0>)
 8013b6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013b70:	bf94      	ite	ls
 8013b72:	4690      	movls	r8, r2
 8013b74:	4698      	movhi	r8, r3
 8013b76:	2303      	movs	r3, #3
 8013b78:	6123      	str	r3, [r4, #16]
 8013b7a:	9b05      	ldr	r3, [sp, #20]
 8013b7c:	f023 0304 	bic.w	r3, r3, #4
 8013b80:	6023      	str	r3, [r4, #0]
 8013b82:	f04f 0900 	mov.w	r9, #0
 8013b86:	9700      	str	r7, [sp, #0]
 8013b88:	4633      	mov	r3, r6
 8013b8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8013b8c:	4621      	mov	r1, r4
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f000 f9da 	bl	8013f48 <_printf_common>
 8013b94:	3001      	adds	r0, #1
 8013b96:	f040 8090 	bne.w	8013cba <_printf_float+0x1de>
 8013b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b9e:	b00d      	add	sp, #52	; 0x34
 8013ba0:	ecbd 8b02 	vpop	{d8}
 8013ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba8:	4642      	mov	r2, r8
 8013baa:	464b      	mov	r3, r9
 8013bac:	4640      	mov	r0, r8
 8013bae:	4649      	mov	r1, r9
 8013bb0:	f7ec ffe4 	bl	8000b7c <__aeabi_dcmpun>
 8013bb4:	b140      	cbz	r0, 8013bc8 <_printf_float+0xec>
 8013bb6:	464b      	mov	r3, r9
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	bfbc      	itt	lt
 8013bbc:	232d      	movlt	r3, #45	; 0x2d
 8013bbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013bc2:	4a7f      	ldr	r2, [pc, #508]	; (8013dc0 <_printf_float+0x2e4>)
 8013bc4:	4b7f      	ldr	r3, [pc, #508]	; (8013dc4 <_printf_float+0x2e8>)
 8013bc6:	e7d1      	b.n	8013b6c <_printf_float+0x90>
 8013bc8:	6863      	ldr	r3, [r4, #4]
 8013bca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013bce:	9206      	str	r2, [sp, #24]
 8013bd0:	1c5a      	adds	r2, r3, #1
 8013bd2:	d13f      	bne.n	8013c54 <_printf_float+0x178>
 8013bd4:	2306      	movs	r3, #6
 8013bd6:	6063      	str	r3, [r4, #4]
 8013bd8:	9b05      	ldr	r3, [sp, #20]
 8013bda:	6861      	ldr	r1, [r4, #4]
 8013bdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013be0:	2300      	movs	r3, #0
 8013be2:	9303      	str	r3, [sp, #12]
 8013be4:	ab0a      	add	r3, sp, #40	; 0x28
 8013be6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013bea:	ab09      	add	r3, sp, #36	; 0x24
 8013bec:	ec49 8b10 	vmov	d0, r8, r9
 8013bf0:	9300      	str	r3, [sp, #0]
 8013bf2:	6022      	str	r2, [r4, #0]
 8013bf4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	f7ff fecf 	bl	801399c <__cvt>
 8013bfe:	9b06      	ldr	r3, [sp, #24]
 8013c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c02:	2b47      	cmp	r3, #71	; 0x47
 8013c04:	4680      	mov	r8, r0
 8013c06:	d108      	bne.n	8013c1a <_printf_float+0x13e>
 8013c08:	1cc8      	adds	r0, r1, #3
 8013c0a:	db02      	blt.n	8013c12 <_printf_float+0x136>
 8013c0c:	6863      	ldr	r3, [r4, #4]
 8013c0e:	4299      	cmp	r1, r3
 8013c10:	dd41      	ble.n	8013c96 <_printf_float+0x1ba>
 8013c12:	f1ab 0302 	sub.w	r3, fp, #2
 8013c16:	fa5f fb83 	uxtb.w	fp, r3
 8013c1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c1e:	d820      	bhi.n	8013c62 <_printf_float+0x186>
 8013c20:	3901      	subs	r1, #1
 8013c22:	465a      	mov	r2, fp
 8013c24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013c28:	9109      	str	r1, [sp, #36]	; 0x24
 8013c2a:	f7ff ff19 	bl	8013a60 <__exponent>
 8013c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c30:	1813      	adds	r3, r2, r0
 8013c32:	2a01      	cmp	r2, #1
 8013c34:	4681      	mov	r9, r0
 8013c36:	6123      	str	r3, [r4, #16]
 8013c38:	dc02      	bgt.n	8013c40 <_printf_float+0x164>
 8013c3a:	6822      	ldr	r2, [r4, #0]
 8013c3c:	07d2      	lsls	r2, r2, #31
 8013c3e:	d501      	bpl.n	8013c44 <_printf_float+0x168>
 8013c40:	3301      	adds	r3, #1
 8013c42:	6123      	str	r3, [r4, #16]
 8013c44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d09c      	beq.n	8013b86 <_printf_float+0xaa>
 8013c4c:	232d      	movs	r3, #45	; 0x2d
 8013c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c52:	e798      	b.n	8013b86 <_printf_float+0xaa>
 8013c54:	9a06      	ldr	r2, [sp, #24]
 8013c56:	2a47      	cmp	r2, #71	; 0x47
 8013c58:	d1be      	bne.n	8013bd8 <_printf_float+0xfc>
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d1bc      	bne.n	8013bd8 <_printf_float+0xfc>
 8013c5e:	2301      	movs	r3, #1
 8013c60:	e7b9      	b.n	8013bd6 <_printf_float+0xfa>
 8013c62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013c66:	d118      	bne.n	8013c9a <_printf_float+0x1be>
 8013c68:	2900      	cmp	r1, #0
 8013c6a:	6863      	ldr	r3, [r4, #4]
 8013c6c:	dd0b      	ble.n	8013c86 <_printf_float+0x1aa>
 8013c6e:	6121      	str	r1, [r4, #16]
 8013c70:	b913      	cbnz	r3, 8013c78 <_printf_float+0x19c>
 8013c72:	6822      	ldr	r2, [r4, #0]
 8013c74:	07d0      	lsls	r0, r2, #31
 8013c76:	d502      	bpl.n	8013c7e <_printf_float+0x1a2>
 8013c78:	3301      	adds	r3, #1
 8013c7a:	440b      	add	r3, r1
 8013c7c:	6123      	str	r3, [r4, #16]
 8013c7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c80:	f04f 0900 	mov.w	r9, #0
 8013c84:	e7de      	b.n	8013c44 <_printf_float+0x168>
 8013c86:	b913      	cbnz	r3, 8013c8e <_printf_float+0x1b2>
 8013c88:	6822      	ldr	r2, [r4, #0]
 8013c8a:	07d2      	lsls	r2, r2, #31
 8013c8c:	d501      	bpl.n	8013c92 <_printf_float+0x1b6>
 8013c8e:	3302      	adds	r3, #2
 8013c90:	e7f4      	b.n	8013c7c <_printf_float+0x1a0>
 8013c92:	2301      	movs	r3, #1
 8013c94:	e7f2      	b.n	8013c7c <_printf_float+0x1a0>
 8013c96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c9c:	4299      	cmp	r1, r3
 8013c9e:	db05      	blt.n	8013cac <_printf_float+0x1d0>
 8013ca0:	6823      	ldr	r3, [r4, #0]
 8013ca2:	6121      	str	r1, [r4, #16]
 8013ca4:	07d8      	lsls	r0, r3, #31
 8013ca6:	d5ea      	bpl.n	8013c7e <_printf_float+0x1a2>
 8013ca8:	1c4b      	adds	r3, r1, #1
 8013caa:	e7e7      	b.n	8013c7c <_printf_float+0x1a0>
 8013cac:	2900      	cmp	r1, #0
 8013cae:	bfd4      	ite	le
 8013cb0:	f1c1 0202 	rsble	r2, r1, #2
 8013cb4:	2201      	movgt	r2, #1
 8013cb6:	4413      	add	r3, r2
 8013cb8:	e7e0      	b.n	8013c7c <_printf_float+0x1a0>
 8013cba:	6823      	ldr	r3, [r4, #0]
 8013cbc:	055a      	lsls	r2, r3, #21
 8013cbe:	d407      	bmi.n	8013cd0 <_printf_float+0x1f4>
 8013cc0:	6923      	ldr	r3, [r4, #16]
 8013cc2:	4642      	mov	r2, r8
 8013cc4:	4631      	mov	r1, r6
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	47b8      	blx	r7
 8013cca:	3001      	adds	r0, #1
 8013ccc:	d12c      	bne.n	8013d28 <_printf_float+0x24c>
 8013cce:	e764      	b.n	8013b9a <_printf_float+0xbe>
 8013cd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013cd4:	f240 80e0 	bls.w	8013e98 <_printf_float+0x3bc>
 8013cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013cdc:	2200      	movs	r2, #0
 8013cde:	2300      	movs	r3, #0
 8013ce0:	f7ec ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d034      	beq.n	8013d52 <_printf_float+0x276>
 8013ce8:	4a37      	ldr	r2, [pc, #220]	; (8013dc8 <_printf_float+0x2ec>)
 8013cea:	2301      	movs	r3, #1
 8013cec:	4631      	mov	r1, r6
 8013cee:	4628      	mov	r0, r5
 8013cf0:	47b8      	blx	r7
 8013cf2:	3001      	adds	r0, #1
 8013cf4:	f43f af51 	beq.w	8013b9a <_printf_float+0xbe>
 8013cf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	db02      	blt.n	8013d06 <_printf_float+0x22a>
 8013d00:	6823      	ldr	r3, [r4, #0]
 8013d02:	07d8      	lsls	r0, r3, #31
 8013d04:	d510      	bpl.n	8013d28 <_printf_float+0x24c>
 8013d06:	ee18 3a10 	vmov	r3, s16
 8013d0a:	4652      	mov	r2, sl
 8013d0c:	4631      	mov	r1, r6
 8013d0e:	4628      	mov	r0, r5
 8013d10:	47b8      	blx	r7
 8013d12:	3001      	adds	r0, #1
 8013d14:	f43f af41 	beq.w	8013b9a <_printf_float+0xbe>
 8013d18:	f04f 0800 	mov.w	r8, #0
 8013d1c:	f104 091a 	add.w	r9, r4, #26
 8013d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d22:	3b01      	subs	r3, #1
 8013d24:	4543      	cmp	r3, r8
 8013d26:	dc09      	bgt.n	8013d3c <_printf_float+0x260>
 8013d28:	6823      	ldr	r3, [r4, #0]
 8013d2a:	079b      	lsls	r3, r3, #30
 8013d2c:	f100 8107 	bmi.w	8013f3e <_printf_float+0x462>
 8013d30:	68e0      	ldr	r0, [r4, #12]
 8013d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d34:	4298      	cmp	r0, r3
 8013d36:	bfb8      	it	lt
 8013d38:	4618      	movlt	r0, r3
 8013d3a:	e730      	b.n	8013b9e <_printf_float+0xc2>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	464a      	mov	r2, r9
 8013d40:	4631      	mov	r1, r6
 8013d42:	4628      	mov	r0, r5
 8013d44:	47b8      	blx	r7
 8013d46:	3001      	adds	r0, #1
 8013d48:	f43f af27 	beq.w	8013b9a <_printf_float+0xbe>
 8013d4c:	f108 0801 	add.w	r8, r8, #1
 8013d50:	e7e6      	b.n	8013d20 <_printf_float+0x244>
 8013d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	dc39      	bgt.n	8013dcc <_printf_float+0x2f0>
 8013d58:	4a1b      	ldr	r2, [pc, #108]	; (8013dc8 <_printf_float+0x2ec>)
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	4631      	mov	r1, r6
 8013d5e:	4628      	mov	r0, r5
 8013d60:	47b8      	blx	r7
 8013d62:	3001      	adds	r0, #1
 8013d64:	f43f af19 	beq.w	8013b9a <_printf_float+0xbe>
 8013d68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d6c:	4313      	orrs	r3, r2
 8013d6e:	d102      	bne.n	8013d76 <_printf_float+0x29a>
 8013d70:	6823      	ldr	r3, [r4, #0]
 8013d72:	07d9      	lsls	r1, r3, #31
 8013d74:	d5d8      	bpl.n	8013d28 <_printf_float+0x24c>
 8013d76:	ee18 3a10 	vmov	r3, s16
 8013d7a:	4652      	mov	r2, sl
 8013d7c:	4631      	mov	r1, r6
 8013d7e:	4628      	mov	r0, r5
 8013d80:	47b8      	blx	r7
 8013d82:	3001      	adds	r0, #1
 8013d84:	f43f af09 	beq.w	8013b9a <_printf_float+0xbe>
 8013d88:	f04f 0900 	mov.w	r9, #0
 8013d8c:	f104 0a1a 	add.w	sl, r4, #26
 8013d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d92:	425b      	negs	r3, r3
 8013d94:	454b      	cmp	r3, r9
 8013d96:	dc01      	bgt.n	8013d9c <_printf_float+0x2c0>
 8013d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d9a:	e792      	b.n	8013cc2 <_printf_float+0x1e6>
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	4652      	mov	r2, sl
 8013da0:	4631      	mov	r1, r6
 8013da2:	4628      	mov	r0, r5
 8013da4:	47b8      	blx	r7
 8013da6:	3001      	adds	r0, #1
 8013da8:	f43f aef7 	beq.w	8013b9a <_printf_float+0xbe>
 8013dac:	f109 0901 	add.w	r9, r9, #1
 8013db0:	e7ee      	b.n	8013d90 <_printf_float+0x2b4>
 8013db2:	bf00      	nop
 8013db4:	7fefffff 	.word	0x7fefffff
 8013db8:	080191b4 	.word	0x080191b4
 8013dbc:	080191b8 	.word	0x080191b8
 8013dc0:	080191bc 	.word	0x080191bc
 8013dc4:	080191c0 	.word	0x080191c0
 8013dc8:	080191c4 	.word	0x080191c4
 8013dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	bfa8      	it	ge
 8013dd4:	461a      	movge	r2, r3
 8013dd6:	2a00      	cmp	r2, #0
 8013dd8:	4691      	mov	r9, r2
 8013dda:	dc37      	bgt.n	8013e4c <_printf_float+0x370>
 8013ddc:	f04f 0b00 	mov.w	fp, #0
 8013de0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013de4:	f104 021a 	add.w	r2, r4, #26
 8013de8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dea:	9305      	str	r3, [sp, #20]
 8013dec:	eba3 0309 	sub.w	r3, r3, r9
 8013df0:	455b      	cmp	r3, fp
 8013df2:	dc33      	bgt.n	8013e5c <_printf_float+0x380>
 8013df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	db3b      	blt.n	8013e74 <_printf_float+0x398>
 8013dfc:	6823      	ldr	r3, [r4, #0]
 8013dfe:	07da      	lsls	r2, r3, #31
 8013e00:	d438      	bmi.n	8013e74 <_printf_float+0x398>
 8013e02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013e06:	eba2 0903 	sub.w	r9, r2, r3
 8013e0a:	9b05      	ldr	r3, [sp, #20]
 8013e0c:	1ad2      	subs	r2, r2, r3
 8013e0e:	4591      	cmp	r9, r2
 8013e10:	bfa8      	it	ge
 8013e12:	4691      	movge	r9, r2
 8013e14:	f1b9 0f00 	cmp.w	r9, #0
 8013e18:	dc35      	bgt.n	8013e86 <_printf_float+0x3aa>
 8013e1a:	f04f 0800 	mov.w	r8, #0
 8013e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e22:	f104 0a1a 	add.w	sl, r4, #26
 8013e26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e2a:	1a9b      	subs	r3, r3, r2
 8013e2c:	eba3 0309 	sub.w	r3, r3, r9
 8013e30:	4543      	cmp	r3, r8
 8013e32:	f77f af79 	ble.w	8013d28 <_printf_float+0x24c>
 8013e36:	2301      	movs	r3, #1
 8013e38:	4652      	mov	r2, sl
 8013e3a:	4631      	mov	r1, r6
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	47b8      	blx	r7
 8013e40:	3001      	adds	r0, #1
 8013e42:	f43f aeaa 	beq.w	8013b9a <_printf_float+0xbe>
 8013e46:	f108 0801 	add.w	r8, r8, #1
 8013e4a:	e7ec      	b.n	8013e26 <_printf_float+0x34a>
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	4631      	mov	r1, r6
 8013e50:	4642      	mov	r2, r8
 8013e52:	4628      	mov	r0, r5
 8013e54:	47b8      	blx	r7
 8013e56:	3001      	adds	r0, #1
 8013e58:	d1c0      	bne.n	8013ddc <_printf_float+0x300>
 8013e5a:	e69e      	b.n	8013b9a <_printf_float+0xbe>
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	4631      	mov	r1, r6
 8013e60:	4628      	mov	r0, r5
 8013e62:	9205      	str	r2, [sp, #20]
 8013e64:	47b8      	blx	r7
 8013e66:	3001      	adds	r0, #1
 8013e68:	f43f ae97 	beq.w	8013b9a <_printf_float+0xbe>
 8013e6c:	9a05      	ldr	r2, [sp, #20]
 8013e6e:	f10b 0b01 	add.w	fp, fp, #1
 8013e72:	e7b9      	b.n	8013de8 <_printf_float+0x30c>
 8013e74:	ee18 3a10 	vmov	r3, s16
 8013e78:	4652      	mov	r2, sl
 8013e7a:	4631      	mov	r1, r6
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	47b8      	blx	r7
 8013e80:	3001      	adds	r0, #1
 8013e82:	d1be      	bne.n	8013e02 <_printf_float+0x326>
 8013e84:	e689      	b.n	8013b9a <_printf_float+0xbe>
 8013e86:	9a05      	ldr	r2, [sp, #20]
 8013e88:	464b      	mov	r3, r9
 8013e8a:	4442      	add	r2, r8
 8013e8c:	4631      	mov	r1, r6
 8013e8e:	4628      	mov	r0, r5
 8013e90:	47b8      	blx	r7
 8013e92:	3001      	adds	r0, #1
 8013e94:	d1c1      	bne.n	8013e1a <_printf_float+0x33e>
 8013e96:	e680      	b.n	8013b9a <_printf_float+0xbe>
 8013e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e9a:	2a01      	cmp	r2, #1
 8013e9c:	dc01      	bgt.n	8013ea2 <_printf_float+0x3c6>
 8013e9e:	07db      	lsls	r3, r3, #31
 8013ea0:	d53a      	bpl.n	8013f18 <_printf_float+0x43c>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	4642      	mov	r2, r8
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	47b8      	blx	r7
 8013eac:	3001      	adds	r0, #1
 8013eae:	f43f ae74 	beq.w	8013b9a <_printf_float+0xbe>
 8013eb2:	ee18 3a10 	vmov	r3, s16
 8013eb6:	4652      	mov	r2, sl
 8013eb8:	4631      	mov	r1, r6
 8013eba:	4628      	mov	r0, r5
 8013ebc:	47b8      	blx	r7
 8013ebe:	3001      	adds	r0, #1
 8013ec0:	f43f ae6b 	beq.w	8013b9a <_printf_float+0xbe>
 8013ec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ec8:	2200      	movs	r2, #0
 8013eca:	2300      	movs	r3, #0
 8013ecc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013ed0:	f7ec fe22 	bl	8000b18 <__aeabi_dcmpeq>
 8013ed4:	b9d8      	cbnz	r0, 8013f0e <_printf_float+0x432>
 8013ed6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013eda:	f108 0201 	add.w	r2, r8, #1
 8013ede:	4631      	mov	r1, r6
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	47b8      	blx	r7
 8013ee4:	3001      	adds	r0, #1
 8013ee6:	d10e      	bne.n	8013f06 <_printf_float+0x42a>
 8013ee8:	e657      	b.n	8013b9a <_printf_float+0xbe>
 8013eea:	2301      	movs	r3, #1
 8013eec:	4652      	mov	r2, sl
 8013eee:	4631      	mov	r1, r6
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	47b8      	blx	r7
 8013ef4:	3001      	adds	r0, #1
 8013ef6:	f43f ae50 	beq.w	8013b9a <_printf_float+0xbe>
 8013efa:	f108 0801 	add.w	r8, r8, #1
 8013efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f00:	3b01      	subs	r3, #1
 8013f02:	4543      	cmp	r3, r8
 8013f04:	dcf1      	bgt.n	8013eea <_printf_float+0x40e>
 8013f06:	464b      	mov	r3, r9
 8013f08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013f0c:	e6da      	b.n	8013cc4 <_printf_float+0x1e8>
 8013f0e:	f04f 0800 	mov.w	r8, #0
 8013f12:	f104 0a1a 	add.w	sl, r4, #26
 8013f16:	e7f2      	b.n	8013efe <_printf_float+0x422>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4642      	mov	r2, r8
 8013f1c:	e7df      	b.n	8013ede <_printf_float+0x402>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	464a      	mov	r2, r9
 8013f22:	4631      	mov	r1, r6
 8013f24:	4628      	mov	r0, r5
 8013f26:	47b8      	blx	r7
 8013f28:	3001      	adds	r0, #1
 8013f2a:	f43f ae36 	beq.w	8013b9a <_printf_float+0xbe>
 8013f2e:	f108 0801 	add.w	r8, r8, #1
 8013f32:	68e3      	ldr	r3, [r4, #12]
 8013f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f36:	1a5b      	subs	r3, r3, r1
 8013f38:	4543      	cmp	r3, r8
 8013f3a:	dcf0      	bgt.n	8013f1e <_printf_float+0x442>
 8013f3c:	e6f8      	b.n	8013d30 <_printf_float+0x254>
 8013f3e:	f04f 0800 	mov.w	r8, #0
 8013f42:	f104 0919 	add.w	r9, r4, #25
 8013f46:	e7f4      	b.n	8013f32 <_printf_float+0x456>

08013f48 <_printf_common>:
 8013f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f4c:	4616      	mov	r6, r2
 8013f4e:	4699      	mov	r9, r3
 8013f50:	688a      	ldr	r2, [r1, #8]
 8013f52:	690b      	ldr	r3, [r1, #16]
 8013f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	bfb8      	it	lt
 8013f5c:	4613      	movlt	r3, r2
 8013f5e:	6033      	str	r3, [r6, #0]
 8013f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f64:	4607      	mov	r7, r0
 8013f66:	460c      	mov	r4, r1
 8013f68:	b10a      	cbz	r2, 8013f6e <_printf_common+0x26>
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	6033      	str	r3, [r6, #0]
 8013f6e:	6823      	ldr	r3, [r4, #0]
 8013f70:	0699      	lsls	r1, r3, #26
 8013f72:	bf42      	ittt	mi
 8013f74:	6833      	ldrmi	r3, [r6, #0]
 8013f76:	3302      	addmi	r3, #2
 8013f78:	6033      	strmi	r3, [r6, #0]
 8013f7a:	6825      	ldr	r5, [r4, #0]
 8013f7c:	f015 0506 	ands.w	r5, r5, #6
 8013f80:	d106      	bne.n	8013f90 <_printf_common+0x48>
 8013f82:	f104 0a19 	add.w	sl, r4, #25
 8013f86:	68e3      	ldr	r3, [r4, #12]
 8013f88:	6832      	ldr	r2, [r6, #0]
 8013f8a:	1a9b      	subs	r3, r3, r2
 8013f8c:	42ab      	cmp	r3, r5
 8013f8e:	dc26      	bgt.n	8013fde <_printf_common+0x96>
 8013f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f94:	1e13      	subs	r3, r2, #0
 8013f96:	6822      	ldr	r2, [r4, #0]
 8013f98:	bf18      	it	ne
 8013f9a:	2301      	movne	r3, #1
 8013f9c:	0692      	lsls	r2, r2, #26
 8013f9e:	d42b      	bmi.n	8013ff8 <_printf_common+0xb0>
 8013fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fa4:	4649      	mov	r1, r9
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	47c0      	blx	r8
 8013faa:	3001      	adds	r0, #1
 8013fac:	d01e      	beq.n	8013fec <_printf_common+0xa4>
 8013fae:	6823      	ldr	r3, [r4, #0]
 8013fb0:	6922      	ldr	r2, [r4, #16]
 8013fb2:	f003 0306 	and.w	r3, r3, #6
 8013fb6:	2b04      	cmp	r3, #4
 8013fb8:	bf02      	ittt	eq
 8013fba:	68e5      	ldreq	r5, [r4, #12]
 8013fbc:	6833      	ldreq	r3, [r6, #0]
 8013fbe:	1aed      	subeq	r5, r5, r3
 8013fc0:	68a3      	ldr	r3, [r4, #8]
 8013fc2:	bf0c      	ite	eq
 8013fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013fc8:	2500      	movne	r5, #0
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	bfc4      	itt	gt
 8013fce:	1a9b      	subgt	r3, r3, r2
 8013fd0:	18ed      	addgt	r5, r5, r3
 8013fd2:	2600      	movs	r6, #0
 8013fd4:	341a      	adds	r4, #26
 8013fd6:	42b5      	cmp	r5, r6
 8013fd8:	d11a      	bne.n	8014010 <_printf_common+0xc8>
 8013fda:	2000      	movs	r0, #0
 8013fdc:	e008      	b.n	8013ff0 <_printf_common+0xa8>
 8013fde:	2301      	movs	r3, #1
 8013fe0:	4652      	mov	r2, sl
 8013fe2:	4649      	mov	r1, r9
 8013fe4:	4638      	mov	r0, r7
 8013fe6:	47c0      	blx	r8
 8013fe8:	3001      	adds	r0, #1
 8013fea:	d103      	bne.n	8013ff4 <_printf_common+0xac>
 8013fec:	f04f 30ff 	mov.w	r0, #4294967295
 8013ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ff4:	3501      	adds	r5, #1
 8013ff6:	e7c6      	b.n	8013f86 <_printf_common+0x3e>
 8013ff8:	18e1      	adds	r1, r4, r3
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	2030      	movs	r0, #48	; 0x30
 8013ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014002:	4422      	add	r2, r4
 8014004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801400c:	3302      	adds	r3, #2
 801400e:	e7c7      	b.n	8013fa0 <_printf_common+0x58>
 8014010:	2301      	movs	r3, #1
 8014012:	4622      	mov	r2, r4
 8014014:	4649      	mov	r1, r9
 8014016:	4638      	mov	r0, r7
 8014018:	47c0      	blx	r8
 801401a:	3001      	adds	r0, #1
 801401c:	d0e6      	beq.n	8013fec <_printf_common+0xa4>
 801401e:	3601      	adds	r6, #1
 8014020:	e7d9      	b.n	8013fd6 <_printf_common+0x8e>
	...

08014024 <_printf_i>:
 8014024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014028:	7e0f      	ldrb	r7, [r1, #24]
 801402a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801402c:	2f78      	cmp	r7, #120	; 0x78
 801402e:	4691      	mov	r9, r2
 8014030:	4680      	mov	r8, r0
 8014032:	460c      	mov	r4, r1
 8014034:	469a      	mov	sl, r3
 8014036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801403a:	d807      	bhi.n	801404c <_printf_i+0x28>
 801403c:	2f62      	cmp	r7, #98	; 0x62
 801403e:	d80a      	bhi.n	8014056 <_printf_i+0x32>
 8014040:	2f00      	cmp	r7, #0
 8014042:	f000 80d4 	beq.w	80141ee <_printf_i+0x1ca>
 8014046:	2f58      	cmp	r7, #88	; 0x58
 8014048:	f000 80c0 	beq.w	80141cc <_printf_i+0x1a8>
 801404c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014054:	e03a      	b.n	80140cc <_printf_i+0xa8>
 8014056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801405a:	2b15      	cmp	r3, #21
 801405c:	d8f6      	bhi.n	801404c <_printf_i+0x28>
 801405e:	a101      	add	r1, pc, #4	; (adr r1, 8014064 <_printf_i+0x40>)
 8014060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014064:	080140bd 	.word	0x080140bd
 8014068:	080140d1 	.word	0x080140d1
 801406c:	0801404d 	.word	0x0801404d
 8014070:	0801404d 	.word	0x0801404d
 8014074:	0801404d 	.word	0x0801404d
 8014078:	0801404d 	.word	0x0801404d
 801407c:	080140d1 	.word	0x080140d1
 8014080:	0801404d 	.word	0x0801404d
 8014084:	0801404d 	.word	0x0801404d
 8014088:	0801404d 	.word	0x0801404d
 801408c:	0801404d 	.word	0x0801404d
 8014090:	080141d5 	.word	0x080141d5
 8014094:	080140fd 	.word	0x080140fd
 8014098:	0801418f 	.word	0x0801418f
 801409c:	0801404d 	.word	0x0801404d
 80140a0:	0801404d 	.word	0x0801404d
 80140a4:	080141f7 	.word	0x080141f7
 80140a8:	0801404d 	.word	0x0801404d
 80140ac:	080140fd 	.word	0x080140fd
 80140b0:	0801404d 	.word	0x0801404d
 80140b4:	0801404d 	.word	0x0801404d
 80140b8:	08014197 	.word	0x08014197
 80140bc:	682b      	ldr	r3, [r5, #0]
 80140be:	1d1a      	adds	r2, r3, #4
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	602a      	str	r2, [r5, #0]
 80140c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140cc:	2301      	movs	r3, #1
 80140ce:	e09f      	b.n	8014210 <_printf_i+0x1ec>
 80140d0:	6820      	ldr	r0, [r4, #0]
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	0607      	lsls	r7, r0, #24
 80140d6:	f103 0104 	add.w	r1, r3, #4
 80140da:	6029      	str	r1, [r5, #0]
 80140dc:	d501      	bpl.n	80140e2 <_printf_i+0xbe>
 80140de:	681e      	ldr	r6, [r3, #0]
 80140e0:	e003      	b.n	80140ea <_printf_i+0xc6>
 80140e2:	0646      	lsls	r6, r0, #25
 80140e4:	d5fb      	bpl.n	80140de <_printf_i+0xba>
 80140e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80140ea:	2e00      	cmp	r6, #0
 80140ec:	da03      	bge.n	80140f6 <_printf_i+0xd2>
 80140ee:	232d      	movs	r3, #45	; 0x2d
 80140f0:	4276      	negs	r6, r6
 80140f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140f6:	485a      	ldr	r0, [pc, #360]	; (8014260 <_printf_i+0x23c>)
 80140f8:	230a      	movs	r3, #10
 80140fa:	e012      	b.n	8014122 <_printf_i+0xfe>
 80140fc:	682b      	ldr	r3, [r5, #0]
 80140fe:	6820      	ldr	r0, [r4, #0]
 8014100:	1d19      	adds	r1, r3, #4
 8014102:	6029      	str	r1, [r5, #0]
 8014104:	0605      	lsls	r5, r0, #24
 8014106:	d501      	bpl.n	801410c <_printf_i+0xe8>
 8014108:	681e      	ldr	r6, [r3, #0]
 801410a:	e002      	b.n	8014112 <_printf_i+0xee>
 801410c:	0641      	lsls	r1, r0, #25
 801410e:	d5fb      	bpl.n	8014108 <_printf_i+0xe4>
 8014110:	881e      	ldrh	r6, [r3, #0]
 8014112:	4853      	ldr	r0, [pc, #332]	; (8014260 <_printf_i+0x23c>)
 8014114:	2f6f      	cmp	r7, #111	; 0x6f
 8014116:	bf0c      	ite	eq
 8014118:	2308      	moveq	r3, #8
 801411a:	230a      	movne	r3, #10
 801411c:	2100      	movs	r1, #0
 801411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014122:	6865      	ldr	r5, [r4, #4]
 8014124:	60a5      	str	r5, [r4, #8]
 8014126:	2d00      	cmp	r5, #0
 8014128:	bfa2      	ittt	ge
 801412a:	6821      	ldrge	r1, [r4, #0]
 801412c:	f021 0104 	bicge.w	r1, r1, #4
 8014130:	6021      	strge	r1, [r4, #0]
 8014132:	b90e      	cbnz	r6, 8014138 <_printf_i+0x114>
 8014134:	2d00      	cmp	r5, #0
 8014136:	d04b      	beq.n	80141d0 <_printf_i+0x1ac>
 8014138:	4615      	mov	r5, r2
 801413a:	fbb6 f1f3 	udiv	r1, r6, r3
 801413e:	fb03 6711 	mls	r7, r3, r1, r6
 8014142:	5dc7      	ldrb	r7, [r0, r7]
 8014144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014148:	4637      	mov	r7, r6
 801414a:	42bb      	cmp	r3, r7
 801414c:	460e      	mov	r6, r1
 801414e:	d9f4      	bls.n	801413a <_printf_i+0x116>
 8014150:	2b08      	cmp	r3, #8
 8014152:	d10b      	bne.n	801416c <_printf_i+0x148>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	07de      	lsls	r6, r3, #31
 8014158:	d508      	bpl.n	801416c <_printf_i+0x148>
 801415a:	6923      	ldr	r3, [r4, #16]
 801415c:	6861      	ldr	r1, [r4, #4]
 801415e:	4299      	cmp	r1, r3
 8014160:	bfde      	ittt	le
 8014162:	2330      	movle	r3, #48	; 0x30
 8014164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014168:	f105 35ff 	addle.w	r5, r5, #4294967295
 801416c:	1b52      	subs	r2, r2, r5
 801416e:	6122      	str	r2, [r4, #16]
 8014170:	f8cd a000 	str.w	sl, [sp]
 8014174:	464b      	mov	r3, r9
 8014176:	aa03      	add	r2, sp, #12
 8014178:	4621      	mov	r1, r4
 801417a:	4640      	mov	r0, r8
 801417c:	f7ff fee4 	bl	8013f48 <_printf_common>
 8014180:	3001      	adds	r0, #1
 8014182:	d14a      	bne.n	801421a <_printf_i+0x1f6>
 8014184:	f04f 30ff 	mov.w	r0, #4294967295
 8014188:	b004      	add	sp, #16
 801418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801418e:	6823      	ldr	r3, [r4, #0]
 8014190:	f043 0320 	orr.w	r3, r3, #32
 8014194:	6023      	str	r3, [r4, #0]
 8014196:	4833      	ldr	r0, [pc, #204]	; (8014264 <_printf_i+0x240>)
 8014198:	2778      	movs	r7, #120	; 0x78
 801419a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801419e:	6823      	ldr	r3, [r4, #0]
 80141a0:	6829      	ldr	r1, [r5, #0]
 80141a2:	061f      	lsls	r7, r3, #24
 80141a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80141a8:	d402      	bmi.n	80141b0 <_printf_i+0x18c>
 80141aa:	065f      	lsls	r7, r3, #25
 80141ac:	bf48      	it	mi
 80141ae:	b2b6      	uxthmi	r6, r6
 80141b0:	07df      	lsls	r7, r3, #31
 80141b2:	bf48      	it	mi
 80141b4:	f043 0320 	orrmi.w	r3, r3, #32
 80141b8:	6029      	str	r1, [r5, #0]
 80141ba:	bf48      	it	mi
 80141bc:	6023      	strmi	r3, [r4, #0]
 80141be:	b91e      	cbnz	r6, 80141c8 <_printf_i+0x1a4>
 80141c0:	6823      	ldr	r3, [r4, #0]
 80141c2:	f023 0320 	bic.w	r3, r3, #32
 80141c6:	6023      	str	r3, [r4, #0]
 80141c8:	2310      	movs	r3, #16
 80141ca:	e7a7      	b.n	801411c <_printf_i+0xf8>
 80141cc:	4824      	ldr	r0, [pc, #144]	; (8014260 <_printf_i+0x23c>)
 80141ce:	e7e4      	b.n	801419a <_printf_i+0x176>
 80141d0:	4615      	mov	r5, r2
 80141d2:	e7bd      	b.n	8014150 <_printf_i+0x12c>
 80141d4:	682b      	ldr	r3, [r5, #0]
 80141d6:	6826      	ldr	r6, [r4, #0]
 80141d8:	6961      	ldr	r1, [r4, #20]
 80141da:	1d18      	adds	r0, r3, #4
 80141dc:	6028      	str	r0, [r5, #0]
 80141de:	0635      	lsls	r5, r6, #24
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	d501      	bpl.n	80141e8 <_printf_i+0x1c4>
 80141e4:	6019      	str	r1, [r3, #0]
 80141e6:	e002      	b.n	80141ee <_printf_i+0x1ca>
 80141e8:	0670      	lsls	r0, r6, #25
 80141ea:	d5fb      	bpl.n	80141e4 <_printf_i+0x1c0>
 80141ec:	8019      	strh	r1, [r3, #0]
 80141ee:	2300      	movs	r3, #0
 80141f0:	6123      	str	r3, [r4, #16]
 80141f2:	4615      	mov	r5, r2
 80141f4:	e7bc      	b.n	8014170 <_printf_i+0x14c>
 80141f6:	682b      	ldr	r3, [r5, #0]
 80141f8:	1d1a      	adds	r2, r3, #4
 80141fa:	602a      	str	r2, [r5, #0]
 80141fc:	681d      	ldr	r5, [r3, #0]
 80141fe:	6862      	ldr	r2, [r4, #4]
 8014200:	2100      	movs	r1, #0
 8014202:	4628      	mov	r0, r5
 8014204:	f7ec f80c 	bl	8000220 <memchr>
 8014208:	b108      	cbz	r0, 801420e <_printf_i+0x1ea>
 801420a:	1b40      	subs	r0, r0, r5
 801420c:	6060      	str	r0, [r4, #4]
 801420e:	6863      	ldr	r3, [r4, #4]
 8014210:	6123      	str	r3, [r4, #16]
 8014212:	2300      	movs	r3, #0
 8014214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014218:	e7aa      	b.n	8014170 <_printf_i+0x14c>
 801421a:	6923      	ldr	r3, [r4, #16]
 801421c:	462a      	mov	r2, r5
 801421e:	4649      	mov	r1, r9
 8014220:	4640      	mov	r0, r8
 8014222:	47d0      	blx	sl
 8014224:	3001      	adds	r0, #1
 8014226:	d0ad      	beq.n	8014184 <_printf_i+0x160>
 8014228:	6823      	ldr	r3, [r4, #0]
 801422a:	079b      	lsls	r3, r3, #30
 801422c:	d413      	bmi.n	8014256 <_printf_i+0x232>
 801422e:	68e0      	ldr	r0, [r4, #12]
 8014230:	9b03      	ldr	r3, [sp, #12]
 8014232:	4298      	cmp	r0, r3
 8014234:	bfb8      	it	lt
 8014236:	4618      	movlt	r0, r3
 8014238:	e7a6      	b.n	8014188 <_printf_i+0x164>
 801423a:	2301      	movs	r3, #1
 801423c:	4632      	mov	r2, r6
 801423e:	4649      	mov	r1, r9
 8014240:	4640      	mov	r0, r8
 8014242:	47d0      	blx	sl
 8014244:	3001      	adds	r0, #1
 8014246:	d09d      	beq.n	8014184 <_printf_i+0x160>
 8014248:	3501      	adds	r5, #1
 801424a:	68e3      	ldr	r3, [r4, #12]
 801424c:	9903      	ldr	r1, [sp, #12]
 801424e:	1a5b      	subs	r3, r3, r1
 8014250:	42ab      	cmp	r3, r5
 8014252:	dcf2      	bgt.n	801423a <_printf_i+0x216>
 8014254:	e7eb      	b.n	801422e <_printf_i+0x20a>
 8014256:	2500      	movs	r5, #0
 8014258:	f104 0619 	add.w	r6, r4, #25
 801425c:	e7f5      	b.n	801424a <_printf_i+0x226>
 801425e:	bf00      	nop
 8014260:	080191c6 	.word	0x080191c6
 8014264:	080191d7 	.word	0x080191d7

08014268 <_scanf_float>:
 8014268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426c:	b087      	sub	sp, #28
 801426e:	4617      	mov	r7, r2
 8014270:	9303      	str	r3, [sp, #12]
 8014272:	688b      	ldr	r3, [r1, #8]
 8014274:	1e5a      	subs	r2, r3, #1
 8014276:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801427a:	bf83      	ittte	hi
 801427c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014280:	195b      	addhi	r3, r3, r5
 8014282:	9302      	strhi	r3, [sp, #8]
 8014284:	2300      	movls	r3, #0
 8014286:	bf86      	itte	hi
 8014288:	f240 135d 	movwhi	r3, #349	; 0x15d
 801428c:	608b      	strhi	r3, [r1, #8]
 801428e:	9302      	strls	r3, [sp, #8]
 8014290:	680b      	ldr	r3, [r1, #0]
 8014292:	468b      	mov	fp, r1
 8014294:	2500      	movs	r5, #0
 8014296:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801429a:	f84b 3b1c 	str.w	r3, [fp], #28
 801429e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80142a2:	4680      	mov	r8, r0
 80142a4:	460c      	mov	r4, r1
 80142a6:	465e      	mov	r6, fp
 80142a8:	46aa      	mov	sl, r5
 80142aa:	46a9      	mov	r9, r5
 80142ac:	9501      	str	r5, [sp, #4]
 80142ae:	68a2      	ldr	r2, [r4, #8]
 80142b0:	b152      	cbz	r2, 80142c8 <_scanf_float+0x60>
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	2b4e      	cmp	r3, #78	; 0x4e
 80142b8:	d864      	bhi.n	8014384 <_scanf_float+0x11c>
 80142ba:	2b40      	cmp	r3, #64	; 0x40
 80142bc:	d83c      	bhi.n	8014338 <_scanf_float+0xd0>
 80142be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80142c2:	b2c8      	uxtb	r0, r1
 80142c4:	280e      	cmp	r0, #14
 80142c6:	d93a      	bls.n	801433e <_scanf_float+0xd6>
 80142c8:	f1b9 0f00 	cmp.w	r9, #0
 80142cc:	d003      	beq.n	80142d6 <_scanf_float+0x6e>
 80142ce:	6823      	ldr	r3, [r4, #0]
 80142d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80142d4:	6023      	str	r3, [r4, #0]
 80142d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80142da:	f1ba 0f01 	cmp.w	sl, #1
 80142de:	f200 8113 	bhi.w	8014508 <_scanf_float+0x2a0>
 80142e2:	455e      	cmp	r6, fp
 80142e4:	f200 8105 	bhi.w	80144f2 <_scanf_float+0x28a>
 80142e8:	2501      	movs	r5, #1
 80142ea:	4628      	mov	r0, r5
 80142ec:	b007      	add	sp, #28
 80142ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80142f6:	2a0d      	cmp	r2, #13
 80142f8:	d8e6      	bhi.n	80142c8 <_scanf_float+0x60>
 80142fa:	a101      	add	r1, pc, #4	; (adr r1, 8014300 <_scanf_float+0x98>)
 80142fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014300:	0801443f 	.word	0x0801443f
 8014304:	080142c9 	.word	0x080142c9
 8014308:	080142c9 	.word	0x080142c9
 801430c:	080142c9 	.word	0x080142c9
 8014310:	0801449f 	.word	0x0801449f
 8014314:	08014477 	.word	0x08014477
 8014318:	080142c9 	.word	0x080142c9
 801431c:	080142c9 	.word	0x080142c9
 8014320:	0801444d 	.word	0x0801444d
 8014324:	080142c9 	.word	0x080142c9
 8014328:	080142c9 	.word	0x080142c9
 801432c:	080142c9 	.word	0x080142c9
 8014330:	080142c9 	.word	0x080142c9
 8014334:	08014405 	.word	0x08014405
 8014338:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801433c:	e7db      	b.n	80142f6 <_scanf_float+0x8e>
 801433e:	290e      	cmp	r1, #14
 8014340:	d8c2      	bhi.n	80142c8 <_scanf_float+0x60>
 8014342:	a001      	add	r0, pc, #4	; (adr r0, 8014348 <_scanf_float+0xe0>)
 8014344:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014348:	080143f7 	.word	0x080143f7
 801434c:	080142c9 	.word	0x080142c9
 8014350:	080143f7 	.word	0x080143f7
 8014354:	0801448b 	.word	0x0801448b
 8014358:	080142c9 	.word	0x080142c9
 801435c:	080143a5 	.word	0x080143a5
 8014360:	080143e1 	.word	0x080143e1
 8014364:	080143e1 	.word	0x080143e1
 8014368:	080143e1 	.word	0x080143e1
 801436c:	080143e1 	.word	0x080143e1
 8014370:	080143e1 	.word	0x080143e1
 8014374:	080143e1 	.word	0x080143e1
 8014378:	080143e1 	.word	0x080143e1
 801437c:	080143e1 	.word	0x080143e1
 8014380:	080143e1 	.word	0x080143e1
 8014384:	2b6e      	cmp	r3, #110	; 0x6e
 8014386:	d809      	bhi.n	801439c <_scanf_float+0x134>
 8014388:	2b60      	cmp	r3, #96	; 0x60
 801438a:	d8b2      	bhi.n	80142f2 <_scanf_float+0x8a>
 801438c:	2b54      	cmp	r3, #84	; 0x54
 801438e:	d077      	beq.n	8014480 <_scanf_float+0x218>
 8014390:	2b59      	cmp	r3, #89	; 0x59
 8014392:	d199      	bne.n	80142c8 <_scanf_float+0x60>
 8014394:	2d07      	cmp	r5, #7
 8014396:	d197      	bne.n	80142c8 <_scanf_float+0x60>
 8014398:	2508      	movs	r5, #8
 801439a:	e029      	b.n	80143f0 <_scanf_float+0x188>
 801439c:	2b74      	cmp	r3, #116	; 0x74
 801439e:	d06f      	beq.n	8014480 <_scanf_float+0x218>
 80143a0:	2b79      	cmp	r3, #121	; 0x79
 80143a2:	e7f6      	b.n	8014392 <_scanf_float+0x12a>
 80143a4:	6821      	ldr	r1, [r4, #0]
 80143a6:	05c8      	lsls	r0, r1, #23
 80143a8:	d51a      	bpl.n	80143e0 <_scanf_float+0x178>
 80143aa:	9b02      	ldr	r3, [sp, #8]
 80143ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80143b0:	6021      	str	r1, [r4, #0]
 80143b2:	f109 0901 	add.w	r9, r9, #1
 80143b6:	b11b      	cbz	r3, 80143c0 <_scanf_float+0x158>
 80143b8:	3b01      	subs	r3, #1
 80143ba:	3201      	adds	r2, #1
 80143bc:	9302      	str	r3, [sp, #8]
 80143be:	60a2      	str	r2, [r4, #8]
 80143c0:	68a3      	ldr	r3, [r4, #8]
 80143c2:	3b01      	subs	r3, #1
 80143c4:	60a3      	str	r3, [r4, #8]
 80143c6:	6923      	ldr	r3, [r4, #16]
 80143c8:	3301      	adds	r3, #1
 80143ca:	6123      	str	r3, [r4, #16]
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	3b01      	subs	r3, #1
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	607b      	str	r3, [r7, #4]
 80143d4:	f340 8084 	ble.w	80144e0 <_scanf_float+0x278>
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	3301      	adds	r3, #1
 80143dc:	603b      	str	r3, [r7, #0]
 80143de:	e766      	b.n	80142ae <_scanf_float+0x46>
 80143e0:	eb1a 0f05 	cmn.w	sl, r5
 80143e4:	f47f af70 	bne.w	80142c8 <_scanf_float+0x60>
 80143e8:	6822      	ldr	r2, [r4, #0]
 80143ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80143ee:	6022      	str	r2, [r4, #0]
 80143f0:	f806 3b01 	strb.w	r3, [r6], #1
 80143f4:	e7e4      	b.n	80143c0 <_scanf_float+0x158>
 80143f6:	6822      	ldr	r2, [r4, #0]
 80143f8:	0610      	lsls	r0, r2, #24
 80143fa:	f57f af65 	bpl.w	80142c8 <_scanf_float+0x60>
 80143fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014402:	e7f4      	b.n	80143ee <_scanf_float+0x186>
 8014404:	f1ba 0f00 	cmp.w	sl, #0
 8014408:	d10e      	bne.n	8014428 <_scanf_float+0x1c0>
 801440a:	f1b9 0f00 	cmp.w	r9, #0
 801440e:	d10e      	bne.n	801442e <_scanf_float+0x1c6>
 8014410:	6822      	ldr	r2, [r4, #0]
 8014412:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014416:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801441a:	d108      	bne.n	801442e <_scanf_float+0x1c6>
 801441c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014420:	6022      	str	r2, [r4, #0]
 8014422:	f04f 0a01 	mov.w	sl, #1
 8014426:	e7e3      	b.n	80143f0 <_scanf_float+0x188>
 8014428:	f1ba 0f02 	cmp.w	sl, #2
 801442c:	d055      	beq.n	80144da <_scanf_float+0x272>
 801442e:	2d01      	cmp	r5, #1
 8014430:	d002      	beq.n	8014438 <_scanf_float+0x1d0>
 8014432:	2d04      	cmp	r5, #4
 8014434:	f47f af48 	bne.w	80142c8 <_scanf_float+0x60>
 8014438:	3501      	adds	r5, #1
 801443a:	b2ed      	uxtb	r5, r5
 801443c:	e7d8      	b.n	80143f0 <_scanf_float+0x188>
 801443e:	f1ba 0f01 	cmp.w	sl, #1
 8014442:	f47f af41 	bne.w	80142c8 <_scanf_float+0x60>
 8014446:	f04f 0a02 	mov.w	sl, #2
 801444a:	e7d1      	b.n	80143f0 <_scanf_float+0x188>
 801444c:	b97d      	cbnz	r5, 801446e <_scanf_float+0x206>
 801444e:	f1b9 0f00 	cmp.w	r9, #0
 8014452:	f47f af3c 	bne.w	80142ce <_scanf_float+0x66>
 8014456:	6822      	ldr	r2, [r4, #0]
 8014458:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801445c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014460:	f47f af39 	bne.w	80142d6 <_scanf_float+0x6e>
 8014464:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014468:	6022      	str	r2, [r4, #0]
 801446a:	2501      	movs	r5, #1
 801446c:	e7c0      	b.n	80143f0 <_scanf_float+0x188>
 801446e:	2d03      	cmp	r5, #3
 8014470:	d0e2      	beq.n	8014438 <_scanf_float+0x1d0>
 8014472:	2d05      	cmp	r5, #5
 8014474:	e7de      	b.n	8014434 <_scanf_float+0x1cc>
 8014476:	2d02      	cmp	r5, #2
 8014478:	f47f af26 	bne.w	80142c8 <_scanf_float+0x60>
 801447c:	2503      	movs	r5, #3
 801447e:	e7b7      	b.n	80143f0 <_scanf_float+0x188>
 8014480:	2d06      	cmp	r5, #6
 8014482:	f47f af21 	bne.w	80142c8 <_scanf_float+0x60>
 8014486:	2507      	movs	r5, #7
 8014488:	e7b2      	b.n	80143f0 <_scanf_float+0x188>
 801448a:	6822      	ldr	r2, [r4, #0]
 801448c:	0591      	lsls	r1, r2, #22
 801448e:	f57f af1b 	bpl.w	80142c8 <_scanf_float+0x60>
 8014492:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014496:	6022      	str	r2, [r4, #0]
 8014498:	f8cd 9004 	str.w	r9, [sp, #4]
 801449c:	e7a8      	b.n	80143f0 <_scanf_float+0x188>
 801449e:	6822      	ldr	r2, [r4, #0]
 80144a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80144a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80144a8:	d006      	beq.n	80144b8 <_scanf_float+0x250>
 80144aa:	0550      	lsls	r0, r2, #21
 80144ac:	f57f af0c 	bpl.w	80142c8 <_scanf_float+0x60>
 80144b0:	f1b9 0f00 	cmp.w	r9, #0
 80144b4:	f43f af0f 	beq.w	80142d6 <_scanf_float+0x6e>
 80144b8:	0591      	lsls	r1, r2, #22
 80144ba:	bf58      	it	pl
 80144bc:	9901      	ldrpl	r1, [sp, #4]
 80144be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80144c2:	bf58      	it	pl
 80144c4:	eba9 0101 	subpl.w	r1, r9, r1
 80144c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80144cc:	bf58      	it	pl
 80144ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80144d2:	6022      	str	r2, [r4, #0]
 80144d4:	f04f 0900 	mov.w	r9, #0
 80144d8:	e78a      	b.n	80143f0 <_scanf_float+0x188>
 80144da:	f04f 0a03 	mov.w	sl, #3
 80144de:	e787      	b.n	80143f0 <_scanf_float+0x188>
 80144e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80144e4:	4639      	mov	r1, r7
 80144e6:	4640      	mov	r0, r8
 80144e8:	4798      	blx	r3
 80144ea:	2800      	cmp	r0, #0
 80144ec:	f43f aedf 	beq.w	80142ae <_scanf_float+0x46>
 80144f0:	e6ea      	b.n	80142c8 <_scanf_float+0x60>
 80144f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144fa:	463a      	mov	r2, r7
 80144fc:	4640      	mov	r0, r8
 80144fe:	4798      	blx	r3
 8014500:	6923      	ldr	r3, [r4, #16]
 8014502:	3b01      	subs	r3, #1
 8014504:	6123      	str	r3, [r4, #16]
 8014506:	e6ec      	b.n	80142e2 <_scanf_float+0x7a>
 8014508:	1e6b      	subs	r3, r5, #1
 801450a:	2b06      	cmp	r3, #6
 801450c:	d825      	bhi.n	801455a <_scanf_float+0x2f2>
 801450e:	2d02      	cmp	r5, #2
 8014510:	d836      	bhi.n	8014580 <_scanf_float+0x318>
 8014512:	455e      	cmp	r6, fp
 8014514:	f67f aee8 	bls.w	80142e8 <_scanf_float+0x80>
 8014518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801451c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014520:	463a      	mov	r2, r7
 8014522:	4640      	mov	r0, r8
 8014524:	4798      	blx	r3
 8014526:	6923      	ldr	r3, [r4, #16]
 8014528:	3b01      	subs	r3, #1
 801452a:	6123      	str	r3, [r4, #16]
 801452c:	e7f1      	b.n	8014512 <_scanf_float+0x2aa>
 801452e:	9802      	ldr	r0, [sp, #8]
 8014530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014534:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014538:	9002      	str	r0, [sp, #8]
 801453a:	463a      	mov	r2, r7
 801453c:	4640      	mov	r0, r8
 801453e:	4798      	blx	r3
 8014540:	6923      	ldr	r3, [r4, #16]
 8014542:	3b01      	subs	r3, #1
 8014544:	6123      	str	r3, [r4, #16]
 8014546:	f10a 3aff 	add.w	sl, sl, #4294967295
 801454a:	fa5f fa8a 	uxtb.w	sl, sl
 801454e:	f1ba 0f02 	cmp.w	sl, #2
 8014552:	d1ec      	bne.n	801452e <_scanf_float+0x2c6>
 8014554:	3d03      	subs	r5, #3
 8014556:	b2ed      	uxtb	r5, r5
 8014558:	1b76      	subs	r6, r6, r5
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	05da      	lsls	r2, r3, #23
 801455e:	d52f      	bpl.n	80145c0 <_scanf_float+0x358>
 8014560:	055b      	lsls	r3, r3, #21
 8014562:	d510      	bpl.n	8014586 <_scanf_float+0x31e>
 8014564:	455e      	cmp	r6, fp
 8014566:	f67f aebf 	bls.w	80142e8 <_scanf_float+0x80>
 801456a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801456e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014572:	463a      	mov	r2, r7
 8014574:	4640      	mov	r0, r8
 8014576:	4798      	blx	r3
 8014578:	6923      	ldr	r3, [r4, #16]
 801457a:	3b01      	subs	r3, #1
 801457c:	6123      	str	r3, [r4, #16]
 801457e:	e7f1      	b.n	8014564 <_scanf_float+0x2fc>
 8014580:	46aa      	mov	sl, r5
 8014582:	9602      	str	r6, [sp, #8]
 8014584:	e7df      	b.n	8014546 <_scanf_float+0x2de>
 8014586:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801458a:	6923      	ldr	r3, [r4, #16]
 801458c:	2965      	cmp	r1, #101	; 0x65
 801458e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014592:	f106 35ff 	add.w	r5, r6, #4294967295
 8014596:	6123      	str	r3, [r4, #16]
 8014598:	d00c      	beq.n	80145b4 <_scanf_float+0x34c>
 801459a:	2945      	cmp	r1, #69	; 0x45
 801459c:	d00a      	beq.n	80145b4 <_scanf_float+0x34c>
 801459e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145a2:	463a      	mov	r2, r7
 80145a4:	4640      	mov	r0, r8
 80145a6:	4798      	blx	r3
 80145a8:	6923      	ldr	r3, [r4, #16]
 80145aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80145ae:	3b01      	subs	r3, #1
 80145b0:	1eb5      	subs	r5, r6, #2
 80145b2:	6123      	str	r3, [r4, #16]
 80145b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145b8:	463a      	mov	r2, r7
 80145ba:	4640      	mov	r0, r8
 80145bc:	4798      	blx	r3
 80145be:	462e      	mov	r6, r5
 80145c0:	6825      	ldr	r5, [r4, #0]
 80145c2:	f015 0510 	ands.w	r5, r5, #16
 80145c6:	d158      	bne.n	801467a <_scanf_float+0x412>
 80145c8:	7035      	strb	r5, [r6, #0]
 80145ca:	6823      	ldr	r3, [r4, #0]
 80145cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80145d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80145d4:	d11c      	bne.n	8014610 <_scanf_float+0x3a8>
 80145d6:	9b01      	ldr	r3, [sp, #4]
 80145d8:	454b      	cmp	r3, r9
 80145da:	eba3 0209 	sub.w	r2, r3, r9
 80145de:	d124      	bne.n	801462a <_scanf_float+0x3c2>
 80145e0:	2200      	movs	r2, #0
 80145e2:	4659      	mov	r1, fp
 80145e4:	4640      	mov	r0, r8
 80145e6:	f002 fc2b 	bl	8016e40 <_strtod_r>
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	6821      	ldr	r1, [r4, #0]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f011 0f02 	tst.w	r1, #2
 80145f4:	ec57 6b10 	vmov	r6, r7, d0
 80145f8:	f103 0204 	add.w	r2, r3, #4
 80145fc:	d020      	beq.n	8014640 <_scanf_float+0x3d8>
 80145fe:	9903      	ldr	r1, [sp, #12]
 8014600:	600a      	str	r2, [r1, #0]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	e9c3 6700 	strd	r6, r7, [r3]
 8014608:	68e3      	ldr	r3, [r4, #12]
 801460a:	3301      	adds	r3, #1
 801460c:	60e3      	str	r3, [r4, #12]
 801460e:	e66c      	b.n	80142ea <_scanf_float+0x82>
 8014610:	9b04      	ldr	r3, [sp, #16]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d0e4      	beq.n	80145e0 <_scanf_float+0x378>
 8014616:	9905      	ldr	r1, [sp, #20]
 8014618:	230a      	movs	r3, #10
 801461a:	462a      	mov	r2, r5
 801461c:	3101      	adds	r1, #1
 801461e:	4640      	mov	r0, r8
 8014620:	f002 fc96 	bl	8016f50 <_strtol_r>
 8014624:	9b04      	ldr	r3, [sp, #16]
 8014626:	9e05      	ldr	r6, [sp, #20]
 8014628:	1ac2      	subs	r2, r0, r3
 801462a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801462e:	429e      	cmp	r6, r3
 8014630:	bf28      	it	cs
 8014632:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014636:	4912      	ldr	r1, [pc, #72]	; (8014680 <_scanf_float+0x418>)
 8014638:	4630      	mov	r0, r6
 801463a:	f000 f8f9 	bl	8014830 <siprintf>
 801463e:	e7cf      	b.n	80145e0 <_scanf_float+0x378>
 8014640:	f011 0f04 	tst.w	r1, #4
 8014644:	9903      	ldr	r1, [sp, #12]
 8014646:	600a      	str	r2, [r1, #0]
 8014648:	d1db      	bne.n	8014602 <_scanf_float+0x39a>
 801464a:	f8d3 8000 	ldr.w	r8, [r3]
 801464e:	ee10 2a10 	vmov	r2, s0
 8014652:	ee10 0a10 	vmov	r0, s0
 8014656:	463b      	mov	r3, r7
 8014658:	4639      	mov	r1, r7
 801465a:	f7ec fa8f 	bl	8000b7c <__aeabi_dcmpun>
 801465e:	b128      	cbz	r0, 801466c <_scanf_float+0x404>
 8014660:	4808      	ldr	r0, [pc, #32]	; (8014684 <_scanf_float+0x41c>)
 8014662:	f000 fa67 	bl	8014b34 <nanf>
 8014666:	ed88 0a00 	vstr	s0, [r8]
 801466a:	e7cd      	b.n	8014608 <_scanf_float+0x3a0>
 801466c:	4630      	mov	r0, r6
 801466e:	4639      	mov	r1, r7
 8014670:	f7ec fae2 	bl	8000c38 <__aeabi_d2f>
 8014674:	f8c8 0000 	str.w	r0, [r8]
 8014678:	e7c6      	b.n	8014608 <_scanf_float+0x3a0>
 801467a:	2500      	movs	r5, #0
 801467c:	e635      	b.n	80142ea <_scanf_float+0x82>
 801467e:	bf00      	nop
 8014680:	080191e8 	.word	0x080191e8
 8014684:	080191b3 	.word	0x080191b3

08014688 <std>:
 8014688:	2300      	movs	r3, #0
 801468a:	b510      	push	{r4, lr}
 801468c:	4604      	mov	r4, r0
 801468e:	e9c0 3300 	strd	r3, r3, [r0]
 8014692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014696:	6083      	str	r3, [r0, #8]
 8014698:	8181      	strh	r1, [r0, #12]
 801469a:	6643      	str	r3, [r0, #100]	; 0x64
 801469c:	81c2      	strh	r2, [r0, #14]
 801469e:	6183      	str	r3, [r0, #24]
 80146a0:	4619      	mov	r1, r3
 80146a2:	2208      	movs	r2, #8
 80146a4:	305c      	adds	r0, #92	; 0x5c
 80146a6:	f000 f950 	bl	801494a <memset>
 80146aa:	4b0d      	ldr	r3, [pc, #52]	; (80146e0 <std+0x58>)
 80146ac:	6263      	str	r3, [r4, #36]	; 0x24
 80146ae:	4b0d      	ldr	r3, [pc, #52]	; (80146e4 <std+0x5c>)
 80146b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80146b2:	4b0d      	ldr	r3, [pc, #52]	; (80146e8 <std+0x60>)
 80146b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146b6:	4b0d      	ldr	r3, [pc, #52]	; (80146ec <std+0x64>)
 80146b8:	6323      	str	r3, [r4, #48]	; 0x30
 80146ba:	4b0d      	ldr	r3, [pc, #52]	; (80146f0 <std+0x68>)
 80146bc:	6224      	str	r4, [r4, #32]
 80146be:	429c      	cmp	r4, r3
 80146c0:	d006      	beq.n	80146d0 <std+0x48>
 80146c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80146c6:	4294      	cmp	r4, r2
 80146c8:	d002      	beq.n	80146d0 <std+0x48>
 80146ca:	33d0      	adds	r3, #208	; 0xd0
 80146cc:	429c      	cmp	r4, r3
 80146ce:	d105      	bne.n	80146dc <std+0x54>
 80146d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80146d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146d8:	f000 ba1a 	b.w	8014b10 <__retarget_lock_init_recursive>
 80146dc:	bd10      	pop	{r4, pc}
 80146de:	bf00      	nop
 80146e0:	08014871 	.word	0x08014871
 80146e4:	08014893 	.word	0x08014893
 80146e8:	080148cb 	.word	0x080148cb
 80146ec:	080148ef 	.word	0x080148ef
 80146f0:	200009ac 	.word	0x200009ac

080146f4 <stdio_exit_handler>:
 80146f4:	4a02      	ldr	r2, [pc, #8]	; (8014700 <stdio_exit_handler+0xc>)
 80146f6:	4903      	ldr	r1, [pc, #12]	; (8014704 <stdio_exit_handler+0x10>)
 80146f8:	4803      	ldr	r0, [pc, #12]	; (8014708 <stdio_exit_handler+0x14>)
 80146fa:	f000 b87b 	b.w	80147f4 <_fwalk_sglue>
 80146fe:	bf00      	nop
 8014700:	20000084 	.word	0x20000084
 8014704:	08017599 	.word	0x08017599
 8014708:	20000090 	.word	0x20000090

0801470c <cleanup_stdio>:
 801470c:	6841      	ldr	r1, [r0, #4]
 801470e:	4b0c      	ldr	r3, [pc, #48]	; (8014740 <cleanup_stdio+0x34>)
 8014710:	4299      	cmp	r1, r3
 8014712:	b510      	push	{r4, lr}
 8014714:	4604      	mov	r4, r0
 8014716:	d001      	beq.n	801471c <cleanup_stdio+0x10>
 8014718:	f002 ff3e 	bl	8017598 <_fflush_r>
 801471c:	68a1      	ldr	r1, [r4, #8]
 801471e:	4b09      	ldr	r3, [pc, #36]	; (8014744 <cleanup_stdio+0x38>)
 8014720:	4299      	cmp	r1, r3
 8014722:	d002      	beq.n	801472a <cleanup_stdio+0x1e>
 8014724:	4620      	mov	r0, r4
 8014726:	f002 ff37 	bl	8017598 <_fflush_r>
 801472a:	68e1      	ldr	r1, [r4, #12]
 801472c:	4b06      	ldr	r3, [pc, #24]	; (8014748 <cleanup_stdio+0x3c>)
 801472e:	4299      	cmp	r1, r3
 8014730:	d004      	beq.n	801473c <cleanup_stdio+0x30>
 8014732:	4620      	mov	r0, r4
 8014734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014738:	f002 bf2e 	b.w	8017598 <_fflush_r>
 801473c:	bd10      	pop	{r4, pc}
 801473e:	bf00      	nop
 8014740:	200009ac 	.word	0x200009ac
 8014744:	20000a14 	.word	0x20000a14
 8014748:	20000a7c 	.word	0x20000a7c

0801474c <global_stdio_init.part.0>:
 801474c:	b510      	push	{r4, lr}
 801474e:	4b0b      	ldr	r3, [pc, #44]	; (801477c <global_stdio_init.part.0+0x30>)
 8014750:	4c0b      	ldr	r4, [pc, #44]	; (8014780 <global_stdio_init.part.0+0x34>)
 8014752:	4a0c      	ldr	r2, [pc, #48]	; (8014784 <global_stdio_init.part.0+0x38>)
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	4620      	mov	r0, r4
 8014758:	2200      	movs	r2, #0
 801475a:	2104      	movs	r1, #4
 801475c:	f7ff ff94 	bl	8014688 <std>
 8014760:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014764:	2201      	movs	r2, #1
 8014766:	2109      	movs	r1, #9
 8014768:	f7ff ff8e 	bl	8014688 <std>
 801476c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014770:	2202      	movs	r2, #2
 8014772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014776:	2112      	movs	r1, #18
 8014778:	f7ff bf86 	b.w	8014688 <std>
 801477c:	20000ae4 	.word	0x20000ae4
 8014780:	200009ac 	.word	0x200009ac
 8014784:	080146f5 	.word	0x080146f5

08014788 <__sfp_lock_acquire>:
 8014788:	4801      	ldr	r0, [pc, #4]	; (8014790 <__sfp_lock_acquire+0x8>)
 801478a:	f000 b9c2 	b.w	8014b12 <__retarget_lock_acquire_recursive>
 801478e:	bf00      	nop
 8014790:	20000aed 	.word	0x20000aed

08014794 <__sfp_lock_release>:
 8014794:	4801      	ldr	r0, [pc, #4]	; (801479c <__sfp_lock_release+0x8>)
 8014796:	f000 b9bd 	b.w	8014b14 <__retarget_lock_release_recursive>
 801479a:	bf00      	nop
 801479c:	20000aed 	.word	0x20000aed

080147a0 <__sinit>:
 80147a0:	b510      	push	{r4, lr}
 80147a2:	4604      	mov	r4, r0
 80147a4:	f7ff fff0 	bl	8014788 <__sfp_lock_acquire>
 80147a8:	6a23      	ldr	r3, [r4, #32]
 80147aa:	b11b      	cbz	r3, 80147b4 <__sinit+0x14>
 80147ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147b0:	f7ff bff0 	b.w	8014794 <__sfp_lock_release>
 80147b4:	4b04      	ldr	r3, [pc, #16]	; (80147c8 <__sinit+0x28>)
 80147b6:	6223      	str	r3, [r4, #32]
 80147b8:	4b04      	ldr	r3, [pc, #16]	; (80147cc <__sinit+0x2c>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d1f5      	bne.n	80147ac <__sinit+0xc>
 80147c0:	f7ff ffc4 	bl	801474c <global_stdio_init.part.0>
 80147c4:	e7f2      	b.n	80147ac <__sinit+0xc>
 80147c6:	bf00      	nop
 80147c8:	0801470d 	.word	0x0801470d
 80147cc:	20000ae4 	.word	0x20000ae4

080147d0 <fiprintf>:
 80147d0:	b40e      	push	{r1, r2, r3}
 80147d2:	b503      	push	{r0, r1, lr}
 80147d4:	4601      	mov	r1, r0
 80147d6:	ab03      	add	r3, sp, #12
 80147d8:	4805      	ldr	r0, [pc, #20]	; (80147f0 <fiprintf+0x20>)
 80147da:	f853 2b04 	ldr.w	r2, [r3], #4
 80147de:	6800      	ldr	r0, [r0, #0]
 80147e0:	9301      	str	r3, [sp, #4]
 80147e2:	f002 fd39 	bl	8017258 <_vfiprintf_r>
 80147e6:	b002      	add	sp, #8
 80147e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80147ec:	b003      	add	sp, #12
 80147ee:	4770      	bx	lr
 80147f0:	200000dc 	.word	0x200000dc

080147f4 <_fwalk_sglue>:
 80147f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147f8:	4607      	mov	r7, r0
 80147fa:	4688      	mov	r8, r1
 80147fc:	4614      	mov	r4, r2
 80147fe:	2600      	movs	r6, #0
 8014800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014804:	f1b9 0901 	subs.w	r9, r9, #1
 8014808:	d505      	bpl.n	8014816 <_fwalk_sglue+0x22>
 801480a:	6824      	ldr	r4, [r4, #0]
 801480c:	2c00      	cmp	r4, #0
 801480e:	d1f7      	bne.n	8014800 <_fwalk_sglue+0xc>
 8014810:	4630      	mov	r0, r6
 8014812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014816:	89ab      	ldrh	r3, [r5, #12]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d907      	bls.n	801482c <_fwalk_sglue+0x38>
 801481c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014820:	3301      	adds	r3, #1
 8014822:	d003      	beq.n	801482c <_fwalk_sglue+0x38>
 8014824:	4629      	mov	r1, r5
 8014826:	4638      	mov	r0, r7
 8014828:	47c0      	blx	r8
 801482a:	4306      	orrs	r6, r0
 801482c:	3568      	adds	r5, #104	; 0x68
 801482e:	e7e9      	b.n	8014804 <_fwalk_sglue+0x10>

08014830 <siprintf>:
 8014830:	b40e      	push	{r1, r2, r3}
 8014832:	b500      	push	{lr}
 8014834:	b09c      	sub	sp, #112	; 0x70
 8014836:	ab1d      	add	r3, sp, #116	; 0x74
 8014838:	9002      	str	r0, [sp, #8]
 801483a:	9006      	str	r0, [sp, #24]
 801483c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014840:	4809      	ldr	r0, [pc, #36]	; (8014868 <siprintf+0x38>)
 8014842:	9107      	str	r1, [sp, #28]
 8014844:	9104      	str	r1, [sp, #16]
 8014846:	4909      	ldr	r1, [pc, #36]	; (801486c <siprintf+0x3c>)
 8014848:	f853 2b04 	ldr.w	r2, [r3], #4
 801484c:	9105      	str	r1, [sp, #20]
 801484e:	6800      	ldr	r0, [r0, #0]
 8014850:	9301      	str	r3, [sp, #4]
 8014852:	a902      	add	r1, sp, #8
 8014854:	f002 fbd8 	bl	8017008 <_svfiprintf_r>
 8014858:	9b02      	ldr	r3, [sp, #8]
 801485a:	2200      	movs	r2, #0
 801485c:	701a      	strb	r2, [r3, #0]
 801485e:	b01c      	add	sp, #112	; 0x70
 8014860:	f85d eb04 	ldr.w	lr, [sp], #4
 8014864:	b003      	add	sp, #12
 8014866:	4770      	bx	lr
 8014868:	200000dc 	.word	0x200000dc
 801486c:	ffff0208 	.word	0xffff0208

08014870 <__sread>:
 8014870:	b510      	push	{r4, lr}
 8014872:	460c      	mov	r4, r1
 8014874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014878:	f000 f8d8 	bl	8014a2c <_read_r>
 801487c:	2800      	cmp	r0, #0
 801487e:	bfab      	itete	ge
 8014880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014882:	89a3      	ldrhlt	r3, [r4, #12]
 8014884:	181b      	addge	r3, r3, r0
 8014886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801488a:	bfac      	ite	ge
 801488c:	6563      	strge	r3, [r4, #84]	; 0x54
 801488e:	81a3      	strhlt	r3, [r4, #12]
 8014890:	bd10      	pop	{r4, pc}

08014892 <__swrite>:
 8014892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014896:	461f      	mov	r7, r3
 8014898:	898b      	ldrh	r3, [r1, #12]
 801489a:	05db      	lsls	r3, r3, #23
 801489c:	4605      	mov	r5, r0
 801489e:	460c      	mov	r4, r1
 80148a0:	4616      	mov	r6, r2
 80148a2:	d505      	bpl.n	80148b0 <__swrite+0x1e>
 80148a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148a8:	2302      	movs	r3, #2
 80148aa:	2200      	movs	r2, #0
 80148ac:	f000 f8ac 	bl	8014a08 <_lseek_r>
 80148b0:	89a3      	ldrh	r3, [r4, #12]
 80148b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80148ba:	81a3      	strh	r3, [r4, #12]
 80148bc:	4632      	mov	r2, r6
 80148be:	463b      	mov	r3, r7
 80148c0:	4628      	mov	r0, r5
 80148c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148c6:	f000 b8e7 	b.w	8014a98 <_write_r>

080148ca <__sseek>:
 80148ca:	b510      	push	{r4, lr}
 80148cc:	460c      	mov	r4, r1
 80148ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148d2:	f000 f899 	bl	8014a08 <_lseek_r>
 80148d6:	1c43      	adds	r3, r0, #1
 80148d8:	89a3      	ldrh	r3, [r4, #12]
 80148da:	bf15      	itete	ne
 80148dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80148de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80148e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80148e6:	81a3      	strheq	r3, [r4, #12]
 80148e8:	bf18      	it	ne
 80148ea:	81a3      	strhne	r3, [r4, #12]
 80148ec:	bd10      	pop	{r4, pc}

080148ee <__sclose>:
 80148ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148f2:	f000 b879 	b.w	80149e8 <_close_r>

080148f6 <memcmp>:
 80148f6:	b510      	push	{r4, lr}
 80148f8:	3901      	subs	r1, #1
 80148fa:	4402      	add	r2, r0
 80148fc:	4290      	cmp	r0, r2
 80148fe:	d101      	bne.n	8014904 <memcmp+0xe>
 8014900:	2000      	movs	r0, #0
 8014902:	e005      	b.n	8014910 <memcmp+0x1a>
 8014904:	7803      	ldrb	r3, [r0, #0]
 8014906:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801490a:	42a3      	cmp	r3, r4
 801490c:	d001      	beq.n	8014912 <memcmp+0x1c>
 801490e:	1b18      	subs	r0, r3, r4
 8014910:	bd10      	pop	{r4, pc}
 8014912:	3001      	adds	r0, #1
 8014914:	e7f2      	b.n	80148fc <memcmp+0x6>

08014916 <memmove>:
 8014916:	4288      	cmp	r0, r1
 8014918:	b510      	push	{r4, lr}
 801491a:	eb01 0402 	add.w	r4, r1, r2
 801491e:	d902      	bls.n	8014926 <memmove+0x10>
 8014920:	4284      	cmp	r4, r0
 8014922:	4623      	mov	r3, r4
 8014924:	d807      	bhi.n	8014936 <memmove+0x20>
 8014926:	1e43      	subs	r3, r0, #1
 8014928:	42a1      	cmp	r1, r4
 801492a:	d008      	beq.n	801493e <memmove+0x28>
 801492c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014930:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014934:	e7f8      	b.n	8014928 <memmove+0x12>
 8014936:	4402      	add	r2, r0
 8014938:	4601      	mov	r1, r0
 801493a:	428a      	cmp	r2, r1
 801493c:	d100      	bne.n	8014940 <memmove+0x2a>
 801493e:	bd10      	pop	{r4, pc}
 8014940:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014944:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014948:	e7f7      	b.n	801493a <memmove+0x24>

0801494a <memset>:
 801494a:	4402      	add	r2, r0
 801494c:	4603      	mov	r3, r0
 801494e:	4293      	cmp	r3, r2
 8014950:	d100      	bne.n	8014954 <memset+0xa>
 8014952:	4770      	bx	lr
 8014954:	f803 1b01 	strb.w	r1, [r3], #1
 8014958:	e7f9      	b.n	801494e <memset+0x4>

0801495a <strncpy>:
 801495a:	b510      	push	{r4, lr}
 801495c:	3901      	subs	r1, #1
 801495e:	4603      	mov	r3, r0
 8014960:	b132      	cbz	r2, 8014970 <strncpy+0x16>
 8014962:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014966:	f803 4b01 	strb.w	r4, [r3], #1
 801496a:	3a01      	subs	r2, #1
 801496c:	2c00      	cmp	r4, #0
 801496e:	d1f7      	bne.n	8014960 <strncpy+0x6>
 8014970:	441a      	add	r2, r3
 8014972:	2100      	movs	r1, #0
 8014974:	4293      	cmp	r3, r2
 8014976:	d100      	bne.n	801497a <strncpy+0x20>
 8014978:	bd10      	pop	{r4, pc}
 801497a:	f803 1b01 	strb.w	r1, [r3], #1
 801497e:	e7f9      	b.n	8014974 <strncpy+0x1a>

08014980 <_raise_r>:
 8014980:	291f      	cmp	r1, #31
 8014982:	b538      	push	{r3, r4, r5, lr}
 8014984:	4604      	mov	r4, r0
 8014986:	460d      	mov	r5, r1
 8014988:	d904      	bls.n	8014994 <_raise_r+0x14>
 801498a:	2316      	movs	r3, #22
 801498c:	6003      	str	r3, [r0, #0]
 801498e:	f04f 30ff 	mov.w	r0, #4294967295
 8014992:	bd38      	pop	{r3, r4, r5, pc}
 8014994:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014996:	b112      	cbz	r2, 801499e <_raise_r+0x1e>
 8014998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801499c:	b94b      	cbnz	r3, 80149b2 <_raise_r+0x32>
 801499e:	4620      	mov	r0, r4
 80149a0:	f000 f868 	bl	8014a74 <_getpid_r>
 80149a4:	462a      	mov	r2, r5
 80149a6:	4601      	mov	r1, r0
 80149a8:	4620      	mov	r0, r4
 80149aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149ae:	f000 b84f 	b.w	8014a50 <_kill_r>
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d00a      	beq.n	80149cc <_raise_r+0x4c>
 80149b6:	1c59      	adds	r1, r3, #1
 80149b8:	d103      	bne.n	80149c2 <_raise_r+0x42>
 80149ba:	2316      	movs	r3, #22
 80149bc:	6003      	str	r3, [r0, #0]
 80149be:	2001      	movs	r0, #1
 80149c0:	e7e7      	b.n	8014992 <_raise_r+0x12>
 80149c2:	2400      	movs	r4, #0
 80149c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80149c8:	4628      	mov	r0, r5
 80149ca:	4798      	blx	r3
 80149cc:	2000      	movs	r0, #0
 80149ce:	e7e0      	b.n	8014992 <_raise_r+0x12>

080149d0 <raise>:
 80149d0:	4b02      	ldr	r3, [pc, #8]	; (80149dc <raise+0xc>)
 80149d2:	4601      	mov	r1, r0
 80149d4:	6818      	ldr	r0, [r3, #0]
 80149d6:	f7ff bfd3 	b.w	8014980 <_raise_r>
 80149da:	bf00      	nop
 80149dc:	200000dc 	.word	0x200000dc

080149e0 <_localeconv_r>:
 80149e0:	4800      	ldr	r0, [pc, #0]	; (80149e4 <_localeconv_r+0x4>)
 80149e2:	4770      	bx	lr
 80149e4:	200001d0 	.word	0x200001d0

080149e8 <_close_r>:
 80149e8:	b538      	push	{r3, r4, r5, lr}
 80149ea:	4d06      	ldr	r5, [pc, #24]	; (8014a04 <_close_r+0x1c>)
 80149ec:	2300      	movs	r3, #0
 80149ee:	4604      	mov	r4, r0
 80149f0:	4608      	mov	r0, r1
 80149f2:	602b      	str	r3, [r5, #0]
 80149f4:	f7f4 ff47 	bl	8009886 <_close>
 80149f8:	1c43      	adds	r3, r0, #1
 80149fa:	d102      	bne.n	8014a02 <_close_r+0x1a>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b103      	cbz	r3, 8014a02 <_close_r+0x1a>
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	20000ae8 	.word	0x20000ae8

08014a08 <_lseek_r>:
 8014a08:	b538      	push	{r3, r4, r5, lr}
 8014a0a:	4d07      	ldr	r5, [pc, #28]	; (8014a28 <_lseek_r+0x20>)
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	4608      	mov	r0, r1
 8014a10:	4611      	mov	r1, r2
 8014a12:	2200      	movs	r2, #0
 8014a14:	602a      	str	r2, [r5, #0]
 8014a16:	461a      	mov	r2, r3
 8014a18:	f7f4 ff5c 	bl	80098d4 <_lseek>
 8014a1c:	1c43      	adds	r3, r0, #1
 8014a1e:	d102      	bne.n	8014a26 <_lseek_r+0x1e>
 8014a20:	682b      	ldr	r3, [r5, #0]
 8014a22:	b103      	cbz	r3, 8014a26 <_lseek_r+0x1e>
 8014a24:	6023      	str	r3, [r4, #0]
 8014a26:	bd38      	pop	{r3, r4, r5, pc}
 8014a28:	20000ae8 	.word	0x20000ae8

08014a2c <_read_r>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	4d07      	ldr	r5, [pc, #28]	; (8014a4c <_read_r+0x20>)
 8014a30:	4604      	mov	r4, r0
 8014a32:	4608      	mov	r0, r1
 8014a34:	4611      	mov	r1, r2
 8014a36:	2200      	movs	r2, #0
 8014a38:	602a      	str	r2, [r5, #0]
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	f7f4 feea 	bl	8009814 <_read>
 8014a40:	1c43      	adds	r3, r0, #1
 8014a42:	d102      	bne.n	8014a4a <_read_r+0x1e>
 8014a44:	682b      	ldr	r3, [r5, #0]
 8014a46:	b103      	cbz	r3, 8014a4a <_read_r+0x1e>
 8014a48:	6023      	str	r3, [r4, #0]
 8014a4a:	bd38      	pop	{r3, r4, r5, pc}
 8014a4c:	20000ae8 	.word	0x20000ae8

08014a50 <_kill_r>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	4d07      	ldr	r5, [pc, #28]	; (8014a70 <_kill_r+0x20>)
 8014a54:	2300      	movs	r3, #0
 8014a56:	4604      	mov	r4, r0
 8014a58:	4608      	mov	r0, r1
 8014a5a:	4611      	mov	r1, r2
 8014a5c:	602b      	str	r3, [r5, #0]
 8014a5e:	f7f4 febf 	bl	80097e0 <_kill>
 8014a62:	1c43      	adds	r3, r0, #1
 8014a64:	d102      	bne.n	8014a6c <_kill_r+0x1c>
 8014a66:	682b      	ldr	r3, [r5, #0]
 8014a68:	b103      	cbz	r3, 8014a6c <_kill_r+0x1c>
 8014a6a:	6023      	str	r3, [r4, #0]
 8014a6c:	bd38      	pop	{r3, r4, r5, pc}
 8014a6e:	bf00      	nop
 8014a70:	20000ae8 	.word	0x20000ae8

08014a74 <_getpid_r>:
 8014a74:	f7f4 beac 	b.w	80097d0 <_getpid>

08014a78 <_sbrk_r>:
 8014a78:	b538      	push	{r3, r4, r5, lr}
 8014a7a:	4d06      	ldr	r5, [pc, #24]	; (8014a94 <_sbrk_r+0x1c>)
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	4604      	mov	r4, r0
 8014a80:	4608      	mov	r0, r1
 8014a82:	602b      	str	r3, [r5, #0]
 8014a84:	f7f4 ff34 	bl	80098f0 <_sbrk>
 8014a88:	1c43      	adds	r3, r0, #1
 8014a8a:	d102      	bne.n	8014a92 <_sbrk_r+0x1a>
 8014a8c:	682b      	ldr	r3, [r5, #0]
 8014a8e:	b103      	cbz	r3, 8014a92 <_sbrk_r+0x1a>
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	bd38      	pop	{r3, r4, r5, pc}
 8014a94:	20000ae8 	.word	0x20000ae8

08014a98 <_write_r>:
 8014a98:	b538      	push	{r3, r4, r5, lr}
 8014a9a:	4d07      	ldr	r5, [pc, #28]	; (8014ab8 <_write_r+0x20>)
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	4608      	mov	r0, r1
 8014aa0:	4611      	mov	r1, r2
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	602a      	str	r2, [r5, #0]
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	f7f4 fed1 	bl	800984e <_write>
 8014aac:	1c43      	adds	r3, r0, #1
 8014aae:	d102      	bne.n	8014ab6 <_write_r+0x1e>
 8014ab0:	682b      	ldr	r3, [r5, #0]
 8014ab2:	b103      	cbz	r3, 8014ab6 <_write_r+0x1e>
 8014ab4:	6023      	str	r3, [r4, #0]
 8014ab6:	bd38      	pop	{r3, r4, r5, pc}
 8014ab8:	20000ae8 	.word	0x20000ae8

08014abc <__errno>:
 8014abc:	4b01      	ldr	r3, [pc, #4]	; (8014ac4 <__errno+0x8>)
 8014abe:	6818      	ldr	r0, [r3, #0]
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop
 8014ac4:	200000dc 	.word	0x200000dc

08014ac8 <__libc_init_array>:
 8014ac8:	b570      	push	{r4, r5, r6, lr}
 8014aca:	4d0d      	ldr	r5, [pc, #52]	; (8014b00 <__libc_init_array+0x38>)
 8014acc:	4c0d      	ldr	r4, [pc, #52]	; (8014b04 <__libc_init_array+0x3c>)
 8014ace:	1b64      	subs	r4, r4, r5
 8014ad0:	10a4      	asrs	r4, r4, #2
 8014ad2:	2600      	movs	r6, #0
 8014ad4:	42a6      	cmp	r6, r4
 8014ad6:	d109      	bne.n	8014aec <__libc_init_array+0x24>
 8014ad8:	4d0b      	ldr	r5, [pc, #44]	; (8014b08 <__libc_init_array+0x40>)
 8014ada:	4c0c      	ldr	r4, [pc, #48]	; (8014b0c <__libc_init_array+0x44>)
 8014adc:	f003 fa7c 	bl	8017fd8 <_init>
 8014ae0:	1b64      	subs	r4, r4, r5
 8014ae2:	10a4      	asrs	r4, r4, #2
 8014ae4:	2600      	movs	r6, #0
 8014ae6:	42a6      	cmp	r6, r4
 8014ae8:	d105      	bne.n	8014af6 <__libc_init_array+0x2e>
 8014aea:	bd70      	pop	{r4, r5, r6, pc}
 8014aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8014af0:	4798      	blx	r3
 8014af2:	3601      	adds	r6, #1
 8014af4:	e7ee      	b.n	8014ad4 <__libc_init_array+0xc>
 8014af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014afa:	4798      	blx	r3
 8014afc:	3601      	adds	r6, #1
 8014afe:	e7f2      	b.n	8014ae6 <__libc_init_array+0x1e>
 8014b00:	080195ac 	.word	0x080195ac
 8014b04:	080195ac 	.word	0x080195ac
 8014b08:	080195ac 	.word	0x080195ac
 8014b0c:	080195bc 	.word	0x080195bc

08014b10 <__retarget_lock_init_recursive>:
 8014b10:	4770      	bx	lr

08014b12 <__retarget_lock_acquire_recursive>:
 8014b12:	4770      	bx	lr

08014b14 <__retarget_lock_release_recursive>:
 8014b14:	4770      	bx	lr

08014b16 <memcpy>:
 8014b16:	440a      	add	r2, r1
 8014b18:	4291      	cmp	r1, r2
 8014b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b1e:	d100      	bne.n	8014b22 <memcpy+0xc>
 8014b20:	4770      	bx	lr
 8014b22:	b510      	push	{r4, lr}
 8014b24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b2c:	4291      	cmp	r1, r2
 8014b2e:	d1f9      	bne.n	8014b24 <memcpy+0xe>
 8014b30:	bd10      	pop	{r4, pc}
	...

08014b34 <nanf>:
 8014b34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014b3c <nanf+0x8>
 8014b38:	4770      	bx	lr
 8014b3a:	bf00      	nop
 8014b3c:	7fc00000 	.word	0x7fc00000

08014b40 <quorem>:
 8014b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b44:	6903      	ldr	r3, [r0, #16]
 8014b46:	690c      	ldr	r4, [r1, #16]
 8014b48:	42a3      	cmp	r3, r4
 8014b4a:	4607      	mov	r7, r0
 8014b4c:	db7e      	blt.n	8014c4c <quorem+0x10c>
 8014b4e:	3c01      	subs	r4, #1
 8014b50:	f101 0814 	add.w	r8, r1, #20
 8014b54:	f100 0514 	add.w	r5, r0, #20
 8014b58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b5c:	9301      	str	r3, [sp, #4]
 8014b5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b66:	3301      	adds	r3, #1
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014b6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014b72:	fbb2 f6f3 	udiv	r6, r2, r3
 8014b76:	d331      	bcc.n	8014bdc <quorem+0x9c>
 8014b78:	f04f 0e00 	mov.w	lr, #0
 8014b7c:	4640      	mov	r0, r8
 8014b7e:	46ac      	mov	ip, r5
 8014b80:	46f2      	mov	sl, lr
 8014b82:	f850 2b04 	ldr.w	r2, [r0], #4
 8014b86:	b293      	uxth	r3, r2
 8014b88:	fb06 e303 	mla	r3, r6, r3, lr
 8014b8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014b90:	0c1a      	lsrs	r2, r3, #16
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	ebaa 0303 	sub.w	r3, sl, r3
 8014b98:	f8dc a000 	ldr.w	sl, [ip]
 8014b9c:	fa13 f38a 	uxtah	r3, r3, sl
 8014ba0:	fb06 220e 	mla	r2, r6, lr, r2
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	9b00      	ldr	r3, [sp, #0]
 8014ba8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014bac:	b292      	uxth	r2, r2
 8014bae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014bb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014bb6:	f8bd 3000 	ldrh.w	r3, [sp]
 8014bba:	4581      	cmp	r9, r0
 8014bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bc0:	f84c 3b04 	str.w	r3, [ip], #4
 8014bc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014bc8:	d2db      	bcs.n	8014b82 <quorem+0x42>
 8014bca:	f855 300b 	ldr.w	r3, [r5, fp]
 8014bce:	b92b      	cbnz	r3, 8014bdc <quorem+0x9c>
 8014bd0:	9b01      	ldr	r3, [sp, #4]
 8014bd2:	3b04      	subs	r3, #4
 8014bd4:	429d      	cmp	r5, r3
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	d32c      	bcc.n	8014c34 <quorem+0xf4>
 8014bda:	613c      	str	r4, [r7, #16]
 8014bdc:	4638      	mov	r0, r7
 8014bde:	f001 f93b 	bl	8015e58 <__mcmp>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	db22      	blt.n	8014c2c <quorem+0xec>
 8014be6:	3601      	adds	r6, #1
 8014be8:	4629      	mov	r1, r5
 8014bea:	2000      	movs	r0, #0
 8014bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8014bf0:	f8d1 c000 	ldr.w	ip, [r1]
 8014bf4:	b293      	uxth	r3, r2
 8014bf6:	1ac3      	subs	r3, r0, r3
 8014bf8:	0c12      	lsrs	r2, r2, #16
 8014bfa:	fa13 f38c 	uxtah	r3, r3, ip
 8014bfe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014c02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c0c:	45c1      	cmp	r9, r8
 8014c0e:	f841 3b04 	str.w	r3, [r1], #4
 8014c12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014c16:	d2e9      	bcs.n	8014bec <quorem+0xac>
 8014c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c20:	b922      	cbnz	r2, 8014c2c <quorem+0xec>
 8014c22:	3b04      	subs	r3, #4
 8014c24:	429d      	cmp	r5, r3
 8014c26:	461a      	mov	r2, r3
 8014c28:	d30a      	bcc.n	8014c40 <quorem+0x100>
 8014c2a:	613c      	str	r4, [r7, #16]
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	b003      	add	sp, #12
 8014c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c34:	6812      	ldr	r2, [r2, #0]
 8014c36:	3b04      	subs	r3, #4
 8014c38:	2a00      	cmp	r2, #0
 8014c3a:	d1ce      	bne.n	8014bda <quorem+0x9a>
 8014c3c:	3c01      	subs	r4, #1
 8014c3e:	e7c9      	b.n	8014bd4 <quorem+0x94>
 8014c40:	6812      	ldr	r2, [r2, #0]
 8014c42:	3b04      	subs	r3, #4
 8014c44:	2a00      	cmp	r2, #0
 8014c46:	d1f0      	bne.n	8014c2a <quorem+0xea>
 8014c48:	3c01      	subs	r4, #1
 8014c4a:	e7eb      	b.n	8014c24 <quorem+0xe4>
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	e7ee      	b.n	8014c2e <quorem+0xee>

08014c50 <_dtoa_r>:
 8014c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c54:	ed2d 8b04 	vpush	{d8-d9}
 8014c58:	69c5      	ldr	r5, [r0, #28]
 8014c5a:	b093      	sub	sp, #76	; 0x4c
 8014c5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014c60:	ec57 6b10 	vmov	r6, r7, d0
 8014c64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014c68:	9107      	str	r1, [sp, #28]
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8014c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8014c70:	b975      	cbnz	r5, 8014c90 <_dtoa_r+0x40>
 8014c72:	2010      	movs	r0, #16
 8014c74:	f7fe fdd6 	bl	8013824 <malloc>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	61e0      	str	r0, [r4, #28]
 8014c7c:	b920      	cbnz	r0, 8014c88 <_dtoa_r+0x38>
 8014c7e:	4bae      	ldr	r3, [pc, #696]	; (8014f38 <_dtoa_r+0x2e8>)
 8014c80:	21ef      	movs	r1, #239	; 0xef
 8014c82:	48ae      	ldr	r0, [pc, #696]	; (8014f3c <_dtoa_r+0x2ec>)
 8014c84:	f7fe fd9e 	bl	80137c4 <__assert_func>
 8014c88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014c8c:	6005      	str	r5, [r0, #0]
 8014c8e:	60c5      	str	r5, [r0, #12]
 8014c90:	69e3      	ldr	r3, [r4, #28]
 8014c92:	6819      	ldr	r1, [r3, #0]
 8014c94:	b151      	cbz	r1, 8014cac <_dtoa_r+0x5c>
 8014c96:	685a      	ldr	r2, [r3, #4]
 8014c98:	604a      	str	r2, [r1, #4]
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	4093      	lsls	r3, r2
 8014c9e:	608b      	str	r3, [r1, #8]
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f000 fe53 	bl	801594c <_Bfree>
 8014ca6:	69e3      	ldr	r3, [r4, #28]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	601a      	str	r2, [r3, #0]
 8014cac:	1e3b      	subs	r3, r7, #0
 8014cae:	bfbb      	ittet	lt
 8014cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014cb4:	9303      	strlt	r3, [sp, #12]
 8014cb6:	2300      	movge	r3, #0
 8014cb8:	2201      	movlt	r2, #1
 8014cba:	bfac      	ite	ge
 8014cbc:	f8c8 3000 	strge.w	r3, [r8]
 8014cc0:	f8c8 2000 	strlt.w	r2, [r8]
 8014cc4:	4b9e      	ldr	r3, [pc, #632]	; (8014f40 <_dtoa_r+0x2f0>)
 8014cc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014cca:	ea33 0308 	bics.w	r3, r3, r8
 8014cce:	d11b      	bne.n	8014d08 <_dtoa_r+0xb8>
 8014cd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8014cd6:	6013      	str	r3, [r2, #0]
 8014cd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014cdc:	4333      	orrs	r3, r6
 8014cde:	f000 8593 	beq.w	8015808 <_dtoa_r+0xbb8>
 8014ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ce4:	b963      	cbnz	r3, 8014d00 <_dtoa_r+0xb0>
 8014ce6:	4b97      	ldr	r3, [pc, #604]	; (8014f44 <_dtoa_r+0x2f4>)
 8014ce8:	e027      	b.n	8014d3a <_dtoa_r+0xea>
 8014cea:	4b97      	ldr	r3, [pc, #604]	; (8014f48 <_dtoa_r+0x2f8>)
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	3308      	adds	r3, #8
 8014cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cf2:	6013      	str	r3, [r2, #0]
 8014cf4:	9800      	ldr	r0, [sp, #0]
 8014cf6:	b013      	add	sp, #76	; 0x4c
 8014cf8:	ecbd 8b04 	vpop	{d8-d9}
 8014cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d00:	4b90      	ldr	r3, [pc, #576]	; (8014f44 <_dtoa_r+0x2f4>)
 8014d02:	9300      	str	r3, [sp, #0]
 8014d04:	3303      	adds	r3, #3
 8014d06:	e7f3      	b.n	8014cf0 <_dtoa_r+0xa0>
 8014d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	ec51 0b17 	vmov	r0, r1, d7
 8014d12:	eeb0 8a47 	vmov.f32	s16, s14
 8014d16:	eef0 8a67 	vmov.f32	s17, s15
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	f7eb fefc 	bl	8000b18 <__aeabi_dcmpeq>
 8014d20:	4681      	mov	r9, r0
 8014d22:	b160      	cbz	r0, 8014d3e <_dtoa_r+0xee>
 8014d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d26:	2301      	movs	r3, #1
 8014d28:	6013      	str	r3, [r2, #0]
 8014d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f000 8568 	beq.w	8015802 <_dtoa_r+0xbb2>
 8014d32:	4b86      	ldr	r3, [pc, #536]	; (8014f4c <_dtoa_r+0x2fc>)
 8014d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d36:	6013      	str	r3, [r2, #0]
 8014d38:	3b01      	subs	r3, #1
 8014d3a:	9300      	str	r3, [sp, #0]
 8014d3c:	e7da      	b.n	8014cf4 <_dtoa_r+0xa4>
 8014d3e:	aa10      	add	r2, sp, #64	; 0x40
 8014d40:	a911      	add	r1, sp, #68	; 0x44
 8014d42:	4620      	mov	r0, r4
 8014d44:	eeb0 0a48 	vmov.f32	s0, s16
 8014d48:	eef0 0a68 	vmov.f32	s1, s17
 8014d4c:	f001 f99a 	bl	8016084 <__d2b>
 8014d50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014d54:	4682      	mov	sl, r0
 8014d56:	2d00      	cmp	r5, #0
 8014d58:	d07f      	beq.n	8014e5a <_dtoa_r+0x20a>
 8014d5a:	ee18 3a90 	vmov	r3, s17
 8014d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014d66:	ec51 0b18 	vmov	r0, r1, d8
 8014d6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014d72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014d76:	4619      	mov	r1, r3
 8014d78:	2200      	movs	r2, #0
 8014d7a:	4b75      	ldr	r3, [pc, #468]	; (8014f50 <_dtoa_r+0x300>)
 8014d7c:	f7eb faac 	bl	80002d8 <__aeabi_dsub>
 8014d80:	a367      	add	r3, pc, #412	; (adr r3, 8014f20 <_dtoa_r+0x2d0>)
 8014d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d86:	f7eb fc5f 	bl	8000648 <__aeabi_dmul>
 8014d8a:	a367      	add	r3, pc, #412	; (adr r3, 8014f28 <_dtoa_r+0x2d8>)
 8014d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d90:	f7eb faa4 	bl	80002dc <__adddf3>
 8014d94:	4606      	mov	r6, r0
 8014d96:	4628      	mov	r0, r5
 8014d98:	460f      	mov	r7, r1
 8014d9a:	f7eb fbeb 	bl	8000574 <__aeabi_i2d>
 8014d9e:	a364      	add	r3, pc, #400	; (adr r3, 8014f30 <_dtoa_r+0x2e0>)
 8014da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da4:	f7eb fc50 	bl	8000648 <__aeabi_dmul>
 8014da8:	4602      	mov	r2, r0
 8014daa:	460b      	mov	r3, r1
 8014dac:	4630      	mov	r0, r6
 8014dae:	4639      	mov	r1, r7
 8014db0:	f7eb fa94 	bl	80002dc <__adddf3>
 8014db4:	4606      	mov	r6, r0
 8014db6:	460f      	mov	r7, r1
 8014db8:	f7eb fef6 	bl	8000ba8 <__aeabi_d2iz>
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	4683      	mov	fp, r0
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	4639      	mov	r1, r7
 8014dc6:	f7eb feb1 	bl	8000b2c <__aeabi_dcmplt>
 8014dca:	b148      	cbz	r0, 8014de0 <_dtoa_r+0x190>
 8014dcc:	4658      	mov	r0, fp
 8014dce:	f7eb fbd1 	bl	8000574 <__aeabi_i2d>
 8014dd2:	4632      	mov	r2, r6
 8014dd4:	463b      	mov	r3, r7
 8014dd6:	f7eb fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 8014dda:	b908      	cbnz	r0, 8014de0 <_dtoa_r+0x190>
 8014ddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014de0:	f1bb 0f16 	cmp.w	fp, #22
 8014de4:	d857      	bhi.n	8014e96 <_dtoa_r+0x246>
 8014de6:	4b5b      	ldr	r3, [pc, #364]	; (8014f54 <_dtoa_r+0x304>)
 8014de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df0:	ec51 0b18 	vmov	r0, r1, d8
 8014df4:	f7eb fe9a 	bl	8000b2c <__aeabi_dcmplt>
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	d04e      	beq.n	8014e9a <_dtoa_r+0x24a>
 8014dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e00:	2300      	movs	r3, #0
 8014e02:	930c      	str	r3, [sp, #48]	; 0x30
 8014e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e06:	1b5b      	subs	r3, r3, r5
 8014e08:	1e5a      	subs	r2, r3, #1
 8014e0a:	bf45      	ittet	mi
 8014e0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8014e10:	9305      	strmi	r3, [sp, #20]
 8014e12:	2300      	movpl	r3, #0
 8014e14:	2300      	movmi	r3, #0
 8014e16:	9206      	str	r2, [sp, #24]
 8014e18:	bf54      	ite	pl
 8014e1a:	9305      	strpl	r3, [sp, #20]
 8014e1c:	9306      	strmi	r3, [sp, #24]
 8014e1e:	f1bb 0f00 	cmp.w	fp, #0
 8014e22:	db3c      	blt.n	8014e9e <_dtoa_r+0x24e>
 8014e24:	9b06      	ldr	r3, [sp, #24]
 8014e26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014e2a:	445b      	add	r3, fp
 8014e2c:	9306      	str	r3, [sp, #24]
 8014e2e:	2300      	movs	r3, #0
 8014e30:	9308      	str	r3, [sp, #32]
 8014e32:	9b07      	ldr	r3, [sp, #28]
 8014e34:	2b09      	cmp	r3, #9
 8014e36:	d868      	bhi.n	8014f0a <_dtoa_r+0x2ba>
 8014e38:	2b05      	cmp	r3, #5
 8014e3a:	bfc4      	itt	gt
 8014e3c:	3b04      	subgt	r3, #4
 8014e3e:	9307      	strgt	r3, [sp, #28]
 8014e40:	9b07      	ldr	r3, [sp, #28]
 8014e42:	f1a3 0302 	sub.w	r3, r3, #2
 8014e46:	bfcc      	ite	gt
 8014e48:	2500      	movgt	r5, #0
 8014e4a:	2501      	movle	r5, #1
 8014e4c:	2b03      	cmp	r3, #3
 8014e4e:	f200 8085 	bhi.w	8014f5c <_dtoa_r+0x30c>
 8014e52:	e8df f003 	tbb	[pc, r3]
 8014e56:	3b2e      	.short	0x3b2e
 8014e58:	5839      	.short	0x5839
 8014e5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014e5e:	441d      	add	r5, r3
 8014e60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014e64:	2b20      	cmp	r3, #32
 8014e66:	bfc1      	itttt	gt
 8014e68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014e6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8014e70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8014e74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014e78:	bfd6      	itet	le
 8014e7a:	f1c3 0320 	rsble	r3, r3, #32
 8014e7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8014e82:	fa06 f003 	lslle.w	r0, r6, r3
 8014e86:	f7eb fb65 	bl	8000554 <__aeabi_ui2d>
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014e90:	3d01      	subs	r5, #1
 8014e92:	920e      	str	r2, [sp, #56]	; 0x38
 8014e94:	e76f      	b.n	8014d76 <_dtoa_r+0x126>
 8014e96:	2301      	movs	r3, #1
 8014e98:	e7b3      	b.n	8014e02 <_dtoa_r+0x1b2>
 8014e9a:	900c      	str	r0, [sp, #48]	; 0x30
 8014e9c:	e7b2      	b.n	8014e04 <_dtoa_r+0x1b4>
 8014e9e:	9b05      	ldr	r3, [sp, #20]
 8014ea0:	eba3 030b 	sub.w	r3, r3, fp
 8014ea4:	9305      	str	r3, [sp, #20]
 8014ea6:	f1cb 0300 	rsb	r3, fp, #0
 8014eaa:	9308      	str	r3, [sp, #32]
 8014eac:	2300      	movs	r3, #0
 8014eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8014eb0:	e7bf      	b.n	8014e32 <_dtoa_r+0x1e2>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	dc52      	bgt.n	8014f62 <_dtoa_r+0x312>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	9301      	str	r3, [sp, #4]
 8014ec0:	9304      	str	r3, [sp, #16]
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8014ec6:	e00b      	b.n	8014ee0 <_dtoa_r+0x290>
 8014ec8:	2301      	movs	r3, #1
 8014eca:	e7f3      	b.n	8014eb4 <_dtoa_r+0x264>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9309      	str	r3, [sp, #36]	; 0x24
 8014ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ed2:	445b      	add	r3, fp
 8014ed4:	9301      	str	r3, [sp, #4]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	9304      	str	r3, [sp, #16]
 8014edc:	bfb8      	it	lt
 8014ede:	2301      	movlt	r3, #1
 8014ee0:	69e0      	ldr	r0, [r4, #28]
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	2204      	movs	r2, #4
 8014ee6:	f102 0614 	add.w	r6, r2, #20
 8014eea:	429e      	cmp	r6, r3
 8014eec:	d93d      	bls.n	8014f6a <_dtoa_r+0x31a>
 8014eee:	6041      	str	r1, [r0, #4]
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	f000 fceb 	bl	80158cc <_Balloc>
 8014ef6:	9000      	str	r0, [sp, #0]
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d139      	bne.n	8014f70 <_dtoa_r+0x320>
 8014efc:	4b16      	ldr	r3, [pc, #88]	; (8014f58 <_dtoa_r+0x308>)
 8014efe:	4602      	mov	r2, r0
 8014f00:	f240 11af 	movw	r1, #431	; 0x1af
 8014f04:	e6bd      	b.n	8014c82 <_dtoa_r+0x32>
 8014f06:	2301      	movs	r3, #1
 8014f08:	e7e1      	b.n	8014ece <_dtoa_r+0x27e>
 8014f0a:	2501      	movs	r5, #1
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	9307      	str	r3, [sp, #28]
 8014f10:	9509      	str	r5, [sp, #36]	; 0x24
 8014f12:	f04f 33ff 	mov.w	r3, #4294967295
 8014f16:	9301      	str	r3, [sp, #4]
 8014f18:	9304      	str	r3, [sp, #16]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	2312      	movs	r3, #18
 8014f1e:	e7d1      	b.n	8014ec4 <_dtoa_r+0x274>
 8014f20:	636f4361 	.word	0x636f4361
 8014f24:	3fd287a7 	.word	0x3fd287a7
 8014f28:	8b60c8b3 	.word	0x8b60c8b3
 8014f2c:	3fc68a28 	.word	0x3fc68a28
 8014f30:	509f79fb 	.word	0x509f79fb
 8014f34:	3fd34413 	.word	0x3fd34413
 8014f38:	080191fa 	.word	0x080191fa
 8014f3c:	08019211 	.word	0x08019211
 8014f40:	7ff00000 	.word	0x7ff00000
 8014f44:	080191f6 	.word	0x080191f6
 8014f48:	080191ed 	.word	0x080191ed
 8014f4c:	080191c5 	.word	0x080191c5
 8014f50:	3ff80000 	.word	0x3ff80000
 8014f54:	08019300 	.word	0x08019300
 8014f58:	08019269 	.word	0x08019269
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f60:	e7d7      	b.n	8014f12 <_dtoa_r+0x2c2>
 8014f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f64:	9301      	str	r3, [sp, #4]
 8014f66:	9304      	str	r3, [sp, #16]
 8014f68:	e7ba      	b.n	8014ee0 <_dtoa_r+0x290>
 8014f6a:	3101      	adds	r1, #1
 8014f6c:	0052      	lsls	r2, r2, #1
 8014f6e:	e7ba      	b.n	8014ee6 <_dtoa_r+0x296>
 8014f70:	69e3      	ldr	r3, [r4, #28]
 8014f72:	9a00      	ldr	r2, [sp, #0]
 8014f74:	601a      	str	r2, [r3, #0]
 8014f76:	9b04      	ldr	r3, [sp, #16]
 8014f78:	2b0e      	cmp	r3, #14
 8014f7a:	f200 80a8 	bhi.w	80150ce <_dtoa_r+0x47e>
 8014f7e:	2d00      	cmp	r5, #0
 8014f80:	f000 80a5 	beq.w	80150ce <_dtoa_r+0x47e>
 8014f84:	f1bb 0f00 	cmp.w	fp, #0
 8014f88:	dd38      	ble.n	8014ffc <_dtoa_r+0x3ac>
 8014f8a:	4bc0      	ldr	r3, [pc, #768]	; (801528c <_dtoa_r+0x63c>)
 8014f8c:	f00b 020f 	and.w	r2, fp, #15
 8014f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014f98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014f9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014fa0:	d019      	beq.n	8014fd6 <_dtoa_r+0x386>
 8014fa2:	4bbb      	ldr	r3, [pc, #748]	; (8015290 <_dtoa_r+0x640>)
 8014fa4:	ec51 0b18 	vmov	r0, r1, d8
 8014fa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014fac:	f7eb fc76 	bl	800089c <__aeabi_ddiv>
 8014fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fb4:	f008 080f 	and.w	r8, r8, #15
 8014fb8:	2503      	movs	r5, #3
 8014fba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015290 <_dtoa_r+0x640>
 8014fbe:	f1b8 0f00 	cmp.w	r8, #0
 8014fc2:	d10a      	bne.n	8014fda <_dtoa_r+0x38a>
 8014fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fc8:	4632      	mov	r2, r6
 8014fca:	463b      	mov	r3, r7
 8014fcc:	f7eb fc66 	bl	800089c <__aeabi_ddiv>
 8014fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fd4:	e02b      	b.n	801502e <_dtoa_r+0x3de>
 8014fd6:	2502      	movs	r5, #2
 8014fd8:	e7ef      	b.n	8014fba <_dtoa_r+0x36a>
 8014fda:	f018 0f01 	tst.w	r8, #1
 8014fde:	d008      	beq.n	8014ff2 <_dtoa_r+0x3a2>
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	4639      	mov	r1, r7
 8014fe4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014fe8:	f7eb fb2e 	bl	8000648 <__aeabi_dmul>
 8014fec:	3501      	adds	r5, #1
 8014fee:	4606      	mov	r6, r0
 8014ff0:	460f      	mov	r7, r1
 8014ff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014ff6:	f109 0908 	add.w	r9, r9, #8
 8014ffa:	e7e0      	b.n	8014fbe <_dtoa_r+0x36e>
 8014ffc:	f000 809f 	beq.w	801513e <_dtoa_r+0x4ee>
 8015000:	f1cb 0600 	rsb	r6, fp, #0
 8015004:	4ba1      	ldr	r3, [pc, #644]	; (801528c <_dtoa_r+0x63c>)
 8015006:	4fa2      	ldr	r7, [pc, #648]	; (8015290 <_dtoa_r+0x640>)
 8015008:	f006 020f 	and.w	r2, r6, #15
 801500c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015014:	ec51 0b18 	vmov	r0, r1, d8
 8015018:	f7eb fb16 	bl	8000648 <__aeabi_dmul>
 801501c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015020:	1136      	asrs	r6, r6, #4
 8015022:	2300      	movs	r3, #0
 8015024:	2502      	movs	r5, #2
 8015026:	2e00      	cmp	r6, #0
 8015028:	d17e      	bne.n	8015128 <_dtoa_r+0x4d8>
 801502a:	2b00      	cmp	r3, #0
 801502c:	d1d0      	bne.n	8014fd0 <_dtoa_r+0x380>
 801502e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015030:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015034:	2b00      	cmp	r3, #0
 8015036:	f000 8084 	beq.w	8015142 <_dtoa_r+0x4f2>
 801503a:	4b96      	ldr	r3, [pc, #600]	; (8015294 <_dtoa_r+0x644>)
 801503c:	2200      	movs	r2, #0
 801503e:	4640      	mov	r0, r8
 8015040:	4649      	mov	r1, r9
 8015042:	f7eb fd73 	bl	8000b2c <__aeabi_dcmplt>
 8015046:	2800      	cmp	r0, #0
 8015048:	d07b      	beq.n	8015142 <_dtoa_r+0x4f2>
 801504a:	9b04      	ldr	r3, [sp, #16]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d078      	beq.n	8015142 <_dtoa_r+0x4f2>
 8015050:	9b01      	ldr	r3, [sp, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	dd39      	ble.n	80150ca <_dtoa_r+0x47a>
 8015056:	4b90      	ldr	r3, [pc, #576]	; (8015298 <_dtoa_r+0x648>)
 8015058:	2200      	movs	r2, #0
 801505a:	4640      	mov	r0, r8
 801505c:	4649      	mov	r1, r9
 801505e:	f7eb faf3 	bl	8000648 <__aeabi_dmul>
 8015062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015066:	9e01      	ldr	r6, [sp, #4]
 8015068:	f10b 37ff 	add.w	r7, fp, #4294967295
 801506c:	3501      	adds	r5, #1
 801506e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015072:	4628      	mov	r0, r5
 8015074:	f7eb fa7e 	bl	8000574 <__aeabi_i2d>
 8015078:	4642      	mov	r2, r8
 801507a:	464b      	mov	r3, r9
 801507c:	f7eb fae4 	bl	8000648 <__aeabi_dmul>
 8015080:	4b86      	ldr	r3, [pc, #536]	; (801529c <_dtoa_r+0x64c>)
 8015082:	2200      	movs	r2, #0
 8015084:	f7eb f92a 	bl	80002dc <__adddf3>
 8015088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801508c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015090:	9303      	str	r3, [sp, #12]
 8015092:	2e00      	cmp	r6, #0
 8015094:	d158      	bne.n	8015148 <_dtoa_r+0x4f8>
 8015096:	4b82      	ldr	r3, [pc, #520]	; (80152a0 <_dtoa_r+0x650>)
 8015098:	2200      	movs	r2, #0
 801509a:	4640      	mov	r0, r8
 801509c:	4649      	mov	r1, r9
 801509e:	f7eb f91b 	bl	80002d8 <__aeabi_dsub>
 80150a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150a6:	4680      	mov	r8, r0
 80150a8:	4689      	mov	r9, r1
 80150aa:	f7eb fd5d 	bl	8000b68 <__aeabi_dcmpgt>
 80150ae:	2800      	cmp	r0, #0
 80150b0:	f040 8296 	bne.w	80155e0 <_dtoa_r+0x990>
 80150b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80150b8:	4640      	mov	r0, r8
 80150ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80150be:	4649      	mov	r1, r9
 80150c0:	f7eb fd34 	bl	8000b2c <__aeabi_dcmplt>
 80150c4:	2800      	cmp	r0, #0
 80150c6:	f040 8289 	bne.w	80155dc <_dtoa_r+0x98c>
 80150ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80150ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	f2c0 814e 	blt.w	8015372 <_dtoa_r+0x722>
 80150d6:	f1bb 0f0e 	cmp.w	fp, #14
 80150da:	f300 814a 	bgt.w	8015372 <_dtoa_r+0x722>
 80150de:	4b6b      	ldr	r3, [pc, #428]	; (801528c <_dtoa_r+0x63c>)
 80150e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80150e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80150e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	f280 80dc 	bge.w	80152a8 <_dtoa_r+0x658>
 80150f0:	9b04      	ldr	r3, [sp, #16]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	f300 80d8 	bgt.w	80152a8 <_dtoa_r+0x658>
 80150f8:	f040 826f 	bne.w	80155da <_dtoa_r+0x98a>
 80150fc:	4b68      	ldr	r3, [pc, #416]	; (80152a0 <_dtoa_r+0x650>)
 80150fe:	2200      	movs	r2, #0
 8015100:	4640      	mov	r0, r8
 8015102:	4649      	mov	r1, r9
 8015104:	f7eb faa0 	bl	8000648 <__aeabi_dmul>
 8015108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801510c:	f7eb fd22 	bl	8000b54 <__aeabi_dcmpge>
 8015110:	9e04      	ldr	r6, [sp, #16]
 8015112:	4637      	mov	r7, r6
 8015114:	2800      	cmp	r0, #0
 8015116:	f040 8245 	bne.w	80155a4 <_dtoa_r+0x954>
 801511a:	9d00      	ldr	r5, [sp, #0]
 801511c:	2331      	movs	r3, #49	; 0x31
 801511e:	f805 3b01 	strb.w	r3, [r5], #1
 8015122:	f10b 0b01 	add.w	fp, fp, #1
 8015126:	e241      	b.n	80155ac <_dtoa_r+0x95c>
 8015128:	07f2      	lsls	r2, r6, #31
 801512a:	d505      	bpl.n	8015138 <_dtoa_r+0x4e8>
 801512c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015130:	f7eb fa8a 	bl	8000648 <__aeabi_dmul>
 8015134:	3501      	adds	r5, #1
 8015136:	2301      	movs	r3, #1
 8015138:	1076      	asrs	r6, r6, #1
 801513a:	3708      	adds	r7, #8
 801513c:	e773      	b.n	8015026 <_dtoa_r+0x3d6>
 801513e:	2502      	movs	r5, #2
 8015140:	e775      	b.n	801502e <_dtoa_r+0x3de>
 8015142:	9e04      	ldr	r6, [sp, #16]
 8015144:	465f      	mov	r7, fp
 8015146:	e792      	b.n	801506e <_dtoa_r+0x41e>
 8015148:	9900      	ldr	r1, [sp, #0]
 801514a:	4b50      	ldr	r3, [pc, #320]	; (801528c <_dtoa_r+0x63c>)
 801514c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015150:	4431      	add	r1, r6
 8015152:	9102      	str	r1, [sp, #8]
 8015154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015156:	eeb0 9a47 	vmov.f32	s18, s14
 801515a:	eef0 9a67 	vmov.f32	s19, s15
 801515e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015166:	2900      	cmp	r1, #0
 8015168:	d044      	beq.n	80151f4 <_dtoa_r+0x5a4>
 801516a:	494e      	ldr	r1, [pc, #312]	; (80152a4 <_dtoa_r+0x654>)
 801516c:	2000      	movs	r0, #0
 801516e:	f7eb fb95 	bl	800089c <__aeabi_ddiv>
 8015172:	ec53 2b19 	vmov	r2, r3, d9
 8015176:	f7eb f8af 	bl	80002d8 <__aeabi_dsub>
 801517a:	9d00      	ldr	r5, [sp, #0]
 801517c:	ec41 0b19 	vmov	d9, r0, r1
 8015180:	4649      	mov	r1, r9
 8015182:	4640      	mov	r0, r8
 8015184:	f7eb fd10 	bl	8000ba8 <__aeabi_d2iz>
 8015188:	4606      	mov	r6, r0
 801518a:	f7eb f9f3 	bl	8000574 <__aeabi_i2d>
 801518e:	4602      	mov	r2, r0
 8015190:	460b      	mov	r3, r1
 8015192:	4640      	mov	r0, r8
 8015194:	4649      	mov	r1, r9
 8015196:	f7eb f89f 	bl	80002d8 <__aeabi_dsub>
 801519a:	3630      	adds	r6, #48	; 0x30
 801519c:	f805 6b01 	strb.w	r6, [r5], #1
 80151a0:	ec53 2b19 	vmov	r2, r3, d9
 80151a4:	4680      	mov	r8, r0
 80151a6:	4689      	mov	r9, r1
 80151a8:	f7eb fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d164      	bne.n	801527a <_dtoa_r+0x62a>
 80151b0:	4642      	mov	r2, r8
 80151b2:	464b      	mov	r3, r9
 80151b4:	4937      	ldr	r1, [pc, #220]	; (8015294 <_dtoa_r+0x644>)
 80151b6:	2000      	movs	r0, #0
 80151b8:	f7eb f88e 	bl	80002d8 <__aeabi_dsub>
 80151bc:	ec53 2b19 	vmov	r2, r3, d9
 80151c0:	f7eb fcb4 	bl	8000b2c <__aeabi_dcmplt>
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f040 80b6 	bne.w	8015336 <_dtoa_r+0x6e6>
 80151ca:	9b02      	ldr	r3, [sp, #8]
 80151cc:	429d      	cmp	r5, r3
 80151ce:	f43f af7c 	beq.w	80150ca <_dtoa_r+0x47a>
 80151d2:	4b31      	ldr	r3, [pc, #196]	; (8015298 <_dtoa_r+0x648>)
 80151d4:	ec51 0b19 	vmov	r0, r1, d9
 80151d8:	2200      	movs	r2, #0
 80151da:	f7eb fa35 	bl	8000648 <__aeabi_dmul>
 80151de:	4b2e      	ldr	r3, [pc, #184]	; (8015298 <_dtoa_r+0x648>)
 80151e0:	ec41 0b19 	vmov	d9, r0, r1
 80151e4:	2200      	movs	r2, #0
 80151e6:	4640      	mov	r0, r8
 80151e8:	4649      	mov	r1, r9
 80151ea:	f7eb fa2d 	bl	8000648 <__aeabi_dmul>
 80151ee:	4680      	mov	r8, r0
 80151f0:	4689      	mov	r9, r1
 80151f2:	e7c5      	b.n	8015180 <_dtoa_r+0x530>
 80151f4:	ec51 0b17 	vmov	r0, r1, d7
 80151f8:	f7eb fa26 	bl	8000648 <__aeabi_dmul>
 80151fc:	9b02      	ldr	r3, [sp, #8]
 80151fe:	9d00      	ldr	r5, [sp, #0]
 8015200:	930f      	str	r3, [sp, #60]	; 0x3c
 8015202:	ec41 0b19 	vmov	d9, r0, r1
 8015206:	4649      	mov	r1, r9
 8015208:	4640      	mov	r0, r8
 801520a:	f7eb fccd 	bl	8000ba8 <__aeabi_d2iz>
 801520e:	4606      	mov	r6, r0
 8015210:	f7eb f9b0 	bl	8000574 <__aeabi_i2d>
 8015214:	3630      	adds	r6, #48	; 0x30
 8015216:	4602      	mov	r2, r0
 8015218:	460b      	mov	r3, r1
 801521a:	4640      	mov	r0, r8
 801521c:	4649      	mov	r1, r9
 801521e:	f7eb f85b 	bl	80002d8 <__aeabi_dsub>
 8015222:	f805 6b01 	strb.w	r6, [r5], #1
 8015226:	9b02      	ldr	r3, [sp, #8]
 8015228:	429d      	cmp	r5, r3
 801522a:	4680      	mov	r8, r0
 801522c:	4689      	mov	r9, r1
 801522e:	f04f 0200 	mov.w	r2, #0
 8015232:	d124      	bne.n	801527e <_dtoa_r+0x62e>
 8015234:	4b1b      	ldr	r3, [pc, #108]	; (80152a4 <_dtoa_r+0x654>)
 8015236:	ec51 0b19 	vmov	r0, r1, d9
 801523a:	f7eb f84f 	bl	80002dc <__adddf3>
 801523e:	4602      	mov	r2, r0
 8015240:	460b      	mov	r3, r1
 8015242:	4640      	mov	r0, r8
 8015244:	4649      	mov	r1, r9
 8015246:	f7eb fc8f 	bl	8000b68 <__aeabi_dcmpgt>
 801524a:	2800      	cmp	r0, #0
 801524c:	d173      	bne.n	8015336 <_dtoa_r+0x6e6>
 801524e:	ec53 2b19 	vmov	r2, r3, d9
 8015252:	4914      	ldr	r1, [pc, #80]	; (80152a4 <_dtoa_r+0x654>)
 8015254:	2000      	movs	r0, #0
 8015256:	f7eb f83f 	bl	80002d8 <__aeabi_dsub>
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	4640      	mov	r0, r8
 8015260:	4649      	mov	r1, r9
 8015262:	f7eb fc63 	bl	8000b2c <__aeabi_dcmplt>
 8015266:	2800      	cmp	r0, #0
 8015268:	f43f af2f 	beq.w	80150ca <_dtoa_r+0x47a>
 801526c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801526e:	1e6b      	subs	r3, r5, #1
 8015270:	930f      	str	r3, [sp, #60]	; 0x3c
 8015272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015276:	2b30      	cmp	r3, #48	; 0x30
 8015278:	d0f8      	beq.n	801526c <_dtoa_r+0x61c>
 801527a:	46bb      	mov	fp, r7
 801527c:	e04a      	b.n	8015314 <_dtoa_r+0x6c4>
 801527e:	4b06      	ldr	r3, [pc, #24]	; (8015298 <_dtoa_r+0x648>)
 8015280:	f7eb f9e2 	bl	8000648 <__aeabi_dmul>
 8015284:	4680      	mov	r8, r0
 8015286:	4689      	mov	r9, r1
 8015288:	e7bd      	b.n	8015206 <_dtoa_r+0x5b6>
 801528a:	bf00      	nop
 801528c:	08019300 	.word	0x08019300
 8015290:	080192d8 	.word	0x080192d8
 8015294:	3ff00000 	.word	0x3ff00000
 8015298:	40240000 	.word	0x40240000
 801529c:	401c0000 	.word	0x401c0000
 80152a0:	40140000 	.word	0x40140000
 80152a4:	3fe00000 	.word	0x3fe00000
 80152a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80152ac:	9d00      	ldr	r5, [sp, #0]
 80152ae:	4642      	mov	r2, r8
 80152b0:	464b      	mov	r3, r9
 80152b2:	4630      	mov	r0, r6
 80152b4:	4639      	mov	r1, r7
 80152b6:	f7eb faf1 	bl	800089c <__aeabi_ddiv>
 80152ba:	f7eb fc75 	bl	8000ba8 <__aeabi_d2iz>
 80152be:	9001      	str	r0, [sp, #4]
 80152c0:	f7eb f958 	bl	8000574 <__aeabi_i2d>
 80152c4:	4642      	mov	r2, r8
 80152c6:	464b      	mov	r3, r9
 80152c8:	f7eb f9be 	bl	8000648 <__aeabi_dmul>
 80152cc:	4602      	mov	r2, r0
 80152ce:	460b      	mov	r3, r1
 80152d0:	4630      	mov	r0, r6
 80152d2:	4639      	mov	r1, r7
 80152d4:	f7eb f800 	bl	80002d8 <__aeabi_dsub>
 80152d8:	9e01      	ldr	r6, [sp, #4]
 80152da:	9f04      	ldr	r7, [sp, #16]
 80152dc:	3630      	adds	r6, #48	; 0x30
 80152de:	f805 6b01 	strb.w	r6, [r5], #1
 80152e2:	9e00      	ldr	r6, [sp, #0]
 80152e4:	1bae      	subs	r6, r5, r6
 80152e6:	42b7      	cmp	r7, r6
 80152e8:	4602      	mov	r2, r0
 80152ea:	460b      	mov	r3, r1
 80152ec:	d134      	bne.n	8015358 <_dtoa_r+0x708>
 80152ee:	f7ea fff5 	bl	80002dc <__adddf3>
 80152f2:	4642      	mov	r2, r8
 80152f4:	464b      	mov	r3, r9
 80152f6:	4606      	mov	r6, r0
 80152f8:	460f      	mov	r7, r1
 80152fa:	f7eb fc35 	bl	8000b68 <__aeabi_dcmpgt>
 80152fe:	b9c8      	cbnz	r0, 8015334 <_dtoa_r+0x6e4>
 8015300:	4642      	mov	r2, r8
 8015302:	464b      	mov	r3, r9
 8015304:	4630      	mov	r0, r6
 8015306:	4639      	mov	r1, r7
 8015308:	f7eb fc06 	bl	8000b18 <__aeabi_dcmpeq>
 801530c:	b110      	cbz	r0, 8015314 <_dtoa_r+0x6c4>
 801530e:	9b01      	ldr	r3, [sp, #4]
 8015310:	07db      	lsls	r3, r3, #31
 8015312:	d40f      	bmi.n	8015334 <_dtoa_r+0x6e4>
 8015314:	4651      	mov	r1, sl
 8015316:	4620      	mov	r0, r4
 8015318:	f000 fb18 	bl	801594c <_Bfree>
 801531c:	2300      	movs	r3, #0
 801531e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015320:	702b      	strb	r3, [r5, #0]
 8015322:	f10b 0301 	add.w	r3, fp, #1
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801532a:	2b00      	cmp	r3, #0
 801532c:	f43f ace2 	beq.w	8014cf4 <_dtoa_r+0xa4>
 8015330:	601d      	str	r5, [r3, #0]
 8015332:	e4df      	b.n	8014cf4 <_dtoa_r+0xa4>
 8015334:	465f      	mov	r7, fp
 8015336:	462b      	mov	r3, r5
 8015338:	461d      	mov	r5, r3
 801533a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801533e:	2a39      	cmp	r2, #57	; 0x39
 8015340:	d106      	bne.n	8015350 <_dtoa_r+0x700>
 8015342:	9a00      	ldr	r2, [sp, #0]
 8015344:	429a      	cmp	r2, r3
 8015346:	d1f7      	bne.n	8015338 <_dtoa_r+0x6e8>
 8015348:	9900      	ldr	r1, [sp, #0]
 801534a:	2230      	movs	r2, #48	; 0x30
 801534c:	3701      	adds	r7, #1
 801534e:	700a      	strb	r2, [r1, #0]
 8015350:	781a      	ldrb	r2, [r3, #0]
 8015352:	3201      	adds	r2, #1
 8015354:	701a      	strb	r2, [r3, #0]
 8015356:	e790      	b.n	801527a <_dtoa_r+0x62a>
 8015358:	4ba3      	ldr	r3, [pc, #652]	; (80155e8 <_dtoa_r+0x998>)
 801535a:	2200      	movs	r2, #0
 801535c:	f7eb f974 	bl	8000648 <__aeabi_dmul>
 8015360:	2200      	movs	r2, #0
 8015362:	2300      	movs	r3, #0
 8015364:	4606      	mov	r6, r0
 8015366:	460f      	mov	r7, r1
 8015368:	f7eb fbd6 	bl	8000b18 <__aeabi_dcmpeq>
 801536c:	2800      	cmp	r0, #0
 801536e:	d09e      	beq.n	80152ae <_dtoa_r+0x65e>
 8015370:	e7d0      	b.n	8015314 <_dtoa_r+0x6c4>
 8015372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015374:	2a00      	cmp	r2, #0
 8015376:	f000 80ca 	beq.w	801550e <_dtoa_r+0x8be>
 801537a:	9a07      	ldr	r2, [sp, #28]
 801537c:	2a01      	cmp	r2, #1
 801537e:	f300 80ad 	bgt.w	80154dc <_dtoa_r+0x88c>
 8015382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015384:	2a00      	cmp	r2, #0
 8015386:	f000 80a5 	beq.w	80154d4 <_dtoa_r+0x884>
 801538a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801538e:	9e08      	ldr	r6, [sp, #32]
 8015390:	9d05      	ldr	r5, [sp, #20]
 8015392:	9a05      	ldr	r2, [sp, #20]
 8015394:	441a      	add	r2, r3
 8015396:	9205      	str	r2, [sp, #20]
 8015398:	9a06      	ldr	r2, [sp, #24]
 801539a:	2101      	movs	r1, #1
 801539c:	441a      	add	r2, r3
 801539e:	4620      	mov	r0, r4
 80153a0:	9206      	str	r2, [sp, #24]
 80153a2:	f000 fbd3 	bl	8015b4c <__i2b>
 80153a6:	4607      	mov	r7, r0
 80153a8:	b165      	cbz	r5, 80153c4 <_dtoa_r+0x774>
 80153aa:	9b06      	ldr	r3, [sp, #24]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	dd09      	ble.n	80153c4 <_dtoa_r+0x774>
 80153b0:	42ab      	cmp	r3, r5
 80153b2:	9a05      	ldr	r2, [sp, #20]
 80153b4:	bfa8      	it	ge
 80153b6:	462b      	movge	r3, r5
 80153b8:	1ad2      	subs	r2, r2, r3
 80153ba:	9205      	str	r2, [sp, #20]
 80153bc:	9a06      	ldr	r2, [sp, #24]
 80153be:	1aed      	subs	r5, r5, r3
 80153c0:	1ad3      	subs	r3, r2, r3
 80153c2:	9306      	str	r3, [sp, #24]
 80153c4:	9b08      	ldr	r3, [sp, #32]
 80153c6:	b1f3      	cbz	r3, 8015406 <_dtoa_r+0x7b6>
 80153c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	f000 80a3 	beq.w	8015516 <_dtoa_r+0x8c6>
 80153d0:	2e00      	cmp	r6, #0
 80153d2:	dd10      	ble.n	80153f6 <_dtoa_r+0x7a6>
 80153d4:	4639      	mov	r1, r7
 80153d6:	4632      	mov	r2, r6
 80153d8:	4620      	mov	r0, r4
 80153da:	f000 fc77 	bl	8015ccc <__pow5mult>
 80153de:	4652      	mov	r2, sl
 80153e0:	4601      	mov	r1, r0
 80153e2:	4607      	mov	r7, r0
 80153e4:	4620      	mov	r0, r4
 80153e6:	f000 fbc7 	bl	8015b78 <__multiply>
 80153ea:	4651      	mov	r1, sl
 80153ec:	4680      	mov	r8, r0
 80153ee:	4620      	mov	r0, r4
 80153f0:	f000 faac 	bl	801594c <_Bfree>
 80153f4:	46c2      	mov	sl, r8
 80153f6:	9b08      	ldr	r3, [sp, #32]
 80153f8:	1b9a      	subs	r2, r3, r6
 80153fa:	d004      	beq.n	8015406 <_dtoa_r+0x7b6>
 80153fc:	4651      	mov	r1, sl
 80153fe:	4620      	mov	r0, r4
 8015400:	f000 fc64 	bl	8015ccc <__pow5mult>
 8015404:	4682      	mov	sl, r0
 8015406:	2101      	movs	r1, #1
 8015408:	4620      	mov	r0, r4
 801540a:	f000 fb9f 	bl	8015b4c <__i2b>
 801540e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015410:	2b00      	cmp	r3, #0
 8015412:	4606      	mov	r6, r0
 8015414:	f340 8081 	ble.w	801551a <_dtoa_r+0x8ca>
 8015418:	461a      	mov	r2, r3
 801541a:	4601      	mov	r1, r0
 801541c:	4620      	mov	r0, r4
 801541e:	f000 fc55 	bl	8015ccc <__pow5mult>
 8015422:	9b07      	ldr	r3, [sp, #28]
 8015424:	2b01      	cmp	r3, #1
 8015426:	4606      	mov	r6, r0
 8015428:	dd7a      	ble.n	8015520 <_dtoa_r+0x8d0>
 801542a:	f04f 0800 	mov.w	r8, #0
 801542e:	6933      	ldr	r3, [r6, #16]
 8015430:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015434:	6918      	ldr	r0, [r3, #16]
 8015436:	f000 fb3b 	bl	8015ab0 <__hi0bits>
 801543a:	f1c0 0020 	rsb	r0, r0, #32
 801543e:	9b06      	ldr	r3, [sp, #24]
 8015440:	4418      	add	r0, r3
 8015442:	f010 001f 	ands.w	r0, r0, #31
 8015446:	f000 8094 	beq.w	8015572 <_dtoa_r+0x922>
 801544a:	f1c0 0320 	rsb	r3, r0, #32
 801544e:	2b04      	cmp	r3, #4
 8015450:	f340 8085 	ble.w	801555e <_dtoa_r+0x90e>
 8015454:	9b05      	ldr	r3, [sp, #20]
 8015456:	f1c0 001c 	rsb	r0, r0, #28
 801545a:	4403      	add	r3, r0
 801545c:	9305      	str	r3, [sp, #20]
 801545e:	9b06      	ldr	r3, [sp, #24]
 8015460:	4403      	add	r3, r0
 8015462:	4405      	add	r5, r0
 8015464:	9306      	str	r3, [sp, #24]
 8015466:	9b05      	ldr	r3, [sp, #20]
 8015468:	2b00      	cmp	r3, #0
 801546a:	dd05      	ble.n	8015478 <_dtoa_r+0x828>
 801546c:	4651      	mov	r1, sl
 801546e:	461a      	mov	r2, r3
 8015470:	4620      	mov	r0, r4
 8015472:	f000 fc85 	bl	8015d80 <__lshift>
 8015476:	4682      	mov	sl, r0
 8015478:	9b06      	ldr	r3, [sp, #24]
 801547a:	2b00      	cmp	r3, #0
 801547c:	dd05      	ble.n	801548a <_dtoa_r+0x83a>
 801547e:	4631      	mov	r1, r6
 8015480:	461a      	mov	r2, r3
 8015482:	4620      	mov	r0, r4
 8015484:	f000 fc7c 	bl	8015d80 <__lshift>
 8015488:	4606      	mov	r6, r0
 801548a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801548c:	2b00      	cmp	r3, #0
 801548e:	d072      	beq.n	8015576 <_dtoa_r+0x926>
 8015490:	4631      	mov	r1, r6
 8015492:	4650      	mov	r0, sl
 8015494:	f000 fce0 	bl	8015e58 <__mcmp>
 8015498:	2800      	cmp	r0, #0
 801549a:	da6c      	bge.n	8015576 <_dtoa_r+0x926>
 801549c:	2300      	movs	r3, #0
 801549e:	4651      	mov	r1, sl
 80154a0:	220a      	movs	r2, #10
 80154a2:	4620      	mov	r0, r4
 80154a4:	f000 fa74 	bl	8015990 <__multadd>
 80154a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80154ae:	4682      	mov	sl, r0
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f000 81b0 	beq.w	8015816 <_dtoa_r+0xbc6>
 80154b6:	2300      	movs	r3, #0
 80154b8:	4639      	mov	r1, r7
 80154ba:	220a      	movs	r2, #10
 80154bc:	4620      	mov	r0, r4
 80154be:	f000 fa67 	bl	8015990 <__multadd>
 80154c2:	9b01      	ldr	r3, [sp, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	4607      	mov	r7, r0
 80154c8:	f300 8096 	bgt.w	80155f8 <_dtoa_r+0x9a8>
 80154cc:	9b07      	ldr	r3, [sp, #28]
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	dc59      	bgt.n	8015586 <_dtoa_r+0x936>
 80154d2:	e091      	b.n	80155f8 <_dtoa_r+0x9a8>
 80154d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80154da:	e758      	b.n	801538e <_dtoa_r+0x73e>
 80154dc:	9b04      	ldr	r3, [sp, #16]
 80154de:	1e5e      	subs	r6, r3, #1
 80154e0:	9b08      	ldr	r3, [sp, #32]
 80154e2:	42b3      	cmp	r3, r6
 80154e4:	bfbf      	itttt	lt
 80154e6:	9b08      	ldrlt	r3, [sp, #32]
 80154e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80154ea:	9608      	strlt	r6, [sp, #32]
 80154ec:	1af3      	sublt	r3, r6, r3
 80154ee:	bfb4      	ite	lt
 80154f0:	18d2      	addlt	r2, r2, r3
 80154f2:	1b9e      	subge	r6, r3, r6
 80154f4:	9b04      	ldr	r3, [sp, #16]
 80154f6:	bfbc      	itt	lt
 80154f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80154fa:	2600      	movlt	r6, #0
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	bfb7      	itett	lt
 8015500:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015504:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015508:	1a9d      	sublt	r5, r3, r2
 801550a:	2300      	movlt	r3, #0
 801550c:	e741      	b.n	8015392 <_dtoa_r+0x742>
 801550e:	9e08      	ldr	r6, [sp, #32]
 8015510:	9d05      	ldr	r5, [sp, #20]
 8015512:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015514:	e748      	b.n	80153a8 <_dtoa_r+0x758>
 8015516:	9a08      	ldr	r2, [sp, #32]
 8015518:	e770      	b.n	80153fc <_dtoa_r+0x7ac>
 801551a:	9b07      	ldr	r3, [sp, #28]
 801551c:	2b01      	cmp	r3, #1
 801551e:	dc19      	bgt.n	8015554 <_dtoa_r+0x904>
 8015520:	9b02      	ldr	r3, [sp, #8]
 8015522:	b9bb      	cbnz	r3, 8015554 <_dtoa_r+0x904>
 8015524:	9b03      	ldr	r3, [sp, #12]
 8015526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801552a:	b99b      	cbnz	r3, 8015554 <_dtoa_r+0x904>
 801552c:	9b03      	ldr	r3, [sp, #12]
 801552e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015532:	0d1b      	lsrs	r3, r3, #20
 8015534:	051b      	lsls	r3, r3, #20
 8015536:	b183      	cbz	r3, 801555a <_dtoa_r+0x90a>
 8015538:	9b05      	ldr	r3, [sp, #20]
 801553a:	3301      	adds	r3, #1
 801553c:	9305      	str	r3, [sp, #20]
 801553e:	9b06      	ldr	r3, [sp, #24]
 8015540:	3301      	adds	r3, #1
 8015542:	9306      	str	r3, [sp, #24]
 8015544:	f04f 0801 	mov.w	r8, #1
 8015548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801554a:	2b00      	cmp	r3, #0
 801554c:	f47f af6f 	bne.w	801542e <_dtoa_r+0x7de>
 8015550:	2001      	movs	r0, #1
 8015552:	e774      	b.n	801543e <_dtoa_r+0x7ee>
 8015554:	f04f 0800 	mov.w	r8, #0
 8015558:	e7f6      	b.n	8015548 <_dtoa_r+0x8f8>
 801555a:	4698      	mov	r8, r3
 801555c:	e7f4      	b.n	8015548 <_dtoa_r+0x8f8>
 801555e:	d082      	beq.n	8015466 <_dtoa_r+0x816>
 8015560:	9a05      	ldr	r2, [sp, #20]
 8015562:	331c      	adds	r3, #28
 8015564:	441a      	add	r2, r3
 8015566:	9205      	str	r2, [sp, #20]
 8015568:	9a06      	ldr	r2, [sp, #24]
 801556a:	441a      	add	r2, r3
 801556c:	441d      	add	r5, r3
 801556e:	9206      	str	r2, [sp, #24]
 8015570:	e779      	b.n	8015466 <_dtoa_r+0x816>
 8015572:	4603      	mov	r3, r0
 8015574:	e7f4      	b.n	8015560 <_dtoa_r+0x910>
 8015576:	9b04      	ldr	r3, [sp, #16]
 8015578:	2b00      	cmp	r3, #0
 801557a:	dc37      	bgt.n	80155ec <_dtoa_r+0x99c>
 801557c:	9b07      	ldr	r3, [sp, #28]
 801557e:	2b02      	cmp	r3, #2
 8015580:	dd34      	ble.n	80155ec <_dtoa_r+0x99c>
 8015582:	9b04      	ldr	r3, [sp, #16]
 8015584:	9301      	str	r3, [sp, #4]
 8015586:	9b01      	ldr	r3, [sp, #4]
 8015588:	b963      	cbnz	r3, 80155a4 <_dtoa_r+0x954>
 801558a:	4631      	mov	r1, r6
 801558c:	2205      	movs	r2, #5
 801558e:	4620      	mov	r0, r4
 8015590:	f000 f9fe 	bl	8015990 <__multadd>
 8015594:	4601      	mov	r1, r0
 8015596:	4606      	mov	r6, r0
 8015598:	4650      	mov	r0, sl
 801559a:	f000 fc5d 	bl	8015e58 <__mcmp>
 801559e:	2800      	cmp	r0, #0
 80155a0:	f73f adbb 	bgt.w	801511a <_dtoa_r+0x4ca>
 80155a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a6:	9d00      	ldr	r5, [sp, #0]
 80155a8:	ea6f 0b03 	mvn.w	fp, r3
 80155ac:	f04f 0800 	mov.w	r8, #0
 80155b0:	4631      	mov	r1, r6
 80155b2:	4620      	mov	r0, r4
 80155b4:	f000 f9ca 	bl	801594c <_Bfree>
 80155b8:	2f00      	cmp	r7, #0
 80155ba:	f43f aeab 	beq.w	8015314 <_dtoa_r+0x6c4>
 80155be:	f1b8 0f00 	cmp.w	r8, #0
 80155c2:	d005      	beq.n	80155d0 <_dtoa_r+0x980>
 80155c4:	45b8      	cmp	r8, r7
 80155c6:	d003      	beq.n	80155d0 <_dtoa_r+0x980>
 80155c8:	4641      	mov	r1, r8
 80155ca:	4620      	mov	r0, r4
 80155cc:	f000 f9be 	bl	801594c <_Bfree>
 80155d0:	4639      	mov	r1, r7
 80155d2:	4620      	mov	r0, r4
 80155d4:	f000 f9ba 	bl	801594c <_Bfree>
 80155d8:	e69c      	b.n	8015314 <_dtoa_r+0x6c4>
 80155da:	2600      	movs	r6, #0
 80155dc:	4637      	mov	r7, r6
 80155de:	e7e1      	b.n	80155a4 <_dtoa_r+0x954>
 80155e0:	46bb      	mov	fp, r7
 80155e2:	4637      	mov	r7, r6
 80155e4:	e599      	b.n	801511a <_dtoa_r+0x4ca>
 80155e6:	bf00      	nop
 80155e8:	40240000 	.word	0x40240000
 80155ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	f000 80c8 	beq.w	8015784 <_dtoa_r+0xb34>
 80155f4:	9b04      	ldr	r3, [sp, #16]
 80155f6:	9301      	str	r3, [sp, #4]
 80155f8:	2d00      	cmp	r5, #0
 80155fa:	dd05      	ble.n	8015608 <_dtoa_r+0x9b8>
 80155fc:	4639      	mov	r1, r7
 80155fe:	462a      	mov	r2, r5
 8015600:	4620      	mov	r0, r4
 8015602:	f000 fbbd 	bl	8015d80 <__lshift>
 8015606:	4607      	mov	r7, r0
 8015608:	f1b8 0f00 	cmp.w	r8, #0
 801560c:	d05b      	beq.n	80156c6 <_dtoa_r+0xa76>
 801560e:	6879      	ldr	r1, [r7, #4]
 8015610:	4620      	mov	r0, r4
 8015612:	f000 f95b 	bl	80158cc <_Balloc>
 8015616:	4605      	mov	r5, r0
 8015618:	b928      	cbnz	r0, 8015626 <_dtoa_r+0x9d6>
 801561a:	4b83      	ldr	r3, [pc, #524]	; (8015828 <_dtoa_r+0xbd8>)
 801561c:	4602      	mov	r2, r0
 801561e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015622:	f7ff bb2e 	b.w	8014c82 <_dtoa_r+0x32>
 8015626:	693a      	ldr	r2, [r7, #16]
 8015628:	3202      	adds	r2, #2
 801562a:	0092      	lsls	r2, r2, #2
 801562c:	f107 010c 	add.w	r1, r7, #12
 8015630:	300c      	adds	r0, #12
 8015632:	f7ff fa70 	bl	8014b16 <memcpy>
 8015636:	2201      	movs	r2, #1
 8015638:	4629      	mov	r1, r5
 801563a:	4620      	mov	r0, r4
 801563c:	f000 fba0 	bl	8015d80 <__lshift>
 8015640:	9b00      	ldr	r3, [sp, #0]
 8015642:	3301      	adds	r3, #1
 8015644:	9304      	str	r3, [sp, #16]
 8015646:	e9dd 2300 	ldrd	r2, r3, [sp]
 801564a:	4413      	add	r3, r2
 801564c:	9308      	str	r3, [sp, #32]
 801564e:	9b02      	ldr	r3, [sp, #8]
 8015650:	f003 0301 	and.w	r3, r3, #1
 8015654:	46b8      	mov	r8, r7
 8015656:	9306      	str	r3, [sp, #24]
 8015658:	4607      	mov	r7, r0
 801565a:	9b04      	ldr	r3, [sp, #16]
 801565c:	4631      	mov	r1, r6
 801565e:	3b01      	subs	r3, #1
 8015660:	4650      	mov	r0, sl
 8015662:	9301      	str	r3, [sp, #4]
 8015664:	f7ff fa6c 	bl	8014b40 <quorem>
 8015668:	4641      	mov	r1, r8
 801566a:	9002      	str	r0, [sp, #8]
 801566c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015670:	4650      	mov	r0, sl
 8015672:	f000 fbf1 	bl	8015e58 <__mcmp>
 8015676:	463a      	mov	r2, r7
 8015678:	9005      	str	r0, [sp, #20]
 801567a:	4631      	mov	r1, r6
 801567c:	4620      	mov	r0, r4
 801567e:	f000 fc07 	bl	8015e90 <__mdiff>
 8015682:	68c2      	ldr	r2, [r0, #12]
 8015684:	4605      	mov	r5, r0
 8015686:	bb02      	cbnz	r2, 80156ca <_dtoa_r+0xa7a>
 8015688:	4601      	mov	r1, r0
 801568a:	4650      	mov	r0, sl
 801568c:	f000 fbe4 	bl	8015e58 <__mcmp>
 8015690:	4602      	mov	r2, r0
 8015692:	4629      	mov	r1, r5
 8015694:	4620      	mov	r0, r4
 8015696:	9209      	str	r2, [sp, #36]	; 0x24
 8015698:	f000 f958 	bl	801594c <_Bfree>
 801569c:	9b07      	ldr	r3, [sp, #28]
 801569e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156a0:	9d04      	ldr	r5, [sp, #16]
 80156a2:	ea43 0102 	orr.w	r1, r3, r2
 80156a6:	9b06      	ldr	r3, [sp, #24]
 80156a8:	4319      	orrs	r1, r3
 80156aa:	d110      	bne.n	80156ce <_dtoa_r+0xa7e>
 80156ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80156b0:	d029      	beq.n	8015706 <_dtoa_r+0xab6>
 80156b2:	9b05      	ldr	r3, [sp, #20]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	dd02      	ble.n	80156be <_dtoa_r+0xa6e>
 80156b8:	9b02      	ldr	r3, [sp, #8]
 80156ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80156be:	9b01      	ldr	r3, [sp, #4]
 80156c0:	f883 9000 	strb.w	r9, [r3]
 80156c4:	e774      	b.n	80155b0 <_dtoa_r+0x960>
 80156c6:	4638      	mov	r0, r7
 80156c8:	e7ba      	b.n	8015640 <_dtoa_r+0x9f0>
 80156ca:	2201      	movs	r2, #1
 80156cc:	e7e1      	b.n	8015692 <_dtoa_r+0xa42>
 80156ce:	9b05      	ldr	r3, [sp, #20]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	db04      	blt.n	80156de <_dtoa_r+0xa8e>
 80156d4:	9907      	ldr	r1, [sp, #28]
 80156d6:	430b      	orrs	r3, r1
 80156d8:	9906      	ldr	r1, [sp, #24]
 80156da:	430b      	orrs	r3, r1
 80156dc:	d120      	bne.n	8015720 <_dtoa_r+0xad0>
 80156de:	2a00      	cmp	r2, #0
 80156e0:	dded      	ble.n	80156be <_dtoa_r+0xa6e>
 80156e2:	4651      	mov	r1, sl
 80156e4:	2201      	movs	r2, #1
 80156e6:	4620      	mov	r0, r4
 80156e8:	f000 fb4a 	bl	8015d80 <__lshift>
 80156ec:	4631      	mov	r1, r6
 80156ee:	4682      	mov	sl, r0
 80156f0:	f000 fbb2 	bl	8015e58 <__mcmp>
 80156f4:	2800      	cmp	r0, #0
 80156f6:	dc03      	bgt.n	8015700 <_dtoa_r+0xab0>
 80156f8:	d1e1      	bne.n	80156be <_dtoa_r+0xa6e>
 80156fa:	f019 0f01 	tst.w	r9, #1
 80156fe:	d0de      	beq.n	80156be <_dtoa_r+0xa6e>
 8015700:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015704:	d1d8      	bne.n	80156b8 <_dtoa_r+0xa68>
 8015706:	9a01      	ldr	r2, [sp, #4]
 8015708:	2339      	movs	r3, #57	; 0x39
 801570a:	7013      	strb	r3, [r2, #0]
 801570c:	462b      	mov	r3, r5
 801570e:	461d      	mov	r5, r3
 8015710:	3b01      	subs	r3, #1
 8015712:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015716:	2a39      	cmp	r2, #57	; 0x39
 8015718:	d06c      	beq.n	80157f4 <_dtoa_r+0xba4>
 801571a:	3201      	adds	r2, #1
 801571c:	701a      	strb	r2, [r3, #0]
 801571e:	e747      	b.n	80155b0 <_dtoa_r+0x960>
 8015720:	2a00      	cmp	r2, #0
 8015722:	dd07      	ble.n	8015734 <_dtoa_r+0xae4>
 8015724:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015728:	d0ed      	beq.n	8015706 <_dtoa_r+0xab6>
 801572a:	9a01      	ldr	r2, [sp, #4]
 801572c:	f109 0301 	add.w	r3, r9, #1
 8015730:	7013      	strb	r3, [r2, #0]
 8015732:	e73d      	b.n	80155b0 <_dtoa_r+0x960>
 8015734:	9b04      	ldr	r3, [sp, #16]
 8015736:	9a08      	ldr	r2, [sp, #32]
 8015738:	f803 9c01 	strb.w	r9, [r3, #-1]
 801573c:	4293      	cmp	r3, r2
 801573e:	d043      	beq.n	80157c8 <_dtoa_r+0xb78>
 8015740:	4651      	mov	r1, sl
 8015742:	2300      	movs	r3, #0
 8015744:	220a      	movs	r2, #10
 8015746:	4620      	mov	r0, r4
 8015748:	f000 f922 	bl	8015990 <__multadd>
 801574c:	45b8      	cmp	r8, r7
 801574e:	4682      	mov	sl, r0
 8015750:	f04f 0300 	mov.w	r3, #0
 8015754:	f04f 020a 	mov.w	r2, #10
 8015758:	4641      	mov	r1, r8
 801575a:	4620      	mov	r0, r4
 801575c:	d107      	bne.n	801576e <_dtoa_r+0xb1e>
 801575e:	f000 f917 	bl	8015990 <__multadd>
 8015762:	4680      	mov	r8, r0
 8015764:	4607      	mov	r7, r0
 8015766:	9b04      	ldr	r3, [sp, #16]
 8015768:	3301      	adds	r3, #1
 801576a:	9304      	str	r3, [sp, #16]
 801576c:	e775      	b.n	801565a <_dtoa_r+0xa0a>
 801576e:	f000 f90f 	bl	8015990 <__multadd>
 8015772:	4639      	mov	r1, r7
 8015774:	4680      	mov	r8, r0
 8015776:	2300      	movs	r3, #0
 8015778:	220a      	movs	r2, #10
 801577a:	4620      	mov	r0, r4
 801577c:	f000 f908 	bl	8015990 <__multadd>
 8015780:	4607      	mov	r7, r0
 8015782:	e7f0      	b.n	8015766 <_dtoa_r+0xb16>
 8015784:	9b04      	ldr	r3, [sp, #16]
 8015786:	9301      	str	r3, [sp, #4]
 8015788:	9d00      	ldr	r5, [sp, #0]
 801578a:	4631      	mov	r1, r6
 801578c:	4650      	mov	r0, sl
 801578e:	f7ff f9d7 	bl	8014b40 <quorem>
 8015792:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015796:	9b00      	ldr	r3, [sp, #0]
 8015798:	f805 9b01 	strb.w	r9, [r5], #1
 801579c:	1aea      	subs	r2, r5, r3
 801579e:	9b01      	ldr	r3, [sp, #4]
 80157a0:	4293      	cmp	r3, r2
 80157a2:	dd07      	ble.n	80157b4 <_dtoa_r+0xb64>
 80157a4:	4651      	mov	r1, sl
 80157a6:	2300      	movs	r3, #0
 80157a8:	220a      	movs	r2, #10
 80157aa:	4620      	mov	r0, r4
 80157ac:	f000 f8f0 	bl	8015990 <__multadd>
 80157b0:	4682      	mov	sl, r0
 80157b2:	e7ea      	b.n	801578a <_dtoa_r+0xb3a>
 80157b4:	9b01      	ldr	r3, [sp, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	bfc8      	it	gt
 80157ba:	461d      	movgt	r5, r3
 80157bc:	9b00      	ldr	r3, [sp, #0]
 80157be:	bfd8      	it	le
 80157c0:	2501      	movle	r5, #1
 80157c2:	441d      	add	r5, r3
 80157c4:	f04f 0800 	mov.w	r8, #0
 80157c8:	4651      	mov	r1, sl
 80157ca:	2201      	movs	r2, #1
 80157cc:	4620      	mov	r0, r4
 80157ce:	f000 fad7 	bl	8015d80 <__lshift>
 80157d2:	4631      	mov	r1, r6
 80157d4:	4682      	mov	sl, r0
 80157d6:	f000 fb3f 	bl	8015e58 <__mcmp>
 80157da:	2800      	cmp	r0, #0
 80157dc:	dc96      	bgt.n	801570c <_dtoa_r+0xabc>
 80157de:	d102      	bne.n	80157e6 <_dtoa_r+0xb96>
 80157e0:	f019 0f01 	tst.w	r9, #1
 80157e4:	d192      	bne.n	801570c <_dtoa_r+0xabc>
 80157e6:	462b      	mov	r3, r5
 80157e8:	461d      	mov	r5, r3
 80157ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80157ee:	2a30      	cmp	r2, #48	; 0x30
 80157f0:	d0fa      	beq.n	80157e8 <_dtoa_r+0xb98>
 80157f2:	e6dd      	b.n	80155b0 <_dtoa_r+0x960>
 80157f4:	9a00      	ldr	r2, [sp, #0]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d189      	bne.n	801570e <_dtoa_r+0xabe>
 80157fa:	f10b 0b01 	add.w	fp, fp, #1
 80157fe:	2331      	movs	r3, #49	; 0x31
 8015800:	e796      	b.n	8015730 <_dtoa_r+0xae0>
 8015802:	4b0a      	ldr	r3, [pc, #40]	; (801582c <_dtoa_r+0xbdc>)
 8015804:	f7ff ba99 	b.w	8014d3a <_dtoa_r+0xea>
 8015808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801580a:	2b00      	cmp	r3, #0
 801580c:	f47f aa6d 	bne.w	8014cea <_dtoa_r+0x9a>
 8015810:	4b07      	ldr	r3, [pc, #28]	; (8015830 <_dtoa_r+0xbe0>)
 8015812:	f7ff ba92 	b.w	8014d3a <_dtoa_r+0xea>
 8015816:	9b01      	ldr	r3, [sp, #4]
 8015818:	2b00      	cmp	r3, #0
 801581a:	dcb5      	bgt.n	8015788 <_dtoa_r+0xb38>
 801581c:	9b07      	ldr	r3, [sp, #28]
 801581e:	2b02      	cmp	r3, #2
 8015820:	f73f aeb1 	bgt.w	8015586 <_dtoa_r+0x936>
 8015824:	e7b0      	b.n	8015788 <_dtoa_r+0xb38>
 8015826:	bf00      	nop
 8015828:	08019269 	.word	0x08019269
 801582c:	080191c4 	.word	0x080191c4
 8015830:	080191ed 	.word	0x080191ed

08015834 <_free_r>:
 8015834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015836:	2900      	cmp	r1, #0
 8015838:	d044      	beq.n	80158c4 <_free_r+0x90>
 801583a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801583e:	9001      	str	r0, [sp, #4]
 8015840:	2b00      	cmp	r3, #0
 8015842:	f1a1 0404 	sub.w	r4, r1, #4
 8015846:	bfb8      	it	lt
 8015848:	18e4      	addlt	r4, r4, r3
 801584a:	f7fe f89b 	bl	8013984 <__malloc_lock>
 801584e:	4a1e      	ldr	r2, [pc, #120]	; (80158c8 <_free_r+0x94>)
 8015850:	9801      	ldr	r0, [sp, #4]
 8015852:	6813      	ldr	r3, [r2, #0]
 8015854:	b933      	cbnz	r3, 8015864 <_free_r+0x30>
 8015856:	6063      	str	r3, [r4, #4]
 8015858:	6014      	str	r4, [r2, #0]
 801585a:	b003      	add	sp, #12
 801585c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015860:	f7fe b896 	b.w	8013990 <__malloc_unlock>
 8015864:	42a3      	cmp	r3, r4
 8015866:	d908      	bls.n	801587a <_free_r+0x46>
 8015868:	6825      	ldr	r5, [r4, #0]
 801586a:	1961      	adds	r1, r4, r5
 801586c:	428b      	cmp	r3, r1
 801586e:	bf01      	itttt	eq
 8015870:	6819      	ldreq	r1, [r3, #0]
 8015872:	685b      	ldreq	r3, [r3, #4]
 8015874:	1949      	addeq	r1, r1, r5
 8015876:	6021      	streq	r1, [r4, #0]
 8015878:	e7ed      	b.n	8015856 <_free_r+0x22>
 801587a:	461a      	mov	r2, r3
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	b10b      	cbz	r3, 8015884 <_free_r+0x50>
 8015880:	42a3      	cmp	r3, r4
 8015882:	d9fa      	bls.n	801587a <_free_r+0x46>
 8015884:	6811      	ldr	r1, [r2, #0]
 8015886:	1855      	adds	r5, r2, r1
 8015888:	42a5      	cmp	r5, r4
 801588a:	d10b      	bne.n	80158a4 <_free_r+0x70>
 801588c:	6824      	ldr	r4, [r4, #0]
 801588e:	4421      	add	r1, r4
 8015890:	1854      	adds	r4, r2, r1
 8015892:	42a3      	cmp	r3, r4
 8015894:	6011      	str	r1, [r2, #0]
 8015896:	d1e0      	bne.n	801585a <_free_r+0x26>
 8015898:	681c      	ldr	r4, [r3, #0]
 801589a:	685b      	ldr	r3, [r3, #4]
 801589c:	6053      	str	r3, [r2, #4]
 801589e:	440c      	add	r4, r1
 80158a0:	6014      	str	r4, [r2, #0]
 80158a2:	e7da      	b.n	801585a <_free_r+0x26>
 80158a4:	d902      	bls.n	80158ac <_free_r+0x78>
 80158a6:	230c      	movs	r3, #12
 80158a8:	6003      	str	r3, [r0, #0]
 80158aa:	e7d6      	b.n	801585a <_free_r+0x26>
 80158ac:	6825      	ldr	r5, [r4, #0]
 80158ae:	1961      	adds	r1, r4, r5
 80158b0:	428b      	cmp	r3, r1
 80158b2:	bf04      	itt	eq
 80158b4:	6819      	ldreq	r1, [r3, #0]
 80158b6:	685b      	ldreq	r3, [r3, #4]
 80158b8:	6063      	str	r3, [r4, #4]
 80158ba:	bf04      	itt	eq
 80158bc:	1949      	addeq	r1, r1, r5
 80158be:	6021      	streq	r1, [r4, #0]
 80158c0:	6054      	str	r4, [r2, #4]
 80158c2:	e7ca      	b.n	801585a <_free_r+0x26>
 80158c4:	b003      	add	sp, #12
 80158c6:	bd30      	pop	{r4, r5, pc}
 80158c8:	200009a4 	.word	0x200009a4

080158cc <_Balloc>:
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	69c6      	ldr	r6, [r0, #28]
 80158d0:	4604      	mov	r4, r0
 80158d2:	460d      	mov	r5, r1
 80158d4:	b976      	cbnz	r6, 80158f4 <_Balloc+0x28>
 80158d6:	2010      	movs	r0, #16
 80158d8:	f7fd ffa4 	bl	8013824 <malloc>
 80158dc:	4602      	mov	r2, r0
 80158de:	61e0      	str	r0, [r4, #28]
 80158e0:	b920      	cbnz	r0, 80158ec <_Balloc+0x20>
 80158e2:	4b18      	ldr	r3, [pc, #96]	; (8015944 <_Balloc+0x78>)
 80158e4:	4818      	ldr	r0, [pc, #96]	; (8015948 <_Balloc+0x7c>)
 80158e6:	216b      	movs	r1, #107	; 0x6b
 80158e8:	f7fd ff6c 	bl	80137c4 <__assert_func>
 80158ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80158f0:	6006      	str	r6, [r0, #0]
 80158f2:	60c6      	str	r6, [r0, #12]
 80158f4:	69e6      	ldr	r6, [r4, #28]
 80158f6:	68f3      	ldr	r3, [r6, #12]
 80158f8:	b183      	cbz	r3, 801591c <_Balloc+0x50>
 80158fa:	69e3      	ldr	r3, [r4, #28]
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015902:	b9b8      	cbnz	r0, 8015934 <_Balloc+0x68>
 8015904:	2101      	movs	r1, #1
 8015906:	fa01 f605 	lsl.w	r6, r1, r5
 801590a:	1d72      	adds	r2, r6, #5
 801590c:	0092      	lsls	r2, r2, #2
 801590e:	4620      	mov	r0, r4
 8015910:	f001 ff1a 	bl	8017748 <_calloc_r>
 8015914:	b160      	cbz	r0, 8015930 <_Balloc+0x64>
 8015916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801591a:	e00e      	b.n	801593a <_Balloc+0x6e>
 801591c:	2221      	movs	r2, #33	; 0x21
 801591e:	2104      	movs	r1, #4
 8015920:	4620      	mov	r0, r4
 8015922:	f001 ff11 	bl	8017748 <_calloc_r>
 8015926:	69e3      	ldr	r3, [r4, #28]
 8015928:	60f0      	str	r0, [r6, #12]
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d1e4      	bne.n	80158fa <_Balloc+0x2e>
 8015930:	2000      	movs	r0, #0
 8015932:	bd70      	pop	{r4, r5, r6, pc}
 8015934:	6802      	ldr	r2, [r0, #0]
 8015936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801593a:	2300      	movs	r3, #0
 801593c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015940:	e7f7      	b.n	8015932 <_Balloc+0x66>
 8015942:	bf00      	nop
 8015944:	080191fa 	.word	0x080191fa
 8015948:	0801927a 	.word	0x0801927a

0801594c <_Bfree>:
 801594c:	b570      	push	{r4, r5, r6, lr}
 801594e:	69c6      	ldr	r6, [r0, #28]
 8015950:	4605      	mov	r5, r0
 8015952:	460c      	mov	r4, r1
 8015954:	b976      	cbnz	r6, 8015974 <_Bfree+0x28>
 8015956:	2010      	movs	r0, #16
 8015958:	f7fd ff64 	bl	8013824 <malloc>
 801595c:	4602      	mov	r2, r0
 801595e:	61e8      	str	r0, [r5, #28]
 8015960:	b920      	cbnz	r0, 801596c <_Bfree+0x20>
 8015962:	4b09      	ldr	r3, [pc, #36]	; (8015988 <_Bfree+0x3c>)
 8015964:	4809      	ldr	r0, [pc, #36]	; (801598c <_Bfree+0x40>)
 8015966:	218f      	movs	r1, #143	; 0x8f
 8015968:	f7fd ff2c 	bl	80137c4 <__assert_func>
 801596c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015970:	6006      	str	r6, [r0, #0]
 8015972:	60c6      	str	r6, [r0, #12]
 8015974:	b13c      	cbz	r4, 8015986 <_Bfree+0x3a>
 8015976:	69eb      	ldr	r3, [r5, #28]
 8015978:	6862      	ldr	r2, [r4, #4]
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015980:	6021      	str	r1, [r4, #0]
 8015982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015986:	bd70      	pop	{r4, r5, r6, pc}
 8015988:	080191fa 	.word	0x080191fa
 801598c:	0801927a 	.word	0x0801927a

08015990 <__multadd>:
 8015990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015994:	690d      	ldr	r5, [r1, #16]
 8015996:	4607      	mov	r7, r0
 8015998:	460c      	mov	r4, r1
 801599a:	461e      	mov	r6, r3
 801599c:	f101 0c14 	add.w	ip, r1, #20
 80159a0:	2000      	movs	r0, #0
 80159a2:	f8dc 3000 	ldr.w	r3, [ip]
 80159a6:	b299      	uxth	r1, r3
 80159a8:	fb02 6101 	mla	r1, r2, r1, r6
 80159ac:	0c1e      	lsrs	r6, r3, #16
 80159ae:	0c0b      	lsrs	r3, r1, #16
 80159b0:	fb02 3306 	mla	r3, r2, r6, r3
 80159b4:	b289      	uxth	r1, r1
 80159b6:	3001      	adds	r0, #1
 80159b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80159bc:	4285      	cmp	r5, r0
 80159be:	f84c 1b04 	str.w	r1, [ip], #4
 80159c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80159c6:	dcec      	bgt.n	80159a2 <__multadd+0x12>
 80159c8:	b30e      	cbz	r6, 8015a0e <__multadd+0x7e>
 80159ca:	68a3      	ldr	r3, [r4, #8]
 80159cc:	42ab      	cmp	r3, r5
 80159ce:	dc19      	bgt.n	8015a04 <__multadd+0x74>
 80159d0:	6861      	ldr	r1, [r4, #4]
 80159d2:	4638      	mov	r0, r7
 80159d4:	3101      	adds	r1, #1
 80159d6:	f7ff ff79 	bl	80158cc <_Balloc>
 80159da:	4680      	mov	r8, r0
 80159dc:	b928      	cbnz	r0, 80159ea <__multadd+0x5a>
 80159de:	4602      	mov	r2, r0
 80159e0:	4b0c      	ldr	r3, [pc, #48]	; (8015a14 <__multadd+0x84>)
 80159e2:	480d      	ldr	r0, [pc, #52]	; (8015a18 <__multadd+0x88>)
 80159e4:	21ba      	movs	r1, #186	; 0xba
 80159e6:	f7fd feed 	bl	80137c4 <__assert_func>
 80159ea:	6922      	ldr	r2, [r4, #16]
 80159ec:	3202      	adds	r2, #2
 80159ee:	f104 010c 	add.w	r1, r4, #12
 80159f2:	0092      	lsls	r2, r2, #2
 80159f4:	300c      	adds	r0, #12
 80159f6:	f7ff f88e 	bl	8014b16 <memcpy>
 80159fa:	4621      	mov	r1, r4
 80159fc:	4638      	mov	r0, r7
 80159fe:	f7ff ffa5 	bl	801594c <_Bfree>
 8015a02:	4644      	mov	r4, r8
 8015a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a08:	3501      	adds	r5, #1
 8015a0a:	615e      	str	r6, [r3, #20]
 8015a0c:	6125      	str	r5, [r4, #16]
 8015a0e:	4620      	mov	r0, r4
 8015a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a14:	08019269 	.word	0x08019269
 8015a18:	0801927a 	.word	0x0801927a

08015a1c <__s2b>:
 8015a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a20:	460c      	mov	r4, r1
 8015a22:	4615      	mov	r5, r2
 8015a24:	461f      	mov	r7, r3
 8015a26:	2209      	movs	r2, #9
 8015a28:	3308      	adds	r3, #8
 8015a2a:	4606      	mov	r6, r0
 8015a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a30:	2100      	movs	r1, #0
 8015a32:	2201      	movs	r2, #1
 8015a34:	429a      	cmp	r2, r3
 8015a36:	db09      	blt.n	8015a4c <__s2b+0x30>
 8015a38:	4630      	mov	r0, r6
 8015a3a:	f7ff ff47 	bl	80158cc <_Balloc>
 8015a3e:	b940      	cbnz	r0, 8015a52 <__s2b+0x36>
 8015a40:	4602      	mov	r2, r0
 8015a42:	4b19      	ldr	r3, [pc, #100]	; (8015aa8 <__s2b+0x8c>)
 8015a44:	4819      	ldr	r0, [pc, #100]	; (8015aac <__s2b+0x90>)
 8015a46:	21d3      	movs	r1, #211	; 0xd3
 8015a48:	f7fd febc 	bl	80137c4 <__assert_func>
 8015a4c:	0052      	lsls	r2, r2, #1
 8015a4e:	3101      	adds	r1, #1
 8015a50:	e7f0      	b.n	8015a34 <__s2b+0x18>
 8015a52:	9b08      	ldr	r3, [sp, #32]
 8015a54:	6143      	str	r3, [r0, #20]
 8015a56:	2d09      	cmp	r5, #9
 8015a58:	f04f 0301 	mov.w	r3, #1
 8015a5c:	6103      	str	r3, [r0, #16]
 8015a5e:	dd16      	ble.n	8015a8e <__s2b+0x72>
 8015a60:	f104 0909 	add.w	r9, r4, #9
 8015a64:	46c8      	mov	r8, r9
 8015a66:	442c      	add	r4, r5
 8015a68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015a6c:	4601      	mov	r1, r0
 8015a6e:	3b30      	subs	r3, #48	; 0x30
 8015a70:	220a      	movs	r2, #10
 8015a72:	4630      	mov	r0, r6
 8015a74:	f7ff ff8c 	bl	8015990 <__multadd>
 8015a78:	45a0      	cmp	r8, r4
 8015a7a:	d1f5      	bne.n	8015a68 <__s2b+0x4c>
 8015a7c:	f1a5 0408 	sub.w	r4, r5, #8
 8015a80:	444c      	add	r4, r9
 8015a82:	1b2d      	subs	r5, r5, r4
 8015a84:	1963      	adds	r3, r4, r5
 8015a86:	42bb      	cmp	r3, r7
 8015a88:	db04      	blt.n	8015a94 <__s2b+0x78>
 8015a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a8e:	340a      	adds	r4, #10
 8015a90:	2509      	movs	r5, #9
 8015a92:	e7f6      	b.n	8015a82 <__s2b+0x66>
 8015a94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a98:	4601      	mov	r1, r0
 8015a9a:	3b30      	subs	r3, #48	; 0x30
 8015a9c:	220a      	movs	r2, #10
 8015a9e:	4630      	mov	r0, r6
 8015aa0:	f7ff ff76 	bl	8015990 <__multadd>
 8015aa4:	e7ee      	b.n	8015a84 <__s2b+0x68>
 8015aa6:	bf00      	nop
 8015aa8:	08019269 	.word	0x08019269
 8015aac:	0801927a 	.word	0x0801927a

08015ab0 <__hi0bits>:
 8015ab0:	0c03      	lsrs	r3, r0, #16
 8015ab2:	041b      	lsls	r3, r3, #16
 8015ab4:	b9d3      	cbnz	r3, 8015aec <__hi0bits+0x3c>
 8015ab6:	0400      	lsls	r0, r0, #16
 8015ab8:	2310      	movs	r3, #16
 8015aba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015abe:	bf04      	itt	eq
 8015ac0:	0200      	lsleq	r0, r0, #8
 8015ac2:	3308      	addeq	r3, #8
 8015ac4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015ac8:	bf04      	itt	eq
 8015aca:	0100      	lsleq	r0, r0, #4
 8015acc:	3304      	addeq	r3, #4
 8015ace:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015ad2:	bf04      	itt	eq
 8015ad4:	0080      	lsleq	r0, r0, #2
 8015ad6:	3302      	addeq	r3, #2
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	db05      	blt.n	8015ae8 <__hi0bits+0x38>
 8015adc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015ae0:	f103 0301 	add.w	r3, r3, #1
 8015ae4:	bf08      	it	eq
 8015ae6:	2320      	moveq	r3, #32
 8015ae8:	4618      	mov	r0, r3
 8015aea:	4770      	bx	lr
 8015aec:	2300      	movs	r3, #0
 8015aee:	e7e4      	b.n	8015aba <__hi0bits+0xa>

08015af0 <__lo0bits>:
 8015af0:	6803      	ldr	r3, [r0, #0]
 8015af2:	f013 0207 	ands.w	r2, r3, #7
 8015af6:	d00c      	beq.n	8015b12 <__lo0bits+0x22>
 8015af8:	07d9      	lsls	r1, r3, #31
 8015afa:	d422      	bmi.n	8015b42 <__lo0bits+0x52>
 8015afc:	079a      	lsls	r2, r3, #30
 8015afe:	bf49      	itett	mi
 8015b00:	085b      	lsrmi	r3, r3, #1
 8015b02:	089b      	lsrpl	r3, r3, #2
 8015b04:	6003      	strmi	r3, [r0, #0]
 8015b06:	2201      	movmi	r2, #1
 8015b08:	bf5c      	itt	pl
 8015b0a:	6003      	strpl	r3, [r0, #0]
 8015b0c:	2202      	movpl	r2, #2
 8015b0e:	4610      	mov	r0, r2
 8015b10:	4770      	bx	lr
 8015b12:	b299      	uxth	r1, r3
 8015b14:	b909      	cbnz	r1, 8015b1a <__lo0bits+0x2a>
 8015b16:	0c1b      	lsrs	r3, r3, #16
 8015b18:	2210      	movs	r2, #16
 8015b1a:	b2d9      	uxtb	r1, r3
 8015b1c:	b909      	cbnz	r1, 8015b22 <__lo0bits+0x32>
 8015b1e:	3208      	adds	r2, #8
 8015b20:	0a1b      	lsrs	r3, r3, #8
 8015b22:	0719      	lsls	r1, r3, #28
 8015b24:	bf04      	itt	eq
 8015b26:	091b      	lsreq	r3, r3, #4
 8015b28:	3204      	addeq	r2, #4
 8015b2a:	0799      	lsls	r1, r3, #30
 8015b2c:	bf04      	itt	eq
 8015b2e:	089b      	lsreq	r3, r3, #2
 8015b30:	3202      	addeq	r2, #2
 8015b32:	07d9      	lsls	r1, r3, #31
 8015b34:	d403      	bmi.n	8015b3e <__lo0bits+0x4e>
 8015b36:	085b      	lsrs	r3, r3, #1
 8015b38:	f102 0201 	add.w	r2, r2, #1
 8015b3c:	d003      	beq.n	8015b46 <__lo0bits+0x56>
 8015b3e:	6003      	str	r3, [r0, #0]
 8015b40:	e7e5      	b.n	8015b0e <__lo0bits+0x1e>
 8015b42:	2200      	movs	r2, #0
 8015b44:	e7e3      	b.n	8015b0e <__lo0bits+0x1e>
 8015b46:	2220      	movs	r2, #32
 8015b48:	e7e1      	b.n	8015b0e <__lo0bits+0x1e>
	...

08015b4c <__i2b>:
 8015b4c:	b510      	push	{r4, lr}
 8015b4e:	460c      	mov	r4, r1
 8015b50:	2101      	movs	r1, #1
 8015b52:	f7ff febb 	bl	80158cc <_Balloc>
 8015b56:	4602      	mov	r2, r0
 8015b58:	b928      	cbnz	r0, 8015b66 <__i2b+0x1a>
 8015b5a:	4b05      	ldr	r3, [pc, #20]	; (8015b70 <__i2b+0x24>)
 8015b5c:	4805      	ldr	r0, [pc, #20]	; (8015b74 <__i2b+0x28>)
 8015b5e:	f240 1145 	movw	r1, #325	; 0x145
 8015b62:	f7fd fe2f 	bl	80137c4 <__assert_func>
 8015b66:	2301      	movs	r3, #1
 8015b68:	6144      	str	r4, [r0, #20]
 8015b6a:	6103      	str	r3, [r0, #16]
 8015b6c:	bd10      	pop	{r4, pc}
 8015b6e:	bf00      	nop
 8015b70:	08019269 	.word	0x08019269
 8015b74:	0801927a 	.word	0x0801927a

08015b78 <__multiply>:
 8015b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b7c:	4691      	mov	r9, r2
 8015b7e:	690a      	ldr	r2, [r1, #16]
 8015b80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	bfb8      	it	lt
 8015b88:	460b      	movlt	r3, r1
 8015b8a:	460c      	mov	r4, r1
 8015b8c:	bfbc      	itt	lt
 8015b8e:	464c      	movlt	r4, r9
 8015b90:	4699      	movlt	r9, r3
 8015b92:	6927      	ldr	r7, [r4, #16]
 8015b94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015b98:	68a3      	ldr	r3, [r4, #8]
 8015b9a:	6861      	ldr	r1, [r4, #4]
 8015b9c:	eb07 060a 	add.w	r6, r7, sl
 8015ba0:	42b3      	cmp	r3, r6
 8015ba2:	b085      	sub	sp, #20
 8015ba4:	bfb8      	it	lt
 8015ba6:	3101      	addlt	r1, #1
 8015ba8:	f7ff fe90 	bl	80158cc <_Balloc>
 8015bac:	b930      	cbnz	r0, 8015bbc <__multiply+0x44>
 8015bae:	4602      	mov	r2, r0
 8015bb0:	4b44      	ldr	r3, [pc, #272]	; (8015cc4 <__multiply+0x14c>)
 8015bb2:	4845      	ldr	r0, [pc, #276]	; (8015cc8 <__multiply+0x150>)
 8015bb4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015bb8:	f7fd fe04 	bl	80137c4 <__assert_func>
 8015bbc:	f100 0514 	add.w	r5, r0, #20
 8015bc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015bc4:	462b      	mov	r3, r5
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	4543      	cmp	r3, r8
 8015bca:	d321      	bcc.n	8015c10 <__multiply+0x98>
 8015bcc:	f104 0314 	add.w	r3, r4, #20
 8015bd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015bd4:	f109 0314 	add.w	r3, r9, #20
 8015bd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015bdc:	9202      	str	r2, [sp, #8]
 8015bde:	1b3a      	subs	r2, r7, r4
 8015be0:	3a15      	subs	r2, #21
 8015be2:	f022 0203 	bic.w	r2, r2, #3
 8015be6:	3204      	adds	r2, #4
 8015be8:	f104 0115 	add.w	r1, r4, #21
 8015bec:	428f      	cmp	r7, r1
 8015bee:	bf38      	it	cc
 8015bf0:	2204      	movcc	r2, #4
 8015bf2:	9201      	str	r2, [sp, #4]
 8015bf4:	9a02      	ldr	r2, [sp, #8]
 8015bf6:	9303      	str	r3, [sp, #12]
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d80c      	bhi.n	8015c16 <__multiply+0x9e>
 8015bfc:	2e00      	cmp	r6, #0
 8015bfe:	dd03      	ble.n	8015c08 <__multiply+0x90>
 8015c00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d05b      	beq.n	8015cc0 <__multiply+0x148>
 8015c08:	6106      	str	r6, [r0, #16]
 8015c0a:	b005      	add	sp, #20
 8015c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c10:	f843 2b04 	str.w	r2, [r3], #4
 8015c14:	e7d8      	b.n	8015bc8 <__multiply+0x50>
 8015c16:	f8b3 a000 	ldrh.w	sl, [r3]
 8015c1a:	f1ba 0f00 	cmp.w	sl, #0
 8015c1e:	d024      	beq.n	8015c6a <__multiply+0xf2>
 8015c20:	f104 0e14 	add.w	lr, r4, #20
 8015c24:	46a9      	mov	r9, r5
 8015c26:	f04f 0c00 	mov.w	ip, #0
 8015c2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015c2e:	f8d9 1000 	ldr.w	r1, [r9]
 8015c32:	fa1f fb82 	uxth.w	fp, r2
 8015c36:	b289      	uxth	r1, r1
 8015c38:	fb0a 110b 	mla	r1, sl, fp, r1
 8015c3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015c40:	f8d9 2000 	ldr.w	r2, [r9]
 8015c44:	4461      	add	r1, ip
 8015c46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015c4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8015c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015c52:	b289      	uxth	r1, r1
 8015c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015c58:	4577      	cmp	r7, lr
 8015c5a:	f849 1b04 	str.w	r1, [r9], #4
 8015c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015c62:	d8e2      	bhi.n	8015c2a <__multiply+0xb2>
 8015c64:	9a01      	ldr	r2, [sp, #4]
 8015c66:	f845 c002 	str.w	ip, [r5, r2]
 8015c6a:	9a03      	ldr	r2, [sp, #12]
 8015c6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015c70:	3304      	adds	r3, #4
 8015c72:	f1b9 0f00 	cmp.w	r9, #0
 8015c76:	d021      	beq.n	8015cbc <__multiply+0x144>
 8015c78:	6829      	ldr	r1, [r5, #0]
 8015c7a:	f104 0c14 	add.w	ip, r4, #20
 8015c7e:	46ae      	mov	lr, r5
 8015c80:	f04f 0a00 	mov.w	sl, #0
 8015c84:	f8bc b000 	ldrh.w	fp, [ip]
 8015c88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015c8c:	fb09 220b 	mla	r2, r9, fp, r2
 8015c90:	4452      	add	r2, sl
 8015c92:	b289      	uxth	r1, r1
 8015c94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015c98:	f84e 1b04 	str.w	r1, [lr], #4
 8015c9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015ca0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015ca4:	f8be 1000 	ldrh.w	r1, [lr]
 8015ca8:	fb09 110a 	mla	r1, r9, sl, r1
 8015cac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015cb0:	4567      	cmp	r7, ip
 8015cb2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015cb6:	d8e5      	bhi.n	8015c84 <__multiply+0x10c>
 8015cb8:	9a01      	ldr	r2, [sp, #4]
 8015cba:	50a9      	str	r1, [r5, r2]
 8015cbc:	3504      	adds	r5, #4
 8015cbe:	e799      	b.n	8015bf4 <__multiply+0x7c>
 8015cc0:	3e01      	subs	r6, #1
 8015cc2:	e79b      	b.n	8015bfc <__multiply+0x84>
 8015cc4:	08019269 	.word	0x08019269
 8015cc8:	0801927a 	.word	0x0801927a

08015ccc <__pow5mult>:
 8015ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cd0:	4615      	mov	r5, r2
 8015cd2:	f012 0203 	ands.w	r2, r2, #3
 8015cd6:	4606      	mov	r6, r0
 8015cd8:	460f      	mov	r7, r1
 8015cda:	d007      	beq.n	8015cec <__pow5mult+0x20>
 8015cdc:	4c25      	ldr	r4, [pc, #148]	; (8015d74 <__pow5mult+0xa8>)
 8015cde:	3a01      	subs	r2, #1
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015ce6:	f7ff fe53 	bl	8015990 <__multadd>
 8015cea:	4607      	mov	r7, r0
 8015cec:	10ad      	asrs	r5, r5, #2
 8015cee:	d03d      	beq.n	8015d6c <__pow5mult+0xa0>
 8015cf0:	69f4      	ldr	r4, [r6, #28]
 8015cf2:	b97c      	cbnz	r4, 8015d14 <__pow5mult+0x48>
 8015cf4:	2010      	movs	r0, #16
 8015cf6:	f7fd fd95 	bl	8013824 <malloc>
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	61f0      	str	r0, [r6, #28]
 8015cfe:	b928      	cbnz	r0, 8015d0c <__pow5mult+0x40>
 8015d00:	4b1d      	ldr	r3, [pc, #116]	; (8015d78 <__pow5mult+0xac>)
 8015d02:	481e      	ldr	r0, [pc, #120]	; (8015d7c <__pow5mult+0xb0>)
 8015d04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015d08:	f7fd fd5c 	bl	80137c4 <__assert_func>
 8015d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d10:	6004      	str	r4, [r0, #0]
 8015d12:	60c4      	str	r4, [r0, #12]
 8015d14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d1c:	b94c      	cbnz	r4, 8015d32 <__pow5mult+0x66>
 8015d1e:	f240 2171 	movw	r1, #625	; 0x271
 8015d22:	4630      	mov	r0, r6
 8015d24:	f7ff ff12 	bl	8015b4c <__i2b>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d2e:	4604      	mov	r4, r0
 8015d30:	6003      	str	r3, [r0, #0]
 8015d32:	f04f 0900 	mov.w	r9, #0
 8015d36:	07eb      	lsls	r3, r5, #31
 8015d38:	d50a      	bpl.n	8015d50 <__pow5mult+0x84>
 8015d3a:	4639      	mov	r1, r7
 8015d3c:	4622      	mov	r2, r4
 8015d3e:	4630      	mov	r0, r6
 8015d40:	f7ff ff1a 	bl	8015b78 <__multiply>
 8015d44:	4639      	mov	r1, r7
 8015d46:	4680      	mov	r8, r0
 8015d48:	4630      	mov	r0, r6
 8015d4a:	f7ff fdff 	bl	801594c <_Bfree>
 8015d4e:	4647      	mov	r7, r8
 8015d50:	106d      	asrs	r5, r5, #1
 8015d52:	d00b      	beq.n	8015d6c <__pow5mult+0xa0>
 8015d54:	6820      	ldr	r0, [r4, #0]
 8015d56:	b938      	cbnz	r0, 8015d68 <__pow5mult+0x9c>
 8015d58:	4622      	mov	r2, r4
 8015d5a:	4621      	mov	r1, r4
 8015d5c:	4630      	mov	r0, r6
 8015d5e:	f7ff ff0b 	bl	8015b78 <__multiply>
 8015d62:	6020      	str	r0, [r4, #0]
 8015d64:	f8c0 9000 	str.w	r9, [r0]
 8015d68:	4604      	mov	r4, r0
 8015d6a:	e7e4      	b.n	8015d36 <__pow5mult+0x6a>
 8015d6c:	4638      	mov	r0, r7
 8015d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d72:	bf00      	nop
 8015d74:	080193c8 	.word	0x080193c8
 8015d78:	080191fa 	.word	0x080191fa
 8015d7c:	0801927a 	.word	0x0801927a

08015d80 <__lshift>:
 8015d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d84:	460c      	mov	r4, r1
 8015d86:	6849      	ldr	r1, [r1, #4]
 8015d88:	6923      	ldr	r3, [r4, #16]
 8015d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d8e:	68a3      	ldr	r3, [r4, #8]
 8015d90:	4607      	mov	r7, r0
 8015d92:	4691      	mov	r9, r2
 8015d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d98:	f108 0601 	add.w	r6, r8, #1
 8015d9c:	42b3      	cmp	r3, r6
 8015d9e:	db0b      	blt.n	8015db8 <__lshift+0x38>
 8015da0:	4638      	mov	r0, r7
 8015da2:	f7ff fd93 	bl	80158cc <_Balloc>
 8015da6:	4605      	mov	r5, r0
 8015da8:	b948      	cbnz	r0, 8015dbe <__lshift+0x3e>
 8015daa:	4602      	mov	r2, r0
 8015dac:	4b28      	ldr	r3, [pc, #160]	; (8015e50 <__lshift+0xd0>)
 8015dae:	4829      	ldr	r0, [pc, #164]	; (8015e54 <__lshift+0xd4>)
 8015db0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015db4:	f7fd fd06 	bl	80137c4 <__assert_func>
 8015db8:	3101      	adds	r1, #1
 8015dba:	005b      	lsls	r3, r3, #1
 8015dbc:	e7ee      	b.n	8015d9c <__lshift+0x1c>
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	f100 0114 	add.w	r1, r0, #20
 8015dc4:	f100 0210 	add.w	r2, r0, #16
 8015dc8:	4618      	mov	r0, r3
 8015dca:	4553      	cmp	r3, sl
 8015dcc:	db33      	blt.n	8015e36 <__lshift+0xb6>
 8015dce:	6920      	ldr	r0, [r4, #16]
 8015dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015dd4:	f104 0314 	add.w	r3, r4, #20
 8015dd8:	f019 091f 	ands.w	r9, r9, #31
 8015ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015de0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015de4:	d02b      	beq.n	8015e3e <__lshift+0xbe>
 8015de6:	f1c9 0e20 	rsb	lr, r9, #32
 8015dea:	468a      	mov	sl, r1
 8015dec:	2200      	movs	r2, #0
 8015dee:	6818      	ldr	r0, [r3, #0]
 8015df0:	fa00 f009 	lsl.w	r0, r0, r9
 8015df4:	4310      	orrs	r0, r2
 8015df6:	f84a 0b04 	str.w	r0, [sl], #4
 8015dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dfe:	459c      	cmp	ip, r3
 8015e00:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e04:	d8f3      	bhi.n	8015dee <__lshift+0x6e>
 8015e06:	ebac 0304 	sub.w	r3, ip, r4
 8015e0a:	3b15      	subs	r3, #21
 8015e0c:	f023 0303 	bic.w	r3, r3, #3
 8015e10:	3304      	adds	r3, #4
 8015e12:	f104 0015 	add.w	r0, r4, #21
 8015e16:	4584      	cmp	ip, r0
 8015e18:	bf38      	it	cc
 8015e1a:	2304      	movcc	r3, #4
 8015e1c:	50ca      	str	r2, [r1, r3]
 8015e1e:	b10a      	cbz	r2, 8015e24 <__lshift+0xa4>
 8015e20:	f108 0602 	add.w	r6, r8, #2
 8015e24:	3e01      	subs	r6, #1
 8015e26:	4638      	mov	r0, r7
 8015e28:	612e      	str	r6, [r5, #16]
 8015e2a:	4621      	mov	r1, r4
 8015e2c:	f7ff fd8e 	bl	801594c <_Bfree>
 8015e30:	4628      	mov	r0, r5
 8015e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	e7c5      	b.n	8015dca <__lshift+0x4a>
 8015e3e:	3904      	subs	r1, #4
 8015e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e48:	459c      	cmp	ip, r3
 8015e4a:	d8f9      	bhi.n	8015e40 <__lshift+0xc0>
 8015e4c:	e7ea      	b.n	8015e24 <__lshift+0xa4>
 8015e4e:	bf00      	nop
 8015e50:	08019269 	.word	0x08019269
 8015e54:	0801927a 	.word	0x0801927a

08015e58 <__mcmp>:
 8015e58:	b530      	push	{r4, r5, lr}
 8015e5a:	6902      	ldr	r2, [r0, #16]
 8015e5c:	690c      	ldr	r4, [r1, #16]
 8015e5e:	1b12      	subs	r2, r2, r4
 8015e60:	d10e      	bne.n	8015e80 <__mcmp+0x28>
 8015e62:	f100 0314 	add.w	r3, r0, #20
 8015e66:	3114      	adds	r1, #20
 8015e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015e78:	42a5      	cmp	r5, r4
 8015e7a:	d003      	beq.n	8015e84 <__mcmp+0x2c>
 8015e7c:	d305      	bcc.n	8015e8a <__mcmp+0x32>
 8015e7e:	2201      	movs	r2, #1
 8015e80:	4610      	mov	r0, r2
 8015e82:	bd30      	pop	{r4, r5, pc}
 8015e84:	4283      	cmp	r3, r0
 8015e86:	d3f3      	bcc.n	8015e70 <__mcmp+0x18>
 8015e88:	e7fa      	b.n	8015e80 <__mcmp+0x28>
 8015e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e8e:	e7f7      	b.n	8015e80 <__mcmp+0x28>

08015e90 <__mdiff>:
 8015e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e94:	460c      	mov	r4, r1
 8015e96:	4606      	mov	r6, r0
 8015e98:	4611      	mov	r1, r2
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	4690      	mov	r8, r2
 8015e9e:	f7ff ffdb 	bl	8015e58 <__mcmp>
 8015ea2:	1e05      	subs	r5, r0, #0
 8015ea4:	d110      	bne.n	8015ec8 <__mdiff+0x38>
 8015ea6:	4629      	mov	r1, r5
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	f7ff fd0f 	bl	80158cc <_Balloc>
 8015eae:	b930      	cbnz	r0, 8015ebe <__mdiff+0x2e>
 8015eb0:	4b3a      	ldr	r3, [pc, #232]	; (8015f9c <__mdiff+0x10c>)
 8015eb2:	4602      	mov	r2, r0
 8015eb4:	f240 2137 	movw	r1, #567	; 0x237
 8015eb8:	4839      	ldr	r0, [pc, #228]	; (8015fa0 <__mdiff+0x110>)
 8015eba:	f7fd fc83 	bl	80137c4 <__assert_func>
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec8:	bfa4      	itt	ge
 8015eca:	4643      	movge	r3, r8
 8015ecc:	46a0      	movge	r8, r4
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015ed4:	bfa6      	itte	ge
 8015ed6:	461c      	movge	r4, r3
 8015ed8:	2500      	movge	r5, #0
 8015eda:	2501      	movlt	r5, #1
 8015edc:	f7ff fcf6 	bl	80158cc <_Balloc>
 8015ee0:	b920      	cbnz	r0, 8015eec <__mdiff+0x5c>
 8015ee2:	4b2e      	ldr	r3, [pc, #184]	; (8015f9c <__mdiff+0x10c>)
 8015ee4:	4602      	mov	r2, r0
 8015ee6:	f240 2145 	movw	r1, #581	; 0x245
 8015eea:	e7e5      	b.n	8015eb8 <__mdiff+0x28>
 8015eec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015ef0:	6926      	ldr	r6, [r4, #16]
 8015ef2:	60c5      	str	r5, [r0, #12]
 8015ef4:	f104 0914 	add.w	r9, r4, #20
 8015ef8:	f108 0514 	add.w	r5, r8, #20
 8015efc:	f100 0e14 	add.w	lr, r0, #20
 8015f00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015f04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015f08:	f108 0210 	add.w	r2, r8, #16
 8015f0c:	46f2      	mov	sl, lr
 8015f0e:	2100      	movs	r1, #0
 8015f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8015f14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015f18:	fa11 f88b 	uxtah	r8, r1, fp
 8015f1c:	b299      	uxth	r1, r3
 8015f1e:	0c1b      	lsrs	r3, r3, #16
 8015f20:	eba8 0801 	sub.w	r8, r8, r1
 8015f24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015f28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015f2c:	fa1f f888 	uxth.w	r8, r8
 8015f30:	1419      	asrs	r1, r3, #16
 8015f32:	454e      	cmp	r6, r9
 8015f34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015f38:	f84a 3b04 	str.w	r3, [sl], #4
 8015f3c:	d8e8      	bhi.n	8015f10 <__mdiff+0x80>
 8015f3e:	1b33      	subs	r3, r6, r4
 8015f40:	3b15      	subs	r3, #21
 8015f42:	f023 0303 	bic.w	r3, r3, #3
 8015f46:	3304      	adds	r3, #4
 8015f48:	3415      	adds	r4, #21
 8015f4a:	42a6      	cmp	r6, r4
 8015f4c:	bf38      	it	cc
 8015f4e:	2304      	movcc	r3, #4
 8015f50:	441d      	add	r5, r3
 8015f52:	4473      	add	r3, lr
 8015f54:	469e      	mov	lr, r3
 8015f56:	462e      	mov	r6, r5
 8015f58:	4566      	cmp	r6, ip
 8015f5a:	d30e      	bcc.n	8015f7a <__mdiff+0xea>
 8015f5c:	f10c 0203 	add.w	r2, ip, #3
 8015f60:	1b52      	subs	r2, r2, r5
 8015f62:	f022 0203 	bic.w	r2, r2, #3
 8015f66:	3d03      	subs	r5, #3
 8015f68:	45ac      	cmp	ip, r5
 8015f6a:	bf38      	it	cc
 8015f6c:	2200      	movcc	r2, #0
 8015f6e:	4413      	add	r3, r2
 8015f70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015f74:	b17a      	cbz	r2, 8015f96 <__mdiff+0x106>
 8015f76:	6107      	str	r7, [r0, #16]
 8015f78:	e7a4      	b.n	8015ec4 <__mdiff+0x34>
 8015f7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8015f7e:	fa11 f288 	uxtah	r2, r1, r8
 8015f82:	1414      	asrs	r4, r2, #16
 8015f84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015f88:	b292      	uxth	r2, r2
 8015f8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015f8e:	f84e 2b04 	str.w	r2, [lr], #4
 8015f92:	1421      	asrs	r1, r4, #16
 8015f94:	e7e0      	b.n	8015f58 <__mdiff+0xc8>
 8015f96:	3f01      	subs	r7, #1
 8015f98:	e7ea      	b.n	8015f70 <__mdiff+0xe0>
 8015f9a:	bf00      	nop
 8015f9c:	08019269 	.word	0x08019269
 8015fa0:	0801927a 	.word	0x0801927a

08015fa4 <__ulp>:
 8015fa4:	b082      	sub	sp, #8
 8015fa6:	ed8d 0b00 	vstr	d0, [sp]
 8015faa:	9a01      	ldr	r2, [sp, #4]
 8015fac:	4b0f      	ldr	r3, [pc, #60]	; (8015fec <__ulp+0x48>)
 8015fae:	4013      	ands	r3, r2
 8015fb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	dc08      	bgt.n	8015fca <__ulp+0x26>
 8015fb8:	425b      	negs	r3, r3
 8015fba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015fbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015fc2:	da04      	bge.n	8015fce <__ulp+0x2a>
 8015fc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015fc8:	4113      	asrs	r3, r2
 8015fca:	2200      	movs	r2, #0
 8015fcc:	e008      	b.n	8015fe0 <__ulp+0x3c>
 8015fce:	f1a2 0314 	sub.w	r3, r2, #20
 8015fd2:	2b1e      	cmp	r3, #30
 8015fd4:	bfda      	itte	le
 8015fd6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015fda:	40da      	lsrle	r2, r3
 8015fdc:	2201      	movgt	r2, #1
 8015fde:	2300      	movs	r3, #0
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	4610      	mov	r0, r2
 8015fe4:	ec41 0b10 	vmov	d0, r0, r1
 8015fe8:	b002      	add	sp, #8
 8015fea:	4770      	bx	lr
 8015fec:	7ff00000 	.word	0x7ff00000

08015ff0 <__b2d>:
 8015ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff4:	6906      	ldr	r6, [r0, #16]
 8015ff6:	f100 0814 	add.w	r8, r0, #20
 8015ffa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015ffe:	1f37      	subs	r7, r6, #4
 8016000:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016004:	4610      	mov	r0, r2
 8016006:	f7ff fd53 	bl	8015ab0 <__hi0bits>
 801600a:	f1c0 0320 	rsb	r3, r0, #32
 801600e:	280a      	cmp	r0, #10
 8016010:	600b      	str	r3, [r1, #0]
 8016012:	491b      	ldr	r1, [pc, #108]	; (8016080 <__b2d+0x90>)
 8016014:	dc15      	bgt.n	8016042 <__b2d+0x52>
 8016016:	f1c0 0c0b 	rsb	ip, r0, #11
 801601a:	fa22 f30c 	lsr.w	r3, r2, ip
 801601e:	45b8      	cmp	r8, r7
 8016020:	ea43 0501 	orr.w	r5, r3, r1
 8016024:	bf34      	ite	cc
 8016026:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801602a:	2300      	movcs	r3, #0
 801602c:	3015      	adds	r0, #21
 801602e:	fa02 f000 	lsl.w	r0, r2, r0
 8016032:	fa23 f30c 	lsr.w	r3, r3, ip
 8016036:	4303      	orrs	r3, r0
 8016038:	461c      	mov	r4, r3
 801603a:	ec45 4b10 	vmov	d0, r4, r5
 801603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016042:	45b8      	cmp	r8, r7
 8016044:	bf3a      	itte	cc
 8016046:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801604a:	f1a6 0708 	subcc.w	r7, r6, #8
 801604e:	2300      	movcs	r3, #0
 8016050:	380b      	subs	r0, #11
 8016052:	d012      	beq.n	801607a <__b2d+0x8a>
 8016054:	f1c0 0120 	rsb	r1, r0, #32
 8016058:	fa23 f401 	lsr.w	r4, r3, r1
 801605c:	4082      	lsls	r2, r0
 801605e:	4322      	orrs	r2, r4
 8016060:	4547      	cmp	r7, r8
 8016062:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016066:	bf8c      	ite	hi
 8016068:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801606c:	2200      	movls	r2, #0
 801606e:	4083      	lsls	r3, r0
 8016070:	40ca      	lsrs	r2, r1
 8016072:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016076:	4313      	orrs	r3, r2
 8016078:	e7de      	b.n	8016038 <__b2d+0x48>
 801607a:	ea42 0501 	orr.w	r5, r2, r1
 801607e:	e7db      	b.n	8016038 <__b2d+0x48>
 8016080:	3ff00000 	.word	0x3ff00000

08016084 <__d2b>:
 8016084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016088:	460f      	mov	r7, r1
 801608a:	2101      	movs	r1, #1
 801608c:	ec59 8b10 	vmov	r8, r9, d0
 8016090:	4616      	mov	r6, r2
 8016092:	f7ff fc1b 	bl	80158cc <_Balloc>
 8016096:	4604      	mov	r4, r0
 8016098:	b930      	cbnz	r0, 80160a8 <__d2b+0x24>
 801609a:	4602      	mov	r2, r0
 801609c:	4b24      	ldr	r3, [pc, #144]	; (8016130 <__d2b+0xac>)
 801609e:	4825      	ldr	r0, [pc, #148]	; (8016134 <__d2b+0xb0>)
 80160a0:	f240 310f 	movw	r1, #783	; 0x30f
 80160a4:	f7fd fb8e 	bl	80137c4 <__assert_func>
 80160a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80160ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80160b0:	bb2d      	cbnz	r5, 80160fe <__d2b+0x7a>
 80160b2:	9301      	str	r3, [sp, #4]
 80160b4:	f1b8 0300 	subs.w	r3, r8, #0
 80160b8:	d026      	beq.n	8016108 <__d2b+0x84>
 80160ba:	4668      	mov	r0, sp
 80160bc:	9300      	str	r3, [sp, #0]
 80160be:	f7ff fd17 	bl	8015af0 <__lo0bits>
 80160c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80160c6:	b1e8      	cbz	r0, 8016104 <__d2b+0x80>
 80160c8:	f1c0 0320 	rsb	r3, r0, #32
 80160cc:	fa02 f303 	lsl.w	r3, r2, r3
 80160d0:	430b      	orrs	r3, r1
 80160d2:	40c2      	lsrs	r2, r0
 80160d4:	6163      	str	r3, [r4, #20]
 80160d6:	9201      	str	r2, [sp, #4]
 80160d8:	9b01      	ldr	r3, [sp, #4]
 80160da:	61a3      	str	r3, [r4, #24]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	bf14      	ite	ne
 80160e0:	2202      	movne	r2, #2
 80160e2:	2201      	moveq	r2, #1
 80160e4:	6122      	str	r2, [r4, #16]
 80160e6:	b1bd      	cbz	r5, 8016118 <__d2b+0x94>
 80160e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80160ec:	4405      	add	r5, r0
 80160ee:	603d      	str	r5, [r7, #0]
 80160f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80160f4:	6030      	str	r0, [r6, #0]
 80160f6:	4620      	mov	r0, r4
 80160f8:	b003      	add	sp, #12
 80160fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016102:	e7d6      	b.n	80160b2 <__d2b+0x2e>
 8016104:	6161      	str	r1, [r4, #20]
 8016106:	e7e7      	b.n	80160d8 <__d2b+0x54>
 8016108:	a801      	add	r0, sp, #4
 801610a:	f7ff fcf1 	bl	8015af0 <__lo0bits>
 801610e:	9b01      	ldr	r3, [sp, #4]
 8016110:	6163      	str	r3, [r4, #20]
 8016112:	3020      	adds	r0, #32
 8016114:	2201      	movs	r2, #1
 8016116:	e7e5      	b.n	80160e4 <__d2b+0x60>
 8016118:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801611c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016120:	6038      	str	r0, [r7, #0]
 8016122:	6918      	ldr	r0, [r3, #16]
 8016124:	f7ff fcc4 	bl	8015ab0 <__hi0bits>
 8016128:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801612c:	e7e2      	b.n	80160f4 <__d2b+0x70>
 801612e:	bf00      	nop
 8016130:	08019269 	.word	0x08019269
 8016134:	0801927a 	.word	0x0801927a

08016138 <__ratio>:
 8016138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	4688      	mov	r8, r1
 801613e:	4669      	mov	r1, sp
 8016140:	4681      	mov	r9, r0
 8016142:	f7ff ff55 	bl	8015ff0 <__b2d>
 8016146:	a901      	add	r1, sp, #4
 8016148:	4640      	mov	r0, r8
 801614a:	ec55 4b10 	vmov	r4, r5, d0
 801614e:	f7ff ff4f 	bl	8015ff0 <__b2d>
 8016152:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016156:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801615a:	eba3 0c02 	sub.w	ip, r3, r2
 801615e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016162:	1a9b      	subs	r3, r3, r2
 8016164:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016168:	ec51 0b10 	vmov	r0, r1, d0
 801616c:	2b00      	cmp	r3, #0
 801616e:	bfd6      	itet	le
 8016170:	460a      	movle	r2, r1
 8016172:	462a      	movgt	r2, r5
 8016174:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016178:	468b      	mov	fp, r1
 801617a:	462f      	mov	r7, r5
 801617c:	bfd4      	ite	le
 801617e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016182:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016186:	4620      	mov	r0, r4
 8016188:	ee10 2a10 	vmov	r2, s0
 801618c:	465b      	mov	r3, fp
 801618e:	4639      	mov	r1, r7
 8016190:	f7ea fb84 	bl	800089c <__aeabi_ddiv>
 8016194:	ec41 0b10 	vmov	d0, r0, r1
 8016198:	b003      	add	sp, #12
 801619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801619e <__copybits>:
 801619e:	3901      	subs	r1, #1
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	1149      	asrs	r1, r1, #5
 80161a4:	6914      	ldr	r4, [r2, #16]
 80161a6:	3101      	adds	r1, #1
 80161a8:	f102 0314 	add.w	r3, r2, #20
 80161ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80161b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80161b4:	1f05      	subs	r5, r0, #4
 80161b6:	42a3      	cmp	r3, r4
 80161b8:	d30c      	bcc.n	80161d4 <__copybits+0x36>
 80161ba:	1aa3      	subs	r3, r4, r2
 80161bc:	3b11      	subs	r3, #17
 80161be:	f023 0303 	bic.w	r3, r3, #3
 80161c2:	3211      	adds	r2, #17
 80161c4:	42a2      	cmp	r2, r4
 80161c6:	bf88      	it	hi
 80161c8:	2300      	movhi	r3, #0
 80161ca:	4418      	add	r0, r3
 80161cc:	2300      	movs	r3, #0
 80161ce:	4288      	cmp	r0, r1
 80161d0:	d305      	bcc.n	80161de <__copybits+0x40>
 80161d2:	bd70      	pop	{r4, r5, r6, pc}
 80161d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80161d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80161dc:	e7eb      	b.n	80161b6 <__copybits+0x18>
 80161de:	f840 3b04 	str.w	r3, [r0], #4
 80161e2:	e7f4      	b.n	80161ce <__copybits+0x30>

080161e4 <__any_on>:
 80161e4:	f100 0214 	add.w	r2, r0, #20
 80161e8:	6900      	ldr	r0, [r0, #16]
 80161ea:	114b      	asrs	r3, r1, #5
 80161ec:	4298      	cmp	r0, r3
 80161ee:	b510      	push	{r4, lr}
 80161f0:	db11      	blt.n	8016216 <__any_on+0x32>
 80161f2:	dd0a      	ble.n	801620a <__any_on+0x26>
 80161f4:	f011 011f 	ands.w	r1, r1, #31
 80161f8:	d007      	beq.n	801620a <__any_on+0x26>
 80161fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80161fe:	fa24 f001 	lsr.w	r0, r4, r1
 8016202:	fa00 f101 	lsl.w	r1, r0, r1
 8016206:	428c      	cmp	r4, r1
 8016208:	d10b      	bne.n	8016222 <__any_on+0x3e>
 801620a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801620e:	4293      	cmp	r3, r2
 8016210:	d803      	bhi.n	801621a <__any_on+0x36>
 8016212:	2000      	movs	r0, #0
 8016214:	bd10      	pop	{r4, pc}
 8016216:	4603      	mov	r3, r0
 8016218:	e7f7      	b.n	801620a <__any_on+0x26>
 801621a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801621e:	2900      	cmp	r1, #0
 8016220:	d0f5      	beq.n	801620e <__any_on+0x2a>
 8016222:	2001      	movs	r0, #1
 8016224:	e7f6      	b.n	8016214 <__any_on+0x30>

08016226 <sulp>:
 8016226:	b570      	push	{r4, r5, r6, lr}
 8016228:	4604      	mov	r4, r0
 801622a:	460d      	mov	r5, r1
 801622c:	ec45 4b10 	vmov	d0, r4, r5
 8016230:	4616      	mov	r6, r2
 8016232:	f7ff feb7 	bl	8015fa4 <__ulp>
 8016236:	ec51 0b10 	vmov	r0, r1, d0
 801623a:	b17e      	cbz	r6, 801625c <sulp+0x36>
 801623c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016240:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016244:	2b00      	cmp	r3, #0
 8016246:	dd09      	ble.n	801625c <sulp+0x36>
 8016248:	051b      	lsls	r3, r3, #20
 801624a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801624e:	2400      	movs	r4, #0
 8016250:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016254:	4622      	mov	r2, r4
 8016256:	462b      	mov	r3, r5
 8016258:	f7ea f9f6 	bl	8000648 <__aeabi_dmul>
 801625c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016260 <_strtod_l>:
 8016260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016264:	ed2d 8b02 	vpush	{d8}
 8016268:	b09b      	sub	sp, #108	; 0x6c
 801626a:	4604      	mov	r4, r0
 801626c:	9213      	str	r2, [sp, #76]	; 0x4c
 801626e:	2200      	movs	r2, #0
 8016270:	9216      	str	r2, [sp, #88]	; 0x58
 8016272:	460d      	mov	r5, r1
 8016274:	f04f 0800 	mov.w	r8, #0
 8016278:	f04f 0900 	mov.w	r9, #0
 801627c:	460a      	mov	r2, r1
 801627e:	9215      	str	r2, [sp, #84]	; 0x54
 8016280:	7811      	ldrb	r1, [r2, #0]
 8016282:	292b      	cmp	r1, #43	; 0x2b
 8016284:	d04c      	beq.n	8016320 <_strtod_l+0xc0>
 8016286:	d83a      	bhi.n	80162fe <_strtod_l+0x9e>
 8016288:	290d      	cmp	r1, #13
 801628a:	d834      	bhi.n	80162f6 <_strtod_l+0x96>
 801628c:	2908      	cmp	r1, #8
 801628e:	d834      	bhi.n	80162fa <_strtod_l+0x9a>
 8016290:	2900      	cmp	r1, #0
 8016292:	d03d      	beq.n	8016310 <_strtod_l+0xb0>
 8016294:	2200      	movs	r2, #0
 8016296:	920a      	str	r2, [sp, #40]	; 0x28
 8016298:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801629a:	7832      	ldrb	r2, [r6, #0]
 801629c:	2a30      	cmp	r2, #48	; 0x30
 801629e:	f040 80b4 	bne.w	801640a <_strtod_l+0x1aa>
 80162a2:	7872      	ldrb	r2, [r6, #1]
 80162a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80162a8:	2a58      	cmp	r2, #88	; 0x58
 80162aa:	d170      	bne.n	801638e <_strtod_l+0x12e>
 80162ac:	9302      	str	r3, [sp, #8]
 80162ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162b0:	9301      	str	r3, [sp, #4]
 80162b2:	ab16      	add	r3, sp, #88	; 0x58
 80162b4:	9300      	str	r3, [sp, #0]
 80162b6:	4a8e      	ldr	r2, [pc, #568]	; (80164f0 <_strtod_l+0x290>)
 80162b8:	ab17      	add	r3, sp, #92	; 0x5c
 80162ba:	a915      	add	r1, sp, #84	; 0x54
 80162bc:	4620      	mov	r0, r4
 80162be:	f001 fac1 	bl	8017844 <__gethex>
 80162c2:	f010 070f 	ands.w	r7, r0, #15
 80162c6:	4605      	mov	r5, r0
 80162c8:	d005      	beq.n	80162d6 <_strtod_l+0x76>
 80162ca:	2f06      	cmp	r7, #6
 80162cc:	d12a      	bne.n	8016324 <_strtod_l+0xc4>
 80162ce:	3601      	adds	r6, #1
 80162d0:	2300      	movs	r3, #0
 80162d2:	9615      	str	r6, [sp, #84]	; 0x54
 80162d4:	930a      	str	r3, [sp, #40]	; 0x28
 80162d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f040 857f 	bne.w	8016ddc <_strtod_l+0xb7c>
 80162de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162e0:	b1db      	cbz	r3, 801631a <_strtod_l+0xba>
 80162e2:	4642      	mov	r2, r8
 80162e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80162e8:	ec43 2b10 	vmov	d0, r2, r3
 80162ec:	b01b      	add	sp, #108	; 0x6c
 80162ee:	ecbd 8b02 	vpop	{d8}
 80162f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f6:	2920      	cmp	r1, #32
 80162f8:	d1cc      	bne.n	8016294 <_strtod_l+0x34>
 80162fa:	3201      	adds	r2, #1
 80162fc:	e7bf      	b.n	801627e <_strtod_l+0x1e>
 80162fe:	292d      	cmp	r1, #45	; 0x2d
 8016300:	d1c8      	bne.n	8016294 <_strtod_l+0x34>
 8016302:	2101      	movs	r1, #1
 8016304:	910a      	str	r1, [sp, #40]	; 0x28
 8016306:	1c51      	adds	r1, r2, #1
 8016308:	9115      	str	r1, [sp, #84]	; 0x54
 801630a:	7852      	ldrb	r2, [r2, #1]
 801630c:	2a00      	cmp	r2, #0
 801630e:	d1c3      	bne.n	8016298 <_strtod_l+0x38>
 8016310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016312:	9515      	str	r5, [sp, #84]	; 0x54
 8016314:	2b00      	cmp	r3, #0
 8016316:	f040 855f 	bne.w	8016dd8 <_strtod_l+0xb78>
 801631a:	4642      	mov	r2, r8
 801631c:	464b      	mov	r3, r9
 801631e:	e7e3      	b.n	80162e8 <_strtod_l+0x88>
 8016320:	2100      	movs	r1, #0
 8016322:	e7ef      	b.n	8016304 <_strtod_l+0xa4>
 8016324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016326:	b13a      	cbz	r2, 8016338 <_strtod_l+0xd8>
 8016328:	2135      	movs	r1, #53	; 0x35
 801632a:	a818      	add	r0, sp, #96	; 0x60
 801632c:	f7ff ff37 	bl	801619e <__copybits>
 8016330:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016332:	4620      	mov	r0, r4
 8016334:	f7ff fb0a 	bl	801594c <_Bfree>
 8016338:	3f01      	subs	r7, #1
 801633a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801633c:	2f04      	cmp	r7, #4
 801633e:	d806      	bhi.n	801634e <_strtod_l+0xee>
 8016340:	e8df f007 	tbb	[pc, r7]
 8016344:	201d0314 	.word	0x201d0314
 8016348:	14          	.byte	0x14
 8016349:	00          	.byte	0x00
 801634a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801634e:	05e9      	lsls	r1, r5, #23
 8016350:	bf48      	it	mi
 8016352:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8016356:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801635a:	0d1b      	lsrs	r3, r3, #20
 801635c:	051b      	lsls	r3, r3, #20
 801635e:	2b00      	cmp	r3, #0
 8016360:	d1b9      	bne.n	80162d6 <_strtod_l+0x76>
 8016362:	f7fe fbab 	bl	8014abc <__errno>
 8016366:	2322      	movs	r3, #34	; 0x22
 8016368:	6003      	str	r3, [r0, #0]
 801636a:	e7b4      	b.n	80162d6 <_strtod_l+0x76>
 801636c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8016370:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016378:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801637c:	e7e7      	b.n	801634e <_strtod_l+0xee>
 801637e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80164f8 <_strtod_l+0x298>
 8016382:	e7e4      	b.n	801634e <_strtod_l+0xee>
 8016384:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016388:	f04f 38ff 	mov.w	r8, #4294967295
 801638c:	e7df      	b.n	801634e <_strtod_l+0xee>
 801638e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016390:	1c5a      	adds	r2, r3, #1
 8016392:	9215      	str	r2, [sp, #84]	; 0x54
 8016394:	785b      	ldrb	r3, [r3, #1]
 8016396:	2b30      	cmp	r3, #48	; 0x30
 8016398:	d0f9      	beq.n	801638e <_strtod_l+0x12e>
 801639a:	2b00      	cmp	r3, #0
 801639c:	d09b      	beq.n	80162d6 <_strtod_l+0x76>
 801639e:	2301      	movs	r3, #1
 80163a0:	f04f 0a00 	mov.w	sl, #0
 80163a4:	9304      	str	r3, [sp, #16]
 80163a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80163aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80163ae:	46d3      	mov	fp, sl
 80163b0:	220a      	movs	r2, #10
 80163b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80163b4:	7806      	ldrb	r6, [r0, #0]
 80163b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80163ba:	b2d9      	uxtb	r1, r3
 80163bc:	2909      	cmp	r1, #9
 80163be:	d926      	bls.n	801640e <_strtod_l+0x1ae>
 80163c0:	494c      	ldr	r1, [pc, #304]	; (80164f4 <_strtod_l+0x294>)
 80163c2:	2201      	movs	r2, #1
 80163c4:	f001 f9a6 	bl	8017714 <strncmp>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d030      	beq.n	801642e <_strtod_l+0x1ce>
 80163cc:	2000      	movs	r0, #0
 80163ce:	4632      	mov	r2, r6
 80163d0:	9005      	str	r0, [sp, #20]
 80163d2:	465e      	mov	r6, fp
 80163d4:	4603      	mov	r3, r0
 80163d6:	2a65      	cmp	r2, #101	; 0x65
 80163d8:	d001      	beq.n	80163de <_strtod_l+0x17e>
 80163da:	2a45      	cmp	r2, #69	; 0x45
 80163dc:	d113      	bne.n	8016406 <_strtod_l+0x1a6>
 80163de:	b91e      	cbnz	r6, 80163e8 <_strtod_l+0x188>
 80163e0:	9a04      	ldr	r2, [sp, #16]
 80163e2:	4302      	orrs	r2, r0
 80163e4:	d094      	beq.n	8016310 <_strtod_l+0xb0>
 80163e6:	2600      	movs	r6, #0
 80163e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80163ea:	1c6a      	adds	r2, r5, #1
 80163ec:	9215      	str	r2, [sp, #84]	; 0x54
 80163ee:	786a      	ldrb	r2, [r5, #1]
 80163f0:	2a2b      	cmp	r2, #43	; 0x2b
 80163f2:	d074      	beq.n	80164de <_strtod_l+0x27e>
 80163f4:	2a2d      	cmp	r2, #45	; 0x2d
 80163f6:	d078      	beq.n	80164ea <_strtod_l+0x28a>
 80163f8:	f04f 0c00 	mov.w	ip, #0
 80163fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016400:	2909      	cmp	r1, #9
 8016402:	d97f      	bls.n	8016504 <_strtod_l+0x2a4>
 8016404:	9515      	str	r5, [sp, #84]	; 0x54
 8016406:	2700      	movs	r7, #0
 8016408:	e09e      	b.n	8016548 <_strtod_l+0x2e8>
 801640a:	2300      	movs	r3, #0
 801640c:	e7c8      	b.n	80163a0 <_strtod_l+0x140>
 801640e:	f1bb 0f08 	cmp.w	fp, #8
 8016412:	bfd8      	it	le
 8016414:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016416:	f100 0001 	add.w	r0, r0, #1
 801641a:	bfda      	itte	le
 801641c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016420:	9309      	strle	r3, [sp, #36]	; 0x24
 8016422:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8016426:	f10b 0b01 	add.w	fp, fp, #1
 801642a:	9015      	str	r0, [sp, #84]	; 0x54
 801642c:	e7c1      	b.n	80163b2 <_strtod_l+0x152>
 801642e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016430:	1c5a      	adds	r2, r3, #1
 8016432:	9215      	str	r2, [sp, #84]	; 0x54
 8016434:	785a      	ldrb	r2, [r3, #1]
 8016436:	f1bb 0f00 	cmp.w	fp, #0
 801643a:	d037      	beq.n	80164ac <_strtod_l+0x24c>
 801643c:	9005      	str	r0, [sp, #20]
 801643e:	465e      	mov	r6, fp
 8016440:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016444:	2b09      	cmp	r3, #9
 8016446:	d912      	bls.n	801646e <_strtod_l+0x20e>
 8016448:	2301      	movs	r3, #1
 801644a:	e7c4      	b.n	80163d6 <_strtod_l+0x176>
 801644c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801644e:	1c5a      	adds	r2, r3, #1
 8016450:	9215      	str	r2, [sp, #84]	; 0x54
 8016452:	785a      	ldrb	r2, [r3, #1]
 8016454:	3001      	adds	r0, #1
 8016456:	2a30      	cmp	r2, #48	; 0x30
 8016458:	d0f8      	beq.n	801644c <_strtod_l+0x1ec>
 801645a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801645e:	2b08      	cmp	r3, #8
 8016460:	f200 84c1 	bhi.w	8016de6 <_strtod_l+0xb86>
 8016464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016466:	9005      	str	r0, [sp, #20]
 8016468:	2000      	movs	r0, #0
 801646a:	930b      	str	r3, [sp, #44]	; 0x2c
 801646c:	4606      	mov	r6, r0
 801646e:	3a30      	subs	r2, #48	; 0x30
 8016470:	f100 0301 	add.w	r3, r0, #1
 8016474:	d014      	beq.n	80164a0 <_strtod_l+0x240>
 8016476:	9905      	ldr	r1, [sp, #20]
 8016478:	4419      	add	r1, r3
 801647a:	9105      	str	r1, [sp, #20]
 801647c:	4633      	mov	r3, r6
 801647e:	eb00 0c06 	add.w	ip, r0, r6
 8016482:	210a      	movs	r1, #10
 8016484:	4563      	cmp	r3, ip
 8016486:	d113      	bne.n	80164b0 <_strtod_l+0x250>
 8016488:	1833      	adds	r3, r6, r0
 801648a:	2b08      	cmp	r3, #8
 801648c:	f106 0601 	add.w	r6, r6, #1
 8016490:	4406      	add	r6, r0
 8016492:	dc1a      	bgt.n	80164ca <_strtod_l+0x26a>
 8016494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016496:	230a      	movs	r3, #10
 8016498:	fb03 2301 	mla	r3, r3, r1, r2
 801649c:	9309      	str	r3, [sp, #36]	; 0x24
 801649e:	2300      	movs	r3, #0
 80164a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164a2:	1c51      	adds	r1, r2, #1
 80164a4:	9115      	str	r1, [sp, #84]	; 0x54
 80164a6:	7852      	ldrb	r2, [r2, #1]
 80164a8:	4618      	mov	r0, r3
 80164aa:	e7c9      	b.n	8016440 <_strtod_l+0x1e0>
 80164ac:	4658      	mov	r0, fp
 80164ae:	e7d2      	b.n	8016456 <_strtod_l+0x1f6>
 80164b0:	2b08      	cmp	r3, #8
 80164b2:	f103 0301 	add.w	r3, r3, #1
 80164b6:	dc03      	bgt.n	80164c0 <_strtod_l+0x260>
 80164b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80164ba:	434f      	muls	r7, r1
 80164bc:	9709      	str	r7, [sp, #36]	; 0x24
 80164be:	e7e1      	b.n	8016484 <_strtod_l+0x224>
 80164c0:	2b10      	cmp	r3, #16
 80164c2:	bfd8      	it	le
 80164c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80164c8:	e7dc      	b.n	8016484 <_strtod_l+0x224>
 80164ca:	2e10      	cmp	r6, #16
 80164cc:	bfdc      	itt	le
 80164ce:	230a      	movle	r3, #10
 80164d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80164d4:	e7e3      	b.n	801649e <_strtod_l+0x23e>
 80164d6:	2300      	movs	r3, #0
 80164d8:	9305      	str	r3, [sp, #20]
 80164da:	2301      	movs	r3, #1
 80164dc:	e780      	b.n	80163e0 <_strtod_l+0x180>
 80164de:	f04f 0c00 	mov.w	ip, #0
 80164e2:	1caa      	adds	r2, r5, #2
 80164e4:	9215      	str	r2, [sp, #84]	; 0x54
 80164e6:	78aa      	ldrb	r2, [r5, #2]
 80164e8:	e788      	b.n	80163fc <_strtod_l+0x19c>
 80164ea:	f04f 0c01 	mov.w	ip, #1
 80164ee:	e7f8      	b.n	80164e2 <_strtod_l+0x282>
 80164f0:	080193d8 	.word	0x080193d8
 80164f4:	080193d4 	.word	0x080193d4
 80164f8:	7ff00000 	.word	0x7ff00000
 80164fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164fe:	1c51      	adds	r1, r2, #1
 8016500:	9115      	str	r1, [sp, #84]	; 0x54
 8016502:	7852      	ldrb	r2, [r2, #1]
 8016504:	2a30      	cmp	r2, #48	; 0x30
 8016506:	d0f9      	beq.n	80164fc <_strtod_l+0x29c>
 8016508:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801650c:	2908      	cmp	r1, #8
 801650e:	f63f af7a 	bhi.w	8016406 <_strtod_l+0x1a6>
 8016512:	3a30      	subs	r2, #48	; 0x30
 8016514:	9208      	str	r2, [sp, #32]
 8016516:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016518:	920c      	str	r2, [sp, #48]	; 0x30
 801651a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801651c:	1c57      	adds	r7, r2, #1
 801651e:	9715      	str	r7, [sp, #84]	; 0x54
 8016520:	7852      	ldrb	r2, [r2, #1]
 8016522:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016526:	f1be 0f09 	cmp.w	lr, #9
 801652a:	d938      	bls.n	801659e <_strtod_l+0x33e>
 801652c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801652e:	1a7f      	subs	r7, r7, r1
 8016530:	2f08      	cmp	r7, #8
 8016532:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016536:	dc03      	bgt.n	8016540 <_strtod_l+0x2e0>
 8016538:	9908      	ldr	r1, [sp, #32]
 801653a:	428f      	cmp	r7, r1
 801653c:	bfa8      	it	ge
 801653e:	460f      	movge	r7, r1
 8016540:	f1bc 0f00 	cmp.w	ip, #0
 8016544:	d000      	beq.n	8016548 <_strtod_l+0x2e8>
 8016546:	427f      	negs	r7, r7
 8016548:	2e00      	cmp	r6, #0
 801654a:	d14f      	bne.n	80165ec <_strtod_l+0x38c>
 801654c:	9904      	ldr	r1, [sp, #16]
 801654e:	4301      	orrs	r1, r0
 8016550:	f47f aec1 	bne.w	80162d6 <_strtod_l+0x76>
 8016554:	2b00      	cmp	r3, #0
 8016556:	f47f aedb 	bne.w	8016310 <_strtod_l+0xb0>
 801655a:	2a69      	cmp	r2, #105	; 0x69
 801655c:	d029      	beq.n	80165b2 <_strtod_l+0x352>
 801655e:	dc26      	bgt.n	80165ae <_strtod_l+0x34e>
 8016560:	2a49      	cmp	r2, #73	; 0x49
 8016562:	d026      	beq.n	80165b2 <_strtod_l+0x352>
 8016564:	2a4e      	cmp	r2, #78	; 0x4e
 8016566:	f47f aed3 	bne.w	8016310 <_strtod_l+0xb0>
 801656a:	499b      	ldr	r1, [pc, #620]	; (80167d8 <_strtod_l+0x578>)
 801656c:	a815      	add	r0, sp, #84	; 0x54
 801656e:	f001 fba9 	bl	8017cc4 <__match>
 8016572:	2800      	cmp	r0, #0
 8016574:	f43f aecc 	beq.w	8016310 <_strtod_l+0xb0>
 8016578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	2b28      	cmp	r3, #40	; 0x28
 801657e:	d12f      	bne.n	80165e0 <_strtod_l+0x380>
 8016580:	4996      	ldr	r1, [pc, #600]	; (80167dc <_strtod_l+0x57c>)
 8016582:	aa18      	add	r2, sp, #96	; 0x60
 8016584:	a815      	add	r0, sp, #84	; 0x54
 8016586:	f001 fbb1 	bl	8017cec <__hexnan>
 801658a:	2805      	cmp	r0, #5
 801658c:	d128      	bne.n	80165e0 <_strtod_l+0x380>
 801658e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016594:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016598:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801659c:	e69b      	b.n	80162d6 <_strtod_l+0x76>
 801659e:	9f08      	ldr	r7, [sp, #32]
 80165a0:	210a      	movs	r1, #10
 80165a2:	fb01 2107 	mla	r1, r1, r7, r2
 80165a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80165aa:	9208      	str	r2, [sp, #32]
 80165ac:	e7b5      	b.n	801651a <_strtod_l+0x2ba>
 80165ae:	2a6e      	cmp	r2, #110	; 0x6e
 80165b0:	e7d9      	b.n	8016566 <_strtod_l+0x306>
 80165b2:	498b      	ldr	r1, [pc, #556]	; (80167e0 <_strtod_l+0x580>)
 80165b4:	a815      	add	r0, sp, #84	; 0x54
 80165b6:	f001 fb85 	bl	8017cc4 <__match>
 80165ba:	2800      	cmp	r0, #0
 80165bc:	f43f aea8 	beq.w	8016310 <_strtod_l+0xb0>
 80165c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165c2:	4988      	ldr	r1, [pc, #544]	; (80167e4 <_strtod_l+0x584>)
 80165c4:	3b01      	subs	r3, #1
 80165c6:	a815      	add	r0, sp, #84	; 0x54
 80165c8:	9315      	str	r3, [sp, #84]	; 0x54
 80165ca:	f001 fb7b 	bl	8017cc4 <__match>
 80165ce:	b910      	cbnz	r0, 80165d6 <_strtod_l+0x376>
 80165d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165d2:	3301      	adds	r3, #1
 80165d4:	9315      	str	r3, [sp, #84]	; 0x54
 80165d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80167f4 <_strtod_l+0x594>
 80165da:	f04f 0800 	mov.w	r8, #0
 80165de:	e67a      	b.n	80162d6 <_strtod_l+0x76>
 80165e0:	4881      	ldr	r0, [pc, #516]	; (80167e8 <_strtod_l+0x588>)
 80165e2:	f001 f8a9 	bl	8017738 <nan>
 80165e6:	ec59 8b10 	vmov	r8, r9, d0
 80165ea:	e674      	b.n	80162d6 <_strtod_l+0x76>
 80165ec:	9b05      	ldr	r3, [sp, #20]
 80165ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165f0:	1afb      	subs	r3, r7, r3
 80165f2:	f1bb 0f00 	cmp.w	fp, #0
 80165f6:	bf08      	it	eq
 80165f8:	46b3      	moveq	fp, r6
 80165fa:	2e10      	cmp	r6, #16
 80165fc:	9308      	str	r3, [sp, #32]
 80165fe:	4635      	mov	r5, r6
 8016600:	bfa8      	it	ge
 8016602:	2510      	movge	r5, #16
 8016604:	f7e9 ffa6 	bl	8000554 <__aeabi_ui2d>
 8016608:	2e09      	cmp	r6, #9
 801660a:	4680      	mov	r8, r0
 801660c:	4689      	mov	r9, r1
 801660e:	dd13      	ble.n	8016638 <_strtod_l+0x3d8>
 8016610:	4b76      	ldr	r3, [pc, #472]	; (80167ec <_strtod_l+0x58c>)
 8016612:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016616:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801661a:	f7ea f815 	bl	8000648 <__aeabi_dmul>
 801661e:	4680      	mov	r8, r0
 8016620:	4650      	mov	r0, sl
 8016622:	4689      	mov	r9, r1
 8016624:	f7e9 ff96 	bl	8000554 <__aeabi_ui2d>
 8016628:	4602      	mov	r2, r0
 801662a:	460b      	mov	r3, r1
 801662c:	4640      	mov	r0, r8
 801662e:	4649      	mov	r1, r9
 8016630:	f7e9 fe54 	bl	80002dc <__adddf3>
 8016634:	4680      	mov	r8, r0
 8016636:	4689      	mov	r9, r1
 8016638:	2e0f      	cmp	r6, #15
 801663a:	dc38      	bgt.n	80166ae <_strtod_l+0x44e>
 801663c:	9b08      	ldr	r3, [sp, #32]
 801663e:	2b00      	cmp	r3, #0
 8016640:	f43f ae49 	beq.w	80162d6 <_strtod_l+0x76>
 8016644:	dd24      	ble.n	8016690 <_strtod_l+0x430>
 8016646:	2b16      	cmp	r3, #22
 8016648:	dc0b      	bgt.n	8016662 <_strtod_l+0x402>
 801664a:	4968      	ldr	r1, [pc, #416]	; (80167ec <_strtod_l+0x58c>)
 801664c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016654:	4642      	mov	r2, r8
 8016656:	464b      	mov	r3, r9
 8016658:	f7e9 fff6 	bl	8000648 <__aeabi_dmul>
 801665c:	4680      	mov	r8, r0
 801665e:	4689      	mov	r9, r1
 8016660:	e639      	b.n	80162d6 <_strtod_l+0x76>
 8016662:	9a08      	ldr	r2, [sp, #32]
 8016664:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8016668:	4293      	cmp	r3, r2
 801666a:	db20      	blt.n	80166ae <_strtod_l+0x44e>
 801666c:	4c5f      	ldr	r4, [pc, #380]	; (80167ec <_strtod_l+0x58c>)
 801666e:	f1c6 060f 	rsb	r6, r6, #15
 8016672:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8016676:	4642      	mov	r2, r8
 8016678:	464b      	mov	r3, r9
 801667a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801667e:	f7e9 ffe3 	bl	8000648 <__aeabi_dmul>
 8016682:	9b08      	ldr	r3, [sp, #32]
 8016684:	1b9e      	subs	r6, r3, r6
 8016686:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801668a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801668e:	e7e3      	b.n	8016658 <_strtod_l+0x3f8>
 8016690:	9b08      	ldr	r3, [sp, #32]
 8016692:	3316      	adds	r3, #22
 8016694:	db0b      	blt.n	80166ae <_strtod_l+0x44e>
 8016696:	9b05      	ldr	r3, [sp, #20]
 8016698:	1bdf      	subs	r7, r3, r7
 801669a:	4b54      	ldr	r3, [pc, #336]	; (80167ec <_strtod_l+0x58c>)
 801669c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80166a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80166a4:	4640      	mov	r0, r8
 80166a6:	4649      	mov	r1, r9
 80166a8:	f7ea f8f8 	bl	800089c <__aeabi_ddiv>
 80166ac:	e7d6      	b.n	801665c <_strtod_l+0x3fc>
 80166ae:	9b08      	ldr	r3, [sp, #32]
 80166b0:	1b75      	subs	r5, r6, r5
 80166b2:	441d      	add	r5, r3
 80166b4:	2d00      	cmp	r5, #0
 80166b6:	dd70      	ble.n	801679a <_strtod_l+0x53a>
 80166b8:	f015 030f 	ands.w	r3, r5, #15
 80166bc:	d00a      	beq.n	80166d4 <_strtod_l+0x474>
 80166be:	494b      	ldr	r1, [pc, #300]	; (80167ec <_strtod_l+0x58c>)
 80166c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80166c4:	4642      	mov	r2, r8
 80166c6:	464b      	mov	r3, r9
 80166c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166cc:	f7e9 ffbc 	bl	8000648 <__aeabi_dmul>
 80166d0:	4680      	mov	r8, r0
 80166d2:	4689      	mov	r9, r1
 80166d4:	f035 050f 	bics.w	r5, r5, #15
 80166d8:	d04d      	beq.n	8016776 <_strtod_l+0x516>
 80166da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80166de:	dd22      	ble.n	8016726 <_strtod_l+0x4c6>
 80166e0:	2500      	movs	r5, #0
 80166e2:	46ab      	mov	fp, r5
 80166e4:	9509      	str	r5, [sp, #36]	; 0x24
 80166e6:	9505      	str	r5, [sp, #20]
 80166e8:	2322      	movs	r3, #34	; 0x22
 80166ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80167f4 <_strtod_l+0x594>
 80166ee:	6023      	str	r3, [r4, #0]
 80166f0:	f04f 0800 	mov.w	r8, #0
 80166f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	f43f aded 	beq.w	80162d6 <_strtod_l+0x76>
 80166fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80166fe:	4620      	mov	r0, r4
 8016700:	f7ff f924 	bl	801594c <_Bfree>
 8016704:	9905      	ldr	r1, [sp, #20]
 8016706:	4620      	mov	r0, r4
 8016708:	f7ff f920 	bl	801594c <_Bfree>
 801670c:	4659      	mov	r1, fp
 801670e:	4620      	mov	r0, r4
 8016710:	f7ff f91c 	bl	801594c <_Bfree>
 8016714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016716:	4620      	mov	r0, r4
 8016718:	f7ff f918 	bl	801594c <_Bfree>
 801671c:	4629      	mov	r1, r5
 801671e:	4620      	mov	r0, r4
 8016720:	f7ff f914 	bl	801594c <_Bfree>
 8016724:	e5d7      	b.n	80162d6 <_strtod_l+0x76>
 8016726:	4b32      	ldr	r3, [pc, #200]	; (80167f0 <_strtod_l+0x590>)
 8016728:	9304      	str	r3, [sp, #16]
 801672a:	2300      	movs	r3, #0
 801672c:	112d      	asrs	r5, r5, #4
 801672e:	4640      	mov	r0, r8
 8016730:	4649      	mov	r1, r9
 8016732:	469a      	mov	sl, r3
 8016734:	2d01      	cmp	r5, #1
 8016736:	dc21      	bgt.n	801677c <_strtod_l+0x51c>
 8016738:	b10b      	cbz	r3, 801673e <_strtod_l+0x4de>
 801673a:	4680      	mov	r8, r0
 801673c:	4689      	mov	r9, r1
 801673e:	492c      	ldr	r1, [pc, #176]	; (80167f0 <_strtod_l+0x590>)
 8016740:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016744:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016748:	4642      	mov	r2, r8
 801674a:	464b      	mov	r3, r9
 801674c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016750:	f7e9 ff7a 	bl	8000648 <__aeabi_dmul>
 8016754:	4b27      	ldr	r3, [pc, #156]	; (80167f4 <_strtod_l+0x594>)
 8016756:	460a      	mov	r2, r1
 8016758:	400b      	ands	r3, r1
 801675a:	4927      	ldr	r1, [pc, #156]	; (80167f8 <_strtod_l+0x598>)
 801675c:	428b      	cmp	r3, r1
 801675e:	4680      	mov	r8, r0
 8016760:	d8be      	bhi.n	80166e0 <_strtod_l+0x480>
 8016762:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016766:	428b      	cmp	r3, r1
 8016768:	bf86      	itte	hi
 801676a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80167fc <_strtod_l+0x59c>
 801676e:	f04f 38ff 	movhi.w	r8, #4294967295
 8016772:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8016776:	2300      	movs	r3, #0
 8016778:	9304      	str	r3, [sp, #16]
 801677a:	e07b      	b.n	8016874 <_strtod_l+0x614>
 801677c:	07ea      	lsls	r2, r5, #31
 801677e:	d505      	bpl.n	801678c <_strtod_l+0x52c>
 8016780:	9b04      	ldr	r3, [sp, #16]
 8016782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016786:	f7e9 ff5f 	bl	8000648 <__aeabi_dmul>
 801678a:	2301      	movs	r3, #1
 801678c:	9a04      	ldr	r2, [sp, #16]
 801678e:	3208      	adds	r2, #8
 8016790:	f10a 0a01 	add.w	sl, sl, #1
 8016794:	106d      	asrs	r5, r5, #1
 8016796:	9204      	str	r2, [sp, #16]
 8016798:	e7cc      	b.n	8016734 <_strtod_l+0x4d4>
 801679a:	d0ec      	beq.n	8016776 <_strtod_l+0x516>
 801679c:	426d      	negs	r5, r5
 801679e:	f015 020f 	ands.w	r2, r5, #15
 80167a2:	d00a      	beq.n	80167ba <_strtod_l+0x55a>
 80167a4:	4b11      	ldr	r3, [pc, #68]	; (80167ec <_strtod_l+0x58c>)
 80167a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167aa:	4640      	mov	r0, r8
 80167ac:	4649      	mov	r1, r9
 80167ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b2:	f7ea f873 	bl	800089c <__aeabi_ddiv>
 80167b6:	4680      	mov	r8, r0
 80167b8:	4689      	mov	r9, r1
 80167ba:	112d      	asrs	r5, r5, #4
 80167bc:	d0db      	beq.n	8016776 <_strtod_l+0x516>
 80167be:	2d1f      	cmp	r5, #31
 80167c0:	dd1e      	ble.n	8016800 <_strtod_l+0x5a0>
 80167c2:	2500      	movs	r5, #0
 80167c4:	46ab      	mov	fp, r5
 80167c6:	9509      	str	r5, [sp, #36]	; 0x24
 80167c8:	9505      	str	r5, [sp, #20]
 80167ca:	2322      	movs	r3, #34	; 0x22
 80167cc:	f04f 0800 	mov.w	r8, #0
 80167d0:	f04f 0900 	mov.w	r9, #0
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	e78d      	b.n	80166f4 <_strtod_l+0x494>
 80167d8:	080191c1 	.word	0x080191c1
 80167dc:	080193ec 	.word	0x080193ec
 80167e0:	080191b9 	.word	0x080191b9
 80167e4:	080191f0 	.word	0x080191f0
 80167e8:	080191b3 	.word	0x080191b3
 80167ec:	08019300 	.word	0x08019300
 80167f0:	080192d8 	.word	0x080192d8
 80167f4:	7ff00000 	.word	0x7ff00000
 80167f8:	7ca00000 	.word	0x7ca00000
 80167fc:	7fefffff 	.word	0x7fefffff
 8016800:	f015 0310 	ands.w	r3, r5, #16
 8016804:	bf18      	it	ne
 8016806:	236a      	movne	r3, #106	; 0x6a
 8016808:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016bac <_strtod_l+0x94c>
 801680c:	9304      	str	r3, [sp, #16]
 801680e:	4640      	mov	r0, r8
 8016810:	4649      	mov	r1, r9
 8016812:	2300      	movs	r3, #0
 8016814:	07ea      	lsls	r2, r5, #31
 8016816:	d504      	bpl.n	8016822 <_strtod_l+0x5c2>
 8016818:	e9da 2300 	ldrd	r2, r3, [sl]
 801681c:	f7e9 ff14 	bl	8000648 <__aeabi_dmul>
 8016820:	2301      	movs	r3, #1
 8016822:	106d      	asrs	r5, r5, #1
 8016824:	f10a 0a08 	add.w	sl, sl, #8
 8016828:	d1f4      	bne.n	8016814 <_strtod_l+0x5b4>
 801682a:	b10b      	cbz	r3, 8016830 <_strtod_l+0x5d0>
 801682c:	4680      	mov	r8, r0
 801682e:	4689      	mov	r9, r1
 8016830:	9b04      	ldr	r3, [sp, #16]
 8016832:	b1bb      	cbz	r3, 8016864 <_strtod_l+0x604>
 8016834:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016838:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801683c:	2b00      	cmp	r3, #0
 801683e:	4649      	mov	r1, r9
 8016840:	dd10      	ble.n	8016864 <_strtod_l+0x604>
 8016842:	2b1f      	cmp	r3, #31
 8016844:	f340 811e 	ble.w	8016a84 <_strtod_l+0x824>
 8016848:	2b34      	cmp	r3, #52	; 0x34
 801684a:	bfde      	ittt	le
 801684c:	f04f 33ff 	movle.w	r3, #4294967295
 8016850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016854:	4093      	lslle	r3, r2
 8016856:	f04f 0800 	mov.w	r8, #0
 801685a:	bfcc      	ite	gt
 801685c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016860:	ea03 0901 	andle.w	r9, r3, r1
 8016864:	2200      	movs	r2, #0
 8016866:	2300      	movs	r3, #0
 8016868:	4640      	mov	r0, r8
 801686a:	4649      	mov	r1, r9
 801686c:	f7ea f954 	bl	8000b18 <__aeabi_dcmpeq>
 8016870:	2800      	cmp	r0, #0
 8016872:	d1a6      	bne.n	80167c2 <_strtod_l+0x562>
 8016874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016876:	9300      	str	r3, [sp, #0]
 8016878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801687a:	4633      	mov	r3, r6
 801687c:	465a      	mov	r2, fp
 801687e:	4620      	mov	r0, r4
 8016880:	f7ff f8cc 	bl	8015a1c <__s2b>
 8016884:	9009      	str	r0, [sp, #36]	; 0x24
 8016886:	2800      	cmp	r0, #0
 8016888:	f43f af2a 	beq.w	80166e0 <_strtod_l+0x480>
 801688c:	9a08      	ldr	r2, [sp, #32]
 801688e:	9b05      	ldr	r3, [sp, #20]
 8016890:	2a00      	cmp	r2, #0
 8016892:	eba3 0307 	sub.w	r3, r3, r7
 8016896:	bfa8      	it	ge
 8016898:	2300      	movge	r3, #0
 801689a:	930c      	str	r3, [sp, #48]	; 0x30
 801689c:	2500      	movs	r5, #0
 801689e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80168a2:	9312      	str	r3, [sp, #72]	; 0x48
 80168a4:	46ab      	mov	fp, r5
 80168a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168a8:	4620      	mov	r0, r4
 80168aa:	6859      	ldr	r1, [r3, #4]
 80168ac:	f7ff f80e 	bl	80158cc <_Balloc>
 80168b0:	9005      	str	r0, [sp, #20]
 80168b2:	2800      	cmp	r0, #0
 80168b4:	f43f af18 	beq.w	80166e8 <_strtod_l+0x488>
 80168b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ba:	691a      	ldr	r2, [r3, #16]
 80168bc:	3202      	adds	r2, #2
 80168be:	f103 010c 	add.w	r1, r3, #12
 80168c2:	0092      	lsls	r2, r2, #2
 80168c4:	300c      	adds	r0, #12
 80168c6:	f7fe f926 	bl	8014b16 <memcpy>
 80168ca:	ec49 8b10 	vmov	d0, r8, r9
 80168ce:	aa18      	add	r2, sp, #96	; 0x60
 80168d0:	a917      	add	r1, sp, #92	; 0x5c
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7ff fbd6 	bl	8016084 <__d2b>
 80168d8:	ec49 8b18 	vmov	d8, r8, r9
 80168dc:	9016      	str	r0, [sp, #88]	; 0x58
 80168de:	2800      	cmp	r0, #0
 80168e0:	f43f af02 	beq.w	80166e8 <_strtod_l+0x488>
 80168e4:	2101      	movs	r1, #1
 80168e6:	4620      	mov	r0, r4
 80168e8:	f7ff f930 	bl	8015b4c <__i2b>
 80168ec:	4683      	mov	fp, r0
 80168ee:	2800      	cmp	r0, #0
 80168f0:	f43f aefa 	beq.w	80166e8 <_strtod_l+0x488>
 80168f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80168f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168f8:	2e00      	cmp	r6, #0
 80168fa:	bfab      	itete	ge
 80168fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80168fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016900:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016902:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016906:	bfac      	ite	ge
 8016908:	eb06 0a03 	addge.w	sl, r6, r3
 801690c:	1b9f      	sublt	r7, r3, r6
 801690e:	9b04      	ldr	r3, [sp, #16]
 8016910:	1af6      	subs	r6, r6, r3
 8016912:	4416      	add	r6, r2
 8016914:	4ba0      	ldr	r3, [pc, #640]	; (8016b98 <_strtod_l+0x938>)
 8016916:	3e01      	subs	r6, #1
 8016918:	429e      	cmp	r6, r3
 801691a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801691e:	f280 80c4 	bge.w	8016aaa <_strtod_l+0x84a>
 8016922:	1b9b      	subs	r3, r3, r6
 8016924:	2b1f      	cmp	r3, #31
 8016926:	eba2 0203 	sub.w	r2, r2, r3
 801692a:	f04f 0101 	mov.w	r1, #1
 801692e:	f300 80b0 	bgt.w	8016a92 <_strtod_l+0x832>
 8016932:	fa01 f303 	lsl.w	r3, r1, r3
 8016936:	930e      	str	r3, [sp, #56]	; 0x38
 8016938:	2300      	movs	r3, #0
 801693a:	930d      	str	r3, [sp, #52]	; 0x34
 801693c:	eb0a 0602 	add.w	r6, sl, r2
 8016940:	9b04      	ldr	r3, [sp, #16]
 8016942:	45b2      	cmp	sl, r6
 8016944:	4417      	add	r7, r2
 8016946:	441f      	add	r7, r3
 8016948:	4653      	mov	r3, sl
 801694a:	bfa8      	it	ge
 801694c:	4633      	movge	r3, r6
 801694e:	42bb      	cmp	r3, r7
 8016950:	bfa8      	it	ge
 8016952:	463b      	movge	r3, r7
 8016954:	2b00      	cmp	r3, #0
 8016956:	bfc2      	ittt	gt
 8016958:	1af6      	subgt	r6, r6, r3
 801695a:	1aff      	subgt	r7, r7, r3
 801695c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016962:	2b00      	cmp	r3, #0
 8016964:	dd17      	ble.n	8016996 <_strtod_l+0x736>
 8016966:	4659      	mov	r1, fp
 8016968:	461a      	mov	r2, r3
 801696a:	4620      	mov	r0, r4
 801696c:	f7ff f9ae 	bl	8015ccc <__pow5mult>
 8016970:	4683      	mov	fp, r0
 8016972:	2800      	cmp	r0, #0
 8016974:	f43f aeb8 	beq.w	80166e8 <_strtod_l+0x488>
 8016978:	4601      	mov	r1, r0
 801697a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801697c:	4620      	mov	r0, r4
 801697e:	f7ff f8fb 	bl	8015b78 <__multiply>
 8016982:	900b      	str	r0, [sp, #44]	; 0x2c
 8016984:	2800      	cmp	r0, #0
 8016986:	f43f aeaf 	beq.w	80166e8 <_strtod_l+0x488>
 801698a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801698c:	4620      	mov	r0, r4
 801698e:	f7fe ffdd 	bl	801594c <_Bfree>
 8016992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016994:	9316      	str	r3, [sp, #88]	; 0x58
 8016996:	2e00      	cmp	r6, #0
 8016998:	f300 808c 	bgt.w	8016ab4 <_strtod_l+0x854>
 801699c:	9b08      	ldr	r3, [sp, #32]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	dd08      	ble.n	80169b4 <_strtod_l+0x754>
 80169a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169a4:	9905      	ldr	r1, [sp, #20]
 80169a6:	4620      	mov	r0, r4
 80169a8:	f7ff f990 	bl	8015ccc <__pow5mult>
 80169ac:	9005      	str	r0, [sp, #20]
 80169ae:	2800      	cmp	r0, #0
 80169b0:	f43f ae9a 	beq.w	80166e8 <_strtod_l+0x488>
 80169b4:	2f00      	cmp	r7, #0
 80169b6:	dd08      	ble.n	80169ca <_strtod_l+0x76a>
 80169b8:	9905      	ldr	r1, [sp, #20]
 80169ba:	463a      	mov	r2, r7
 80169bc:	4620      	mov	r0, r4
 80169be:	f7ff f9df 	bl	8015d80 <__lshift>
 80169c2:	9005      	str	r0, [sp, #20]
 80169c4:	2800      	cmp	r0, #0
 80169c6:	f43f ae8f 	beq.w	80166e8 <_strtod_l+0x488>
 80169ca:	f1ba 0f00 	cmp.w	sl, #0
 80169ce:	dd08      	ble.n	80169e2 <_strtod_l+0x782>
 80169d0:	4659      	mov	r1, fp
 80169d2:	4652      	mov	r2, sl
 80169d4:	4620      	mov	r0, r4
 80169d6:	f7ff f9d3 	bl	8015d80 <__lshift>
 80169da:	4683      	mov	fp, r0
 80169dc:	2800      	cmp	r0, #0
 80169de:	f43f ae83 	beq.w	80166e8 <_strtod_l+0x488>
 80169e2:	9a05      	ldr	r2, [sp, #20]
 80169e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80169e6:	4620      	mov	r0, r4
 80169e8:	f7ff fa52 	bl	8015e90 <__mdiff>
 80169ec:	4605      	mov	r5, r0
 80169ee:	2800      	cmp	r0, #0
 80169f0:	f43f ae7a 	beq.w	80166e8 <_strtod_l+0x488>
 80169f4:	68c3      	ldr	r3, [r0, #12]
 80169f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80169f8:	2300      	movs	r3, #0
 80169fa:	60c3      	str	r3, [r0, #12]
 80169fc:	4659      	mov	r1, fp
 80169fe:	f7ff fa2b 	bl	8015e58 <__mcmp>
 8016a02:	2800      	cmp	r0, #0
 8016a04:	da60      	bge.n	8016ac8 <_strtod_l+0x868>
 8016a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a08:	ea53 0308 	orrs.w	r3, r3, r8
 8016a0c:	f040 8084 	bne.w	8016b18 <_strtod_l+0x8b8>
 8016a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d17f      	bne.n	8016b18 <_strtod_l+0x8b8>
 8016a18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016a1c:	0d1b      	lsrs	r3, r3, #20
 8016a1e:	051b      	lsls	r3, r3, #20
 8016a20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016a24:	d978      	bls.n	8016b18 <_strtod_l+0x8b8>
 8016a26:	696b      	ldr	r3, [r5, #20]
 8016a28:	b913      	cbnz	r3, 8016a30 <_strtod_l+0x7d0>
 8016a2a:	692b      	ldr	r3, [r5, #16]
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	dd73      	ble.n	8016b18 <_strtod_l+0x8b8>
 8016a30:	4629      	mov	r1, r5
 8016a32:	2201      	movs	r2, #1
 8016a34:	4620      	mov	r0, r4
 8016a36:	f7ff f9a3 	bl	8015d80 <__lshift>
 8016a3a:	4659      	mov	r1, fp
 8016a3c:	4605      	mov	r5, r0
 8016a3e:	f7ff fa0b 	bl	8015e58 <__mcmp>
 8016a42:	2800      	cmp	r0, #0
 8016a44:	dd68      	ble.n	8016b18 <_strtod_l+0x8b8>
 8016a46:	9904      	ldr	r1, [sp, #16]
 8016a48:	4a54      	ldr	r2, [pc, #336]	; (8016b9c <_strtod_l+0x93c>)
 8016a4a:	464b      	mov	r3, r9
 8016a4c:	2900      	cmp	r1, #0
 8016a4e:	f000 8084 	beq.w	8016b5a <_strtod_l+0x8fa>
 8016a52:	ea02 0109 	and.w	r1, r2, r9
 8016a56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016a5a:	dc7e      	bgt.n	8016b5a <_strtod_l+0x8fa>
 8016a5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016a60:	f77f aeb3 	ble.w	80167ca <_strtod_l+0x56a>
 8016a64:	4b4e      	ldr	r3, [pc, #312]	; (8016ba0 <_strtod_l+0x940>)
 8016a66:	4640      	mov	r0, r8
 8016a68:	4649      	mov	r1, r9
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	f7e9 fdec 	bl	8000648 <__aeabi_dmul>
 8016a70:	4b4a      	ldr	r3, [pc, #296]	; (8016b9c <_strtod_l+0x93c>)
 8016a72:	400b      	ands	r3, r1
 8016a74:	4680      	mov	r8, r0
 8016a76:	4689      	mov	r9, r1
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	f47f ae3f 	bne.w	80166fc <_strtod_l+0x49c>
 8016a7e:	2322      	movs	r3, #34	; 0x22
 8016a80:	6023      	str	r3, [r4, #0]
 8016a82:	e63b      	b.n	80166fc <_strtod_l+0x49c>
 8016a84:	f04f 32ff 	mov.w	r2, #4294967295
 8016a88:	fa02 f303 	lsl.w	r3, r2, r3
 8016a8c:	ea03 0808 	and.w	r8, r3, r8
 8016a90:	e6e8      	b.n	8016864 <_strtod_l+0x604>
 8016a92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016a96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016a9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016a9e:	36e2      	adds	r6, #226	; 0xe2
 8016aa0:	fa01 f306 	lsl.w	r3, r1, r6
 8016aa4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016aa8:	e748      	b.n	801693c <_strtod_l+0x6dc>
 8016aaa:	2100      	movs	r1, #0
 8016aac:	2301      	movs	r3, #1
 8016aae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016ab2:	e743      	b.n	801693c <_strtod_l+0x6dc>
 8016ab4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016ab6:	4632      	mov	r2, r6
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f7ff f961 	bl	8015d80 <__lshift>
 8016abe:	9016      	str	r0, [sp, #88]	; 0x58
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	f47f af6b 	bne.w	801699c <_strtod_l+0x73c>
 8016ac6:	e60f      	b.n	80166e8 <_strtod_l+0x488>
 8016ac8:	46ca      	mov	sl, r9
 8016aca:	d171      	bne.n	8016bb0 <_strtod_l+0x950>
 8016acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ad2:	b352      	cbz	r2, 8016b2a <_strtod_l+0x8ca>
 8016ad4:	4a33      	ldr	r2, [pc, #204]	; (8016ba4 <_strtod_l+0x944>)
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	d12a      	bne.n	8016b30 <_strtod_l+0x8d0>
 8016ada:	9b04      	ldr	r3, [sp, #16]
 8016adc:	4641      	mov	r1, r8
 8016ade:	b1fb      	cbz	r3, 8016b20 <_strtod_l+0x8c0>
 8016ae0:	4b2e      	ldr	r3, [pc, #184]	; (8016b9c <_strtod_l+0x93c>)
 8016ae2:	ea09 0303 	and.w	r3, r9, r3
 8016ae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016aea:	f04f 32ff 	mov.w	r2, #4294967295
 8016aee:	d81a      	bhi.n	8016b26 <_strtod_l+0x8c6>
 8016af0:	0d1b      	lsrs	r3, r3, #20
 8016af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016af6:	fa02 f303 	lsl.w	r3, r2, r3
 8016afa:	4299      	cmp	r1, r3
 8016afc:	d118      	bne.n	8016b30 <_strtod_l+0x8d0>
 8016afe:	4b2a      	ldr	r3, [pc, #168]	; (8016ba8 <_strtod_l+0x948>)
 8016b00:	459a      	cmp	sl, r3
 8016b02:	d102      	bne.n	8016b0a <_strtod_l+0x8aa>
 8016b04:	3101      	adds	r1, #1
 8016b06:	f43f adef 	beq.w	80166e8 <_strtod_l+0x488>
 8016b0a:	4b24      	ldr	r3, [pc, #144]	; (8016b9c <_strtod_l+0x93c>)
 8016b0c:	ea0a 0303 	and.w	r3, sl, r3
 8016b10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016b14:	f04f 0800 	mov.w	r8, #0
 8016b18:	9b04      	ldr	r3, [sp, #16]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d1a2      	bne.n	8016a64 <_strtod_l+0x804>
 8016b1e:	e5ed      	b.n	80166fc <_strtod_l+0x49c>
 8016b20:	f04f 33ff 	mov.w	r3, #4294967295
 8016b24:	e7e9      	b.n	8016afa <_strtod_l+0x89a>
 8016b26:	4613      	mov	r3, r2
 8016b28:	e7e7      	b.n	8016afa <_strtod_l+0x89a>
 8016b2a:	ea53 0308 	orrs.w	r3, r3, r8
 8016b2e:	d08a      	beq.n	8016a46 <_strtod_l+0x7e6>
 8016b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b32:	b1e3      	cbz	r3, 8016b6e <_strtod_l+0x90e>
 8016b34:	ea13 0f0a 	tst.w	r3, sl
 8016b38:	d0ee      	beq.n	8016b18 <_strtod_l+0x8b8>
 8016b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b3c:	9a04      	ldr	r2, [sp, #16]
 8016b3e:	4640      	mov	r0, r8
 8016b40:	4649      	mov	r1, r9
 8016b42:	b1c3      	cbz	r3, 8016b76 <_strtod_l+0x916>
 8016b44:	f7ff fb6f 	bl	8016226 <sulp>
 8016b48:	4602      	mov	r2, r0
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	ec51 0b18 	vmov	r0, r1, d8
 8016b50:	f7e9 fbc4 	bl	80002dc <__adddf3>
 8016b54:	4680      	mov	r8, r0
 8016b56:	4689      	mov	r9, r1
 8016b58:	e7de      	b.n	8016b18 <_strtod_l+0x8b8>
 8016b5a:	4013      	ands	r3, r2
 8016b5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016b60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016b64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016b68:	f04f 38ff 	mov.w	r8, #4294967295
 8016b6c:	e7d4      	b.n	8016b18 <_strtod_l+0x8b8>
 8016b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b70:	ea13 0f08 	tst.w	r3, r8
 8016b74:	e7e0      	b.n	8016b38 <_strtod_l+0x8d8>
 8016b76:	f7ff fb56 	bl	8016226 <sulp>
 8016b7a:	4602      	mov	r2, r0
 8016b7c:	460b      	mov	r3, r1
 8016b7e:	ec51 0b18 	vmov	r0, r1, d8
 8016b82:	f7e9 fba9 	bl	80002d8 <__aeabi_dsub>
 8016b86:	2200      	movs	r2, #0
 8016b88:	2300      	movs	r3, #0
 8016b8a:	4680      	mov	r8, r0
 8016b8c:	4689      	mov	r9, r1
 8016b8e:	f7e9 ffc3 	bl	8000b18 <__aeabi_dcmpeq>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d0c0      	beq.n	8016b18 <_strtod_l+0x8b8>
 8016b96:	e618      	b.n	80167ca <_strtod_l+0x56a>
 8016b98:	fffffc02 	.word	0xfffffc02
 8016b9c:	7ff00000 	.word	0x7ff00000
 8016ba0:	39500000 	.word	0x39500000
 8016ba4:	000fffff 	.word	0x000fffff
 8016ba8:	7fefffff 	.word	0x7fefffff
 8016bac:	08019400 	.word	0x08019400
 8016bb0:	4659      	mov	r1, fp
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	f7ff fac0 	bl	8016138 <__ratio>
 8016bb8:	ec57 6b10 	vmov	r6, r7, d0
 8016bbc:	ee10 0a10 	vmov	r0, s0
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016bc6:	4639      	mov	r1, r7
 8016bc8:	f7e9 ffba 	bl	8000b40 <__aeabi_dcmple>
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	d071      	beq.n	8016cb4 <_strtod_l+0xa54>
 8016bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d17c      	bne.n	8016cd0 <_strtod_l+0xa70>
 8016bd6:	f1b8 0f00 	cmp.w	r8, #0
 8016bda:	d15a      	bne.n	8016c92 <_strtod_l+0xa32>
 8016bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d15d      	bne.n	8016ca0 <_strtod_l+0xa40>
 8016be4:	4b90      	ldr	r3, [pc, #576]	; (8016e28 <_strtod_l+0xbc8>)
 8016be6:	2200      	movs	r2, #0
 8016be8:	4630      	mov	r0, r6
 8016bea:	4639      	mov	r1, r7
 8016bec:	f7e9 ff9e 	bl	8000b2c <__aeabi_dcmplt>
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	d15c      	bne.n	8016cae <_strtod_l+0xa4e>
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	4639      	mov	r1, r7
 8016bf8:	4b8c      	ldr	r3, [pc, #560]	; (8016e2c <_strtod_l+0xbcc>)
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	f7e9 fd24 	bl	8000648 <__aeabi_dmul>
 8016c00:	4606      	mov	r6, r0
 8016c02:	460f      	mov	r7, r1
 8016c04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016c08:	9606      	str	r6, [sp, #24]
 8016c0a:	9307      	str	r3, [sp, #28]
 8016c0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016c14:	4b86      	ldr	r3, [pc, #536]	; (8016e30 <_strtod_l+0xbd0>)
 8016c16:	ea0a 0303 	and.w	r3, sl, r3
 8016c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8016c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c1e:	4b85      	ldr	r3, [pc, #532]	; (8016e34 <_strtod_l+0xbd4>)
 8016c20:	429a      	cmp	r2, r3
 8016c22:	f040 8090 	bne.w	8016d46 <_strtod_l+0xae6>
 8016c26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016c2a:	ec49 8b10 	vmov	d0, r8, r9
 8016c2e:	f7ff f9b9 	bl	8015fa4 <__ulp>
 8016c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c36:	ec51 0b10 	vmov	r0, r1, d0
 8016c3a:	f7e9 fd05 	bl	8000648 <__aeabi_dmul>
 8016c3e:	4642      	mov	r2, r8
 8016c40:	464b      	mov	r3, r9
 8016c42:	f7e9 fb4b 	bl	80002dc <__adddf3>
 8016c46:	460b      	mov	r3, r1
 8016c48:	4979      	ldr	r1, [pc, #484]	; (8016e30 <_strtod_l+0xbd0>)
 8016c4a:	4a7b      	ldr	r2, [pc, #492]	; (8016e38 <_strtod_l+0xbd8>)
 8016c4c:	4019      	ands	r1, r3
 8016c4e:	4291      	cmp	r1, r2
 8016c50:	4680      	mov	r8, r0
 8016c52:	d944      	bls.n	8016cde <_strtod_l+0xa7e>
 8016c54:	ee18 2a90 	vmov	r2, s17
 8016c58:	4b78      	ldr	r3, [pc, #480]	; (8016e3c <_strtod_l+0xbdc>)
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d104      	bne.n	8016c68 <_strtod_l+0xa08>
 8016c5e:	ee18 3a10 	vmov	r3, s16
 8016c62:	3301      	adds	r3, #1
 8016c64:	f43f ad40 	beq.w	80166e8 <_strtod_l+0x488>
 8016c68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016e3c <_strtod_l+0xbdc>
 8016c6c:	f04f 38ff 	mov.w	r8, #4294967295
 8016c70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016c72:	4620      	mov	r0, r4
 8016c74:	f7fe fe6a 	bl	801594c <_Bfree>
 8016c78:	9905      	ldr	r1, [sp, #20]
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f7fe fe66 	bl	801594c <_Bfree>
 8016c80:	4659      	mov	r1, fp
 8016c82:	4620      	mov	r0, r4
 8016c84:	f7fe fe62 	bl	801594c <_Bfree>
 8016c88:	4629      	mov	r1, r5
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	f7fe fe5e 	bl	801594c <_Bfree>
 8016c90:	e609      	b.n	80168a6 <_strtod_l+0x646>
 8016c92:	f1b8 0f01 	cmp.w	r8, #1
 8016c96:	d103      	bne.n	8016ca0 <_strtod_l+0xa40>
 8016c98:	f1b9 0f00 	cmp.w	r9, #0
 8016c9c:	f43f ad95 	beq.w	80167ca <_strtod_l+0x56a>
 8016ca0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016df8 <_strtod_l+0xb98>
 8016ca4:	4f60      	ldr	r7, [pc, #384]	; (8016e28 <_strtod_l+0xbc8>)
 8016ca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016caa:	2600      	movs	r6, #0
 8016cac:	e7ae      	b.n	8016c0c <_strtod_l+0x9ac>
 8016cae:	4f5f      	ldr	r7, [pc, #380]	; (8016e2c <_strtod_l+0xbcc>)
 8016cb0:	2600      	movs	r6, #0
 8016cb2:	e7a7      	b.n	8016c04 <_strtod_l+0x9a4>
 8016cb4:	4b5d      	ldr	r3, [pc, #372]	; (8016e2c <_strtod_l+0xbcc>)
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	4639      	mov	r1, r7
 8016cba:	2200      	movs	r2, #0
 8016cbc:	f7e9 fcc4 	bl	8000648 <__aeabi_dmul>
 8016cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cc2:	4606      	mov	r6, r0
 8016cc4:	460f      	mov	r7, r1
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d09c      	beq.n	8016c04 <_strtod_l+0x9a4>
 8016cca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016cce:	e79d      	b.n	8016c0c <_strtod_l+0x9ac>
 8016cd0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016e00 <_strtod_l+0xba0>
 8016cd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016cd8:	ec57 6b17 	vmov	r6, r7, d7
 8016cdc:	e796      	b.n	8016c0c <_strtod_l+0x9ac>
 8016cde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016ce2:	9b04      	ldr	r3, [sp, #16]
 8016ce4:	46ca      	mov	sl, r9
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d1c2      	bne.n	8016c70 <_strtod_l+0xa10>
 8016cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016cf0:	0d1b      	lsrs	r3, r3, #20
 8016cf2:	051b      	lsls	r3, r3, #20
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d1bb      	bne.n	8016c70 <_strtod_l+0xa10>
 8016cf8:	4630      	mov	r0, r6
 8016cfa:	4639      	mov	r1, r7
 8016cfc:	f7ea f804 	bl	8000d08 <__aeabi_d2lz>
 8016d00:	f7e9 fc74 	bl	80005ec <__aeabi_l2d>
 8016d04:	4602      	mov	r2, r0
 8016d06:	460b      	mov	r3, r1
 8016d08:	4630      	mov	r0, r6
 8016d0a:	4639      	mov	r1, r7
 8016d0c:	f7e9 fae4 	bl	80002d8 <__aeabi_dsub>
 8016d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016d16:	ea43 0308 	orr.w	r3, r3, r8
 8016d1a:	4313      	orrs	r3, r2
 8016d1c:	4606      	mov	r6, r0
 8016d1e:	460f      	mov	r7, r1
 8016d20:	d054      	beq.n	8016dcc <_strtod_l+0xb6c>
 8016d22:	a339      	add	r3, pc, #228	; (adr r3, 8016e08 <_strtod_l+0xba8>)
 8016d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d28:	f7e9 ff00 	bl	8000b2c <__aeabi_dcmplt>
 8016d2c:	2800      	cmp	r0, #0
 8016d2e:	f47f ace5 	bne.w	80166fc <_strtod_l+0x49c>
 8016d32:	a337      	add	r3, pc, #220	; (adr r3, 8016e10 <_strtod_l+0xbb0>)
 8016d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d38:	4630      	mov	r0, r6
 8016d3a:	4639      	mov	r1, r7
 8016d3c:	f7e9 ff14 	bl	8000b68 <__aeabi_dcmpgt>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d095      	beq.n	8016c70 <_strtod_l+0xa10>
 8016d44:	e4da      	b.n	80166fc <_strtod_l+0x49c>
 8016d46:	9b04      	ldr	r3, [sp, #16]
 8016d48:	b333      	cbz	r3, 8016d98 <_strtod_l+0xb38>
 8016d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016d50:	d822      	bhi.n	8016d98 <_strtod_l+0xb38>
 8016d52:	a331      	add	r3, pc, #196	; (adr r3, 8016e18 <_strtod_l+0xbb8>)
 8016d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d58:	4630      	mov	r0, r6
 8016d5a:	4639      	mov	r1, r7
 8016d5c:	f7e9 fef0 	bl	8000b40 <__aeabi_dcmple>
 8016d60:	b1a0      	cbz	r0, 8016d8c <_strtod_l+0xb2c>
 8016d62:	4639      	mov	r1, r7
 8016d64:	4630      	mov	r0, r6
 8016d66:	f7e9 ff47 	bl	8000bf8 <__aeabi_d2uiz>
 8016d6a:	2801      	cmp	r0, #1
 8016d6c:	bf38      	it	cc
 8016d6e:	2001      	movcc	r0, #1
 8016d70:	f7e9 fbf0 	bl	8000554 <__aeabi_ui2d>
 8016d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d76:	4606      	mov	r6, r0
 8016d78:	460f      	mov	r7, r1
 8016d7a:	bb23      	cbnz	r3, 8016dc6 <_strtod_l+0xb66>
 8016d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d80:	9010      	str	r0, [sp, #64]	; 0x40
 8016d82:	9311      	str	r3, [sp, #68]	; 0x44
 8016d84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016d88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016d94:	1a9b      	subs	r3, r3, r2
 8016d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8016da0:	eef0 0a68 	vmov.f32	s1, s17
 8016da4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016da8:	f7ff f8fc 	bl	8015fa4 <__ulp>
 8016dac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016db0:	ec53 2b10 	vmov	r2, r3, d0
 8016db4:	f7e9 fc48 	bl	8000648 <__aeabi_dmul>
 8016db8:	ec53 2b18 	vmov	r2, r3, d8
 8016dbc:	f7e9 fa8e 	bl	80002dc <__adddf3>
 8016dc0:	4680      	mov	r8, r0
 8016dc2:	4689      	mov	r9, r1
 8016dc4:	e78d      	b.n	8016ce2 <_strtod_l+0xa82>
 8016dc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016dca:	e7db      	b.n	8016d84 <_strtod_l+0xb24>
 8016dcc:	a314      	add	r3, pc, #80	; (adr r3, 8016e20 <_strtod_l+0xbc0>)
 8016dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd2:	f7e9 feab 	bl	8000b2c <__aeabi_dcmplt>
 8016dd6:	e7b3      	b.n	8016d40 <_strtod_l+0xae0>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	930a      	str	r3, [sp, #40]	; 0x28
 8016ddc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016de0:	6013      	str	r3, [r2, #0]
 8016de2:	f7ff ba7c 	b.w	80162de <_strtod_l+0x7e>
 8016de6:	2a65      	cmp	r2, #101	; 0x65
 8016de8:	f43f ab75 	beq.w	80164d6 <_strtod_l+0x276>
 8016dec:	2a45      	cmp	r2, #69	; 0x45
 8016dee:	f43f ab72 	beq.w	80164d6 <_strtod_l+0x276>
 8016df2:	2301      	movs	r3, #1
 8016df4:	f7ff bbaa 	b.w	801654c <_strtod_l+0x2ec>
 8016df8:	00000000 	.word	0x00000000
 8016dfc:	bff00000 	.word	0xbff00000
 8016e00:	00000000 	.word	0x00000000
 8016e04:	3ff00000 	.word	0x3ff00000
 8016e08:	94a03595 	.word	0x94a03595
 8016e0c:	3fdfffff 	.word	0x3fdfffff
 8016e10:	35afe535 	.word	0x35afe535
 8016e14:	3fe00000 	.word	0x3fe00000
 8016e18:	ffc00000 	.word	0xffc00000
 8016e1c:	41dfffff 	.word	0x41dfffff
 8016e20:	94a03595 	.word	0x94a03595
 8016e24:	3fcfffff 	.word	0x3fcfffff
 8016e28:	3ff00000 	.word	0x3ff00000
 8016e2c:	3fe00000 	.word	0x3fe00000
 8016e30:	7ff00000 	.word	0x7ff00000
 8016e34:	7fe00000 	.word	0x7fe00000
 8016e38:	7c9fffff 	.word	0x7c9fffff
 8016e3c:	7fefffff 	.word	0x7fefffff

08016e40 <_strtod_r>:
 8016e40:	4b01      	ldr	r3, [pc, #4]	; (8016e48 <_strtod_r+0x8>)
 8016e42:	f7ff ba0d 	b.w	8016260 <_strtod_l>
 8016e46:	bf00      	nop
 8016e48:	200000e0 	.word	0x200000e0

08016e4c <_strtol_l.constprop.0>:
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e52:	d001      	beq.n	8016e58 <_strtol_l.constprop.0+0xc>
 8016e54:	2b24      	cmp	r3, #36	; 0x24
 8016e56:	d906      	bls.n	8016e66 <_strtol_l.constprop.0+0x1a>
 8016e58:	f7fd fe30 	bl	8014abc <__errno>
 8016e5c:	2316      	movs	r3, #22
 8016e5e:	6003      	str	r3, [r0, #0]
 8016e60:	2000      	movs	r0, #0
 8016e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016f4c <_strtol_l.constprop.0+0x100>
 8016e6a:	460d      	mov	r5, r1
 8016e6c:	462e      	mov	r6, r5
 8016e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e72:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016e76:	f017 0708 	ands.w	r7, r7, #8
 8016e7a:	d1f7      	bne.n	8016e6c <_strtol_l.constprop.0+0x20>
 8016e7c:	2c2d      	cmp	r4, #45	; 0x2d
 8016e7e:	d132      	bne.n	8016ee6 <_strtol_l.constprop.0+0x9a>
 8016e80:	782c      	ldrb	r4, [r5, #0]
 8016e82:	2701      	movs	r7, #1
 8016e84:	1cb5      	adds	r5, r6, #2
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d05b      	beq.n	8016f42 <_strtol_l.constprop.0+0xf6>
 8016e8a:	2b10      	cmp	r3, #16
 8016e8c:	d109      	bne.n	8016ea2 <_strtol_l.constprop.0+0x56>
 8016e8e:	2c30      	cmp	r4, #48	; 0x30
 8016e90:	d107      	bne.n	8016ea2 <_strtol_l.constprop.0+0x56>
 8016e92:	782c      	ldrb	r4, [r5, #0]
 8016e94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e98:	2c58      	cmp	r4, #88	; 0x58
 8016e9a:	d14d      	bne.n	8016f38 <_strtol_l.constprop.0+0xec>
 8016e9c:	786c      	ldrb	r4, [r5, #1]
 8016e9e:	2310      	movs	r3, #16
 8016ea0:	3502      	adds	r5, #2
 8016ea2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016ea6:	f108 38ff 	add.w	r8, r8, #4294967295
 8016eaa:	f04f 0e00 	mov.w	lr, #0
 8016eae:	fbb8 f9f3 	udiv	r9, r8, r3
 8016eb2:	4676      	mov	r6, lr
 8016eb4:	fb03 8a19 	mls	sl, r3, r9, r8
 8016eb8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016ebc:	f1bc 0f09 	cmp.w	ip, #9
 8016ec0:	d816      	bhi.n	8016ef0 <_strtol_l.constprop.0+0xa4>
 8016ec2:	4664      	mov	r4, ip
 8016ec4:	42a3      	cmp	r3, r4
 8016ec6:	dd24      	ble.n	8016f12 <_strtol_l.constprop.0+0xc6>
 8016ec8:	f1be 3fff 	cmp.w	lr, #4294967295
 8016ecc:	d008      	beq.n	8016ee0 <_strtol_l.constprop.0+0x94>
 8016ece:	45b1      	cmp	r9, r6
 8016ed0:	d31c      	bcc.n	8016f0c <_strtol_l.constprop.0+0xc0>
 8016ed2:	d101      	bne.n	8016ed8 <_strtol_l.constprop.0+0x8c>
 8016ed4:	45a2      	cmp	sl, r4
 8016ed6:	db19      	blt.n	8016f0c <_strtol_l.constprop.0+0xc0>
 8016ed8:	fb06 4603 	mla	r6, r6, r3, r4
 8016edc:	f04f 0e01 	mov.w	lr, #1
 8016ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ee4:	e7e8      	b.n	8016eb8 <_strtol_l.constprop.0+0x6c>
 8016ee6:	2c2b      	cmp	r4, #43	; 0x2b
 8016ee8:	bf04      	itt	eq
 8016eea:	782c      	ldrbeq	r4, [r5, #0]
 8016eec:	1cb5      	addeq	r5, r6, #2
 8016eee:	e7ca      	b.n	8016e86 <_strtol_l.constprop.0+0x3a>
 8016ef0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016ef4:	f1bc 0f19 	cmp.w	ip, #25
 8016ef8:	d801      	bhi.n	8016efe <_strtol_l.constprop.0+0xb2>
 8016efa:	3c37      	subs	r4, #55	; 0x37
 8016efc:	e7e2      	b.n	8016ec4 <_strtol_l.constprop.0+0x78>
 8016efe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016f02:	f1bc 0f19 	cmp.w	ip, #25
 8016f06:	d804      	bhi.n	8016f12 <_strtol_l.constprop.0+0xc6>
 8016f08:	3c57      	subs	r4, #87	; 0x57
 8016f0a:	e7db      	b.n	8016ec4 <_strtol_l.constprop.0+0x78>
 8016f0c:	f04f 3eff 	mov.w	lr, #4294967295
 8016f10:	e7e6      	b.n	8016ee0 <_strtol_l.constprop.0+0x94>
 8016f12:	f1be 3fff 	cmp.w	lr, #4294967295
 8016f16:	d105      	bne.n	8016f24 <_strtol_l.constprop.0+0xd8>
 8016f18:	2322      	movs	r3, #34	; 0x22
 8016f1a:	6003      	str	r3, [r0, #0]
 8016f1c:	4646      	mov	r6, r8
 8016f1e:	b942      	cbnz	r2, 8016f32 <_strtol_l.constprop.0+0xe6>
 8016f20:	4630      	mov	r0, r6
 8016f22:	e79e      	b.n	8016e62 <_strtol_l.constprop.0+0x16>
 8016f24:	b107      	cbz	r7, 8016f28 <_strtol_l.constprop.0+0xdc>
 8016f26:	4276      	negs	r6, r6
 8016f28:	2a00      	cmp	r2, #0
 8016f2a:	d0f9      	beq.n	8016f20 <_strtol_l.constprop.0+0xd4>
 8016f2c:	f1be 0f00 	cmp.w	lr, #0
 8016f30:	d000      	beq.n	8016f34 <_strtol_l.constprop.0+0xe8>
 8016f32:	1e69      	subs	r1, r5, #1
 8016f34:	6011      	str	r1, [r2, #0]
 8016f36:	e7f3      	b.n	8016f20 <_strtol_l.constprop.0+0xd4>
 8016f38:	2430      	movs	r4, #48	; 0x30
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d1b1      	bne.n	8016ea2 <_strtol_l.constprop.0+0x56>
 8016f3e:	2308      	movs	r3, #8
 8016f40:	e7af      	b.n	8016ea2 <_strtol_l.constprop.0+0x56>
 8016f42:	2c30      	cmp	r4, #48	; 0x30
 8016f44:	d0a5      	beq.n	8016e92 <_strtol_l.constprop.0+0x46>
 8016f46:	230a      	movs	r3, #10
 8016f48:	e7ab      	b.n	8016ea2 <_strtol_l.constprop.0+0x56>
 8016f4a:	bf00      	nop
 8016f4c:	08019429 	.word	0x08019429

08016f50 <_strtol_r>:
 8016f50:	f7ff bf7c 	b.w	8016e4c <_strtol_l.constprop.0>

08016f54 <__ssputs_r>:
 8016f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f58:	688e      	ldr	r6, [r1, #8]
 8016f5a:	461f      	mov	r7, r3
 8016f5c:	42be      	cmp	r6, r7
 8016f5e:	680b      	ldr	r3, [r1, #0]
 8016f60:	4682      	mov	sl, r0
 8016f62:	460c      	mov	r4, r1
 8016f64:	4690      	mov	r8, r2
 8016f66:	d82c      	bhi.n	8016fc2 <__ssputs_r+0x6e>
 8016f68:	898a      	ldrh	r2, [r1, #12]
 8016f6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f6e:	d026      	beq.n	8016fbe <__ssputs_r+0x6a>
 8016f70:	6965      	ldr	r5, [r4, #20]
 8016f72:	6909      	ldr	r1, [r1, #16]
 8016f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f78:	eba3 0901 	sub.w	r9, r3, r1
 8016f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f80:	1c7b      	adds	r3, r7, #1
 8016f82:	444b      	add	r3, r9
 8016f84:	106d      	asrs	r5, r5, #1
 8016f86:	429d      	cmp	r5, r3
 8016f88:	bf38      	it	cc
 8016f8a:	461d      	movcc	r5, r3
 8016f8c:	0553      	lsls	r3, r2, #21
 8016f8e:	d527      	bpl.n	8016fe0 <__ssputs_r+0x8c>
 8016f90:	4629      	mov	r1, r5
 8016f92:	f7fc fc77 	bl	8013884 <_malloc_r>
 8016f96:	4606      	mov	r6, r0
 8016f98:	b360      	cbz	r0, 8016ff4 <__ssputs_r+0xa0>
 8016f9a:	6921      	ldr	r1, [r4, #16]
 8016f9c:	464a      	mov	r2, r9
 8016f9e:	f7fd fdba 	bl	8014b16 <memcpy>
 8016fa2:	89a3      	ldrh	r3, [r4, #12]
 8016fa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fac:	81a3      	strh	r3, [r4, #12]
 8016fae:	6126      	str	r6, [r4, #16]
 8016fb0:	6165      	str	r5, [r4, #20]
 8016fb2:	444e      	add	r6, r9
 8016fb4:	eba5 0509 	sub.w	r5, r5, r9
 8016fb8:	6026      	str	r6, [r4, #0]
 8016fba:	60a5      	str	r5, [r4, #8]
 8016fbc:	463e      	mov	r6, r7
 8016fbe:	42be      	cmp	r6, r7
 8016fc0:	d900      	bls.n	8016fc4 <__ssputs_r+0x70>
 8016fc2:	463e      	mov	r6, r7
 8016fc4:	6820      	ldr	r0, [r4, #0]
 8016fc6:	4632      	mov	r2, r6
 8016fc8:	4641      	mov	r1, r8
 8016fca:	f7fd fca4 	bl	8014916 <memmove>
 8016fce:	68a3      	ldr	r3, [r4, #8]
 8016fd0:	1b9b      	subs	r3, r3, r6
 8016fd2:	60a3      	str	r3, [r4, #8]
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	4433      	add	r3, r6
 8016fd8:	6023      	str	r3, [r4, #0]
 8016fda:	2000      	movs	r0, #0
 8016fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fe0:	462a      	mov	r2, r5
 8016fe2:	f000 ff30 	bl	8017e46 <_realloc_r>
 8016fe6:	4606      	mov	r6, r0
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	d1e0      	bne.n	8016fae <__ssputs_r+0x5a>
 8016fec:	6921      	ldr	r1, [r4, #16]
 8016fee:	4650      	mov	r0, sl
 8016ff0:	f7fe fc20 	bl	8015834 <_free_r>
 8016ff4:	230c      	movs	r3, #12
 8016ff6:	f8ca 3000 	str.w	r3, [sl]
 8016ffa:	89a3      	ldrh	r3, [r4, #12]
 8016ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017000:	81a3      	strh	r3, [r4, #12]
 8017002:	f04f 30ff 	mov.w	r0, #4294967295
 8017006:	e7e9      	b.n	8016fdc <__ssputs_r+0x88>

08017008 <_svfiprintf_r>:
 8017008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801700c:	4698      	mov	r8, r3
 801700e:	898b      	ldrh	r3, [r1, #12]
 8017010:	061b      	lsls	r3, r3, #24
 8017012:	b09d      	sub	sp, #116	; 0x74
 8017014:	4607      	mov	r7, r0
 8017016:	460d      	mov	r5, r1
 8017018:	4614      	mov	r4, r2
 801701a:	d50e      	bpl.n	801703a <_svfiprintf_r+0x32>
 801701c:	690b      	ldr	r3, [r1, #16]
 801701e:	b963      	cbnz	r3, 801703a <_svfiprintf_r+0x32>
 8017020:	2140      	movs	r1, #64	; 0x40
 8017022:	f7fc fc2f 	bl	8013884 <_malloc_r>
 8017026:	6028      	str	r0, [r5, #0]
 8017028:	6128      	str	r0, [r5, #16]
 801702a:	b920      	cbnz	r0, 8017036 <_svfiprintf_r+0x2e>
 801702c:	230c      	movs	r3, #12
 801702e:	603b      	str	r3, [r7, #0]
 8017030:	f04f 30ff 	mov.w	r0, #4294967295
 8017034:	e0d0      	b.n	80171d8 <_svfiprintf_r+0x1d0>
 8017036:	2340      	movs	r3, #64	; 0x40
 8017038:	616b      	str	r3, [r5, #20]
 801703a:	2300      	movs	r3, #0
 801703c:	9309      	str	r3, [sp, #36]	; 0x24
 801703e:	2320      	movs	r3, #32
 8017040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017044:	f8cd 800c 	str.w	r8, [sp, #12]
 8017048:	2330      	movs	r3, #48	; 0x30
 801704a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80171f0 <_svfiprintf_r+0x1e8>
 801704e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017052:	f04f 0901 	mov.w	r9, #1
 8017056:	4623      	mov	r3, r4
 8017058:	469a      	mov	sl, r3
 801705a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801705e:	b10a      	cbz	r2, 8017064 <_svfiprintf_r+0x5c>
 8017060:	2a25      	cmp	r2, #37	; 0x25
 8017062:	d1f9      	bne.n	8017058 <_svfiprintf_r+0x50>
 8017064:	ebba 0b04 	subs.w	fp, sl, r4
 8017068:	d00b      	beq.n	8017082 <_svfiprintf_r+0x7a>
 801706a:	465b      	mov	r3, fp
 801706c:	4622      	mov	r2, r4
 801706e:	4629      	mov	r1, r5
 8017070:	4638      	mov	r0, r7
 8017072:	f7ff ff6f 	bl	8016f54 <__ssputs_r>
 8017076:	3001      	adds	r0, #1
 8017078:	f000 80a9 	beq.w	80171ce <_svfiprintf_r+0x1c6>
 801707c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801707e:	445a      	add	r2, fp
 8017080:	9209      	str	r2, [sp, #36]	; 0x24
 8017082:	f89a 3000 	ldrb.w	r3, [sl]
 8017086:	2b00      	cmp	r3, #0
 8017088:	f000 80a1 	beq.w	80171ce <_svfiprintf_r+0x1c6>
 801708c:	2300      	movs	r3, #0
 801708e:	f04f 32ff 	mov.w	r2, #4294967295
 8017092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017096:	f10a 0a01 	add.w	sl, sl, #1
 801709a:	9304      	str	r3, [sp, #16]
 801709c:	9307      	str	r3, [sp, #28]
 801709e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170a2:	931a      	str	r3, [sp, #104]	; 0x68
 80170a4:	4654      	mov	r4, sl
 80170a6:	2205      	movs	r2, #5
 80170a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170ac:	4850      	ldr	r0, [pc, #320]	; (80171f0 <_svfiprintf_r+0x1e8>)
 80170ae:	f7e9 f8b7 	bl	8000220 <memchr>
 80170b2:	9a04      	ldr	r2, [sp, #16]
 80170b4:	b9d8      	cbnz	r0, 80170ee <_svfiprintf_r+0xe6>
 80170b6:	06d0      	lsls	r0, r2, #27
 80170b8:	bf44      	itt	mi
 80170ba:	2320      	movmi	r3, #32
 80170bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80170c0:	0711      	lsls	r1, r2, #28
 80170c2:	bf44      	itt	mi
 80170c4:	232b      	movmi	r3, #43	; 0x2b
 80170c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80170ca:	f89a 3000 	ldrb.w	r3, [sl]
 80170ce:	2b2a      	cmp	r3, #42	; 0x2a
 80170d0:	d015      	beq.n	80170fe <_svfiprintf_r+0xf6>
 80170d2:	9a07      	ldr	r2, [sp, #28]
 80170d4:	4654      	mov	r4, sl
 80170d6:	2000      	movs	r0, #0
 80170d8:	f04f 0c0a 	mov.w	ip, #10
 80170dc:	4621      	mov	r1, r4
 80170de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170e2:	3b30      	subs	r3, #48	; 0x30
 80170e4:	2b09      	cmp	r3, #9
 80170e6:	d94d      	bls.n	8017184 <_svfiprintf_r+0x17c>
 80170e8:	b1b0      	cbz	r0, 8017118 <_svfiprintf_r+0x110>
 80170ea:	9207      	str	r2, [sp, #28]
 80170ec:	e014      	b.n	8017118 <_svfiprintf_r+0x110>
 80170ee:	eba0 0308 	sub.w	r3, r0, r8
 80170f2:	fa09 f303 	lsl.w	r3, r9, r3
 80170f6:	4313      	orrs	r3, r2
 80170f8:	9304      	str	r3, [sp, #16]
 80170fa:	46a2      	mov	sl, r4
 80170fc:	e7d2      	b.n	80170a4 <_svfiprintf_r+0x9c>
 80170fe:	9b03      	ldr	r3, [sp, #12]
 8017100:	1d19      	adds	r1, r3, #4
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	9103      	str	r1, [sp, #12]
 8017106:	2b00      	cmp	r3, #0
 8017108:	bfbb      	ittet	lt
 801710a:	425b      	neglt	r3, r3
 801710c:	f042 0202 	orrlt.w	r2, r2, #2
 8017110:	9307      	strge	r3, [sp, #28]
 8017112:	9307      	strlt	r3, [sp, #28]
 8017114:	bfb8      	it	lt
 8017116:	9204      	strlt	r2, [sp, #16]
 8017118:	7823      	ldrb	r3, [r4, #0]
 801711a:	2b2e      	cmp	r3, #46	; 0x2e
 801711c:	d10c      	bne.n	8017138 <_svfiprintf_r+0x130>
 801711e:	7863      	ldrb	r3, [r4, #1]
 8017120:	2b2a      	cmp	r3, #42	; 0x2a
 8017122:	d134      	bne.n	801718e <_svfiprintf_r+0x186>
 8017124:	9b03      	ldr	r3, [sp, #12]
 8017126:	1d1a      	adds	r2, r3, #4
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	9203      	str	r2, [sp, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	bfb8      	it	lt
 8017130:	f04f 33ff 	movlt.w	r3, #4294967295
 8017134:	3402      	adds	r4, #2
 8017136:	9305      	str	r3, [sp, #20]
 8017138:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017200 <_svfiprintf_r+0x1f8>
 801713c:	7821      	ldrb	r1, [r4, #0]
 801713e:	2203      	movs	r2, #3
 8017140:	4650      	mov	r0, sl
 8017142:	f7e9 f86d 	bl	8000220 <memchr>
 8017146:	b138      	cbz	r0, 8017158 <_svfiprintf_r+0x150>
 8017148:	9b04      	ldr	r3, [sp, #16]
 801714a:	eba0 000a 	sub.w	r0, r0, sl
 801714e:	2240      	movs	r2, #64	; 0x40
 8017150:	4082      	lsls	r2, r0
 8017152:	4313      	orrs	r3, r2
 8017154:	3401      	adds	r4, #1
 8017156:	9304      	str	r3, [sp, #16]
 8017158:	f814 1b01 	ldrb.w	r1, [r4], #1
 801715c:	4825      	ldr	r0, [pc, #148]	; (80171f4 <_svfiprintf_r+0x1ec>)
 801715e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017162:	2206      	movs	r2, #6
 8017164:	f7e9 f85c 	bl	8000220 <memchr>
 8017168:	2800      	cmp	r0, #0
 801716a:	d038      	beq.n	80171de <_svfiprintf_r+0x1d6>
 801716c:	4b22      	ldr	r3, [pc, #136]	; (80171f8 <_svfiprintf_r+0x1f0>)
 801716e:	bb1b      	cbnz	r3, 80171b8 <_svfiprintf_r+0x1b0>
 8017170:	9b03      	ldr	r3, [sp, #12]
 8017172:	3307      	adds	r3, #7
 8017174:	f023 0307 	bic.w	r3, r3, #7
 8017178:	3308      	adds	r3, #8
 801717a:	9303      	str	r3, [sp, #12]
 801717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801717e:	4433      	add	r3, r6
 8017180:	9309      	str	r3, [sp, #36]	; 0x24
 8017182:	e768      	b.n	8017056 <_svfiprintf_r+0x4e>
 8017184:	fb0c 3202 	mla	r2, ip, r2, r3
 8017188:	460c      	mov	r4, r1
 801718a:	2001      	movs	r0, #1
 801718c:	e7a6      	b.n	80170dc <_svfiprintf_r+0xd4>
 801718e:	2300      	movs	r3, #0
 8017190:	3401      	adds	r4, #1
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	4619      	mov	r1, r3
 8017196:	f04f 0c0a 	mov.w	ip, #10
 801719a:	4620      	mov	r0, r4
 801719c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171a0:	3a30      	subs	r2, #48	; 0x30
 80171a2:	2a09      	cmp	r2, #9
 80171a4:	d903      	bls.n	80171ae <_svfiprintf_r+0x1a6>
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d0c6      	beq.n	8017138 <_svfiprintf_r+0x130>
 80171aa:	9105      	str	r1, [sp, #20]
 80171ac:	e7c4      	b.n	8017138 <_svfiprintf_r+0x130>
 80171ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80171b2:	4604      	mov	r4, r0
 80171b4:	2301      	movs	r3, #1
 80171b6:	e7f0      	b.n	801719a <_svfiprintf_r+0x192>
 80171b8:	ab03      	add	r3, sp, #12
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	462a      	mov	r2, r5
 80171be:	4b0f      	ldr	r3, [pc, #60]	; (80171fc <_svfiprintf_r+0x1f4>)
 80171c0:	a904      	add	r1, sp, #16
 80171c2:	4638      	mov	r0, r7
 80171c4:	f7fc fc8a 	bl	8013adc <_printf_float>
 80171c8:	1c42      	adds	r2, r0, #1
 80171ca:	4606      	mov	r6, r0
 80171cc:	d1d6      	bne.n	801717c <_svfiprintf_r+0x174>
 80171ce:	89ab      	ldrh	r3, [r5, #12]
 80171d0:	065b      	lsls	r3, r3, #25
 80171d2:	f53f af2d 	bmi.w	8017030 <_svfiprintf_r+0x28>
 80171d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171d8:	b01d      	add	sp, #116	; 0x74
 80171da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171de:	ab03      	add	r3, sp, #12
 80171e0:	9300      	str	r3, [sp, #0]
 80171e2:	462a      	mov	r2, r5
 80171e4:	4b05      	ldr	r3, [pc, #20]	; (80171fc <_svfiprintf_r+0x1f4>)
 80171e6:	a904      	add	r1, sp, #16
 80171e8:	4638      	mov	r0, r7
 80171ea:	f7fc ff1b 	bl	8014024 <_printf_i>
 80171ee:	e7eb      	b.n	80171c8 <_svfiprintf_r+0x1c0>
 80171f0:	08019529 	.word	0x08019529
 80171f4:	08019533 	.word	0x08019533
 80171f8:	08013add 	.word	0x08013add
 80171fc:	08016f55 	.word	0x08016f55
 8017200:	0801952f 	.word	0x0801952f

08017204 <__sfputc_r>:
 8017204:	6893      	ldr	r3, [r2, #8]
 8017206:	3b01      	subs	r3, #1
 8017208:	2b00      	cmp	r3, #0
 801720a:	b410      	push	{r4}
 801720c:	6093      	str	r3, [r2, #8]
 801720e:	da08      	bge.n	8017222 <__sfputc_r+0x1e>
 8017210:	6994      	ldr	r4, [r2, #24]
 8017212:	42a3      	cmp	r3, r4
 8017214:	db01      	blt.n	801721a <__sfputc_r+0x16>
 8017216:	290a      	cmp	r1, #10
 8017218:	d103      	bne.n	8017222 <__sfputc_r+0x1e>
 801721a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801721e:	f000 b9e3 	b.w	80175e8 <__swbuf_r>
 8017222:	6813      	ldr	r3, [r2, #0]
 8017224:	1c58      	adds	r0, r3, #1
 8017226:	6010      	str	r0, [r2, #0]
 8017228:	7019      	strb	r1, [r3, #0]
 801722a:	4608      	mov	r0, r1
 801722c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017230:	4770      	bx	lr

08017232 <__sfputs_r>:
 8017232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017234:	4606      	mov	r6, r0
 8017236:	460f      	mov	r7, r1
 8017238:	4614      	mov	r4, r2
 801723a:	18d5      	adds	r5, r2, r3
 801723c:	42ac      	cmp	r4, r5
 801723e:	d101      	bne.n	8017244 <__sfputs_r+0x12>
 8017240:	2000      	movs	r0, #0
 8017242:	e007      	b.n	8017254 <__sfputs_r+0x22>
 8017244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017248:	463a      	mov	r2, r7
 801724a:	4630      	mov	r0, r6
 801724c:	f7ff ffda 	bl	8017204 <__sfputc_r>
 8017250:	1c43      	adds	r3, r0, #1
 8017252:	d1f3      	bne.n	801723c <__sfputs_r+0xa>
 8017254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017258 <_vfiprintf_r>:
 8017258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801725c:	460d      	mov	r5, r1
 801725e:	b09d      	sub	sp, #116	; 0x74
 8017260:	4614      	mov	r4, r2
 8017262:	4698      	mov	r8, r3
 8017264:	4606      	mov	r6, r0
 8017266:	b118      	cbz	r0, 8017270 <_vfiprintf_r+0x18>
 8017268:	6a03      	ldr	r3, [r0, #32]
 801726a:	b90b      	cbnz	r3, 8017270 <_vfiprintf_r+0x18>
 801726c:	f7fd fa98 	bl	80147a0 <__sinit>
 8017270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017272:	07d9      	lsls	r1, r3, #31
 8017274:	d405      	bmi.n	8017282 <_vfiprintf_r+0x2a>
 8017276:	89ab      	ldrh	r3, [r5, #12]
 8017278:	059a      	lsls	r2, r3, #22
 801727a:	d402      	bmi.n	8017282 <_vfiprintf_r+0x2a>
 801727c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801727e:	f7fd fc48 	bl	8014b12 <__retarget_lock_acquire_recursive>
 8017282:	89ab      	ldrh	r3, [r5, #12]
 8017284:	071b      	lsls	r3, r3, #28
 8017286:	d501      	bpl.n	801728c <_vfiprintf_r+0x34>
 8017288:	692b      	ldr	r3, [r5, #16]
 801728a:	b99b      	cbnz	r3, 80172b4 <_vfiprintf_r+0x5c>
 801728c:	4629      	mov	r1, r5
 801728e:	4630      	mov	r0, r6
 8017290:	f000 f9e8 	bl	8017664 <__swsetup_r>
 8017294:	b170      	cbz	r0, 80172b4 <_vfiprintf_r+0x5c>
 8017296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017298:	07dc      	lsls	r4, r3, #31
 801729a:	d504      	bpl.n	80172a6 <_vfiprintf_r+0x4e>
 801729c:	f04f 30ff 	mov.w	r0, #4294967295
 80172a0:	b01d      	add	sp, #116	; 0x74
 80172a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172a6:	89ab      	ldrh	r3, [r5, #12]
 80172a8:	0598      	lsls	r0, r3, #22
 80172aa:	d4f7      	bmi.n	801729c <_vfiprintf_r+0x44>
 80172ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80172ae:	f7fd fc31 	bl	8014b14 <__retarget_lock_release_recursive>
 80172b2:	e7f3      	b.n	801729c <_vfiprintf_r+0x44>
 80172b4:	2300      	movs	r3, #0
 80172b6:	9309      	str	r3, [sp, #36]	; 0x24
 80172b8:	2320      	movs	r3, #32
 80172ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172be:	f8cd 800c 	str.w	r8, [sp, #12]
 80172c2:	2330      	movs	r3, #48	; 0x30
 80172c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017478 <_vfiprintf_r+0x220>
 80172c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172cc:	f04f 0901 	mov.w	r9, #1
 80172d0:	4623      	mov	r3, r4
 80172d2:	469a      	mov	sl, r3
 80172d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172d8:	b10a      	cbz	r2, 80172de <_vfiprintf_r+0x86>
 80172da:	2a25      	cmp	r2, #37	; 0x25
 80172dc:	d1f9      	bne.n	80172d2 <_vfiprintf_r+0x7a>
 80172de:	ebba 0b04 	subs.w	fp, sl, r4
 80172e2:	d00b      	beq.n	80172fc <_vfiprintf_r+0xa4>
 80172e4:	465b      	mov	r3, fp
 80172e6:	4622      	mov	r2, r4
 80172e8:	4629      	mov	r1, r5
 80172ea:	4630      	mov	r0, r6
 80172ec:	f7ff ffa1 	bl	8017232 <__sfputs_r>
 80172f0:	3001      	adds	r0, #1
 80172f2:	f000 80a9 	beq.w	8017448 <_vfiprintf_r+0x1f0>
 80172f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172f8:	445a      	add	r2, fp
 80172fa:	9209      	str	r2, [sp, #36]	; 0x24
 80172fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017300:	2b00      	cmp	r3, #0
 8017302:	f000 80a1 	beq.w	8017448 <_vfiprintf_r+0x1f0>
 8017306:	2300      	movs	r3, #0
 8017308:	f04f 32ff 	mov.w	r2, #4294967295
 801730c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017310:	f10a 0a01 	add.w	sl, sl, #1
 8017314:	9304      	str	r3, [sp, #16]
 8017316:	9307      	str	r3, [sp, #28]
 8017318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801731c:	931a      	str	r3, [sp, #104]	; 0x68
 801731e:	4654      	mov	r4, sl
 8017320:	2205      	movs	r2, #5
 8017322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017326:	4854      	ldr	r0, [pc, #336]	; (8017478 <_vfiprintf_r+0x220>)
 8017328:	f7e8 ff7a 	bl	8000220 <memchr>
 801732c:	9a04      	ldr	r2, [sp, #16]
 801732e:	b9d8      	cbnz	r0, 8017368 <_vfiprintf_r+0x110>
 8017330:	06d1      	lsls	r1, r2, #27
 8017332:	bf44      	itt	mi
 8017334:	2320      	movmi	r3, #32
 8017336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801733a:	0713      	lsls	r3, r2, #28
 801733c:	bf44      	itt	mi
 801733e:	232b      	movmi	r3, #43	; 0x2b
 8017340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017344:	f89a 3000 	ldrb.w	r3, [sl]
 8017348:	2b2a      	cmp	r3, #42	; 0x2a
 801734a:	d015      	beq.n	8017378 <_vfiprintf_r+0x120>
 801734c:	9a07      	ldr	r2, [sp, #28]
 801734e:	4654      	mov	r4, sl
 8017350:	2000      	movs	r0, #0
 8017352:	f04f 0c0a 	mov.w	ip, #10
 8017356:	4621      	mov	r1, r4
 8017358:	f811 3b01 	ldrb.w	r3, [r1], #1
 801735c:	3b30      	subs	r3, #48	; 0x30
 801735e:	2b09      	cmp	r3, #9
 8017360:	d94d      	bls.n	80173fe <_vfiprintf_r+0x1a6>
 8017362:	b1b0      	cbz	r0, 8017392 <_vfiprintf_r+0x13a>
 8017364:	9207      	str	r2, [sp, #28]
 8017366:	e014      	b.n	8017392 <_vfiprintf_r+0x13a>
 8017368:	eba0 0308 	sub.w	r3, r0, r8
 801736c:	fa09 f303 	lsl.w	r3, r9, r3
 8017370:	4313      	orrs	r3, r2
 8017372:	9304      	str	r3, [sp, #16]
 8017374:	46a2      	mov	sl, r4
 8017376:	e7d2      	b.n	801731e <_vfiprintf_r+0xc6>
 8017378:	9b03      	ldr	r3, [sp, #12]
 801737a:	1d19      	adds	r1, r3, #4
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	9103      	str	r1, [sp, #12]
 8017380:	2b00      	cmp	r3, #0
 8017382:	bfbb      	ittet	lt
 8017384:	425b      	neglt	r3, r3
 8017386:	f042 0202 	orrlt.w	r2, r2, #2
 801738a:	9307      	strge	r3, [sp, #28]
 801738c:	9307      	strlt	r3, [sp, #28]
 801738e:	bfb8      	it	lt
 8017390:	9204      	strlt	r2, [sp, #16]
 8017392:	7823      	ldrb	r3, [r4, #0]
 8017394:	2b2e      	cmp	r3, #46	; 0x2e
 8017396:	d10c      	bne.n	80173b2 <_vfiprintf_r+0x15a>
 8017398:	7863      	ldrb	r3, [r4, #1]
 801739a:	2b2a      	cmp	r3, #42	; 0x2a
 801739c:	d134      	bne.n	8017408 <_vfiprintf_r+0x1b0>
 801739e:	9b03      	ldr	r3, [sp, #12]
 80173a0:	1d1a      	adds	r2, r3, #4
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	9203      	str	r2, [sp, #12]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	bfb8      	it	lt
 80173aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80173ae:	3402      	adds	r4, #2
 80173b0:	9305      	str	r3, [sp, #20]
 80173b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017488 <_vfiprintf_r+0x230>
 80173b6:	7821      	ldrb	r1, [r4, #0]
 80173b8:	2203      	movs	r2, #3
 80173ba:	4650      	mov	r0, sl
 80173bc:	f7e8 ff30 	bl	8000220 <memchr>
 80173c0:	b138      	cbz	r0, 80173d2 <_vfiprintf_r+0x17a>
 80173c2:	9b04      	ldr	r3, [sp, #16]
 80173c4:	eba0 000a 	sub.w	r0, r0, sl
 80173c8:	2240      	movs	r2, #64	; 0x40
 80173ca:	4082      	lsls	r2, r0
 80173cc:	4313      	orrs	r3, r2
 80173ce:	3401      	adds	r4, #1
 80173d0:	9304      	str	r3, [sp, #16]
 80173d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173d6:	4829      	ldr	r0, [pc, #164]	; (801747c <_vfiprintf_r+0x224>)
 80173d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173dc:	2206      	movs	r2, #6
 80173de:	f7e8 ff1f 	bl	8000220 <memchr>
 80173e2:	2800      	cmp	r0, #0
 80173e4:	d03f      	beq.n	8017466 <_vfiprintf_r+0x20e>
 80173e6:	4b26      	ldr	r3, [pc, #152]	; (8017480 <_vfiprintf_r+0x228>)
 80173e8:	bb1b      	cbnz	r3, 8017432 <_vfiprintf_r+0x1da>
 80173ea:	9b03      	ldr	r3, [sp, #12]
 80173ec:	3307      	adds	r3, #7
 80173ee:	f023 0307 	bic.w	r3, r3, #7
 80173f2:	3308      	adds	r3, #8
 80173f4:	9303      	str	r3, [sp, #12]
 80173f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f8:	443b      	add	r3, r7
 80173fa:	9309      	str	r3, [sp, #36]	; 0x24
 80173fc:	e768      	b.n	80172d0 <_vfiprintf_r+0x78>
 80173fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017402:	460c      	mov	r4, r1
 8017404:	2001      	movs	r0, #1
 8017406:	e7a6      	b.n	8017356 <_vfiprintf_r+0xfe>
 8017408:	2300      	movs	r3, #0
 801740a:	3401      	adds	r4, #1
 801740c:	9305      	str	r3, [sp, #20]
 801740e:	4619      	mov	r1, r3
 8017410:	f04f 0c0a 	mov.w	ip, #10
 8017414:	4620      	mov	r0, r4
 8017416:	f810 2b01 	ldrb.w	r2, [r0], #1
 801741a:	3a30      	subs	r2, #48	; 0x30
 801741c:	2a09      	cmp	r2, #9
 801741e:	d903      	bls.n	8017428 <_vfiprintf_r+0x1d0>
 8017420:	2b00      	cmp	r3, #0
 8017422:	d0c6      	beq.n	80173b2 <_vfiprintf_r+0x15a>
 8017424:	9105      	str	r1, [sp, #20]
 8017426:	e7c4      	b.n	80173b2 <_vfiprintf_r+0x15a>
 8017428:	fb0c 2101 	mla	r1, ip, r1, r2
 801742c:	4604      	mov	r4, r0
 801742e:	2301      	movs	r3, #1
 8017430:	e7f0      	b.n	8017414 <_vfiprintf_r+0x1bc>
 8017432:	ab03      	add	r3, sp, #12
 8017434:	9300      	str	r3, [sp, #0]
 8017436:	462a      	mov	r2, r5
 8017438:	4b12      	ldr	r3, [pc, #72]	; (8017484 <_vfiprintf_r+0x22c>)
 801743a:	a904      	add	r1, sp, #16
 801743c:	4630      	mov	r0, r6
 801743e:	f7fc fb4d 	bl	8013adc <_printf_float>
 8017442:	4607      	mov	r7, r0
 8017444:	1c78      	adds	r0, r7, #1
 8017446:	d1d6      	bne.n	80173f6 <_vfiprintf_r+0x19e>
 8017448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801744a:	07d9      	lsls	r1, r3, #31
 801744c:	d405      	bmi.n	801745a <_vfiprintf_r+0x202>
 801744e:	89ab      	ldrh	r3, [r5, #12]
 8017450:	059a      	lsls	r2, r3, #22
 8017452:	d402      	bmi.n	801745a <_vfiprintf_r+0x202>
 8017454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017456:	f7fd fb5d 	bl	8014b14 <__retarget_lock_release_recursive>
 801745a:	89ab      	ldrh	r3, [r5, #12]
 801745c:	065b      	lsls	r3, r3, #25
 801745e:	f53f af1d 	bmi.w	801729c <_vfiprintf_r+0x44>
 8017462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017464:	e71c      	b.n	80172a0 <_vfiprintf_r+0x48>
 8017466:	ab03      	add	r3, sp, #12
 8017468:	9300      	str	r3, [sp, #0]
 801746a:	462a      	mov	r2, r5
 801746c:	4b05      	ldr	r3, [pc, #20]	; (8017484 <_vfiprintf_r+0x22c>)
 801746e:	a904      	add	r1, sp, #16
 8017470:	4630      	mov	r0, r6
 8017472:	f7fc fdd7 	bl	8014024 <_printf_i>
 8017476:	e7e4      	b.n	8017442 <_vfiprintf_r+0x1ea>
 8017478:	08019529 	.word	0x08019529
 801747c:	08019533 	.word	0x08019533
 8017480:	08013add 	.word	0x08013add
 8017484:	08017233 	.word	0x08017233
 8017488:	0801952f 	.word	0x0801952f

0801748c <__sflush_r>:
 801748c:	898a      	ldrh	r2, [r1, #12]
 801748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017492:	4605      	mov	r5, r0
 8017494:	0710      	lsls	r0, r2, #28
 8017496:	460c      	mov	r4, r1
 8017498:	d458      	bmi.n	801754c <__sflush_r+0xc0>
 801749a:	684b      	ldr	r3, [r1, #4]
 801749c:	2b00      	cmp	r3, #0
 801749e:	dc05      	bgt.n	80174ac <__sflush_r+0x20>
 80174a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	dc02      	bgt.n	80174ac <__sflush_r+0x20>
 80174a6:	2000      	movs	r0, #0
 80174a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174ae:	2e00      	cmp	r6, #0
 80174b0:	d0f9      	beq.n	80174a6 <__sflush_r+0x1a>
 80174b2:	2300      	movs	r3, #0
 80174b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174b8:	682f      	ldr	r7, [r5, #0]
 80174ba:	6a21      	ldr	r1, [r4, #32]
 80174bc:	602b      	str	r3, [r5, #0]
 80174be:	d032      	beq.n	8017526 <__sflush_r+0x9a>
 80174c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174c2:	89a3      	ldrh	r3, [r4, #12]
 80174c4:	075a      	lsls	r2, r3, #29
 80174c6:	d505      	bpl.n	80174d4 <__sflush_r+0x48>
 80174c8:	6863      	ldr	r3, [r4, #4]
 80174ca:	1ac0      	subs	r0, r0, r3
 80174cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174ce:	b10b      	cbz	r3, 80174d4 <__sflush_r+0x48>
 80174d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80174d2:	1ac0      	subs	r0, r0, r3
 80174d4:	2300      	movs	r3, #0
 80174d6:	4602      	mov	r2, r0
 80174d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174da:	6a21      	ldr	r1, [r4, #32]
 80174dc:	4628      	mov	r0, r5
 80174de:	47b0      	blx	r6
 80174e0:	1c43      	adds	r3, r0, #1
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	d106      	bne.n	80174f4 <__sflush_r+0x68>
 80174e6:	6829      	ldr	r1, [r5, #0]
 80174e8:	291d      	cmp	r1, #29
 80174ea:	d82b      	bhi.n	8017544 <__sflush_r+0xb8>
 80174ec:	4a29      	ldr	r2, [pc, #164]	; (8017594 <__sflush_r+0x108>)
 80174ee:	410a      	asrs	r2, r1
 80174f0:	07d6      	lsls	r6, r2, #31
 80174f2:	d427      	bmi.n	8017544 <__sflush_r+0xb8>
 80174f4:	2200      	movs	r2, #0
 80174f6:	6062      	str	r2, [r4, #4]
 80174f8:	04d9      	lsls	r1, r3, #19
 80174fa:	6922      	ldr	r2, [r4, #16]
 80174fc:	6022      	str	r2, [r4, #0]
 80174fe:	d504      	bpl.n	801750a <__sflush_r+0x7e>
 8017500:	1c42      	adds	r2, r0, #1
 8017502:	d101      	bne.n	8017508 <__sflush_r+0x7c>
 8017504:	682b      	ldr	r3, [r5, #0]
 8017506:	b903      	cbnz	r3, 801750a <__sflush_r+0x7e>
 8017508:	6560      	str	r0, [r4, #84]	; 0x54
 801750a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801750c:	602f      	str	r7, [r5, #0]
 801750e:	2900      	cmp	r1, #0
 8017510:	d0c9      	beq.n	80174a6 <__sflush_r+0x1a>
 8017512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017516:	4299      	cmp	r1, r3
 8017518:	d002      	beq.n	8017520 <__sflush_r+0x94>
 801751a:	4628      	mov	r0, r5
 801751c:	f7fe f98a 	bl	8015834 <_free_r>
 8017520:	2000      	movs	r0, #0
 8017522:	6360      	str	r0, [r4, #52]	; 0x34
 8017524:	e7c0      	b.n	80174a8 <__sflush_r+0x1c>
 8017526:	2301      	movs	r3, #1
 8017528:	4628      	mov	r0, r5
 801752a:	47b0      	blx	r6
 801752c:	1c41      	adds	r1, r0, #1
 801752e:	d1c8      	bne.n	80174c2 <__sflush_r+0x36>
 8017530:	682b      	ldr	r3, [r5, #0]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d0c5      	beq.n	80174c2 <__sflush_r+0x36>
 8017536:	2b1d      	cmp	r3, #29
 8017538:	d001      	beq.n	801753e <__sflush_r+0xb2>
 801753a:	2b16      	cmp	r3, #22
 801753c:	d101      	bne.n	8017542 <__sflush_r+0xb6>
 801753e:	602f      	str	r7, [r5, #0]
 8017540:	e7b1      	b.n	80174a6 <__sflush_r+0x1a>
 8017542:	89a3      	ldrh	r3, [r4, #12]
 8017544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017548:	81a3      	strh	r3, [r4, #12]
 801754a:	e7ad      	b.n	80174a8 <__sflush_r+0x1c>
 801754c:	690f      	ldr	r7, [r1, #16]
 801754e:	2f00      	cmp	r7, #0
 8017550:	d0a9      	beq.n	80174a6 <__sflush_r+0x1a>
 8017552:	0793      	lsls	r3, r2, #30
 8017554:	680e      	ldr	r6, [r1, #0]
 8017556:	bf08      	it	eq
 8017558:	694b      	ldreq	r3, [r1, #20]
 801755a:	600f      	str	r7, [r1, #0]
 801755c:	bf18      	it	ne
 801755e:	2300      	movne	r3, #0
 8017560:	eba6 0807 	sub.w	r8, r6, r7
 8017564:	608b      	str	r3, [r1, #8]
 8017566:	f1b8 0f00 	cmp.w	r8, #0
 801756a:	dd9c      	ble.n	80174a6 <__sflush_r+0x1a>
 801756c:	6a21      	ldr	r1, [r4, #32]
 801756e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017570:	4643      	mov	r3, r8
 8017572:	463a      	mov	r2, r7
 8017574:	4628      	mov	r0, r5
 8017576:	47b0      	blx	r6
 8017578:	2800      	cmp	r0, #0
 801757a:	dc06      	bgt.n	801758a <__sflush_r+0xfe>
 801757c:	89a3      	ldrh	r3, [r4, #12]
 801757e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017582:	81a3      	strh	r3, [r4, #12]
 8017584:	f04f 30ff 	mov.w	r0, #4294967295
 8017588:	e78e      	b.n	80174a8 <__sflush_r+0x1c>
 801758a:	4407      	add	r7, r0
 801758c:	eba8 0800 	sub.w	r8, r8, r0
 8017590:	e7e9      	b.n	8017566 <__sflush_r+0xda>
 8017592:	bf00      	nop
 8017594:	dfbffffe 	.word	0xdfbffffe

08017598 <_fflush_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	690b      	ldr	r3, [r1, #16]
 801759c:	4605      	mov	r5, r0
 801759e:	460c      	mov	r4, r1
 80175a0:	b913      	cbnz	r3, 80175a8 <_fflush_r+0x10>
 80175a2:	2500      	movs	r5, #0
 80175a4:	4628      	mov	r0, r5
 80175a6:	bd38      	pop	{r3, r4, r5, pc}
 80175a8:	b118      	cbz	r0, 80175b2 <_fflush_r+0x1a>
 80175aa:	6a03      	ldr	r3, [r0, #32]
 80175ac:	b90b      	cbnz	r3, 80175b2 <_fflush_r+0x1a>
 80175ae:	f7fd f8f7 	bl	80147a0 <__sinit>
 80175b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d0f3      	beq.n	80175a2 <_fflush_r+0xa>
 80175ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175bc:	07d0      	lsls	r0, r2, #31
 80175be:	d404      	bmi.n	80175ca <_fflush_r+0x32>
 80175c0:	0599      	lsls	r1, r3, #22
 80175c2:	d402      	bmi.n	80175ca <_fflush_r+0x32>
 80175c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175c6:	f7fd faa4 	bl	8014b12 <__retarget_lock_acquire_recursive>
 80175ca:	4628      	mov	r0, r5
 80175cc:	4621      	mov	r1, r4
 80175ce:	f7ff ff5d 	bl	801748c <__sflush_r>
 80175d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175d4:	07da      	lsls	r2, r3, #31
 80175d6:	4605      	mov	r5, r0
 80175d8:	d4e4      	bmi.n	80175a4 <_fflush_r+0xc>
 80175da:	89a3      	ldrh	r3, [r4, #12]
 80175dc:	059b      	lsls	r3, r3, #22
 80175de:	d4e1      	bmi.n	80175a4 <_fflush_r+0xc>
 80175e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175e2:	f7fd fa97 	bl	8014b14 <__retarget_lock_release_recursive>
 80175e6:	e7dd      	b.n	80175a4 <_fflush_r+0xc>

080175e8 <__swbuf_r>:
 80175e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ea:	460e      	mov	r6, r1
 80175ec:	4614      	mov	r4, r2
 80175ee:	4605      	mov	r5, r0
 80175f0:	b118      	cbz	r0, 80175fa <__swbuf_r+0x12>
 80175f2:	6a03      	ldr	r3, [r0, #32]
 80175f4:	b90b      	cbnz	r3, 80175fa <__swbuf_r+0x12>
 80175f6:	f7fd f8d3 	bl	80147a0 <__sinit>
 80175fa:	69a3      	ldr	r3, [r4, #24]
 80175fc:	60a3      	str	r3, [r4, #8]
 80175fe:	89a3      	ldrh	r3, [r4, #12]
 8017600:	071a      	lsls	r2, r3, #28
 8017602:	d525      	bpl.n	8017650 <__swbuf_r+0x68>
 8017604:	6923      	ldr	r3, [r4, #16]
 8017606:	b31b      	cbz	r3, 8017650 <__swbuf_r+0x68>
 8017608:	6823      	ldr	r3, [r4, #0]
 801760a:	6922      	ldr	r2, [r4, #16]
 801760c:	1a98      	subs	r0, r3, r2
 801760e:	6963      	ldr	r3, [r4, #20]
 8017610:	b2f6      	uxtb	r6, r6
 8017612:	4283      	cmp	r3, r0
 8017614:	4637      	mov	r7, r6
 8017616:	dc04      	bgt.n	8017622 <__swbuf_r+0x3a>
 8017618:	4621      	mov	r1, r4
 801761a:	4628      	mov	r0, r5
 801761c:	f7ff ffbc 	bl	8017598 <_fflush_r>
 8017620:	b9e0      	cbnz	r0, 801765c <__swbuf_r+0x74>
 8017622:	68a3      	ldr	r3, [r4, #8]
 8017624:	3b01      	subs	r3, #1
 8017626:	60a3      	str	r3, [r4, #8]
 8017628:	6823      	ldr	r3, [r4, #0]
 801762a:	1c5a      	adds	r2, r3, #1
 801762c:	6022      	str	r2, [r4, #0]
 801762e:	701e      	strb	r6, [r3, #0]
 8017630:	6962      	ldr	r2, [r4, #20]
 8017632:	1c43      	adds	r3, r0, #1
 8017634:	429a      	cmp	r2, r3
 8017636:	d004      	beq.n	8017642 <__swbuf_r+0x5a>
 8017638:	89a3      	ldrh	r3, [r4, #12]
 801763a:	07db      	lsls	r3, r3, #31
 801763c:	d506      	bpl.n	801764c <__swbuf_r+0x64>
 801763e:	2e0a      	cmp	r6, #10
 8017640:	d104      	bne.n	801764c <__swbuf_r+0x64>
 8017642:	4621      	mov	r1, r4
 8017644:	4628      	mov	r0, r5
 8017646:	f7ff ffa7 	bl	8017598 <_fflush_r>
 801764a:	b938      	cbnz	r0, 801765c <__swbuf_r+0x74>
 801764c:	4638      	mov	r0, r7
 801764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017650:	4621      	mov	r1, r4
 8017652:	4628      	mov	r0, r5
 8017654:	f000 f806 	bl	8017664 <__swsetup_r>
 8017658:	2800      	cmp	r0, #0
 801765a:	d0d5      	beq.n	8017608 <__swbuf_r+0x20>
 801765c:	f04f 37ff 	mov.w	r7, #4294967295
 8017660:	e7f4      	b.n	801764c <__swbuf_r+0x64>
	...

08017664 <__swsetup_r>:
 8017664:	b538      	push	{r3, r4, r5, lr}
 8017666:	4b2a      	ldr	r3, [pc, #168]	; (8017710 <__swsetup_r+0xac>)
 8017668:	4605      	mov	r5, r0
 801766a:	6818      	ldr	r0, [r3, #0]
 801766c:	460c      	mov	r4, r1
 801766e:	b118      	cbz	r0, 8017678 <__swsetup_r+0x14>
 8017670:	6a03      	ldr	r3, [r0, #32]
 8017672:	b90b      	cbnz	r3, 8017678 <__swsetup_r+0x14>
 8017674:	f7fd f894 	bl	80147a0 <__sinit>
 8017678:	89a3      	ldrh	r3, [r4, #12]
 801767a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801767e:	0718      	lsls	r0, r3, #28
 8017680:	d422      	bmi.n	80176c8 <__swsetup_r+0x64>
 8017682:	06d9      	lsls	r1, r3, #27
 8017684:	d407      	bmi.n	8017696 <__swsetup_r+0x32>
 8017686:	2309      	movs	r3, #9
 8017688:	602b      	str	r3, [r5, #0]
 801768a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801768e:	81a3      	strh	r3, [r4, #12]
 8017690:	f04f 30ff 	mov.w	r0, #4294967295
 8017694:	e034      	b.n	8017700 <__swsetup_r+0x9c>
 8017696:	0758      	lsls	r0, r3, #29
 8017698:	d512      	bpl.n	80176c0 <__swsetup_r+0x5c>
 801769a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801769c:	b141      	cbz	r1, 80176b0 <__swsetup_r+0x4c>
 801769e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176a2:	4299      	cmp	r1, r3
 80176a4:	d002      	beq.n	80176ac <__swsetup_r+0x48>
 80176a6:	4628      	mov	r0, r5
 80176a8:	f7fe f8c4 	bl	8015834 <_free_r>
 80176ac:	2300      	movs	r3, #0
 80176ae:	6363      	str	r3, [r4, #52]	; 0x34
 80176b0:	89a3      	ldrh	r3, [r4, #12]
 80176b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80176b6:	81a3      	strh	r3, [r4, #12]
 80176b8:	2300      	movs	r3, #0
 80176ba:	6063      	str	r3, [r4, #4]
 80176bc:	6923      	ldr	r3, [r4, #16]
 80176be:	6023      	str	r3, [r4, #0]
 80176c0:	89a3      	ldrh	r3, [r4, #12]
 80176c2:	f043 0308 	orr.w	r3, r3, #8
 80176c6:	81a3      	strh	r3, [r4, #12]
 80176c8:	6923      	ldr	r3, [r4, #16]
 80176ca:	b94b      	cbnz	r3, 80176e0 <__swsetup_r+0x7c>
 80176cc:	89a3      	ldrh	r3, [r4, #12]
 80176ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80176d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80176d6:	d003      	beq.n	80176e0 <__swsetup_r+0x7c>
 80176d8:	4621      	mov	r1, r4
 80176da:	4628      	mov	r0, r5
 80176dc:	f000 fc15 	bl	8017f0a <__smakebuf_r>
 80176e0:	89a0      	ldrh	r0, [r4, #12]
 80176e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176e6:	f010 0301 	ands.w	r3, r0, #1
 80176ea:	d00a      	beq.n	8017702 <__swsetup_r+0x9e>
 80176ec:	2300      	movs	r3, #0
 80176ee:	60a3      	str	r3, [r4, #8]
 80176f0:	6963      	ldr	r3, [r4, #20]
 80176f2:	425b      	negs	r3, r3
 80176f4:	61a3      	str	r3, [r4, #24]
 80176f6:	6923      	ldr	r3, [r4, #16]
 80176f8:	b943      	cbnz	r3, 801770c <__swsetup_r+0xa8>
 80176fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80176fe:	d1c4      	bne.n	801768a <__swsetup_r+0x26>
 8017700:	bd38      	pop	{r3, r4, r5, pc}
 8017702:	0781      	lsls	r1, r0, #30
 8017704:	bf58      	it	pl
 8017706:	6963      	ldrpl	r3, [r4, #20]
 8017708:	60a3      	str	r3, [r4, #8]
 801770a:	e7f4      	b.n	80176f6 <__swsetup_r+0x92>
 801770c:	2000      	movs	r0, #0
 801770e:	e7f7      	b.n	8017700 <__swsetup_r+0x9c>
 8017710:	200000dc 	.word	0x200000dc

08017714 <strncmp>:
 8017714:	b510      	push	{r4, lr}
 8017716:	b16a      	cbz	r2, 8017734 <strncmp+0x20>
 8017718:	3901      	subs	r1, #1
 801771a:	1884      	adds	r4, r0, r2
 801771c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017720:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017724:	429a      	cmp	r2, r3
 8017726:	d103      	bne.n	8017730 <strncmp+0x1c>
 8017728:	42a0      	cmp	r0, r4
 801772a:	d001      	beq.n	8017730 <strncmp+0x1c>
 801772c:	2a00      	cmp	r2, #0
 801772e:	d1f5      	bne.n	801771c <strncmp+0x8>
 8017730:	1ad0      	subs	r0, r2, r3
 8017732:	bd10      	pop	{r4, pc}
 8017734:	4610      	mov	r0, r2
 8017736:	e7fc      	b.n	8017732 <strncmp+0x1e>

08017738 <nan>:
 8017738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017740 <nan+0x8>
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop
 8017740:	00000000 	.word	0x00000000
 8017744:	7ff80000 	.word	0x7ff80000

08017748 <_calloc_r>:
 8017748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801774a:	fba1 2402 	umull	r2, r4, r1, r2
 801774e:	b94c      	cbnz	r4, 8017764 <_calloc_r+0x1c>
 8017750:	4611      	mov	r1, r2
 8017752:	9201      	str	r2, [sp, #4]
 8017754:	f7fc f896 	bl	8013884 <_malloc_r>
 8017758:	9a01      	ldr	r2, [sp, #4]
 801775a:	4605      	mov	r5, r0
 801775c:	b930      	cbnz	r0, 801776c <_calloc_r+0x24>
 801775e:	4628      	mov	r0, r5
 8017760:	b003      	add	sp, #12
 8017762:	bd30      	pop	{r4, r5, pc}
 8017764:	220c      	movs	r2, #12
 8017766:	6002      	str	r2, [r0, #0]
 8017768:	2500      	movs	r5, #0
 801776a:	e7f8      	b.n	801775e <_calloc_r+0x16>
 801776c:	4621      	mov	r1, r4
 801776e:	f7fd f8ec 	bl	801494a <memset>
 8017772:	e7f4      	b.n	801775e <_calloc_r+0x16>

08017774 <rshift>:
 8017774:	6903      	ldr	r3, [r0, #16]
 8017776:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801777a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801777e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017782:	f100 0414 	add.w	r4, r0, #20
 8017786:	dd45      	ble.n	8017814 <rshift+0xa0>
 8017788:	f011 011f 	ands.w	r1, r1, #31
 801778c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017790:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017794:	d10c      	bne.n	80177b0 <rshift+0x3c>
 8017796:	f100 0710 	add.w	r7, r0, #16
 801779a:	4629      	mov	r1, r5
 801779c:	42b1      	cmp	r1, r6
 801779e:	d334      	bcc.n	801780a <rshift+0x96>
 80177a0:	1a9b      	subs	r3, r3, r2
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	1eea      	subs	r2, r5, #3
 80177a6:	4296      	cmp	r6, r2
 80177a8:	bf38      	it	cc
 80177aa:	2300      	movcc	r3, #0
 80177ac:	4423      	add	r3, r4
 80177ae:	e015      	b.n	80177dc <rshift+0x68>
 80177b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80177b4:	f1c1 0820 	rsb	r8, r1, #32
 80177b8:	40cf      	lsrs	r7, r1
 80177ba:	f105 0e04 	add.w	lr, r5, #4
 80177be:	46a1      	mov	r9, r4
 80177c0:	4576      	cmp	r6, lr
 80177c2:	46f4      	mov	ip, lr
 80177c4:	d815      	bhi.n	80177f2 <rshift+0x7e>
 80177c6:	1a9a      	subs	r2, r3, r2
 80177c8:	0092      	lsls	r2, r2, #2
 80177ca:	3a04      	subs	r2, #4
 80177cc:	3501      	adds	r5, #1
 80177ce:	42ae      	cmp	r6, r5
 80177d0:	bf38      	it	cc
 80177d2:	2200      	movcc	r2, #0
 80177d4:	18a3      	adds	r3, r4, r2
 80177d6:	50a7      	str	r7, [r4, r2]
 80177d8:	b107      	cbz	r7, 80177dc <rshift+0x68>
 80177da:	3304      	adds	r3, #4
 80177dc:	1b1a      	subs	r2, r3, r4
 80177de:	42a3      	cmp	r3, r4
 80177e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80177e4:	bf08      	it	eq
 80177e6:	2300      	moveq	r3, #0
 80177e8:	6102      	str	r2, [r0, #16]
 80177ea:	bf08      	it	eq
 80177ec:	6143      	streq	r3, [r0, #20]
 80177ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177f2:	f8dc c000 	ldr.w	ip, [ip]
 80177f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80177fa:	ea4c 0707 	orr.w	r7, ip, r7
 80177fe:	f849 7b04 	str.w	r7, [r9], #4
 8017802:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017806:	40cf      	lsrs	r7, r1
 8017808:	e7da      	b.n	80177c0 <rshift+0x4c>
 801780a:	f851 cb04 	ldr.w	ip, [r1], #4
 801780e:	f847 cf04 	str.w	ip, [r7, #4]!
 8017812:	e7c3      	b.n	801779c <rshift+0x28>
 8017814:	4623      	mov	r3, r4
 8017816:	e7e1      	b.n	80177dc <rshift+0x68>

08017818 <__hexdig_fun>:
 8017818:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801781c:	2b09      	cmp	r3, #9
 801781e:	d802      	bhi.n	8017826 <__hexdig_fun+0xe>
 8017820:	3820      	subs	r0, #32
 8017822:	b2c0      	uxtb	r0, r0
 8017824:	4770      	bx	lr
 8017826:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801782a:	2b05      	cmp	r3, #5
 801782c:	d801      	bhi.n	8017832 <__hexdig_fun+0x1a>
 801782e:	3847      	subs	r0, #71	; 0x47
 8017830:	e7f7      	b.n	8017822 <__hexdig_fun+0xa>
 8017832:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017836:	2b05      	cmp	r3, #5
 8017838:	d801      	bhi.n	801783e <__hexdig_fun+0x26>
 801783a:	3827      	subs	r0, #39	; 0x27
 801783c:	e7f1      	b.n	8017822 <__hexdig_fun+0xa>
 801783e:	2000      	movs	r0, #0
 8017840:	4770      	bx	lr
	...

08017844 <__gethex>:
 8017844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017848:	4617      	mov	r7, r2
 801784a:	680a      	ldr	r2, [r1, #0]
 801784c:	b085      	sub	sp, #20
 801784e:	f102 0b02 	add.w	fp, r2, #2
 8017852:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017856:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801785a:	4681      	mov	r9, r0
 801785c:	468a      	mov	sl, r1
 801785e:	9302      	str	r3, [sp, #8]
 8017860:	32fe      	adds	r2, #254	; 0xfe
 8017862:	eb02 030b 	add.w	r3, r2, fp
 8017866:	46d8      	mov	r8, fp
 8017868:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801786c:	9301      	str	r3, [sp, #4]
 801786e:	2830      	cmp	r0, #48	; 0x30
 8017870:	d0f7      	beq.n	8017862 <__gethex+0x1e>
 8017872:	f7ff ffd1 	bl	8017818 <__hexdig_fun>
 8017876:	4604      	mov	r4, r0
 8017878:	2800      	cmp	r0, #0
 801787a:	d138      	bne.n	80178ee <__gethex+0xaa>
 801787c:	49a7      	ldr	r1, [pc, #668]	; (8017b1c <__gethex+0x2d8>)
 801787e:	2201      	movs	r2, #1
 8017880:	4640      	mov	r0, r8
 8017882:	f7ff ff47 	bl	8017714 <strncmp>
 8017886:	4606      	mov	r6, r0
 8017888:	2800      	cmp	r0, #0
 801788a:	d169      	bne.n	8017960 <__gethex+0x11c>
 801788c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017890:	465d      	mov	r5, fp
 8017892:	f7ff ffc1 	bl	8017818 <__hexdig_fun>
 8017896:	2800      	cmp	r0, #0
 8017898:	d064      	beq.n	8017964 <__gethex+0x120>
 801789a:	465a      	mov	r2, fp
 801789c:	7810      	ldrb	r0, [r2, #0]
 801789e:	2830      	cmp	r0, #48	; 0x30
 80178a0:	4690      	mov	r8, r2
 80178a2:	f102 0201 	add.w	r2, r2, #1
 80178a6:	d0f9      	beq.n	801789c <__gethex+0x58>
 80178a8:	f7ff ffb6 	bl	8017818 <__hexdig_fun>
 80178ac:	2301      	movs	r3, #1
 80178ae:	fab0 f480 	clz	r4, r0
 80178b2:	0964      	lsrs	r4, r4, #5
 80178b4:	465e      	mov	r6, fp
 80178b6:	9301      	str	r3, [sp, #4]
 80178b8:	4642      	mov	r2, r8
 80178ba:	4615      	mov	r5, r2
 80178bc:	3201      	adds	r2, #1
 80178be:	7828      	ldrb	r0, [r5, #0]
 80178c0:	f7ff ffaa 	bl	8017818 <__hexdig_fun>
 80178c4:	2800      	cmp	r0, #0
 80178c6:	d1f8      	bne.n	80178ba <__gethex+0x76>
 80178c8:	4994      	ldr	r1, [pc, #592]	; (8017b1c <__gethex+0x2d8>)
 80178ca:	2201      	movs	r2, #1
 80178cc:	4628      	mov	r0, r5
 80178ce:	f7ff ff21 	bl	8017714 <strncmp>
 80178d2:	b978      	cbnz	r0, 80178f4 <__gethex+0xb0>
 80178d4:	b946      	cbnz	r6, 80178e8 <__gethex+0xa4>
 80178d6:	1c6e      	adds	r6, r5, #1
 80178d8:	4632      	mov	r2, r6
 80178da:	4615      	mov	r5, r2
 80178dc:	3201      	adds	r2, #1
 80178de:	7828      	ldrb	r0, [r5, #0]
 80178e0:	f7ff ff9a 	bl	8017818 <__hexdig_fun>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d1f8      	bne.n	80178da <__gethex+0x96>
 80178e8:	1b73      	subs	r3, r6, r5
 80178ea:	009e      	lsls	r6, r3, #2
 80178ec:	e004      	b.n	80178f8 <__gethex+0xb4>
 80178ee:	2400      	movs	r4, #0
 80178f0:	4626      	mov	r6, r4
 80178f2:	e7e1      	b.n	80178b8 <__gethex+0x74>
 80178f4:	2e00      	cmp	r6, #0
 80178f6:	d1f7      	bne.n	80178e8 <__gethex+0xa4>
 80178f8:	782b      	ldrb	r3, [r5, #0]
 80178fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80178fe:	2b50      	cmp	r3, #80	; 0x50
 8017900:	d13d      	bne.n	801797e <__gethex+0x13a>
 8017902:	786b      	ldrb	r3, [r5, #1]
 8017904:	2b2b      	cmp	r3, #43	; 0x2b
 8017906:	d02f      	beq.n	8017968 <__gethex+0x124>
 8017908:	2b2d      	cmp	r3, #45	; 0x2d
 801790a:	d031      	beq.n	8017970 <__gethex+0x12c>
 801790c:	1c69      	adds	r1, r5, #1
 801790e:	f04f 0b00 	mov.w	fp, #0
 8017912:	7808      	ldrb	r0, [r1, #0]
 8017914:	f7ff ff80 	bl	8017818 <__hexdig_fun>
 8017918:	1e42      	subs	r2, r0, #1
 801791a:	b2d2      	uxtb	r2, r2
 801791c:	2a18      	cmp	r2, #24
 801791e:	d82e      	bhi.n	801797e <__gethex+0x13a>
 8017920:	f1a0 0210 	sub.w	r2, r0, #16
 8017924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017928:	f7ff ff76 	bl	8017818 <__hexdig_fun>
 801792c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017930:	fa5f fc8c 	uxtb.w	ip, ip
 8017934:	f1bc 0f18 	cmp.w	ip, #24
 8017938:	d91d      	bls.n	8017976 <__gethex+0x132>
 801793a:	f1bb 0f00 	cmp.w	fp, #0
 801793e:	d000      	beq.n	8017942 <__gethex+0xfe>
 8017940:	4252      	negs	r2, r2
 8017942:	4416      	add	r6, r2
 8017944:	f8ca 1000 	str.w	r1, [sl]
 8017948:	b1dc      	cbz	r4, 8017982 <__gethex+0x13e>
 801794a:	9b01      	ldr	r3, [sp, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	bf14      	ite	ne
 8017950:	f04f 0800 	movne.w	r8, #0
 8017954:	f04f 0806 	moveq.w	r8, #6
 8017958:	4640      	mov	r0, r8
 801795a:	b005      	add	sp, #20
 801795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017960:	4645      	mov	r5, r8
 8017962:	4626      	mov	r6, r4
 8017964:	2401      	movs	r4, #1
 8017966:	e7c7      	b.n	80178f8 <__gethex+0xb4>
 8017968:	f04f 0b00 	mov.w	fp, #0
 801796c:	1ca9      	adds	r1, r5, #2
 801796e:	e7d0      	b.n	8017912 <__gethex+0xce>
 8017970:	f04f 0b01 	mov.w	fp, #1
 8017974:	e7fa      	b.n	801796c <__gethex+0x128>
 8017976:	230a      	movs	r3, #10
 8017978:	fb03 0002 	mla	r0, r3, r2, r0
 801797c:	e7d0      	b.n	8017920 <__gethex+0xdc>
 801797e:	4629      	mov	r1, r5
 8017980:	e7e0      	b.n	8017944 <__gethex+0x100>
 8017982:	eba5 0308 	sub.w	r3, r5, r8
 8017986:	3b01      	subs	r3, #1
 8017988:	4621      	mov	r1, r4
 801798a:	2b07      	cmp	r3, #7
 801798c:	dc0a      	bgt.n	80179a4 <__gethex+0x160>
 801798e:	4648      	mov	r0, r9
 8017990:	f7fd ff9c 	bl	80158cc <_Balloc>
 8017994:	4604      	mov	r4, r0
 8017996:	b940      	cbnz	r0, 80179aa <__gethex+0x166>
 8017998:	4b61      	ldr	r3, [pc, #388]	; (8017b20 <__gethex+0x2dc>)
 801799a:	4602      	mov	r2, r0
 801799c:	21e4      	movs	r1, #228	; 0xe4
 801799e:	4861      	ldr	r0, [pc, #388]	; (8017b24 <__gethex+0x2e0>)
 80179a0:	f7fb ff10 	bl	80137c4 <__assert_func>
 80179a4:	3101      	adds	r1, #1
 80179a6:	105b      	asrs	r3, r3, #1
 80179a8:	e7ef      	b.n	801798a <__gethex+0x146>
 80179aa:	f100 0a14 	add.w	sl, r0, #20
 80179ae:	2300      	movs	r3, #0
 80179b0:	495a      	ldr	r1, [pc, #360]	; (8017b1c <__gethex+0x2d8>)
 80179b2:	f8cd a004 	str.w	sl, [sp, #4]
 80179b6:	469b      	mov	fp, r3
 80179b8:	45a8      	cmp	r8, r5
 80179ba:	d342      	bcc.n	8017a42 <__gethex+0x1fe>
 80179bc:	9801      	ldr	r0, [sp, #4]
 80179be:	f840 bb04 	str.w	fp, [r0], #4
 80179c2:	eba0 000a 	sub.w	r0, r0, sl
 80179c6:	1080      	asrs	r0, r0, #2
 80179c8:	6120      	str	r0, [r4, #16]
 80179ca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80179ce:	4658      	mov	r0, fp
 80179d0:	f7fe f86e 	bl	8015ab0 <__hi0bits>
 80179d4:	683d      	ldr	r5, [r7, #0]
 80179d6:	eba8 0000 	sub.w	r0, r8, r0
 80179da:	42a8      	cmp	r0, r5
 80179dc:	dd59      	ble.n	8017a92 <__gethex+0x24e>
 80179de:	eba0 0805 	sub.w	r8, r0, r5
 80179e2:	4641      	mov	r1, r8
 80179e4:	4620      	mov	r0, r4
 80179e6:	f7fe fbfd 	bl	80161e4 <__any_on>
 80179ea:	4683      	mov	fp, r0
 80179ec:	b1b8      	cbz	r0, 8017a1e <__gethex+0x1da>
 80179ee:	f108 33ff 	add.w	r3, r8, #4294967295
 80179f2:	1159      	asrs	r1, r3, #5
 80179f4:	f003 021f 	and.w	r2, r3, #31
 80179f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80179fc:	f04f 0b01 	mov.w	fp, #1
 8017a00:	fa0b f202 	lsl.w	r2, fp, r2
 8017a04:	420a      	tst	r2, r1
 8017a06:	d00a      	beq.n	8017a1e <__gethex+0x1da>
 8017a08:	455b      	cmp	r3, fp
 8017a0a:	dd06      	ble.n	8017a1a <__gethex+0x1d6>
 8017a0c:	f1a8 0102 	sub.w	r1, r8, #2
 8017a10:	4620      	mov	r0, r4
 8017a12:	f7fe fbe7 	bl	80161e4 <__any_on>
 8017a16:	2800      	cmp	r0, #0
 8017a18:	d138      	bne.n	8017a8c <__gethex+0x248>
 8017a1a:	f04f 0b02 	mov.w	fp, #2
 8017a1e:	4641      	mov	r1, r8
 8017a20:	4620      	mov	r0, r4
 8017a22:	f7ff fea7 	bl	8017774 <rshift>
 8017a26:	4446      	add	r6, r8
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	42b3      	cmp	r3, r6
 8017a2c:	da41      	bge.n	8017ab2 <__gethex+0x26e>
 8017a2e:	4621      	mov	r1, r4
 8017a30:	4648      	mov	r0, r9
 8017a32:	f7fd ff8b 	bl	801594c <_Bfree>
 8017a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a38:	2300      	movs	r3, #0
 8017a3a:	6013      	str	r3, [r2, #0]
 8017a3c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017a40:	e78a      	b.n	8017958 <__gethex+0x114>
 8017a42:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017a46:	2a2e      	cmp	r2, #46	; 0x2e
 8017a48:	d014      	beq.n	8017a74 <__gethex+0x230>
 8017a4a:	2b20      	cmp	r3, #32
 8017a4c:	d106      	bne.n	8017a5c <__gethex+0x218>
 8017a4e:	9b01      	ldr	r3, [sp, #4]
 8017a50:	f843 bb04 	str.w	fp, [r3], #4
 8017a54:	f04f 0b00 	mov.w	fp, #0
 8017a58:	9301      	str	r3, [sp, #4]
 8017a5a:	465b      	mov	r3, fp
 8017a5c:	7828      	ldrb	r0, [r5, #0]
 8017a5e:	9303      	str	r3, [sp, #12]
 8017a60:	f7ff feda 	bl	8017818 <__hexdig_fun>
 8017a64:	9b03      	ldr	r3, [sp, #12]
 8017a66:	f000 000f 	and.w	r0, r0, #15
 8017a6a:	4098      	lsls	r0, r3
 8017a6c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017a70:	3304      	adds	r3, #4
 8017a72:	e7a1      	b.n	80179b8 <__gethex+0x174>
 8017a74:	45a8      	cmp	r8, r5
 8017a76:	d8e8      	bhi.n	8017a4a <__gethex+0x206>
 8017a78:	2201      	movs	r2, #1
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	9303      	str	r3, [sp, #12]
 8017a7e:	f7ff fe49 	bl	8017714 <strncmp>
 8017a82:	4926      	ldr	r1, [pc, #152]	; (8017b1c <__gethex+0x2d8>)
 8017a84:	9b03      	ldr	r3, [sp, #12]
 8017a86:	2800      	cmp	r0, #0
 8017a88:	d1df      	bne.n	8017a4a <__gethex+0x206>
 8017a8a:	e795      	b.n	80179b8 <__gethex+0x174>
 8017a8c:	f04f 0b03 	mov.w	fp, #3
 8017a90:	e7c5      	b.n	8017a1e <__gethex+0x1da>
 8017a92:	da0b      	bge.n	8017aac <__gethex+0x268>
 8017a94:	eba5 0800 	sub.w	r8, r5, r0
 8017a98:	4621      	mov	r1, r4
 8017a9a:	4642      	mov	r2, r8
 8017a9c:	4648      	mov	r0, r9
 8017a9e:	f7fe f96f 	bl	8015d80 <__lshift>
 8017aa2:	eba6 0608 	sub.w	r6, r6, r8
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	f100 0a14 	add.w	sl, r0, #20
 8017aac:	f04f 0b00 	mov.w	fp, #0
 8017ab0:	e7ba      	b.n	8017a28 <__gethex+0x1e4>
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	42b3      	cmp	r3, r6
 8017ab6:	dd73      	ble.n	8017ba0 <__gethex+0x35c>
 8017ab8:	1b9e      	subs	r6, r3, r6
 8017aba:	42b5      	cmp	r5, r6
 8017abc:	dc34      	bgt.n	8017b28 <__gethex+0x2e4>
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	2b02      	cmp	r3, #2
 8017ac2:	d023      	beq.n	8017b0c <__gethex+0x2c8>
 8017ac4:	2b03      	cmp	r3, #3
 8017ac6:	d025      	beq.n	8017b14 <__gethex+0x2d0>
 8017ac8:	2b01      	cmp	r3, #1
 8017aca:	d115      	bne.n	8017af8 <__gethex+0x2b4>
 8017acc:	42b5      	cmp	r5, r6
 8017ace:	d113      	bne.n	8017af8 <__gethex+0x2b4>
 8017ad0:	2d01      	cmp	r5, #1
 8017ad2:	d10b      	bne.n	8017aec <__gethex+0x2a8>
 8017ad4:	9a02      	ldr	r2, [sp, #8]
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6013      	str	r3, [r2, #0]
 8017ada:	2301      	movs	r3, #1
 8017adc:	6123      	str	r3, [r4, #16]
 8017ade:	f8ca 3000 	str.w	r3, [sl]
 8017ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ae4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017ae8:	601c      	str	r4, [r3, #0]
 8017aea:	e735      	b.n	8017958 <__gethex+0x114>
 8017aec:	1e69      	subs	r1, r5, #1
 8017aee:	4620      	mov	r0, r4
 8017af0:	f7fe fb78 	bl	80161e4 <__any_on>
 8017af4:	2800      	cmp	r0, #0
 8017af6:	d1ed      	bne.n	8017ad4 <__gethex+0x290>
 8017af8:	4621      	mov	r1, r4
 8017afa:	4648      	mov	r0, r9
 8017afc:	f7fd ff26 	bl	801594c <_Bfree>
 8017b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b02:	2300      	movs	r3, #0
 8017b04:	6013      	str	r3, [r2, #0]
 8017b06:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017b0a:	e725      	b.n	8017958 <__gethex+0x114>
 8017b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d1f2      	bne.n	8017af8 <__gethex+0x2b4>
 8017b12:	e7df      	b.n	8017ad4 <__gethex+0x290>
 8017b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d1dc      	bne.n	8017ad4 <__gethex+0x290>
 8017b1a:	e7ed      	b.n	8017af8 <__gethex+0x2b4>
 8017b1c:	080193d4 	.word	0x080193d4
 8017b20:	08019269 	.word	0x08019269
 8017b24:	08019542 	.word	0x08019542
 8017b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8017b2c:	f1bb 0f00 	cmp.w	fp, #0
 8017b30:	d133      	bne.n	8017b9a <__gethex+0x356>
 8017b32:	f1b8 0f00 	cmp.w	r8, #0
 8017b36:	d004      	beq.n	8017b42 <__gethex+0x2fe>
 8017b38:	4641      	mov	r1, r8
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f7fe fb52 	bl	80161e4 <__any_on>
 8017b40:	4683      	mov	fp, r0
 8017b42:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017b46:	2301      	movs	r3, #1
 8017b48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017b4c:	f008 081f 	and.w	r8, r8, #31
 8017b50:	fa03 f308 	lsl.w	r3, r3, r8
 8017b54:	4213      	tst	r3, r2
 8017b56:	4631      	mov	r1, r6
 8017b58:	4620      	mov	r0, r4
 8017b5a:	bf18      	it	ne
 8017b5c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017b60:	1bad      	subs	r5, r5, r6
 8017b62:	f7ff fe07 	bl	8017774 <rshift>
 8017b66:	687e      	ldr	r6, [r7, #4]
 8017b68:	f04f 0802 	mov.w	r8, #2
 8017b6c:	f1bb 0f00 	cmp.w	fp, #0
 8017b70:	d04a      	beq.n	8017c08 <__gethex+0x3c4>
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	2b02      	cmp	r3, #2
 8017b76:	d016      	beq.n	8017ba6 <__gethex+0x362>
 8017b78:	2b03      	cmp	r3, #3
 8017b7a:	d018      	beq.n	8017bae <__gethex+0x36a>
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d109      	bne.n	8017b94 <__gethex+0x350>
 8017b80:	f01b 0f02 	tst.w	fp, #2
 8017b84:	d006      	beq.n	8017b94 <__gethex+0x350>
 8017b86:	f8da 3000 	ldr.w	r3, [sl]
 8017b8a:	ea4b 0b03 	orr.w	fp, fp, r3
 8017b8e:	f01b 0f01 	tst.w	fp, #1
 8017b92:	d10f      	bne.n	8017bb4 <__gethex+0x370>
 8017b94:	f048 0810 	orr.w	r8, r8, #16
 8017b98:	e036      	b.n	8017c08 <__gethex+0x3c4>
 8017b9a:	f04f 0b01 	mov.w	fp, #1
 8017b9e:	e7d0      	b.n	8017b42 <__gethex+0x2fe>
 8017ba0:	f04f 0801 	mov.w	r8, #1
 8017ba4:	e7e2      	b.n	8017b6c <__gethex+0x328>
 8017ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ba8:	f1c3 0301 	rsb	r3, r3, #1
 8017bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8017bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d0ef      	beq.n	8017b94 <__gethex+0x350>
 8017bb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017bb8:	f104 0214 	add.w	r2, r4, #20
 8017bbc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017bc0:	9301      	str	r3, [sp, #4]
 8017bc2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	4694      	mov	ip, r2
 8017bca:	f852 1b04 	ldr.w	r1, [r2], #4
 8017bce:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017bd2:	d01e      	beq.n	8017c12 <__gethex+0x3ce>
 8017bd4:	3101      	adds	r1, #1
 8017bd6:	f8cc 1000 	str.w	r1, [ip]
 8017bda:	f1b8 0f02 	cmp.w	r8, #2
 8017bde:	f104 0214 	add.w	r2, r4, #20
 8017be2:	d13d      	bne.n	8017c60 <__gethex+0x41c>
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	3b01      	subs	r3, #1
 8017be8:	42ab      	cmp	r3, r5
 8017bea:	d10b      	bne.n	8017c04 <__gethex+0x3c0>
 8017bec:	1169      	asrs	r1, r5, #5
 8017bee:	2301      	movs	r3, #1
 8017bf0:	f005 051f 	and.w	r5, r5, #31
 8017bf4:	fa03 f505 	lsl.w	r5, r3, r5
 8017bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017bfc:	421d      	tst	r5, r3
 8017bfe:	bf18      	it	ne
 8017c00:	f04f 0801 	movne.w	r8, #1
 8017c04:	f048 0820 	orr.w	r8, r8, #32
 8017c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c0a:	601c      	str	r4, [r3, #0]
 8017c0c:	9b02      	ldr	r3, [sp, #8]
 8017c0e:	601e      	str	r6, [r3, #0]
 8017c10:	e6a2      	b.n	8017958 <__gethex+0x114>
 8017c12:	4290      	cmp	r0, r2
 8017c14:	f842 3c04 	str.w	r3, [r2, #-4]
 8017c18:	d8d6      	bhi.n	8017bc8 <__gethex+0x384>
 8017c1a:	68a2      	ldr	r2, [r4, #8]
 8017c1c:	4593      	cmp	fp, r2
 8017c1e:	db17      	blt.n	8017c50 <__gethex+0x40c>
 8017c20:	6861      	ldr	r1, [r4, #4]
 8017c22:	4648      	mov	r0, r9
 8017c24:	3101      	adds	r1, #1
 8017c26:	f7fd fe51 	bl	80158cc <_Balloc>
 8017c2a:	4682      	mov	sl, r0
 8017c2c:	b918      	cbnz	r0, 8017c36 <__gethex+0x3f2>
 8017c2e:	4b1b      	ldr	r3, [pc, #108]	; (8017c9c <__gethex+0x458>)
 8017c30:	4602      	mov	r2, r0
 8017c32:	2184      	movs	r1, #132	; 0x84
 8017c34:	e6b3      	b.n	801799e <__gethex+0x15a>
 8017c36:	6922      	ldr	r2, [r4, #16]
 8017c38:	3202      	adds	r2, #2
 8017c3a:	f104 010c 	add.w	r1, r4, #12
 8017c3e:	0092      	lsls	r2, r2, #2
 8017c40:	300c      	adds	r0, #12
 8017c42:	f7fc ff68 	bl	8014b16 <memcpy>
 8017c46:	4621      	mov	r1, r4
 8017c48:	4648      	mov	r0, r9
 8017c4a:	f7fd fe7f 	bl	801594c <_Bfree>
 8017c4e:	4654      	mov	r4, sl
 8017c50:	6922      	ldr	r2, [r4, #16]
 8017c52:	1c51      	adds	r1, r2, #1
 8017c54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017c58:	6121      	str	r1, [r4, #16]
 8017c5a:	2101      	movs	r1, #1
 8017c5c:	6151      	str	r1, [r2, #20]
 8017c5e:	e7bc      	b.n	8017bda <__gethex+0x396>
 8017c60:	6921      	ldr	r1, [r4, #16]
 8017c62:	4559      	cmp	r1, fp
 8017c64:	dd0b      	ble.n	8017c7e <__gethex+0x43a>
 8017c66:	2101      	movs	r1, #1
 8017c68:	4620      	mov	r0, r4
 8017c6a:	f7ff fd83 	bl	8017774 <rshift>
 8017c6e:	68bb      	ldr	r3, [r7, #8]
 8017c70:	3601      	adds	r6, #1
 8017c72:	42b3      	cmp	r3, r6
 8017c74:	f6ff aedb 	blt.w	8017a2e <__gethex+0x1ea>
 8017c78:	f04f 0801 	mov.w	r8, #1
 8017c7c:	e7c2      	b.n	8017c04 <__gethex+0x3c0>
 8017c7e:	f015 051f 	ands.w	r5, r5, #31
 8017c82:	d0f9      	beq.n	8017c78 <__gethex+0x434>
 8017c84:	9b01      	ldr	r3, [sp, #4]
 8017c86:	441a      	add	r2, r3
 8017c88:	f1c5 0520 	rsb	r5, r5, #32
 8017c8c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017c90:	f7fd ff0e 	bl	8015ab0 <__hi0bits>
 8017c94:	42a8      	cmp	r0, r5
 8017c96:	dbe6      	blt.n	8017c66 <__gethex+0x422>
 8017c98:	e7ee      	b.n	8017c78 <__gethex+0x434>
 8017c9a:	bf00      	nop
 8017c9c:	08019269 	.word	0x08019269

08017ca0 <L_shift>:
 8017ca0:	f1c2 0208 	rsb	r2, r2, #8
 8017ca4:	0092      	lsls	r2, r2, #2
 8017ca6:	b570      	push	{r4, r5, r6, lr}
 8017ca8:	f1c2 0620 	rsb	r6, r2, #32
 8017cac:	6843      	ldr	r3, [r0, #4]
 8017cae:	6804      	ldr	r4, [r0, #0]
 8017cb0:	fa03 f506 	lsl.w	r5, r3, r6
 8017cb4:	432c      	orrs	r4, r5
 8017cb6:	40d3      	lsrs	r3, r2
 8017cb8:	6004      	str	r4, [r0, #0]
 8017cba:	f840 3f04 	str.w	r3, [r0, #4]!
 8017cbe:	4288      	cmp	r0, r1
 8017cc0:	d3f4      	bcc.n	8017cac <L_shift+0xc>
 8017cc2:	bd70      	pop	{r4, r5, r6, pc}

08017cc4 <__match>:
 8017cc4:	b530      	push	{r4, r5, lr}
 8017cc6:	6803      	ldr	r3, [r0, #0]
 8017cc8:	3301      	adds	r3, #1
 8017cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cce:	b914      	cbnz	r4, 8017cd6 <__match+0x12>
 8017cd0:	6003      	str	r3, [r0, #0]
 8017cd2:	2001      	movs	r0, #1
 8017cd4:	bd30      	pop	{r4, r5, pc}
 8017cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017cde:	2d19      	cmp	r5, #25
 8017ce0:	bf98      	it	ls
 8017ce2:	3220      	addls	r2, #32
 8017ce4:	42a2      	cmp	r2, r4
 8017ce6:	d0f0      	beq.n	8017cca <__match+0x6>
 8017ce8:	2000      	movs	r0, #0
 8017cea:	e7f3      	b.n	8017cd4 <__match+0x10>

08017cec <__hexnan>:
 8017cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf0:	680b      	ldr	r3, [r1, #0]
 8017cf2:	6801      	ldr	r1, [r0, #0]
 8017cf4:	115e      	asrs	r6, r3, #5
 8017cf6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017cfa:	f013 031f 	ands.w	r3, r3, #31
 8017cfe:	b087      	sub	sp, #28
 8017d00:	bf18      	it	ne
 8017d02:	3604      	addne	r6, #4
 8017d04:	2500      	movs	r5, #0
 8017d06:	1f37      	subs	r7, r6, #4
 8017d08:	4682      	mov	sl, r0
 8017d0a:	4690      	mov	r8, r2
 8017d0c:	9301      	str	r3, [sp, #4]
 8017d0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017d12:	46b9      	mov	r9, r7
 8017d14:	463c      	mov	r4, r7
 8017d16:	9502      	str	r5, [sp, #8]
 8017d18:	46ab      	mov	fp, r5
 8017d1a:	784a      	ldrb	r2, [r1, #1]
 8017d1c:	1c4b      	adds	r3, r1, #1
 8017d1e:	9303      	str	r3, [sp, #12]
 8017d20:	b342      	cbz	r2, 8017d74 <__hexnan+0x88>
 8017d22:	4610      	mov	r0, r2
 8017d24:	9105      	str	r1, [sp, #20]
 8017d26:	9204      	str	r2, [sp, #16]
 8017d28:	f7ff fd76 	bl	8017818 <__hexdig_fun>
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	d14f      	bne.n	8017dd0 <__hexnan+0xe4>
 8017d30:	9a04      	ldr	r2, [sp, #16]
 8017d32:	9905      	ldr	r1, [sp, #20]
 8017d34:	2a20      	cmp	r2, #32
 8017d36:	d818      	bhi.n	8017d6a <__hexnan+0x7e>
 8017d38:	9b02      	ldr	r3, [sp, #8]
 8017d3a:	459b      	cmp	fp, r3
 8017d3c:	dd13      	ble.n	8017d66 <__hexnan+0x7a>
 8017d3e:	454c      	cmp	r4, r9
 8017d40:	d206      	bcs.n	8017d50 <__hexnan+0x64>
 8017d42:	2d07      	cmp	r5, #7
 8017d44:	dc04      	bgt.n	8017d50 <__hexnan+0x64>
 8017d46:	462a      	mov	r2, r5
 8017d48:	4649      	mov	r1, r9
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	f7ff ffa8 	bl	8017ca0 <L_shift>
 8017d50:	4544      	cmp	r4, r8
 8017d52:	d950      	bls.n	8017df6 <__hexnan+0x10a>
 8017d54:	2300      	movs	r3, #0
 8017d56:	f1a4 0904 	sub.w	r9, r4, #4
 8017d5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d5e:	f8cd b008 	str.w	fp, [sp, #8]
 8017d62:	464c      	mov	r4, r9
 8017d64:	461d      	mov	r5, r3
 8017d66:	9903      	ldr	r1, [sp, #12]
 8017d68:	e7d7      	b.n	8017d1a <__hexnan+0x2e>
 8017d6a:	2a29      	cmp	r2, #41	; 0x29
 8017d6c:	d155      	bne.n	8017e1a <__hexnan+0x12e>
 8017d6e:	3102      	adds	r1, #2
 8017d70:	f8ca 1000 	str.w	r1, [sl]
 8017d74:	f1bb 0f00 	cmp.w	fp, #0
 8017d78:	d04f      	beq.n	8017e1a <__hexnan+0x12e>
 8017d7a:	454c      	cmp	r4, r9
 8017d7c:	d206      	bcs.n	8017d8c <__hexnan+0xa0>
 8017d7e:	2d07      	cmp	r5, #7
 8017d80:	dc04      	bgt.n	8017d8c <__hexnan+0xa0>
 8017d82:	462a      	mov	r2, r5
 8017d84:	4649      	mov	r1, r9
 8017d86:	4620      	mov	r0, r4
 8017d88:	f7ff ff8a 	bl	8017ca0 <L_shift>
 8017d8c:	4544      	cmp	r4, r8
 8017d8e:	d934      	bls.n	8017dfa <__hexnan+0x10e>
 8017d90:	f1a8 0204 	sub.w	r2, r8, #4
 8017d94:	4623      	mov	r3, r4
 8017d96:	f853 1b04 	ldr.w	r1, [r3], #4
 8017d9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8017d9e:	429f      	cmp	r7, r3
 8017da0:	d2f9      	bcs.n	8017d96 <__hexnan+0xaa>
 8017da2:	1b3b      	subs	r3, r7, r4
 8017da4:	f023 0303 	bic.w	r3, r3, #3
 8017da8:	3304      	adds	r3, #4
 8017daa:	3e03      	subs	r6, #3
 8017dac:	3401      	adds	r4, #1
 8017dae:	42a6      	cmp	r6, r4
 8017db0:	bf38      	it	cc
 8017db2:	2304      	movcc	r3, #4
 8017db4:	4443      	add	r3, r8
 8017db6:	2200      	movs	r2, #0
 8017db8:	f843 2b04 	str.w	r2, [r3], #4
 8017dbc:	429f      	cmp	r7, r3
 8017dbe:	d2fb      	bcs.n	8017db8 <__hexnan+0xcc>
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	b91b      	cbnz	r3, 8017dcc <__hexnan+0xe0>
 8017dc4:	4547      	cmp	r7, r8
 8017dc6:	d126      	bne.n	8017e16 <__hexnan+0x12a>
 8017dc8:	2301      	movs	r3, #1
 8017dca:	603b      	str	r3, [r7, #0]
 8017dcc:	2005      	movs	r0, #5
 8017dce:	e025      	b.n	8017e1c <__hexnan+0x130>
 8017dd0:	3501      	adds	r5, #1
 8017dd2:	2d08      	cmp	r5, #8
 8017dd4:	f10b 0b01 	add.w	fp, fp, #1
 8017dd8:	dd06      	ble.n	8017de8 <__hexnan+0xfc>
 8017dda:	4544      	cmp	r4, r8
 8017ddc:	d9c3      	bls.n	8017d66 <__hexnan+0x7a>
 8017dde:	2300      	movs	r3, #0
 8017de0:	f844 3c04 	str.w	r3, [r4, #-4]
 8017de4:	2501      	movs	r5, #1
 8017de6:	3c04      	subs	r4, #4
 8017de8:	6822      	ldr	r2, [r4, #0]
 8017dea:	f000 000f 	and.w	r0, r0, #15
 8017dee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017df2:	6020      	str	r0, [r4, #0]
 8017df4:	e7b7      	b.n	8017d66 <__hexnan+0x7a>
 8017df6:	2508      	movs	r5, #8
 8017df8:	e7b5      	b.n	8017d66 <__hexnan+0x7a>
 8017dfa:	9b01      	ldr	r3, [sp, #4]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d0df      	beq.n	8017dc0 <__hexnan+0xd4>
 8017e00:	f1c3 0320 	rsb	r3, r3, #32
 8017e04:	f04f 32ff 	mov.w	r2, #4294967295
 8017e08:	40da      	lsrs	r2, r3
 8017e0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017e0e:	4013      	ands	r3, r2
 8017e10:	f846 3c04 	str.w	r3, [r6, #-4]
 8017e14:	e7d4      	b.n	8017dc0 <__hexnan+0xd4>
 8017e16:	3f04      	subs	r7, #4
 8017e18:	e7d2      	b.n	8017dc0 <__hexnan+0xd4>
 8017e1a:	2004      	movs	r0, #4
 8017e1c:	b007      	add	sp, #28
 8017e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e22 <__ascii_mbtowc>:
 8017e22:	b082      	sub	sp, #8
 8017e24:	b901      	cbnz	r1, 8017e28 <__ascii_mbtowc+0x6>
 8017e26:	a901      	add	r1, sp, #4
 8017e28:	b142      	cbz	r2, 8017e3c <__ascii_mbtowc+0x1a>
 8017e2a:	b14b      	cbz	r3, 8017e40 <__ascii_mbtowc+0x1e>
 8017e2c:	7813      	ldrb	r3, [r2, #0]
 8017e2e:	600b      	str	r3, [r1, #0]
 8017e30:	7812      	ldrb	r2, [r2, #0]
 8017e32:	1e10      	subs	r0, r2, #0
 8017e34:	bf18      	it	ne
 8017e36:	2001      	movne	r0, #1
 8017e38:	b002      	add	sp, #8
 8017e3a:	4770      	bx	lr
 8017e3c:	4610      	mov	r0, r2
 8017e3e:	e7fb      	b.n	8017e38 <__ascii_mbtowc+0x16>
 8017e40:	f06f 0001 	mvn.w	r0, #1
 8017e44:	e7f8      	b.n	8017e38 <__ascii_mbtowc+0x16>

08017e46 <_realloc_r>:
 8017e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e4a:	4680      	mov	r8, r0
 8017e4c:	4614      	mov	r4, r2
 8017e4e:	460e      	mov	r6, r1
 8017e50:	b921      	cbnz	r1, 8017e5c <_realloc_r+0x16>
 8017e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e56:	4611      	mov	r1, r2
 8017e58:	f7fb bd14 	b.w	8013884 <_malloc_r>
 8017e5c:	b92a      	cbnz	r2, 8017e6a <_realloc_r+0x24>
 8017e5e:	f7fd fce9 	bl	8015834 <_free_r>
 8017e62:	4625      	mov	r5, r4
 8017e64:	4628      	mov	r0, r5
 8017e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e6a:	f000 f8ad 	bl	8017fc8 <_malloc_usable_size_r>
 8017e6e:	4284      	cmp	r4, r0
 8017e70:	4607      	mov	r7, r0
 8017e72:	d802      	bhi.n	8017e7a <_realloc_r+0x34>
 8017e74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e78:	d812      	bhi.n	8017ea0 <_realloc_r+0x5a>
 8017e7a:	4621      	mov	r1, r4
 8017e7c:	4640      	mov	r0, r8
 8017e7e:	f7fb fd01 	bl	8013884 <_malloc_r>
 8017e82:	4605      	mov	r5, r0
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d0ed      	beq.n	8017e64 <_realloc_r+0x1e>
 8017e88:	42bc      	cmp	r4, r7
 8017e8a:	4622      	mov	r2, r4
 8017e8c:	4631      	mov	r1, r6
 8017e8e:	bf28      	it	cs
 8017e90:	463a      	movcs	r2, r7
 8017e92:	f7fc fe40 	bl	8014b16 <memcpy>
 8017e96:	4631      	mov	r1, r6
 8017e98:	4640      	mov	r0, r8
 8017e9a:	f7fd fccb 	bl	8015834 <_free_r>
 8017e9e:	e7e1      	b.n	8017e64 <_realloc_r+0x1e>
 8017ea0:	4635      	mov	r5, r6
 8017ea2:	e7df      	b.n	8017e64 <_realloc_r+0x1e>

08017ea4 <__ascii_wctomb>:
 8017ea4:	b149      	cbz	r1, 8017eba <__ascii_wctomb+0x16>
 8017ea6:	2aff      	cmp	r2, #255	; 0xff
 8017ea8:	bf85      	ittet	hi
 8017eaa:	238a      	movhi	r3, #138	; 0x8a
 8017eac:	6003      	strhi	r3, [r0, #0]
 8017eae:	700a      	strbls	r2, [r1, #0]
 8017eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8017eb4:	bf98      	it	ls
 8017eb6:	2001      	movls	r0, #1
 8017eb8:	4770      	bx	lr
 8017eba:	4608      	mov	r0, r1
 8017ebc:	4770      	bx	lr

08017ebe <__swhatbuf_r>:
 8017ebe:	b570      	push	{r4, r5, r6, lr}
 8017ec0:	460c      	mov	r4, r1
 8017ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ec6:	2900      	cmp	r1, #0
 8017ec8:	b096      	sub	sp, #88	; 0x58
 8017eca:	4615      	mov	r5, r2
 8017ecc:	461e      	mov	r6, r3
 8017ece:	da0d      	bge.n	8017eec <__swhatbuf_r+0x2e>
 8017ed0:	89a3      	ldrh	r3, [r4, #12]
 8017ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017ed6:	f04f 0100 	mov.w	r1, #0
 8017eda:	bf0c      	ite	eq
 8017edc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017ee0:	2340      	movne	r3, #64	; 0x40
 8017ee2:	2000      	movs	r0, #0
 8017ee4:	6031      	str	r1, [r6, #0]
 8017ee6:	602b      	str	r3, [r5, #0]
 8017ee8:	b016      	add	sp, #88	; 0x58
 8017eea:	bd70      	pop	{r4, r5, r6, pc}
 8017eec:	466a      	mov	r2, sp
 8017eee:	f000 f849 	bl	8017f84 <_fstat_r>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	dbec      	blt.n	8017ed0 <__swhatbuf_r+0x12>
 8017ef6:	9901      	ldr	r1, [sp, #4]
 8017ef8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017efc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017f00:	4259      	negs	r1, r3
 8017f02:	4159      	adcs	r1, r3
 8017f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f08:	e7eb      	b.n	8017ee2 <__swhatbuf_r+0x24>

08017f0a <__smakebuf_r>:
 8017f0a:	898b      	ldrh	r3, [r1, #12]
 8017f0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f0e:	079d      	lsls	r5, r3, #30
 8017f10:	4606      	mov	r6, r0
 8017f12:	460c      	mov	r4, r1
 8017f14:	d507      	bpl.n	8017f26 <__smakebuf_r+0x1c>
 8017f16:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f1a:	6023      	str	r3, [r4, #0]
 8017f1c:	6123      	str	r3, [r4, #16]
 8017f1e:	2301      	movs	r3, #1
 8017f20:	6163      	str	r3, [r4, #20]
 8017f22:	b002      	add	sp, #8
 8017f24:	bd70      	pop	{r4, r5, r6, pc}
 8017f26:	ab01      	add	r3, sp, #4
 8017f28:	466a      	mov	r2, sp
 8017f2a:	f7ff ffc8 	bl	8017ebe <__swhatbuf_r>
 8017f2e:	9900      	ldr	r1, [sp, #0]
 8017f30:	4605      	mov	r5, r0
 8017f32:	4630      	mov	r0, r6
 8017f34:	f7fb fca6 	bl	8013884 <_malloc_r>
 8017f38:	b948      	cbnz	r0, 8017f4e <__smakebuf_r+0x44>
 8017f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f3e:	059a      	lsls	r2, r3, #22
 8017f40:	d4ef      	bmi.n	8017f22 <__smakebuf_r+0x18>
 8017f42:	f023 0303 	bic.w	r3, r3, #3
 8017f46:	f043 0302 	orr.w	r3, r3, #2
 8017f4a:	81a3      	strh	r3, [r4, #12]
 8017f4c:	e7e3      	b.n	8017f16 <__smakebuf_r+0xc>
 8017f4e:	89a3      	ldrh	r3, [r4, #12]
 8017f50:	6020      	str	r0, [r4, #0]
 8017f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f56:	81a3      	strh	r3, [r4, #12]
 8017f58:	9b00      	ldr	r3, [sp, #0]
 8017f5a:	6163      	str	r3, [r4, #20]
 8017f5c:	9b01      	ldr	r3, [sp, #4]
 8017f5e:	6120      	str	r0, [r4, #16]
 8017f60:	b15b      	cbz	r3, 8017f7a <__smakebuf_r+0x70>
 8017f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f66:	4630      	mov	r0, r6
 8017f68:	f000 f81e 	bl	8017fa8 <_isatty_r>
 8017f6c:	b128      	cbz	r0, 8017f7a <__smakebuf_r+0x70>
 8017f6e:	89a3      	ldrh	r3, [r4, #12]
 8017f70:	f023 0303 	bic.w	r3, r3, #3
 8017f74:	f043 0301 	orr.w	r3, r3, #1
 8017f78:	81a3      	strh	r3, [r4, #12]
 8017f7a:	89a3      	ldrh	r3, [r4, #12]
 8017f7c:	431d      	orrs	r5, r3
 8017f7e:	81a5      	strh	r5, [r4, #12]
 8017f80:	e7cf      	b.n	8017f22 <__smakebuf_r+0x18>
	...

08017f84 <_fstat_r>:
 8017f84:	b538      	push	{r3, r4, r5, lr}
 8017f86:	4d07      	ldr	r5, [pc, #28]	; (8017fa4 <_fstat_r+0x20>)
 8017f88:	2300      	movs	r3, #0
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	4608      	mov	r0, r1
 8017f8e:	4611      	mov	r1, r2
 8017f90:	602b      	str	r3, [r5, #0]
 8017f92:	f7f1 fc84 	bl	800989e <_fstat>
 8017f96:	1c43      	adds	r3, r0, #1
 8017f98:	d102      	bne.n	8017fa0 <_fstat_r+0x1c>
 8017f9a:	682b      	ldr	r3, [r5, #0]
 8017f9c:	b103      	cbz	r3, 8017fa0 <_fstat_r+0x1c>
 8017f9e:	6023      	str	r3, [r4, #0]
 8017fa0:	bd38      	pop	{r3, r4, r5, pc}
 8017fa2:	bf00      	nop
 8017fa4:	20000ae8 	.word	0x20000ae8

08017fa8 <_isatty_r>:
 8017fa8:	b538      	push	{r3, r4, r5, lr}
 8017faa:	4d06      	ldr	r5, [pc, #24]	; (8017fc4 <_isatty_r+0x1c>)
 8017fac:	2300      	movs	r3, #0
 8017fae:	4604      	mov	r4, r0
 8017fb0:	4608      	mov	r0, r1
 8017fb2:	602b      	str	r3, [r5, #0]
 8017fb4:	f7f1 fc83 	bl	80098be <_isatty>
 8017fb8:	1c43      	adds	r3, r0, #1
 8017fba:	d102      	bne.n	8017fc2 <_isatty_r+0x1a>
 8017fbc:	682b      	ldr	r3, [r5, #0]
 8017fbe:	b103      	cbz	r3, 8017fc2 <_isatty_r+0x1a>
 8017fc0:	6023      	str	r3, [r4, #0]
 8017fc2:	bd38      	pop	{r3, r4, r5, pc}
 8017fc4:	20000ae8 	.word	0x20000ae8

08017fc8 <_malloc_usable_size_r>:
 8017fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fcc:	1f18      	subs	r0, r3, #4
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	bfbc      	itt	lt
 8017fd2:	580b      	ldrlt	r3, [r1, r0]
 8017fd4:	18c0      	addlt	r0, r0, r3
 8017fd6:	4770      	bx	lr

08017fd8 <_init>:
 8017fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fda:	bf00      	nop
 8017fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fde:	bc08      	pop	{r3}
 8017fe0:	469e      	mov	lr, r3
 8017fe2:	4770      	bx	lr

08017fe4 <_fini>:
 8017fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fe6:	bf00      	nop
 8017fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fea:	bc08      	pop	{r3}
 8017fec:	469e      	mov	lr, r3
 8017fee:	4770      	bx	lr
